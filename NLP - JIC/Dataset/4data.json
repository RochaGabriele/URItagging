[
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de batalhas em que a guilda em que Rafael está participando ganhou uma batalha. Note que empates não são considerados vitórias.",
        "numero": "1527",
        "titulo": "Guildas",
        "descricao": "Rafael está jogando um novo e excitante jogo de RPG, e acaba de notar a existência de algo chamado Guilda. Para aqueles que não sabem, Guilda se trata de um grupo de jogadores que se unem com um objetivo em comum dentro do jogo, tirando assim vantagem do trabalho em equipe. O jogo que Rafael joga tem um sistema de GVG (Guilda versus Guilda) bem disputado, e logo percebeu que deveria tomar algumas providencias para se sair bem nessas batalhas. O sistema de GVG funciona da seguinte maneira: a batalha acontece entre duas guildas, e vence a guilda que tiver o maior número de pontos. O número de pontos de uma guilda é dado pela soma do número de pontos de todos os jogadores presentes na guilda. Cada jogador tem um número de pontos, que corresponde ao seu nível atual. Considere que inicialmente, todos os jogadores fazem parte de uma guilda, contendo apenas o próprio jogador. A união entre duas guildas faz com que todos os jogadores de ambas as guildas passem a participar apenas de uma guilda, e a outra deixa de existir. Dada uma lista de ações no decorrer do jogo, entre elas união entre duas guildas e batalhas entre duas guildas, diga o número de vezes em que a guilda em que Rafael estava saiu vitoriosa de uma batalha.",
        "nivel": "",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (1 ≤ N ≤ 10⁵, 1 ≤ M ≤ 5 * 10⁵), representando o número de jogadores dentro do jogo, e o número de ações no decorrer do jogo, respectivamente. Em seguida haverá N inteiros Pi (1 ≤ Pi ≤ 100), onde o i-ésimo inteiro representa o número de pontos que o i-ésimo jogador tem, para todo 1 ≤ i ≤ N. Rafael é o jogador número 1, sempre. Em seguida, haverá M linhas, contendo três inteiros cada, Q, A e B (1 ≤ Q ≤ 2, 1 ≤ A, B ≤ N), representando o tipo da ação, e as duas guildas envolvidas na ação. Se Q for igual a 1, significa que a guilda que contém o jogador A e a guilda que contém o jogador B estão se unindo. Se Q for igual a 2, significa que a guilda que contém o jogador A e a guilda que contém o jogador B participarão de uma batalha. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado."
    },
    {
        "assunto": "4",
        "saida": "Para cada operação 1, imprima uma única linha contendo a quantidade de ocorrências do caractere C no intervalo entre as posições A e B. Para cada operação 2, imprima a primeira e a última ocorrência do caractere C no intervalo entre as posições A e B. Caso não exista o caractere C no intervalo, imprima -1. Ao final das N operações, imprima a string resultante das operações.",
        "numero": "2186",
        "titulo": "Bino, Prant e a Indecisao",
        "descricao": "Como você já deve saber, Prant é um garoto muito indeciso, de tal modo que foi muito difícil escolher o nome do seu cachorro. Depois de Prant escolher o nome S para seu cachorro, Bino propôs um desafio.  O desafio de Bino consiste em N rodadas, e em cada rodada pode ser realizada uma das seguintes operações sobre o nome S: 1 A B C: Retornar a quantidade de ocorrências de um caractere C no intervalo entre as posições A e B. Por exemplo, para S = “abcda”, A = 1, B = 5 e C = ‘a’, a resposta é 2. 2 A B C: Encontrar a primeira e a última ocorrência de um caractere C no intervalo entre as posições A e B. Por exemplo, para S = “abcda”, A = 1, B = 5 e C = ‘a’, a primeira ocorrência de C é na posição 1, e a última é na posição 5. 3 A B: Inverter todas as letras no intervalo entre as posições A e B. Por exemplo, para S = “abcd”, A = 2 e B = 4, após a operação, S = “adcb”. 4 A C: Adicionar um caractere C antes o caractere da posição A. Por exemplo, para S = “abcd”, A = 2 e C = ‘z’, após a operação, S = “azbcd”.",
        "nivel": "",
        "entrada": "A primeira linha da entrada consiste de dois inteiros L ( 1 ≤ L ≤  106) e N ( 1 ≤ N ≤  105), representando a quantidade de letras que formam inicialmente o nome S, e a quantidade de rodas, respectivamente. A segunda linha contém uma string S, representando o nome inicial do cachorro de Prant. Então, seguiram N linhas, representando as N operações realizadas. É garantido que a string S contém apenas letras minúsculas do alfabeto."
    },
    {
        "assunto": "4",
        "saida": "Para cada alteração nas pilhas do jogo, você deverá imprimir \"Possivel\", se Dabriel tem chance de ganhar, ou \"Impossivel\", caso contrário.",
        "numero": "2185",
        "titulo": "Brincando com Pomekons",
        "descricao": "Depois de capturar muitos Pomekons, Dabriel e Guarte resolveram criar um jogo com os monstrinhos e quem vencesse ficaria com todos eles. O jogo criado funciona da seguinte maneira: Todos os Pomekons são separados em N pilhas, elas não terão necessariamente a mesma quantidade de monstrinhos, o jogador da rodada escolhe uma pilha e remove um ou mais Pomekons dela. O jogo termina quando não existe nenhum monstrinho para ser selecionado, e o jogador desta rodada é considerado o perdedor. Como Dabriel é sempre o primeiro a jogar e nas últimas rodadas ele está ganhando, Guarte está desconfiado que Dabriel descobriu um macete do jogo, portanto ele propôs uma nova regra. Na nova versão do jogo Guarte irá escolher três inteiros X, Y e V, e a quantidade de monstrinhos em cada pilha entre X e Y, inclusive, irão ter a quantidade V de Pomekons. Dabriel aceitou a proposta, mas ele solicitou sua ajuda para dizer se ele terá chance de ganhar sempre que houver uma modificação nas pilhas. Como Dabriel e Guarte estão muito bons neste jogo, você pode assumir que ambos sempre jogam da melhor maneira possível.",
        "nivel": "",
        "entrada": "A primeira linha do caso de teste consiste de dois inteiros N (1 ≤ N ≤ 10⁵) e M (1 ≤ M ≤ 10⁵), representando a quantidade de pilhas e a quantidade de alterações que serão feitas respectivamente. A segunda linha consiste de N inteiros vi (1 ≤ i ≤ N, 0 ≤ vi ≤ 10⁴), representando a quantidade de Pomekons que a pilha i contém. As próximas M linhas consistem de três inteiros X, Y, V (1 ≤ X ≤ Y ≤ N, 1 ≤ V ≤ 10⁴), descrevendo as alterações que Guarte irá realizar."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste de entrada, imprima uma linha contendo os valores das alturas de todos os moradores da cidade (em cm), por ordem crescente de altura, separados por um espaço em branco. Obs.: O arquivo de entrada é bastante grande, portanto, utilize um método rápido para leitura / escrita.",
        "numero": "1566",
        "titulo": "Altura",
        "descricao": "Cheio de boas ideias, agora o governo brasileiro resolveu criar a \"bolsa altura\". Desta forma, você foi incumbido de fazer o levantamento da altura da população de várias cidades e ordenar esta população por ordem crescente de altura. Você sabe que as cidades as quais terá que fazer isso tem menos de 3 milhões de habitantes e que ninguém, segundo o IBGE, tem mais do que 230 cm de altura nestas cidades.",
        "nivel": "",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro NC (NC < 100) que indica a quantidade de casos de teste, ou seja de cidades. Para cada caso de teste, a primeira linha conterá um inteiro N (1 < N ≤ 3000000), indicando a quantidade de pessoas da cidade. A próxima linha irá conter a altura de cada uma destas pessoas, em centímetros, representado pela letra h (20 ≤ h  ≤ 230) e separados por um espaço em branco."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de alunos que não precisaram trocar de lugar mesmo após a fila ser reordenada.",
        "numero": "1548",
        "titulo": "Fila do Recreio",
        "descricao": "Na escola onde você estuda, a hora do recreio é a mais aguardada pela grande maioria dos alunos. Não só porque as vezes as aulas são cansativas, mas sim porque a merenda servida é muito boa, preparada por um chefe italiano muito caprichoso. Quando bate o sinal para a hora do recreio, todos os alunos saem correndo da sua sala para chegar o mais cedo possível na cantina, tanta é a vontade de comer. Um de seus professores notou, porém, que havia ali uma oportunidade. Utilizando um sistema de recompensa, seu professor de matemática disse que a ordem da fila para se servir será dada não pela ordem de chegada, mas sim pela soma das notas obtidas em sala de aula. Assim, aqueles com maior nota poderão se servir antes daqueles que tem menor nota. Sua tarefa é simples: dada a ordem de chegada dos alunos na cantina, e as suas respectivas notas na matéria de matemática, reordene a fila de acordo com as notas de matemática, e diga quantos alunos não precisaram trocar de lugar nessa reordenação.",
        "nivel": "",
        "entrada": "A primeira linha contém um inteiro N, indicando o número de casos de teste a seguir. Cada caso de teste inicia com um inteiro M (1 ≤ M ≤ 1000), indicando o número de alunos. Em seguida haverá M inteiros distintos Pi (1 ≤ Pi ≤ 1000), onde o i-ésimo inteiro indica a nota do i-ésimo aluno. Os inteiros acima são dados em ordem de chegada, ou seja, o primeiro inteiro diz respeito ao primeiro aluno a chegar na fila, o segundo inteiro diz respeito ao segundo aluno, e assim sucessivamente."
    },
    {
        "assunto": "4",
        "saida": "Imprima uma linha revelando o placar final do jogo de acordo com os eventos fornecidos e com as regras descritas. Os exemplos esclarecem o formato em que o placar deve ser impresso.",
        "numero": "1587",
        "titulo": "BIT Park",
        "descricao": "A Final Nacional da Maratona de Programação da Sociedade Brasileira de Computação (SBC) de 2014 será em Fortaleza, e os desbravadores maratonistas chapecoenses, ansiosos, já começam a fazer as malas, esperançosos da classificação na Etapa Regional. A capital do Ceará, com uma população de 2.551.805 habitantes (segundo o Censo Populacional de 2013 do IBGE), é mundialmente conhecida por suas belas praias, seus luxuosos hotéis, pousadas e restaurantes, suas magníficas obras de Arquitetura, seu povo alegre e hospitaleiro, e também pelos seus extraordinários parques aquáticos. Visando derrubar a hegemonia do maior parque aquático da cidade, uma empresa local de TI, denominada NCC (Núcleo de Computação Cearense), construiu um parque aquático maior ainda, denominado BIT Park, o qual será inaugurado ainda neste ano. Para a inauguração toda a população da cidade foi convidada, e o NCC promete várias atividades para entreter o povo a tarde toda. Uma das atividades previstas para a inauguração ocorrerá na maior piscina do BIT Park: um colossal jogo de futebol aquático, do qual poderão participar todos os habitantes de Fortaleza, já que a piscina em questão possui nada mais nada menos que 1 km de largura por 2 km de comprimento. O futebol aquático funciona basicamente como o futebol convencional, mas com algumas diferenças: o jogo ocorre dentro d'água, então, a bola é passada com as mãos, não com os pés; o jogo pode ser jogado por qualquer número par de jogadores, desde que haja o mesmo número de jogadores nos dois times --- e desde que todos os jogadores caibam na piscina; não há goleiros, já que todos os jogadores podem defender a bola com as mãos; assim como no futebol convencional, a legalidade da posição de um jogador é avaliada de acordo com a linha paralela à linha do gol adversário em que se encontra, considerando-se também as linhas em que se encontram os jogadores adversários: a posição de um jogador J é considerada ilegal — e o jogador, consequentemente, considerado impedido — se menos de 2/11 dos jogadores adversários encontram-se em linhas mais próximas da linha do gol adversário que a linha em que se encontra J; apenas pode pegar a bola um jogador que esteja numa posição legal, diferentemente do que ocorre no futebol convencional, em que o impedimento é avaliado no momento do passe, não no momento da recepção. Na Figura, em que o time A joga contra o time B, estão impedidos os jogadores A4 e A5. O NCC percebeu que avaliar as legalidades das posições dos jogadores durante o jogo seria impraticável; afinal, toda a população de Fortaleza poderia estar na piscina. A decisão, então, foi deixar o jogo rolar para depois reavaliar todos os eventos e recalcular o placar através de um programa. A partir do momento em que um jogador impedido recebe a bola, o próximo gol que ocorre na partida deve ser anulado, a menos que a bola saia da piscina. No início do jogo, e toda vez que a bola sai da piscina ou que ocorre algum gol, o árbitro sorteia um jogador qualquer — não necessariamente não impedido — e lhe concede a bola para dar continuidade à atividade.",
        "nivel": "",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste é composta por dois inteiros N e E (1 < N < 2.551.805, 1 < E < 104), os quais encerram a entrada quando são ambos nulos. N é um número par que indica o número de fortalezenses que participaram do jogo. E é o número de eventos que aconteceram durante o jogo. Os times são chamados de A e de B, e os jogadores, de A1, A2, A3… e de B1, B2, B3… Todas as posições são determinadas pela distância em milímetros da linha do gol do time A, ou seja, o gol do time A está na posição 0 e o gol do time B está na posição 2.000.000. A segunda linha de um caso de teste contém N / 2 inteiros xiA (0 ≤ xiA ≤ 2.000.000, 1 ≤ i ≤ N / 2), indicando cada xiA a posição do jogador Ai no início da partida. De igual modo, a terceira linha contém N / 2 inteiros xiB (0 ≤ xiB ≤ 2.000.000, 1 ≤ i ≤ N / 2), indicando cada xiB a posição inicial do jogador Bi. Seguem, então, E linhas, cada uma descrevendo um evento do jogo. O quadro abaixo lista todos os eventos possíveis e como cada um deles é descrito na entrada. I Xi o árbitro concede a bola ao jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2 ) para iniciar uma jogada M Xi x o jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2) se movimenta para a posição X (0 ≤ X ≤ 2000000) P Xi a bola passa para as mãos do jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2) G X a bola entra no gol do time X (X ∈ {A, B}) S a bola sai da piscina Assuma que um evento I ocorre se e somente se é o primeiro evento da partida ou o evento anterior é um evento G ou S."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso imprima a soma dos maiores elementos de cada sub-vetor.",
        "numero": "1594",
        "titulo": "Guloso",
        "descricao": "Dado um vetor de inteiros de tamanho N e um inteiro K, ache o maior elemento para cada sub-vetor contínuo de tamanho K. Imprima a soma de todos estes valores. Exemplo 1: Se tivermos o vetor [3, 2, 1, 4, 10] e K for 3, então temos que considerar os sub-vetores [3, 2, 1], [2, 1, 4] e [1, 4, 10]. O maior elemento de cada sub-vetor vale 3, 4 e 10, somando o total de 17. Exemplo 2: Se tivermos o vetor [1, 2, 3, 4, 5, 6] e K for 2, então temos que considerar os sub-vetores [1, 2], [2, 3], [3, 4], [4, 5] e [5, 6]. O maior elemento de cada sub-vetor vale 2, 3, 4, 5 e 6 somando o total de 20. Exemplo 3: Se tivermos o vetor [5, 4, 3] e K for 1, então temos que considerar os sub-vetores [5], [4] e [3]. O maior elemento de cada sub-vetor vale 5, 4 e 3 somando o total de 12.",
        "nivel": "",
        "entrada": "A entrada para esse problema é bem singular, leia com atenção! Na primeira linha você terá um inteiro T (T = 200) indicando o número de casos de teste. Para cada caso você receberá três números inteiros, N (1 ≤ N ≤ 104* ou 1 ≤ N ≤ 106**), K (1 ≤ K ≤ N) e S (0 ≤ S ≤ 109). Para gerar o vetor de inteiros, use o seguinte código em C/C++ em que recomendamos que você copie (control+C) do enunciado: array[0] = S; for (i = 1; i < N; ++i)     array[i] = (1LL*array[i-1]*1103515245 + 12345) % (2147483648LL); É garantido que existe uma solução que não se baseia nas propriedades do gerador da entrada acima. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, imprima o valor inteiro que representa a soma, para todos os processos, do tempo, em ciclos de processamento, que cada processo espera até entrar em execução. Por favor, note que este valor pode não caber em 32 bits.",
        "numero": "1633",
        "titulo": "SBC",
        "descricao": "A Federação dos Apagadores e Celulares Esquisitos (FACE) assinou recentemente um contrato com o Governo Federal para desenvolver um telefone celular de baixo custo que será distribuído gratuitamente a populações de baixa renda. Apesar de simples, o aparelho contará com uma série de aplicativos, a fim de que as pessoas possam desfrutar de todas as facilidades que as plataformas móveis proporcionam. Um desafio, contudo, está intrigando os programadores da FACE: o aparelho não dispõe de muitos recursos de hardware, e os programadores estão tendo dificuldades em escrever o módulo que gerenciará os processos do sistema operacional SBC (Sistema Bonito para Celulares), desenvolvido especialmente para a arquitetura. Os programadores receberam dos analistas as seguintes diretivas, as quais precisam ser rigorosamente seguidas: O sistema executa apenas um processo por vez, e cada processo até o fim. O sistema jamais pode ficar ocioso se há processos esperando para serem atendidos. Para que um processo não trave o sistema, cada processo, quando requisita sua execução, deve informar ao sistema o tempo exato, em ciclos de processamento, que sua execução durará. O sistema jamais permite que a execução de um processo dure mais que o tempo previsto, abortando-a se necessário. Ainda, se um processo se encerra antes do informado, o sistema aproveita os ciclos restantes para rotinas de coleta de dados e comunicação com o Governo. Dessarte, para todos os efeitos, a execução de um processo que informou precisar de c ciclos dura sempre exatos c ciclos. O sistema garante que é mínima a soma, para todos os processos, do tempo que cada processo espera até entrar em execução. Ajude a FACE a completar o SBC escrevendo o módulo que falta!",
        "nivel": "",
        "entrada": "A entrada é composta por vários casos de teste. A primeira linha de cada caso de teste consiste de um único inteiro N (1 ≤ N ≤ 105), o qual representa o número de processos que requisitaram sua execução ao SBC. Cada uma das N linhas seguintes corresponde, então, a um processo e é formada por dois inteiros t e c (1 ≤ t, c ≤ 103), os quais representavam respectivamente o tempo do sistema em que o processo fez sua requisição e o número de ciclos de processamento que durará a execução do processo. Considere que o tempo do sistema é contado em ciclos de processamento e que o contador começa em 1 em cada caso de teste. Considere ainda que a entrada é finalizada em fim de arquivo."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima uma linha, contendo a palavra “Sim”, caso seja possível que todos os N motoristas façam uso do estacionamento, ou “Nao” caso contrário.",
        "numero": "1523",
        "titulo": "Estacionamento Linear",
        "descricao": "Após muito tempo juntando dinheiro, Rafael finalmente conseguiu comprar seu carro (parcelado, é claro). Chega de pegar ônibus, agora sua vida será mais fácil. Pelo menos isso é o que ele pensava, até ouvir falar do estacionamento perto da faculdade onde ele decidiu estacionar o carro todos os dias. O estacionamento tem apenas um corredor, com largura o suficiente para acomodar um carro, e profundidade suficiente para acomodar K carros, um atrás do outro. Como este estacionamento só tem um portão, só é possível entrar e sair por ele. Quando o primeiro carro entra no estacionamento, o mesmo ocupa a posição próxima à parede, ao fundo do estacionamento. Todos os próximos carros estacionam logo atrás dele, formando uma fila. Obviamente, não é possível que um carro passe por cima de outro, portanto só é possível que um carro saia do estacionamento se ele for o último da fila. Dados o horário de chegada e saída prevista de N motoristas, incluindo Rafael, diga se é possível que todos consigam estacionar e remover seus carros no estacionamento citado.",
        "nivel": "",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e K (3 ≤ N ≤ 10⁴, 1 ≤ K ≤ 10³), representando o número de motoristas que farão uso do estacionamento, e o número de carros que o estacionamento consegue comportar, respectivamente. Em seguida haverá N linhas, cada uma contendo dois inteiros Ci e Si (1 ≤ Ci, Si ≤ 10⁵), representando, respectivamente, o horário de chegada e saída do motorista i (1 ≤ i ≤ N). Os valores de Ci são dados de forma crescente, ou seja, Ci < Ci+1 para todo 1 ≤ i < N. Não haverá mais de um motorista que chegam ao mesmo tempo, e nem mais de um motorista que saiam ao mesmo tempo. É possível que um motorista consiga estacionar no mesmo momento em que outro motorista deseja sair. O último caso de teste é indicado quando N = K = 0, o qual não deverá ser processado."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, imprima uma linha contendo o número mínimo de hotéis nos quais a companhia de transportes deve realizar reserva para uma entrega da cidade 1 à cidade n. Se não for possível encontrar uma rota que o motorista tenha de dirigir no máximo 10 horas por dia, imprima -1.",
        "numero": "1640",
        "titulo": "Reservando Hotéis",
        "descricao": "Uma companhia de transportes frequentemente necessita transportar bens de uma cidade para outra. A companhia de transportes fez um acordo especial com uma rede de hotéis que permite que seus motoristas fiquem hospedados nos hotéis desta rede gratuitamente. Os motoristas podem dirigir apenas 10 horas por dia. A companhia de transportes deseja encontrar uma rota que parte da cidade inicial e termina na cidade de destino tal que o motorista possa sempre passar a noite em um dos hotéis da rede, e que este precise dirigir no máximo 10 horas de um hotel até o próximo, ou até o destino. Naturalmente, o número de dias necessários para a entrega ser realizada também deve ser minimizado.",
        "nivel": "",
        "entrada": "O arquivo de entrada contém diversos casos de teste. Cada caso de teste começa com uma linha contendo um inteiro n, (2 ≤ n ≤ 10000), indicando o número de cidades a serem consideradas durante o planejamento. Por simplicidade, as cidades são numeradas de 1 a n, onde 1 é a cidade inicial, e n é a cidade de destino. A próxima linha contem um inteiro h seguido pelos números c1, c2, ..., ch indicando o número de cidades nas quais os hotéis da rede estão localizados. Você pode assumir que 0 ≤ h ≤ min(n, 100). A terceira linha de cada caso de teste contém um inteiro m(1 ≤ m ≤ 105), que representa o número de estradas a serem consideradas para o planejamento da rota. As m linhas seguintes descrevem as estradas. Cada estrada é descrita por uma linha contendo três inteiros a, b, t(1 ≤ a, b ≤ n e t ≤ 600) onde a, b são duas cidades conectadas pela estrada, e t é o tempo em minutos necessário para o motorista dirigir do final de uma estrada ao outro. A entrada acaba quando n = 0."
    },
    {
        "assunto": "4",
        "saida": "Cada linha da entrada é codificada separadamente como descrito acima. A nova linha no final de cada linha não é codificada, mas é passada diretamente para a saída.",
        "numero": "1673",
        "titulo": "Codificação Run-length",
        "descricao": "Sua tarefa é escrever um programa que realiza uma simples Codificação Run-Length, como descrita nas regras abaixo. Qualquer sequencia entre 2 e 9 caracteres idênticos é codificada por dois caracteres. O primeiro caractere é a largura da sequência, representada por um dos caracteres entre 2 a 9. O segundo caractere é o valor do caractere repetido. Uma sequência de mais de 9 caracteres identicos repetidos é resolvida com primeiro codificando 9 caracteres, depois os caracteres restantes. Qualquer sequência de caracteres que não contém repetições consecutivas de qualquer caracteres é representada por um caractere '1' seguido da sequência de caracteres e terminado com outro '1'. Se um '1' aparecer como parte da sequencia, ele será terminado com um '1', tendo então dois caracteres '1' como saída.",
        "nivel": "",
        "entrada": "A entrada consiste de letras(maiúsculas e minúsculas), digitos, espaços e pontuação. Toda linha é terminada com um caractere terminador de linha."
    },
    {
        "assunto": "4",
        "saida": "Se houver apenas um único número N em uma única linha, imprima dois números inteiros não negativos a e b, tal que a * a - b * b = N. Se o número não pode ser expresso em tal formato, então imprima a mensagem “Bachelor Number.” em uma única linha caso esse número seja par e imprima a mensagem “Spinster Number.” caso esse número seja ímpar. Se existirem dois números n1 e n2 na entrada então imprima quantos números \"bachelor\" estão entre n1 e n2 (incluindo n1 e n2). Observe que (n1 ≤ n2 e (n2 - n1) ≤ 1000000).",
        "numero": "1535",
        "titulo": "Números Casal-Solteirão-Solteirona",
        "descricao": "Pode qualquer número ser expresso como uma subtração de dois quadrados? Os números, que podem ser expressos de tal forma, são chamados de números \"square-couple\" ou, traduzindo, casal quadrado. Seu trabalho é descobrir: a) Se um número é um número casal quadrado.  b) Se o número for casal quadrado então encontre esse forma de expressá-lo. c) Descubra quantos números casal quadrado estão dentro de um determinado intervalo (incluindo os números das pontas).",
        "nivel": "",
        "entrada": "Cada conjunto de entrada é dado por uma única linha. Cada conjunto de entrada pode conter um ou dois números inteiros de 32 bits com sinal. A entrada é terminada por EOF (Fim de Arquivo)."
    },
    {
        "assunto": "4",
        "saida": "Para cada valor lido, deve ser impresso na tela o elemento na n-ésima posição da sequência alienígena, sempre com uma quebra de linha.",
        "numero": "1538",
        "titulo": "Sequência Alienígena",
        "descricao": "Recentemente foi descoberto um planeta intitulado como Gliese 581g. Ele tem apenas três vezes a massa da Terra, e está à 20 anos-luz de distancia, orbitando uma estrela da constelação de Libra conhecida como Gliese 581, uma anã vermelha. Astrônomos da Universidade da Califórnia e da Carnegie Institution de Washington afirmam que o planeta é o primeiro a apresentar potencial real para conter vida. Eles disseram que essa descoberta só foi possível através da análise de antigas escrituras egípcias, remanescentes da biblioteca de Alexandria. Foram encontradas anotações com uma sequencia estranha, que supostamente indicaria as posições dos planetas com vida no universo. Cada elemento é traduzido em coordenadas tridimensionais utilizando um algoritmo extremamente complexo descrito nas anotações, no entanto o algoritmo para cálculo da sequencia se perdeu por causa das páginas queimadas no incêndio da biblioteca. O livro contém apenas os oito primeiros valores dessa sequência, detectada nas páginas legíveis das escrituras, e para conseguir encontrar as outras coordenadas a Universidade da Califórnia lançou um desafio mundial para estudantes de matemática, engenharia e computação. Dados os primeiros elementos da sequência, deve-se escrever um algoritmo capaz de calcular qualquer elemento da série. Os elementos conhecidos são {B, BA, CB, BAA, BCB, CBA, DAB, BAAA}. Acredita-se que seja possível encontrar qualquer elemento da série, cujos elementos parecem estar escritos em um base numérica alienígena.",
        "nivel": "",
        "entrada": "Cada linha de entrada contém um inteiro N (1 ≤ N ≤ 100000), que descreve a posição na sequência alienígena do elemento a ser calculado. A entrada é finalizada quando N = 0."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima em uma única linha a área do maior retângulo no histograma especificado. Lembre-se que esse retângulo deve estar alinhado com a base do histograma.",
        "numero": "1683",
        "titulo": "Maior Retângulo em um Histograma",
        "descricao": "Um histograma é um polígono composto por uma seqüência de retângulos alinhados em uma linha de base comum. Os retângulos têm larguras iguais, mas podem ter diferentes alturas. Por exemplo, a figura da esquerda nos mostra um histograma com retângulos de alturas 2, 1, 4, 5, 1, 3, 3, onde a medida 1 é a largura dos retângulos: Normalmente, histogramas são utilizados para representar distribuições discretas, como a freqüência de caracteres em um texto. Note que a ordem dos retângulos, ou seja, suas alturas, é importante. Calcule a área do maior retângulo de um histograma, que também esteja alinhado com a base. A figura da direita mostra o maior retângulo alinhado no histograma apresentado.",
        "nivel": "",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste descreve um histograma, e inicia com um inteiro n, que representa o número de retângulos que o compõe. Assuma que 1 ≤ n ≤ 100000. Em seguida, n inteiros h1, ..., hn, onde 0 ≤ hi ≤ 1000000000. Esses números representam as alturas dos retangulos do histograma, da esquerda para a direita. A largura de cada retângulo é 1. Um zero na entrada representa o ultimo caso de teste."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima Q + 1 linhas. Na primeira linha, imprima o último número do jogo e o vencedor da sequência inicial e nas próximas Q linhas, o útimo número e o vencedor depois de cada substituição.",
        "numero": "1696",
        "titulo": "Brincando Com Operadores",
        "descricao": "Rusa e Sanches são amigos na escola primária. Este mês eles estão aprendendo como somar e subtrair números inteiros. O professor de matemática deles deu um bom exercício para praticarem estes novos operadores. O exercício é um jogo (para aumentar o interesse dos alunos). É necessário que dois alunos joguem juntos, e como Rusa e Sanches estão sempre fazendo as tarefas juntos, dessa vez não será diferente. O professor deu a eles várias sequências e os movimentos que eles podem realizar são: - Primeiro jogador: Gerar uma nova sequência com a soma do primeiro e segundo números, do terceiro e quarto, do quinto e sexto, etc. - Segundo jogador: Gerar uma nova sequência com a subtração do primeiro e segundo números (nessa ordem), do terceiro e quarto, do quinto e sexto, etc. Se o tamanho da sequência for ímpar, o último número não deve ser modificado. Os jogadores alternam jogadas. O jogo continua até que reste apenas um número, chamado último número. Se ele é ímpar, o primeiro jogador vence. Caso contrário, o segundo vence. Como você pode ver o jogo é previsível, eles não podem alterar o resultado final dado uma sequência inicial. Entretanto, o professor também pediu para eles calcularem o último número da sequência depois de uma substituição num elemento da sequência inicial. Haverá várias substituições, e para cada uma eles tem que jogar novamente. Estas substituições são cumulativas. Ambos precisam aprender a somar e subtrair. Então, no primeiro caso de teste, Rusa será o primeiro jogador e Sanches, o segundo. No segundo caso de teste, eles trocam de ordem, i.e., Sanches é o primeiro jogador e Rusa, o segundo. No terceiro eles mudam de novo, e assim por diante. O professor deu muitas sequências para Rusa e Sanches. Eles já estão chateados do exercício porque eles já aprenderam a lição. Eles precisam terminar todos jogos até o final da semana e eles estão pedindo a você para ajudar com isso. Por exemplo, vamos assumir que a sequência inicial é (4, 2, 3, 5, 1, 6, 10, 2). Então, os movimentos são: (4, 2, 3, 5, 1, 6, 10, 2) → (6, 8, 7, 12) → (-2, -5) → (-7). O último número é -7, e o vencedor é Rusa, porque -7 é impar, e este é o primeiro caso de teste. Vejamos um segundo exemplo, vamos assumir que a sequência inicial é (4, 2, 3). Então, os movimentos são: (4, 2, 3) → (6, 3) → (3). O último número é 3, e o vencedor é Sanches, porque 3 é impar e este é o segundo caso de teste.",
        "nivel": "",
        "entrada": "A primeira linha conterá um número T (1 ≤ T ≤ 100), quantos casos de teste seguem. Para cada caso de teste, a primeira linha conterá um número N (1 ≤ N ≤ 104) e Q (0 ≤ Q ≤ 104), o número de inteiros na sequência inicial e o número de substituições, respectivamente. A próxima linha contém N inteiros da sequência S1, S2, …, SN (-104 ≤ Si ≤ 104). As próxima Q linhas contém A (1 ≤ A ≤ N ) e B (-104 ≤ B ≤ 104), que significa que o elemento SA da sequência inicial é substituído por B (SA = B)."
    },
    {
        "assunto": "4",
        "saida": "Para cada teste imprima uma única linha representando a menor quantidade de dinheiro perdida.",
        "numero": "1704",
        "titulo": "Arrumando as Tarefas",
        "descricao": "Você trabalha para uma empresa muito grande e que tem uma cultura move-fast. Hoje, um dos seus colegas ficou doente e você precisa repor o trabalho dele. Seu chefe disse que você tem apenas um computador para realizar algumas tarefas. Cada uma delas dá v de lucro e deve ser terminada até t horas a partir de agora. Após esse tempo, não pode ser mais realizada e não possui nenhum valor. O computador realiza exatamente uma tarefa por hora. Você deseja impressionar o seu chefe e assim ganhar uma promoção. Para isso, você pretende usar suas habilidades de programador e selecionar quais tarefas executar de tal forma a minimizar a quantidade de dinheiro perdida.",
        "nivel": "",
        "entrada": "A entrada é composta por diversos casos teste e termina com o final do arquivo. Cada um descreve uma lista de tarefas e começa com dois inteiros N (1 ≤ N) e H (H ≤ 1000), o número de tarefas e a quantidade de horas disponível do computador, respectivamente. As próximas N linhas contém cada uma v (1 ≤v ≤ 1000) e t (1 ≤ t ≤ H) como descrito acima."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso teste você deve imprimir um número, a soma dos N primeiros elementos da sequência de Fibo. Esse número pode ser muito grande, então você deve imprimi-lo MOD 1000000007.",
        "numero": "1701",
        "titulo": "Sequência de Fibo",
        "descricao": "Fibo é um grande fã de números, especialmente números grandes. Ele ama sequências que crescem rápido, sua favorita é a tão famosa: sequência de Fibonacci. Um dia ele decidiu criar uma nova sequência usando a sua favorita. Sua nova sequência é criada multiplicando números consecutivos da sequência de Fibonacci. A partir de números de Fibonacci de índices A e B. O primeiro elemento de sua nova sequência será o número de fibonacci de índice A multiplicado pelo número de Fibonacci de índice B, o segundo número é o número de Fibonacci de índice A+1 multiplicado pelo número de Fibonacci de índice B+1 e assim por diante. Ele sabe como obter cada elemento dessa nova sequência eficientemente, mas ele gostaria de calcular outra coisa. Ele gostaria de calcular a soma dos N primeiros números de sua nova sequência.Você pode ajudá-lo? Obs: Fibonnaci(0) = 0 e Fibonnaci(1) = 1",
        "nivel": "",
        "entrada": "A entra contém diversos casos testes. Cada caso teste contém três inteiros, A, B e N (1 <= A, B, N <= 1000000000), os significados foram explicados acima. A entrada termina com três zeros."
    },
    {
        "assunto": "4",
        "saida": "Seu programa deve produzir uma única linha contendo um único inteiro, o número mínimo de vezes que o processo de embaralhamento deve ser repetido para que o baralho fique novamente ordenado.",
        "numero": "1709",
        "titulo": "Baralho Embaralhado",
        "descricao": "Um baralho contém um número par 2n de cartas a1, a2,..., a2n, todas distintas (a1 < a2 ... < a2n). O baralho encontra-se perfeitamente ordenado, ou seja, a primeira carta é a1, a segunda carta é a2, e assim por diante, até a última carta, que é a2n. Um croupier então executa repetidamente um procedimento de embaralhar, que consiste de dois passos: O baralho é divido ao meio; As cartas das duas metades são então intercaladas, de maneira que se a sequência de cartas do baralho no início do passo 1 é x1, x2, ..., x2n, então ao final do passo 2 a sequência de cartas se torna xn+1, x1, xn+2, x2,..., x2n, xn. Dado o número de cartas do baralho, escreva um programa que determine quantas vezes o procedimento de embaralhar descrito acima deve ser re petido de forma que o baralho volte a ficar ordenado.",
        "nivel": "",
        "entrada": "A única linha da entrada contém um inteiro par P (2 ≤ P ≤ 2 x 105 ), indicando o número de cartas do baralho (note que o valor P corresponde ao valor 2n na descrição acima)."
    },
    {
        "assunto": "4",
        "saida": "Na primeira linha de saída deverá ser informado o peso total de presentes da lista de pedidos, com duas casas após a vírgula. Na segunda linha será informado o número de trenós necessários para levar os presentes da lista de pedidos. Caso seja inserido na lista de pedidos um presente que não consta na lista do lote dos brinquedos, deverá ser impresso a seguinte mensagem “NAO LISTADO: ” seguido pelo nome do presente. Deixar uma linha em branco após a impressão de cada caso de teste.",
        "numero": "1762",
        "titulo": "Trenós do Papai Noel",
        "descricao": "Todos os anos quando chega o natal, o Papai Noel tem a importante e difícil tarefa de entregar milhares de presentes a todas as crianças do mundo. O que ninguém sabe, é que ele desenvolveu uma maneira eficaz para conseguir entregar todos os presentes antes que o natal acabe, e essa maneira consiste numa infinidade de trenós espalhados pelo globo entregando simultaneamente todos os presentes. Dessa maneira fica muito mais fácil para completar as entregas, mas por conta de ser um número muito grande de presentes a ser entregue, o Papai Noel sempre tem dificuldades em saber quantos trenós ele disponibilizará para cada lote de presentes. Noel tem uma lista com o número de presentes de cada lote contendo o nome do presente e o seu peso, e ele também sabe a capacidade de carga de cada trenó. Sabendo essas informações, todo ano, Noel pede ajuda a um estudante para desenvolver um programa que possa ajuda-lo a saber quantos trenós serão necessários para cada lote. Sua tarefa é desenvolver um programa que armazene um número determinado de presentes de um lote, cada presente é armazenado com o nome do brinquedo e o seu respectivo peso em Quilogramas(considerar duas casas após a vírgula), depois de armazenar a lista, você irá informar a capacidade de carga do trenó, e após você deve informar a lista de pedidos, contendo o nome do presente e a sua quantidade, feito isso você deve calcular o peso total dos presentes e determinar quantos trenós serão necessários para efetuar a entrega.",
        "nivel": "",
        "entrada": "A primeira linha contem um número inteiro Y correspondendo a o número de casos de testes, após você deverá informar um inteiro T (0 < T < 1000) que corresponde a o número de presentes do lote, após você deve ler a lista de presentes, uma string N com o nome do presente e um valor de ponto flutuante K (0 < K <= 100 ) que corresponde ao peso em quilogramas do presente, o nome e o peso devem ficar em linhas separadas. Após inserir todos os T presentes você deve informar um valor de ponto flutuante M (0 < M <= 100) que corresponde em quilogramas a capacidade de carga do trenó, considerar duas casas após a vírgula. Após inserir o valor M você deve informar a lista que contém X pedidos da seguinte forma, uma string P correspondendo ao nome do presente, na próxima linha um valor inteiro J (0 < J <= 100) que corresponde a quantidade desse presente. Essa lista só termina quando forem inseridos um \"-\" para o nome do presente e \"0\" para o peso do presente."
    },
    {
        "assunto": "4",
        "saida": "Primeiro, imprima o inteiro N (8 ≤ N ≤ 512) em uma única linha. Então, imprima uma string de letras B, W e Q que corretamente codificam a figura com o esquema quadtree. Finalmente, acabe a string com um caractere de nova linha.",
        "numero": "1725",
        "titulo": "Quadtree II",
        "descricao": "Quando percebeu que o mapa do tesouro codificado em quadtree era uma falsificação, Florida Jones fez um plano maligno para pregar uma peça no próximo caçador de tesouros que viesse atrás do tesouro. Mas para isso, ele precisa da sua ajuda novamente. Você pode escrever um programa que use uma figura no formato XBM e codifica-la no esquema quadtree?",
        "nivel": "",
        "entrada": "A primeira linha será “#define quadtree_width N”, onde N é o tamanho da figura em pixels. (A figura é quadrática, contendo N*N pixels). A segunda linha será “define quadtree_height N”, concordando com a primeira. A terceira linha será “#define quadtree_bits[ ] = {“. Então seguirão N linhas, cada uma codificando uma linha de pixels na figura. Haverão N/8 números hexadecimais por linha. Cada número hexadecimal é composto por 8 bits que codificam 8 pixels da esquerda para a direita (onde o bit da extrema esquerda tem valor 1 e o bit da extrema direita tem valor 128). Os números hexadecimais são impressos no formato 0xdd, onde d é um dos caracteres do conjunto { 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f }. Exemplo: Os 8 pixels WBBBWWB são escritos como 0x9e. (2 + 4 + 8 + 16 + 128 = 158 = 0x9e) A última linha será “};”. Nota: Os comentários no exemplo de entrada (delimitados por /* e */) não são parte da entrada. Eles devem ajudar a explicar o formato XBM."
    },
    {
        "assunto": "4",
        "saida": "O programa deve imprimir uma linha por pergunta do tipo 4 (“4 X Y”), respondendo se a sequência A[X...Y] é NON INCREASING, NON DECREASING, ALL EQUAL ou NONE como explicado acima.",
        "numero": "1740",
        "titulo": "Está Ordenado?",
        "descricao": "Chavaska gosta de jogar com sequência de inteiros. Ele tem uma sequência A que contém N inteiros que ele modifica e analisa. Particularmente ele está interessado na ordem de algumas sequências contíguas. Ele explicou a Kabralouco como ele está se divertido e lhe convidou para jogar. Kabralouco quer jogar, mas como ele não consegue pensar tão rápido como Chavaska e não gosta de ficar atrás, ele decidiu roubar e agora esté te pedindo para ajudá-li criando um programa que pode realizar as seguintes operações 0 X Y – Troca os elementos X e Y. 1 X Y – Troca o valor do elemento na posição X por Y. 2 X Y – Insere o elemento Y na posição X. 3 X – Remove o elemento na posição X X. 4 X Y – Pergunta a estrutura dos elementos A[X..Y] e as respostas devem ser: “ALL EQUAL” – Se A[i] = A[i+1] para todo i em [X,Y −1] “NON DECREASING” – Se A[i] ≤ A[i+1] para todo i em [X,Y−1] e A[i] ≠ A[i+1] para algum i em [X,Y−1] “NONINCREASING” – Se A[i] ≥ A[i+1] para todo i em [X,Y−1] e A[i] ≠ A[i+1] para algum i em [X,Y−1] “NONE” – Se nenhum dos casos acontecem.",
        "nivel": "",
        "entrada": "A entrada contém diversos casos testes e termina com o fim de arquivo. A primeira linha de cada caso teste começa com um inteiro N (1 ≤ N ≤ 104,) o número de elementos na sequência inicial. Na próxima linha tem N inteiros |A[i]| ≤ 109 (1 ≤ i ≤ N). A próxima linha contém um inteiro Q (1 ≤ Q ≤ 105), o número de operações que devem ser executadas. As próximas Q linhas são as operações."
    },
    {
        "assunto": "4",
        "saida": "Imprima uma linha contendo um inteiro que representa o número mínimo total de letras a serem escritas nas placas, quando a divisão dos nomes das ruas e avenidas é escolhida de forma otimizada.",
        "numero": "1746",
        "titulo": "Dividindo os Nomes",
        "descricao": "A Rainha da Nlogônia decidiu mudar a capital do reino para uma nova cidade chamada Sortonia. O projeto da cidade é uma grade de N × N consistindo de N avenidas na direção Norte-Sul e N ruas direção Leste-Oeste. Assim, cada avenida cruza todas as ruas, e não há duas ruas ou duas avenidas que cruzam entre si. Como a cidade está quase terminada, agora é hora de atribuir nomes as suas ruas e avenidas. O povo de Nlogônia já votou nos 2×N nomes que eles querem usar, mas não foi decidido ainda qual desses será usado para as ruas e que para as avenidas. A questão não é tão simples, porque em cada cruzamento deve ter uma placa de identificação da rua e da avenida que se cruzam ali, e a rainha ordenou expressamente que as letras destas placas deve ser escritas em ouro cravejado com rubis. Como você é o Contador Oficial de Dinheiro (Accountant who Counts the Money - ACM), é sua tarefa encontrar uma forma de minimizar o número total de letras escritas nas placas dos cruzamentos, por razões óbvias. Felizmente, você pensou em uma maneira muito inteligente atingir esse objetivo, que é a utilização de abreviaturas nas placas para os nomes das ruas e avenidas. A abreviação do nome de uma avenida (e da mesma forma para uma rua) é o prefixo mais curto de seu nome, que não é um prefixo do nome de qualquer outra avenida (e da mesma forma para outra rua). Naturalmente, a abreviatura a ser utilizada para cada nome depende de como o conjunto de 2×N nomes é dividido em dois conjuntos disjuntos composto de N nomes a ser utilizado para as ruas e avenidas. Por exemplo, considere o caso de N = 2, onde os quatro nomes escolhidos são \"GAUSS\", \"GALOIS\", \"ERDOS\" e \"EULER\". Se são atribuídos os nomes \"GAUSS\" e \"GALOIS\" para as ruas, ao passo que são atribuídos os nomes \"ERDOS\" e \"EULER\" as avenidas, então as abreviaturas seriam \"GAU\" para \"GAUSS\", \"GAL\" para \"Galois\", \"ER\" para \"ERDOS\" e \"EU\" para \"EULER\". Com essa divisão, o número total de letras a serem escritas nas placas seria 20, já que as quatro interseções seriam rotuladas como \"GAU|ER\", \"GAU|UE\", \"GAL|ER\" e \"GAL|UE\". No entanto, no exemplo acima, seria mais conveniente atribuir para as ruas os nomes \"GAUSS\" e \"ERDOS\", deixando \"GALOIS\" e \"EULER\" para as avenidas. Assim, as abreviaturas seriam \"G\" para \"GAUSS\", \"E\" para \"ERDOS\", \"G\" para \"GALOIS\" e \"E\" para \"EULER\", e o número total de letras a serem escritas nas placas seria apenas 8 (pois as intersecções seriam rotuladas como “G|G”, “G|E”, “E|G” e “E|E”). Felizmente, o conjunto de nomes que foi escolhido é tal que nenhum nome nele é um prefixo de algum outro nome no conjunto, garantindo assim que o sistema que você propõe será sempre viável. Você pode calcular o número mínimo de letras a ser escritas nos sinais se você dividir os nomes na forma ideal?",
        "nivel": "",
        "entrada": "A primeira linha contém um número inteiro N (2 ≤ N ≤ 100) que representa tanto o número de ruas quanto o número de avenidas em Sortonia. Cada uma das próximas 2 × N linhas contém uma string não-vazia de no máximo 18 letras maiúsculas, indicando um dos nomes que foram escolhidos. Você pode assumir que nenhuma das strings dadas é um prefixo de outra string na entrada."
    },
    {
        "assunto": "4",
        "saida": "O seu aplicativo deverá mostrar na tela a frase no idioma correto. Caso ela não esteja cadastrada, você deverá exibir a mensagem \"--- NOT FOUND ---\" para que depois dos testes você possa completar o banco de dados.",
        "numero": "1763",
        "titulo": "Tradutor do Papai Noel",
        "descricao": "Nicolau já está bastante cansado e sua memória não é mais a mesma. Você, como navegador, deverá auxiliar o Papai Noel a gritar a frase \"Feliz Natal\" no idioma correto de cada país de que trenó está sobrevoando. Como você é um elfo muito esperto, você já criou um pequeno app no seu celular (sim, elfos tem celular) que irá lhe informar a frase no idioma correto dado o nome do país. Como o trenó é moderno (foi atualizado no ano 2000) ele exibe no painel de navegação o nome do país atual. Os dados inseridos no seu app foram: brasil Feliz Natal! alemanha Frohliche Weihnachten! austria Frohe Weihnacht! coreia Chuk Sung Tan! espanha Feliz Navidad! grecia Kala Christougena! estados-unidos Merry Christmas! inglaterra Merry Christmas! australia Merry Christmas! portugal Feliz Natal! suecia God Jul! turquia Mutlu Noeller argentina Feliz Navidad! chile Feliz Navidad! mexico Feliz Navidad! antardida Merry Christmas! canada Merry Christmas! irlanda Nollaig Shona Dhuit! belgica Zalig Kerstfeest! italia Buon Natale! libia Buon Natale! siria Milad Mubarak! marrocos Milad Mubarak! japao Merii Kurisumasu! Para não correr o risco de infomar o nome errado você decidiu testar o aplicativo mais algumas vezes.",
        "nivel": "",
        "entrada": "Você irá testar o seu aplicativo com diversos nomes de paises, simulando os dados informados pelo painel de navegação do trenó."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste você deverá exibir a mensagem \"CENARIO {i}\", onde i indica o caso de teste atual, seguido da posição e o nome de cada umas das M renas que irão puxar o trenó, ordenadas conforme descrito acima.",
        "numero": "1766",
        "titulo": "O Elfo das Trevas",
        "descricao": "O estábulo onde ficam as renas foi intencionalmente aberto pelo Elfo das Trevas permitindo que cada uma delas corresse e voasse livremente pela fábrica do Papai Noel, causando o maior transtorno. Os elfos estão tentando desesperadamente fazer o possível para deixar o trenó pronto para embarque. Você ficou responsável por colocar cada rena na sua posição correta assim que ela é capturada por um dos outros elfos. Você sabe que o estábulo segue uma organização baseada na ordem que as renas irão ocupar no trenó. Desta forma, na hora da partida todas podem ser facilmente posicionadas. Diferentemente do que muitos pensam, as renas são posicionadas em uma fila única à frente no trenó. Nem todas as renas do estábulo são utilizadas em cada viagem, isto depende da carga total do trenó. Você conseguiu a lista com as características que são utilizadas para determinar a ordem de rena. Elas devem ser ordenadas primeiramente de forma decrescente por peso. Caso duas ou mais apresentarem o mesmo peso elas devem ser ordenadas de forma ascendente pela idade, após pela altura e caso ainda persista empate, pelo nome. Utilizando seu computador mágico de última geração você quer escrever um programa que ordene as renas, de acordo com as características informadas, e exiba somente o número exato de renas que serão utilizadas no trenó (de forma ordenada).",
        "nivel": "",
        "entrada": "Este problema possui diversos casos de teste. A primeira linha de entrada contém um inteiro T (1 ≤ T ≤ 105) que indica o número de casos de teste a seguir. A primeira linha de cada caso de teste contém dois inteiros N e M (5 ≤ N, M ≤ 103) que indicam respectivamente o número total de renas e o número de renas que irão puxar o trenó. Na sequência serão informados uma string S seguida por 2 inteiros P (1 ≤ P ≤ 300) e I (1 ≤ I ≤ 300) e por um número de ponto flutuante A (0.00 ≤ A ≤ 3.00), indicando respectivamente o nome, o peso, a idade e a altura de cada uma das renas. O nome de cada uma das renas é composto somente por uma palavra com até 100 caracteres."
    },
    {
        "assunto": "4",
        "saida": "Para cada linha \"? i\", imprima uma linha contendo o número de pessoas da excursão ainda remascentes atrás do buggy i naquele momento. Mas não seja bugueiro (nada de pôr bugs em seu código)!",
        "numero": "1804",
        "titulo": "Precisa-se de Matemáticos em Marte",
        "descricao": "Aconteceu na semana passada em Beberibe, CE, o VIII Latin-American Algorithms, Graphs and Optimisation Symposium (LAGOS 2015), uma conferência que reuniu matemáticos e cientistas da Computação do mundo todo para discutirem alguns desafios computacionais. A fim de que os participantes pudessem relaxar um pouco, os organizadores do evento contrataram buggies para levar os pesquisadores a alguns pontos turísticos da região. Os buggies saíram do hotel numa fila, um atrás do outro. Quem conhece os passeios de buggy do Ceará sabe que o turista pode pedir ao bugueiro um passeio com emoção ou sem emoção. No entanto, a excursão do LAGOS contou com uma emoção extra. Como em Marte atualmente há uma carência de pesquisadores em Algoritmos, Grafos e Otimização, alienígenas marcianos começaram a abduzir alguns buggies, com todas as pessoas a bordo (inclusive o pobre bugueiro, que nada tinha a ver com a história). Foi muito triste nosso planeta ter perdido mentes tão brilhantes para Marte, mas a tragédia teria sido menor se cada bugueiro mantivesse atualizada a informação de quantas pessoas no total estavam nos buggies atrás dele — assim ele poderia perceber a aproximação da sonda alienígena e acelerar o buggy.",
        "nivel": "",
        "entrada": "Um inteiro N (1 ≤ N ≤ 105) constitui a primeira linha da entrada, o qual representa o número de buggies que deixaram o hotel. A segunda linha da entrada é constituída por N inteiros pi (1 ≤ pi ≤ 5, 1 ≤ i ≤ N), cada um representando o número de pessoas no buggy i (incluindo o bugueiro). Cada uma das linhas seguintes pode ser constituída: por um caractere 'a' seguido de um inteiro i (1 ≤ i ≤ N), o qual caracteriza a abdução do buggy i (que ainda não havia sido abduzido); por um caractere '?' seguido de um inteiro i (1 ≤ i ≤ N), o qual caracteriza que, naquele momento, o bugueiro do (ainda) não abduzido buggy i gostaria de saber quantas pessoas da excursão restavam atrás do seu buggy. Considere que o identificador i de um buggy não muda. Assim, o terceiro buggy a deixar o hotel deverá sempre ser identificado pelo inteiro 3, mesmo que os buggies 1 e 2 sejam abduzidos."
    },
    {
        "assunto": "4",
        "saida": "Imprima uma linha contendo unicamente o valor mínimo total da multa que Daenerys pagará a Sauron se seguir seus conselhos.",
        "numero": "1851",
        "titulo": "Como Treinar Seu Dragão",
        "descricao": "Após seu dragão Smaug fracassar na missão de tomar conta de Erebor, Sauron ficou muito aborrecido, e seu Olho começou a procurar por toda parte um treinador de dragões profissional, a fim de que seus demais dragões não falhassem em suas missões. Foi assim que Sauron conheceu Daenerys Targaryen. Impressionado com a reputação dela, Sauron a contratou imediatamente. Sauron envia dragões a Daenerys quase diariamente. Alguns dragões levam mais tempo para serem treinados, outros menos, e ela sempre treina um dragão de cada vez, nunca mais de um no mesmo dia, até que ele esteja pronto para ser retornado a Sauron. Nos dias em que se dedica ao treinamento de um dragão, Daenerys deixa os demais dragões enviados por Sauron hibernando num alojamento até que chegue a vez de cada um deles. Mas o caráter de Sauron, embora de notável perseverança, não é famoso por sua paciência. Para cada dia que um dragão seu passa dormindo no alojamento, Sauron, cujo Olho enxerga tranquilamente tudo o que se passa nos domínios de Daenerys, cobra dela uma multa, que pode variar de dragão para dragão, dependendo dos planos de Sauron para seus dragões. Sauron envia exatamente um dragão por dia, e o dragão sempre chega bem no início do dia, de modo que Daenerys já pode começar a treiná-lo imediatamente. Ainda, se há dragões dormindo no alojamento e nenhum sendo treinado, Sauron envia um Nazgûl para matar Daenerys. Daenerys Targaryen deseja minimizar a multa total a pagar a Sauron e está pedindo sua ajuda. Você já lhe disse que não pode prever o futuro e que o melhor que você pode fazer é: toda vez em que ela não estiver trabalhando com um dragão e quiser escolher um no alojamento para começar a treinar, você pode dizer a ela qual dragão escolher de modo que a escolha seria ótima se nenhum dragão mais viesse nos dias seguintes.",
        "nivel": "",
        "entrada": "A i-ésima linha da entrada diz respeito ao i-ésimo dragão enviado por Sauron a Daenerys e consiste de dois inteiros: Ti e Fi (1 ≤ Ti, Fi ≤ 103), representando respectivamente o número de dias necessários para treinar o i-ésimo dragão e a multa cobrada por dia que o dragão passa dormindo. Para quaisquer i e j distintos, Ti / Fi ≠ Tj / Fj. A entrada possui no máximo 105 linhas e termina em fim de arquivo."
    },
    {
        "assunto": "4",
        "saida": "Para cada dia do inverno, encerrado na entrada por uma linha de cinco inteiros, imprima uma linha contendo o número do dia e o número de possibilidades para a distribuição das cenouras entre os bonecos de neve da área delimitada. Considere que a contagem dos dias se inicia em 1. Como o número de possibilidades pode ser muito grande, imprima apenas o resto que esse valor deixa quando dividido por 109 + 7. O exemplo de entrada e saída esclarecem mais detalhes sobre o formato da saída.",
        "numero": "1854",
        "titulo": "Inverno em Winterfell",
        "descricao": "Certa tarde, na Vila de Inverno, do lado de fora dos portões do castelo de Winterfell, as crianças começaram a construir bonecos de neve, para a alegria e o divertimento da plebe que negociava no mercado. Os bonecos estavam ficando adoráveis, não fosse por um detalhe: nenhum deles possuía nariz, já que as únicas cenouras agora remanescentes em Westeros estavam na despensa real da Casa Stark. O rei, comovido, resolveu ceder algumas de suas cenouras para que fossem distribuídas em regiões retangulares da Vila. Mas as crianças de Westeros são gananciosas e não se importam em colocar vários narizes em seus bonecos, ainda que outras crianças fiquem sem narizes para pôr em seus bonecos. Por exemplo, se o rei designa 2 cenouras idênticas para uma região em que há 3 bonecos, a, b e c, há 6 possibilidades para a distribuição dessas cenouras entre os bonecos depois que as crianças terminem de brigar entre si: a fica com 2 narizes e b e c com nenhum; a e b ficam com 1 nariz cada e c com nenhum; a e c ficam com 1 nariz cada e b com nenhum; b fica com 2 narizes e a e c com nenhum; b e c ficam com 1 nariz cada e a com nenhum; c fica com 2 narizes e a e b com nenhum. Percebendo que as brigas entre as crianças estava levando um número considerável delas a óbito, e preocupando-se com o futuro populacional do reino, o rei decidiu escolher apenas uma região retangular por dia, de modo que a distribuição das cenouras fosse feita sempre no fim do dia, quando todos os bonecos de neve do dia já houvessem sido construídos. Não é permitido às crianças usar cenouras para bonecos fora da região premiada do dia, nem tampouco levar cenouras para casa a fim de as usar no dia seguinte. O rei também ordenou que, tão logo a noite caísse e as crianças fossem embora, um oficial recolhesse todas as cenouras, deixando, contudo, os bonecos de neve intactos. A propósito, os bonecos construídos pelas crianças de Westeros são muito resistentes, podendo permanecer de pé por todo o inverno, a menos que sejam destruídos propositalmente por outra criança.",
        "nivel": "",
        "entrada": "A entrada descreve, em sequência, todos os eventos que aconteceram durante o inverno à sombra das muralhas de Winterfell e é composta por no máximo 105 linhas. A primeira linha da entrada é constituída por dois inteiros: N e M (1 ≤ N, M ≤ 103), os quais representam as dimensões da Vila. Cada uma das linhas seguintes descreve um evento, caracterizado pelo número de inteiros presentes na linha: se a linha consiste de três inteiros, X, Y e B (1 ≤ X ≤ N, 1 ≤ Y ≤ M, 1 ≤ B ≤ 100), significa que uma criança construiu B bonecos de neve na posição da Vila de coordenadas (X, Y); se a linha consiste de dois inteiros, X e Y (1 ≤ X ≤ N, 1 ≤ Y ≤ M), significa que uma criança destruiu todos os bonecos presentes na posição de coordenadas (X, Y); se a linha consiste de cinco inteiros, X1, Y1, X2, Y2 e C (1 ≤ X1 ≤ X2 ≤ N, 1 ≤ Y1 ≤ Y2 ≤ M, 1 ≤ C ≤ 103), significa que o rei concedeu C cenouras idênticas para serem distribuídas entre os bonecos de neve construídos na região retangular definida pelas posições de coordenadas (X1, Y1) e (X2, Y2), marcando o fim de um dia. A última linha da entrada é sempre uma linha de cinco inteiros."
    },
    {
        "assunto": "4",
        "saida": "Imprima uma linha para cada operação do tipo Q com sua resposta.",
        "numero": "1856",
        "titulo": "A Lista da Morte de Arya",
        "descricao": "Arya: \"Cersei. Walder Frey. Montanha. Meryn Trant.\" Para se manter motivada, Arya sempre lembra a lista de inimigos que ela mais odeia. O principal objetivo de sua jornada é matar todos na sua lista! Entretanto, às vezes algum inimigo dela pode ser morto por outra pessoa. Quando ela descobre que tal inimigo morreu, ela o remove da sua lista. Além disso, Arya também pode fazer novos inimigos durante sua jornada. Quando ela faz um novo inimigo, tal inimigo é incluído na sua lista. Arya quer matar seus inimigos um por um, na mesma ordem em que aparecem na sua lista. A qualquer momento, ela pode se perguntar quanto tempo irá levar para matar todos que estão entre dados dois inimigos. Para tal, dados dois inimigos a e b, ela deve determinar quantos inimigos estão na lista entre a e b, excluindo ambos. Ajude Arya respondendo tais perguntas.",
        "nivel": "",
        "entrada": "A primeira linha contém um inteiro N (1 ≤ N ≤ 5×104), o número de inimigos inicialmente em sua lista. Considere que todas as pessoas são numeradas de 1 a 109, inclusive. A próxima linha contém N inteiros, descrevendo a lista inicial de Arya. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 5×104), o número de operações. As próximas Q linhas descrevem as operações. Cada operação pode estar em um dos seguintes formatos: I p e (1 ≤ e, p ≤ 109): Insira a pessoa p depois do inimigo e na lista. É garantido que e está na lista, e p não está na lista; R e (1 ≤ e ≤ 109): Remova o inimigo e da lista. É garantido que e está na lista; Q a b (1 ≤ a, b ≤ 109): Determine quantos inimigos estão na lista entre a e b, excluindo ambos. É garantido que a e b estão na lista."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, imprima as pilhas após a inserção dos novos blocos. Em alguns casos, a fila de novos blocos será mais que suficiente para que todas as pilhas fiquem do mesmo tamanho. Neste caso, desconsidere os blocos que sobrarem na fila.",
        "numero": "1874",
        "titulo": "Empurrando Blocos",
        "descricao": "A Empresa Blocos Regulares Inventando Serventia de Algo, mais conhecida como BRISA, construi blocos, sempre do mesmo tamanho. Um detalhe que chama a atenção está na forma em que os blocos são armazenados em estoque, depois de fabricados. Os mesmos são formados por uma fileira de pilhas. A retirada de uma caixa do estoque é um tanto quando desordenado, pois se escolhe uma pilha aleatoriamente e retira-se algum bloco do topo dela. Porém, a forma de armazenamento é um tanto quanto interessante: uma esteira, localizada na reta do topo da pilha mais à direita do estoque, é utilizada. Com isto, forma-se uma fila com os novos blocos. A esteira roda da direita para a esquerda. Assim que houver um espaço vago em uma das pilhas seguintes, o bloco será inserido na mesma, caso não haja, ele vai avançando até as pilhas seguintes. Segue abaixo um exemplo de inserção de blocos.",
        "nivel": "",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste terá 3 números inteiros, H, P e F, indicando a altura da pilha mais a direita , a quantidade de pilhas de blocos e o tamanho da fila de blocos a ser inserida. Após isto, serão lidos H linhas com P valores, com valores 1, representando onde tem bloco, e 0, representando onde não tem bloco. A seguir, será lida uma linha com F valores, representando a fila com os blocos novos. O último caso de teste é representado por três zeros, e não deverá ser processado."
    },
    {
        "assunto": "4",
        "saida": "A primeira linha da saída deve consistir da frase “HALL OF MURDERERS”, sem as aspas. Cada uma das linhas seguintes deve conter um nome de um assassino seguido do número de pessoas que ele matou. A lista de assassinos deve obedecer a ordem lexicográfica. Se um assassino também acabou sendo assassinado, ele não deve figurar na lista.",
        "numero": "1861",
        "titulo": "O Hall dos Assassinos",
        "descricao": "Quem matou Meryn Trant? Quem matou Syrio Forel, se é que ele de fato morreu? Quem matou Stannis Baratheon? Quem matou Myrcella Baratheon? Quem matou Aerys II Targaryen? Quem vai matar (alerta de spoiler!) Jaime Lannister? Para algumas destas perguntas já sabíamos a resposta. Para outras, tínhamos apenas especulações. No entanto, recebemos de um correspondente anônimo uma lista descrevendo vários assassinatos, que já aconteceram ou que estão para acontecer, revelando tanto o nome dos assassinos quanto dos assassinados. Mas os assassinatos não estão em ordem lexicográfica, nem mesmo em ordem cronológica, e fica difícil contar quantas pessoas cada assassino matou. Você pode nos ajudar?",
        "nivel": "",
        "entrada": "Cada linha da entrada descreve um assassinato informando o nome do assassino seguido pelo nome do assassinado. Cada nome é composto por no mínimo um e no máximo 10 caracteres, sendo o primeiro sempre uma letra maiúscula e os demais sempre letras minúsculas. A entrada consiste de no mínimo uma e no máximo 105 linhas e é encerrada em fim de arquivo."
    },
    {
        "assunto": "4",
        "saida": "Imprima uma linha contendo o número máximo de soldados que podem ser mortos.",
        "numero": "1863",
        "titulo": "O Contra-ataque de Ramsay",
        "descricao": "Ramsay: \"Não preciso de um exército. Preciso de 20 homens bons.\" Os Boltons conquistaram o castelo de Winterfell e agora precisam protegê-lo da invasão do \"Rei\" Stannis. Os N soldados de Stannis estão posicionados entre Castle Black, que fica a nordeste de Winterfell, e Winterfell. Para cada soldado i (1 ≤ i ≤ N), os Boltons sabem sua posição (x[i], y[i]) no mapa. Ramsay Bolton decidiu contra-atacar antes que a invasão ocorra, enviando seus homens para matar alguns dos soldados de Stannis. Ramsay quer que eles morram um de cada vez, em uma ordem tal que seus homens precisem viajar apenas para o norte e para o leste, e tal que todo soldado deve ser mais forte que os que morreram antes dele (isto é loucura, mas Ramsay é mesmo louco). Em outras palavras, Ramsay quer encontrar uma sequência de soldados (s1, s2, ..., sK) tal que, para todo 1 < i ≤ K: x[si] > x[si-1]; y[si] > y[si-1]; e si é mais forte que si-1 Um espião forneceu a Ramsay uma lista de M pares ordenados de soldados na forma (i, j), indicando que o soldado i é mais forte que o soldado j. Note que esta relação é transitiva, isto é, se i é mais forte que j e j é mais forte que k, então i é mais forte que k, mesmo que o par (i, k) não apareça na lista. Além disso, para qualquer par de soldados i e j, se não é possível concluir que um soldado é mais forte que o outro através da lista, então i não é considerado mais forte que j, e nem j é considerado mais forte que i. Por fim, a lista é dada de tal forma que, para todo soldado i, existe no máximo um soldado j tal que (i, j) está na lista. Sua tarefa é determinar o número máximo de soldados que podem ser mortos pelos homens de Ramsay.",
        "nivel": "",
        "entrada": "A primeira linha contém dois inteiros N e M (0 ≤ M < N ≤ 5×104). As próximas N linhas fornecem as posições dos soldados. A i-ésima linha contém dois inteiros x[i] e y[i] (-400 ≤ x[i], y[i] ≤ 400). Não há dois soldados na mesma posição. As próximas M linhas contém dois inteiros i e j cada (1 ≤ i, j ≤ N, i ≠ j), descrevendo a lista fornecida pelo espião."
    },
    {
        "assunto": "4",
        "saida": "A saída é o número mínimo de operações para converter N em M.",
        "numero": "1897",
        "titulo": "Jogo Esperto",
        "descricao": "Enquanto Bino descansava, inventou um jogo esperto. Dado um número N e um número M, Bino quer saber qual a quantidade mínima de operações para converter N em M. Existe seis operações permitidas. Operação 1: N = N*2 Operação 2: N = N*3 Operação 3: N = N/2 Operação 4: N = N/3 Operação 5: N = N+7 Operação 6: N = N-7",
        "nivel": "",
        "entrada": "A entrada contém dois inteiros N ( 0 ≤ N ≤ 10000) e M ( 0 ≤ M ≤ 10000)."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso, exiba uma única linha, a quantidade de assinaturas falsas encontradas.",
        "numero": "1911",
        "titulo": "Ajude Girafales",
        "descricao": "Minutos antes do término das aulas, professor Girafales passa uma lista de presença. Certo dia, ele resolveu conferir as assinaturas e notou que alguns alunos assinavam diferente em algumas aulas e desconfiou que alguém poderia estar assinando por eles. Como o professor possui muitos alunos e pouco tempo (o café com dona Florinda é prioridade), ele pediu sua ajuda para validar as assinaturas. Uma assinatura é considerada falsa se houver mais de uma diferença entre a original e a que estiver sendo checada. Considere diferença uma troca de maiúscula para minúscula ou o contrário.",
        "nivel": "",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com um inteiros N (1 ≤ N ≤ 50) representando a quantidade de alunos de sua turma. As próximas N linhas serão da seguinte forma:                                                         Nome do aluno   Assinatura Original A seguir haverá um inteiro M (0 ≤ M ≤ N), representando a quantidade de alunos que compareceram a uma aula. M linhas seguem, no seguinte formato:                                                         Nome do aluno   Assinatura na aula Todos os alunos possuem apenas o primeiro nome na lista, nenhum nome se repete e todos os nomes contêm no máximo 20 letras (a-z A-Z). A entrada termina com N = 0, a qual não deve ser processada."
    },
    {
        "assunto": "4",
        "saida": "Como saída, deve ser impresso o quadro de medalhas das Olimpíadas de Natal. A primeira linha contém a informação \"Quadro de Medalhas\". Cada uma das próximas linhas conterá o nome de um país seguido pelo respectivo número de medalhas de ouro, prata e bronze que este país conquistou, separadas por um espaço em branco. O critério de desempate é, na ordem, o número de medalhas de ouro seguido pelo número de medalhas de prata e de bronze. Se países empatarem nestes três critérios, a listagem será por ordem ascendente do nome do país participante.",
        "numero": "2018",
        "titulo": "Olimpíadas de Natal",
        "descricao": "Segundo a tradição, as provas das Olimpíadas de Natal são muito interessantes e diferentes. Dentre as provas existentes, podemos citar por exemplo, o levantamento de saco de brinquedos, a escalada de pinheiros, o hipismo com renas, o arremesso de duendes (com e sem o consentimento deles - esse segundo é mais perigoso) e o tempo de mergulho em buraco no gelo sem equipamentos, entre outros. Parte do melhoramento da competição proposto por Noel para este ano sera a disponibilização do quadro de medalhas dos países participantes através de um placar eletrônico. Você foi convidado para viajar até as montanhas de Korvatunturi na Lapônia, Finlândia, aonde será a sede destes jogos, para, à partir de uma relação das provas e os países vencedores, desenvolver o sistema para este placar. Serão quase trezentos países participantes e até 1000 modalidades de provas, no máximo.",
        "nivel": "",
        "entrada": "A entrada contem um unico caso de teste que consiste em uma relacao com o resultado de todas as provas realizadas nas Olimpíadas de Natal. Cada prova ou modalidade contém quatro linhas de informação: a primeira linha contém a descrição da prova, a segunda linha contém o país que ficou campeão nesta modalidade, a terceira linha contém o país vice-campeão e a última linha contém o país que ficou com a medalha de bronze na referida prova. O final da entrada é determinado por EOF."
    },
    {
        "assunto": "4",
        "saida": "Para cada grupo de visitantes, deve ser informado quantos destes receberão brindes.",
        "numero": "1944",
        "titulo": "BRINDE FACE 2015",
        "descricao": "A FACE em 2015 está apoiando a terceira edição da Maratona de Programação, mas desta vez a organização solicitou sua ajuda para criar um sistema de sorteio utilizando as letras da palavra FACE. Como a feira utiliza uma proposta diferenciada e alegre, cada participante que entra na feira ganha 4 letras, uma de cada cor e em formato de bloco de madeira, conforme Figura 1, e deve inserí-las num painel. Se, no momento da inserção, as 4 letras formarem o contrário das 4 últimas letras, o visitante ganhará um brinde. Figura 1 - Entrada de FACE no painel seguido de ACEF. Por exemplo: suponha que já tiveram 3 participantes que entraram na feira e o painél ficou da seguinte forma: F A C E E C F A A C F E A C E F. Note que sempre que o painél fica vazio, assim como no início do evento, as letras F A C E são inseridas pela organização do evento. Agora, na entrada do quarto participante, ele inseriu as letras F E C A e, com isso, receberá um brinde por fechar o contrário de A C E F. Após essa situação, o painél deve ficar F A C E E C F A A C F E. Escreva um algoritmo que, dadas as letras recebidas e inseridas pelos participantes, diga quantos participantes ganharam brindes. Lembre-se que sempre que o painel fica vazio as letras F A C E são inseridas pela organização do evento.",
        "nivel": "",
        "entrada": "A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100), representando o número de visitantes que vão receber as letras. Em cada uma das N linhas seguintes deve ser informada a combinação das 4 letras que o visitante deseja inserir no painel, separadas por espaço."
    },
    {
        "assunto": "4",
        "saida": "Deve ser impressa a lista ordenada, dentro das especificações descritas anteriormente, sendo mostrado primeiramente o nome do dono da lista antecedido de \"Lista de \" seguido por uma lista que mostra somente o nome do objeto seguido do seu preço em reais, definido com duas casas após o ponto decimal. Deve ser mostrada uma linha em branco após todas as saídas.",
        "numero": "2022",
        "titulo": "Presentes de Natal",
        "descricao": "Ah o natal... época mágica, tempo de sentimentos bons, jantares cheios de pessoas legais e recheados de boas comidas e, é claro: muitos presentes. Jucilena foi uma boa menina durante esse ano. Sabendo disso, está montando sua lista de desejos natalinos. Porém, Jucilena é uma menina muito indecisa (e seus desejos são muitos), o que acaba confundindo o seu Nicolau quanto ao presente que ela realmente quer ganhar. Em suas listas, ela elencou o nome do presente desejado, seu preço (campo este solicitado pela sua mãe) e a escala de preferência pelo mesmo, do menos preferido (1) ao mais desejado (10). Vendo essa ideia de Jucilena, seus amigos também fizeram o mesmo, pois todos tinham diversas opções de presentes. Todo esse emaranhado de listas e presentes deixaram o seu Nicolau maluco! Vendo isso, o espírito natalino lhe tocou e você decidiu que ajudará Noel, criando um programa que elencará a lista dos mais desejados presentes para Jucilena e seus amigos. Os presentes devem ser mostrados na ordem descrescente do valor de preferência. Caso a preferência entre um e outro presente seja a mesma, o presente que deverá ser mostrado antes é o de menor preço. Caso haja semelhança entre preferência e preço, eles deverão ser elencados em ordem alfabética.",
        "nivel": "",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste contém o Nome (sem espaços) do respectivo dono da lista, junto com um inteiro Q, (1 < Q <100) que define a quantidade de presentes listados. As próximas Q*2 linhas consistem no nome O do objeto desejado descrito em uma linha e o P preço do mesmo (1< P < 100.000.000) e a escala de preferência E (1< E < 10) na linha seguinte. A entrada termina em EOF."
    },
    {
        "assunto": "4",
        "saida": "Para cada lista codificada por elfos, deve-se apresentar a mensagem “LISTA #X:”, onde X é o número da lista seguindo a sequência (1, 2, 3, ...), em seguida deve-se listar todos os presentes em ordem alfabética e maiúsculo, um em cada linha. Imprimir uma linha em branco entre dois casos de teste consecutivos. No fim da saída não deve haver uma linha em branco.",
        "numero": "2020",
        "titulo": "Elfos e seus Códigos",
        "descricao": "Neste ano Papai Noel recebeu várias listas de presentes, com pedidos e mais pedidos. Para dificultar, todas as listas são codificadas por elfos. Como são milhares de listas e o Papai Noel é organizado, decidiu pedir a sua ajuda. Ele sabe que você é dedicado e conhece o padrão de decodificação dos elfos, e para isso disponibilizou 26 gnomos e 676 duendes. Cada lista é decodificada através da colaboração de gnomos e duendes ajudantes do Papai Noel. Os gnomos são enumerados de 1 a 26 e para cada gnomo, 26 duendes que correpondem a letras de A até Z (incluindo as letras K, W, Y). Quando a decodificação é iniciada, todas as N linhas são executadas. Cada N linha corresponde a um presente. Seguem os passos para decodificar uma determinada lista criada por elfos: 1º Os gnomos e duendes são organizados, gnomos representam linhas e duendes representam as colunas. 2º Para cada gnomo, é encontrado um duende. Por exemplo, se o número inteiro i for 2 (linha 2) o gnomo é 2 e obrigatoriamente o duende também é 2, correspondendo, portanto, ao caractere B. 3º Todos os duendes, na posição gnomo devem ser movidos para o final. 4º A linha correspondente ao gnomo é movida para a última posição válida. Após este primeiro movimento, se o próximo número da entrada para i for 2 (linha 2) o gnomo agora será 3 e consequentemente o duende também será 3, correspondendo portanto, ao caractere D. O 1º passo é executado a cada nova lista codificada por elfos, o 2º, 3º e 4º passo são executados a cada número inteiro i que corresponde a linha da matriz. Papai Noel quer saber os presentes que contém na lista codificada por elfos.",
        "nivel": "",
        "entrada": "A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10000), que corresponde ao número de linhas codificadas por elfos. As N linhas seguintes contém um número indefinido de inteiros i (1 ≤ i ≤ 27), cada número inteiro i representa a linha da matriz e se i for 27, um espaço. A entrada termina com final de arquivo (EOF)."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir viavel se é possível transportar todos os passageiros de suas origens até o destino especificado, e inviavel em caso contrário. Uma linha em branco deve separar a saída de cada instância. Inclusive na última instancia.",
        "numero": "2047",
        "titulo": "Fly By Night",
        "descricao": "Bill Poucher anunciou em Shangai (China), em abril último, que a trigésima final mundial do ACM-ICPC será realizada em San Antonio (USA) na segunda semana de 2006. Ao tomar conhecimento de tal informação (com alguns meses de atraso), uma empresa de transportes aéreos do Texas - conhecida como Fly by Night Ltd. - decidiu aproveitar o evento para tentar incrementar seu ganho anual. O objetivo do CEO da empresa era oferecer transporte aéreo para os times (incluindo competidores e técnicos) e para a equipe de suporte (aqueles que fazem as coisas funcionarem) a partir de suas cidades de origem, em seus países de origem, até o local da competição. Para tentar garantir o sucesso de sua idéia, o mesmo CEO ofereceu tarifas ligeiramente abaixo do preço de mercado para aqueles que seriam transportados. Como eles eram em sua maioria estudantes e professores universitários, toparam na hora. Como você já deve ter imaginado, a Fly by Night Ltd. opera vôos noturnos. No entanto, em vez de possuir seus proprios aviões, a referida empresa apenas vende assentos em vôos de outras companhias. Ela ganha uma boa comissão devido ao fato de tais vôos terem, historicamente, uma baixa ocupação. No entanto, quando os funcionários da empresa foram verificar os vôos que teriam à disposição para realizarem a operação, tiveram uma bela surpresa. A maior parte dos vôos estava completamente lotada. Os que não estavam lotados, não possuiam muitos assentos livres. Ninguém soube explicar o motivo de tal demanda irregular. Duas hipóteses foram levantadas: a proximidade do spring-break americano e a popularidade da competição. :-) Na tentativa de salvar a empresa (e seu próprio cargo), o CEO percebeu que teria de utilizar escalas e baldeações. O lucro desta forma seria menor, mas nada comparado ao prejuízo que teria se operasse com vôos diurnos ou deixasse de transportar os passageiros (que naquela altura, já tinham pago as passagens...). Os funcionários da Fly by Night Ltd. levantaram então um conjunto de cenários com vôos que poderiam ser utilizados. O que foi percebido pouco depois é que nem todos os cenários eram viáveis, já que nem todos conseguiam transportar o montante de passageiros necessário. Finalmente, o CEO percebeu que não tinha pessoal qualificado para lidar com a situação. Você foi então contratado para desenvolver um programa que, para cada cenário construído, responda se o cenário é viável ou inviável.",
        "nivel": "",
        "entrada": "Um cenário será, daqui em diante, chamado de instância. Seu programa deve estar preparado para lidar com diversas instâncias. Cada instância começa com um inteiro 0 ≤ m ≤ 100 que especifica o número de cidades de origem dos passageiros que devem ser transportados. Um valor m = 0 indica o final das instâncias e não deverá ser processado. Em caso contrário, em cada uma das próximas m linhas, são dados o nome de uma cidade de origem e o respectivo número de passageiros daquela cidade (um inteiro não negativo menor ou igual a 100). O nome de uma cidade possui entre 1 e 20 caracteres tomados do alfabeto Σ={a,b,...,z,-}. Na próxima linha são dados um inteiro 0 ≤ n ≤ 100, que representa o número de vôos da instância, e o nome da cidade em que ocorrerá o evento (o CEO decidiu que o programa deveria aceitar isso). O nome desta cidade segue as mesmas regras estabelecidas acima. Em cada uma das próximas n linhas são dados os nomes de duas cidades de um vôo (origem e destino, respectivamente), seguido por um inteiro não negativo menor ou igual a 200 que representa o número de assentos livres naquele vôo. Novamente os nomes das cidades estão sobre Σ e de comprimento entre 1 e 20. Você pode supor que não há duas cidades com o mesmo nome, e que as cidades de origem e destino são sempre diferentes. Além disso, a Fly by Night Ltd. não trabalha com mais de um vôo entre quaisquer duas cidades. Em cada linha da entrada, um número qualquer de espaços pode separar os dados fornecidos."
    },
    {
        "assunto": "4",
        "saida": "A saída deve ser composta de duas linhas. A primeira linha deve conter um inteiro V que representa o maior número de letras favoritas presente no nome que deve ser escolhido por Prant. A segunda linha deve conter o nome que dever ser escolhido (se houver mais de uma resposta imprima o primeiro nome gerado por Prant que contém V letras favoritas).",
        "numero": "2064",
        "titulo": "Prant e a Indecisão",
        "descricao": "Prant é garoto muito indeciso, qualquer tipo de escolha é uma tarefa muito difícil e estressante para o menino. Porém recentemente Prant ganhou um cachorro e tem que escolher um nome para seu novo mascote. Ele tem um nome em mente, mas por ser muito indeciso de tempos em tempos Prant realiza uma operação de troca de letras, em que ele escolhe duas letras, A e B, e todas as letras A viram B e todas letras B viram A, assim trocando o nome de seu cachorro. É possível que alguma letra (A ou B) não esteja na palavra e ainda que A e B sejam a mesma letra, porque Prant fica muito nervoso ao fazer as operações. Para tomar uma decisão Prant sorteou algumas letras e as definiu como sendo suas letras favoritas (afinal Prant é muito indeciso, como ele iria escolher tais letras se não de maneira aleatória?) de modo que a melhor escolha de nome é a palavra que possui o maior número de letras favoritas. O problema é que Prant, devido ao nevorsimo, não consegue raciocinar na hora de definir as trocas de letras para formar o melhor nome possível, então ele continua fazendo trocas possivelmente ilógicas e assim alterando o nome do cão. Por exemplo se as letras fatoritas de Prant são {a, e, i, o, u}, o nome inicial do cão é \"abccdab\" com 2 letras favoritas e Prant realiza as seguintes operações de troca: troca(c, e), assim \"abccdab\" -> \"abeedab\", e agora o nome do cão é \"abeedab\" com 4 letras favoritas troca(b, i), assim \"abeedab\" -> \"aieedai\", e agora o nome do cão é \"aieedai\" com 6 letras favoritas troca(a, f), assim \"aieedai\" -> \"fieedfi\", e agora o nome do cão é \"fieedfi\" com 4 letras favoritas troca(d, h), assim \"fieedfi\" -> \"fieehfi\", e agora o nome do cão é \"fieehfi\" com 4 letras favoritas O melhor nome gerado durante as operações foi o nome \"aieedai\", pois foi o nome gerado com maior número de letras favoritas. Sua tarefa é, sabendo o nome inicial do cachorro de Prant, as letras favoritas de Prant e as operações por ele realizadas em ordem, definir qual foi o melhor nome gerado para o cãozinho. Perceba que manter o nome inicial é uma opção e que Prant sempre realiza as operações independetemente de serem lógicas ou não.",
        "nivel": "",
        "entrada": "A primeira linha da entrada é composta por 3 inteiros: k, m, n (1 ≤ k ≤ 26, 1 ≤ m, n ≤ 100 000). Nas próximas duas linhas haverá duas strings, compostas apenas de letras minúsculas, de tamanho k e m respectivamente. A primeira string é composta por letras não repetidas e representa as letras favoritas de Prant. Já a segunda string é o nome inicial do cão de Prant (o primeiro nome que Prant havia pensado). As próximas n linhas são compostas de dois caracteres a e b que representam as letras envolvidas em cada operação de troca de letras."
    },
    {
        "assunto": "4",
        "saida": "Imprima uma linha contendo um inteiro, indicando quanto tempo levará para que todos os clientes sejam atendidos.",
        "numero": "2065",
        "titulo": "Fila do Supermercado",
        "descricao": "Hoje é a inauguração de um grande supermercado em sua cidade, e todos estão muito excitados com os baixos preços prometidos. Este supermercado tem N funcionários que trabalham no caixa, identificados por números de 1 a N, onde cada funcionário leva um determinado tempo vi para processar um item de um cliente. Ou seja, se um cliente tem cj itens em sua cesta, um determinado funcionário levará vi*cj segundos para processar todos os itens deste cliente. Quando um cliente entra na fila para ser atendido ele espera até que um funcionário esteja livre para o atendê-lo. Se mais de um funcionário estiverem livres ao mesmo tempo, o cliente será atendido pelo funcionário de menor número de identificação. Tal funcionário só estará livre novamente após processar todos os itens deste cliente. Há M clientes na fila para serem atendidos, cada um com um determinado número de itens na sua cesta. Dadas as informações sobre os funcionários nos caixas e os clientes, o gerente pediu sua ajuda para descobrir quanto tempo levará para que todos os clientes sejam atendidos.",
        "nivel": "",
        "entrada": "A primeira linha conterá dois inteiros N e M, indicando o número de funcionários no caixa e o número de clientes, respectivamente (1 ≤ N ≤ M ≤ 104). Em seguida haverá N inteiros vi, indicando quanto tempo leva para o i-ésimo funcionário processar um item (1 ≤ vi ≤ 100, para todo 1 ≤ i ≤ N). Em seguida haverá M inteiros cj, indicando quantos itens o j-ésimo cliente tem em sua cesta (1 ≤ cj ≤ 100, para todo 1 ≤ j ≤ M)."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância seu programa deve produzir Q linhas na saída, sendo uma para cada consulta. Cada uma dessas linhas deve conter dois inteiros: o primeiro representa a soma do intervalo com maior soma, e o segundo, o número de elementos desse intervalo. Caso haja mais de um intervalo com maior soma, imprima o número de elementos naquele com maior número de elementos.",
        "numero": "2071",
        "titulo": "Banco do Faraó",
        "descricao": "Pouca gente sabe, mas foi no Antigo Egito que surgiram os primeiros bancos, de uma forma muito semelhante ao que conhecemos hoje. O principal banco era do faraó, que decidia, de tempos em tempos, tomar para o Estado o conteúdo de algumas contas. Isso ocorria da seguinte forma. Dado N, o número de correntistas do Banco do Faraó (era esse o nome do banco), cada conta podia ter uma quantia em menés (moeda do Antigo Egito) que podia ser, inclusive, negativa (indicando que a pessoa devia aquela quantia ao banco), ou seja, o estado de cada conta era um inteiro ai. O objetivo do faraó era fazer diversas consultas nas contas de seus súditos. Dado um intervalo [A;B] (correspondente as contas aA; aA+1; ... ; aB-1; aB) o faraó desejava encontrar um subintervalo de soma máxima, ou seja, cujo sequestro pelo Estado renderia ao Faraó a maior quantia de dinheiro. Isso era explicado aos correntistas como sendo uma oferenda a Amon-Ahcid, o Deus egípcio do dinheiro. Fazendo regularmente tais oferendas o deus ficava satisfeito e permitia que o sistema econômico funcionasse perfeitamente. Isso durou surpreendentemente mais de 500 anos, até que num desses sequestros os correntistas se rebelaram, tomaram o palácio e mataram o faraó. O banco foi saqueado e o sistema ruiu. Só se ouviu falar de bancos novamente centenas de anos depois. Sua tarefa é dado um registro de contas e uma série de consultas, determinar para cada consulta um intervalo de soma máxima.",
        "nivel": "",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N, indicando o número de contas no Banco do Faraó, onde 1 ≤ N ≤ 100 000. A segunda linha de cada instância contém N inteiros, entre -10 000 até 10 000, indicando os saldos nas contas dos correntistas. A terceira linha contém um inteiro Q, onde 1 ≤ Q ≤ 100 000, indicando o número de consultas que serão feitas. Cada uma das Q linhas seguintes contém dois inteiros A e B, onde 1 ≤ A, B ≤ N, indicando o intervalo que deve ser consultado."
    },
    {
        "assunto": "4",
        "saida": "Para cada consulta, imprima uma linha contendo yes se é possível escolher um quadrado tal que sua pontuação não será igual a zero, ou no caso contrário.",
        "numero": "2067",
        "titulo": "Jogo do Quadrado",
        "descricao": "O \"jogo do quadrado\" é um jogo muito popular hoje em dia! O jogo é muito simples: é dada um retângulo de N linhas e M colunas contendo números inteiros não negativos. A imagem a seguir mostra um retângulo com 3 linhas e 4 colunas. Também é dado um inteiro S. Você deve escolher algum quadrado com S linhas e S colunas contido inteiramente dentro do retângulo. Sua pontuação é dada pelo produto de todos os inteiros dentro do quadrado que você escolheu. Por exemplo, se S=2 e você escolheu o quadrado mostrado em azul na imagem acima, sua pontuação será igual a 2×3×2×1 = 12. Você percebeu que, dependendo do quadrado que você escolher, sua pontuação pode ser igual a zero. São dados um retângulo e uma lista de consultas. Para cada consulta, é dado um inteiro S e você deve determinar se é possível escolher algum quadrado SxS de tal forma que sua pontuação não será igual a zero.",
        "nivel": "",
        "entrada": "A primeira linha contém dois inteiros N e M (1 ≤ N, M ≤ 200) indicando o número de linhas e de colunas do retângulo. As próximas N linhas contém M inteiros cada, descrevendo o retângulo. Cada inteiro no retângulo não é maior que 109. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 200) indicando o número de consultas. Cada uma das próximas Q linhas descreve uma consulta. Cada linha contém um inteiro S (1 ≤ S ≤ min(N,M)) indicando o comprimento do lado do quadrado que você deve escolher."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância imprima uma linha contendo o número de planejamentos diferentes.",
        "numero": "2074",
        "titulo": "Variados Pratos da Linda Nefertiti",
        "descricao": "Nefertiti foi rainha do Egito, esposa de Akhenaton, e é tida como uma das mais belas mulheres da história do mundo. A vida familiar da rainha do Egito obrigava-a a cuidar de diversas coisas, inclusive do cardápio da corte. Akhenaton era conhecido por detestar que a comida se repetisse com frequência, e mesmo em intervalos regulares. Ele desejava que os cardápios não apenas fossem diferentes, como fosse praticamente impossível descobrir quando um prato se repetiria. Isso criou um enorme problema para os cozinheiros do rei, Nefertiti teve, então, uma ideia. Elaborou uma lista de N pratos, que seriam repetidos. Uma exigência dela era que a diferença entre o prato preparado no i-ésimo dia e i fosse, em módulo, menor que um certo K dado. Tal exigência, além de ser por motivos religiosos, em virtude de obrigações dos egípcios a Ra, se devia também ao fato de que os ingredientes do prato eram conseguidos neste intervalo, e também estavam sujeitos a perder a validade para o consumo. Sua tarefa neste programa é determinar, dado um inteiro N (número de diferentes pratos) e um inteiro K, quantos diferentes planejamentos podemos fazer (que são, na verdade, permutações π de {1, 2,...,n}) que satisfazem a restrição abaixo: |π(i) - i| ≤ K, para i = 1,...,N.",
        "nivel": "",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém dois inteiros N e K, onde 1 ≤ N ≤ 100 e 1 ≤ K ≤ 6."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância imprima uma linha contendo a K-ésima escultura mal-formada de comprimento N . Caso não exista uma tal escultura imprima uma linha contendo −1.",
        "numero": "2075",
        "titulo": "Zé Coquinho",
        "descricao": "Zé Coquinho é um artesão que produz esculturas feitas com cocos. Os cocos secos são cortados ao meio e as cuias formadas pelas cascas são pintadas e utilizadas para construir as esculturas. As esculturas são muito famosas, sendo procuradas por colecionadores de todo o mundo. Figura 1: A mais famosa escultura de coco feita por Zé Coquinho. As esculturas de Zé Coquinho são sequências de cuias coladas umas nas outras. Uma escultura bem-formada é definida pelo seguinte conjunto de regras: Uma sequência vazia de cuias é uma escultura bem-formada. Se T é um escultura bem-formada, então uma escultura formada por (T) (ou seja, uma cuia aberta para a direita, seguida de T , seguida de uma cuia aberta para a esquerda) é uma escultura bem-formada; Se T e S são esculturas bem-formadas, então ST (ou seja, a escultura S seguida de T) é uma escultura bem-formada. Note que todas as esculturas bem-formadas são construídas usando apenas as regras descritas acima. Seja T uma escultura formada por cuias de coco. Se T não é uma escultura bem-formada, dizemos que T é uma escultura mal-formada. Uma característica marcante das esculturas de Zé Coquinho é que elas nunca são bem-formadas; todas as esculturas que ele fez na sua longa vida são mal-formadas. O Museu de Arte Moderna de Graviúna quer fazer uma exposição de esculturas de Zé Coquinho. Para organizar a exposição, o museu resolveu ordenar as esculturas em ordem lexicográfica. Na ordem lexicográfica definida pelo museu o símbolo ( vem antes do símbolo ). Por exemplo, ((( < (() e )( < )). O comprimento de uma escultura mal-formada é o número de cuias que a mesma possui. Dados dois inteiros N e K, você deve determinar a K-ésima escultura mal-formada de comprimento N considerando a ordem definida pelo museu. Considere que Zé Coquinho fez todas as esculturas mal-formadas de comprimento N.",
        "nivel": "",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém dois inteiros N e K, onde 1 ≤ N ≤ 50 e 1 ≤ K ≤ 2n − 1, indicando respectivamente o comprimento da escultura e o índice da escultura (na ordem lexicográfica) que você deve determinar."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância imprima uma linha contendo o número mínimo de passageiros que devem ser transportados.",
        "numero": "2077",
        "titulo": "Los buses de Cartagena",
        "descricao": "Gabriel Garcia Marques é um escritor colombiano autor de histórias fantásticas como \"Cién años de soledade\", \"El amor en los tiempos del cólera\" e \"Memoria de mis putas tristes\". Suas histórias se caracterizam pelo uso do que ficou conhecido como \"realismo mágico\", em que situações reais são explicadas com elementos mágicos. Apesar de seus trabalhos serem considerados muito ricos e até cenográficos, filmes baseados em suas obras não têm merecido sucesso de público ou de crítica. O mais recente exemplo foi a filmagem em 2007 de \"Love in the Time of Cholera\". Uma de suas obras menos conhecidas é \"Los buses de Cartagena\", que descreve a história de uma pequena companhia de ônibus da cidade colombiana que, principalmente devido aos problemas de quebra dos ônibus por excesso de carga, pretendia reduzir o número de passageiros transportados em cada viagem de Cartagena a Medellin para um mesmo número fixo. Ao mesmo tempo, a companhia queria continuar atendendo a todos os pedidos de forma satisfatória. Cada ônibus possui um horário de partida, e cada passageiro dispõe de uma lista de horários nos quais gostaria de viajar. Os passageiros desejam apenas ir para Medellin, ou seja, nenhum passageiro pretende viajar duas vezes no mesmo dia. Sua tarefa é determinar o número mínimo de passageiros que devem ser transportados em cada viagem respeitando a restrição de que todos os passageiros devem ser atendidos.",
        "nivel": "",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros N e M (1 ≤ N,M ≤ 100). Cada uma das M linhas seguintes possui o horário de partida de um dos ônibus. O horário está no formato hh:mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59 e hh e mm possuem dois dígitos). Cada uma das N linhas seguintes contém a lista de horários em que cada passageiro pode viajar. A lista dos horários está no seguinte formato: um inteiro K (1 ≤ K ≤ M) seguido de K horários, também no formato hh:mm, separados por um espaço em branco."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima uma linha contendo o tempo, em minutos, de luz solar que o jardim receberá no dia escolhido, arredondado para 2 casas decimais.",
        "numero": "2110",
        "titulo": "Banho de Sol no Jardim",
        "descricao": "Uma empresa quer demolir um prédio para construir um jardim em uma das principais avenidas de Ecaterimburgo, mas antes quer fazer um estudo: descobrir o tempo de luz de sol que esse jardim receberia por dia, considerando que ela irá demolir o prédio escolhido e construir o jardim no lugar. Isso é importante, pois banho de sol é uma atividade muito popular entre os habitantes da cidade durante o verão. O jardim recebe luz do sol se pelo menos um pedaço dele estiver recebendo raios solares. Para facilitar as coisas, a construtora escolheu um dia do ano para fazer as medições. Nesse dia o sol nasce às 5:30 e se põe às 21:30 (no verão russo os dias são longos). Considere que o sol tem velocidade angular constante no céu e que ele nasce no leste e se põe no oeste. Todos os prédios são alinhados na direção leste-oeste, têm a mesma largura e o espaçamento entre eles é constante, o jardim terá largura igual à dos prédios.",
        "nivel": "",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de 2 linhas. A primeira linha contém 3 inteiros N (2 ≤ N ≤ 100), L, D (1 ≤ L, D ≤ 100), o número de prédios, a largura de cada um deles, e o espaçamentos entre eles, respectivamente. A segunda linha contém N inteiros hi (0 ≤ hi ≤ 50), as alturas dos prédios. Uma altura de 0 indica que o jardim será construído nessa posição e aparecerá exatamente uma vez. Todas as medidas são em metros."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima apenas o número que ficou sozinho. É garantido que apenas um número está sozinho.",
        "numero": "2091",
        "titulo": "Número Solitário",
        "descricao": "Será dado a você um vetor com N números, onde todos estarão em pares. Porém um desses números acabou ficando sem par, você consegue identificar qual é esse número ? Por exemplo, A = {1, 1, 3, 3, 5, 5, 5}, o número que ficou sozinho foi o 5.",
        "nivel": "",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha contendo um inteiro N (1 ≤ N < 10^5), seguida por N números (0 ≤ A ≤ 10^12). A entrada termina quando N = 0 e não deve ser processada."
    },
    {
        "assunto": "4",
        "saida": "Imprimir M linhas, a i-ésimo delas indicando o resultado da i-ésima mudança descrita na entrada. Cada linha deve conter dois inteiros números dccw e dcw, representando as distâncias em unidades noglônicas da casa que está mudando para a primeira casa cuja família torce para a mesma equipe, no sentido anti-horário e no sentido horário, respectivamente.",
        "numero": "2092",
        "titulo": "Assistindo o Jogo",
        "descricao": "No reino de Noglônia há um lago conhecido como o \"Grande O\" por causa de sua forma perfeitamente redonda. No lado do lago há n casas, cada um deles a uma distância de uma unidade noglônica de seus vizinhos. As casas são numeradas de 1 a N em sentido horário, como pode ser visto na figura a seguir para N = 8. Desta forma, se i <j a distância em sentido horário a partir de casa i para a casa j é j-i, ao passo que a distância correspondente no sentido anti-horário é N - j + i. Note que a distância a partir de uma casa até ela mesma é N, em ambas as direções. Todos sabem que o povo de Noglônia são ávidos fãs de futebol, por isso, quando uma família se muda para uma casa do lado do lago é muito importante para eles saberem quem são os vizinhos mais próximos que torcem para a mesma equipe que eles. Isso nem sempre é fácil, uma vez que pode haver muitas casas ao redor do lago, muitos times de futebol diferentes em Noglônia e várias mudanças. Dada uma sequência de M mudanças, as pessoas que vivem na margem do lago querem saudar cada nova família que chega, dizendo-lhes a distância do seu novo lar para as casas mais próximas que torcem para a mesma equipe que eles, tanto no sentido horário e anti-horário. Observe que, se não houver outra casa na margem do lago cuja família torce para a mesma equipe como o recém-chegado, essa distância será N em ambas as direções, pois a casa mais próxima seria de fato a sua própria casa. Você quer participar do comitê de boas-vindas? Em Noglônia existem F times de futebol, identificados por diferentes números inteiros de 0 a F-1. Não quero que você perca tempo indo de porta em porta perguntando qual equipe é seguida em cada casa, vamos supor que, inicialmente, a família que vive na casa de número i é fã da equipe de número ei, sendo este número gerado, de forma pseudoaleatória, pela fórmula recursiva: e1 = A e ei = (B x ei-1 + C) mod F para i = 2, 3, ..., N onde A, B e C são constantes e a expressão x mod y representa o resto da divisão inteira de x por y.",
        "nivel": "",
        "entrada": "A primeira linha contém dois números inteiros N e F, indicando, respectivamente, o número de casas ao redor do lago e do número de equipes de futebol em Noglônia (3 ≤ N ≤ 105 e 1 ≤ F ≤ 106). A segunda linha contém três números inteiros A, B e C, que determinam qual equipe é as famílias vivendo inicialmente ao redor do lago torcem, como é descrito na descrição do problema (0 ≤ A, B, C < F). A terceira linha contém um único número inteiro M, que representa o número de mudanças que irão acontecer (1 ≤ M ≤ 105). Cada uma das M seguintes linhas descrevem um movimento usando dois números inteiros I e E, o que significa que a família que torce para o time E está mudando para a casa de número I (1≤ I ≤ N e 0 ≤ E < F). As mudanças aparecem na ordem que elas acontecem, e devem ser levadas em consideração pelo comitê para futuras boas-vindas."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância imprima a representação do número N (0 ≤ N < 109) no sorobov com o seguinte formato. As duas primeiras linhas correspondem às pedras que valem 5, na linha seguinte imprima --------- (nove hífens) e as próximas cinco linhas correpondem às pedras que valem 1. Cada linha de pedras deve conter nove caracteres, onde '0' corresponde a um espaço vazio e '1' a uma pedra. Imprima uma linha em branco ao final de cada instância (inclusive a última).",
        "numero": "2111",
        "titulo": "Entendendo o Sorobov",
        "descricao": "Instrumentos de ajuda a calcular existem há séculos. Muito antes do surgimento das máquinas de calcular no século XVII, chineses e japoneses faziam uso de ábacos com os quais podem fazer operações matemáticas sofisticadas em velocidade estonteante. Um instrumento semelhante foi recentemente descoberto em escavações nas imediações da cidade de Ecaterimburgo. Acredita-se ser um ábaco similar ao japonês, chamado, em russo, sorobov (copoбob). O sorobov tem nove colunas, onde cada coluna corresponde a um dígito. A coluna mais à direita representa a unidade, a segunda mais à direita representa as dezenas e assim por diante. Existem 7 linhas, sendo as duas primeiras separadas, por uma barra, das 5 últimas. Na parte de cima (duas primeiras linhas) cada coluna possui uma única pedra, que se encostada na barra separadora soma 5 ao valor do dígito correspondente. Na parte de baixo cada coluna possui 4 pedras e um espaço vazio e a quantidade de pedras entre a barra separadora e o espaço vazio é somado ao valor do dígito correspondente. Dessa forma, dizemos que as pedras de cima valem 5 e as de baixo valem 1. Figura 1: Ilustração de como representar os números de 0 a 9. Sua tarefa neste problema será, dado um número N imprimir uma representação da configuração do sorobov correspondente ao número.",
        "nivel": "",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância corresponde a uma única linha contendo o número N a ser inserido no sorobov. A entrada deve ser lida da entrada padrão."
    },
    {
        "assunto": "4",
        "saida": "Seu programa deverá imprimir os inscritos pela ordem de escolha e por ordem alfabética, seguido do nome do vencedor. Imprima uma linha em branco entre a lista de inscritos e o nome do vencedor.",
        "numero": "2136",
        "titulo": "Amigos do Habay",
        "descricao": "Todo final de ano ocorre uma festa na Instituição de Educação Fantástica (IEF). Logo no início de julho, são abertas as inscrições para participar dela. No momento da inscrição, o usuário pode escolher se quer ser \"O Amigo do Habay\" na festa ou não. O mais lógico seria escolher a opção Sim, afinal, é um privilégio ser O Amigo do Habay, já que ele é a pessoa mais descolada do IEF. Porém, há indivíduos que definitivamente não pretendem ser O Amigo do Habay, e por motivos desconhecidos. Somente um será o escolhido. Em vista disso, muitos alunos que escolheram a opção Sim realizaram a inscrição diversas vezes para aumentar a própria probabilidade de ser O Amigo do Habay. O organizador geral da festa contratou você para organizar as inscrições do site, pois está havendo um spam de inscrições. O critério para ser o escolhido é a quantidade de letras do primeiro nome, e em caso de empate, vence aquele que realizou primeiro a inscrição. A organização final dos inscritos deverá seguir a ordem de escolha (Sim ou Não), mas respeitando a ordem alfabética. OBS.: Ninguém que escolheu a opção Não realizou a inscrição mais de uma vez.",
        "nivel": "",
        "entrada": "A entrada contém somente um caso de teste. Cada linha é composta pelo primeiro nome do participante (sem espaços), seguido da opção YES (caso o usuário queira ser O Amigo do Habay) ou NO (caso não queira). A entrada termina assim que o usuário digita \"FIM\" (sem as aspas)."
    },
    {
        "assunto": "4",
        "saida": "A saída consiste em Q inteiros. Os inteiros representam, em ordem, a matrícula dos tutores de cada aluno na ordem que foi pedida.",
        "numero": "2120",
        "titulo": "Tutores",
        "descricao": "Cada vez que um novo aluno entra da Organização Educacional Farias Brito, ele recebe um tutor para ajudá-lo a conhecer a todos e tudo na escola. O sistema da escola para determinar o tutor de cada novo aluno foi criado por um louco chamado Succa Liaudzionis. Succa decidiu usar o número de matrícula de cada aluno para seguir o padrão de uma árvore binaria de busca (porque sim), desta maneira: O primeiro aluno, com matrícula X1 vira a raíz da árvore e então não possui tutor. Os números X2, X3, …, Xn são adicionados um a um a árvore. Para adicionar um número Xi, você deve percorrer a árvore partindo da raíz e usando as seguintes regras: O ponteiro está inicialmente apontando para a raíz da árvore. Se Xi é menor que o número do nó atual, o filho da esquerda passar a ser o nó atual. Senão, o filho da direita vira. Se, em algum momento, o filho desejado não existir, cria-se um novo nó contendo o valor de Xi. A matrícula do tutor do estudante atual é o pai de Xi na árvore. Por exemplo, se a ordem na qual os números forem adicionados for (3, 1, 4, 2, 5), a árvore fica desta maneira: Succa precisava de espaço extra em seu computador e decidiu apagar toda informação envolvendo os tutores dos alunos. Agora, seu chefe, Jeixeira Túnior, pediu a mesma informação sobre Q alunos que ele acabou de deletar! Succa considerou perguntar a cada estudante quem é seu tutor, mas isso demoraria tempo demais. Por outro lado, Succa ainda sabe a ordem na qual os estudantes foram adicionados a árvore. Como Succa não é tão brilhante quanto louco, ele precisa da sua ajuda para usar essa informação e determinar o tutor de cada aluno.",
        "nivel": "",
        "entrada": "A entrada consiste de quatro linhas. A primeira contém um inteiro N (2 ≤ N ≤ 100 000), o número de estudantes do Farias Brito. A segunda linha contém n inteiros distintos Xi (1 ≤ Xi ≤ 109), representando a matrícula de cada um dos n alunos na ordem em que eles foram adicionados ao sistema. A terceira linha contém Q (1 ≤ Q ≤ 99 999). A quarta linha contém os Q alunos representados por números de 1 a N que se quer informação (não será pedida informação sobre o primeiro aluno)."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância da entrada seu programa deverá imprimir, em uma única linha, a lista de candidatos eleitos ordenada pela classificação dos candidatos na eleição. No caso de dois candidatos possuírem a mesma classificação, o de menor índice vem antes. A saída deve ser escrita na saída padrão.",
        "numero": "2122",
        "titulo": "Votação em Ecaterimburgo",
        "descricao": "Ecaterimburgo, Rússia, é uma cidade com um curioso sistema de votação. Em uma eleição em que haja V vagas para um cargo, cada eleitor tem direito a fazer V votos, ordenados em sua ordem de preferência. Assim, se, por exemplo, há 3 vagas de senador, cada eleitor vota em até 3 nomes. Serão eleitos os candidatos que tiverem o maior número de votos, sem importar em que posição da preferência do eleitor está o candidato. Apenas quando há empate no número de votos se torna relevante a ordem dada pelos eleitores. Ganha aquele candidato que tiver mais indicações em primeiro lugar. Se persistir o empate, em segundo lugar, e assim por diante. Caso dois ou mais candidatos que estejam em posição de serem eleitos tenham exatamente o mesmo número de indicações em todas as posições, todos são eleitos (podendo inclusive exceder o número de vagas). Candidatos com zero votos podem ser eleitos se ainda existir vagas disponíveis.",
        "nivel": "",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância começa com o número N (1 ≤ N ≤ 105) de eleitores, o número K de candidatos e V (1 ≤ V ≤ K ≤ 100) de vagas. A seguir vêm N linhas com os votos de cada um dos eleitores. Em seu voto, o eleitor i indicará o número Li (1 ≤ Li ≤ 100) de candidatos em quem votará, e os índices destes candidatos na sua ordem de preferência. Índices de candidatos fora do intervalo [1, K] significam votos em branco apenas para a opção de preferência correspondente. Se indicar mais que V votos, os últimos serão desconsiderados. Um eleitor nunca indica o mesmo candidato mais de uma vez. A entrada deve ser lida da entrada padrão."
    },
    {
        "assunto": "4",
        "saida": "A saída consiste em um valor racional, seguido de um sinal de igualdade e outro valor racional, que é a simplificação do primeiro valor. No caso do primeiro valor não poder ser simplificado, o mesmo deve ser repetido após o sinal de igualdade.",
        "numero": "1022",
        "titulo": "TDA Racional",
        "descricao": "A tarefa aqui neste problema é ler uma expressão matemática na forma de dois números Racionais (numerador / denominador) e apresentar o resultado da operação. Cada operando ou operador é separado por um espaço em branco. A sequência de cada linha que contém a expressão a ser lida é: número, caractere, número, caractere, número, caractere, número. A resposta deverá ser apresentada e posteriormente simplificada. Deverá então ser apresentado o sinal de igualdade e em seguida a resposta simplificada. No caso de não ser possível uma simplificação, deve ser apresentada a mesma resposta após o sinal de igualdade. Considerando N1 e D1 como numerador e denominador da primeira fração, segue a orientação de como deverá ser realizada cada uma das operações: Soma: (N1*D2 + N2*D1) / (D1*D2) Subtração: (N1*D2 - N2*D1) / (D1*D2) Multiplicação: (N1*N2) / (D1*D2) Divisão: (N1/D1) / (N2/D2), ou seja (N1*D2)/(N2*D1)",
        "nivel": "2",
        "entrada": "A entrada contem vários casos de teste. A primeira linha de cada caso de teste contem um inteiro N (1 ≤ N ≤ 1*104), indicando a quantidade de casos de teste que devem ser lidos logo a seguir. Cada caso de teste contém um valor racional X (1 ≤ X ≤ 1000), uma operação (-, +, * ou /) e outro valor racional Y (1 ≤ Y ≤ 1000)."
    },
    {
        "assunto": "4",
        "saida": "Para cada entrada, deve-se apresentar a mensagem “Cidade# n:”, onde n é o número da cidade seguindo a sequência (1, 2, 3, ...) e em seguida deve-se listar, por ordem ascendente de consumo, a quantidade de pessoas seguido de um hífen e o consumo destas pessoas, arredondando o valor para baixo. Na terceira linha da saída deve-se mostrar o consumo médio por pessoa da cidade, com 2 casas decimais sem arredondamento, considerando o consumo real total. Imprimir uma linha em branco entre dois casos de teste consecutivos. No fim da saída não deve haver uma linha em branco.",
        "numero": "1023",
        "titulo": "Estiagem",
        "descricao": "Devido às constantes estiagens que aconteceram nos últimos tempos em algumas regiões do Brasil, o governo federal criou um órgão para a avaliação do consumo destas regiões com finalidade de verificar o comportamento da população na época de racionamento. Este órgão responsável irá pegar algumas cidades (por amostragem) e verificará como está sendo o consumo de cada uma das pessoas da cidade e o consumo médio de cada cidade por habitante.",
        "nivel": "3",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1*106), indicando a quantidade de imóveis. As N linhas contém um par de valores X (1 ≤ X ≤ 10) e Y (1 ≤ Y ≤ 200), indicando a quantidade de moradores de cada imóvel e o respectivo consumo total de cada imóvel (em m3). Com certeza, nenhuma residência consome mais do que 200 m3 por mês. O final da entrada é representado pelo número zero."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste de saída deve haver um número serial do caso de teste. Para cada consulta, escreva uma linha de saída. O formato desta linha dependerá se o número consultado estiver ou não escrito em um dos mármores. Os dois diferentes formatos são descritos abaixo: 'x found at y', se o primeiro marble x foi encontrado na posição y. Posições são numeradas de 1, 2,...  a N. 'x not found', se o marble com o número x não estiver presente.",
        "numero": "1025",
        "titulo": "Onde está o Mármore?",
        "descricao": "Raju e Meena adoram jogar um jogo diferente com pequenas peças de mármores, chamados Marbles. Eles têm um monte destas peças com números escritos neles. No início, Raju colocaria estes pequenos mármores um após outro em ordem ascendente de números escritos neles. Então Meena gostaria de pedir a Raju para encontrar o primeiro mármore com um certo número. Ele deveria contar 1...2...3. Raju ganha um ponto por cada resposta correta e Meena ganha um ponto se Raju falha. Depois de um número fixo de tentativas, o jogo termina e o jogador com o máximo de pontos vence. Hoje é sua chance de jogar com Raju. Sendo um/a cara esperto/a, você tem em seu favor o computador. Mas não subestime Meena, ela escreveu um programa para monitorar quanto tempo você levará para dar todas as respostas. Portanto, agora escreva o programa, que ajudará você em seu desafio com Raju.",
        "nivel": "2",
        "entrada": "A entrada contém vários casos de teste, mas o total de casos é menor do que 65. Cada caso de teste inicia com dois inteiros: N que é o número de mármores e Q que é o número de consultas que Meena deseja fazer. As próximas N linhas conterão os números escritos em cada um dos N mármores. Os números destes mármores não tem qualquer ordem em particular. As seguintes Q linhas irão conter Q consultas. Tenha certeza, nenhum dos números da entrada é maior do que 10000 e nenhum deles é negativo. A entrada é terminada por um caso de teste onde N = 0 e Q = 0."
    },
    {
        "assunto": "4",
        "saida": "O arquivo de saída contém a quantidade de linhas correspondente às linhas com permutações no arquivo de entrada. Cada linha de saída deve ser Yes se for possível organizar os vagões da forma solicitada e No, caso contrário. Há também uma linha em branco após cada bloco de entrada. No exemplo abaixo,  O primeiro caso de teste tem 3 permutações para 5 vagões. O ultimo zero dos testes de entrada não devem ser processados.",
        "numero": "1062",
        "titulo": "Trilhos",
        "descricao": "Há uma famosa estação de trem na cidade PopPush. Esta cidade fica em um país incrivelmente acidentado e a estação foi criada no último século. Infelizmente os fundos eram extremamente limitados naquela época. Foi possível construir somente uma pista. Além disso, devido a problemas de espaço, foi feita uma pista apenas até a estação (veja figura abaixo).   A tradição local é que todos os comboios que chegam vindo da direção A continuam na direção B com os vagões  reorganizados, de alguma forma. Suponha que o trem que está chegando da direção A tem N <= 1000 vagões numerados sempre em ordem crescente 1,2, ..., N. O primeiro que chega é o 1 e o último que chega é o N. Existe um chefe de reorganizações de trens que quer saber se é possível reorganizar os vagões para que os mesmos saiam na direção B na ordem a1, a2, an.. O  chefe pode utilizar qualquer estratégia para obter a saída desejada. No caso do desenho ilustrado acima, por exemplo, basta o chefe deixar todos os vagões entrarem na estação (do 1 ao 5) e depois retirar um a um: retira o 5, retira o 4, retira o 3, retira o 2 e por último retira o 1.  Desta forma, se o chefe quer saber se a saída 5,4,3,2,1 é possível em B, a resposta seria Yes. Vagão que entra na estação só pode sair para a direção B e é possível incluir quantos forem necessários para retirar o primeiro vagão desejado.",
        "nivel": "3",
        "entrada": "O arquivo de entrada consiste de um bloco de linhas, cada bloco, com exceção do último, descreve um trem e possivelmente mais do que uma requisição de reorganização. Na primeira linha de cada bloco há um inteiro N que é a quantidade de vagões. Em cada uma das próximas linhas de entrada haverá uma permutação dos valores 1,2, …, N. A última linha de cada bloco contém apenas 0. Um bloco iniciando com zero (0) indica o final da entrada."
    },
    {
        "assunto": "4",
        "saida": "O arquivo de saída contém a quantidade de linhas correspondente ao número de casos de teste de entrada. Cada linha de saída contém uma sequência de I e R conforme o exemplo. Se não for possível mostrar a saída, as operações devem ser interrompidas e a mensagem \"Impossible\" deve ser impressa, com um espaço após a sequência.",
        "numero": "1063",
        "titulo": "Trilhos Novamente... Traçando Movimentos",
        "descricao": "Você lembra daquela estação de trem da cidade PopPush? Apenas para relembrar, existe uma estação de trem em um país incrivelmente acidentado. Além disso, a estação foi construída no século passado e infelizmente os fundos eram muito limitados. Em um determinado trecho foi possível construir apenas uma pista e, a solução encontrada para transportar as cargas nos dois sentidos foi construir uma estação que permitisse desconectar os vagões de uma locomotiva e conectar em outra, que iria em outro sentido. Cada trem que chega na direção A é manobrado e seus vagões continuam na direção B, reorganizados conforme o chefe da estação deseja. Ao chegar pelo lado A, cada vagão é desconectado e vai até a estação e depois segue para a direção B, para ser conectado na segunda locomotiva. Você pode desconectar quantos trens deseja na estação, mas o vagão que entra na estação só pode sair pelo lado B e uma vez que ele sai, não pode mais entrar novamente. Todos vagões são identificados pelas letras minúsculas (a até z). Isto significa 26 vagões no máximo. O chefe da organização dos vagões precisa agora que você ajude a resolver para ele, através de um programa, qual a sequência de movimentos é necessária para obter a saída desejada após a entrada na estação, seguindo para a direção B. O movimento de entrada e saída da estação é descrito respectivamente pelas letras I e R (Insere e Remove). Utilizando a figura dada como exemplo, a entrada e,t,d,a para uma saída desejada d,a,t,e, resulta nos movimentos I,I,I,R,I,R,R,R",
        "nivel": "4",
        "entrada": "A entrada consiste em vários casos de teste, onde cada caso de teste é composto por 3 linhas. A primeira das 3 linhas contém um número inteiro N que representa o número total de vagões. A segunda linha contém a sequência dos vagões que vêm do lado A e a Terceira linha contém a sequência que o chefe de organização deseja como saída para o lado B. A última linha de entrada contém apenas 0, indicando o fim da entrada."
    },
    {
        "assunto": "4",
        "saida": "O arquivo de saída deverá ter a quantidade de linhas correspondente ao arquivo de entrada, cada uma delas contendo as palavras correct ou incorrect de acordo com as regras acima fornecidas.",
        "numero": "1068",
        "titulo": "Balanço de Parênteses I",
        "descricao": "Dada uma expressão qualquer com parênteses, indique se a quantidade de parênteses está correta ou não, sem levar em conta o restante da expressão. Por exemplo: a+(b*c)-2-a        está correto (a+b*(2-c)-2+a)*2  está correto enquanto (a*b-(2+c)         está incorreto 2*(3-a))           está incorreto )3+b*(2-c)(        está incorreto Ou seja, todo parênteses que fecha deve ter um outro parênteses que abre correspondente e não pode haver parênteses que fecha sem um previo parenteses que abre e a quantidade total de parenteses que abre e fecha deve ser igual.",
        "nivel": "2",
        "entrada": "Como entrada, haverá N expressões (1 <= N <= 10000), cada uma delas com até 1000 caracteres."
    },
    {
        "assunto": "4",
        "saida": "Você deve imprimir a quantidade de diamantes possíveis de serem extraídos em cada caso de entrada.",
        "numero": "1069",
        "titulo": "Diamantes e Areia",
        "descricao": "João está trabalhando em uma mina, tentando retirar o máximo que consegue de diamantes \"\". Ele deve excluir todas as particulas de areia \".\" do processo e a cada retirada de diamante, novos diamantes poderão se formar. Se ele tem como uma entrada .>....>....>>>., três diamantes são formados. O primeiro é retirado de , resultando  .....>....>>>. Em seguida o segundo diamante é retirado, restando .....>>>. O terceiro diamante é então retirado, restando no final .....>>>., sem possibilidade de extração de novo diamante.",
        "nivel": "2",
        "entrada": "Deve ser lido um valor inteiro N que representa a quantidade de casos de teste. Cada linha a seguir é um caso de teste que contém até 1000 caracteres, incluindo \", .\""
    },
    {
        "assunto": "4",
        "saida": "Para cada caso, apresente a expressão convertida para a forma posfixa.",
        "numero": "1077",
        "titulo": "Infixa para Posfixa",
        "descricao": "O Professor solicitou que você escreva um programa que converta uma expressão na forma infixa (como usualmente conhecemos) para uma expressão na forma posfixa. Como você sabe, os termos in (no meio) e pos (depois) se referem à posição dos operadores. O programa terá que lidar somente com operadores binários +,-,*,/,^, parênteses, letras e números. Um exemplo seria uma expressão como: (A*B+2*C^3)/2*A. O programa deve converter esta expressão (infixa) para a expressão posfixa: AB*2C3^*+2/A*",
        "nivel": "3",
        "entrada": "A primeira linha da entrada contém um valor inteiro N (N < 1000), que indica o número de casos de teste. Cada caso de teste a seguir é uma expressão válida na forma infixa, com até 300 caracteres."
    },
    {
        "assunto": "4",
        "saida": "Como saída, para cada expressão de entrada deverá ser gerado uma linha indicando o resultado do processamento. Se a expressão estiver correta, esta deverá ser transformada para a forma posfixa. Se não for possível, deverá ser impressa a mensagem \"Lexical Error!\" indicando erro léxico ou \"Syntax Error!\" indicando o erro de sintaxe, nesta ordem.",
        "numero": "1083",
        "titulo": "LEXSIM - Avaliador Lexico e Sintático",
        "descricao": "Uma das formas mais interessantes do uso de pilhas é a na avaliação de uma expressão matemática. Pode-se, através da pilha, fazer a análise léxica de uma expressão (indicar se uma expressão possui um operando inválido, como por exemplo um símbolo qualquer que não está presente nem na tabela de operadores, nem na tabela de operandos) e também a análise sintática. A análise sintática pode indicar que está faltando um ou mais parênteses, sobrando um ou mais parênteses, sobrando operador, 2 operandos sucessivos, etc. A tarefa aqui é determinar se uma expressão está correta ou não.",
        "nivel": "6",
        "entrada": "Como entrada, são válidos: a) Operandos: todas as letras maiúsculas ou minúsculas ('a'..'z', 'A'..'Z') e números (0...9). b) Parênteses. c) Operadores: deverão ser aceitos os seguintes operadores segundo a tabela de prioridades  apresentada abaixo: Operador Prioridade ^ 6 *,/ 5 +,- 4 >,<,=,#, 3 AND ( . ) 2 OR ( | ) 1 Para facilitar a implementação, será utilizado um ponto para representar o AND (.) e o Pipe ( | ) para representar o OR. Obs.: Como restrição, não será permitida a entrada de expressões com operadores unários, como por e exemplo o '-' de: 4 * -2 A finalização da entrada será determinada pelo final do arquivo de entrada EOF()."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, com o nome do vencedor, igual a Carlos ou Marcelo., sem espaços em branco.",
        "numero": "1088",
        "titulo": "Bolhas e Baldes",
        "descricao": "Andrea, Carlos e Marcelo são muito amigos e passam todos os finais de semana à beira da piscina. Enquanto Andrea se bronzeia ao sol, os dois ficam jogando Bolhas. Andrea, uma cientista da computação muito esperta, já disse a eles que não entende por que passam tanto tempo jogando um jogo tão primário. Usando o computador portátil dela, os dois geram um inteiro aleatório N e uma seqüência de inteiros, também aleatória, que é uma permutação de 1, 2, . . . ,N. O jogo então começa, cada jogador faz um movimento, e a jogada passa para o outro jogador. Marcelo é sempre o primeiro a começar a jogar. Um movimento de um jogador consiste na escolha de um par de elementos consecutivos da seqüência que estejam fora de ordem e em inverter a ordem dos dois elementos. Por exemplo, dada a seqüência 1, 5, 3, 4, 2, o jogador pode inverter as posições de 5 e 3 ou de 4 e 2, mas não pode inverter as posições de 3 e 4, nem de 5 e 2. Continuando com o exemplo, se o jogador decide inverter as posições de 5 e 3 então a nova seqüência será 1, 3, 5, 4, 2. Mais cedo ou mais tarde, a seqüência ficará ordenada. Perde o jogador impossibilitado de fazer um movimento. Andrea, com algum desdém, sempre diz que seria mais simples jogar cara ou coroa, com o mesmo efeito. Sua missão, caso decida aceitá-la, é determinar quem ganha o jogo, dada a seqüência inicial.",
        "nivel": "3",
        "entrada": "A entrada contém vários casos de teste. Os dados de cada caso de teste estão numa única linha, e são inteiros separados por um espaço em branco. Cada linha contém um inteiroN (2 ≤ N ≤ 105), seguido da seqüência inicial P = (X1, X2, ...,XN) de N inteiros distintos dois a dois, onde1 ≤ Xi ≤ N para 1 ≤ i ≤ N. O final da entrada é indicado por uma linha que contém apenas o número zero."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, imprima duas linhas. A primeira linha apresenta a sequência de cartas descartadas, cada uma delas separadas por uma vírgula e um espaço. A segunda linha apresenta o número da carta que restou. Nenhuma linha tem espaços extras no início ou no final. Veja exemplo para conferir o formato esperado.",
        "numero": "1110",
        "titulo": "Jogando Cartas Fora",
        "descricao": "Dada uma pilha de n cartas enumeradas de 1 até n com a carta 1 no topo e a carta n na base.  A seguinte operação é ralizada enquanto tiver 2 ou mais cartas na pilha. Jogue fora a carta do topo e mova a próxima carta (a que ficou no topo) para a base da pilha. Sua tarefa é encontrar a sequência de cartas descartadas e a última carta remanescente. Cada linha de entrada (com exceção da última) contém um número n ≤ 50. A última linha contém 0 e não deve ser processada. Cada número de entrada produz duas linhas de saída. A primeira linha apresenta a sequência de cartas descartadas e a segunda linha apresenta a carta remanescente.",
        "nivel": "2",
        "entrada": "A entrada consiste em um número indeterminado de linhas contendo cada uma um valor de 1 até 50. A última linha contém o valor 0."
    },
    {
        "assunto": "4",
        "saida": "Para cada mensagem do tipo \"P\", imprima o valor que responde a pergunta feita. Deixe uma linha em branco após cada caso de teste, inclusive após o último.",
        "numero": "1112",
        "titulo": "Schweisen",
        "descricao": "Conan é um importante membro do Clube Atlético de Desrugenstein, que possui um time de futebol de campo profissional: ele é o responsável pelo gramado do campo onde ocorrem os jogos em casa. Em 2048 anos de história, o campo do CAD sempre esteve em perfeitas condições para os jogos, graças a Conan. Ele já ganhou vários prêmios por isso, sendo o mais importante deles o \"Grama de Ouro\", prêmio que ganhou 1024 vezes. Amanhã acontecerá a final do campeonato Universal de futebol, e o CAD é um dos finalistas. Como o jogo será em casa, Conan foi ver o estado do gramado e reparar se necessário. Chegando lá, entrou em desespero ao ver várias schweisen no campo, estragando todo o gramado!! Sendo assim, Conan precisa de sua ajuda para determinar quanto irá gastar com deswevileutssen para matar todas as schweisen. Cada deswevileutssen mata uma schwisen. Conan pode lhe mandar mensagens de dois tipos: dizendo que encontrou algumas schweisen, ou perguntando quanto ele vai gastar para matar certas schweisen.",
        "nivel": "7",
        "entrada": "A entrada possui vários casos de teste. A primeira linha de um caso de teste contém 3 inteiros X (≤ 1000), Y (≤ 1000) e P (≤ 10), que representam, respectivamente, o tamanho (X e Y) do campo e o preço de cada deswevileutssen. A próxima linha contém um inteiro Q (≤ 10000). As próximas Q linhas representam mensagens de Conan para você, e estão em uma das duas seguintes formas: - A N X Y - “Achei N (≤ 10) schweisen em (X,Y) - (0 ≤ X < Largura), (0 ≤ Y < Altura)” - P X Y Z W - “Quanto vou gastar para matar todas as schweisen na área retangular de (X,Y) até (Z,W)?” Considere que no início nenhuma schweisen foi vista. A entrada termina quando X, Y e P são iguais a 0."
    },
    {
        "assunto": "4",
        "saida": "Para cada conjunto de três números de entrada, imprima uma linha de números especificando a ordem na qual as pessoas são escolhidas. Cada número pode ter até 3 dígitos. Liste o par escolhido partindo da pessoa escolhida pelo contador do sentido horário. Os pares sucessivos são separados por vírgula (mas não deverá haver vírgula após o último escolhido.",
        "numero": "1119",
        "titulo": "A Fila de Desempregados",
        "descricao": "Em uma séria tentativa de reduzir a fila de desempregados, o novo Partido Nacional Trabalhista dos Rinocerontes Verdes decidiu uma estratégia pública. Todos os dias, todos os candidatos desempregados serão colocados em um grande círculo, voltados para dentro. Alguém é escolhido arbitrariamente como número 1, e os outros são numerados no sentido horário até N (os quais estarão à esquerda do 1°). Partindo do 1° e movendo-se no sentido horário, um contador oficial do laboratório conta k posições e retira um candidato, enquanto outro oficial começa a partir de N e se move no sentido anti-horário, contando m posições e retirando outro candidato. Os dois que são escolhidos são então enviados como estagiários para a reciclagem e se ambos os funcionários escolherem a mesma pessoa, ela (ele) é enviado para se tornar um político. Cada funcionário, em seguida, começa a contar novamente com a pessoa próxima disponível e o processo continua até que não reste ninguém. Note-se que as duas vítimas (desculpe, estagiários) deixam o anel ao mesmo tempo, por isso é possível que um funcionário conte a pessoa já selecionado pelo outro funcionário.",
        "nivel": "3",
        "entrada": "Escreva um programa que leia sucessivamente três números (N, k e m; k, m > 0, 0 < N < 20) e determina a ordem no qual os candidatos são retirados para treinamento . Cada conjunto de três números estará em uma linha distinta e o final da entrada de dados é sinalizado por três zeros (0 0 0)."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima a sentença: 'Optimal train swapping takes S swaps.' onde S é um inteiro.",
        "numero": "1162",
        "titulo": "Organizador de Vagões",
        "descricao": "Na estação de trem você ainda pode encontrar o último dos “organizadores de vagões”. Um Organizador de vagões um empregado cujo trabalho é apenas reordenar os vagões do trem, trocando-os de posição. Uma vez que os vagões são organizados em uma ordem considerada ótima, o condutor pode desconectar cada vagão e colocá-los na estação. O título “organizador de vagões” é dado à pessoa que realiza esta tarefa, cuja estação fica perto de uma ponte. Ao invés da ponte poder subir ou descer, ela roda sobre um pilar que fica no centro do rio. Após rodar 90 graus, os barcos podem passar na esquerda ou direita dela. O Primeiro organizador de vagões descobriu que girando a ponte 180 graus com dois vagões em cima dela, é possível a troca de lugar entre os dois vagões. Obviamente a ponte pode operar no máximo com dois vagões sobre ela. Agora que quase todos os organizadores de vagões já faleceram, a estação gostaria de automatizar esta operação. Parte do programa a ser desenvolvido é uma rotina que decide para um dado trem com um determinado número de vagões, o número de trocas entre trens adjacentes que são necessárias para que o  trem fique ordenado. Sua tarefa é criar tal rotina.",
        "nivel": "3",
        "entrada": "A entrada contém na primeira linha o número de caso de testes (N). Cada caso de teste consiste de duas linhas de entrada. A primeira linha de um caso de teste contém um inteiro L, determinando o tamanho do trem (0 ≤ L ≤ 50). A segunda linha de um caso de teste contém uma permutação dos números 1 até L, indicando a ordem corrente dos vagões. Os vagões devem ser ordenados de forma que o vagão 1 venha por primeiro, depois o 2, etc, com o vagão L vindo por último."
    },
    {
        "assunto": "4",
        "saida": "Cada linha de entrada deve produzir uma linha de saída que é a compactação da linha de entrada, conforme exemplo abaixo.",
        "numero": "1236",
        "titulo": "Compactação de Nulos e Brancos",
        "descricao": "O Professor Francisco solicitou sua ajuda para compactar alguns arquivos de texto que ele possui. Como os arquivos basicamente possuem muito espaço em branco e valores nulos (0), o compactador deve ser algo bem simples. O texto somente contém letras do alfabeto, espaços e números. Para simplificar, vamos considerar o $ como símbolo para compactação de espaços em branco e o # como símbolo para compactação de zeros. Só lembre de 2 detalhes: É o caractere da tabela AscII correspondente à frequência que deve ser gravado, e não o número decimal. caso apareça mais do que 255 caracteres seguidos de nulos ou brancos, a gravação deverá ser feita em mais do que um bloco. Por exemplo, para compactar 380 zeros seguidos, o primeiro bloco compacta as 255 ocorrências e o segundo bloco as 125 restantes, e assim por diante. O resultado seria \"# #}\". Note que o caractere 255 é invisível (aparece como se fosse um espaço em branco). Para você entender um pouco melhor a entrada e a saída, considere a tabela ASCII abaixo: Por exemplo CHR(3) equivale ao “ETX” Observações: Não compactar quando ocorrerem apenas dois zeros ou apenas dois espaços seguidos (\"*00*\" ou \"*  *\"), pois a compactação não teria efeito. o nosso toolkit pode não mostrar alguns caracteres especiais exigidos no output deste problema.",
        "nivel": "4",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém um valor N que indica a quantidade de casos de teste. Cada caso de teste contém uma linha com até 2000 caracteres para serem compactados."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, deve-se apresentar a mensagem Vencedor(a): xxxxxx, com um espaço após o sinal \":\" indicando qual é a criança do grupo que venceu a brincadeira.",
        "numero": "1167",
        "titulo": "Acampamento de Férias",
        "descricao": "Nas férias de Julho, várias escolas de uma mesma região resolveram se organizar e levaram uma parte de seus alunos para um acampamento de férias por uma semana. Nestes acampamentos os alunos são divididos em chalés coletivos por gênero e idade, sempre com um supervisor ou supervisora que, além de dormirem com o grupo no chalé, também são responsáveis por criar e executar várias atividades interessantes e animadas, para todas as idades. Dentre as diversas atividades podem-se citar jogos, excursões, Gincana Musical, Gincanas Noturnas, etc. No primeiro dia de acampamento, devido à forte chuva, as atividades recreativas ficaram limitadas e as crianças foram levadas para o ginásio de esportes. Foi realizada uma gincana e uma das atividades da mesma consistiu em agrupar as crianças em um círculo (organizado no sentido anti-horário) do qual seriam retiradas uma a uma até que sobrasse apenas uma criança, que seria a vencedora. No momento em que entra no círculo, cada criança recebe uma pequena ficha que contém um valor de 1 a 500. Depois que o círculo é formado, conta-se, iniciando na criança que está ao lado da primeira que entrou no círculo, o número correspondente à ficha que a primeira detém. A criança onde o número contado cair, deve ser retirada do grupo, e a contagem inicia novamente segundo a ficha da criança que acabou de ser eliminada. Para ficar mais interessante, quando o valor que consta na ficha é par, a contagem é feita no sentido horário e quando o valor que consta na ficha é ímpar, a contagem é feita no sentido anti-horário. A brincadeira fez muito sucesso e o administrador do acampamento pediu para que sua equipe desenvolva um programa para que no próximo evento ele saiba previamente qual criança irá ser a vencedora de cada grupo, com base nas informações fornecidas.",
        "nivel": "3",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100), indicando a quantidade de crianças que farão parte de cada círculo e participarão da brincadeira. Em seguida, as N linhas de cada caso de teste conterão duas informações, o Nome e o Valor (1 ≤ Valor ≤ 500) que consta na ficha de cada criança, separados por um espaço, na ordem de entrada na formação do círculo inicial. Obs: O Nome de cada criança não deverá ultrapassar 30 caracteres e contém apenas letras maiúsculas e minúsculas, sem acentos, e o caractere “_”. O final da entrada é indicado pelo número zero."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima uma linha informando o maior número possível de caracteres economizados por este processo.",
        "numero": "1211",
        "titulo": "Lista Telefônica Econômica",
        "descricao": "Devido ao grande número de reclamações, a companhia telefônica de São Petersburgo está sendo obrigada a investir pesado na melhora de seus serviços. Para isso a companhia decidiu diminuir o orçamento de alguns setores para aumentar o de outros mais essenciais. Um dos setores que terá seu orçamento reduzido é o de impressão de listas telefônicas. Com um orçamento reduzido, o setor de impressão de listas telefônicas não consegue comprar toner suficiente para imprimir as listas completas. Como os números de telefone são impressos alinhados na vertical, foi sugerida a seguinte solução: a partir do segundo número de telefone impresso, os dígitos iniciais do próximo número a ser impresso que coincidirem com os do número acima são omitidos, ficando apenas um espaço em branco. Por exemplo, para os números 535456, 535488, 536566 e 835456 a impressão é a seguinte: 5 3 5 4 5 6         8 8     6 5 6 6 8 3 5 4 5 6 Note que esta impressão economizou a impressão de 6 caracteres. A companhia telefonica cogitou também não imprimir os sufixos repetidos, mas nos testes feitos viram que a resposta não foi boa para o usuário e decidiram, portanto, fazer apenas a eliminação em prefixos. Para saber se a economia será suficiente, o setor de impressão quer saber o número máximo de caracteres que podem ser omitidos. No entanto, como em qualquer cidade grande, são vários os números telefônicos e eles não querem gastar homens-hora para calcular manualmente este valor. Então cabe a você, novo empregado da companhia, automatizar a economia feita pelo toner, no número de caracteres.",
        "nivel": "2",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada caso de teste contém um inteiro N, que informa o número de telefones na lista. As próximas N (1 ≤ N ≤ 105) linhas possuem, cada uma delas, um telefone Xi, de até 200 caracteres. Para um mesmo caso de teste os números de telefone têm a mesma quantidade de caracteres. Um número de telefone pode começar com o caracter ’0’."
    },
    {
        "assunto": "4",
        "saida": "Você deve imprimir uma lista de diferentes palavras que aparecem no texto, uma palavra por linha. Todas as palavras devem ser impressas com letras minúsculas, em ordem alfabética. Deverá haver no máximo 5000 palavras distintas.",
        "numero": "1215",
        "titulo": "Primeiro Dicionário de Andy",
        "descricao": "Andy de apenas 8 anos tem um sonho - ele deseja criar o seu próprio dicionário. Isto não é uma tarefa fácil para ele, pois conhece poucas palavras. Bem, ao invés de pensar nas palavras que sabe, ele teve uma idéia brilhante. A partir do seu livro de histórias favorito, ele vai criar um dicionário com todas as palavras distintas que existem nele. Ordenando estas palavras em ordem alfabética, o trabalho estará feito. É claro, isso é uma tarefa que toma um certo tempo e portanto, a ajuda de um programador de computador como você é muito bemvinda. Você foi convidado a escrever um programa que liste todas as diferentes palavras que existem em um texto. Neste caso, uma palavra é definida como uma sequência de letras, maiúsculas ou minúsculas. Palavras com apenas uma letra também deverão ser consideradas. Portanto, seu programa deverá ser \"CaSe InSeNsItIvE\". Por exemplo, palavras como \"Apple\", \"apple\" ou \"APPLE\" deverão ser consideradas como a mesma palavra.",
        "nivel": "3",
        "entrada": "A entrada contém no máximo 10000 linhas de texto, cada uma delas com no máximo 200 caracteres. O fim de entrada é determinado pelo EOF."
    },
    {
        "assunto": "4",
        "saida": "Imprima o valor ASCII de todos os caracteres presentes e a sua frequência de acordo com o formato abaixo. Uma linha em branco deverá separar 2 conjuntos de saída. Imprima os caracteres ASCII em ordem ascendente de frequência. Se dois caracteres estiverem presentes com a mesma quantidade de frequência, imprima primeiro o caracter que tem valor ASCII maior. A entrada é terminada por final de arquivo (EOF).",
        "numero": "1251",
        "titulo": "Diga-me a Frequência",
        "descricao": "Dada uma linha de texto, você deve encontrar as frequências de cada um dos caracteres presentes nela. As linhas fornecidas não conterão nenhum dos primeiros 32 ou dos últimos 128 caracteres da tabela ASCII. É claro que não estamos levando em conta o caracter de fim de linha.",
        "nivel": "3",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por uma única linha de texto com até 1000 caracteres."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância imprima uma linha contendo o número total de ligações que ocorre quando a fita descrita é ativada.",
        "numero": "1242",
        "titulo": "Ácido Ribonucleico Alienígena",
        "descricao": "Foi descoberta uma espécie alienígena de ácido ribonucleico (popularmente conhecido como RNA). Os cientistas, por falta de criatividade, batizaram a descoberta de ácido ribonucleico alienígena (RNAA). Similar ao RNA que conhecemos, o RNAA é uma fita composta de várias bases. As bases são B C F S e podem ligar-se em pares. Os únicos pares possíveis são entre as bases B e S e as bases C e F. Enquanto está ativo, o RNAA dobra vários intervalos da fita sobre si mesma, realizando ligações entre suas bases. Os cientistas perceberam que: - Quando um intervalo da fita de RNAA se dobra, todas as bases neste intervalo se ligam com suas bases correspondentes; - Cada base pode se ligar a apenas uma outra base; - As dobras ocorrem de forma a maximizar o número de ligações feitas sobre fitas; As figuras abaixo ilustram dobras e ligacões feitas sobre fitas. Sua tarefa será, dada a descrição de uma tira de RNAA, determinar quantas ligações serão realizadas entre suas bases se a tira ficar ativa.",
        "nivel": "3",
        "entrada": "A entrada é composta por diversos casos de teste e termina com EOF. Cada caso de teste possui uma linha descrevendo a sequência de bases da fita de RNAA. Uma fita de RNAA na entrada contém pelo menos 1 e no máximo 300 bases. Não existem espaços entre bases de uma fita da entrada. As bases são 'B', 'C', 'F' e 'S'."
    },
    {
        "assunto": "4",
        "saida": "A saída deve conter o conjunto de strings da entrada ordenado pelo tamanho das strings. Um espaço em branco deve ser impresso entre duas palavras.",
        "numero": "1244",
        "titulo": "Ordenação por Tamanho",
        "descricao": "Crie um programa para ordenar um conjunto de strings pelo seu tamanho. Seu programa deve receber um conjunto de strings e retornar este mesmo conjunto ordenado pelo tamanho das palavras, se o tamanho das strings for igual, deve-se manter a ordem original do conjunto.",
        "nivel": "3",
        "entrada": "A primeira linha da entrada possui um único inteiro N, que indica o número de casos de teste. Cada caso de teste poderá conter de 1 a 50 strings inclusive, e cada uma das strings poderá conter entre 1 e 50 caracteres inclusive. Os caracteres poderão ser espaços, letras, ou números."
    },
    {
        "assunto": "4",
        "saida": "A primeira linha de cada conjunto de saída irá contér os valores de N e M. As próximas N linhas irão contér N números, ordenados de acordo com as regras acima mencionadas. Imprima os dois últimos zeros da entrada para a saída padrão.",
        "numero": "1252",
        "titulo": "Sort! Sort!! e Sort!!!",
        "descricao": "Hmm! Aqui você foi solicitado a fazer uma simples ordenação. A você serão dado N números e um inteiro positivo M. Você terá que ordenar estes N números em ordem ascendente de seu módulo M. Se houver um empate entre um número ímpar e um número par (para os quais o seu módulo M dá o mesmo valor) então o número impar irá preceder o número par. Se houver um empate entre dois números ímpares (para os quais o seu módulo M dá o mesmo valor), então o maior número ímpar irá preceder o menor número ímpar. Se houve um empate entre dois números pares (para os quais o seu módulo M dá o mesmo valor), então o menor número par irá preceder o maior número par. Para o resto de valores negativos siga a regra de linguagem de programação C: um número negativo nunca pode ter módulo maior do que zero. Por exemplo, -100 MOD 3 = -1, -100 MOD 4 = 0, etc.",
        "nivel": "4",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com dois inteiros  N (0 < N ≤ 10000) e M (0 < M ≤ 10000) que denotam quantos números existirão neste conjunto. Cada uma das próximas N linhas conterá um número cada. Estes números deverão caber em um inteiro de 32 bits com sinal. A entrada é terminada por uma linha que conterá dois valores nulos (0) e não deve ser processada."
    },
    {
        "assunto": "4",
        "saida": "A saída deverá ser impressa conforme os exemplos fornecidos abaixo, onde a quantidade de linhas de cada caso de teste é determinada pelo valor de M. Uma linha em branco deverá separar dois conjuntos de saída.",
        "numero": "1256",
        "titulo": "Tabelas Hash",
        "descricao": "As tabelas Hash, também conhecidas como tabelas de dispersão, armazenam elementos com base no valor absoluto de suas chaves e em técnicas de tratamento de colisões. Para o cálculo do endereço onde deve ser armazenada uma determinada chave, utiliza-se uma função denominada função de dispersão, que transforma a chave em um dos endereços disponíveis na tabela. Suponha que uma aplicação utilize uma tabela de dispersão com 13 endereços-base (índices de 0 a 12) e empregue a função de dispersão h(x) = x mod 13, em que x representa a chave do elemento cujo endereço-base deve ser calculado. Se a chave x for igual a 49, a função de dispersão retornará o valor 10, indicando o local onde esta chave deverá ser armazenada. Se a mesma aplicação considerar a inserção da chave 88, o cálculo retornará o mesmo valor 10, ocorrendo neste caso uma colisão. O Tratamento de colisões serve para resolver os conflitos nos casos onde mais de uma chave é mapeada para um mesmo endereço-base da tabela. Este tratamento pode considerar, ou o recálculo do endereço da chave ou o encadeamento externo ou exterior. O professor gostaria então que você o auxiliasse com um programa que calcula o endereço para inserções de diversas chaves em algumas tabelas, com funções de dispersão e tratamento de colisão por encadeamento exterior.",
        "nivel": "3",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N indicando a quantidade de casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha contém um valor M (1 ≤ M ≤ 100) que indica a quantidade de endereços-base na tabela (normalmente um número primo) seguido por um espaço e um valor C (1 ≤ C ≤ 200) que indica a quantidade de chaves a serem armazenadas. A segunda linha contém cada uma das chaves (com valor entre 1 e 200), separadas por um espaço em branco."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de entrada deverão ser impressas as informações ordenadas pela cor dos detalhes em ordem ascendente, seguido pelos tamanhos em ordem descendente e por último por ordem ascendente de nome, conforme o exemplo abaixo. Obs.: Deverá ser impressa uma linha em branco entre dois casos de teste.",
        "numero": "1258",
        "titulo": "Camisetas",
        "descricao": "O professor Rolien organizou junto às suas turmas de Ciência da Computação a confecção de uma camiseta polo que fosse ao mesmo tempo bonita e barata. Após algumas conversas, ficou decidido com os alunos que seriam feitas somente camisetas da cor preta, o que facilitaria a confecção. Os alunos poderiam escolher entre o logo do curso e os detalhes em branco ou vermelho. Assim sendo, Rolien precisa de sua ajuda para organizar as listas de quem quer a camiseta em cada uma das turmas, relacionando estas camisetas pela cor do logo do curso, tamanho (P, M ou G) e por último pelo nome.",
        "nivel": "3",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com um valor N, (1 ≤ N ≤ 60) inteiro e positivo, que indica a quantidade de camisetas a serem feitas para aquela turma. As próximas N*2 linhas contém informações de cada uma das camisetas (serão duas linhas de informação para cada camiseta). A primeira linha irá conter o nome do estudante e a segunda linha irá conter a cor do logo da camiseta (\"branco\" ou \"vermelho\") seguido por um espaço e pelo tamanho da camiseta \"P\" \"M\" ou \"G\". A entrada termina quando o valor de N for igual a zero (0) e esta valor não deverá ser processado."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima o nome de cada espécie representada na população, em ordem alfabética, seguida pelo percentual da população que representa, com 4 casas decimais. Imprima uma linha em branco entre dois conjuntos de dados consecutivos.",
        "numero": "1260",
        "titulo": "Espécies de Madeira",
        "descricao": "Coníferas e folhosas (softwoods e hardwoods) são dois grandes grupos de vegetais produtores de madeira. As folhosas são aquele grupo de árvores que têm folhas largas, produzem uma fruta ou castanha e geralmente ficam dormentes no inverno. Os climas temperados da América produzem florestas com centenas de espécies de madeira de lei - árvores que compartilham certas características biológicas. Embora o carvalho, bordo e cereja sejam tipos de árvores de madeira de lei, são espécies diferentes. Juntas, todas as espécies de madeira folhosas representam 40 por cento das árvores nos Estados Unidos. Por outro lado, as madeiras macias (Softwoods) ou coníferas, chamadas \"cone-bearing\", são resinosas amplamente disponíveis EUA. Incluem cedro, abeto, cicuta, pinho, abeto vermelho e cipreste. Em uma casa, os resinosas são utilizados principalmente como madeira de viga estrutural, mas também podem ser utilizadas em algumas aplicações decorativas. Usando tecnologia de imagem por satélite, o Departamento de Recursos Naturais elaborou um inventário de todas as árvores de um local específico em um determinado dia. Você deverá calcular a fração da população de cada árvore representada por cada uma das espécies.",
        "nivel": "3",
        "entrada": "A entrada possui vários casos de teste. A primeira linha de entrada contém um inteiro N que indica o número de casos de teste, seguido por uma linha em branco. Cada caso de teste consiste de uma lista com a espécie de cada árvore observada pelo satélite, uma árvore por linha. Nenhum nome de espécie é superior a 30 caracteres. Não existem mais de 10.000 espécies e não mais de 1.000.000 árvores. Há uma linha em branco entre cada caso de teste consecutivo."
    },
    {
        "assunto": "4",
        "saida": "Apresente todos os valores lidos na entrada segundo a ordem apresentada acima. Cada número deve ser impresso em uma linha, conforme exemplo abaixo.",
        "numero": "1259",
        "titulo": "Pares e Ímpares",
        "descricao": "Considerando a entrada de valores inteiros não negativos, ordene estes valores segundo o seguinte critério: Primeiro os Pares Depois os Ímpares Sendo que deverão ser apresentados os pares em ordem crescente e depois os ímpares em ordem decrescente.",
        "nivel": "3",
        "entrada": "A primeira linha de entrada contém um único inteiro positivo N (1 < N < 105) Este é o número de linhas de entrada que vem logo a seguir. As próximas N linhas conterão, cada uma delas, um valor inteiro não negativo."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste de entrada, imprima o salário do funcionário que é calculado através deste sistema Pontos de Feno (que nada mais é do que a soma do valor de todas as palavras que aparecem na descrição do cargo). Obs.: o valor das palavras que não aparecem no dicionário é zero (0).",
        "numero": "1261",
        "titulo": "Pontos de Feno",
        "descricao": "Cada funcionário de um serviço burocrático tem uma descrição do cargo - alguns parágrafos que descrevem as responsabilidades do trabalho. A descrição do cargo combinado com outros fatores, como por exemplo tempo de serviço, é utilizado para determinar qual é o salário deste funcionário. Um sistema denominado Pontos de Feno (Hay Points) libera o departamento de Recursos Humanos de ter que fazer um julgamento inteligente do valor de cada empregado para a empresa. A descrição de um cargo ou função é feita através da verificação de palavras e frases que indicam responsabilidade. Em particular, descrições de cargo que indicam o controle sobre um grande orçamento ou gestão sobe um grande número de pessoas geram escores altos neste sistema. Você deve implementar um sistema de Ponto de Feno simplificado. Você terá como informações um dicionário Hay Point que conterá algumas palavras-chaves que são as descrições dos cargos e um valor em dólares americanos associado com cada um destes cargos. Para cada descrição de trabalho você deverá calcular o salário associado com o trabalho, de acordo com este sistema.",
        "nivel": "3",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém dois números inteiros positivos: M (M ≤ 1000), que é o número de palavras no dicionário Hay Point, e um número inteiro N (N ≤ 100) que corresponde à quantidade de descrições de cargos ou funções. M linhas seguem, cada um contém uma palavra (uma seqüência de até 16 letras minúsculas) e um valor de dólar (um número real entre 0 e 1000000). Logo na sequência, após o dicionário, estão as descrições de cada uma dos cargos N. Cada descrição de cargo consiste em uma ou mais linhas de texto. Para sua conveniência, o texto contém somente letras minúsculas (de 'a' até 'z'). Cada descrição de cargo é finalizada por uma linha contendo um ponto \".\"."
    },
    {
        "assunto": "4",
        "saida": "Cada problema de projeto da P-Network na entrada deverá gerar uma única linha de saída. Se o problema não tem solução a saída deve ser No solution. Caso contrário, a linha deverá conter uma descrição de uma P-Network qualquer (com N fios e menos do que 4N2 cursos), que realiza o conjunto de transformações solicitado. A descrição é dada por um conjunto de valores M, s1, s2, . . . sM, em que os valores consecutivos são separados por um único espaço em branco. O valor de M é o tamanho da P-Network, isto é, o número de cursos. Os valores de s1, s2, . . . sM descrevem os cursos da P-Network; isto deve ser entendido como o i-ésimo curso da esquerda para a direita, que liga os fios si e 1 + si (1 ≤ i ≤ M). Observe que 0 ≤ M < 4N2 , enquanto 1 ≤ si < N para cada 1 ≤ i ≤ M.",
        "numero": "1274",
        "titulo": "P-Networks",
        "descricao": "Pretty Networks Inc. é uma empresa que constrói alguns artefatos curiosos, cujo propósito é transformar um conjunto de valores de entrada de uma determinada maneira. A transformação é determinada por aquilo que eles chamam de uma P-Network. A imagem abaixo mostra um exemplo de uma P-Network. No caso geral, uma P-Network de ordem N e tamanho M, tem N fios horizontais numerados de 1, 2,. . . N, e M cursos verticais. Cada curso conecta dois fios consecutivos. Não há dois cursos diferentes tocando o mesmo ponto de nenhum fio e não há nenhum curso tocando o ponto mais à esquerda ou mais à direita de qualquer fio. O exemplo acima é uma P-Network de ordem 5 e tamanho 9. A transformação determinada por uma P-Network pode ser explicada através de um conjunto de regras que governam a maneira como um P-Network deve ser percorrida: 1. comece no ponto mais à esquerda de um fio, e vá para a direita; 2. cada vez que um curso aparecer mude para o fio conectado, e continue indo da esquerda para a direita; 3. pare quando o ponto mais à direita de um fio for alcançado. Se partindo do fio i a travessia termina no fio j, dizemos que o P-Network transforma i em j, e denotamos isso com i → j. No exemplo acima, o P-Network determina o conjunto de transformações {1 → 3, 2 → 5, 3 → 4, 4 → 1, 5 → 2}. A empresa Pretty Networks contratou você para resolver o seguinte problema de projeto da P-Network: dado um número N e um conjunto de transformações {1 → i1, 2 → i2, . . . N → iN}, decida se uma P-Network de ordem N pode ser construída para realizar estas transformações e, nesse caso, forneça uma P-Network que faça isto. Quando existe uma solução com um determinado tamanho, em muitos casos há uma outra solução com um tamanho maior. Cientistas da Pretty Networks afirmaram que se existe uma solução para um problema de projeto da P-Network, então esta solução tem tamanho inferior a 4N2 . Portanto, eles estão interessados apenas em soluções com um tamanho inferior a este limite.",
        "nivel": "6",
        "entrada": "A entrada tem um certo número de problemas de projeto da P-Network. Cada problema é descrito em apenas uma linha que contém os valores N, i1, i2,. . . iN, separados por um único espaço em branco. O valor de N é a ordem da P-Network desejada, isto é, o seu número de fios (1 ≤ N ≤ 20). Os valores i1, i2,. . . iN representam que a P-Network deve determinar o conjunto de transformações {1 → i1, 2 → i2,. . . N → iN} (1 ≤ ij ≤ N, para cada 1 ≤ j ≤ N). A entrada termina com uma linha com N = 0 e que não deve ser processada."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima uma linha com uma string que representa o resultado de todos os comandos de produto do caso de teste. O caracte i da string representa o resultado do enésimo (i-th) comando de produto. Se o resultado do comando for positivo, o caractere deve ser '+' (mais), se o resultado for negativo, o caractere deve ser '-' (menos), se o resultado é zero, o caractere deve ser '0' (zero) .",
        "numero": "1301",
        "titulo": "Produto do Intervalo",
        "descricao": "É normal sentir-se preocupado e tenso o dia antes de uma competição de programação. Para relaxar, você saiu para beber com alguns amigos em um pub. Para manter sua mente afiada para o dia seguinte, você decidiu jogar o seguinte jogo. Para começar, seus amigos vão dar-lhe uma seqüência de N inteiros X1, X2, ..., XN. Em seguida, haverá K rodadas; a cada rodada, seus amigos vão emitir um comando, que pode ser: um comando de alteração, quando seus amigos querem mudar um dos valores na seqüência, ou um comando de produto, quando seus amigos lhe dar dois valores I, J e perguntar-lhe se o produto XI x XI+1 x ... x XJ-1 x XJ é positivo, negativo ou zero. ​ Uma vez que você está em um pub, foi decidido que a pena para uma resposta errada é beber um copo de cerveja. Você está preocupado como isso poderia afetá-lo negativamente na competição do dia seguinte, e você não quer verificar se a teoria do pico de Ballmer é correta. Felizmente, seus amigos lhe deram o direito de usar o seu notebook. Uma vez que você confia mais nas suas habilidades de codificação do que na sua matemática, você decidiu escrever um programa que o ajudasse no jogo.",
        "nivel": "5",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros N e K respectivamente, indicando o número de elementos na seqüência e o número de rodadas do jogo (1 ≤ N, K ≤ 105). A segunda linha contém N inteiros Xi que representam os valores iniciais da sequência (-100 ≤ Xi ≤ 100 para i = 1, 2, ..., N). Cada uma das próximas K linhas descreve um comando e começa com uma letra maiúscula 'C' ou 'P'. Se a letra é 'C', a linha descreve um comando de mudança, e a letra é seguida por dois inteiros I e V,indicando que os XI devem receber o valor V (1 ≤ I ≤ N e -100 ≤ V ≤ 100). Se a letra for 'P', a linha de comando descreve um produto, e a letra é seguida por dois números inteiros I e J, indicando que o produto a partir de XI até XJ, inclusive deve ser calculado (1 ≤ I ≤ J ≤ N). Dentro de cada teste há pelo menos um comando de produto."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, imprima o valor que será gasto por dona Parcinova no seguinte formato: R$ seguido de um espaço e seguido do valor, com 2 casas decimais, conforme o exemplo abaixo.",
        "numero": "1281",
        "titulo": "Ida à Feira",
        "descricao": "Dona Parcinova costuma ir regularmente à feira para comprar frutas e legumes. Ela pediu então à sua filha, Mangojata, que a ajudasse com as contas e que fizesse um programa que calculasse o valor que precisa levar para poder comprar tudo que está em sua lista de compras, considerando a quantidade de cada tipo de fruta ou legume e os preços destes itens.",
        "nivel": "2",
        "entrada": "A primeira linha de entrada contém um inteiro N que indica a quantidade de idas à feira de dona Parcinova (que nada mais é do que o número de casos de teste que vem a seguir). Cada caso de teste inicia com um inteiro M que indica a quantidade de produtos que estão disponíveis para venda na feira. Seguem os M produtos com seus preços respectivos por unidade ou Kg. A próxima linha de entrada contém um inteiro P (1 ≤ P ≤ M) que indica a quantidade de diferentes produtos que dona Parcinova deseja comprar. Seguem P linhas contendo cada uma delas um texto (com até 50 caracteres) e um valor inteiro, que indicam respectivamente o nome de cada produto e a quantidade deste produto."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador \"Instancia h\" em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, deve ser impressa a permutação dos inteiros 1 a n da classiﬁcação do campeonato. Obs: Um espaço em branco deve ser impresso entre cada um desses inteiros e uma linha em branco deve deve ser impressa entre as saídas de dois casos de teste.",
        "numero": "1303",
        "titulo": "Spurs Rocks",
        "descricao": "O San Antonio é o time da cidade na NBA. Já foi algumas vezes campeão de sua conferência e revelou vários excelentes jogadores. Em um campeonato de basquete os times jogam todos entre si em turno único. A vitória vale dois pontos e a derrota vale um ponto (não há empates no basquete). Havendo empates na pontuação do campeonato ﬁca na frente o time com melhor “cesta average” que é dado pela razão entre o número de pontos marcados pelo time dividido pelo número de pontos recebidos (na improvável hipótese de um time vencer todos os jogos do campeonato sem levar cestas seu cesta average é dado pelo número de pontos marcados). Persistindo o empate, leva vantagem quem marcou mais pontos. Ainda havendo empate, o time com menor número de inscrições na liga ﬁca na frente. Sua tarefa neste problema é fazer um programa que recebe os resultados dos jogos de um campeonato e imprime a classiﬁcação ﬁnal.",
        "nivel": "2",
        "entrada": "São dadas várias instâncias. Para cada instância é dada o número 0 ≤ n ≤ 100 de times no campeonato. O valor n = 0 indica o ﬁm dos dados. A seguir vêm n (n−1) / 2 linhas indicando os resultados das partidas. Em cada linha são dados quatro inteiros x, y, z e w. Os inteiros x e z pertencem ao conjunto {1, 2, . . . , n} e representam os números de inscrição dos times na liga. Os inteiros y e w são, respectivamente, os números de pontos do time x e do time z na partida descrita."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste da entrada, seu programa deve produzir uma linha, contendo a string 'PRODUCT requires N containers', onde o PRODUCT é a substância final e N é o número de recipientes necessários para produzi-lo.",
        "numero": "1326",
        "titulo": "Química",
        "descricao": "Internacional Chemical Products Company (ICPC) é uma empresa conhecida mundialmente pelos seus bons produtos e acessíveis, o que inclui shampoos, produtos de limpeza, matadores de insetos, e alguns tipos de vacinas. Os engenheiros da ICPC sempre estão procurando meios de reduzir o custo de fabricação de seus produtos, sem perder a qualidade. Um dos engenheiros, Sr. Poucher, tem uma nova ideia de reduzir o custo, que visa reduzir o número de recipientes necessários para manter as substâncias durante a sequência de reações químicas para se obter uma última substância. Essas substâncias finais são obtidas através de uma sequência de reações na forma de X + Y → Z, onde X e Y são substâncias iniciais ou intermediarias (que já foram geradas em reações anteriores). Essas reações são feitas dentro de um recipiente de reações, que quando vazio pode ser limpo e usado novamente. O processo de gerar a substância final pode ser descrevido por uma sequência de duas simples operações: Colocar uma substância disponível em um recipiente de reação vazio C; Realizar a reação de X + Y → Z ou colocando X no recipiente de reação contendo Y, ou colocando Y no recipiente de reação contendo X. A ordem não afeta o resultado final da reação. O que Sr. Poucher percebeu é que escolhendo a sequência de reação correta, ICPC poderia cortar o número de reações necessárias na companhia drasticamente . Por exemplo, considerando a seguinte sequência de reações químicas usadas para obter a substância final P: 1) A + B -> T1 2) C + D -> T2 3) E + F -> T3 4) T2 + T3 -> T4 5) T4 + T1 -> P Nesse exemplo, A, B, C, D, E e F são as substância iniciais (somente aparecem no lado esquerdo das reações), T1, T2, T3 e T4 são substâncias intermediarias (aparecem no lado esquerdo pelo menos uma vez, e exatamente uma na direita de alguma outra reação) e P é a substância final (só aparece na direita de uma única reação, que vai ser a última listada). Se a sequência de reações é realizada como foi dito então três recipientes são necessários em ordem para produzir a substância final P: Recipientes Operações C1 C2 C3 colocar A em C1: A - - adicionar B para C1: T1 - - colocar C em C2: T1 C - adicionar D para C2: T1 T2 - colocar E em C3: T1 T2 E adicionar F para C3: T1 T2 T3 colocar T2 em C3: T1 - T4 colocar T4 em C1: P - - Nota-se, contudo, que se as reações são realizadas na sequência 2, 3, 4, 1, 5, dois recipientes são suficientes: Recipientes Operações C1 C2 colocar C em C1: C adicionar D para C1: T2 colocar E em C2: T2 E adicionar F para C2: T2 T3 colocar T2 em C2: - T4 colocar A em C1: A T4 adicionar B para C1: T1 T4 colocar T1 em C2: - P Você foi contratado pela ICPC, e sua tarefa é criar um programa de computador que determine o número minimo de recipientes necessárias para executar a sequência de reações necessárias para obter a substância final. Você deve assumir que: A reação de produção da substância final é a última listada, e a reação que produz uma substância intermediária sempre vai preceder as reações onde essa substância intermediária é usada. Uma sequência de reações que produzem a última substância é sempre possível. ICPC tem um suprimento ilimitado de substâncias iniciais. No início do processo de produção, cada substância inicial está em um recipiente de armazenamento, usado para guardar todo estoque de substâncias da ICPC. Tais recipientes não podem ser utilizados como recipiente de reação para armazenar produtos intermediários da reação. Todos os recipientes de reação são grandes o suficiente para manter todas as substâncias resultantes. A quantidade de substâncias geradas por uma única reação é suficiente para ser usada como entrada para uma única outra reação. Por exemplo, se um produto intermediário Z é necessário como entrada para duas diferentes reações, este produto deve ser produzido duas vezes. Cada reação usa exatamente duas substâncias diferentes e gera também uma substância distinta, isto é, toda reação tem a forma X + Y → Z, onde X, Y e Z são distintos.",
        "nivel": "8",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste começa com uma linha contento um inteiro R, indicando o número de reações para serem consideradas(1 <= R <= 5000). A seguir R linhas são da forma: S1 + S2 → S3 Descreve uma reação que consome S1 e S2 e produz S3 como resultado. Os nomes de todas as substâncias são cadeias-alfanumericas de tamanho no máximo 5. Um caso de teste com R = 0 indica o final da entrada."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância imprima uma linha contendo o número mínimo de tais trocas que ordena a sequência dada.",
        "numero": "1382",
        "titulo": "Elementar, meu Caro Watson!",
        "descricao": "Watson, Crick e Wilkins receberam em 1962 o prêmio Nobel de Medicina especialmente pelo seu trabalho que resultou na descoberta da estrutura das moléculas do DNA e na sua importância na transmissão de informações entre as gerações de seres vivos. Watson e Crick publicaram na revista “Nature” em 1953 o artigo em que mostravam que a molécula de DNA apresentava uma estrutura de dupla hélice. O artigo assume enorme importância nos dias de hoje, especialmente depois dos vários avanços na área. Muitas pesquisas têm sido feitas na área de Bioinformática ligadas à descoberta da sequência de bases que compõem as moléculas de DNA dos vários seres vivos. Em especial, a estrutura destas moléculas tem sido usada para compor teorias de como os seres vivos evoluíram e quais têm ancestrais comuns. Acredita-se que os seres vivos presentes hoje no planeta podem descender de ancestrais comuns, sendo que as modificações nos seus respectivos DNAs são devidas a fenômenos de mutação ocorridos durante a evolução. Muitos biólogos acreditam no princípio da parcimônia, que diz que o número destas mutações deve ser o mínimo possível, uma vez que a Natureza busca, de certa forma, o caminho “mais barato” para a modificação desejada. Sua tarefa neste problema é auxiliar os pesquisadores na tarefa de determinar se duas sequências de DNA podem ter um ancestral comum. Considere dadas duas sequências (podemos imaginar como sequências de números inteiros). O seu objetivo é determinar o menor número de trocas de elementos de uma das sequências (os elementos não precisam estar em posições adjacentes na sequência) que leva uma das sequências na outra. Observe que podemos considerar uma das sequências fixa (por exemplo, em ordem crescente), dessa forma buscamos o número mínimo de tais trocas que ordena a sequência dada.",
        "nivel": "3",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância possui um inteiro N (1 ≤ N ≤ 10000) indicando o número de inteiros na sequência. A segunda linha contém uma permutação dos inteiros 1, 2, ... , N separados por espaço."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, mostre um dos seguintes: stack É definitivamente uma pilha. queue É definitivamente uma fila. priority queue É definitivamente uma fila de prioridade. impossible Não pode ser uma pilha, uma fila ou uma fila de prioridade. not sure Pode ser mais de uma das três estruturas mencionadas acima.",
        "numero": "1340",
        "titulo": "Eu Posso Adivinhar a Estrutura de Dados!",
        "descricao": "Existe uma estrutura de dados do tipo sacola, suportando duas operações: 1 x Jogue um elemento x na sacola. 2 Tire um elemento da sacola. Dada uma sequencia de operações que retornam valores, você vai adivinhar a estrutura de dados. É uma pilha (último-dentro, primeiro-fora), uma fila (primeiro-dentro, primeiro-fora), uma fila de prioridade (sempre tire os elementos grandes por primeiro) ou qualquer outra coisa que você dificilmente consegue imaginar!",
        "nivel": "4",
        "entrada": "Existem muitos casos de testes. Cada caso de teste começa com a linha contando um único inteiro n (1 <= n <= 1000). Cada uma das seguintes n linhas é um comando do tipo 1, ou um número inteiro 2, seguido de um número inteiro x. Isso significa que depois de executar um comando do tipo 2, obtemos um elemento x sem erros. O valor de x é sempre um número inteiro, positivo e não maior do que 100. O final da entrada é determinado pelo final do arquivo (EOF). O tamanho do arquivo de entrada não excede 1MB."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste imprima os resultados de cada comando de hashing na entrada. Na i-ésima linha escreva um inteiro representando o resultado do i-ésimo comando de hashing. Imprima uma linha contendo um único caractere '-' (hífen) após cada caso de teste.",
        "numero": "1356",
        "titulo": "Júpiter Ataca!",
        "descricao": "Júpiter está invadindo! As principais cidades tem sido destruídas por espaçonaves Jovianas e a humanidade está lutando contra. Nlogônia está à frente da contraofensiva, invadindo os sistemas de controle das espaçonaves. Diferente dos computadores Terráqueos, nos quais usalmente um byte possui 28 valores possíveis, os computadores Jovianos usam bytes com B possíveis valores, {0,1,...,B-1}. Os engenheiros de software Nlogonianos tem realizado engenharia reversa sobre o firmware das espaçonaves Jovianas, e planejam sabotá-lo de modo que as embarcações eventualmete autodestruam-se. Como uma medida de segurança, entretanto, as espaçonaves Jovianas rodam um programa supervisor que periodicamente checa a integridade do firmware, aplicando hashing sobre porções dele e comparando o resultado contra valores bons conhecidos. Para aplicar o hashing sobre uma porção do firmware do byte na posição i até o byte na posição j, o supervisor usa a função de hashing ​ onde P é um número primo. Por exemplo, se B = 20 e P = 139, enquanto os bytes 2 ao 5 do firmware tem os valores f2 = 14, f3 = 2, f4 = 2 e f5 = 4 então H(f2, . . . f5) = B0 f5 + B1 f4 + B2 f3 + B3 f2 (mod P)                                       = 200 × 4 + 201 × 2 + 202 × 2 + 203 × 14 (mod 139)                = 4 + 40 + 800 + 112000 (mod 139) = 112844 (mod 139)       = 115                             Os criptologistas Nlogonianos precisam encontrar um meio de sabotar o firmware sem esbarrar no supervisor. Como um primeiro passo, a você foi atribuída a função de escrever um programa para simular a intercalagem de dois tipos de comandos: edição de bytes do firmware pelos engenheiros de software Nlogonianos, e o cálculo de hashes de porções do firmware pelo program supervisor Joviano. No início da simulação o valor de cada byte é zero.",
        "nivel": "8",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém quatro inteiros B, P, L e N, onde B é o número de possíveis valores de um byte Joviano, P é o módulo da hash Joviana (2 ≤ B < P ≤ 109 e P primo), L é o comprimento (número de bytes Jovianos) do firmware das espaçonaves, e N é o número de comandos a simular (1 ≤ L, N ≤ 105). No início da simulação o valor de cada byte no firmware é fi = 0 para 1 ≤ i ≤ L. Cada uma das N linhas seguintes descreve um comando a simular. Cada descrição de comando começa com uma letra maiúscula que é ou um 'E' ou um 'H', com os seguintes significados. 'E': A linha descreve um comando de edição. A letra é seguida por dois inteiros I e V indicando que o byte na posição I do firmware (ou seja, fi) deve receber o valor V (1 ≤ I ≤ L e 0 ≤ V ≤ B-1). 'H': A linha descreve um comando de hash. A letra é seguida por dois inteiro I e J indicando que H(fi...fj) deve ser computado (1 ≤ I ≤ J ≤ L). O último caso de teste é seguido por uma linha contendo quatro zeros."
    },
    {
        "assunto": "4",
        "saida": "Para cada string da entrada, imprima todas as permutações possíveis da string, em ordem lexicográfica crescente. Note que as strings devem ser tratas como Case Sensitive (isto é, letras maiúsculas são diferentes das minúsculas). Além disso, nenhuma permutação deve ser impressa mais de uma vez. Uma linha em branco deve ser impressa após cada lista de permutações.",
        "numero": "1401",
        "titulo": "Gerando Permutações Ordenadas Rapidamente",
        "descricao": "Gerar permutações sempre foi um problema importante na ciência da computação. Neste problema, você terá de gerar todas as permutações de uma dada string, em ordem lexicográfica crescente. Lembre-se que seu algoritmo deve ser eficiente.",
        "nivel": "3",
        "entrada": "A primeira linha da entrada contém um inteiro n, indicando o número de strings que seguem. As próximas n linhas contém uma string cada. Cada string conterá apenas caracteres alfanuméricos, e nunca conterá espaços. O tamanho máximo de uma string é 10."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha na saída, contendo uma permutação dos números {1, 2, ..., N}, que quando ordenada usando bubblesort produz o mesmo número de intercâmbios no mesmo número de turnos especificados na entrada. Ao imprimir a permutação, deixe um espaço em branco entre dois elementos consecutivos. Se mais de uma permutação existir, imprima a maior na ordem lexicográfica padrão para sequências de números (a ordem lexicográfica da permutação a1, a2, ..., aN é maior do que a da permutação b1, b2, ..., bN se para algum 1 ≤ i ≤ N temos ai > bi e o prefixo a1, a2, ..., ai-1 é igual ao prefixo b1, b2, ..., bi-1). Em outras palavras, caso exista mais de uma solução, imprima aquela onde o primeiro elemento da permutação é o maior possível. Caso exista mais de uma solução satisfazendo essa restrição, imprima, dentre estas, aquela onde o segundo elemento é o maior possível. Caso exista mais de uma solução satisfazendo as duas restrições anteriores, imprima, dentre estas, a solução onde o terceiro elemento é o maior possível, e assim sucessivamente. Para toda entrada haverá pelo menos uma permutação solução.",
        "numero": "1388",
        "titulo": "Onde Estão as Bolhas?",
        "descricao": "Uma das operações mais frequentes em computação é ordenar uma sequência de objetos. Portanto, não é surpreendente que essa operação seja também uma das mais estudadas. Um algoritmo bem simples para ordenação é chamado Bubblesort. Ele consiste de vários turnos. A cada turno o algoritmo simplesmente itera sobre a sequência trocando de posição dois elementos consecutivos se eles estiverem fora de ordem. O algoritmo termina quando nenhum elemento trocou de posição em um turno. O nome Bubblesort (ordenação das bolhas) deriva do fato de que elementos menores (\"mais leves\") movem-se na direção de suas posições finais na sequência ordenada (movem-se na direção do início da sequência) durante os turnos, como bolhas na água. A figura abaixo mostra uma implementação do algoritmo em pseudocódigo: Para i variando de 1 até N faça   Para j variando de N - 1 a i faça     Se seq [j - 1]> seq [j] então       Intercambie os elementos seq[j - 1] e seq[j]     Fim-Se   Fim-Para   Se nenhum elemento trocou de lugar então     Final do algoritmo   Fim-Se Fim-Para Por exemplo, ao ordenar a sequência [5, 4, 3, 2, 1] usando o algoritmo acima, quatro turnos são necessários. No primeiro turno ocorrem quatro intercâmbios: 1 x 2, 1 x 3, 1 x 4 e 1 x 5; no segundo turno ocorrem três intercâmbios: 2 x 3, 2 x 4 e 2 x 5; no terceiro turno ocorrem dois intercâmbios: 3 x 4 e 3 x 5; no quarto turno ocorre um intercâmbio: 4 x 5; no quinto turno nenhum intercâmbio ocorre e o algoritmo termina. Embora simples de entender, provar correto e implementar, o algoritmo bubblesort é muito ineficiente: o número de comparações entre elementos durante sua execução é, em média, diretamente proporcional a N2, onde N é o número de elementos na sequência. Você foi requisitado para fazer uma \"engenharia reversa\" no bubblesort, ou seja, dados o comprimento da sequência, o número de turnos necessários para a ordenação e o número de intercâmbios ocorridos em cada turno, seu programa deve descobrir uma possível sequência que, quando ordenada, produza exatamente o mesmo número de intercâmbios nos turnos.",
        "nivel": "6",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M que indicam respectivamente o número de elementos (1 ≤ N ≤ 100.000) na sequência que está sendo ordenada, e o número de turnos (0 ≤ M ≤ 100.000) necessários para ordenar a sequência usando bubblesort. A segunda linha de um caso de teste contém M inteiros Xi, indicando o número de intercâmbios em cada turno i (1 ≤ Xi ≤ N - 1, para 1 ≤ i ≤ M). O final da entrada é indicado por N = M = 0."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, seu programa deve produzir uma linha contendo um inteiro que representa o valor de saída (retorno) para a entrada N dada, ou um asterisco (*) no caso de o programa nunca terminar.",
        "numero": "1405",
        "titulo": "O Problema da Parada",
        "descricao": "O Problema da Parada (The Halting Problem) é um problema de decisão clássico da Ciência da Computação que consiste, basicamente, em determinar se um dado programa sempre vai parar (ou seja, terminar sua execução) para uma dada entrada arbitrária ou se vai executar infinitivamente. Alan Turing provou, em 1936, que é impossível resolver o problema da parada generalizando para qualquer par programa-entrada. Neste problema, porém, dada a descrição de uma linguagem simples, um programa escrito nessa linguagem e uma entrada para esse programa, você deve determinar se o programa dado pára com a entrada dada e, em caso positivo, qual a saída produzida. Esta linguagem só trabalha com números inteiros de 0 a 999 (inclusive). Sendo assim, o sucessor de 999 é 0, e o antecessor de 0 é 999. Além disso, ela possui dez variáveis (R0 a R9), sendo que a R0 sempre é atribuído o valor de chamada do programa (ou seja, o parâmetro de entrada) e a R9 é sempre atribuído o valor de saída (o retorno). No início da execução do programa, é atribuído o valor 0 a todas as variáveis, com exceção de R0 que recebe o parâmetro de entrada. As operações básicas são atribuição (MOV), soma (ADD), subtração (SUB), multiplicação (MUL), divisão inteira (DIV) e resto da divisão inteira (MOD). Todas essas operações têm a sintaxe COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde COMANDO é uma dessas operações, OPERANDO1 é uma das 10 variáveis (R0 a R9) e OPERANDO2 pode ser uma das 10 variáveis ou um valor inteiro (entre 0 e 999). Todas as operações modificam o valor de OPERANDO1, sendo assim MOV R4,100 é o equivalente a atribuir o valor 100 a R4, enquanto que MUL R3,R8 é o equivalente a multiplicar R3 por R8 e atribuir o resultado a R3. A operação DIV, assim como a MOD, retornam 0 (zero) se OPERANDO2 for 0 ou se a variável equivalente tiver valor 0. Ou seja, DIV R4,0 é o equivalente a MOV R4,0. Por divisão inteira, entendemos a parte inteira do quociente da divisão (sem a parte fracionária). Por exemplo, a divisão inteira de 7 por 2 é 3 (sendo o resto 1). Existem seis comandos de fluxo de decisão: IFEQ (se igual), IFNEQ (se diferente), IFG (se maior), IFL (se menor), IFGE (se maior ou igual) e IFLE (se menor ou igual). A sintaxe de todos eles é COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde OPERANDO1 e OPERANDO2 podem ser variáveis (R0 a R9) ou valores inteiros (entre 0 e 999). Assim, o comando IFEQ R4,123 é o equivalente a testar se R4 é igual a 123. Caso a condição testada seja verdadeira, o programa continua a executar normalmente a linha subsequente ao comando de decisão. Caso a condição seja falsa, o programa passa a executar a linha subsequente ao ENDIF mais próximo. Todos os comandos de decisão devem ter um comando ENDIF correspondente. Finalmente, existem os comandos CALL e RET, ambos com a sintaxe COMANDO OPERANDO, onde OPERANDO é uma variável (R0..R9) ou valor direto (entre 0 e 999). O comando CALL chama o próprio programa novamente, passando OPERANDO como parâmetro de entrada, ou seja, atribuindo o valor de OPERANDO à variavel R0. Já RET termina a execução do programa, retornando o valor de OPERANDO como o resultado de saída. A última linha do programa sempre será um comando RET. Observe que, caso o programa chame a si mesmo através do comando CALL, quando a execução voltar, o valor de R9 vai estar alterado com o valor retornado pelo programa. Note também que todas as variáveis (R0..R9) são locais, ou seja, uma chamada subsequente ao programa não pode alterar os valores guardados nas variáveis da instância anterior, com exceção, naturalmente, do valor de R9 que recebe o retorno da instância chamada. O exemplo a seguir ilustra um programa que calcula o fatorial de um número. 1a linha: Verifica se o valor de R0 vale 0, caso positivo, executa a próxima linha, caso contrário, pula para a 4a linha (ENDIF mais próximo). 2a linha: Retorna 1 como saída do programa. 3a linha: Marca o fim do bloco de decisão iniciado na primeira linha. 4a linha: Atribui o valor de R0 a R1 (R1 ← R0). 5a linha: Diminui 1 de R1 (R1 ← R1 - 1). 6a linha: Chama o programa passando R1 como parâmetro de entrada. 7a linha: Guarda o valor de R9 (retornado pela chamada anterior) em R2 (R2 ← R9). 8a linha: Multiplica o valor de R2 por R0 (R2 ← R2 * R0). 9a linha: Retorna o valor de R2 como saída do programa. A tabela seguir traz um resumo dos comandos para referência:",
        "nivel": "8",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste se inicia com dois inteiros, L e N, representando respectivamente o número de linhas do programa (1 ≤ L ≤ 100) e o valor do parâmetro de entrada do programa (0 ≤ N ≤ 100). As L linhas seguintes contêm o programa. Pode-se assumir que ele está sempre sintaticamente correto de acordo com as regras definidas acima. Todos os comandos (bem como o nome das variáveis) só conterão letras maiúsculas. O final da entrada é marcado pelo caso em que L = N = 0 e não deve ser processado."
    },
    {
        "assunto": "4",
        "saida": "Para cada consulta, imprima o índice do vetor (1-indexado) da ocorrência solicitada. Se tal ocorrência não existe, imprima 0 ao invés.",
        "numero": "1424",
        "titulo": "Problema Fácil de Rujia Liu?",
        "descricao": "Embora Rujia Liu geralmente escreve problemas difíceis para algumas competições (como, por exemplo, competições regionais de Xi'an em 2006, de Pequim em 2007 e de Wuhan em 2009, ou competições no UVA OJ como a \"Rujia Liu's Presents\" 1 e 2), ele escreve problemas fáceis algumas vezes (como, por exemplo, o problema \"the Coco-Cola Store\" no UVA-OJ), para encorajar mais pessoas a resolver mais problemas :D Dado um vetor de inteiros, sua tarefa é encontrar a k-ésima ocorrência (da esquerda para a direita) de um inteiro v no vetor. Para tornar o problema mais difícil (e mais interessante!), você deve responder a m consultas deste tipo.",
        "nivel": "4",
        "entrada": "Há vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros n e m (1 ≤ n, m ≤ 100.000), o número de elementos no vetor e o número de consultas a serem respondidas, respectivamente. A próxima linha contém n inteiros positivos não maiores que 1.000.000, que descrevem o vetor. As próximas m linhas contém dois inteiros k e v cada (1 ≤ k ≤ n, 1 ≤ v ≤ 1.000.000), descrevendo as consultas. O arquivo de entrada termina com fim-de-arquivo (EOF). O tamanho do arquivo de entrada não excede 5 Mb."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma única linha contendo um único inteiro, o número de compassos que possuem a duração correta.",
        "numero": "1430",
        "titulo": "Composição de Jingles",
        "descricao": "A. C. Marcos está dando os primeiros passos para ser um compositor de jingles. Ele está tendo alguns problemas, mas ao menos ele está criando melodias agradáveis e ritmos atrativos. Na música, uma nota tem um tom (sua frequência, resultando em quão grave ou agudo é o som) e uma duração (por quanto tempo a nota soa). Neste problema, estamos interessados apenas na duração das notas. Um jingle é dividido em uma sequência de compassos, e um compasso é formado de uma série de notas. A duração de uma nota é indicada pela sua forma. Neste problema, iremos utilizar letras maiúsculas para indicar a duração de uma nota. A seguinte tabela lista todas as notas disponíveis: ​ A duração de um compasso é a soma da duração de suas notas. Nos jingles de Marcos, cada compasso tem a mesma duração. Como Marcos é apenas um iniciante, seu famoso professor Johann Sebastian III o ensinou que a duração de um compasso deve ser sempre 1. Por exemplo, Marcos escreveu uma composição contendo cinco compassos, dentre os quais quatro possuem a duração correta e um está errado. No exemplo abaixo, cada compasso é delimitado com barras e cada nota é representada como na tabela acima. /HH/QQQQ/XXXTXTEQH/W/HW/ Marcos gosta de computadores assim como de música. Ele quer que você escreva um programa que determine, para cada uma de suas composições, quantos compassos possuem a duração correta.",
        "nivel": "2",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em uma única linha contendo uma string cujo tamanho está entre 3 e 200 caracteres, inclusive, representando uma composição. Uma composição começa e termina com uma barra '/'. Compassos em uma composição são separados por uma barra '/'. Cada nota em um compasso é representada pela letra correspondente segundo a descrição acima. Você pode assumir que cada composição contém ao menos um compasso e que cada compasso contém ao menos uma nota. Todos os caracteres na entrada serão barras ou uma das sete letras maiúsculas usadas para representar as notas. O último caso de teste é seguido por uma linha contendo um único asterisco."
    },
    {
        "assunto": "4",
        "saida": "Para cada cado de teste, imprima uma única linha contendo 'Let me try!'(Me deixe tentar) se for possível chegar a Pedra M, caso contrário, imprima um linha contendo 'Don't make fun of me!'(Não ria de mim!).",
        "numero": "1425",
        "titulo": "Presente?!",
        "descricao": "Existe um belo riacho em uma bela vila. N Pedras estão alinhadas em linha reta do número 1 até N, da margem esquerda à margem direita, como mostrado abaixo. [Flanco esquerdo] - [Pedra 1] - [Pedra 2] - [Pedra 2] - [Pedra 3] - [Pedra 4] - [Pedra N] - [Flanco Direito] A distância entre duas Pedras adjacentes é exatamente 1 metro, enquanto a distância entre a margem esquerda e a Pedra 1 e a distância entre a Pedra N e a margem direita também são 1 metro. O sapo Frank está prestes a atravessar o riacho, seu vizinho, o sapo Funny veio a ele e disse: 'Olá Frank, feliz dia das Crianças! Eu tenho um presente para você. Vê? Um pequeno pacote na Pedra 5.' 'Oh, que legal! Obrigado! Eu vou pegar.' 'Espere! Este presente é apenas para sapos inteligentes. Você não pode pegar pulando direto.' 'Oh? Então o que devo fazer?' 'Pular mais vezes. Seu primeiro pulo deve ser da margem esquerda para a Pedra 1, então, pule quantas vezes quiser - não importa se for pra frente ou para traz - mas seu pulo i deve cobrir 2 × i - 1 metros. E mais, uma vez que alcance a margem direita ou esquerda, o jogo termina, sem mais pulos!' 'Hummmm, nada fácil... deixa eu pensar!' Respondeu sapo Frank, 'Devo tentar?'",
        "nivel": "5",
        "entrada": "A entrada contém mais de 2000 casos de teste. Cada caso de teste contém um única linha. Ela contém dois positivos inteiros N(2 ≤ N ≤ 106), e M(2 ≤ M ≤ N), M indica o número da pedra em que o presente está. O caso de teste no qual N = 0, M = 0 terminará a entrada e não deve ser contado como caso de teste."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o número do jogador que ganha a partida.",
        "numero": "1439",
        "titulo": "Bora Bora",
        "descricao": "Bora Bora é um jogo de cartas simples para crianças, inventado na Ilha do Pacífico Sul de mesmo nome. Duas ou mais pessoas podem jogar, usando um baralho de cartas normais. As cartas têm os valores normais: Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Dama e Rei. Cada carta tem também um dos quatro naipes: Paus, Ouros, Copas e Espadas. Os jogadores sentam-se em um círculo ao redor da mesa e jogam por turnos. O próximo jogador a jogar pode ser aquele à esquerda (sentido horário) ou o jogador à direita (sentido anti-horário) do jogador atual, dependendo das cartas jogadas, como você verá. No começo, o sentido do jogo é horário. O baralho é embaralhado e é dada a cada jogador uma mão de cartas. O restante do baralho é colocado na mesa, virado para baixo; a essa pilha é dado o nome de pilha de saque. Então a primeira (a mais acima) carta é removida da pilha e colocada na mesa, virada para cima, começando outra pilha, chamada de pilha de descarte. O objetivo do jogo é que um jogador descarte todas suas cartas. Em cada turno, um jogador descarta no máximo uma carta. Uma carta pode ser descartada apenas se ela tem o mesmo valor ou o mesmo naipe da carta que se encontra no topo da pilha de descarte. Um jogador descarta uma carta colocando-a, virada para cima, na pilha de descarte (essa carta se torna a carta do topo). Se um jogador não tiver uma carta passível de ser descartada em seu turno, ele deve sacar uma carta da pilha de saque e adicionar à sua mão; se ele puder descartar essa carta, ele o faz, caso contrário ele não faz mais nada e seu turno acaba. Um jogador sempre descarta a carta mais alta que ele consegue. O valor de uma carta é determinado primeiro pelo valor da carta e então pelo naipe. A ordem dos valores é o valor em si (Ás é o menor e Rei é o maior), e a ordem dos naipes é, do menor para o maior, Paus, Ouros, Copas e Espadas. Portanto, a carta de maior valor é o Rei de Espadas e a de menor valor é o Ás de Paus. Como exemplo, a Dama de Ouros tem um valor maior que um Valete (qualquer naipe) mas tem um valor menor que a Dama de Copas. Algumas das cartas descartadas afetam o jogo, como se segue: Quando uma Dama é descartada, a direção de jogo é invertida: se a direção é horária, ela se torna anti-horária, e vice-versa; Quando um Sete é descartado, o próximo jogador deve sacar duas cartas da pilha de saque (o número de cartas em sua mão aumenta por dois), e perde a vez (não descarta nenhuma carta); Quando um Ás é descartado, o próximo jogador deve sacar uma carta da pilha de saque (o número de cartas em sua mão aumenta por um), e perde sua rodada (não descarta nenhuma carta); Quando um Valete é descartado, o próximo jogador perde a vez (não descarta nenhuma carta). Perceba que a penalidade da primeira carta da pilha de descarte (a carta sacada da pilha de saque no começo) é aplicada ao primeiro jogador a jogar. Por exemplo, se o primeiro jogador é p e a primeira carta na pilha de descarte é um Ás, o jogador p saca uma carta da pilha de saque e não descarta nenhuma carta em seu primeiro turno. Note também que se a primeira carta é uma Dama, o sentido do jogo é invertido para o anti-horário, mas o primeiro jogador a jogar permanece o mesmo. O vencedor é o jogador que descarta todas suas cartas primeiro (o jogo acaba depois de o vencedor descartar sua última carta). Dada a descrição do baralho embaralhado e o número de jogadores, escreva um programa que determine quem vencerá o jogo.",
        "nivel": "6",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém três inteiros P, M e N, separados por espaço, indicando respectivamente o número de jogadores (2 ≤ P ≤ 10), o número de cartas distribuídas para cada jogador no começo da partida (1 ≤ M ≤ 11) e o número de cartas no baralho embaralhado (3 ≤ N ≤ 300). Cada uma das próximas N linhas contém a descrição de uma carta. Uma carta é descrita por um inteiro X e um caractere S, separados por um espaço, representando respectivamente o valor da carta e seu naipe. O valor das cartas é mapeado com inteiros de 1 a 13 (Ás é 1, Valete é 11, Dama é 12 e Rei é 13). Os naipes das cartas são designados pela primeira letra do naipe: 'C' (Paus - Clubs), 'D' (Ouros - Diamonds), 'H' (Copas - Hearts) ou 'S' (Espadas - Spades). Os jogadores são identificados com valores de 1 a P e sentam-se em um círculo, no sentido horário, 1, 2 ... P, 1. As primeiras P x M cartas do baralho são distribuídas aos jogadores: as primeiras M cartas ao primeiro jogador (jogador 1), as próximas M cartas ao segundo jogador (jogador 2), e assim por diante. Depois de distribuir as cartas aos jogadores, a próxima carta do baralho - a (P x M + 1)-ésima carta - é usada para começar a pilha de descarte, e as cartas restantes formam a pilha de saque. A (P x M + 2)-ésima carta a aparecer na entrada é a carta do topo da pilha de saque, e a última carta a aparecer na entrada (a N-ésima carta) é a carta de baixo da pilha de saque (a última carta que pode ser sacada). O jogador 1 é sempre o primeiro a jogar (mesmo se a carta usada para começar a pilha de descarte é uma Dama). Todos os casos de teste têm um vencedor, e em todos casos de teste o número de cartas no baralho é suficiente para jogar até o fim da partida. O final da entrada é indicado por uma linha contendo apenas três zeros, separados por espaços."
    },
    {
        "assunto": "4",
        "saida": "Para cada instância imprima as N linhas traduzidas. As palavras que não estão no dicionário devem ser impressas como aparecem na entrada. Imprima uma linha em branco após tradução, inclusive após a última. Nenhuma linha da saída contém mais do que 80 letras.",
        "numero": "1449",
        "titulo": "O Fantástico Jaspion",
        "descricao": "Em 1985 estréia na TV Japonesa a série Kyojiu Tokusou Jaspion (Investigador Especial de Monstros Jaspion). A série chega ao Brasil alguns anos depois com o título “O Fantástico Jaspion”, e com ela nasce a fantasia de polícia espacial em milhões de brasileirinhos. As crianças saíam da escola, corriam pelas ruas (sem olhar se vinha carro), ligavam a TV e mergulhavam na coragem, exemplo de pessoa, e incontestável sede por justiça do Fantástico Jaspion. O comércio de gibis e as brigas por figurinhas no recreio da escola estavam alcançando números históricos. Até então, tal sentimento só havia sido estimulado com tanta intensidade pelo Chaves e a sua turma! Diante dessa febre inter-galática, o inevitável aconteceu. Os produtores do Jaspion ganharam o Nobel da Paz! Isso mesmo! Os produtores ganharam um Nobel. As histórias do grandioso Jaspion estavam por todo canto. Agora as crianças tinham um belíssimo exemplo para seguir. A paz mundial estava garantida! Não precisávamos mais temer o monstrengo Satan Gos! No Brasil havia uma criança que adorava as histórias do Jaspion! Antônio Melhorança Capote Valente Junior carinhosamente apelidado de ACM, um menino da zona sul de São Paulo que adorava cantar as músicas do grande herói. Ele era tão fanático que chegou a comprar um dicionário de Japonês-Português e iniciou um trabalho árduo de tradução. Entretanto, o trabalho ficou inacabado! Alguns trechos da canção ainda precisam ser traduzidos. Neste momento você deve estar se perguntando: qual é a minha tarefa neste fabuloso problema? Ok! Antes de falar da sua tarefa, convide seu companheiro de equipe para mergulhar com você no desfecho da história. Para isso, vamos falar mais um pouco sobre o nosso ACM. Ele se formou em Ciência da Computação e hoje trabalha no mesmo escritório que você. Pois é! Você trabalha como programador ao lado dessa figura! Como sabemos que você gosta muito dele, temos certeza que vai aceitar a seguinte tarefa: dado um dicionário Japonês-Português e uma letra de música, escreva um programa que imprima a letra traduzida.",
        "nivel": "3",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros M e N (1 ≤ M ≤ 1000000, 1 ≤ N ≤ 1000), que representam o número de palavras no dicionário e o número de linhas na letra da música, respectivamente. Os próximos M pares de linhas contêm as traduções: a primeira linha de cada par contém a palavra em Japonês, e a segunda linha contém a tradução para o Português (que pode ter uma ou mais palavras). Todas as palavras usam apenas letras minúsculas. Cada palavra em Japonês aparece apenas uma vez em cada instância. As próximas N linhas contêm a letra da música. Cada linha da letra da música é uma lista de palavras separadas por um espaço (todas as palavras consistem apenas de letras minúsculas). Algumas podem estar vazias, mas nenhuma linha possui espaços no início ou no final. Nenhuma linha contém mais do que 80 letras."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso, imprimir o texto Beiju na tela.",
        "numero": "1451",
        "titulo": "Teclado Quebrado",
        "descricao": "Você está digitando um texto longo com um teclado quebrado. Bem, não tão quebrado. O único problema com o teclado é que às vezes a tecla \"home\" ou a tecla \"end\" é automaticamente pressionada (internamente). Você não está ciente deste problema, já que você está focado no texto e nem sequer ligou o monitor! Depois que você terminar de digitar, você pode ver um texto na tela (se você ligar o monitor). Em chinês, podemos chamar este texto de Beiju. Sua tarefa é encontrar o texto Beiju.",
        "nivel": "3",
        "entrada": "Há diversos casos de teste. Cada teste é uma única linha que contém pelo menos uma e, no máximo, 100.000 letras, underscores e dois caracteres especiais '[' e ']'. '[' Significa que a tecla \"Home\" é pressionada internamente, e ']' significa que a tecla \"End\" é pressionada internamente. A entrada é terminada por fim de arquivo (EOF). O tamanho do arquivo de entrada não excede 5MB."
    },
    {
        "assunto": "4",
        "saida": "Para cada caso de teste, o programa deve imprimir a soma total de conexões entre cliente e servidores em uma linha, desconsiderando múltiplas conexões entre um mesmo par de cliente e servidor.",
        "numero": "1452",
        "titulo": "Gloud Computing",
        "descricao": "A Gloud Computing está vindo se instalar para a região de Joinville. Eles são conhecidos por proverem aplicativos na internet, mais especificamente um modelo de negócios baseado em cloud computing - computação nas nuvens. A fim de selecionar os novos funcionários da empresa, eles contactaram o comitê da maratona da UDESC, para que passassem um problema aos nossos maratonistas. Aquele que resolver, além do balão, pode preencher a ficha funcional com estrelinhas a mais. Basicamente, a Gloud Computing tem aplicações espalhadas em seus servidores em diversos lugares do mundo. Estes servidores são especializados em uma lista de aplicativos a serem usados pelos usuários ali conectados na internet das nuvens. Por exemplo, o servidor de Joinville pode disponibilizar a aplicação A, enquanto que o de Pasadena na Califórnia provê as aplicações A, B e C e o servidor de Pomerode provê a aplicação C. Temos um conjunto de servidores a cada um com um conjunto de aplicações a serem disponibilizados a um conjunto de usuários. Cada usuário pode estar conectado a um ou mais servidores dependendo de sua demanda, como ilustrado na Figura 1. Figura 1: 3 provedores de serviços, 2 usuários e 4 conexões. Serão disponibilizados a você dados sobre estes dois conjuntos, servidores e demanda dos usuários, e você deverá dizer a quantidade total de conexões entre clietes e servidores. As conexões são feitas de forma a maximizar a redundância. Por exemplo, se um cliente utilizar as aplicações B e C, ele irá se conectar a todos os servidores que disponibilizarem ao menos a aplicação B e a todos os que disponibilizarem ao menos a C. Múltiplas conexões entre um mesmo par de cliente e servidor são contabilizadas como um só. Pode ser que um cliente requeira uma aplicação inexistente, assim como o caso de um servidor prover uma apliação não requisitada por nenhum cliente.",
        "nivel": "3",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é iniciado por dois inteiros, N e M (0 ≤ N, M ≤ 200), que correspondem ao número de servidores e ao número de clientes. Cada uma das próximas N linhas contém um valor Qi (0 ≤ Qi ≤ 100) correspondente ao número de aplicações fornecidas pelo i-ésimo servidor, seguido por Qi palavras (separadas por espaços) referentes aos nomes das aplicações fornecidas. Após esta descrição dos servidores, seguem M linhas, cada uma contendo um valor Pj (0 ≤ Pj ≤ 100) correspondente ao número de aplicações requisitadas pelo j-ésimo cliente, seguido por Pj palavras (separadas por espaços) referentes aos nomes das aplições requisitadas. A entrada temina quando N = M = 0. Todos os nomes de aplicativos tem tamanho entre 1 e 20 caracteres."
    },
    {
        "assunto": "4",
        "saida": "Para cada operação de contagem, imprima uma linha contendo três inteiros indicando respectivamente o número de símbolos Homem, Elefante e Rato que são usados pelos jogadores no intervalo dado. Imprima também uma linha em branco após cada caso de teste, inclusive após o último caso de teste da entrada.",
        "numero": "1477",
        "titulo": "Homem, Elefante e Rato",
        "descricao": "Um jogo muito popular na Nlogônia é o Homem, Elefante e Rato. Ele é tipicamente jogado com apenas dois jogadores, e funciona da seguinte forma: cada jogador secretamente escolhe um dos três símbolos e, após uma contagem regressiva, ambos revelam simultaneamente o símbolo escolhido através de sinais manuais, estendendo à sua frente uma das mãos sinalizando sua escolha. O Homem é representado pela mão fechada, como a cabeça de um homem. O Elefante é representado pela mão aberta, exibindo os cinco dedos, como a pata do elefante nlogonense. Por fim, o Rato é representado pela mão fechada, com o dedo indicador e o dedo médio esticados, como as orelhas do pequeno animal. ​ Figura 1: Os três símbolos do jogo Homem, Elefante e Rato. Para determinar o vencedor é muito simples: o Homem sempre perde para o Elefante (pois é esmagado debaixo de sua pata), o Elefante sempre perde para o Rato (pois tem medo dele e foge correndo) e o Rato sempre perde para o Homem (que espalha ratoeiras para capturá-lo). Se dois jogadores utilizarem o mesmo símbolo, ocorre um empate e joga-se novamente. Os habitantes da Nlogônia, que são estrategistas natos de Homem, Elefante e Rato, utilizam a seguinte técnica no campeonato nacional, realizado todos os anos: começam sempre jogando Homem até o momento em que este símbolo causa empates com a maioria dos oponentes. Eles então trocam sua estratégia para o símbolo que ganha daquele que usavam anteriormente. Assim, os jogadores vão mudar de Homem para Elefante, depois para Rato, depois de volta a Homem. Para auxiliar um famoso competidor estrangeiro de um jogo com uma certa similaridade com este jogo de Homem, Elefante e Rato, você irá desenvolver um programa que contabiliza quantos jogadores irão utilizar cada símbolo. Suponha que todos os N jogadores são dispostos em fila e identificados pela sua posição, de 1 a N. Seu programa deverá processar M comandos, de dois tipos: mudança de símbolo e contar a frequência dos símbolos. Ambos os comandos recebem um intervalo contíguo de jogadores na fila a serem considerados.",
        "nivel": "8",
        "entrada": "A entrada é composta por diversos casos de teste. Cada caso de teste começa com uma linha contendo dois inteiros N (1 ≤ N ≤ 105) ​​e M (0 ≤ M ≤ 106) > ​que representam, respectivamente, o número de jogadores no campeonato e o número de operações. As próximas M linhas contêm cada uma a descrição de uma operação. Operações de mudança de estratégia serão representadas por uma linha da forma \"M A B\" onde A (1 ≤ A) e B (A ≤ B ≤ N) são inteiros. Os jogadores cuja estratégias serão alteradas são aqueles cuja posição na fila está entre A e B, inclusive. Operações de contagem serão representadas por uma linha da forma \"C A B\" onde A e B são inteiros representando o intervalo de jogadores que deverão ser considerados na contagem. Levaremos em conta os jogadores cuja posição na fila está entre A e B, inclusive."
    },
    {
        "assunto": "4",
        "saida": "Imprima a respostas das consultas, conforme o exemplo de saída.",
        "numero": "1500",
        "titulo": "Consultas Horríveis",
        "descricao": "O mundo está cada vez mais mal e está ficando cada vez mais difícil de entrar na liga do mal. Desde que o lendário Bad Horse se aposentou, você tem que responder corretamente as perguntas do mal do Dr. Horrible, que tem um PhD em malvadeza (mas não em Ciência da Computação). É dado um conjunto de N elementos, que são inicialmente todos 0. Depois disso você receberá C comandos. São eles: 0 p q v - você tem que adicionar v para todos os números na faixa de p à q (inclusive), onde p e q são dois índices do array. 1 p q - imprima uma linha contendo um único inteiro, que é a soma de todos os elementos do array entre p e q (inclusive).",
        "nivel": "7",
        "entrada": "A primeira linha contém T, que indica o número de casos de teste. Cada caso de teste começará com N (N ≤ 100 000) e C (C ≤ 100 000). Após isso você deverá ler C operações no formato descrito acima (1 ≤ p, q ≤ N and 1 ≤ v ≤ 107)."
    },
    {
        "assunto": "4",
        "saida": "Para cada querie R, imprima \"Yes\" (sem aspas) se R for uma subsequência de S, ou \"No\" (sem aspas), caso contrario.",
        "numero": "1507",
        "titulo": "Subsequências",
        "descricao": "Dado duas sequências, diga se a segunda é uma subsequência da primeira.",
        "nivel": "3",
        "entrada": "A entrada comeca com um inteiro N (0 < N <= 10), o número de casos de teste. Seguem N casos testes. Um caso de teste comeca com uma sequência de caracteres S (S in [a-zA-Z], 0 < |S| < 100000). Segue um inteiro Q (0 < Q <= 1000), o número de queries. As proximas Q linhas sao compostas por uma sequência de carateres R (R in [a-zA-Z], 0 < |R| < 100) cada."
    },
    {
        "assunto": "4",
        "saida": "Imprima todas as linhas de saída na sequência, para todos os casos de teste. Para cada query do tipo “QUERY x y d” deverá ser respondido na saida padrão o gcd (Greatest Common Divisor) de todas as posição que estão a uma distância manhattan de no máximo 'd' da posição do tabuleiro (x, y).",
        "numero": "1511",
        "titulo": "Tabuleiro GCD",
        "descricao": "Dado um grid infinito totalmente setado para o valor zero e Q queries dos tipos: SET x y d: Seta a posição (x,y) do tabuleiro para o valor d QUERY x y d: Retorna o gcd (Greatest Common Divisor) de todas as posições do tabuleiro que estão a uma distância de manhattan de no máximo d da posição (x,y).",
        "nivel": "8",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. A primeira linha de cada caso de teste contém um inteiro Q (1 <= Q <= 105) que representa a quantidade de queries a serem feitas. As proximas Q linhas contém cada uma query, podendo ser dos seguintes tipos: SET x y d QUERY x y d 0 <= |x|, |y| <= 500 0 <= d <= 106"
    },
    {
        "assunto": "4",
        "saida": "Cada caso de entrada deverá produzir uma única linha de saída, indicando as posições da prateleira nas quais o parafuso de tamanho Num se encontra ou indicando que não foi possível encontrar o parafuso, conforme o exemplo abaixo.",
        "numero": "1520",
        "titulo": "Parafusos e Porcas",
        "descricao": "Pedro está trabalhando em um novo emprego em uma loja de parafusos e porcas. Toda semana ele irá receber novas encomendas de parafusos mistos em grandes caixas e precisa saber onde ele deve armazenar esses produtos. Mango, que é supervisor de Pedro, pediu-lhe para organizar todos os parafusos e porcas em um rack enorme, de forma que seja fácil de responder onde é possível encontrar cada predeterminado lote de parafusos e quanto de cada um destes lotes a loja tem.  Pedro recebe todos os parafusos e porcas em caixas etiquetadas com o intervalo de tamanho dos produtos. Por exemplo, duas caixas com os respectivos intervalos (1, 2) e (4, 8) representam lotes de produtos com tamanho {1, 2, 4, 5, 6, 7, 8}. Um número de parafuso e porca pode estar presente em mais de uma caixa, e ele aparece na lista uma vez para cada intervalo. Por exemplo, três caixas com os respectivos intervalos (1, 3), (2, 4) e (3,5) representam lotes de parafusos e porcas com tamanho {1, 2, 2, 3, 3, 3, 4, 4, 5}.",
        "nivel": "2",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto por várias linhas. A primeira linha contém um inteiro positivo N (N < 100) que indica a quantidade de caixas de parafusos. Seguem N linhas, cada uma delas com dois valores X e Y (1 ≤ X < Y ≤ 100) que representam os tamanhos dos lotes de parafusos e porcas presentes naquela caixa. A próxima linha de entrada conterá um único inteiro positivo Num (1 ≤ Num ≤ 100), que indica o número que Mango deseja pesquisar após todos os produtos serem organizados na estante ou rack. Obs. A estante ou rack possui prateleiras enumeradas de 0 a P, sendo que este P não deve ser superior a 10000."
    }
]