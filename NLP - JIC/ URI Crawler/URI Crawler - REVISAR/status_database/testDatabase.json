[
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2061",
        "saida": "A saída deve ser uma linha contendo o número final de abas.",
        "entrada": "A entrada é iniciada por uma linha contendo dois números inteiros positivos, N e M (0 < N, M < 500), representando o número inicial de abas e o número de ações de Péricles. Cada linha subsequente contém uma ação (fechou ou clicou). Naturalmente, o número de abas é sempre maior ou igual a zero.",
        "titulo": "As Abas de Péricles",
        "descricao": "Péricles é um rapaz que tem um interesse único por história. Utilizando seu atualizadíssimo navegador de internet rapoza cromada, conheceu até os sitios mais remotos e obscuros atrás de informações sobre a mitologia grega. Por ironia do destino, o navegador de Péricles acabou sendo infectado por um malware com uma caracterísica peculiar: cada vez que Péricles fechava uma aba no seu navegador, outras duas abas apareciam! No entanto, quando Péricles clicou sem querer em uma das propagandas de uma aba, percebeu que, por um erro do navegador, a aba foi encerrada (sem abrir outras abas). Por causa do malware, todas as abas possuem irritantes propagandas. Sua tarefa é descobrir com quantas abas que o navegador de Péricles ficou, sabendo o número inicial de abas e a sequência de ações de Péricles. As ações podem ser fechou (quando Péricles fechou uma aba) ou clicou (quando Péricles clicou em uma propaganda)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1051",
        "saida": "Imprima o texto \"R$\" seguido de um espaço e do valor total devido de Imposto de Renda, com duas casas após o ponto. Se o valor de entrada for menor ou igual a 2000, deverá ser impressa a mensagem \"Isento\".",
        "entrada": "A entrada contém apenas um valor de ponto flutuante, com duas casas decimais.",
        "titulo": "Imposto de Renda",
        "descricao": "Em um país imaginário denominado Lisarb, todos os habitantes ficam felizes em pagar seus impostos, pois sabem que nele não existem políticos corruptos e os recursos arrecadados são utilizados em benefício da população, sem qualquer desvio. A moeda deste país é o Rombus, cujo símbolo é o R$. Leia um valor com duas casas decimais, equivalente ao salário de uma pessoa de Lisarb. Em seguida, calcule e mostre o valor que esta pessoa deve pagar de Imposto de Renda, segundo a tabela abaixo.   Lembre que, se o salário for R$ 3002.00, a taxa que incide é de 8% apenas sobre R$ 1000.00, pois a faixa de salário que fica de R$ 0.00 até R$ 2000.00 é isenta de Imposto de Renda. No exemplo fornecido (abaixo), a taxa é de 8% sobre R$ 1000.00 + 18% sobre R$ 2.00, o que resulta em R$ 80.36 no total. O valor deve ser impresso com duas casas decimais."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1004",
        "saida": "Imprima a variável PROD conforme exemplo abaixo, com um espaço em branco antes e depois da igualdade. Não esqueça de imprimir o fim de linha após o produto, caso contrário seu programa apresentará a mensagem: “Presentation Error”.",
        "entrada": "O arquivo de entrada contém 2 valores inteiros.",
        "titulo": "Produto Simples",
        "descricao": "Leia dois valores inteiros. A seguir, calcule o produto entre estes dois valores e atribua esta operação à variável PROD. A seguir mostre a variável PROD com mensagem correspondente."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1963",
        "saida": "A única linha da saída deve consistir unicamente de um valor, que represente como uma porcentagem o aumento do valor do ingresso. O valor deve ser acompanhado do símbolo % e conter exatos dois dígitos após o ponto separador decimal.",
        "entrada": "A única linha da entrada consiste de dois valores A e B (0.00 < A ≤ B ≤ 1000.00), os quais, fornecidos com exatos dois dígitos após o ponto separador decimal, representam respectivamente o valor antigo e o valor novo do ingresso do cinema.",
        "titulo": "O Filme",
        "descricao": "Bem-vindo à 3ạ Maratona de Programação Júnior da UFFS. Esperamos sinceramente que as próximas horas sejam muito produtivas para você, que você faça muitos balões e que, acima de tudo, você se divirta! Lembre que você sempre pode pedir esclarecimento quando não entender direito a descrição de um problema. Lembre também que às 17:30 os juízes automáticos serão desligados e a competição entrará em modo blind, de modo que todas as submissões neste período só começarão a ser julgadas às 18:10. Por favor, fique conosco até o fim da competição, trabalhando nas soluções dos problemas até o último minuto, pois, enquanto a competição ainda está ocorrendo, sempre há esperança! E foi esperança que motivou a Vovó Zazá, uma senhora de 72 anos, a realizar seu sonho de começar um curso universitário. Ela está fascinada com tudo o que diz respeito à Universidade: com as aulas, com a biblioteca, com os projetos de pesquisa e extensão, com o restaurante universitário, mas especialmente com a carteirinha de estudante que ela pode utilizar para pagar meia entrada no cinema. Semana passada, Vovó Zazá e seus colegas de turma foram ao cinema assistir a um filme, mas ficaram estarrecidos com o aumento do preço do ingresso. Revoltados, eles decidiram fazer uma manifestação contra o sistema capitalista opressor, agendada para amanhã na Praça General Bertaso. Vovó Zazá quer colaborar com o movimento fazendo um cartaz com a seguinte palavra de ordem: QUE ABSURDO! O PREÇO DO CINEMA SUBIU … % !! Mas ela não é muito boa em Matemática, e está solicitando sua ajuda para calcular a porcentagem de que precisa para completar o cartaz."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1176",
        "saida": "Para cada caso de teste da entrada, imprima a mensagem \"Fib(N) = X\", onde X é o N-ésimo termo da série de Fibonacci.",
        "entrada": "A primeira linha da entrada contém um inteiro T, indicando o número de casos de teste. Cada caso de teste contém um único inteiro N (0 ≤ N ≤ 60), correspondente ao N-esimo termo da série de Fibonacci.",
        "titulo": "Fibonacci em Vetor",
        "descricao": "Faça um programa que leia um valor e apresente o número de Fibonacci correspondente a este valor lido. Lembre que os 2 primeiros elementos da série de Fibonacci são 0 e 1 e cada próximo termo é a soma dos 2 anteriores a ele. Todos os valores de Fibonacci calculados neste problema devem caber em um inteiro de 64 bits sem sinal."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2161",
        "saida": "A saída é o valor aproximado da raiz quadrada com 10 casas decimais.",
        "entrada": "A entrada é um número natural N (0 ≤ N ≤ 100), que indica o número de repetições do denominador na fração continuada.",
        "titulo": "Raiz Quadrada de 10",
        "descricao": "Uma das formas de calcular a raiz quadrada de um número natural é pelo método das frações periódicas continuadas. Esse método usa como denominador uma repetição de frações. Essa repetição pode ser feita uma quantidade específica de vezes. Por exemplo, ao repetir 2 vezes a fração continuada para calcular a raiz quadrada de 10, temos a fórmula abaixo. Sua tarefa é, dado o número N de repetições, calcular o valor aproximado da raiz quadrada de 10."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1564",
        "saida": "Para cada teste, a saída consiste de uma linha dizendo \"vai ter copa!\" caso não haja reclamações para a presidente. Caso haja reclamações, a saída deverá dizer \"vai ter duas!\".",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de uma linha contendo o número N de reclamações sobre a copa encaminhadas para a presidente (0 ≤ N ≤ 100).",
        "titulo": "Vai Ter Copa?",
        "descricao": "O Brasil é o país sede da copa esse ano. Porém, há muitas pessoas protestando contra o governo. Em redes sociais é possível ver pessoas afirmando que não vai ter copa devido aos protestos. Mas esses rumores de que não haverá copa são totalmente falsos, a presidente Dilma Roussef já avisou: vai ter copa sim, e se reclamar vai ter duas!"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1155",
        "saida": "A saída contém um valor correspondente ao valor de S. O valor deve ser impresso com dois dígitos após o ponto decimal.",
        "entrada": "Não há nenhuma entrada neste problema.",
        "titulo": "Sequência S",
        "descricao": "Escreva um algoritmo para calcular e escrever o valor de S, sendo S dado pela fórmula: S = 1 + 1/2 + 1/3 + … + 1/100"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1009",
        "saida": "Imprima o total que o funcionário deverá receber, conforme exemplo fornecido.",
        "entrada": "O arquivo de entrada contém um texto (primeiro nome do vendedor) e 2 valores de dupla precisão (double) com duas casas decimais, representando o salário fixo do vendedor e montante total das vendas efetuadas por este vendedor, respectivamente.",
        "titulo": "Salário com Bônus",
        "descricao": "Faça um programa que leia o nome de um vendedor, o seu salário fixo e o total de vendas efetuadas por ele no mês (em dinheiro). Sabendo que este vendedor ganha 15% de comissão sobre suas vendas efetuadas, informar o total a receber no final do mês, com duas casas decimais."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1164",
        "saida": "Para cada caso de teste de entrada, imprima a mensagem “X eh perfeito” ou “X nao eh perfeito”, de acordo com a especificação fornecida.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 20), indicando o número de casos de teste da entrada. Cada uma das N linhas seguintes contém um valor inteiro X (1 ≤ X ≤ 108), que pode ser ou não, um número perfeito.",
        "titulo": "Número Perfeito",
        "descricao": "Na matemática, um número perfeito é um número inteiro para o qual a soma de todos os seus divisores positivos próprios (excluindo ele mesmo) é igual ao próprio número. Por exemplo o número 6 é perfeito, pois 1+2+3 é igual a 6. Sua tarefa é escrever um programa que imprima se um determinado número é perfeito ou não."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1175",
        "saida": "Para cada posição do vetor N, escreva \"N[i] = Y\", onde i é a posição do vetor e Y é o valor armazenado naquela posição.",
        "entrada": "A entrada contém 20 valores inteiros, positivos ou negativos.",
        "titulo": "Troca em Vetor I",
        "descricao": "Faça um programa que leia um vetor N[20]. Troque a seguir, o primeiro elemento com o último, o segundo elemento com o penúltimo, etc., até trocar o 10º com o 11º. Mostre o vetor modificado."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1134",
        "saida": "Deve ser escrito a mensagem: \"MUITO OBRIGADO\" e a quantidade de clientes que abasteceram cada tipo de combustível, conforme exemplo.",
        "entrada": "A entrada contém apenas valores inteiros e positivos.",
        "titulo": "Tipo de Combustível",
        "descricao": "Um Posto de combustíveis deseja determinar qual de seus produtos tem a preferência de seus clientes. Escreva um algoritmo para ler o tipo de combustível abastecido (codificado da seguinte forma: 1.Álcool 2.Gasolina 3.Diesel 4.Fim). Caso o usuário informe um código inválido (fora da faixa de 1 a 4) deve ser solicitado um novo código (até que seja válido). O programa será encerrado quando o código informado for o número 4."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1098",
        "saida": "Imprima a sequencia conforme exemplo abaixo.",
        "entrada": "Não há nenhuma entrada neste problema.",
        "titulo": "Sequencia IJ 4",
        "descricao": "Você deve fazer um programa que apresente a sequencia conforme o exemplo abaixo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2168",
        "saida": "A saída é dada em N linhas. Cada linha tem N caracteres, indicando se a quadra correspondente é segura ou insegura. Se uma quadra é segura, mostre o caractere S; se não é segura, mostre o caractere U.",
        "entrada": "A primeira linha da entrada tem um inteiro positivo N (1 ≤ N ≤ 100). Nas próximas N+1 linhas, existem N+1 números, que indicam, para cada esquina, a presença ou ausência de uma câmera de vigilância em funcionamento. O número 1 indica que existe uma câmera funcionando na esquina, enquanto o número zero indica que não há câmera funcionando.",
        "titulo": "Crepúsculo em Portland",
        "descricao": "No crepúsculo, a cidade de Portland fica cheia de vampiros e lobisomens. Entretanto, nenhum deles quer ser visto enquanto passeiam pelo centro. Vão ser instaladas câmeras de vigilância em cada esquina do centro de Portland. A cada mês, um mapa atualizado com as câmeras já em funcionamento é disponibilizado no site da prefeitura. Uma quadra é considerada segura se existem câmeras em, pelo menos, duas de suas quatro esquinas. No centro de Portland todas as quadras são quadrados de mesmo tamanho. Sua tarefa é, dado o mapa das câmeras em funcionamento nas esquinas, indicar o status de todas as quadras do centro."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1116",
        "saida": "Para cada caso mostre o resultado da divisão com um dígito após o ponto decimal, ou “divisao impossivel” caso não seja possível efetuar o cálculo. Obs.: Cuide que a divisão entre dois inteiros em algumas linguagens como o C e C++ gera outro inteiro. Utilize cast :)",
        "entrada": "A entrada contém um número inteiro N. Este N será a quantidade de pares de valores inteiros (X e Y) que serão lidos em seguida.",
        "titulo": "Dividindo X por Y",
        "descricao": "Escreva um algoritmo que leia 2 números e imprima o resultado da divisão do primeiro pelo segundo. Caso não for possível mostre a mensagem “divisao impossivel” para os valores em questão."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2163",
        "saida": "A saída é uma única linha com 2 inteiros X e Y separados por um espaço. Eles representam a coordenada (X,Y) do sabre de luz, caso encontrado. Se o terreno não tem um padrão de sabre de luz, X e Y são ambos zero.",
        "entrada": "A primeira linha da entrada tem dois números positivos N e M, representando, respectivamente, o número de linhas e de colunas varridos no terreno (3 ≤ N, M ≤ 1000). Cada uma das próximas N linhas tem M inteiros, que descrevem os valores lidos em cada célula do terreno (-100 ≤ Tij ≤ 100, para 1 ≤ i ≤ N e 1 ≤ j ≤ M).",
        "titulo": "O Despertar da Força",
        "descricao": "Há muito tempo atrás, em uma galáxia muito, muito distante... Após o declínio do Império, sucateiros estão espalhados por todo o universo procurando por um sabre de luz perdido. Todos sabem que um sabre de luz emite um padrão de ondas específico: 42 cercado por 7 em toda a volta. Você tem um sensor de ondas que varre um terreno com N x M células. Veja o exemplo abaixo para um terreno 4 x 7 com um sabre de luz nele (na posição (2, 4)). Você deve escrever um programa que, dado um terreno N x M, procura pelo padrão do sabre de luz nele. Nenhuma varredura tem mais do que um padrão de sabre de luz."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1118",
        "saida": "Se uma nota inválida for lida, deve ser impressa a mensagem “nota invalida”. Quando duas notas válidas forem lidas, deve ser impressa a mensagem “media = ” seguido do valor do cálculo. Antes da leitura de X deve ser impressa a mensagem \"novo calculo (1-sim 2-nao)\" e esta mensagem deve ser apresentada novamente se o valor da entrada padrão para X for menor do que 1 ou maior do que 2, conforme o exemplo abaixo. A média deve ser impressa com dois dígitos após o ponto decimal.",
        "entrada": "O arquivo de entrada contém vários valores reais, positivos ou negativos. Quando forem lidas duas notas válidas, deve ser lido um valor inteiro X . O programa deve parar quando o valor lido para este X for igual a 2.",
        "titulo": "Várias Notas Com Validação",
        "descricao": "Escreva um programa para ler as notas da primeira e a segunda avaliação de um aluno. Calcule e imprima a média semestral. O programa só deverá aceitar notas válidas (uma nota válida deve pertencer ao intervalo [0,10]). Cada nota deve ser validada separadamente. No final deve ser impressa a mensagem “novo calculo (1-sim 2-nao)”, solicitando ao usuário que informe um código (1 ou 2) indicando se ele deseja ou não executar o algoritmo novamente, (aceitar apenas os código 1 ou 2). Se for informado o código 1 deve ser repetida a execução de todo o programa para permitir um novo cálculo, caso contrário o programa deve ser encerrado."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1050",
        "saida": "Imprima o nome da cidade correspondente ao DDD existente na entrada. Imprima DDD nao cadastrado caso não existir DDD correspondente ao número digitado.",
        "entrada": "A entrada consiste de um único valor inteiro.",
        "titulo": "DDD",
        "descricao": "Leia um número inteiro que representa um código de DDD para discagem interurbana. Em seguida, informe à qual cidade o DDD pertence, considerando a tabela abaixo: Se a entrada for qualquer outro DDD que não esteja presente na tabela acima, o programa deverá informar: DDD nao cadastrado"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1061",
        "saida": "Na saída, deve ser apresentada a duração do evento, no seguinte formato: W dia(s) X hora(s) Y minuto(s) Z segundo(s) Obs: Considere que o evento do caso de teste para o problema tem duração mínima de 1 minuto.",
        "entrada": "Como entrada, na primeira linha vai haver a descrição “Dia”, seguido de um espaço e o dia do mês no qual o evento vai começar. Na linha seguinte, será informado o momento no qual o evento vai iniciar, no formato hh : mm : ss. Na terceira e quarta linha de entrada haverá outra informação no mesmo formato das duas primeiras linhas, indicando o término do evento.",
        "titulo": "Tempo de um Evento",
        "descricao": "Pedrinho está organizando um evento em sua Universidade. O evento deverá ser no mês de Abril, iniciando e terminando dentro do mês. O problema é que Pedrinho quer calcular o tempo em segundos que o evento vai durar, uma vez que ele sabe quando inicia e quando termina o evento.. Sabendo que o evento pode durar de poucos segundos a vários dias, você deverá ajudar Pedrinho a calcular a duração deste evento."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1132",
        "saida": "Imprima a soma de todos os valores não divisíveis por 13 entre os dois valores lidos na entrada, inclusive ambos se for o caso.",
        "entrada": "O arquivo de entrada contém 2 valores inteiros quaisquer, não necessariamente em ordem crescente.",
        "titulo": "Múltiplos de 13",
        "descricao": "Escreva um algoritmo que leia 2 valores inteiros X e Y calcule a soma dos números que não são múltiplos de 13 entre X e Y, incluindo ambos."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1150",
        "saida": "Imprima uma linha com um número inteiro que representa a quantidade de números inteiros que devem ser somadas, de acordo com a especificação acima.",
        "entrada": "A entrada contém somente valores inteiros, um por linha, podendo ser positivos ou negativos. O primeiro valor da entrada será o valor de X. A próxima linha da entrada irá conter Z. Se Z não atender a especificação do problema, ele deverá ser lido novamente, tantas vezes quantas forem necessárias.",
        "titulo": "Ultrapassando Z",
        "descricao": "Faça um programa que leia dois inteiros: X e Z (devem ser lidos tantos valores para Z quantos necessários, até que seja digitado um valor maior do que X para ele). Conte quantos números inteiros devem ser somados em sequência (considerando o X nesta soma) para que a soma ultrapasse a Z o mínimo possível. Escreva o valor final da contagem. A entrada pode conter, por exemplo, os valores 21 21 15 30. Neste caso, é então assumido o valor 21 para X enquanto os valores 21 e 15 devem ser desconsiderados pois são menores ou iguais a X. Como o valor 30 está dentro da especificação (maior do que X) ele será válido e então deve-se processar os cálculos para apresentar na saída o valor 2, pois é a quantidade de valores somados para se produzir um valor maior do que 30 (21 + 22)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1961",
        "saida": "A saída é dada em uma única linha. Se o sapo pode chegar no cano mais à direita, escreva \"YOU WIN\". Se o sapo não consegue, escreva \"GAME OVER\".",
        "entrada": "A entrada é dada em duas linhas. A primeira tem dois inteiros positivos P e N, a altura do pulo do sapo e o número de canos (1 ≤ P ≤ 5 e 2 ≤ N ≤ 100). A segunda linha tem N inteiros positivos que indicam as alturas dos canos ordenados da esquerda para a direita. Não há altura maior do que 10.",
        "titulo": "Pula Sapo",
        "descricao": "Em cada fase do jogo do Pula Sapo você deve conduzir seu anfíbio através de uma sequência de canos de alturas diferentes até chegar a salvo no cano mais à direita. Entretanto, o sapo só consegue sobreviver se a diferença de altura entre canos consecutivos for de, no máximo, a altura do pulo do sapo. Caso a altura do cano seguinte seja muito alta, o sapo bate no cano e cai. Se a altura do cano seguinte for muito baixa, o sapo não aguenta a queda. O sapo sempre começa em cima do cano mais à esquerda. Neste jogo, a distância entre os canos é irrelevante, ou seja, o sapo sempre consegue alcançar o próximo cano com um pulo. Você deve escrever um programa que, dadas as alturas dos canos e a altura do pulo do sapo, mostra se a fase do jogo pode ser vencida ou não."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2006",
        "saida": "A saída contém um inteiro representando o número de concorrentes que obtiveram a resposta correta.",
        "entrada": "A primeira linha contém um inteiro T representando o tipo de chá (1 ≤ T ≤ 4). A segunda linha contém cinco inteiros A, B, C, D e E, que indica a resposta dada por cada competidor (1 ≤ A, B, C, D, E ≤ 4).",
        "titulo": "Identificando o Chá",
        "descricao": "Degustação de chá às escuras é a habilidade de identificar um chá usando apenas seus sentidos do olfato e paladar. Isto faz parte da Competição Ideal de Consumidores de Chá Puro (da sigla em inglês ICPC), que um programa de TV local está organizado. Durante o show, um bule de chá completo é preparado e são entregues uma xícara de chá para cada um dos cinco competidores. Os participantes devem cheirar, saborear e avaliar a amostra, de modo a identificar o tipo de chá, que pode ser: (1) o chá branco; (2) chá verde; (3) chá preto; ou (4) chá de ervas. No final, as respostas são verificadas para determinar o número de suposições corretas. Dado o tipo de chá real e as respostas fornecidas, determinar o número de participantes que receberam a resposta correta."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1021",
        "saida": "Imprima a quantidade mínima de notas e moedas necessárias para trocar o valor inicial, conforme exemplo fornecido.",
        "entrada": "O arquivo de entrada contém um valor de ponto flutuante N (0 ≤ N ≤ 1000000.00).",
        "titulo": "Notas e Moedas",
        "descricao": "Leia um valor de ponto flutuante com duas casas decimais. Este valor representa um valor monetário. A seguir, calcule o menor número de notas e moedas possíveis no qual o valor pode ser decomposto. As notas consideradas são de 100, 50, 20, 10, 5, 2. As moedas possíveis são de 1, 0.50, 0.25, 0.10, 0.05 e 0.01. A seguir mostre a relação de notas necessárias."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1060",
        "saida": "Imprima uma mensagem dizendo quantos valores positivos foram lidos.",
        "entrada": "Seis valores, negativos e/ou positivos.",
        "titulo": "Números Positivos",
        "descricao": "Faça um programa que leia 6 valores. Estes valores serão somente negativos ou positivos (desconsidere os valores nulos). A seguir, mostre a quantidade de valores positivos digitados."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1534",
        "saida": "Para cada N lido, apresente a saída conforme o exemplo fornecido.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto por um único inteiro N (3 ≤ N < 70), que determina o tamanho (linhas e colunas) de uma matriz que deve ser impressa.",
        "titulo": "Matriz 123",
        "descricao": "Leia um valor inteiro N que é o tamanho da matriz que deve ser impressa conforme o modelo fornecido."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1017",
        "saida": "Imprima a quantidade de litros necessária para realizar a viagem, com três dígitos após o ponto decimal",
        "entrada": "O arquivo de entrada contém dois inteiros. O primeiro é o tempo gasto na viagem (em horas) e o segundo é a velocidade média durante a mesma (em km/h).",
        "titulo": "Gasto de Combustível",
        "descricao": "Joaozinho quer calcular e mostrar a quantidade de litros de combustível gastos em uma viagem, ao utilizar um automóvel que faz 12 KM/L. Para isso, ele gostaria que você o auxiliasse através de um simples programa. Para efetuar o cálculo, deve-se fornecer o tempo gasto na viagem (em horas) e a velocidade média durante a mesma (em km/h). Assim, pode-se obter distância percorrida e, em seguida, calcular quantos litros seriam necessários. Mostre o valor com 3 casas decimais após o ponto."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1184",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um único caractere Maiúsculo O ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.",
        "titulo": "Abaixo da Diagonal Principal",
        "descricao": "Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média considerando somente aqueles elementos que estão abaixo da diagonal principal da matriz, conforme ilustrado abaixo (área verde)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1929",
        "saida": "Seu programa deve produzir apenas uma linha contendo apenas um caractere, que deve ser ‘S’ caso seja possível formar o triângulo, ou ‘N’ caso não seja possível formar o triângulo.",
        "entrada": "A entrada é composta por apenas uma linha contendo quatro números inteiros A, B, C e D (1 ≤ A, B, C, D ≤ 100).",
        "titulo": "Triângulo",
        "descricao": "Ana e suas amigas estão fazendo um trabalho de geometria para o colégio, em que precisam formar vários triângulos, numa cartolina, com algumas varetas de comprimentos diferentes. Logo elas perceberam que não dá para formar triângulos com três varetas de comprimentos quaisquer: se uma das varetas for muito grande em relação às outras duas, não dá para formar o triângulo. Neste problema, você precisa ajudar Ana e suas amigas a determinar se, dados os comprimentos de quatro varetas, é ou não é possível selecionar três varetas, dentre as quatro, e formar um triângulo."
    },
    {
        "nivel": "2",
        "assunto": "1",
        "numero": "1855",
        "saida": "A saída deve consistir de uma única linha com um único caracter ! ou *. ! significa que o mapa é inválido. * significa que o mapa é válido.",
        "entrada": "Na primeira linha, está um inteiro positivo x < 100 que simboliza a largura do mapa. Na segunda linha, está um inteiro positivo y < 100 que simboliza a altura do mapa. As linhas seguintes contêm diversos caracteres respeitando as dimensões do mapa. Os caracteres válidos são: Uma flecha para a direita: > Uma flecha para a esquerda: < Uma flecha para baixo: v Uma flecha para cima: ^ Um espaco de terreno atravessável: . Um baú: *",
        "titulo": "Mapa do Meistre",
        "descricao": "Sam encontrou um conjunto de mapas do velho Meistre Aemon, que a princípio, deviam mostrar, cada um, a localização de um baú com obsidiana. Entretanto, ao analizar alguns mapas possuíam erros óbvios, e outros só mandando uma equipe para explorar para saber. É certo que alguns mapas apontam para uma localização absurda fora do mapa e alguns terminam em círculos, tornando estes mapas completamente inúteis. Como são muitos mapas, os irmãos da patrulha da noite são poucos e o inverno está chegando, o seu trabalho é fazer um programa para verificar se um mapa leva ou não a um ponto com um baú de obsidiana. Os mapas tem as seguintes características: O ponto de partida de todos os mapas é o canto superior esquerdo. São retangulares e em cada ponto apresenta um destes símbolos: Um espaco de terreno atravessável. Uma flecha, representando uma possível troca de direção; Um baú. Como os lugares que estes mapas descrevem são cheios de perigos, é vital que se siga o caminho descrito no mapa."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1018",
        "saida": "Imprima o valor lido e, em seguida, a quantidade mínima de notas de cada tipo necessárias, conforme o exemplo fornecido. Não esqueça de imprimir o fim de linha após cada linha, caso contrário seu programa apresentará a mensagem: “Presentation Error”.",
        "entrada": "O arquivo de entrada contém um valor inteiro N (0 < N < 1000000).",
        "titulo": "Cédulas",
        "descricao": "Leia um valor inteiro. A seguir, calcule o menor número de notas possíveis (cédulas) no qual o valor pode ser decomposto. As notas consideradas são de 100, 50, 20, 10, 5, 2 e 1. A seguir mostre o valor lido e a relação de notas necessárias."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1067",
        "saida": "Imprima todos os valores ímpares de 1 até X, inclusive X, se for o caso.",
        "entrada": "O arquivo de entrada contém 1 valor inteiro qualquer.",
        "titulo": "Números Ímpares",
        "descricao": "Leia um valor inteiro X (1 <= X <= 1000). Em seguida mostre os ímpares de 1 até X, um valor por linha, inclusive o X, se for o caso."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1837",
        "saida": "Imprima o quociente q seguido pelo resto r da divisão de a por b.",
        "entrada": "A entrada é composta por dois números inteiros a e b (-1.000 ≤ a, b < 1.000).",
        "titulo": "Prefácio",
        "descricao": "Começou a 4ạ Maratona de Programação da UFFS! Esperamos que você aproveite as próximas horas que passará conosco e que se divirta muito! Boa sorte! Este é o 3ọ ano do Clube de Programação, projeto de extensão que visa em primeiro lugar tornar os programadores da região brasileira conhecida como Fronteira Sul muito mais aptos a enfrentar os desafios computacionais tanto da academia quanto do mercado do trabalho. Nossa principal estratégia está em promover oficinas e treinos para competições de Programação, não apenas para estudantes da UFFS, mas para quem quiser participar. Apesar das várias dificuldades, estamos muito felizes com os resultados que temos conquistado. Em parceria com a UNOCHAPECÓ, a URI e a UNOESC, colaboramos para fazer de Chapecó nos dois últimos anos a 2ª maior sede do Brasil na etapa regional da Maratona de Programação, o que é mais um indicador do entusiasmo que o povo daqui tem por Programação. Para aquecer você para esta competição, vamos pedir que você desenvolva um programa que calcule o quociente e o resto da divisão de dois números inteiros, pode ser? Lembre que o quociente e o resto da divisão de um inteiro a por um inteiro não-nulo b são respectivamente os únicos inteiros q e r tais que 0 ≤ r < |b| e: a = b × q + r Caso você não saiba, o teorema que garante a existência e a unicidade dos inteiros q e r é conhecido como ‘Teorema da Divisão Euclidiana’ ou ‘Algoritmo da Divisão’."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1066",
        "saida": "Imprima a mensagem conforme o exemplo fornecido, uma mensagem por linha, não esquecendo o final de linha após cada uma.",
        "entrada": "O arquivo de entrada contém 5 valores inteiros quaisquer.",
        "titulo": "Pares, Ímpares, Positivos e Negativos",
        "descricao": "Leia 5 valores Inteiros. A seguir mostre quantos valores digitados foram pares, quantos valores digitados foram ímpares, quantos valores digitados foram positivos e quantos valores digitados foram negativos."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2028",
        "saida": "A saida é no formato Caso X: N numeros onde X é a ordem do número de casos e N é a quantidade de numeros que contém na sequência completa, na próxima linha a sequência de números com um espaço entre eles. É pedido que deixe uma linha em branco após cada caso.",
        "entrada": "A entrada é composta de vários casos de testes. Cada caso é composto por um inteiro N (0<=N<=200) que indica o valor dos últimos N números da sequência. A entrada termina com final de arquivo (EOF).",
        "titulo": "Sequência de Sequência",
        "descricao": "Hyam é um menino que adora sequências. Ele anda descobrindo sequências interessantes que nem mesmo Fibonacci imaginaria. Certo dia, Hyam percebeu que dado um número N, ele poderia fazer uma sequência do tipo 0 1 2 2 3 3 3 4 4 4 4 ... N N N ... N. No entanto, Hyam percebeu que cada valor que aumentava no número da sequência, a quantidade total de números da sequência aumentava semelhantemente à um crescimento fatorial, neste caso, ao invés de multiplicar, soma-se o número total de números da sequência com o valor do próximo número da sequência. Por exemplo, se N = 2. A sequência correta seria 0 1 2 2, obtendo-se 4 digitos. Agora, se N = 3, o próximo número da sequência tem valor 3, então a quantidade total de número da sequência seria a quantidade de números com N = 2, que é 4, mais o valor do próximo número da sequência, neste caso 3, obtendo-se 7, já que a sequência correta para N = 3 é 0 1 2 2 3 3 3. Sua tarefa é fazer um algoritmo que dado um número inteiro N, tenha como resposta a quantidade total de números dessa sequência e logo abaixo a sequência completa."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1187",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um único caractere Maiúsculo O ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem 144 valores com ponto flutuante de dupla precisão que compõem a matriz.",
        "titulo": "Área Superior",
        "descricao": "Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média considerando somente aqueles elementos que estão na área superior da matriz, conforme ilustrado abaixo (área verde)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1059",
        "saida": "Imprima todos os números pares entre 1 e 100, inclusive se for o caso, um em cada linha.",
        "entrada": "Neste problema extremamente simples de repetição não há entrada.",
        "titulo": "Números Pares",
        "descricao": "Faça um programa que mostre os números pares entre 1 e 100, inclusive."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1045",
        "saida": "Imprima todas as classificações do triângulo especificado na entrada.",
        "entrada": "A entrada contem três valores de ponto flutuante de dupla precisão A (0 < A) , B (0 < B) e C (0 < C).",
        "titulo": "Tipos de Triângulos",
        "descricao": "Leia 3 valores de ponto flutuante A, B e C e ordene-os em ordem decrescente, de modo que o lado A representa o maior dos 3 lados. A seguir, determine o tipo de triângulo que estes três lados formam, com base nos seguintes casos, sempre escrevendo uma mensagem adequada: se A ≥ B+C, apresente a mensagem: NAO FORMA TRIANGULO se A2 = B2 + C2, apresente a mensagem: TRIANGULO RETANGULO se A2 > B2 + C2, apresente a mensagem: TRIANGULO OBTUSANGULO se A2 < B2 + C2, apresente a mensagem: TRIANGULO ACUTANGULO se os três lados forem iguais, apresente a mensagem: TRIANGULO EQUILATERO se apenas dois dos lados forem iguais, apresente a mensagem: TRIANGULO ISOSCELES"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1478",
        "saida": "Para cada inteiro da entrada imprima a matriz correspondente, de acordo com o exemplo. (os valores das matrizes devem ser formatados em um campo de tamanho 3 justificados à direita e separados por espaço. Após o último caractere de cada linha da matriz não deve haver espaços em branco. Após a impressão de cada matriz deve ser deixada uma linha em branco.",
        "entrada": "A entrada consiste de vários inteiros, um valor por linha, correspondentes as ordens das matrizes a serem construídas. O final da entrada é marcado por um valor de ordem igual a zero (0).",
        "titulo": "Matriz Quadrada II",
        "descricao": "Escreva um algoritmo que leia um inteiro N (0 ≤ N ≤ 100), correspondente a ordem de uma matriz M de inteiros, e construa a matriz de acordo com o exemplo abaixo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1962",
        "saida": "A saída tem N linhas. Em cada uma, deve ser indicado o ano A em que o correspondente tempo T aconteceu. Veja o exemplo de saída.",
        "entrada": "A entrada tem várias linhas. A primeira tem um inteiro positivo N (1 ≤ N ≤ 100000). A seguir existem N linhas. Cada uma dessas N linhas tem um único inteiro não negativo T, que indica o número de anos transcorridos até 2015 D.C. (0 ≤ T < 231).",
        "titulo": "Há Muito, Muito Tempo Atrás",
        "descricao": "Raul Seixas cantava que nasceu há 10 mil anos atrás e não tinha nada nesse mundo que ele não sabia demais. Os Mamomas Assassinas cantavam que mais de 10 mil anos \"se passaram-se\" [sic] quando eles repetiram a 5a série. Tantos eventos passados e o professor MC ficou curioso para saber em que ano tudo isso aconteceu. Você deve escrever um programa que, dada uma série de número de anos transcorridos, mostre, para cada número, em que ano o evento aconteceu. Lembre-se de indicar se ele aconteceu A.C. (Antes de Cristo) ou D.C. (Depois de Cristo)."
    },
    {
        "nivel": "2",
        "assunto": "1",
        "numero": "1160",
        "saida": "Imprima, para cada caso de teste, quantos anos levará para que a cidade A ultrapasse a cidade B em número de habitantes. Obs.: se o tempo for mais do que 100 anos o programa deve apresentar a mensagem: Mais de 1 seculo. Neste caso, acredito que seja melhor interromper o programa imediatamente após passar de 100 anos, caso contrário você poderá receber como resposta da submissão deste problema \"Time Limit Exceeded\".",
        "entrada": "A primeira linha da entrada contém um único inteiro T, indicando o número de casos de teste (1 ≤ T ≤ 3000). Cada caso de teste contém 4 números: dois inteiros PA e PB (100 ≤ PA ≤ 1000000, PA < PB ≤ 1000000) indicando respectivamente a população de A e B, e dois valores G1 e G2 (0.1 ≤ G1 ≤ 10.0, 0.0 ≤ G2 ≤ 10.0, G2 < G1) com um digito após o ponto decimal cada, indicando respectivamente o crescimento populacional de A e B (em percentual). Atenção: A população é sempre um valor inteiro, portanto, um crescimento de 2.5 % sobre uma população de 100 pessoas resultará em 102 pessoas, e não 102.5 pessoas, enquanto um crescimento de 2.5% sobre uma população de 1000 pessoas resultará em 1025 pessoas. Além disso, não utilize variáveis de precisão simples para as taxas de crescimento.",
        "titulo": "Crescimento Populacional",
        "descricao": "Mariazinha quer resolver um problema interessante. Dadas as informações de população e a taxa de crescimento de duas cidades quaisquer (A e B), ela gostaria de saber quantos anos levará para que a cidade menor (sempre é a cidade A) ultrapasse a cidade B em população. Claro que ela quer saber apenas para as cidades cuja taxa de crescimento da cidade A é maior do que a taxa de crescimento da cidade B, portanto, previamente já separou para você apenas os casos de teste que tem a taxa de crescimento maior para a cidade A. Sua tarefa é construir um programa que apresente o tempo em anos para cada caso de teste. Porém, em alguns casos o tempo pode ser muito grande, e Mariazinha não se interessa em saber exatamente o tempo para estes casos. Basta que você informe, nesta situação, a mensagem \"Mais de 1 seculo.\"."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1064",
        "saida": "O primeiro valor de saída é a quantidade de valores positivos. A próxima linha deve mostrar a média dos valores positivos digitados.",
        "entrada": "A entrada contém 6 números que podem ser valores inteiros ou de ponto flutuante. Pelo menos um destes número será positivo.",
        "titulo": "Positivos e Média",
        "descricao": "Leia 6 valores. Em seguida, mostre quantos destes valores digitados foram positivos. Na próxima linha, deve-se mostrar a média de todos os valores positivos digitados, com um dígito após o ponto decimal."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2003",
        "saida": "Para cada caso de teste, imprima \"Atraso maximo: X\" (sem aspas), X indica o atraso maximo (em minutos) de Bino no encontro com Cino.",
        "entrada": "A entrada consiste em múltiplos casos teste. Cada caso de tese contém uma única linha contendo um horário H (5:00 ≤ H ≤ 9:00) que Bino acordou. A entrada termina com final de arquivo (EOF).",
        "titulo": "Domingo de Manhã",
        "descricao": "Domingo é dia de feira. Logo de manhã muitas pessoas se deslocam para o polo de lazer da Parangaba, onde acontece uma feira, conhecida por ser a maior da cidade. Na feira da Parangaba você pode encontrar de tudo. Todos os domingos, Bino faz compras na feira. Ele sempre marca com seu amigo Cino de se encontrarem no terminal de ônibus da Parangaba às 8h, para irem juntos comprar na feira. Porém, muitas vezes Bino acorda muito tarde e se atrasa para o encontro com seu amigo. Sabendo que Bino leva de 30 a 60 minutos para chegar ao terminal. Diga o atraso máximo de Bino."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1178",
        "saida": "Para cada posição do vetor N, escreva \"N[i] = Y\", onde i é a posição do vetor e Y é o valor armazenado naquela posição. Cada valor do vetor deve ser apresentado com 4 casas decimais.",
        "entrada": "A entrada contem um valor de dupla precisão com 4 casas decimais.",
        "titulo": "Preenchimento de Vetor III",
        "descricao": "Leia um valor X. Coloque este valor na primeira posição de um vetor N[100]. Em cada posição subsequente de N (1 até 99), coloque a metade do valor armazenado na posição anterior, conforme o exemplo abaixo. Imprima o vetor N."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2140",
        "saida": "Seu programa deverá imprimir \"possible\" se for possível devolver o troco exato ou \"impossible\" se não for possível.",
        "entrada": "A entrada deve conter o valor inteiro N da compra realizada pelo cliente e, em seguida, o valor inteiro M pago pelo cliente (N < M ≤ 104). A entrada termina com N = M = 0.",
        "titulo": "Duas Notas",
        "descricao": "Gilberto é um famoso vendedor de esfirras na região. Porém, apesar de todos gostarem de suas esfirras, ele só sabe dar o troco com duas notas, ou seja, nem sempre é possível receber o troco certo. Para facilitar a vida de Gil, escreva um programa para ele que determine se é possível ou não devolver o troco exato utilizando duas notas. As notas disponíveis são: 2, 5, 10, 20, 50 e 100."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1010",
        "saida": "A saída deverá ser uma mensagem conforme o exemplo fornecido abaixo, lembrando de deixar um espaço após os dois pontos e um espaço após o $. O valor deverá ser apresentado com 2 casas após o ponto.",
        "entrada": "O arquivo de entrada contém duas linhas de dados. Em cada linha haverá 3 valores, respectivamente dois inteiros e um valor com 2 casas decimais.",
        "titulo": "Cálculo Simples",
        "descricao": "Neste problema, deve-se ler o código de uma peça 1, o número de peças 1, o valor unitário de cada peça 1, o código de uma peça 2, o número de peças 2 e o valor unitário de cada peça 2. Após, calcule e mostre o valor a ser pago."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1080",
        "saida": "Apresente o maior valor lido e a posição de entrada, conforme exemplo abaixo.",
        "entrada": "O arquivo de entrada contém 100 números inteiros, positivos e distintos.",
        "titulo": "Maior e Posição",
        "descricao": "Leia 100 valores inteiros. Apresente então o maior valor lido e a posição dentre os 100 valores lidos."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1094",
        "saida": "Apresente o total de cobaias utilizadas, o total de cada tipo de cobaia utilizada e o percentual de cada uma em relação ao total de cobaias utilizadas, sendo que o percentual deve ser apresentado com dois dígitos após o ponto.",
        "entrada": "A primeira linha de entrada contém um valor inteiro N que indica os vários casos de teste que vem a seguir. Cada caso de teste contém um inteiro Quantia (1 ≤ Quantia ≤ 15) que representa a quantidade de cobaias utilizadas e um caractere Tipo ('C', 'R' ou 'S'), indicando o tipo de cobaia (R:Rato S:Sapo C:Coelho).",
        "titulo": "Experiências",
        "descricao": "Maria acabou de iniciar seu curso de graduação na faculdade de medicina e precisa de sua ajuda para organizar os experimentos de um laboratório o qual ela é responsável. Ela quer saber no final do ano, quantas cobaias foram utilizadas no laboratório e o percentual de cada tipo de cobaia utilizada. Este laboratório em especial utiliza três tipos de cobaias: sapos, ratos e coelhos. Para obter estas informações, ela sabe exatamente o número de experimentos que foram realizados, o tipo de cobaia utilizada e a quantidade de cobaias utilizadas em cada experimento."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1914",
        "saida": "Para cada caso de teste, imprima uma única linha contendo o nome do jogador vencedor.",
        "entrada": "A primeira linha de entrada contém um número inteiro QT (1 ≤ QT ≤ 100), indicando a quantidade de casos de teste que vem a seguir. Cada caso de teste contém duas linhas. Na primeira linha será informado o nome do jogador 1 seguido de sua escolha, “PAR” ou “IMPAR” e logo após, o nome do jogador 2 seguido de sua escolha, “PAR” ou “IMPAR”. Na segunda linha de entrada, contém 2 números inteiros N (1 ≤ N ≤ 10⁹) e M (1 ≤ M ≤ 10⁹), representando respectivamente os números escolhidos pelo jogador 1 e pelo jogador 2. É garantido que a escolha (PAR ou IMPAR) do jogador 1 será diferente da escolha (PAR ou IMPAR) do jogador 2 e que o nome dos jogares são formados somente por letras e não ultrapassarão 100 caracteres.",
        "titulo": "De Quem é a Vez?",
        "descricao": "Amarelinha provavelmente é a brincadeira em que as crianças da vila mais se divertem, porém a mesma vem causando um bom tempo de discussão e choro nas crianças que a praticam. A causa do transtorno é para decidir quem será o próximo a pular, mas recentemente Quico (O gênio!) teve uma grande ideia para solucionar o problema. Basicamente a brincadeira só poderá ser jogada de dois em dois jogadores e para escolher o próximo jogador Quico indicou o uso do tradicional método par ou ímpar, onde os dois jogadores informam um número e se a soma desses números for par o jogador que escolheu PAR ganha ou vice verso. Entretanto a utilização desse método vem deixando o Quico louco, louco, louco... E por esse motivo ele pediu a sua ajuda! Solicitou a você um programa que dado o nome dos jogadores, suas respectivas escolhas PAR ou IMPAR e os números, informe quem foi o vencedor."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1188",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um único caractere Maiúsculo O ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante de dupla precisão (double) que compõem a matriz.",
        "titulo": "Área Inferior",
        "descricao": "Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média considerando somente aqueles elementos que estão na área inferior da matriz, conforme ilustrado abaixo (área verde)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1557",
        "saida": "Para cada inteiro da entrada imprima a matriz correspondente, de acordo com o exemplo. Os valores das matrizes devem ser formatados em um campo de tamanho T justificados à direita e separados por espaço, onde T é igual ao número de dígitos do maior número da matriz. Após o último caractere de cada linha da matriz não deve haver espaços em branco. Após a impressão de cada matriz deve ser deixada uma linha em branco.",
        "entrada": "A entrada consiste de vários inteiros, um valor por linha, correspondentes as ordens das matrizes a serem construídas. O final da entrada é marcado por um valor de ordem igual a zero (0).",
        "titulo": "Matriz Quadrada III",
        "descricao": "Escreva um algoritmo que leia um inteiro N (0 ≤ N ≤ 15), correspondente a ordem de uma matriz M de inteiros, e construa a matriz de acordo com o exemplo abaixo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1156",
        "saida": "A saída contém um valor correspondente ao valor de S. O valor deve ser impresso com dois dígitos após o ponto decimal.",
        "entrada": "Não há nenhuma entrada neste problema.",
        "titulo": "Sequência S II",
        "descricao": "Escreva um algoritmo para calcular e escrever o valor de S, sendo S dado pela fórmula: S = 1 + 3/2 + 5/4 + 7/8 + ... + 39/?"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1114",
        "saida": "Para cada valor lido mostre a mensagem correspondente à descrição do problema.",
        "entrada": "A entrada é composta por vários casos de testes contendo valores inteiros.",
        "titulo": "Senha Fixa",
        "descricao": "Escreva um programa que repita a leitura de uma senha até que ela seja válida. Para cada leitura de senha incorreta informada, escrever a mensagem \"Senha Invalida\". Quando a senha for informada corretamente deve ser impressa a mensagem \"Acesso Permitido\" e o algoritmo encerrado. Considere que a senha correta é o valor 2002."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1020",
        "saida": "Imprima a saída conforme exemplo fornecido.",
        "entrada": "O arquivo de entrada contém um valor inteiro.",
        "titulo": "Idade em Dias",
        "descricao": "Leia um valor inteiro correspondente à idade de uma pessoa em dias e informe-a em anos, meses e dias Obs.: apenas para facilitar o cálculo, considere todo ano com 365 dias e todo mês com 30 dias. Nos casos de teste nunca haverá uma situação que permite 12 meses e alguns dias, como 360, 363 ou 364. Este é apenas um exercício com objetivo de testar raciocínio matemático simples."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1983",
        "saida": "Você deve imprimir o número do estudante que obteve a maior pontuação ou \"Minimum note not reached\" (sem aspas) caso nenhum estudante tenha tirado uma nota maior ou igual a 8.",
        "entrada": "O arquivo contém primeiro a quantidade de alunos (3 <= n <= 100) existentes e em seguida, os n alunos contendo o número da matrícula (0 < m < 1000000) de cada um, seguido da respectiva nota (0 <= nota <= 10.0, com 1 casa decimal). Obs.: as notas não serão repetidas. Ou seja, não tem chance de ter dois alunos com a mesma nota.",
        "titulo": "O Escolhido",
        "descricao": "As aulas do Prof. Jatobá estão dando o que falar. Os representantes do MEC vieram até a UNIME de Lauro de Freitas para saber mais detalhes sobre essa nova forma de ensinar Algoritmos. Além disso, eles queriam selecionar 1 aluno para participar da OBI-Tec (Olimpíada Brasileira de Informática Nível Técnica) e representar a rede Kroton na competição, pois sabem que lá estão os melhores. Para selecionar o melhor, eles tem disponível uma lista com o número de inscrição de cada aluno e a sua respectiva nota na disciplina. Sua tarefa é ajudar o pessoal do MEC a encontrar o aluno mais apto a representar a instituição e quem sabe garantir sua vaga. Só tem um detalhe, se a nota mais alta não for maior ou igual a 8, você deverá imprimir “Minimum note not reached”."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1866",
        "saida": "Para cada caso de teste imprima um número S, que é o resultado da soma dos N termos da expressão.",
        "entrada": "Um número inteiro C será informado, que será a quantidade de casos de teste. Cada caso de teste inicia com um número inteiro N (1 ≤ N ≤ 1000), indicando a quantidade de termos da soma.",
        "titulo": "Conta",
        "descricao": "Dois amigos pedem ao atendente de uma lanchonete propor um desafio, de modo que quem acertasse mais, não precisaria pagar a conta. Então foi proposto o seguinte: Dado o seguinte somatório abaixo, informar o resultado, com uma quantidade de termos no mesmo: S = 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 ... Escreva um programa que, dada uma quantidade de termos, informar o resultado do somatório acima."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1012",
        "saida": "O arquivo de saída deverá conter 5 linhas de dados. Cada linha corresponde a uma das áreas descritas acima, sempre com mensagem correspondente e um espaço entre os dois pontos e o valor. O valor calculado deve ser apresentado com 3 dígitos após o ponto decimal.",
        "entrada": "O arquivo de entrada contém três valores com um dígito após o ponto decimal.",
        "titulo": "Área",
        "descricao": "Escreva um programa que leia três valores com ponto flutuante de dupla precisão: A, B e C. Em seguida, calcule e mostre: a) a área do triângulo retângulo que tem A por base e C por altura. b) a área do círculo de raio C. (pi = 3.14159) c) a área do trapézio que tem A e B por bases e C por altura. d) a área do quadrado que tem lado B. e) a área do retângulo que tem lados A e B."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1095",
        "saida": "Imprima a sequencia conforme exemplo abaixo",
        "entrada": "Não há nenhuma entrada neste problema.",
        "titulo": "Sequencia IJ 1",
        "descricao": "Você deve fazer um programa que apresente a sequencia conforme o exemplo abaixo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1189",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um único caractere Maiúsculo O ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.",
        "titulo": "Área Esquerda",
        "descricao": "Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média considerando somente aqueles elementos que estão na área esquerda da matriz, conforme ilustrado abaixo (área verde)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1042",
        "saida": "Imprima a saída conforme foi especificado.",
        "entrada": "A entrada contem três números inteiros.",
        "titulo": "Sort Simples",
        "descricao": "Leia 3 valores inteiros e ordene-os em ordem crescente. No final, mostre os valores em ordem crescente, uma linha em branco e em seguida, os valores na sequência como foram lidos."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1183",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um único caractere Maiúsculo O ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.",
        "titulo": "Acima da Diagonal Principal",
        "descricao": "Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média considerando somente aqueles elementos que estão acima da diagonal principal da matriz, conforme ilustrado abaixo (área verde)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1180",
        "saida": "A primeira linha apresenta a mensagem “Menor valor:” seguida de um espaço e do menor valor lido na entrada. A segunda linha apresenta a mensagem “Posicao:” seguido de um espaço e da posição do vetor na qual se encontra o menor valor lido, lembrando que o vetor inicia na posição zero.",
        "entrada": "A primeira linha de entrada contem um único inteiro N (1 < N < 1000), indicando o número de elementos que deverão ser lidos em seguida para o vetor X[N] de inteiros. A segunda linha contém cada um dos N valores, separados por um espaço.",
        "titulo": "Menor e Posição",
        "descricao": "Faça um programa que leia um valor N. Este N será o tamanho de um vetor X[N]. A seguir, leia cada um dos valores de X, encontre o menor elemento deste vetor e a sua posição dentro do vetor, mostrando esta informação."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1924",
        "saida": "Imprima o nome do curso que Vitória deve fazer, sem acentuação.",
        "entrada": "A primeira linha de entrada contém um inteiro 1 ≤ n ≤ 2000, que representa a quantidade de cursos a serem considerados. Cada uma das próximas n linhas irá conter uma cadeia de caracteres S, 1 ≤ |S| ≤ 100, representando o nome do curso.",
        "titulo": "Vitória e a Indecisão",
        "descricao": "Está para nascer alguém mais indeciso do que Vitória. Apesar dela saber que é uma ótima programadora, daquelas que possui projetos na área de TI publicados e diversos outros em andamento, ela não tem certeza se vai seguir na área. Há noites que ela diz que não quer Computação, há dias que ela diz que quer alguma Engenharia, em outros ela quer qualquer outro curso, já chegou até a pensar em algum de Humanas, que pecado! Mas você está aqui pra ajudá-la. A sua tarefa é bem simples, será dado uma lista com diversos nomes de cursos de graduação e você terá que imprimir o nome do curso que Vitória deve fazer."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1036",
        "saida": "Se não houver possibilidade de calcular as raízes, apresente a mensagem \"Impossivel calcular\". Caso contrário, imprima o resultado das raízes com 5 dígitos após o ponto, com uma mensagem correspondente conforme exemplo abaixo. Imprima sempre o final de linha após cada mensagem.",
        "entrada": "Leia três valores de ponto flutuante (double) A, B e C.",
        "titulo": "Fórmula de Bhaskara",
        "descricao": "Leia 3 valores de ponto flutuante e efetue o cálculo das raízes da equação de Bhaskara. Se não for possível calcular as raízes, mostre a mensagem correspondente “Impossivel calcular”, caso haja uma divisão por 0 ou raiz de numero negativo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2159",
        "saida": "A saída são dois valores P e M com 1 casa decimal cada, tal que P < π(n) < M, de acordo com a fórmula dada acima. Os valores devem ser separados por um espaço em branco.",
        "entrada": "A entrada é um número natural n (17 ≤ n ≤ 109).",
        "titulo": "Número Aproximado de Primos",
        "descricao": "Schoenfeld e Rosser publicaram em 1962 um artigo descrevendo um valor mínimo e máximo para a quantidade de números primos até n, para n ≥ 17. Esta quantidade é representada pela função π(n) e a fórmula é mostrada abaixo. Sua tarefa é, dado um natural n, calcular o mínimo e máximo do intervalo para o número aproximado de primos até n."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2126",
        "saida": "Para cada caso de teste imprima a quantidade de subsequências contíguas e a posição onde a subsequência é iniciada, caso exista mais de uma subsequência, imprima onde é iniciada a última subsequência. Caso não exista subsequência, imprima \"Nao existe subsequencia\". Mostre o resultado conforme o exemplo de saída.",
        "entrada": "A entrada é composta por vários casos de teste e termina com final de arquivo (EOF). A primeira linha de cada entrada é composta por um valor natural N1(1 < N1 < 1010), a segunda linha é composta por um valor N2( N1 < N2 < 1032).",
        "titulo": "Procurando Subsequências",
        "descricao": "Dados dois números naturais N1 e N2, diz-se que N1 é subsequência contígua de N2 se todos os dígitos de N1 aparecem, na mesma ordem e de forma contígua, em N2. Crie uma aplicação que leia dois números naturais e diga se o primeiro é uma subsequência contígua do segundo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2059",
        "saida": "Imprima \"Jogador 1 ganha!\" se o jogador 1 ganhou ou \"Jogador 2 ganha!\" se o jogador 2 ganhou (sem as aspas).",
        "entrada": "A entrada consite de uma única linha contendo 5 inteiros: p, j1, j2, r, a. ( 0 ≤ p, r, a ≤ 1 e 1 ≤ j1, j2 ≤ 100). p representa a escolha do jogador 1 (se p = 1 então o jogador 1 escolheu par, se p = 0 então o jogador 1 escolheu ímpar). Os valores j1, j2, representam respectivamente o número escolhido pelo jogador 1 e pelo jogador 2. r representa se o jogador 1 roubou (se r = 1 então o jogador 1 roubou, se r = 0 então o jogador 1 não roubou), a representa se o jogador 2 acusou o roubo (se a = 1 então o jogador 2 acusou o jogador 1 de roubo, se a = 0 então ele não acusou o jogador 1 de roubo).",
        "titulo": "Ímpar, Par ou Roubo",
        "descricao": "Um novo jogo chamado Ímpar, Par ou Roubo (IPR) está se tornando muito popular. Esse jogo surgiu quando alguns amigos estavam sem conexão com a internet, sem celular, sem computador e bastante desocupados. O jogo está tão popular que irá acontecer um campeonato mundial de IPR e cada país do mundo irá escolher um representante para competir. O jogo funciona da seguinte forma: dois jogadores participam, o jogador 1 escolhe entre par ou ímpar, então cada jogador escolhe um inteiro positivo, se a soma desses números for par e o jogador 1 tiver escolhido par então o jogador 1 ganha, se a soma for ímpar o jogador 2 ganha. Caso o jogador 1 tivesse escolhido ímpar ele ganharia se a soma fosse ímpar, caso a soma fosse par o jogador 2 ganharia. Nada de diferente de um jogo de par ou ímpar convencional, correto? A diferença do jogo é que o jogador 1 pode roubar e assim assegurar sua vitória independentemente do resultado do jogo de ímpar ou par convencional, já o jogador 2 pode ou não acusar o jogador 1 de roubo. Com essas adições no jogo se o jogador 1 roubar e o jogador 2 acusar o roubo então o jogador 2 ganha, caso o jogador 2 não acuse o roubo e o jogador 1 roubar então o jogador 1 ganha, caso o jogador 2 acuse o roubo, mas o jogador 1 não tiver roubado então o jogador 1 ganha, se o jogador 1 não roubar e o jogador 2 não acusar o roubo o jogo segue como descrito anteriormente. Você foi contratado pela OIIPR (Organização Internacional de Ímpar, Par ou Roubo) para desenvolver um programa que dada a escolha do jogador 1 entre par ou ímpar, os números escolhidos como jogada e as ações dos jogadores (roubo/acusação) mostre quem foi o vencedor."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1046",
        "saida": "Apresente a duração do jogo conforme exemplo abaixo.",
        "entrada": "A entrada contém dois valores inteiros representando a hora de início e a hora de fim do jogo.",
        "titulo": "Tempo de Jogo",
        "descricao": "Leia a hora inicial e a hora final de um jogo. A seguir calcule a duração do jogo, sabendo que o mesmo pode começar em um dia e terminar em outro, tendo uma duração mínima de 1 hora e máxima de 24 horas."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1074",
        "saida": "Para cada caso, imprima uma mensagem correspondente, de acordo com o exemplo abaixo. Todas as letras deverão ser maiúsculas e sempre deverá haver um espaço entre duas palavras impressas na mesma linha.",
        "entrada": "A primeira linha da entrada contém um valor inteiro N(N < 10000) que indica o número de casos de teste. Cada caso de teste a seguir é um valor inteiro X (-107 < X <107).",
        "titulo": "Par ou Ímpar",
        "descricao": "Leia um valor inteiro N. Este valor será a quantidade de valores que serão lidos em seguida. Para cada valor lido, mostre uma mensagem em inglês dizendo se este valor lido é par (EVEN), ímpar (ODD), positivo (POSITIVE) ou negativo (NEGATIVE). No caso do valor ser igual a zero (0), embora a descrição correta seja (EVEN NULL), pois por definição zero é par, seu programa deverá imprimir apenas NULL."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2030",
        "saida": "Cada saída de um caso de teste deve conter a linha “Teste #i”, indicando o número do teste. Após isso uma nova linha deve ser impressa informando o menor tempo possível (soma do tempo de todas as voltas e dos atrasos de pit stops) para que um piloto possa completar a prova e o menor número de pit stops para que isto ocorra, separados por espaço. A cada caso de teste deve haver uma linha em branco.",
        "entrada": "A entrada consiste de uma linha contendo um número N (1 ≤ N ≤ 1000) indicando a quantidade de casos de teste. As N linhas seguintes representam os casos de teste. Cada caso de teste é composto por cinco inteiros: T1 o tempo de volta em milésimos de segundo com o pneu novo (1 ≤ T1 ≤ 106). T2, o tempo de volta em milésimos de segundo com o pneu desgastado (1 ≤ T1 ≤ T2 ≤ 106). A, o atraso em milésimos de segundo do pit stop (1 ≤ A ≤ 106). V, o número de voltas que um pneu novo pode dar até ficar desgastado (1 ≤ V ≤ 100). R, o número de voltas totais do GP de Formosa (1 ≤ R ≤ 100). Considere que os carros largam de pneus novos.",
        "titulo": "Pit Stop",
        "descricao": "“Grazie, grazie, bellissimo!” – dizia um engenheiro da Scuderia Ferrari após uma estratégia inusitada que os fez ganhar o GP de Formosa de 2016, famoso circuito de rua do calendário da Fórmula 1. Fórmula 1 é um esporte meio maluco. Às vezes, quando o pneu está muito desgastado, compensa fazer uma paradinha, denominada de pit stop, para colocar pneus novos e fazer voltas mais rápidas do que se estava fazendo antes. No entanto, nem sempre vale a pena trocar de pneu, dependendo da quantidade de voltas que faltam e do atraso de uma parada de pit stop. Cada pneu tem uma determinada autonomia de algumas voltas, depois ele volta a ficar desgastado e possivelmente uma nova troca será necessária para conseguir bons tempos. Será que você, como futuro engenheiro da Ferrari consegue calcular a melhor estratégia de pit stops?"
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1840",
        "saida": "Imprima uma linha contendo unicamente o nome do vencedor da partida. Se não é possível definir um único vencedor para a partida, imprima uma linha contendo unicamente o caractere asterisco (*).",
        "entrada": "A primeira linha da entrada informa o inteiro n (1 ≤ n ≤ 9), seguido da carta virada sobre a mesa no início da partida. Cada uma das 4 linhas seguintes informa o nome de um jogador, seguido de um inteiro m (0 ≤ m ≤ n), o qual representa o número de rodadas que o jogador declarou que faria no início da partida. A ordem em que são informados os jogadores é sempre a mesma ordem em que jogam em cada rodada. Seguem-se por fim n linhas, de modo que a i-ésima dessas linhas informa as 4 cartas que foram jogadas na i-ésima rodada, na ordem em que foram jogadas. Cada carta é informada no formato XY, com X ∈ {4, 5, 6, 7, Q, J, K, A, 2, 3}, Y ∈ {D, S, H, C}, e D, S, H e C correspondendo respectivamente aos naipes ♦, ♠, ♥, ♣. Considere que o nome de cada jogador é composto por no mínimo 1 e no máximo 10 caracteres do conjunto {a, b, …, z, A, B, …, Z}.",
        "titulo": "O Prisioneiro de Azkaban",
        "descricao": "Em 1950, quatro homens foram presos acusados de incendiarem a igreja de Chapecó. Se de fato eram os culpados ou não nunca se saberá, mas a fúria do povo é sempre mais rápida a julgar que os tribunais. Preocupado em preservar a integridade física dos prisioneiros, o delegado de polícia local quis transferi-los para Azkaban. “Eles estarão mais seguros nas mãos dos dementadores que nas mãos do povo de Chapecó”, declarou enquanto acertava com o Ministro da Magia os detalhes da transferência, programada para a manhã seguinte. Enquanto esperavam sem sono pela transferência que jamais aconteceria, os presos resolveram jogar Dane-se, um jogo muito popular no Brasil. Numa de suas muitas versões, as regras do jogo são: São usadas apenas 40 cartas de um baralho francês tradicional com 52 cartas, descartando-se todas as cartas com número 8, 9 ou 10. A ordem crescente básica de valor das figuras empregada no Dane-se é: 4 5 6 7 Q J K A 2 3 Um dos jogadores distribui a cada jogador n cartas. Depois, ainda vira uma carta sobre a mesa, a qual determina as manilhas do jogo, que são as cartas com figura imediatamente posterior à figura da carta virada na ordem básica. Por exemplo, se é virada uma carta com figura 7, são definidas como manilhas do jogo as cartas Q♦, Q♠, Q♥ e Q♣. Se é virada uma carta com figura 3, as manilhas são 4♦, 4♠, 4♥ e 4♣. As manilhas de uma partida valem mais que qualquer outra carta. Embora o naipe não interfira no valor de cartas que não são manilhas, entre manilhas a ordem crescente de valor dos naipes é: ♦  ♠  ♥  ♣ Uma vez definidas as manilhas da partida, cada jogador tem de dizer quantas das n rodadas ele acha que fará. Todos os jogadores devem declarar seus palpites antes mesmo de começarem as rodadas. Iniciam-se, então, as rodadas, em cada uma das quais cada jogador joga uma de suas cartas revelando-a sobre a mesa. Diz-se que um jogador faz uma rodada se a carta que ele joga naquela rodada é de maior valor que todas as outras cartas jogadas naquela rodada. Quando uma rodada não é feita por jogador algum, o que é possível dado que o desempate por naipe ocorre apenas entre as manilhas, diz-se que aquela rodada embuchou. Ao final do jogo, cada jogador ganha tantos pontos quanto for a diferença entre o número de rodadas que o jogador disse que faria e o número de rodadas que de fato fez. Vence o jogador com menos pontos."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2194",
        "saida": "For each test case, display its case number followed by a string containing one character for each hieroglyph recognized in the image, using the following code: Ankh: A Wedjat: J Djed: D Scarab: S Was: W Akhet: K In each output string, print the codes in alphabetic order. Follow the format of the sample output. The sample input contains descriptions of test cases shown in Figures C.2 and C.3. Due to space constraints not all of the sample input can be shown on this page.",
        "entrada": "The input consists of several test cases, each of which describes an image containing one or more hieroglyphs chosen from among those shown in Figure C.1. The image is given in the form of a series of horizontal scan lines consisting of black pixels (represented by 1) and white pixels (represented by 0). In the input data, each scan line is encoded in hexadecimal notation. For example, the sequence of eight pixels 10011100 (one black pixel, followed by two white pixels, and so on) would be represented in hexadecimal notation as 9c. Only digits and lowercase letters a through f are used in the hexadecimal encoding. The first line of each test case contains two integers, H and W. H (0 < H ≤ 200) is the number of scan lines in the image. W (0 < W ≤ 50) is the number of hexadecimal characters in each line. The next H lines contain the hexadecimal characters of the image, working from top to bottom. Input images conform to the following rules: The image contains only hieroglyphs shown in Figure C.1. Each image contains at least one valid hieroglyph. Each black pixel in the image is part of a valid hieroglyph. Each hieroglyph consists of a connected set of black pixels and each black pixel has at least one other black pixel on its top, bottom, left, or right side. The hieroglyphs do not touch and no hieroglyph is inside another hieroglyph. • Two black pixels that touch diagonally will always have a common touching black pixel. The hieroglyphs may be distorted but each has a shape that is topologically equivalent to one of the symbols in Figure C.11. The last test case is followed by a line containing two zeros.",
        "titulo": "Ancient Messages",
        "descricao": "In order to understand early civilizations, archaeologists often study texts written in ancient languages. One such language, used in Egypt more than 3000 years ago, is based on characters called hieroglyphs. Figure C.1 shows six hieroglyphs and their names. In this problem, you will write a program to recognize these six characters. Figure C.1: Six hieroglyphs"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2189",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir três linhas. A primeira linha identifica o conjunto de teste, no formato \"Teste n\", onde n é numerado a partir de 1. A segunda 5 linha deve conter o número do ingresso do ganhador, conforme determinado pelo seu programa. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "entrada": "A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém um número inteiro positivo N (0 ≤ N ≤ 10000) que indica o número de participantes da festa. A linha seguinte contém a sequência, em ordem de entrada, dos N ingressos das pessoas que participaram da festa. O final da entrada é indicado quando N = 0. Para cada conjunto de teste da entrada haverá um único ganhador.",
        "titulo": "Quermesse",
        "descricao": "Os alunos do último ano resolveram organizar uma quermesse para arrecadar fundos para a festa de formatura. A festa prometia ser um sucesso, pois o pai de um dos formandos, Teófilo, dono de uma loja de informática, decidiu doar um computador para ser sorteado entre os que comparecessem. Os alunos prepararam barracas de quentão, pipoca, doces, ensaiaram a quadrilha e colocaram à venda ingressos numerados sequencialmente a partir de 1. O número do ingresso serviria para o sorteio do computador. Ficou acertado que Teófilo decidiria o método de sorteio; em princípio o sorteio seria, claro, computadorizado. O local escolhido para a festa foi o ginásio da escola. A entrada dos participantes foi pela porta principal, que possui uma roleta, onde passa uma pessoa por vez. Na entrada, um funcionário inseriu, em uma lista no computador da escola, o número do ingresso, na ordem de chegada dos participantes. Depois da entrada de todos os participantes, Teófilo começou a trabalhar no computador para preparar o sorteio. Verificando a lista de presentes, notou uma característica notável: havia apenas um caso, em toda a lista, em que o participante que possuia o ingresso numerado com i, havia sido a i-ésima pessoa a entrar no ginásio. Teófilo ficou tão encantado com a coincidência que decidiu que o sorteio não seria necessário: esta pessoa seria o ganhador do computador. Conhecendo a lista de participantes, por ordem de chegada, sua tarefa é determinar o número do ingresso premiado, sabendo que o ganhador é o único participante que tem o número do ingresso igual à sua posição de entrada na festa."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2016",
        "saida": "Saída de uma linha com um inteiro representando o número total máximo de pontos extras que Daedalus poderia ter obtido, se ele tivesse escolhido o melhor cartão de possível em cada rodada, assumindo que as cartas escolhidas pelos outros jogadores permaneçam inalteradas.",
        "entrada": "A primeira linha contém dois inteiros N e M, representando respectivamente o número de jogadores e o número de rodadas (1 ≤ N ≤ 20 e 1 ≤ M ≤ 50). Cada uma das M linhas seguintes descreve uma rodada com um número inteiro B, indicando o orçamento (1 ≤ B ≤ 106), seguido de N inteiros C1, C2, ..., CN representam que o jogador i-ésimo escolheu o cartão marcada com Ci pontos durante essa rodada (Ci ∈ {1, 10, 100, 1000, 10000} para i = 1, 2, ..., N). Daedalus é o primeiro jogador.",
        "titulo": "D como em Daedalus",
        "descricao": "Daedalus está jogando o jogo de \"Não seja ganancioso\", no qual os N jogadores sentam em torno de uma mesa tendo cada um deles cinco cartões rotulados 1, 10, 100, 1000 e 10000 pontos. Em \"Não seja ganancioso\" os jogadores não podem conversar entre si uma vez que o jogo começa, e existem M rodadas. Em cada rodada, o banco anuncia um orçamento B. Em seguida, cada jogador escolhe uma das cartas e coloca-a, de rosto para baixo, sobre a mesa. O banco então vira as cartas, de modo que todos os jogadores podem ver todos as N cartas. Se a soma dos pontos nas cartas escolhidas é menor ou igual a B, então o banco para cada jogador dá exatamente a quantidade de pontos na placa de que ele ou ela escolheu. Caso contrário, ninguém recebe nada. Cada jogador recebe a sua carta de volta antes da próxima rodada. Os jogadores estão muito racionais e gostariam de maximizar os seus pontos e minimizar os seus arrependimentos! O que você faria nesta situação? Cooperaria ou afundaria o jogo? Tome a tabela a seguir como um exemplo. Daedalus ganhou um total de 10 pontos, no final, porque apenas o primeiro round foi bem sucedida. Mas, olhando para trás no jogo, ele vê que ele poderia ter ganho 110 pontos, se tivesse escolhido 100 pontos na primeira rodada e 10 pontos na terceira rodada. Ou seja, Daedalus poderia ter ganho 100 pontos extra! Isto somente, é claro, assumindo que as cartas escolhidas pelos outros jogadores permaneçam inalteradas. Dado o orçamento e as cartas escolhidas em cada rodada, é preciso calcular o número total máximo de pontos extras que Daedalus poderia ter obtido, no final, se tivesse escolhido o melhor cartão de possível em cada rodada, assumindo as cartas escolhidas pelo outro jogadores permaneçam inalteradas."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1103",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma linha, cada uma contendo um número inteiro, indicando o número de minutos que Daniela tem para dormir.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em uma linha, contendo quatro números inteiros H  1 , M 1 , H2 e M 2, com H1:M1 representando a hora e minuto atuais, e H2:M2 representando a hora e minuto para os quais o alarme  despertador foi programado (0≤H1≤23, 0≤M1≤59, 0≤H2≤23, 0≤M2 ≤59). O final da entrada é indicado por uma linha que contém apenas quatro zeros, separados por espaços em branco.",
        "titulo": "Alarme Despertador",
        "descricao": "Daniela é enfermeira em um grande hospital, e tem os horários de trabalho muito variáveis. Para piorar, ela tem sono pesado, e uma grande dificuldade para acordar com relógios despertadores. Recentemente ela ganhou de presente um relógio digital, com alarme com vários tons, e tem esperança que isso resolva o seu problema. No entanto, ela anda muito cansada e quer aproveitar cada momento de descanso. Por isso, carrega seu relógio digital despertador para todos os lugares, e sempre que tem um tempo de descanso procura dormir, programando o alarme despertador para a hora em que tem que acordar. No entanto, com tanta ansiedade para dormir, acaba tendo dificuldades para adormecer e aproveitar o descanso. Um problema que a tem atormentado na hora de dormir é saber quantos minutos ela teria de sono se adormecesse imediatamente e acordasse somente quando o despertador tocasse. Mas ela realmente não é muito boa com números, e pediu sua ajuda para escrever um programa que, dada a hora corrente e a hora do alarme, determine o número de minutos que ela poderia dormir."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1917",
        "saida": "Para cada caso de teste, exiba uma única linha com a quantidade de vírus que estarão vivos no fim do minuto solicitado pelo Chapolin Colorado.",
        "entrada": "Haverá diversos casos de teste. Cada caso inicia com dois inteiros, X e Mf (1 ≤ X ≤ 105 , 1 ≤ Mf ≤ 105), representando respectivamente, a quantidade inicial de vírus inseridas no planeta Terra e o minuto em que Chapolin deseja saber a quantidade de vírus que estarão vivos no planeta. A entrada termina com X = Mf = 0, a qual não deverá ser processada.",
        "titulo": "Ajude o Chapolin Colorado!",
        "descricao": "Tripa Seca é um exímio programador de computadores, mas infelizmente ele faz parte de uma entidade formada pelos vilões mais cruéis do universo. Após dominar inúmeros planetas, o próximo alvo dessa entidade é o planeta Terra e o foco é de capturar toda a tecnologia dos terráqueos. A sede da entidade até alguns dias atrás nunca tinha sido avistada por nenhum ser do planeta Terra, mas o poderoso Chapolin Colorado com toda a sua astúcia, realizou esse feito e conseguiu entrar na sala de reuniões dos super vilões. E advinha? Estava tendo uma grande reunião! Chapolin escutou toda a conversa dos vilões e acabou descobrindo que o plano para conquistar a terra, é a criação de um vírus super poderoso capaz de dominar qualquer aparelho que utilize algum tipo de tecnologia terrestre. Naquele exato momento Chapolin Colorado pegou o seu gravador de áudio e começou gravar Tripa Seca explicando o funcionamento do vírus. Abaixo está descrito uma parte da gravação: \"[..]Primeiramente o vírus que eu criei é capaz de se reproduzir, mas infelizmente eu errei em alguma parte do algoritmo e o vírus tem um tempo limitado de vida (Admitam, ninguém é perfeito!), por isso no fim do segundo minuto de vida o vírus morre, porém no início de cada minuto 1 vírus nasce de um outro vírus mais velho vivo, e esse é capaz de herdar as mesmas características do vírus pai, como por exemplo a capacidade de se reproduzir e também o tempo limitado de vida. Mesmo com o problema do tempo limitado de vida, tenho quase certeza que a devastação será gigantesca e nós dominaremos toda a tecnologia deste planeta fútil...Minha ideia é a seguinte: colocarei uma quantidade X de vírus no planeta dos terráqueos e depois deixarei que eles cumpram o resto do serviço! Por exemplo, se eu colocar de início somente 1 vírus, de acordo com meus cálculos já no fim do terceiro minuto terão 5 vírus![..]\" Apesar de Chapolin ser um grande herói, ele não é muito bom para entender certas explicações e pediu que o professor Girafales explicasse para ele a capacidade de destruição daqueles vírus, para que ele tenha uma noção do quanto a Terra corre perigo. Após várias tentativas sem sucesso, o professor Girafales decidiu desenhar o processo e mostrar a Chapolin. Veja o desenho do professor Girafales abaixo: Entretanto Chapolin achou o desenho um grande insulto a sua capacidade mental e pediu para que você informasse a quantidade de vírus que terá em um determinado minuto, dado a quantidade de vírus inseridos inicialmente por Tripa Seca. Um detalhe importante, Chapolin odeia números quebrados ou restos, ele gosta de ver o número original sem nenhum tipo de corte!"
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1300",
        "saida": "Para cada caso de teste uma linha contendo um caracter. Se existe pelo menos uma hora do dia de tal forma que o ângulo mínimo entre os dois ponteiros com exatamente A graus, então escreva a letra maiúscula 'Y'. Caso contrário escreva a letra maiúscula 'N'.",
        "entrada": "Cada caso de teste é descrito usando uma única linha. A linha contém um número inteiro A (0 ≤ A ≤ 180) que representa o ângulo a ser verificado.",
        "titulo": "Horas e Minutos",
        "descricao": "Heidi tem um relógio analógico discreto com a forma de um círculo, como o mostrado na figura ao lado. Dois ponteiros giram em torno do centro do círculo, indicando as horas e minutos. O relógio tem 60 marcas colocadas em torno do seu perímetro, com a distância entre cada uma das marcas consecutivas sendo constante. O ponteiro dos minutos se move de sua marca atual para o próximo exatamente uma vez a cada minuto. Por sua vez, o ponteiro das horas se move de sua marca atual para a próxima exatamente uma vez a cada 12 minutos, de modo que avança cinco marcas a cada hora. Consideramos que os dois ponteiros movem-se discretamente e instantaneamente, o que significa que eles estão sempre posicionados exatamente sobre uma das marcas e nunca entre as marcas. À meia-noite ambos os ponteiros alcançam ao mesmo tempo a marca no topo, o que indica zero horas e zero minutos. Após exatamente 12 horas ou 720 minutos, ambos os ponteiros alcançam a mesma posição novamente, e este processo é repetido várias vezes. Note que quando o ponteiro dos minutos se move, o ponteiro das horas pode não se mover, no entanto, quando o ponteiro das horas se move, o ponteiro dos minutos também se move. Heidi gosta de geometria, e ela gosta de medir o ângulo mínimo entre os dois ponteiros do relógio em diferentes momentos do dia. Ela tem anotado algumas medidas, mas depois de vários anos e uma longa lista, ela notou que alguns ângulos se repetiam enquanto alguns outros nunca apareciam. Por exemplo, a lista de Heidi indica que tanto às três horas quanto às nove horas o ângulo mínimo entre os dois ponteiros é de 90 graus, enquanto um ângulo de 65 graus não aparece na lista. Heidi decidiu verificar, para qualquer número inteiro A entre 0 e 180, se existe pelo menos uma vez no dia um ângulo mínimo entre os dois ponteiros do relógio com exatamente A graus. Ajude Heide com um programa que responda a esta pergunta."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1480",
        "saida": "Seu programa deverá imprimir, para cada caso de teste, uma linha, contendo a palavra “Possivel” caso seja possível encontrar todas as minas baseando nas definições acima, ou “Impossivel”, caso isso não seja possível.",
        "entrada": "A entrada irá conter diversos casos de teste. Cada caso de teste inicia com três inteiros N, M e K (1 ≤ N, M ≤ 20, 1 ≤ K ≤ 30), indicando que a grade do jogo contém N linhas e M colunas, e que há K minas escondidas naquela grade. Em seguida, haverá N linhas com M caracteres em cada linha, onde o caractere da linha i e coluna j (1 ≤ i ≤ N e 1 ≤ j ≤ M) indica o que há na posição [i, j] da grade: Caractere “.” - Quadrado coberto. Valor entre 0 e 8 – Quadrado revelado, onde o valor é a dica. Em seguida haverá K pares de inteiros a e b (1 ≤ a ≤ N e 1 ≤ b ≤ M), indicando que há uma mina na posição [a, b] da grade. Note que tal informação é útil quando um quadrado é revelado, para se poder calcular qual a dica que será apresentada. A entrada termina quando N = M = K = 0.",
        "titulo": "O Famoso Campo Minado",
        "descricao": "Campo Minado é um jogo antigo, que ficou muito conhecido por ser um jogo nativo em um sistema operacional que ninguém lembra o nome. Trata-se de uma grade com N linhas e M colunas, contendo diversas minas espalhadas, e diversas dicas indicando onde elas estariam. O seu objetivo é encontrar todas as minas, sem nunca pisar em uma. Cada posição da grade pode ou não conter uma mina. Caso não contenha uma mina, tal posição irá conter um valor, conhecido também como dica, que irá identificar quantas minas há nos quadrados adjacentes àquele (nas 8 direções), que varia de 0 a 8 (ver Figura 1). Rafael se interessou muito pela proposta do jogo, e achou tão fácil que resolveu escrever por conta própria alguns casos de jogo, onde ele define onde as minas estarão e quais as dicas iniciais. Notou porém que existem duas situações que podem ocorrer durante a partida: em determinados casos, é possível descobrir com certeza onde está a mina, graças às dicas dadas; já em outros casos, não é possível descobrir com certeza onde está a mina, e o jogador vai depender apenas de sua sorte. Considere uma partida como se segue: há inicialmente um determinado número de quadrados revelados (dicas) e o restante dos quadrados cobertos. O jogador pode então realizar dois movimentos: revelar um quadrado coberto, podendo encontrar uma mina (fim de jogo) ou uma dica; ou sinalizar um quadrado coberto como sendo uma mina, de modo a prevenir a si mesmo de nunca revelar tal quadrado. Para prosseguir na partida de uma forma lógica (sem se basear na sorte), leve em consideração as seguintes definições, em relação a um conjunto de quadrados adjacentes a algum quadrado sendo analisado: Quando o número de quadrados cobertos (adjCob), somado do número de quadrados sinalizados (adjSin) for igual à dica (adjCob + adjSin = dica), então todos os quadrados cobertos contém minas. Quando o número de de quadrados sinalizados (adjSin) for igual à dica (adjSin = dica), então todos os quadrados cobertos não contém minas. Veja como exemplo na Figura 2. Na parte a) da figura, temos adjCob = 1, adjSin = 0 e dica = 1, logo 1 + 0 = 1, e podemos sinalizar os quadrados cobertos para identificar as minas. Na parte b) da figura, temos adjSin = 1 e dica = 1, logo 1 = 1, e podemos revelar os quadrados adjacentes ainda cobertos. Para que seu caso de jogo ficasse interessante e desafiador, Rafael decidiu que devia ser possível encontrar todas as minas baseando-se apenas na definição dada, porém não sabe verificar quando isso é possível, e para isso pediu sua ajuda."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2213",
        "saida": "For each test case, display its case number followed by: 0 if the safe opens without inserting a mirror. k r c if the safe does not open without inserting a mirror, there are exactly k positions where inserting a mirror opens the safe, and (r, c) is the lexicographically smallest such row, column position. A position where both a / and a \\ mirror open the safe counts just once. 'impossible' if the safe cannot be opened with or without inserting a mirror.",
        "entrada": "Each test case describes a single safe and starts with a line containing four integer numbers r, c, m, and n (1 ≤ r, c ≤ 1 000 000 and 0 ≤ m, n ≤ 200 000). The mechanism’s grid has r rows and c columns. Each of the next m lines contains two integer numbers ri and ci (1 ≤ ri ≤ r and 1 ≤ ci ≤ c) specifying that there is a / mirror in row ri column ci . The following n lines specify the positions of the \\ mirrors in the same way. The m + n positions of the mirrors are pairwise distinct.",
        "titulo": "A Safe Bet",
        "descricao": "Safe Ltd. is a company that manufactures high-quality safes. Its latest invention is an optical closure mechanism that uses a laser beam passing through a rectangular grid with several mirrors. When the laser is activated, a beam enters the top row of the grid horizontally from the left. The beam is reflected by every mirror that it hits. Each mirror has a 45 degree diagonal orientation, either / or \\ . If the beam exits the bottom row of the grid horizontally to the right, it is detected and the safe opens (see the left side of the figure above). Otherwise the safe remains closed and an alarm is raised. Each safe has a missing mirror, which prevents the laser beam from traveling successfully through the grid (see the right side of the figure above). The safe has a mechanism that enables the user to drop a single mirror into any empty grid cell. A legitimate user knows the correct position and orientation of the missing mirror ( / in row 4 column 3 above) and can thus open the safe. Without this knowledge the user has to guess correctly, which can be difficult for safes with large grids. Your job is to determine if particular safes are actually secure. A secure safe does not open right away without inserting a mirror, and there is at least one valid location and orientation for the missing mirror. There may indeed be multiple such locations and orientations."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1171",
        "saida": "Imprima a saída de acordo com o exemplo fornecido abaixo, indicando quantas vezes cada um deles aparece na entrada por ordem crescente de valor.",
        "entrada": "A entrada contém apenas 1 caso de teste. A primeira linha de entrada contem um único inteiro N, que indica a quantidade de valores que serão lidos para X (1 ≤ X ≤ 2000) logo em seguida. Com certeza cada número não aparecerá mais do que 20 vezes na entrada de dados.",
        "titulo": "Frequência de Números",
        "descricao": "Neste problema sua tarefa será ler vários números e em seguida dizer quantas vezes cada número aparece na entrada de dados, ou seja, deve-se escrever cada um dos valores distintos que aparecem na entrada por ordem crescente de valor."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1916",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma linha com a quantidade de horas e minutos que atualmente estão registradas no banco de horas simulado para Jaiminho no seguinte formato: \"S HH:MM\", onde S pode ser o sinal \"-\", representando horas negativas no banco, ou sinal \"+\" representando horas positivas no banco, HH representa a quantidade de horas e MM representa a quantidade de minutos do banco de horas simulado. Caso HH:MM seja igual a 00:00, você pode considerar como horas positivas no banco.",
        "entrada": "A primeira linha de entrada contém um único inteiro QT (1 ≤ QT ≤ 100) indicando a quantidade de casos de teste que vem a seguir. Cada caso de teste inicia com uma linha contendo um único inteiro N (1 ≤ N ≤ 10³) que representa a quantidade de registros na planilha de Jaiminho, seguem N linhas, cada linha contendo a descrição dos horários de entrada e saída no seguinte formato \"A1:B1 A2:B2 | C1:D1 C2:D2\", onde A1 e B1 representam respectivamente as horas e os minutos de entrada do primeiro período de trabalho no dia, A2 e B2 representam respectivamente as horas e os minutos de saída do primeiro período de trabalho do dia, C1 e D1 representam respectivamente as horas e os minutos de entrada do segundo período de trabalho do dia e C2 e D2 representam respectivamente as horas e os minutos de saída do segundo período de trabalho no dia. Jaiminho garante que nunca dormiu no trabalho, que (A1:B1 ≤ A2:B2 && C1:D1 ≤ C2:D2) e que as horas e os minutos no seu banco de horas nunca ultrapassarão 2 dígitos. Lembre-se, 1 dia tem 24 horas e 1 hora tem 60 minutos.",
        "titulo": "Banco de Horas de Jaiminho",
        "descricao": "A empresa em que o carteiro Jaiminho trabalha tem uma política de banco de horas bem interessante. Toda vez que um funcionário inicia suas atividades ele deve registrar a sua chegada na \"máquina de ponto\" recebendo um pequeno comprovante, da mesma forma que toda vez que o funcionário finaliza suas atividades ele também deve registrar o término. A maioria dos funcionários nunca teve a curiosidade de saber como a \"máquina do ponto\" processa a quantidade de horas trabalhadas, mas Jaiminho além de ser um excelente funcionário é bastante curioso. Ao registrar a sua digital (no primeiro dia de trabalho) Jaiminho foi informado por uma senhora que trabalha no departamento de Recursos Humanos que existe uma tolerância de 5 minutos tanto na entrada como na saída. A jornada de trabalho de Jaiminho consiste em dois períodos, das 08:00 hrs às 12:00 hrs e das 14:00 hrs às 18:00 hrs (contabilizando 8 horas trabalhadas por dia), sendo assim, se ele chegar às 07:55 hrs e sair às 12:03 hrs, a “máquina do ponto” perceberá que ele respeitou a tolerância e não registrará nenhum minuto a mais ou a menos no banco de horas de Jaiminho, porém se na segunda parte do seu expediente, ele registrar a sua entrada às 13:54 hrs e sua saída às 18:02 hrs, a máquina perceberá que ele abusou da tolerância e então adicionará 6 minutos extras no seu banco de horas. Como Jaiminho é um funcionário dedicado e sempre tenta evitar a fadiga, ele montou uma planilha com o registro (horário de entrada e saída) de todos os dias trabalhados, mas infelizmente ele não é um programador e precisa de sua ajuda para simular o banco de horas da empresa em que ele trabalha."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2215",
        "saida": "For each test case, display the case number and the minimum number of operations (splits and joins) that have to be performed to combine the given stacks into a single stack.",
        "entrada": "Each test case starts with a line containing a single integer n (1 ≤ n ≤ 50), the number of stacks that have to be combined for a shipment. This is followed by n lines, each describing a stack. These lines start with an integer h (1 ≤ h ≤ 50), the height of the stack. This number is followed by h positive integers that give the diameters of the plates, from top to bottom. All diameters are at most 10 000. These numbers will be in non-decreasing order.",
        "titulo": "Stacking Plates",
        "descricao": "The Plate Shipping Company is an Internet retailer that, as their name suggests, exclusively sells plates. They pride themselves in offering the widest selection of dinner plates in the universe from a large number of manufacturers. In a recent cost analysis the company has discovered that they spend a large amount of money on packing the plates for shipment. Part of the reason is that plates have to be stacked before being put into shipping containers. And apparently, this is taking more time than expected. Maybe you can help. A shipment of plates consists of plates from several manufacturers. The plates from each manufacturer come stacked, that is, each arranged in a single stack with plates ordered by size (the smallest at the top, the largest at the bottom). We will call such a stack properly ordered. To ship all these plates, you must combine them into a single stack, again properly ordered. To join the manufacturers’ stacks into a single stack, two kinds of operations are allowed: Split: a single stack can be split into two stacks by lifting any top portion of the stack and putting it aside to form a new stack. Join: two stacks can be joined by putting one on top of the other. This is allowed only if the bottom plate of the top stack is no larger than the top plate of the bottom stack, that is, the joined stack has to be properly ordered. Note that a portion of any stack may never be put directly on top of another stack. It must first be split and then the split portion must be joined with the other stack. Given a collection of stacks, you have to find the minimum number of operations that transforms them into a single stack. The following example corresponds to the sample input, and shows how two stacks can be transformed to a single stack in five operations:"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2196",
        "saida": "For each test case in the input, display its case number. Then display one line per query in the test case. Each line displays the maximum number of coffee shops reachable for the given query distance m followed by the optimal location. For example, the sample output shows that 3 coffee shops are within query distance 1 of the optimal location (3, 4), 4 shops are within query distance 2 of optimal location (2, 2), and 5 shops are within query distance 4 of optimal location (3, 1). If there are multiple optimal locations, pick the location that is furthest south (minimal positive integer y-coordinate). If there is still a tie, pick the location furthest west (minimal positive integer x-coordinate). Follow the format of the sample output.",
        "entrada": "The input contains several test cases. Each test case describes a city. The first line of each test case contains four integers dx, dy, n, and q. These are the dimensions of the city grid dx × dy (1 ≤ dx, dy ≤ 1000), the number of coffee shops n (0 ≤ n ≤ 5 · 105 ), and the number of queries q (1 ≤ q ≤ 20). Each of the next n lines contains two integers xi and yi (1 ≤ xi ≤ dx, 1 ≤ yi ≤ dy); these specify the location of the ith coffee shop. There will be at most one coffee shop per intersection. Each of the next q lines contains a single integer m (0 ≤ m ≤ 106 ), the maximal distance that a person is willing to walk for a cup of coffee. The last test case is followed by a line containing four zeros.",
        "titulo": "Coffee Central",
        "descricao": "Is it just a fad or is it here to stay? You’re not sure, but the steadily increasing number of coffee shops that are opening in your hometown has certainly become quite a draw. Apparently, people have become so addicted to coffee that apartments that are close to many coffee shops will actually fetch higher rents. This has come to the attention of a local real-estate company. They are interested in identifying the most valuable locations in the city in terms of their proximity to large numbers of coffee shops. They have given you a map of the city, marked with the locations of coffee shops. Assuming that the average person is willing to walk only a fixed number of blocks for their morning coffee, you have to find the location from which one can reach the largest number of coffee shops. As you are probably aware, your hometown is built on a square grid layout, with blocks aligned on north-south and east-west axes. Since you have to walk along streets, the distance between intersections (a, b) and (c, d) is |a − c| + |b − d|."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1387",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro indicando quantos filhos e filhas Og tem ao todo.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha contendo dois inteiros L e R, separados por um espaço, indicando o número de filhos e de filhas, respectivamente (1 ≤ L, R ≤ 5). O fim do arquivo de entrada é indicado por L = R = 0.",
        "titulo": "Og",
        "descricao": "Og é um homem das cavernas com vários filhos e filhas, e ele quer contar todos eles. Og conta seus filhos com sua mão esquerda e suas filhas com sua mão direita. Entretanto, Og não é inteligente, e não sabe somar os dois números. Assim, ele pediu para você escrever um programa que realize a soma."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1770",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando quanto tempo se passou até que você tivesse escutado todas as músicas do álbum ao menos uma vez. Caso isso não seja possível, imprima -1.",
        "entrada": "Haverá no máximo 150 casos de teste. Cada caso de teste inicia com dois inteiros M e K, indicando o número de músicas do álbum e o número de músicas na playlist do seu algoritmo (1 ≤ M ≤ 100, 1 ≤ K ≤ 1000). Em seguida haverá M inteiros mi, indicando que a i-ésima música do álbum dura mi minutos (1 ≤ mi ≤ 300, para todo 1 ≤ i ≤ M). Em seguida haverá K inteiros ki, indicando que a i-ésima música da playlist é a música de faixa número ki (1 ≤ ki ≤ M, para todo 1 ≤ i ≤ K). A entrada termina com final de arquivo (EOF).",
        "titulo": "Shuffle",
        "descricao": "Sua banda favorita acaba de lançar um novo álbum, e para tornar a experiência mais empolgante você decidiu escutar as músicas em uma ordem aleatória. Para isto você escreveu um algoritmo que iria montar uma playlist com K músicas desse álbum. O problema, porém, é que seu algoritmo não é muito eficiente na forma que as músicas são escolhidas, de forma que algumas músicas poderiam ser tocadas repetidas vezes antes que outras fossem tocadas ao menos uma vez. Dado o número de músicas do álbum, a duração de cada música, e a playlist gerada pelo seu algoritmo, diga quanto tempo se passou até que você tivesse escutado todas as músicas do álbum ao menos uma vez, se isso for possível."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1981",
        "saida": "Para cada caso de teste você deverá imprimir quantos anagramas distintos são possíveis de se formar com os caracteres informados. Como os números podem ser grandes, imprima a resposta módulo 100000007.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste terá uma única linha, com uma palavra S (1 ≤ S ≤ 10000), composta apenas com caracteres entre 'a' e 'z'. A entrada termina quando S = 0 e não deve ser processada.",
        "titulo": "Embaralhando de Novo",
        "descricao": "Agora que você já ajudou o Gabriel com os primeiros dados necessários para seu jogo de lógica, ele necessita de sua ajuda novamente. Dessa vez ele precisa que seu programa consiga tratar casos onde as palavras podem ter letras repetidas."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1559",
        "saida": "Para cada teste, a saída consiste de uma linha contendo todas as jogadas possíveis para a entrada. As jogadas são indicadas por DOWN (baixo), LEFT (esquerda), RIGHT (direita) e UP (cima). As jogadas devem ser escritas em ordem alfabética. Caso não haja nenhuma jogada possível, imprima NONE.",
        "entrada": "A entrada é iniciada por uma linha que contém o número de casos de teste. Para cada caso de teste, a entrada consiste em 4 linhas contendo uma matriz quadrada de dimensão 4. Os números da matriz são iguais a 0 para indicar que não bloco na posição, ou são iguais a potências de 2 entre 2 e 2048 inclusive.",
        "titulo": "2048",
        "descricao": "Esse ano, o jogo conhecido como 2048 se tornou muito popular na internet. Veja a seguir uma imagem do jogo: As teclas direcionais são usadas para realizar jogadas (cima, baixo, esquerda e direita). A cada vez que uma tecla é pressionada, os blocos numerados tentam deslizar pela matriz caso haja espaço. No exemplo da imagem acima, se a tecla para esquerda for pressionada, 5 blocos irão se mover (8, 2, 16, 2, 32). Além de tentar deslizar, blocos adjacentes com o mesmo número se juntam em um único bloco com um número dobrado caso tentem deslizar na direção certa. No exemplo da imagem acima, se a tecla para baixo for pressionada, dois blocos 2 irão se transformar em um bloco 4 e dois blocos 32 irão se transformar em um bloco 64. Durante o jogo, além de fazer as jogadas, surgem aleatoriamente blocos na matriz com números iguais a potências de 2. O objetivo é fazer os blocos se juntarem para que um bloco com número 2048 seja formado. Quando isso acontece, o jogador vence o jogo e não é possível fazer mais jogadas. Porém, também pode acontecer do jogador não ter mais jogadas possíveis antes de formar o número 2048. No exemplo da imagem, apertar a tecla para a direita não é uma jogada válida, pois nenhum bloco pode se mover ou se juntar a outro bloco. Sua tarefa nesse problema é dizer quais são as jogadas válidas para uma determinada situação do jogo."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1708",
        "saida": "Seu programa deve produzir uma única linha, contendo um único inteiro: a volta em que o piloto mais lento se tornará um retardatário.",
        "entrada": "A única linha da entrada contém dois números inteiros X e Y (1 ≤ X < Y ≤ 10000), os tempos, em segundos, que o piloto mais rápido e o piloto mais lento levam para completar uma volta, respectivamente.",
        "titulo": "Volta",
        "descricao": "No automobilismo é bastante comum que o líder de uma prova, em determinado momento, ultrapasse o último colocado. O líder, neste momento, está uma volta à frente do último colocado, que se torna, assim, um retardatário. Neste problema, dados os tempos que o piloto mais rápido e o piloto mais lento levam para completar uma volta, você deve determinar em que volta o último colocado se tornará um retardatário, ou seja, será ultrapassado pelo líder. Você deve considerar que, inicialmente, eles estão lado a lado, na linha de partida do circuito, ambos no início da volta de número 1 (a primeira volta da corrida); e que uma nova volta se inicia sempre depois que o líder cruza a linha de partida."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2144",
        "saida": "Seu programa deverá imprimir um bordão correspondente à média M (ponto flutuante) da 1RM de BemBem, de acordo com a tabela abaixo: No final, se a média de todos os casos for maior do que 40, imprima uma linha em branco e então, \"Aqui nois constroi fibra rapaz! Nao e agua com musculo!\".",
        "entrada": "A entrada é composta pelos inteiros W1 (peso levantado pelo braço esquerdo: 1 ≤ W1 ≤ 60), W2 (peso levantado pelo braço direito: 1 ≤ W2 ≤ 100) e R (número de repetições: 1 ≤ R ≤ 12). A entrada termina com W1 = W2 = R = 0.",
        "titulo": "Bodybuilder",
        "descricao": "BemBem é um famoso fisiculturista da região. Ele está sempre buscando o desempenho perfeito em seus treinos na academia para competir com seus rivais. Seu amigo Frenco o auxilia da melhor maneira possível, ajudando-o a buscar o trapézio descendente e controlando-o para que ele não derrube todas as árvores do Parque Ibirapuera. Apesar disso, BemBem chamou você para o ajudar em uma tarefa específica: determinar a média de sua 1RM (uma repetição máxima). Para tal, você poderá usar a fórmula abaixo: W = Peso a ser levantado. R = Número de repetições. Porém, BemBem possui menos força em um braço do que no outro, o que o faz levantar menos peso em um deles, motivo pelo qual ele lhe pediu ajuda, alegando que \"o maluco está doente\". Ajude-o e torne-se um codebuilder!"
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1378",
        "saida": "Para cada caso de teste, imprima uma única linha com um único inteiro indicando o número de subconjuntos de três pontos que contém vértices de um triângulo isósceles.",
        "entrada": "Há vários casos de teste. Cada caso de teste é descrito em várias linhas. A primeira linha de cada caso de teste contém um inteiro N indicando o número de pontos no conjunto (3 ≤ N ≤ 1000). Cada uma das próximas N linhas descreve um ponto do conjunto e contém dois inteiros X e Y separados por um espaço (1 ≤ X, Y ≤ 106); esses valores representam as coordenadas do ponto no plano XY. Você pode assumir que, em cada caso de teste, não há dois pontos com a mesma localização e não há três pontos colineares. O último caso de teste é seguido por uma linha contendo um único zero.",
        "titulo": "Triângulos Isósceles",
        "descricao": "Um dado triângulo pode ser equilátero (três lados de mesmo comprimento), escaleno (três lados de comprimentos diferentes), ou isósceles (dois lados de mesmo comprimento e um terceiro lado de comprimento diferente). Sabe-se que pontos com coordenadas inteiras não podem ser vértices de um triângulo equilátero. É dado um conjunto de pontos distintos com coordenadas inteiras no plano XY tal que três pontos distintos deste conjunto não pertencem a uma mesma reta. Sua tarefa é calcular o número de subconjuntos de três pontos que contém vértices de um triângulo isósceles."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1311",
        "saida": "Para cada caso de teste imprima B+1 linhas. Na i-ésima linha da saída escreva os novos companheiros formados por remover da linha de ataque os soldados que acabaram de ser mortos de acordo com o i-ésimo relatório de baixa. Ou seja, para cada relatório de baixa 'L R', imprima o primeiro soldado sobrevivente a esquerda de L, e o primeiro soldado sobrevivente a direita de R. Para cada direção, imprima o caractere '*' (asterisco) se não existe soldado sobrevivente naquela direção. Imprima uma linha contendo um único caractere '-' (hifen) após cada caso de teste.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha da entrada contém dois inteiros S e B representando respectivamente o número de soldados na linhas de ataque, e o número de relatórios de baixa (1 ≤ B ≤ S ≤ 105). Os soldados são identificados por números diferentes de 1 até S, de acordo com usas posições na linha de ataque, sendo que 1 o soldado mais a esquerda e S o soldado mais a direita. Cada uma da B linhas seguintes descrevem um relatório de perda usando dois inteiros L (esquerda) e R (direita), significando que os soldados de L até R foram mortos (1 ≤ L ≤ R ≤ S). Você pode assumir que até o momento aqueles soldados estavam vivos e acabaram de ser mortos. ​O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Companheiros de Exército",
        "descricao": "Nlogonia está lutando uma guerra implacável contra seu país vizinho Cubicônia. O General Chefe do Exército da Nlogônia decidiu atacar o inimigo com uma formação linear de soldados, que avançariam juntos até conquistar o país vizinho. Antes de lutar, o General Chefe ordenou que cada soldado na linha de ataque, além de proteger a si mesmo e atacar, deveria também proteger seus dois vizinhos (mais próximos) na linha, se tais vizinhos existissem (porque o soldado mais a esquerda não possui um vizinho mais a esquerda e o soldado mais a direita não possui um vizinho mais a direita). O General Chefe também disse aos soldados que proteger seus companheiros era muito importante para previnir que a linha de ataque fosse quebrada. Tão importante que, se o companheiro a esquerda ou a direita de um soldado é morto, então o próximo soldado vivo a esquerda ou a direita daquele soldado, respectivamente, deveria se tornar seu companheiro. A batalha é violenta, e muitos soldados na linha de ataque estão sendo mortos por tiros, granadas e bombas. Mas seguindo as ordens do General Chefe, imediatamente após tomar conhecimento das baixas na linha de ataque, a divisão de sistemas de informação do Exército tem que informar aos soldados quem são seus novos companheiros. ​Serão dados o número de soldados na linha de ataque, e uma sequencia de relatórios de baixa. Cada relatório de baixa descreve um grupo de soldados contíguos na linha de ataque que acabaram de ser mortos na batalha. Escreva um programa que, para cada relatório de baixa, imprime os novos companheiros formados."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1147",
        "saida": "Para cada teste de caso de entrada, seu programa deve imprimir uma única linha, contendo a seguinte descrição: Caso de Teste #Y: X movimento(s). onde Y representa o número do respectivo caso de teste, e X representa a quantidade de movimentos possíveis ao cavalo realizar, em uma única rodada, sem que fique sobre ataque de um ou mais peões.",
        "entrada": "A entrada consiste de diversos casos de teste. Cada caso de teste consiste em 9 linhas de entrada. A primeira linha indica a posição inicial do cavalo. As demais 8 linhas, representam as respectivas posições dos peões. O final da entrada consiste em uma única linha contendo somente o valor 0 (zero).",
        "titulo": "Fuga do Cavalo",
        "descricao": "Seu amigo Pedro está aprendendo a jogar xadrez. Mas ele ainda não tem segurança de como pode movimentar o Cavalo. Desta forma, ele solicitou a você que desenvolvesse um programa que calcule, em apenas uma jogada, o número de distintos movimentos que o cavalo pode realizar, sem que o mesmo fique sobre o ataque de qualquer um dos 8 peões. Os movimentos do cavalo e dos peões são realizados conforme o jogo de xadrez tradicional, ou seja, o cavalo pode somente andar em “L”, e os peões atacar somente para frente em diagonal. Segue abaixo um exemplo: Na imagem apresentada, das 8 distintas posições que o cavalo pode movimentar-se no tabuleiro, 2 delas estão sobre ataque (6b e 3e). Nas demais casas, o cavalo pode movimentar-se seguramente, conseguindo fugir do ataque de qualquer um dos peões. Note que na casa 2b já existe um peão, porém ainda é uma jogada válida, já que o cavalo pode movimentar-se nessa mesma casa e “matar” o peão. Portanto, para o exemplo apresentado, o número de movimentos seguros para o cavalo realizar são 6. Vale lembrar que os peões pretos somente podem se movimentar de cima para baixo no tabuleiro, ou seja, da linha 7 até a linha 1, não sendo permitido o seu retorno."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2214",
        "saida": "For each test case, display the case number followed by one line for each query containing the length in km of the shortest flight path between airport s and t, subject to the fuel constraint c. Display the length accurate to three decimal places. If there is no permissible path between the two airports, then display the word impossible instead. You may assume the answer is numerically stable for perturbations of up to 0.1 km of R or c.",
        "entrada": "The first line of each test case contains two integers N and R, where 2 ≤ N ≤ 25 is the number of airports and 1 ≤ R ≤ 10 000 is the maximum allowed flight distance (in km) from the nearest airport. Each of the next N lines contains two integers φ, θ satisfying 0 ≤ φ < 360 and −90 ≤ θ ≤ 90, the longitude and latitude (respectively) of an airport, in degrees. The airports are numbered according to their order in the input starting from one. No two airports are at the same position. Following this is a line containing an integer Q, satisfying 1 ≤ Q ≤ 100. Each of the next Q lines contains three integers s, t, c satisfying 1 ≤ s, t ≤ N, s != t, and 1 ≤ c ≤ 50 000, indicating a plane going from airport s to airport t with a fuel capacity yielding a range of c km.",
        "titulo": "Shortest Flight Path",
        "descricao": "Commercial flights are statistically quite safe (in terms of number of deaths per passenger-kilometer, only going to the moon is safer). But there are still reasons for precautions and safety regulations. An early such rule was the so-called “60-minute rule,” which required that a two-engine plane must always be within 60 minutes of the nearest adequate airport along its entire flight path. A variety of similar rules have existed, but at their core, they remain the same: the flight path can not take the airplane more than a certain maximum allowed distance from the nearest airport. With these restrictions, planes cannot always use a direct route for flying from one airport to another. In this problem we will compute the shortest flight path between two airports while adhering to a maximum allowed distance rule. In the figure below, which illustrates the first sample test case, any flight route has to stay within the three circles. Thus a plane going from airport 2 to airport 3 has to detour from the direct route via the region around airport 1. Note that the plane would not necessarily have to go to airport 1 itself. Things are further complicated by the fact that planes have limited fuel supply, and to go longer distances they may need to make a stopover at intermediate airports. Thus, depending on the fuel capacity, a plane going from airport 2 to airport 3 in the figure might have to stop over at airport 1 (or the fuel capacity might be too low even to go to airport 1, in which case the trip would be impossible to make). We make the following simplifying assumptions: The surface of the earth is a sphere of radius 6370 km. Both time and fuel consumption are directly proportional to distance traveled. In other words we are interested only in total distance traveled. The difference in distance caused by planes flying at different altitudes is negligible. Thus, effectively, we assume them to be flying along the earth’s surface. A plane may stop for refueling at as many intermediate airports as needed, each time getting a full tank."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2070",
        "saida": "Sendo M o menor tamanho de uma sequência Bolada para os dados de entrada. Imprima uma única linha contendo M e a quantidade de sequências Boladas de tamanho M.",
        "entrada": "A primeira linha da entrada é constituída de 4 inteiros K, L1, L2 e L3, representando, respectivamente, o inteiro K e os tamanhos das sequências S1, S2 e S3 (1 ≤ K ≤ 20 e 1 ≤ L1, L2 e L3 ≤ 200). A segunda linha é constituída de L1 inteiros, representando os elementos da sequência S1. A terceira linha é constituída de L2 inteiros, representando os elementos da sequência S2. A quarta linha é constituída de L3 inteiros, representando os elementos da sequência S3. Considere que todos os elementos das sequências S1, S2 e S3 são inteiros positivos menores ou iguais a K.",
        "titulo": "Contando Sequências Boladas",
        "descricao": "Dado um inteiro K e 3 sequências S1, S2 e S3, chamamos de sequência Bolada, uma sequência constituída de inteiros positivos menores ou iguais a K e que não é subsequência de S1, S2 ou S3. Lembrando que uma subsequência é uma sequência que pode ser derivada de outra sequência por exclusão de alguns elementos, sem alterar a ordem dos elementos restantes. Por exemplo, para K = 3, S1 = , S2 = e S3 = , todas as sequências possíveis de tamanho 1 (, e ) não são sequências Boladas, pois todas são subsequências de S1, S2 e S3. Analisando todas as sequências possíveis de tamanho 2 para K = 3, temos 9 sequências: não é subsequência de S2, logo é uma sequência Bolada; é subsequência das 3 sequências; não é subsequência de S2, logo é uma sequência Bolada; é subsequência das 3 sequências; é subsequência das 3 sequências; é subsequência das 3 sequências; é subsequência das 3 sequências; é subsequência das 3 sequências; não é subsequência de S1 e S2, logo é uma sequência Bolada; Assim, o tamanho da menor sequência Bolada, para esse exemplo, é igual a 2. Também concluímos que existem 3 sequências Boladas de tamanho 2."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1663",
        "saida": "Para cada caso de teste imprima se a permutação é ambígua ou não, de acordo com o formato mostrado no exemplo de saída.",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste contém um inteiro n (1 ≤ n ≤ 100000). A linha seguinte contém uma permutação de inteiros 1 a n. Há exatamente um caractere de espaço entre inteiros consecutivos. Assuma que todo inteiro entre 1 e n aparece exatamente uma vez na permutação. O último caso de teste é seguido por uma linha que contém um zero.",
        "titulo": "Permutações Ambíguas",
        "descricao": "Alguns problemas de competições de programação são mesmo melindrosos: não apenas exigem um formato de saída diferente do que você podia esperar, mas também o exemplo de saída não mostra a diferença. Por exemplo, vejamos as permutações. Uma permutação dos inteiros de 1 a n é uma ordenação desses inteiros. Então a maneira natural de se representar uma permutação é listar os inteiros nessa ordem. Para n = 5, uma permutação seria 2, 3, 4, 5, 1. Entretanto, há outra possibilidade de representar-se uma permutação: Cria-se uma lista de números onde o i-ésimo número é a posição do inteiro i na permutação. Chamemos essa segunda possibilidade de uma permutação inversa. A permutação inversa da sequência acima é 5, 1, 2, 3, 4. Uma permutação ambígua é uma permutação que não pode distinguida de sua permutação inversa. A permutação 1, 4, 3, 2, por exemplo, é ambígua, porque sua permutação inversa é a mesma. Para se livrar desses irritantes exemplos de casos de teste, você deve escrever um programa que detecta se a permutação dada é ambígua ou não."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1576",
        "saida": "A saída deve consistir de um vetor que descreve a linha do horizonte, como mostrado no exemplo acima. No vetor da linha do horizonte (v1, v2, v3, . . . , vn−2, vn−1, vn), o vi tal que i é um número par representa a linha horizontal (altura). O vi tal que i é um número ímpar representa a linha vertical (coordenada x). O vetor deve representar o \"caminho\" tomado, por exemplo, por um inseto iniciando na menor coordenada x e viajando horizontalmente e verticalmente sobre todas as linhas que definem a linha do horizonte (skyline). Assim, a última entrada de todos os vetores da linha do horizonte será um 0 (zero).",
        "entrada": "A entrada é uma sequência de triplas de edifícios. Todas as coordenadas dos edifícios são inteiros menores que 10000 e haverá ao menos um e não mais do que 5000 edifícios no arquivo de entrada. Cada tripla de edifícios está em uma linha por si só no arquivo de entrada. Todos os inteiros em uma tripla são separados por um ou mais espaços. As triplas serão ordenadas por Li, a coordenada x à esquerda do edifício, de modo que o edifício com a menor coordenada x à esquerda é o primeiro no arquivo de entrada.",
        "titulo": "O Problema da Linha do Horizonte",
        "descricao": "Com o advento das estações de trabalho de alta velocidade gráfica, CAD (desenho assistido por computador ou DAC) e outras áreas (CAM, design VLSI) têm feito uso cada fez mais eficaz dos computadores. Um dos problemas com imagens de desenho é a eliminação de linhas ocultas - linhas obscurecidas por outras partes do desenho. Você deverá desenvolver um programa para ajudar um arquiteto no desenho da linha do horizonte de uma cidade, dado a localização dos edifícios da cidade. Para tornar o problema tratável, todos os edifícios possuem formas retangulares e eles compartilham uma base comum (a cidade em que eles são construídos é muito plana). A cidade também é vista como bidimensional. Um edifício é especificado por uma tripla ordenada (Li, Hi, Ri), onde Li e Ri são coordenadas esquerda e direita, repectivamente, do edifício i e Hi é a altura do edifício. No diagrama abaixo os edifícios são mostrados à esquerda com triplas (1,11,5),(2,6,7),(3,13,9),(12,7,16),(14,3,25),(19,18,22),(23,13,29),(24,4,28) a linha do horizonte, exibida à direita, é representada pela sequência: (1,11,3,13,9,0,12,7,16,3,19,18,22,3,23,13,29,0)"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2195",
        "saida": "For each test case, display a single line beginning with the case number. If there is a solution, display the maximum number of widgets that can be added to the chip. Display “impossible” if there is no solution. Follow the format of the sample output.",
        "entrada": "The input consists of several test cases. Each case starts with a line containing three integers: The size of the chip N (1 ≤ N ≤ 40), and A and B (1 ≤ B ≤ 1000, 0 ≤ A ≤ B) as described above. Each of the following N lines contains N characters describing the slots, one of ‘.’, ‘/’ or ‘C’, as described above. The last test case is followed by a line containing three zeros.",
        "titulo": "Chips Challenge",
        "descricao": "A prominent microprocessor company has enlisted your help to lay out some interchangeable components (widgets) on some of their computer chips. Each chip’s design is an N ×N square of slots. One slot can hold a single component, and you are to try to fit in as many widgets as possible. Modern processor designs are complex, of course. You unfortunately have several restrictions: Some of the slots are disabled. Some of the slots are already occupied by other components and cannot be used for widgets. There are sibling memory buses connected to the horizontal and vertical edges of the chip and their bandwidth loads need to match. As such, there must be exactly as many components in the first row as in the first column, exactly as many in the second row as in the second column, and so on. Component counts include both the components already specified on the chip and the added widgets. Similarly, the power supply is connected at the end of each row and column. To avoid hot spots, any given row or column must have no more than A/B of the total components on the chip for a given A and B. A specification for a chip is N lines of N characters, where ‘.’ indicates an open slot, ‘/’ indicates a disabled slot, and ‘C’ indicates a slot already occupied by a component. For example: CC/.. ./.// ..C.C /.C.. /./C/ If no more than 3/10 of the components may be in any one row or column, the maximum number of widgets that can be added to this 5 × 5 chip is 7. A possible arrangement is below, where ‘W’ indicates a widget added in an open slot. CC/W. W/W// W.C.C /.CWW /W/C/"
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1794",
        "saida": "Imprima a palavra \"possivel\" caso seja possível lavar e secar suas peças de roupa seguindo as regras descritas no enunciado, ou \"impossivel\" caso contrário.",
        "entrada": "Na primeira linha da entrada haverá um inteiro N (1 ≤ N ≤ 100). Na segunda linha da entrada haverá dois inteiros LA e LB (1 ≤ LA < LB ≤ 100). Na terceira linha da entrada haverá dois inteiros SA e SB (1 ≤ SA < SB ≤ 100).",
        "titulo": "Lavanderia",
        "descricao": "Cansada de lavar suas roupas sujas, sua mãe decidiu que a partir de agora quem lava suas roupas é você. Na lavanderia da sua casa existe uma lavadora e uma secadora de roupas, cada uma com um limite mínimo e máximo de peças a serem lavadas e secadas por vez. Assim sendo, a lavadora só deve ser usada se forem colocadas no mínimo LA e no máximo LB peças dentro dela, e semelhantemente a secadora só deve ser usada se forem colocadas no mínimo SA e no máximo SB peças dentro dela. Você tem atualmente N peças de roupa a serem lavadas e secadas, e quer descobrir se é possível usar a lavadora e secadora para lavar e secar todas as suas peças, seguindo as regras acima."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2021",
        "saida": "Para cada caso imprima a frase \"Lights: X\" sendo X o total de luzes apagadas que Jon deve comprar.",
        "entrada": "A entrada consiste em multiplas entradas que começam com uma linha com 3 inteiros M, N e P (2 ≤ M, N ≤ 500 e 1 ≤ P ≤ N) que representam respectivamente altura, largura e quantidade de posições que ele encontrou. As próximas P linhas contém um número Q (1 ≤ Q ≤ M*N) que são as posições de cada luz apagada. A entrada termina quando M = N = P = 0.",
        "titulo": "Luzes de Natal",
        "descricao": "Chegou o Natal e é época de organizar a casa para refletir o clima de festividades do fim de ano. A familia de Jon começou a enfeitar a casa e sua função é pendurar inúmeras luzes de natal ao redor da casa no formato de um retângulo. No entanto essas luzes são um pouco chatas, após guardá-las durante todo o ano algumas acabam quebradas e outras queimadas. O modelo de luzes que ele está usando é no formato de retângulo. Jon vai comprar todas as luzes avulsas que precisam ser substituidas porque ele não sabe que a primeira coluna das luzes funciona de forma paralela enquanto que pra cada linha elas funcionam em série fazendo-o pensar que todas a partir de um determinado ponto estão queimadas. O que ele faz na verdade é contar, em ordem, o numero das luzes até achar aquela que não acende mais e então anota o seu número num papel e então pula para a próxima linha recomeçando a contagem. Por exemplo numa rede 5x5 existem 2 posições que ele encontrou 5 e 1, isso teria a seguinte representação: ****- - - - - - ***** ***** ***** Logo a quantidade que Jon deve comprar é 6. Sua tarefa é dizer quantas luzes estão apagadas a partir das posições que Jon anotou para que ele possa comprar elas avulsas."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1515",
        "saida": "Para cada caso de teste, deverá ser impressa uma linha, contendo o nome do planeta da primeira civilização a enviar a mensagem Hello Galaxy. Pode-se supor que não haverá empates.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (1 ≤ N ≤ 100), que indica quantas mensagens Hello Galaxy foram coletados por Rafael em sua pesquisa. Em seguida haverão N linhas, cada uma representando uma mensagem. Cada mensagem é representada pelo nome do planeta da civilização, contendo entre 1 e 50 caracteres (somente letras), e dois inteiros A e T (2014 ≤ A ≤ 2113, 1 ≤ T ≤ 1000), representando, respectivamente, o ano em que a mensagem foi recebida no planeta Terra, e a quantidade de anos que tal mensagem levou para chegar do planeta de origem até o planeta Terra. O último caso de teste é indicado quando N = 0, o qual não deverá ser processado.",
        "titulo": "Hello Galaxy",
        "descricao": "Atualmente, no ano de 2114, o conhecimento de que não estamos sozinhos no universo não é novidade, porém um século atrás isto ainda era um mistério. Diversas civilizações na Via Láctea já emitiram algum tipo de sinal provando sua existência, e outras até estabeleceram um contato aberto com a Terra em busca de informações sobre a tal Árvore Hexagonária (afinal, estamos em 2114). Rafael tem muito interesse pelo assunto, e em um trabalho para a escola se encarregou de descobrir qual foi a civilização mais antiga que enviou um Hello Galaxy para toda a galáxia. Hello Galaxy nada mais é que o primeiro dos passos do Protocolo de Iniciação na Sociedade Via Láctea, PISVL, garantindo que a nova civilização possa entrar em contato com as demais caso necessário. A mensagem Hello Galaxy traz consigo duas informações básicas: o texto “Hello Galaxy”, que faz parte da tradição, e o nome do planeta da civilização que enviou a mensagem. O CMSVL, Centro de Monitoramento da Sociedade Via Láctea, instalado, por algum motivo, na Terra, recebe tais mensagens, armazenando em um registro o ano em que foi recebida a mensagem e a quantidade de anos que tal mensagem levou para chegar até ali. A tarefa de Rafael é simples: descobrir quem foi a primeira civilização a enviar a mensagem Hello Galaxy."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1369",
        "saida": "Para cada caso de teste seu programa deve produzir uma linha na saída. Se todas as operações de inserção forem executadas sem erro, seu programa deve produzir uma linha contendo uma estimativa aproximada do estado do disco, apresentada como se segue. Divida o número de bytes do disco em oito blocos contíguos de mesmo tamanho. Para cada um dos oito blocos seu programa deve verificar a porcentagem P de bytes livres daquele bloco, e apresentar a estimativa do estado final no formato [C] [C] [C] [C] [C] [C] [C] [C] onde C é ' ', '-' ou '#', dependendo se 75 < P ≤ 100, 25 < P ≤ 75 ou 0 ≤ P ≤ 25, respectivamente. Caso um arquivo não possa ser inserido por falta de espaço, seu programa deve produzir uma linha contendo a expressão ERRO: disco cheio; nesse caso, operações subsequentes do caso de teste devem ser ignoradas.",
        "entrada": "A entrada é constituída de vários casos de teste. A primeira linha de um caso de teste contém um único inteiro N indicando o número de operações no disco (0 < N ≤ 10000). A segunda linha de um caso de teste contém a descrição do tamanho do disco, composta por um inteiro D (0 < D ≤ 1023), seguido de um especificador de unidade; o especificador de unidade é uma cadeia de dois caracteres no formato Kb, Mb ou Gb. Cada uma das N linhas seguintes contém a descrição de uma operação no disco (insere, remove ou otimiza, conforme descrito acima). O final da entrada é indicado por N = 0.",
        "titulo": "Gerente de Espaço",
        "descricao": "É bem verdade que a maioria das pessoas não se importa muito com o que ocorre dentro de um computador, desde que ele execute as tarefas que devem ser desempenhadas. Existem, no entanto, alguns poucos nerds que sentem prazer em acompanhar o movimento de bits e bytes dentro da memória do computador. É para esse público, constituído principalmente de adolescentes, que a multinacional de sofware ACM (Abstractions of Concrete Machines) deseja desenvolver um sistema que acompanhe e produza um relatório das operações efetuadas em um disco rígido. Um disco rígido é composto de uma sequência de células atômicas de armazenamento, cada uma de tamanho 1Kb. Especificamente, a ACM deseja acompanhar três tipos de operações: insere NOME T Insere no disco o arquivo NOME, de tamanho T. Você pode supor que um arquivo com esse nome não existe ainda no disco. O tamanho T de um arquivo é dado na forma XKb, XMb, ou XGb, onde X é um inteiro (0 < X <= 1023). NOME é uma cadeia de caracteres com comprimento máximo 10. remove NOME Remove o arquivo NOME do disco. Se um arquivo com esse nome não existe, não faz nada; otimiza Compacta o disco, deslocando os arquivos existentes na direção do início do disco, eliminando espaços livres entre dois arquivos subsequentes, e preservando a ordem em que os arquivos aparecem no disco, de modo a deixar um espaço de memória livre no final do disco. A capacidade de um disco é sempre um número múltiplo de 8Kb. No início, o disco está vazio, ou seja, contém um bloco livre do tamanho da capacidade do disco. Um arquivo é sempre armazenado em um bloco de células de armazenamento contíguas. O arquivo a ser inserido deve ser sempre colocado no início do menor bloco livre cujo tamanho é maior ou igual ao tamanho do arquivo. Se mais de um bloco livre é igualmente adequado, escolha o mais próximo do começo do disco. Caso não seja possível inserir o arquivo por falta de um bloco livre suficientemente grande, deve-se executar automaticamente o comando otimiza. Se após a otimização ainda não for possível inserir o arquivo, uma mensagem de erro deve ser produzida. No caso de todas as operações serem executas sem erro, seu programa deve produzir uma estimativa aproximada do estado final do disco, conforme descrito abaixo. Lembre que 1Mb corresponde a 1024Kb, enquanto 1Gb corresponde a 1024Mb."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1471",
        "saida": "Seu programa deve produzir uma única linha para cada caso de teste, contendo os identificadores dos voluntários que não retornaram do mergulho, na ordem crescente de suas identificações. Deixe um espaço em branco após cada identificador (note que isto significa que deve haver um espaço em branco também após o último identificador). Se todos os voluntários retornaram do mergulho, imprima apenas o caractere ‘*’ (asterisco).",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto de duas linhas. A primeira linha contém dois inteiros N e R ( 1 ≤ R ≤ N ≤ 104), indicando respectivamente o número de voluntários que mergulhou e o número de voluntários que retornou do mergulho. Os voluntários são identificados por números de 1 a N. A segunda linha da entrada contém R inteiros, indicando os voluntários que retornaram do mergulho (ao menos um voluntário retorna do mergulho).",
        "titulo": "Mergulho",
        "descricao": "O recente terremoto em Nlogônia não chegou a afetar muito as edificações da capital, principal epicentro do abalo. Mas os cientistas detectaram que o principal dique de contenção teve um dano significativo na sua parte subterrânea que, se não for consertado rapidamente, pode causar o seu desmoronamento, com a consequente inundação de toda a capital. O conserto deve ser feito por mergulhadores, a uma grande profundidade, em condições extremamente difíceis e perigosas. Mas como é a sobrevivência da própria cidade que está em jogo, seus moradores acudiram em grande número como voluntários para essa perigosa missão. Como é tradicional em missões perigosas, cada mergulhador recebeu no início do mergulho uma pequena placa com um número de identificação. Ao terminar o mergulho, os voluntários devolviam a placa de identificação, colocando-a em um repositório. O dique voltou a ser seguro, mas aparentemente alguns voluntários não voltaram do mergulho. Você foi contratado para a penosa tarefa de, dadas as placas colocadas no repositório, determinar quais voluntários perderam a vida salvando a cidade."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1521",
        "saida": "Para cada caso de teste, deverá ser impressa uma linha, contendo um inteiro, indicando qual o aluno que terminou se entregando.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (3 ≤ N ≤ 50). A seguir, haverão N inteiros ni (1 ≤ ni ≤ N, para todo 1 ≤ i ≤ N), onde cada inteiro ni significa que o aluno i entregou o aluno ni. Ou seja, se o terceiro número for 4, significa que o terceiro aluno entregou o quarto aluno. Se, ao contrário, o número for o dele mesmo, significa que ele se entregou. Em seguida haverá um inteiro K (1 ≤ K ≤ N), indicando quem foi o aluno com o qual o professor iniciou sua investigação. O último caso de teste é identificado quando N = 0, o qual não deve ser processado.",
        "titulo": "O Culpado",
        "descricao": "Guerra de bolinha de papel é uma das brincadeiras mais clássicas do tempo do colegial, e algumas pessoas gostam tanto que iniciam essas guerras em plena faculdade. As regras são simples: Mire e acerte alguém com uma bola de papel. Os professores, por outro lado, não acham tal brincadeira tão produtiva, uma vez que isso tira a atenção da aula sendo dada. Pior ainda, é quando um aluno acerta o professor com a bola de papel. O professor dessa vez decidiu investigar quem participava da brincadeira, e disse que estaria satisfeito se ao menos um deles fosse descoberto, para servir de exemplo aos outros. O processo de investigação do professor acontece da seguinte forma: inicia-se perguntando a um aluno K se ele participava da brincadeira ou, caso não participasse, que dissesse quem participava. Se o aluno K se entregasse, a investigação terminaria. Caso contrário, ele diria o número de outro aluno, e o processo se repetiria com o professor fazendo a pergunta para este novo aluno, até que alguém se entregue. O professor disponibilizou uma lista contendo a resposta de todos os alunos para a sua pergunta, e pediu sua ajuda para descobrir, se ele iniciasse a investigação no aluno K, quem acabaria se entregando? É garantido que alguém acabará se entregando."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1216",
        "saida": "A saída deve ser um único valor com uma casa decimal (utilize uma variável de dupla precisão - double) indicando a distância média entre a casa de Mangojata e de seus amigos, conforme exemplo abaixo.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF (Fim de Arquivo). Cada caso de teste consiste de duas linhas de entrada. A primeira linha contém o nome de um amigo de Mangojata e a segunda linha contém um valor inteiro que indica a distância aproximada da casa deste amigo até a casa de Mangojata.",
        "titulo": "Getline One",
        "descricao": "Mangojata está aprendendo programação. Ela acha tudo muito fácil, muito simples. Ela está prestes a fazer um pequeno programa que leia o nome dos seus amigos e a distância de sua casa até cada um deles. Desta forma, ela quer simplesmente calcular qual é a distância média que deve ser percorrida para chegar na casa de qualquer um de seus amigos (em metros). Porém Aristoclenes, que é um programador mais experiente, lhe alertou que às vezes o que parece muito simples tem lá seus detalhes, dependendo da linguagem que é utilizada para implementação."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2197",
        "saida": "For each test case, display its case number followed by the largest number of dollars that ACM can have at the end of day D + 1. Follow the format of the sample output.",
        "entrada": "The input consists of several test cases. Each test case starts with a line containing three positive integers N, C, and D. N is the number of machines for sale (N ≤ 105 ), C is the number of dollars with which the company begins the restructuring (C ≤ 109 ), and D is the number of days that the restructuring lasts (D ≤ 109 ). Each of the next N lines describes a single machine for sale. Each line contains four integers Di , Pi , Ri and Gi , denoting (respectively) the day on which the machine is for sale, the dollar price for which it may be bought, the dollar price for which it may be resold and the daily profit generated by operating the machine. These numbers satisfy 1 ≤ Di ≤ D, 1 ≤ Ri < Pi ≤ 109 and 1 ≤ Gi ≤ 109. The last test case is followed by a line containing three zeros.",
        "titulo": "Machine Works",
        "descricao": "You are the director of Arbitrarily Complex Machines (ACM for short), a company producing advanced machinery using even more advanced machinery. The old production machinery has broken down, so you need to buy new production machines for the company. Your goal is to make as much money as possible during the restructuring period. During this period you will be able to buy and sell machines and operate them for profit while ACM owns them. Due to space restrictions, ACM can own at most one machine at a time. During the restructuring period, there will be several machines for sale. Being an expert in the advanced machines market, you already know the price Pi and the availability day Di for each machines Mi. Note that if you do not buy machine Mi on day Di, then somebody else will buy it and it will not be available later. Needless to say, you cannot buy a machine if ACM has less money than the price of the machine. If you buy a machine Mi on day Di , then ACM can operate it starting on day Di + 1. Each day that the machine operates, it produces a profit of Gi dollars for the company. You may decide to sell a machine to reclaim a part of its purchase price any day after you’ve bought it. Each machine has a resale price Ri for which it may be resold to the market. You cannot operate a machine on the day that you sell it, but you may sell a machine and use the proceeds to buy a new machine on the same day. Once the restructuring period ends, ACM will sell any machine that it still owns. Your task is to maximize the amount of money that ACM makes during the restructuring."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2116",
        "saida": "A saída do seu programa deve conter apenas uma linha informando a resposta final do jogo.",
        "entrada": "A entrada do programa consiste de apenas uma linha com N e M (2 <= N, M <= 1000).",
        "titulo": "Diversão dos Alunos",
        "descricao": "Juilherme e Jogério, gostam muito de jogos matemáticos. Juilherme acabou de criar mais um jogo matemático para eles se divertirem enquanto assistem essa competição online. O jogo consiste nos seguintes passos: 1) Juilherme escolhe um número N e Jogério escolhe um número M. 2) Juilherme e Jogério devem então achar dois números primos P1 e P2, de tal forma que eles sejam o mais próximo possível do que numero N e M, respectivamente. Além disso P1 deve ser menor ou igual a N e P2 deve ser menor ou igual a M. 3) A resposta final do desafio é encontrar a multiplicacão de P1 e P2. Quem achar a resposta primeiro é o vencedor. Como eles irão tentar achar a resposta o mais rápido possível, algumas vezes chegando a resultados incorretos, eles precisam de um programa que entregue a resposta final do jogo, para que possa ser comparada com a resposta encontrada por eles. Usando as informacoes do jogo, faça um programa que dado os números N e M imprima o resultado final."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1796",
        "saida": "Seu programa deve imprimir \"Y\" caso a maioria da população esteja de acordo com o cenário econômico. Caso contrário imprima \"N\"",
        "entrada": "A primeira linha contém um inteiro Q (4 &leq; Q &leq; 233000) representando o número de pessoas que participaram da pesquisa. A segunda linha contém Q inteiros Vi (0 &leq;Vi &leq; 1, 1 &leq; i &leq; Q), representando a opinião do i-ésimo cidadão Brasileiro sobre o cenário econômico atual. Sendo \"0\" os que consideram o cenário atual satisfatório e \"1\" os que consideram não satisfatório.",
        "titulo": "Economia Brasileira",
        "descricao": "Ultimamente a economia brasileira tornou-se o assunto de todos os jornais. A população brasileira têm diferentes opiniões sobre o cenário econômico atual. Sua tarefa é fazer uma pesquisa para saber se a maioria da população está ou não satisfeita com o cenário econômico atual."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1791",
        "saida": "Imprima em uma única linha para cada caso de teste a \"Potencia\" (sem aspas) caso a matriz possa ser transformada, ou \"Nao Potencia\" (sem aspas) caso contrário.",
        "entrada": "A entrada consiste de múltiplas linhas. A primeira linha contém um inteiro C que indica o número de casos de teste. Em seguida, em cada caso de teste a primeira linha contém um inteiro N (1 < N < 8) que indica o número de linhas e colunas da matriz, em seguida N linhas, cada uma com N inteiros d (􀀀-50000 < d < 50000) representando os elementos da matriz .",
        "titulo": "Descobrindo uma Matriz",
        "descricao": "Uma matriz é uma Matriz de Potências se atende 3 pré-requisitos: 1. É uma matriz quadrada. 2. A primeira coluna é formada apenas por 1's. 3. Para todo elemento (i, j) com j > 1, (i, j) = (i, 2)j-1 e (i, j) é diferente de zero. Por exemplo: Sua tarefa é descobrir se uma matriz quadrada pode ser transformada em uma Matriz de Potências utilizando dois tipos de operações: 1. Troca(x, y): Inverte as posições de todos os elementos das colunas x e y da matriz. 2. Transposta(): A matriz é transposta. Por exemplo: Logo P pode ser transformada em uma Matriz de Potência."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1349",
        "saida": "Para cada caso de teste seu programa deverá imprimir apenas uma linha contendo a taxa de precisão da imagem correspondente. A taxa de precisão deverá ser impressa como um número real com dois dígitos de precisão, e o último dígito decimal deverá ser arredondado. A entrada não conterá nenhum caso de teste onde diferenças em arredondamento serão significantes.",
        "entrada": "Seu programa deverá processar diversos casos de teste. Cada caso de teste especifica o tamanho da imagem do símbolo e os valores dos pixels da imagem padrão e da imagem do scanner. A primeira linha de um caso de teste contém um inteiro L que indica o tamanho, em pixels, da imagem (1 ≤ L ≤ 400). As próximas L linhas irão conter L inteiros cada, representando os valores dos pixels das linhas da imagem padrão. Após estas, as próximas L linhas irão conter os valores dos pixels das linhas da imagem do scanner. O final da entrada é indicado por L = 0.",
        "titulo": "Efeito Ruído",
        "descricao": "Pequenos e baratos scanners industriais podem apenas ler imagens em escala cinza, onde são imagens com pixels de valores de intensidade em um raio de inteiros [0, 255]. Uma companhia que fabrica máquinas de venda automáticas deseja utilizar estes pequenos scanners para validar os símbolos usados em suas máquinas. Símbolos são pequenos chips quadrados de metal com buracos estrategicamente colocados. Símbolos com diferentes buracos são utilizados para diferentes valores. Figura 1: Símbolo para uma máquina de vendas. Um scanner vai produzir uma imagem do símbolo introduzido pelo cliente e o programa de computador vai validar isso. Na imagem produzida pelo scanner, metal vai aparecer como pixels escuros (valores próximos a 0) e buracos vão aparecer como pixels mais claros (valores próximos a 255). Há dois problemas que devem ser resolvidos no processo de validação. O primeiro problema é que, visto que o símbolo é um quadrado, um cliente pode introduzi-lo na máquina de diversas maneiras. O segundo problema é que, graças à baixa qualidade da imagem gerada por aqueles scanners baratos, as mesmas poderão conter “ruídos” (erros). Para validar o símbolo, a máquina deverá comparar o resultado do scanner com uma “imagem padrão” do símbolo, previamente produzida usando um scanner de alta qualidade. Você deverá escrever um programa o qual, dada a imagem padrão de um símbolo e uma imagem produzida pelo scanner, determina a taxa de precisão a qual o símbolo obterá. A taxa de precisão é a porcentagem de pixels da imagem do scanner os quais o valor da intensidade difere em 100 ou menos dos pixels da imagem padrão. Como o símbolo pode ter sido introduzido de diversas maneiras, nós estamos interessados na maior taxa de precisão possível, considerando todas as posições do símbolo."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1670",
        "saida": "Para cada caso de teste seu programa deve gerar uma tabela verdade para a proposição denotada. Comece a tabela verdade repetindo a linha de entrada. Avalie a proposição (e as suas subfórmulas) para todas as atribuições para as suas variáveis, e use uma linha para cada atribuição. A linha deve ter o mesmo comprimento que a linha de entrada correspondente e deve conter apenas espaços e os caracteres 0 e 1. Imprima uma linha em branco após cada caso de teste. Deixe os símbolos de proposição (s1, ..., sn) na proposição denotada classificados em ordem alfabética. Então, todas as atribuições de 0 a s1 devem preceder as atribuições de 1 a s1. Dentro de cada um destes blocos de atribuições, todas as atribuições de 0 a s2 devem preceder as atribuições de 1 a s2, e assim por diante.",
        "entrada": "A entrada contém vários casos de teste, cada um em uma linha separada. Cada caso de teste denota uma proposição e pode conter quantidades arbitrárias de espaços no meio. O arquivo de entrada termina imediatamente após o símbolo de nova linha após o último caso de teste.",
        "titulo": "Lógica Booleana",
        "descricao": "Proposições são fórmulas lógicas que consistem em símbolos de proposição e operadores conectivos. Eles são definidos recursivamente pelas seguintes regras: Todos os símbolos de proposição (neste problema, caracteres alfabéticos minúsculos, por exemplo, a e z) são proposições. Se P é uma proposição, (!P) é uma proposição, e P é uma subfórmula direta dela. Se P e Q são proposições, (P&Q), (P|Q), (P-->Q), e (PQ) são proposições, e P e Q são subfórmulas diretas delas. Nada mais é uma proposição. As operações !, &, |, -->, e denotam negação, conjunção, disjunção, implicação e equivalência, respectivamente. A proposição P é uma subfórmula de uma proposição R se P=R ou se P é uma subfórmula direta de uma proposição Q e Q é uma subfórmula de R. Seja P uma proposição e atribui-se valores boleanos (isto é, 0 ou 1) a todos os símbolos de proposição que ocorrem em P. Isto induz um valor booleano para todas as subfórmulas de P, de acordo com a semântica padrão dos operadores lógicos: Negação  Conjunção  Disjunção  Implicação  Equivalência !0=1 0&0=0 0|0=0 0-->0=1 00=1 !1=0 0&1=0 0|1=1 0-->1=1 01=0 1&0=0 1|0=1 1-->0=0 10=0 1&1=1 1|1=1 1-->1=1 11=1 Dessa forma, o valor de P pode ser calculado. Este valor depende da escolha da atribuição de valores booleanos aos símbolos proposição. Se P contém n símbolos proposição diferentes, existem 2n atribuições diferentes. Para avaliar todas as tarefas possíveis, podemos utilizar tabelas de verdade. Uma tabela verdade contém uma linha por atribuição (ou seja, 2n linhas no total). Cada linha contém os valores de todas as subfórmulas sob a designação escolhida. O valor de uma subfórmula está alinhado com o símbolo da proposição, se a subfórmula é um símbolo proposição, e, de outra forma, com o centro do operador."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1880",
        "saida": "Para cada instância, imprima em uma única linha a sequência crescente das bases, de 2 a 16, para as quais a representação de N é capicua. Se a representação de N não for capicua para nenhuma base entre 2 e 16, imprima -1.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de uma única linha contendo um número inteiro N (0 ≤ N < 231) escrito na base 10.",
        "titulo": "Renzo e a Decoração Capicuânica",
        "descricao": "Nas ruínas de Wat Phra Si Sanphet (วัดพระศรีสรรเพชญ์) estão inscrições famosas que apenas recentemente tiveram seu significado desvendado. Vários números decoram as ruínas, escritos usando os dígitos tailandeses. Há dois anos, o famoso pesquisador peruano Renzo \"el intrépido\" Morales verificou que a maioria dos números encontrados nas ruínas são capicuas, isto é, representam o mesmo valor se lidos ao contrário. Por exemplo, 171 é capicua, mas 17 não é capicua. Intrigado pela presença de números que não são capicuas na decoração dasruínas, Renzo descobriu que, apesar de esses números não serem capicuas quando representados em base 10 (utilizada na escrita tailandesa), eles são capicuas se representados em uma base diferente. A representação em uma base b > 0 de um número N dado na base 10 é dada pela sequência amam-1...a1a0, tal que 0 ≤ ai ≤ b-1, para todo 0 ≤ i ≤ m, am > 0 e ambm + am-1bm-1 + ... + a1b + a0= N. No exemplo anterior, a representação em base 2 do número 17 é 10001, que é capicua. Para comprovar sua descoberta, Renzo quer que você escreva um programa que recebe um número representado na base 10 e verifica em quais bases, de 2 a 16, sua representação é capicua."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1965",
        "saida": "Seu programa deve imprimir duas linhas, informando na primeira a quantidade de coxinhas de esquerda na embalagem e o preço de cada uma, e na segunda as mesmas informações, mas para as coxinhas de direita. A saída deve obedecer rigorosamente o formato esclarecido nos exemplos abaixo.",
        "entrada": "Três linhas compõem a entrada. A primeira linha da entrada consiste de 3 valores, N, D e P, sendo o primeiro um inteiro e os outros fornecidos com dois dígitos após o ponto separador decimal: N (3 ≤ N ≤ 106) representa o número de medições reportadas pelo scanner, D (0.01 ≤ D ≤ 100.00) representa a diferença entre o preço de uma coxinha de esquerda e o preço de uma de direita, e P (0.01 ≤ P ≤ 10000000.00) representa o preço total das coxinhas na embalagem. A segunda linha da entrada consiste de N inteiros positivos não maiores que 30, os quais representam os resultados das medições reportadas. A última linha da entrada consiste unicamente: de uma coxinha de esquerda, representada por , se as coxinhas de esquerda são mais caras que as de direita; ou de uma coxinha de direita, representada por (>, caso contrário.",
        "titulo": "A Procura por Spock",
        "descricao": "‘Coxinha’ é o nome dado a uma tradicional comida brasileira que consiste de carne de frango desfiada envolta numa massa e frita. Recentemente, o Sr. Spock, o chefe do Enterprise, um restaurante em Chapecó, ganhou um importante prêmio gastronômico por fazer as coxinhas mais gostosas do mundo. Você devia experimentar uma coxinha do Sr. Spock. Elas são tão maravilhosas que o sabor notoriamente levará você aonde nenhum homem jamais esteve. Mas não é fácil conseguir uma coxinha no Enterprise. A procura por Spock é tanta que é preciso encomendar o pedido com pelo menos 42 dias de antecedência. O Sr. Spock gosta de fazer coxinhas de diferentes tamanhos e formatos. Para moldar uma coxinha, ele primeiro seleciona ao menos duas formas circulares sem fundo de mesma altura mas diâmetros todos distintos. Em seguida, põe uma forma sobre a outra em ordem decrescente de diâmetro da base até o topo, amarrando-as com um barbante na lateral. Finalmente, usa as formas para dar forma à sua coxinha. A primeira e a segunda figuras exibem a estrutura de formas vista respectivamente de cima e de lado. A terceira e a quarta figuras exibem a coxinha resultante, também vista respectivamente de cima e de lado. Visando atender melhor seus clientes, o Enterprise também oferece o serviço de entrega a domicílio. Algo importante que o Sr. Spock descobriu é que, para não perderem seu sabor e crocância, as coxinhas devem ser colocadas na embalagem sequencialmente, uma ao lado da outra, sempre deitadas de modo que as bases fiquem perfeitamente perpendiculares ao fundo da embalagem. Ainda, coxinhas consecutivas na sequência devem sempre ter ou suas bases ou seus topos se tocando, e as partes que se tocam devem sempre ter o mesmo diâmetro. Coxinhas cujos topos apontam para a esquerda são chamadas de ‘coxinhas de esquerda’, aquelas cujos topos apontam para a direita são chamadas ‘coxinhas de direita’, e o Sr. Spock usa a orientação das coxinhas para que o cliente saiba o tipo de tempero no recheio de cada uma. Não importando o tamanho, duas coxinhas são vendidas pelo mesmo preço se e somente se são ambas de esquerda ou ambas de direita. Há sempre ao menos uma coxinha de esquerda e ao menos uma coxinha de direita numa embalagem. A figura abaixo ilustra uma embalagem (linha tracejada) contendo 4 coxinhas (linhas contínuas). Como se pode ver, as coxinhas sempre cabem perfeitamente na embalagem. Você foi contratado para trabalhar na equipe de controle de qualidade do Enterprise. Sua função é pegar as embalagens já cheias, passar as embalagens por um scanner de raio-X e, com base nas medições reportadas pelo scanner, determinar quantas coxinhas de esquerda e quantas de direita há nas embalagens. As medições são feitas da esquerda para a direita, a um espaçamento idêntico à altura das formas usadas na modelagem das coxinhas. Em cada medição é reportada a altura da coxinha dentro da embalagem naquele ponto, mas apenas se o resultado da medição é diferente do resultado da última medição (senão, nada é reportado). Na figura acima, 14 medições são ilustradas pelas linhas pontilhadas. Note que apenas 10 delas são reportadas. Como você é novo na equipe, seus colegas esconderam de você os preços das coxinhas e querem não apenas que você calcule quantas coxinhas de esquerda e quantas coxinhas de direita há na embalagem, mas também que adivinhe o preço das coxinhas de esquerda e o preço das coxinhas de direita. Para tanto, eles apenas lhe contaram qual o preço total das coxinhas na embalagem, qual a diferença entre os preços e o tipo das coxinhas que são mais caras."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1467",
        "saida": "Para cada caso de teste, seu programa deve produzir uma única linha, contendo um único caractere. Se o vencedor é Alice o caractere deve ser ‘A’, se o vencedor é Beto o caractere deve ser ‘B’, se o vencedor é Clara o caractere deve ser ‘C’ e se não há vencedor o caractere deve ser ‘*’ (asterisco).",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste consiste de uma única linha, que contém três inteiros A, B e C (A,B,C só podem ser 0 ou 1), indicando respectivamente os valores escolhidos por Alice, Beto e Clara. O final da entrada é determinado por EOF (End of File).",
        "titulo": "Zerinho ou Um",
        "descricao": "Todos devem conhecer o jogo Zerinho ou Um (em algumas regiões também conhecido como Dois ou Um), utilizado para determinar um ganhador entre três ou mais jogadores. Para quem não conhece, o jogo funciona da seguinte maneira. Cada jogador escolhe um valor entre zero ou um; a um comando (geralmente um dos competidores anuncia em voz alta “Zerinho ou... Um!”), todos os participantes mostram o valor escolhido, utilizando uma das mãos: se o valor escolhido foi um, o competidor mostra o dedo indicador estendido; se o valor escolhido foi zero, mostra a mão com todos os dedos fechados. O ganhador é aquele que tiver escolhido um valor diferente de todos os outros; se não há um jogador com valor diferente de todos os outros (por exemplo todos os jogadores escolhem zero, ou um grupo de jogadores escolhe zero e outro grupo escolhe um), não há ganhador. Alice, Beto e Clara são grandes amigos e jogam Zerinho a toda hora: para determinar quem vai comprar a pipoca durante a sessão de cinema, quem vai entrar na piscina primeiro, etc. Jogam tanto que resolveram fazer um plugin no Facebook para jogar Zerinho. Como não sabem programar, dividiram as tarefas entre amigos que sabem, inclusive você. Dados os três valores escolhidos por Alice, Beto e Clara, cada valor zero ou um, escreva um programa que determina se há um ganhador, e nesse caso determina quem é o ganhador."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1980",
        "saida": "Para cada caso de teste você deverá imprimir quantos anagramas são possíveis formar com os caracteres informados.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste terá uma única linha S com no máximo 15 caracteres. A entrada termina quando S = 0 e não deve ser processada.",
        "titulo": "Embaralhando",
        "descricao": "Gabriel é aluno do curso de ciência da computação, ele sempre gostou de jogos de lógica, um exemplo é o cubo mágico, os alunos ficam admirados em ver a facilidade que ele tem para resolvê-lo. Gabriel decidiu montar seu próprio jogo envolvendo lógica, a primeira informação que ele irá precisar para montar o jogo é de quantos anagramas é possível formar com certa quantidade de caracteres distintos sem espaço. Como ele tem se dedicado muito para maratona de programação, ele acaba não tendo tempo para verificar isso, por isso precisará de sua ajuda. Sua tarefa é, dado um conjunto de caracteres distintos e sem espaços, informar quantos anagramas é possível formar."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1453",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma resposta. A primeira linha de resposta deve conter um identificador do caso de teste, no formato '#i’, onde i começa a partir de 1 e é incrementado para cada caso de teste. Então, se houver uma configuração válida para o quebra-cabeças, o programa deve produzir M linhas de saída, que descreve uma tal configuração. Cada linha deve conter dois inteiros L e C, separados por um espaço em branco, indicando a posição de um quadrado preto (L indica o número da linha e C indica um número da coluna, com 1 ≤ L ≤ N e 1 ≤ C ≤ M). Se mais de uma configuração válida é possível, imprima qualquer uma delas. Se não for possível uma configuração válida para o quebra-cabeça, o seu programa deve produzir como resposta uma única linha contendo o valor 0.",
        "entrada": "A entrada possui diversos casos de teste. A primeira linha de cada caso de teste possui três inteiros N, M e K, indicando respectivamente o número de linhas no quebra-cabeça (2 ≤ N ≤ 2000) o número de colunas no quebra-cabeça (1 ≤ M ≤ 2000) e o número dos comprimentos das palavras (1 ≤ K ≤ 4000). A segunda linha contém K inteiros Wk, representando os comprimentos das palavras que devem ser colocadas na direção vertical (1 ≤ Wk ≤ N-1). O fim da entrada é indicado por N = M = K = 0.",
        "titulo": "Palavras-Cruzadas Sem Palavras",
        "descricao": "Embora jogos de caça-palavras remontam à tempos antigos – um caça-palavras foi encontrado nas ruínas Romanas de Pompéia – foi só em 1913 que o Sunday New York World publicou um quebra-cabeça chamado de 'palavras-cruzadas' inventado por Arthut Wynne, um jornalista que tinha o trabalho de semanalmente elaborar um desafio para a seção de quadrinhos do jornal. O quebra-cabeça foi um sucesso imediato e se tornou uma característica semanal, e é hoje, provavelmente, o jogo de palavras mais popular e difundido no mundo. (Para as pessoas estranhas que não conhecem isso, palavras-cruzadas é um quebra-cabeça no qual o jogador deve preencher com palavras indicadas por pistas verbais, um padrão axadrezado, de modo que elas sempre cabem onde elas cruzam.) A configuração de uma palavra-cruzada é a figura formada por casas vazias e por casas pretas no quebra-cabeça. Durante os primeiros anos, vários tipos de formas e figuras (diamante, círculo, quadrado) foram experimentados antes da familiar forma retangular com algumas casas pretas (usadas para separar palavras) ser adotado universalmente. Para este problema, vamos definir que a configuração para um quebra-cabeça com N linhas e M colunas é válida apenas se cada coluna contém exatamente um quadrado preto; e quadrados pretos não estão em colunas adjacentes na mesma linha. Configuração inválida (à esquerda) e configuração válida (à direita). Dada uma lista com os comprimentos das palavras, todas as quais devem ser colocadas para direção vertical, seu trabalho é encontrar uma configuração para um quebra-cabeça com N linhas, M colunas e M quadrados pretos."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1360",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo a descrição da carta escondida.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N especificando o número de casos de teste (1 <= N <= 10000). Cada caso de teste é composto por uma linha, que contém a descrição das quatro cartas, separadas por um espaço, na ordem em que foram apresentados pelo assistente.",
        "titulo": "Truque de Mágica",
        "descricao": "Um mágico inventou um novo truque de cartas e apresentou-o na prestigiosa Conferência Americana dos Mágicos (ACM). O truque foi tão bom que recebeu o \"Prêmio de Melhor Mágica\" na conferência. O truque requer três participantes: o próprio mágico, um espectador e um assistente. Durante o truque o espectador é convidado a embaralhar um baralho de 52 cartas e escolher aleatoriamente 5 cartas dele. As cinco cartas são dadas para o assistente (sem o mágico ver as cartas) que olha para eles e mostra quatro das cinco cartas um por uma para o mágico. Depois de ver as quatro cartas o mágico magicamente adivinha a quinta carta faltante! O truque funciona porque uma vez que o assistente tem as cinco cartas que ele sempre pode escolher quatro delas e usa-las para passar informações em 'código' sobre a quinta carta. O código é baseado em uma ordenação de das cartas. As cartas são ordenadas primeiro por seus trajes e, em seguida, pelo seu valor de face. Usaremos o seguinte ordem: H < C < D < S (Copas, Paus, Ouros, Espadas), e 1 < 2 < ... < 9 < T < J < Q < K para valores de face, onde T, J, Q e K representam Dez (10), Valete (J), Rainha (Q) e Rei (K), respectivamente. Suponha que o espectador escolheu os cartões de JD, 8S, 7H, 8C, QH (Valete de Ouros, 8 de Espadas, 7 de Copas, 8 de Paus e Rainha de Copas). A estratégia para o assistente é o seguinte: Encontre um naipe s que aparece pelo menos duas vezes no conjunto de cartas escolhidas (Corações no exemplo). Se mais de um terno aparece duas vezes, escolher aquele com ordem menor. Esconda a carta x com naipe s que está no máximo seis posições à frente na ordem cíclica 1 < 2 <... <T <J <Q <K <1 <2 <... de outra carta y do mesmo naipe. Isto é sempre possível uma vez que há apenas treze cartas do mesmo naipe (no exemplo, o ssistente esconde QH). Se dois ou mais cartões de satisfazer os critérios acima, escolha aquele com o valor de face menor. Mostrar y para o mágico. Neste ponto, o mago sabe que o naipe da carta oculta, e sabe também que o valor de face da carta escondido x é, no máximo, seis posições na frente do valor de face do y. Com as três cartas que a assistente deixou, ele deve codificar um número entre 1 e 6. Isso pode ser feito da seguinte forma. Diga as três cartas Z1, Z2, Z3 estão na ordem z1 < z2 < z3. Cada um das seis possíveis ordens em que estas três cartas podem ser apresentadas podem ser interpretados para transmitir informação acerca de um número. - Z1, z2, z3 significa 1, - Z1, Z3, z2 significa 2, - Z2, Z1, Z3 significa 3, - Z2, Z3, z1 significa 4, - Z3, Z1, Z2 significa 5, - Z3, Z2, Z1 significa 6. Desta forma, uma vez que o mágico visualiza quatro cartas, uma a uma, ele tem informações suficientes para \"magicamente\" adivinhar a quinta carta! Seu trabalho é desenvolver um programa que, dadas as quatro cartas mostradas pelo assistente, informe ao mágico qual é a carta escondida."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1741",
        "saida": "Para cada caso teste, imprima uma única linha no seguinte formato. “The answer is N.” se a expressão é válida, pode ser resolvida e o resultado é N “Division by zero.” se a expressão é válida sintaticamente, mas existe divisão por 0. “Invalid expression.” se a expressão não pode ser resolvida em NRJ Todos os resultados, tanto finais quanto intermediários caberão em um inteiro com sinal de 32 bits.",
        "entrada": "A entrada contém diversos cados testes. Cada caso teste é uma linha com n caracteres (1 ≤ n ≤ 2×106) que pode possivelmente representar uma expressão em NRJ. Essa expressão conterá apenas dígitos de 0 a 9 e os operadores mencionados acima separados por um único espaço. A entrada termina com fim de arquivo.",
        "titulo": "Notação Reversa de João",
        "descricao": "O pequeno João está aprendendo como resolver expressões aritmética. Mas as expressão convencionais são muito chatas para ele. Por causa disso, o seu pai está ensinando como resolver expressões escritas em formas diferentes. A primeira forma que ele aprendeu é a Notação Polonesa Reversa, uma forma interessante que não precisa de parentêses . João achou interessante essa notação, mas achou que poderia criar uma ainda mais legal. Por isso ele criou a Notação Reversa de João (NRJ). João chegou a seguinte definição recursiva para NRJ Um único dígito é uma expressão válida e o resultado é o valor deste dígito. Um operador binário (+, −, * or /), seguido por duas expressões válidas, é uma expressão válida. O resultado dessa expressão é aplicação do operador com os dois argumentos trocados. Isto é, + a b vale a soma dos dois operandos - a b, vale b - a, * a b vale o produto dos dois operandos e /a b vale floor(b/a). João agora se diverte escrevendo e resolvendo expressões nesse novo formato. Como ele é uma criança aventureira, ele gosta de expressões grandes. Porém, algumas vezes ele acha algum problema. Parte da expressão que ele escreve não tem solução, porque elas estão mal-formadas ou ocasionam divisão por 0. Mas quando ele resolve novamente, encontra outro valor Agora ele gostaria de ter certeza do resultado. Como você realmente gosta do João, você escreveu um programa para ajudá-lo"
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1612",
        "saida": "Para cada caso, imprima o tempo máximo que a formiguinha pode ficar no tronco.",
        "entrada": "Na primeira linha você terá um inteiro T (T <= 100) indicando o número de casos de teste. Para cada caso teremos uma única linha com o número inteiro N (1 ≤ N ≤ 109) indicando o tamanho do tronco da árvore.",
        "titulo": "Formiguinha",
        "descricao": "Uma formiguinha está andando sobre um tronco de árvore de tamanho N metros. Podemos considerar que a formiga pode assumir as posições de 0 até N-1. Assuma que ela está no eixo X dos planos coordenados, porém ela começa em uma posição desconhecida. A única coisa que se sabe sobre sua posição inicial é que é um número inteiro. A formiguinha pode dar um passo para a esquerda ou direita, e este passo a desloca de um metro. Se ela está na posição P e dá um passo para a direita, ela assumirá a posição P+1. Se o passo for para a esquerda, ela assumirá a posição P-1. Se em algum momento ela assumir a posição -1 ou a posição N, ela cairá do tronco! Um passo leva um segundo para ser completado, e a formiga sempre está se movendo. Considerando que a formiga fará sempre a pior sequência de passos possível, escolha uma posição inicial de modo que maximize o tempo em que a formiga permaneça no tronco. Imprima este tempo."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1438",
        "saida": "Para cada caso de teste da entrada, seu programa deve imprimir uma única linha, contendo um único inteiro: o número mínimo de caixas, além da caixa 1, que Joãozinho precisa desempilhar para recuperar o seu inventário.A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada é composta de vários casos de teste. A primeira linha de cada caso de teste contém dois números inteiros N e P , indicando, respectivamente, o número de caixas e o número de pilhas (1 ≤ P ≤ N ≤ 1.000). As caixas são numeradas seqüencialmente de 1 a N. Cada uma das P linhas seguintes descreve uma pilha. Cada linha contém um inteiro Qi, indicando quantas caixas há na pilha i, seguido de um espaço em branco, seguido de uma lista de Qi números, que são os identificadores das caixas. Os elementos da lista são separados por um espaço em branco.Todas as pilhas contêm pelo menos uma caixa, e todas as caixas aparecem exatamente uma vez na entrada. As caixas em cada pilha são listadas em ordem, da base até o topo da pilha. Todas as caixas têm o mesmo formato. O final da entrada é indicado por N = P = 0. A entrada deve ser lida da entrada padrão.",
        "titulo": "Desempilhando Caixas",
        "descricao": "Joãozinho e sua família acabaram de se mudar. Antes da mudança, ele colocou todos os seus livros dentro de várias caixas numeradas. Para facilitar a retirada dos livros, ele fez um inventário, indicando em qual caixa cada livro foi colocado, e o guardou na caixa de número 1.Chegando no seu novo quarto, ele viu que seus pais guardaram as caixas em várias pilhas, arrumadas em fila, com cada pilha encostada na pilha seguinte.Joãozinho é um garoto muito sistemático. Por isso, antes de abrir qualquer outra caixa, ele quer recuperar seu inventário. Joãozinho também é um garoto muito desajeitado. Para tirar uma caixa de uma pilha, ele precisa que a caixa esteja no topo da pilha e que ao menos um de seus lados, não importa qual, esteja livre (isto é, não tenham nenhuma caixa adjacente).Para isso, Joãozinho precisa desempilhar algumas das caixas. Como o quarto dele é bem grande, ele sempre tem espaço para colocar as caixas retiradas em outro lugar, sem mexer nas pilhas que os pais dele montaram. Para minimizar seu esforço, Joãozinho quer que você escreva um programa que, dadas as posições das caixas nas pilhas, determine quantas caixas Joãozinho precisa desempilhar para recuperar seu inventário."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1460",
        "saida": "Para cada caso de teste da entrada, seu programa deve imprimir Q+1 linhas. Cada uma das primeiras Q linhas deve conter um único inteiro, indicando o maior tamanho, em número de propriedades, de uma área quadrada contígua com alturas dentro do intervalo especificado na respectiva consulta. A última linha a ser impressa para cada caso de teste é usada como separadora e deve conter um único caractere '-' (conhecido como hífen ou \"sinal de menos\").",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M, separados por um espaço simples, representando, respectivamente, o número de propriedades na direção Norte-Sul (1 ≤ N ≤ 500) e o número de propriedades na direção Oeste-Leste (1 ≤ M ≤ 500) da região de interesse. Cada uma das próximas N linhas contém M inteiros Hi, j, separados por espaços simples, indicando as alturas das propriedades na região de interesse (0 ≤ Hi,j ≤ 105, com 1 ≤ i ≤ N e 1 ≤ j ≤ M; também, Hi-1, j ≤ Hi, j e Hi, j-1 ≤ Hi, j). A próxima linha contém um inteiro Q indicando o número de consultas (1 ≤ Q ≤ 104). Cada uma das próximas Q linhas descrevem uma consulta e contém dois inteiros L e U, separados por um espaço em branco, indicando um intervalo de alturas (0 ≤ L ≤ U ≤ 105). As alturas das propriedades a serem alugadas devem ser maiores ou iguais a L e menores ou iguais a U. O último caso de teste é seguido de uma linha contendo dois zeros separados por um espaço simples.",
        "titulo": "Parreiral",
        "descricao": "Na Quadradônia, todas as propriedades rurais são quadradas, todas possuem a mesma área, todas são perfeitamente planas e todas possuem os lados alinhados aos eixos Norte-Sul e Leste-Oeste. Como as propriedades são planas, as colinas na Quadradônia parecem uma série de degrais gigantes, com tamanhos diferentes. Em uma certa montanha, uma situação interessante ocorre em uma área retangular de N x M propriedades. Começando de qualquer lugar da região, ao ir do Oeste para o Leste, as propriedades possuem alturas não-decrescentes. De forma simular, atravessar a região do Norte para o Sul, começando em qualquer lugar, as propriedades também possuem alturas não-decrescentes. Uma grande empresa de vinhos na Quadradônia quer alugar algumas propriedades daquela região para cultivar uvas. A empresa está interessada em uma variedade especial de parreiras que só produzem uvas se cultivadas em propriedades cujas alturas estão em um certo intervalo. Ou seja, a empresa está interessada em alugar propriedades cujas alturas sejam maiores ou iguais a uma dada altura L e menores ou iguais a outra dada altura U. Para facilitar a colheita, as propriedades devem formar uma área contígua. E como todos na Quadradônia gostam de quadrados, a área a ser alugada deve ter a forma de um quadrado. A empresa ainda não decidiu qual variedade de uvas irá produzir, e portanto possui uma lista de consultas envolvendo intervalos, um para cada variedade de uva. A figura abaixo mostra uma área de interesse de dimensão 4 x 5 (em número de propriedades) com exemplos de áreas que a empresa poderia alugar para cultivar uvas em alturas dentro dos intervalos dados nas figuras. ​ Você deve escrever um programa que, dadas a descrição da área de interesse na montanha e uma lista de consultas contendo intervalos de alturas, determina, para cada consulta, o maior lado (em número de propriedades) da maior área contígua quadrada com alturas dentro do intervalo em questão."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1615",
        "saida": "Para cada caso, imprima o número do candidato vencedor, ou -1 caso haverá segundo turno.",
        "entrada": "Na primeira linha você terá um inteiro T (T ≤ 100) indicando o número de casos de teste. Para cada caso de teste, na primeira linha você terá os números inteiros N (1 ≤ N ≤ 10) e M (1 ≤ M ≤ 103* ou 1 ≤ M ≤ 5*104**). Na próxima linha, M inteiros seguirão separados por espaços, indicando o candidato em que cada pessoa votou, ou seja, o número escrito em cada pedaço de papel dentro da urna. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste.",
        "titulo": "Insatisfação nas Eleições",
        "descricao": "Uma eleição foi feita em uma pequena cidade de M habitantes, onde havia N candidatos. As pessoas escreviam o número do candidato em um pedaço de papel, e inseriam na urna. Ao final da eleição, se um candidato receber uma quantidade estritamente maior do que 50% dos votos, ele é considerado o vencedor. Caso contrário um segundo turno de eleições é feito. Como o processo de contagem manual é muito lento, você deve desenvolver um programa que decide qual o candidato vencedor ou se nenhum recebeu votos suficientes e um segundo turno será necessário."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1532",
        "saida": "Para cada caso de teste, imprima uma linha contendo a palavra “possivel” (sem aspas), caso seja possível arremessar a bola a uma velocidade menor ou igual a V de forma que ela quique no buraco, ou “impossivel”, caso contrário.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste contém dois inteiros, N e V (1 ≤ N ≤ 1000, 1 ≤ V ≤ 30), representando a distância do buraco e a velocidade máxima com a qual você consegue arremessar a bola. O último caso de teste é indicado quando N = V = 0, o qual não deverá ser processado.",
        "titulo": "Arremesso de Bolas",
        "descricao": "Seus amigos inventaram uma nova competição: Arremesso de bolas. O objetivo é simples, basta arremessar uma bola de forma que ela caia dentro de um buraco N metros a sua frente. Quando a bola é arremessada, digamos que à uma velocidade inteira V, ela permanece no ar por V metros e então quica. Ela repete esse processo V vezes. Após ela quicar V vezes, ela muda sua velocidade para V-1, e o processo anterior se repete, até que a velocidade seja igual a 0. Por exemplo, se a bola for arremessada a uma velocidade igual a 3, ela quicará nos seguintes pontos: 3, 6, 9, 11, 13, 14; conforme pode ser visto na imagem. Você consegue arremessar a bola à uma velocidade inteira menor ou igual a V. Dada a distância do buraco, diga se é possível que você arremesse a bola e que ela quique exatamente no buraco, acertando-o."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1896",
        "saida": "A saída deverá conter \"Y\" caso Charlinho consiga realizar uma combinação válida para invocar Prassódia ou \"N\" caso contrário.",
        "entrada": "A primeira linha da entrada contém 4 inteiros, o primeiro inteiro N ( 1 ≤ N ≤ 20) representa o número de cartas na mesa seguido por 3 inteiros A,D,H (1 ≤ A,D,H, ≤ 1000) que representam respectivamente o ataque, a defesa e a habilidade exata para invocar Prassódia. Cada uma das N linhas seguintes representam uma carta da mesa, onde cada linha contém os atributos na ordem X,Y,Z (1 ≤ X,Y,Z ≤ 50) ataque, defesa e habilidade respectivamente.",
        "titulo": "É Hora do Duelo!",
        "descricao": "Monstros de Duelo é o mais famoso campeonato de cartas do mundo. Cada duelo é disputado por dois jogadores, onde cada jogador começa com 8.000 Pontos de Vida e com o seu Deck (Baralho). Cada carta representa um monstro que tem os atributos de Ataque, Defesa e habilidade. Estamos no duelo final com os dois maiores duelistas da história. De um lado Charlinho, um garoto que gosta muito de estudar, mas que também sabe sentir o coração das cartas. Do outro lado Gilmar, que não foi criado a leite com pêra, mas é reconhecido como o Mestre das Cartas. É a vez de Charlinho, e ele acaba de combinar seus monstros na mesa para obter o proíbido \"Prassódia\". Prassódia é o monstro mais forte do jogo, e quando invocado, a partida é finalizada na hora e o jogador que o invocou ganha o duelo. Para invocar Prassódia é necessário combinar duas ou mais cartas na mesa somando ataque com ataque, defesa com defesa e habilidade com habilidade para obter os atributos de Prassódia informados no início do duelo. Se uma carta for escolhida para ser combinada, os atributos da carta tem que ser utilizados por inteiro, sendo inválido apenas utilizar o ataque ou apenas utilizar a defesa ou apenas a habilidade daquela carta e ainda não podendo utilizar apenas uma parte do ataque e/ou uma parte da defesa e/ou uma parte da habilidade. Gilmar se espanta por um momento, pois ele foi o único em toda a história que conseguiu invocar Prassódia, mas acaba duvidando da jogada de Charlinho porque haviam várias cartas na mesa, o que tornaria tal jogada muito suspeita.  Você é o Juíz do duelo e ficou responsável por avaliar se o Charlinho realmente conseguiu invocar ou não Prassódia com as cartas na mesa."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1771",
        "saida": "Para cada cartela analisada imprima uma linha contendo uma das três palavras: “OK” caso a cartela seja válida, “RECICLAVEL” caso exista alguma permutação de números que faça com que a cartela se torne válida ou “DESCARTAVEL” caso não exista tal permutação.",
        "entrada": "Cada caso de teste contém uma linha 24 números inteiros separados por espaço. O exemplo da figura conteria a sequência 15, 28, 36, 49, 65, 13, ..., 53, 69. A entrada termina com o fim de arquivo (EOF).",
        "titulo": "Cartelas de Bingo Aleatórias",
        "descricao": "Você pediu ao estagiário que fizesse um programa para gerar cartelas de bingo aleatoriamente. O estagiário dispensou suas explicações, alegando que sabia como o bingo funcionava. E qual foi o resultado de tanta pressa? O estagiário simplesmente gerou 24 números aleatórios diferentes (no intervalo [1, 75] para cada cartela, sem respeitar os intervalos em que cada número pertencia (B -> [1, 15], I -> [16, 30], ...)). Você decidiu então fazer um programa para julgar as cartelas geradas pelo programa do estagiário."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1755",
        "saida": "Para cada caso de teste imprima uma única linha contendo um valor de ponto flutuante com 2 dígitos após o ponto decimal: o maior troco que Joãozinho poderá obter.",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 2000), o número de casos de teste. Cada caso de teste é composto por 2 linhas. A primeira linha contém os inteiros D (10 ≤ D ≤ 500) e N ( 2 ≤ N ≤ 300), indicando a quantia que Joãozinho levou ao mercado e a quantidade de marcas diferentes disponíveis (assuma que o estoque da loja é suficiente para vender qualquer quantidade de qualquer produto), respectivamente. A segunda linha contém N números de ponto flutuante pi, representando o preço da unidade fabricada pela marca mi. Assuma que não haverá nenhum preço com mais de 2 dígitos após o ponto decimal.",
        "titulo": "O Troco",
        "descricao": "O pai de Joãozinho lhe pediu que fosse à venda comprar um determinado ingrediente e lhe deu as seguintes instruções: 1 - Não me importo com qual marca você vai escolher, contanto que compre o máximo possível. 2 - Não volte de mãos vazias (compre pelo menos um produto). 3 - Não me traga produtos de marcas diferentes. 4 - Se não violar nenhuma das restrições anteriores o troco é seu. Joãozinho não é muito bom em matemática e pediu sua ajuda para escolher a marca que maximizaria seu troco de acordo com as restrições impostas. Você não gosta de pessoas preguiçosas e prometeu a Joãozinho que faria um programa para resolver apenas uma parte do problema: encontrar o valor máximo (sem dizer qual marca ele deve escolher para obter tal troco)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1920",
        "saida": "Para cada caso, exiba C > P caso Chiquinha vença a disputa, P > C caso Pópis vença ou C = P caso termine empatado.",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia um inteiro N (1 ≤ N ≤ 1000) representando a quantidade de moedas que cada uma arremessou. A segunda linha conterá quatro inteiros, CX, CY (-1000 ≤ CX, CY≤ 1000), R1 e R2 (1 ≤ R1 < R2 ≤ 5000), representando respectivamente, o centro da fonte e os raios como mostram a figura acima. Após isso, 2*N linhas seguem, cada uma contendo dois inteiros X e Y, representando a coordenada x e y de onde uma moeda caiu. Lembre-se que elas jogam alternadamente e Chiquinha sempre joga primeiro. A entrada termina com N = 0, a qual não deve ser processada.",
        "titulo": "Fonte dos Desejos",
        "descricao": "Cansada de jogar moedas na fonte dos desejos e não ter nenhum desejo atendido, Chiquinha e Pópis decidiram usar a fonte como alvo na brincadeira de arremesso de moedas. Elas irão tomar uma distância da fonte e jogar, alternadamente, N moedas cada tentando acertá-la. Cada moeda arremessada pode cair dentro da fonte, na borda ou fora. Dado a coordenada (cx, cy) do centro da fonte, o raio de onde é considerado dentro(r1) , e o raio da borda(r2), sua tarefa é checar os arremessos de ambas e dizer quem acertou mais moedas dentro da fonte. Em caso de empate, ganha quem acertou mais nas bordas. Se o empate persistir, consideraremos que a brincadeira terminou empatada. Obs: Se uma moeda cair exatamente nos extremos de qualquer círculo, será considerado borda (pontos vermelhos na imagem abaixo)."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1374",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha contendo dois inteiros separados por um único espaço: o número de dias para os quais o consumo pode ser determinado precisamente e o consumo desses dias.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de medições que eles fizeram (2 ≤ N ≤ 103). Cada uma das N linhas seguintes contém quatro inteiros D, M, Y e C, separados por espaços, indicando respectivamente o dia (1 ≤ D ≤ 31), mês (1 ≤ M ≤ 12), ano (1900 ≤ Y ≤ 2100), e consumo (0 ≤ C ≤ 106) lidos no início de cada dia. Essas N linhas são ordenadas em ordem crescente pela data e podem incluir anos bissextos. A sequência de consumos é estritamente crescente (isto é, duas leituras sempre têm valores diferentes). Você pode assumir que D, M e Y representam datas válidas. Lembre-se que um ano é bissexto se ele é divisível por 4 e não por 100, ou então, se o ano é divisível por 400. O final da entrada é indicado por uma linha contendo apenas um zero.",
        "titulo": "Eletricidade",
        "descricao": "Martin e Isa pararam de jogar jogos loucos e finalmente se casaram. Ótimas notícias! Eles estão vivendo uma nova vida de felicidade para ambos e, também, estão se mudando para uma nova casa em um lugar remoto, comprado com a maior parte de suas economias. A vida é diferente nesse novo lugar. Particularmente, a energia elétrica é muito cara, e eles querem manter tudo sob controle. Por isso Martin propôs que mantivessem um histórico diário de quanta eletricidade foi consumida na casa. Eles têm um marcador de eletricidade, que mostra um número com a quantidade de KWh (kilowatts-hora) que foi consumida desde sua chegada. No começo de cada dia eles consultam o marcador de eletricidade, e anotam o consumo. Alguns dias Martin faz isso, em outros é a Isa quem faz. Desse jeito, eles conseguirão observar as diferenças de consumo entre dias consecutivos e saber quanto foi gasto. Mas alguns dias eles simplesmente esqueceram de anotar, então, depois de muito tempo, o histórico está incompleto. Eles têm uma lista de datas e consumos, mas nem todas datas são consecutivas. Eles só querem levar em conta os dias para os quais o consumo pode ser determinado precisamente, e precisam de ajuda."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1890",
        "saida": "Para cada instância, imprima uma linha com a quantidade de placas distintas que podem ser geradas pelo sistema correspondente. É garantido que a resposta sempre será menor que 231.",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste em uma linha contendo os números inteiros C (0 ≤ C ≤ 6) e D (0 ≤ D ≤ 9) representando as quantidades de consoantes e dígitos, respectivamente, em um sistema de placas.",
        "titulo": "Emplacando os Tuk-tuks",
        "descricao": "Na Tailândia, um tipo popular de transporte público é o chamado tuk-tuk (ตุ๊กตุ๊ก), também conhecido como auto-riquixá. O governo de Phuket decidiu criar um novo sistema de placas para os tuk-tuks, com a finalidade de diferenciá-los dos outros tipos de veículos. Devido ao turismo, que é uma das principais atividades econômicas da província, a frota de tuk-tuks vem crescendo rapidamente. Espera-se que com o novo sistema de placas seja possível criar uma quantidade suficiente de placas distintas para atender à demanda pelos próximos 42 anos. Um sistema de placas é definido por dois números, C e D. Uma placa nesse sistema é uma cadeia com C consoantes seguidas por D dígitos. Uma placa não pode ser vazia (sem consoantes e sem dígitos). No alfabeto tailandês existem 44 consoantes e 10 dígitos. No entanto, como os símbolos de algumas consoantes são parecidos com os de outras, o governo decidiu que serão utilizadas somente 26 consoantes, cujos símbolos foram considerados suficientemente diferentes. Para garantir que existirão tuk-tuks suficientes para os competidores da Final Mundial da Maratona de Programação em 2016, o governo de Phuket quer saber qual o número de placas distintas é possível gerar com um determinado sistema de placas."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1206",
        "saida": "Para cada instância, imprima uma linha com a palavra SIM, se o rei branco está em xeque mate, ou a palavra NAO, caso contrário.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 10) indicando o número de peças pretas. A linha seguinte contém a descrição das posições das N peças pretas separadas por um espaço. A terceira linha contém a descrição do rei branco. Uma descrição de uma peça de xadrez consiste em 3 caracteres. O primeiro indica se a peça é um peão (P), torre (T), bispo (B), rainha (R) ou rei (W). Note que o grande mestre não usava cavalos para facilitar para que ainda estava começando a aprender o jogo. O segundo caracter, entre ’a’ e ’h’, indica a coluna na qual a peça está e o terceiro, de ’1’ a ’8’ indica a linha. Em nenhuma das instâncias ocorre a situação na qual o rei branco e o rei preto são adjacentes.",
        "titulo": "Desafio de São Petersburgo",
        "descricao": "A Russia sempre foi berço de grandes mestres de xadrez. Poucos sabem, mas a FIDE (Federação Internacional de Xadrez), que é o órgão máximo regulador do jogo de xadrez foi fundada em 1924, a partir de um movimento iniciado 10 anos antes no campeonato mundial da modalidade que ocorreu em São Petersburgo em 1914. Hoje, entre os 10 melhores jogadores do mundo, segundo a FIDE, três são russos. O torneio de São Petersburgo ficou também conhecido pelas tentativas dos grandes mestres de popularização do jogo. Na época os maiores mestres (como Capablanca) foram às ruas propor desafios para as pessoas com o objetivo de interessá-las a praticar o jogo. Um desses desafios ficou conhecido como o desafio de São Petersburgo. O grande mestre montava uma situação em que as peças brancas tinham apenas o rei, e o objetivo era que a pessoa dissesse se o rei branco estava ou não em xeque mate. Na situação descrita acima, o rei branco está em xeque mate se ele está sendo atacado e qualquer movimento que ele faça o leva para uma casa que também está sendo atacada. O que você precisa saber sobre xadrez Considere que inicialmente as peças do jogador preto ficam nas linhas 7 e 8 enquanto as do jogador branco iniciam nas linhas 1 e 2. Não pode haver duas peças na mesma casa. As peças consideradas no problema (peão, torre, bispo, rainha e rei) não podem passar por cima de outras peças, ou seja, se durante sua movimentação existir alguma peça no seu caminho você deve parar antes ou atacar a peça (se ela for do oponente), tomando o seu lugar. A movimentação e o ataque de cada tipo de peça são da seguinte forma: # Peão: anda apenas uma casa para frente (em direção a linha 1) podendo atacar em qualquer uma das duas diagonais imediatamente a sua frente; # Torre: anda/ataca quantas casas quiser ou na horizontal, ou na vertical; # Bispo: anda/ataca quantas casas quiser na diagonal; # Rainha: anda/ataca quantas casas quiser ou na horizontal, ou na vertical, ou na diagonal; # Rei: anda/ataca apenas uma casa ou na horizontal, ou na vertical, ou na diagonal."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2019",
        "saida": "Para cada caso de teste, imprima uma linha contendo o tamanho da menor sequência e o número de sequências que Cino pode escolher, separados por um único espaço. É garantido que um inteiro de 64 bits com sinal seja suficiente para armazenar a resposta.",
        "entrada": "A entrada é constituída de múltiplos casos de teste. Cada caso de teste é constituído por 3 linhas. A primeira linha de cada caso de teste contém 3 inteiros, N (1 ≤ N ≤ 50), X e Y (1 ≤ X, Y ≤ 103), representando respectivamente a quantidade de pontos turísticos, o tamanho da sequência escolhida por Cici e o tamanho da sequência escolhida por Cini. A segunda linha contém X inteiros, representando a sequência escolhida por Cici. A terceira linha contém Y inteiros, representando a sequência escolhida por Cini. A entrada termina com final de arquivo (EOF).",
        "titulo": "Cici, Cini e Cino",
        "descricao": "Cici, Cini e Cino viajaram para o Polo Norte, e querem conhecer os principais pontos turísticos de lá. Para ajuda-los, o Papai Noel decidiu emprestar três renas para eles. As renas do Papai Noel tem capacidade de se teletransportarem, fazendo que as viagens entre os pontos turísticos sejam instantâneas. Papei Noel informou que existem N pontos turísticos, e que suas renas podem realizar dois tipos de passeios: Passeio tipo 1: Dada uma sequência de pontos turísticos que deseja visitar, a rena realiza um passeio parando durante um hora em cada ponto da sequência. Por exemplo: Dada a sequência , a rena vai ficar durante uma hora no ponto 1, depois uma hora no ponto 2 e mais uma hora no ponto 1. Passeio tipo 2: Dada uma sequência de pontos turísticos que deseja visitar, a rena realiza um passeio do tipo 1 utilizando uma subsequência não vazia da sequência escolhida. Por exemplo, se a sequência escolhida for , a rena pode fazer qualquer um dos 6 passeios distintos, escolhido aleatoriamente por ela: , , , , , . Cici e Cini gostaram do fator surpresa do passeio de tipo 2, porém, Cino optou pelo do tipo 1. Como Cici, Cini e Cino possuem preferências diferentes, cada um pode escolher uma sequência diferente de lugares. Sabendo as sequências escolhidas por Cici e Cini, Cino vai escolher a menor sequência em que seja garantido que em pelo menos um local não seja visitado pelos três amigos ao mesmo tempo. Por exemplo: O Papei Noel informou que o Polo Norte possui 3 pontos turísticos distintos. Cici escolhe a sequência . Cini escolhe . Logo, Cino pode escolher as sequências e , mas não pode escolher a sequência , pois existe a chance de os três visitarem o ponto ao mesmo tempo."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1196",
        "saida": "Para cada linha de entrada, imprima uma linha de saída correspondente com a mensagem decodificada.",
        "entrada": "A entrada consiste em várias linhas de texto. Cada linha pode conter dígitos, espaços e letras maiúsculas. (exceto Q, A, Z), ou pontuação, exceto crase (`) conforme mostrado acima. Teclas rotuladas como palavras [Tab, BackSp, Control, etc.] não são representados na entrada. Você deverá repassar cada letra ou símbolo de pontuação pelo símbolo imediatamente à esquerda. Os espaços de entrada simplesmente deverão ser ecoados (impressos) na saída.",
        "titulo": "WERTYU",
        "descricao": "Um erro comum de digitação é colocar as mãos no teclado uma posição à direita da correta posição. Desta forma, \"Q\" é digitado como \"W\" e \"J\" é digitado como \"K\" e assim por diante. Você deve decodificar a mensagem desta maneira."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1486",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma única linha da saída, contendo o número de palitos de comprimento maior ou igual a C produzidos pelo experimento.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três inteiros P, N e C que indicam respectivamente o número de pontos de processamento (1 ≤ P ≤ 1000), o número de medições efetuadas (1 ≤ N ≤ 1000) e o comprimento mínimo de palitos de interesse (1 ≤ C ≤ N). Cada uma das próximas N linhas contém sequências de P dígitos {0, 1}, separados por um espaço em branco. O final da entrada é indicado por P = N = C = 0.",
        "titulo": "Circuito Bioquímico Digital",
        "descricao": "Um circuito bioquímico digital (CBD) é um artefato composto de um conjunto de pontos de processamento. Cada ponto de processamento é constituído por um minúsculo receptáculo para reagentes bioquímicos, feito de um substrato biológico que se comporta como um microcircuito eletrônico digital. Dependendo do estado da reação no receptáculo, o substrato gera dois níveis de voltagem. Um leitor acoplado ao CBD é capaz de realizar a leitura de todos os pontos de processamento de um CDB num dado instante, interpretando os dois níveis de voltagem como 0 ou 1. Um experimento com o CBD é realizado da seguinte maneira. Os pontos de processamento são carregados com as substâncias de interesse e reagentes apropriados e, a cada intervalo fixo de tempo (tipicamente alguns milissegundos), os pontos de processamento são lidos. Assim, o experimento resulta em uma sequência de conjuntos (vetores) de bits, cada vetor correspondendo a uma medição do CBD. Uma sequência ininterrupta de bits 1 de um mesmo ponto de processamento ao longo do tempo é denominada de palito. O comprimento de um palito é o número de bits 1 que o compõe (note que o comprimento dos palitos de um experimento pode variar entre um e o número de medições efetuadas). Uma característica importante de um experimento com o CBD é a quantidade e o comprimento dos palitos gerados. A figura abaixo mostra o resultado de um experimento realizado com um CBD de seis pontos de processamento, em que foram efetuadas quatro medições, contendo três palitos de comprimento um, um palito de comprimento dois e um palito de comprimento quatro. Você foi contratado para escrever um programa que determine, dado o resultado de um experimento, quantos palitos de comprimento igual ou maior do que um certo valor foram gerados."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1528",
        "saida": "Para cada caso de teste, imprima uma linha com a palavra \"YES\" caso as cordas possam ser totalmente separadas após a sequência de movimentos, caso contrário, imprima uma linha com a palavra \"NO\".",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste consiste de uma linha contendo uma sequência de até 30 movimentos, indicados pelos caracteres '+', '-', e '*'.",
        "titulo": "Cordas Emaranhadas",
        "descricao": "Quatro crianças estão brincando segurando duas cordas. Inicialmente, as crianças estão posicionadas nos quatro vértices de um quadrado, númerados de 1 a 4, assim como mostra a figura abaixo: No começo da brincadeira, as crianças nas posições 1 e 4 seguram uma corda, e as crianças nas posições 2 e 3 seguram outra. A partir disso, as crianças realizam uma sequência de movimentos que podem ser de três tipos: Movimento + : As crianças nas posições 1 e 2 trocam de lugares, onde a criança na posição 2 passa sua corda por cima da criança na posição 1. Movimento - : As crianças nas posições 1 e 2 trocam de lugares, onde a criança na posição 1 passa sua corda por cima da criança na posição 2. Movimento * : As crianças giram no sentido horário. Quem está na posição 1 vai para a posição 2, quem está na posição 2 vai para a posição 3, quem está na posição 3 vai para a posição 4, e quem está na posição 4 vai para a posição 1. Você deve desenvolver um programa para prever o final da brincadeira: Após uma dada sequência de movimentos da brincadeira, as cordas podem ser totalmente separadas assim estavam como inicialmente sem que as crianças troquem de lugares? John Conway é uma das crianças participando da brincadeira. Ele é um garoto muito esperto e decidiu te dar uma dica para resolver o problema: após a sequência de movimentos, as cordas não podem ser totalmente separadas se e somente se a sequência de movimentos é equivalente a uma sequência de movimentos alternantes. Uma sequência de movimentos é alternante se ela alterna os movimentos '+' e '-' entre um movimento de '*', utilizando o formato \"+++...+++*---...---*+++...\". Por exemplo, \"+++\", \"-*++*-\" e \"+++*----*\" são sequências alternantes. As sequências alternantes são sempre iniciadas com um movimento de '+' ou '-', e não podem possuir movimentos '*' consecutivos, portanto as sequências \"*---*++\" e \"++**--\" não são alternantes. A sequência \"+-++*+\" não é alternante, porém é equivalente a sequência alternante \"+*-*\", pois as duas sequências deixam as duas cordas emaranhadas do mesmo jeito."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1086",
        "saida": "Para cada um dos casos de teste da entrada, seu programa deve imprimir uma única linha, contendo o menor número de tábuas necessário para cobrir todo o piso do salão, obedecendo às restrições estabelecidas. Caso não seja possível cobrir todo o piso do salão obedecendo às restrições estabelecidas, imprima uma linha com a palavra ‘impossivel’ (letras minúsculas, sem acento).",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros M e N indicando as dimensões, em metros, do salão (1 ≤ N,M ≤ 104). A segunda linha contém um inteiro L, representando a largura das tábuas, em centímetros(1 ≤ L ≤ 100). A terceira linha contém um inteiro, K, indicando o número de tábuas doadas (1 ≤ K ≤ 105). A quarta linha contém K inteiros Xi, separados por um espaço, cada um representando o comprimento, em metros, de uma tábua (1 ≤ Xi ≤ 104 para 1 ≤ i ≤ K). O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.",
        "titulo": "O Salão do Clube",
        "descricao": "O Clube Recreativo de Tinguá está construindo a sua nova sede social. Os sócios desejam que o piso do salão da sede seja de tábuas de madeira, pois consideram que este é o melhor tipo de piso para os famosos bailes do clube. Uma madeireira da região doou uma grande quantidade de tábuas de boa qualidade, para serem utilizadas no piso. As tábuas doadas têm todas a mesma largura, mas têm comprimentos distintos. O piso do salão da sede social é retangular. As tábuas devem ser colocadas justapostas, sem que qualquer parte de uma tábua seja sobreposta a outra tábua, e devem cobrir todo o piso do salão. Elas devem ser dispostas alinhadas, no sentido longitudinal, e todas devem estar no mesmo sentido (ou seja, todas as tábuas devem estar paralelas, no sentido longitudinal). Além disso, os sócios não querem muitas emendas no piso, e portanto se uma tábua não é longa o bastante para cobrir a distãncia entre um lado e outro do salão, ela pode ser emendada a no máximo uma outra tábua para completar a distância. Há porém uma complicação adicional. O carpinteiro-chefe tem um grande respeito por todas as madeiras e prefere não serrar qualquer tábua. Assim, ele deseja saber se é possível forrar todo o piso com as tábuas doadas, obedecendo às restrições especificadas; caso seja possível, o carpinteiro-chefe deseja ainda saber o menor número de tábuas que será necessário utilizar. A figura abaixo ilustra duas possíveis maneiras de forrar o piso de um salão com dimensões 4 × 5 metros para um conjunto de dez tábuas doadas, com 100 cm de largura, e comprimentos 1, 2, 2, 2, 2, 3, 3, 4, 4 e 5 metros."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1404",
        "saida": "Para cada caso de teste da entrada, seu programa deve produzir uma única linha na saída, contendo um inteiro indicando o maior número de peças do seu oponente que podem ser capturadas em uma jogada.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M indicando respectivamente o número de linhas e o número de colunas do tabuleiro (3 ≤ N ≤ 20, 3 ≤ M ≤ 20 e N x M ≤ 200). O quadrado mais à esquerda do tabuleiro na borda mais próxima ao jogador é uma casa. A segunda linha contém a descrição do estado do jogo. Cada descrição consiste de [(N x M)/2] inteiros, separados por um espaço, correspondendo às casas do tabuleiro, que são numeradas de 1 a [(N x M)/2], da esquerda para a direita, da borda mais próxima ao jogador à borda mais próxima ao seu oponente. Na descrição do estado do jogo, ‘0’ representa uma casa vazia, ‘1’ representa uma casa com uma de suas peças, e ‘2’ representa uma casa com uma peça de seu oponente. Há no máximo [(N x M)/4] peças de cada jogador no tabuleiro. O final da entrada é indicado por N = M = 0. Figura 1: Numeração das casas em (a) tabuleiro de dimensões 8 x 8 e em (b) tabuleiro de dimensões 5 x 3.",
        "titulo": "MegaDamas",
        "descricao": "MegaDamas é um jogo de tabuleiro para dois jogadores, muito similar ao conhecido jogo de Damas. O tabuleiro é retangular, com N linhas e M colunas de pequenos quadrados arranjados em uma grade N x M. Os pequenos quadrados são alternadamente coloridos com uma cor clara e uma cor escura, no padrão usual de um tabuleiro de damas. Os quadrados de cor escura são denominados “casas” (note no entanto que, por razões de visualização, os diagramas abaixo mostram casas como quadrados brancos). No início do jogo, cada jogador tem um certo número de peças, posicionadas nas casas mais próximas da borda do tabuleiro que o jogador escolher (os jogadores escolhem bordas opostas). Durante o jogo, as peças só podem ocupar as casas do tabuleiro. Um dos movimentos do jogo é “capturar” uma peça do oponente, saltando sobre ela, diagonalmente, para a casa adjacente além da peça, casa esta que deve estar vazia. A peça do oponente é então removida do tabuleiro. As três casas envolvidas na captura (a casa inicial de sua peça, a casa que contém a peça do oponente e a casa vazia, onde sua peça estará após a jogada) devem estar diagonalmente alinhadas e devem ser diagonalmente adjacentes, como no diagrama abaixo. Em MegaDamas uma peça pode capturar peças do oponente saltando diagonalmente para frente ou para trás (note que, na maioria das variações existentes do jogos de Damas, uma peça só pode capturar peças do oponente saltando para frente). Você pode também efetuar uma captura múltipla, com uma peça apenas, saltando seguidamente para casas vazias sobre peças oponentes. Em uma captura múltipla, a sua peça pode mudar de direção, saltando primeiro em uma direção e depois em outra. Você pode capturar apenas uma peça a cada salto, mas pode capturar várias peças com saltos seguidos. Você não pode saltar sobre uma peça sua, e não pode saltar a mesma peça oponente mais de uma vez. São dadas as dimensões do tabuleiro e uma descrição do estado corrente de um jogo. É a sua vez de jogar e você deve determinar o número máximo de peças do seu oponente que podem ser capturadas em um movimento de captura."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1266",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo um inteiro indicando o menor número de postes de madeira que são necessários para restaurar o muro, de acordo com a decisão dos proprietários.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um N indicando o número original de postes de concreto da cerca(5 ≤ N ≤ 5000). A segunda linha de um caso de teste irá conter N inteiros Xi indicando o estado de cada poste de concreto após a passagem do tornado (0 ≤ Xi ≤ 1 para 1 ≤ i ≤ N) . Se Xi = 1 o poste i esté em boas condições, se Xi = 0 o poste i está quebrado ou faltando. Note que o poste N é ao lado do poste 1. O final da entrada é indicado por N = 0 .",
        "titulo": "Tornado!",
        "descricao": "É este tempo louco o resultado da interferência contínua da humanidade no meio ambiente? Ou é simplesmente o ciclo normal das mudanças climáticas através dos tempos? Ninguém parece saber ao certo, mas o fato é que os fenômenos naturais, como tornados e furacões atingem nosso país com mais força e freqüência do que nas décadas passadas. Um tornado acaba de atingir a fazenda Silverado, produtora de gado e de leite, e fez estragos. O telhado do celeiro foi rasgado, várias árvores foram arrancadas, o caminhão da fazenda foi derrubado... Mas o pior é que o tornado destruiu várias seções da cerca que rodeava a propriedade. A cerca foi muito bem construída, com postes de concreto a cada dois metros, e arame farpado encerrando o perímetro de toda a fazenda (o perímetro, em metros, é um número par, o que torna a cerca perfeitamente regular). Agora vários postes estão quebrados ou faltando, e há falhas na cerca. Para evitar que o gado fique de fora da propriedade, a cerca deve ser restaurada o mais rápido possível. Reconstruindo o muro à sua forma original, com postes de concreto, vai levar um longo tempo. Enquanto isso, os proprietários da fazenda decidiram fechar as lacunas com uma cerca temporária, feita com postes de madeira. Postes de madeira serão colocados exatamente nos mesmos pontos onde os postes estão faltando ou foram quebrados. No entanto, a fim de tornar a reconstrução temporária mais rápida e menos dispendiosa, os donos decidiram utilizar menos postes: um poste de madeira será utilizado para substituir um poste de concreto ausente / quebrado somente se o comprimento do arame farpado necessário para fechar a distância até o próximo poste (de madeira ou concreto) for superior a quatro metros. Dada a descrição de quantos postes estão quebrados ou faltando, você deve escrever um programa que determine a menor quantidade de postes de madeira que são necessários para fechar as lacunas da cerca, de acordo com a decisão dos proprietários."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "2090",
        "saida": "Para cada caso de teste você deverá imprimir qual será o K-ésimo produto que será dito.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste terá dois inteiro N e K (1 ≤ N ≤ 10⁵, 1 ≤ K ≤ min(2 * 10⁹, N * (N + 1) / 2)), representando a quantidade de crianças na brincadeira e qual o produto que seus amigos desejam saber, veja o exemplo para mais detalhes. Na próxima linha terá a sequência s1, s2, s3, ..., sn, onde si representa qual o produto a i-ésima criança irá dizer, cada palavra conterá no máximo 20 letras minúsculas. A entrada termina quando N = 0 e não deve ser processada.",
        "titulo": "Fui ao Mercado e Comprei...",
        "descricao": "Uma brincadeira muito comum entre crianças é \"Fui ao mercado e comprei...\", nela várias crianças formam uma fila e cada uma deve falar um item que compraria no mercado, porém para aumentar a dificuldade é necessário que cada criança repita todos os produtos que já foram ditos desde o inicio da brincadeira. O jogo termina quando alguém erra a ordem dos produtos ou quando a última criança da fila acerta a sequência. Vamos imaginar que Maria, Pedro e Amanda começaram a brincar e já decidiram quem irá dizer qual produto, Maria irá dizer Pão, Pedro gosta de Queijo e Amanda irá falar Maçã. Supondo que a fila esteja organizada em ordem alfabética o jogo deveria seguir da seguinte forma:     1º Amanda diz: \"Fui ao mercado e comprei Pão\"     2º Maria  diz: \"Fui ao mercado e comprei Pão e Maçã\"     3º Pedro  diz: \"Fui ao mercado e comprei Pão, Maçã e Queijo\" Portanto a ordem dos produtos foi: Pão, Pão, Maçã, Pão, Maçã e Queijo. Seus amigos de colégio decidiram realizar essa brincadeira para passar o tempo. Depois de algum tempo de jogo a lista de produtos que cada um deveria dizer estava ficando muito grande, dessa forma, verificar se alguém errou não é uma tarefa simples. Foi quando seus amigos lembraram que você é programador e poderia resolver facilmente esse problema. Dado a quantidade de pessoas na fila e qual produto cada um irá dizer, eles necessitam de um programa que informe qual é o K-ésimo produto que será dito. Assim ficará mais fácil de determinar se alguém errou ou não. Você conseguirá ajudar seus amigos ?"
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1591",
        "saida": "Para cada caso, imprima para cada palavra em uma única linha o número de vezes que ela aparece no caça palavras, na mesma ordem da entrada. Se a palavra não aparecer imprima 0.",
        "entrada": "Na primeira linha terá um inteiro T (T <= 100) indicando o número de casos de teste. A primeira linha de cada caso terá dois números L (1 ≤ L ≤ 10* ou 1 ≤ L ≤ 50**) e C (1 ≤ C ≤ 10* ou 1 ≤ C ≤ 50**) indicando o número de linhas e de colunas do caça palavras respectivamente. Nas seguintes L linhas terão cada uma C caracteres minúsculos do alfabeto indicando as letras do caça palavras. Na linha seguinte terá um número P (1 ≤ P ≤ 50) indicando quantas palavras você deve procurar. Nas próximas P linhas terá uma palavra a ser pesquisada. As palavras a serem pesquisadas terão tamanho condizentes com os limites do caça palavras. As strings na entrada só conterão letras minúsculas do alfabeto. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes.",
        "titulo": "Dia da Vovó",
        "descricao": "Vovó está resolvendo um caça palavras. Você quer ajudar muito sua Vovó e vai desenvolver um programa que, dado o caça palavras e as palavras de busca, imprima o número de vezes que elas aparecem. Neste caça palavras em específico, as palavras estarão apenas na vertical ou horizontal. O caça palavras não dá voltas, ou seja, você não pode ir da última coluna para a primeira! As palavras podem sobrescrever as outras, ou seja, uma letra do caça palavras pode ser usada por mais de uma palavra. Conte palavras de uma letra apenas uma vez, veja o primeiro caso de teste de exemplo!"
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1459",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro indicando o menor número de fotos que Daniel deve tirar.",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 106 ) indicando o número de objetos na cena. Cada uma das N linhas seguintes contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109) indicando os extremos do intervalo de foco de cada objeto.",
        "titulo": "Foco",
        "descricao": "Daniel esta fazendo um curso de Visão Computacional e decidiu reproduzir um trabalho muito interessante visto em aula: ele tirou varias fotos de uma mesma cena, variando apenas o foco, para depois combina-las em uma unica imagem onde todos os objetos da cena estão nítidos simultaneamente. Para tal, ele precisa que cada objeto apareca nítido em ao menos uma foto. Daniel sabe que, para cada objeto, existe um intervalo fechado de planos de foco no qual aquele objeto está contido. Por exemplo, na figura abaixo, (i), (ii) e (iii) são três fotos da mesma cena, cada uma tirada com um foco diferente; (iv) é a imagem combinada gerada por Daniel. Como o cartão de memoria de sua câmera é pequeno, ele pediu sua ajuda para, dados os intervalos de foco de todos os objetos da cena que pretende fotografar, determinar o numero mínimo de fotos que ele deve tirar para que seja possível deixar cada objeto nítido em pelo menos uma foto."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1680",
        "saida": "Para cada caso de teste gere um desenho PostScript da borda com comandos em linhas separadas. Comece cada desenho nas coordenadas (300, 420) com o comando \"300 420 moveto\". A primeira rotação ocorre em (310, 420) utilizando o comando \"310 420 lineto\". Continue com rotações em sentido horário ou anti-horário de acordo com a string de entrada, usando a sequência \"x y lineto\" de comandos com as coordenadas devidas. Os pontos de rotações são separados por uma distância de 10 unidades. Não se esqueça do último ponto da borda e de terminar cada caso de teste com os comando stroke e showpage. Você pode exibir tais desenhos com o interpretador de PostScript gv, opcionalmente depois de uma conversão utilizando o ps2ps.",
        "entrada": "A entrada contém diversos casos de testes, cada um em uma linha separada. Cada linha contém uma string não vazia de caracteres A e V descrevendo a maior borda da folha. Você pode assumir que o tamanho da string é menor que 200. O aquivo de entrada termina imediatamente após o último caso de teste.",
        "titulo": "Borda",
        "descricao": "Para produtos que são embalados em pequenos pacotes é necessário que a folha de instruções de uso seja dobrada até que seu tamanho se torne suficientemente pequeno. Assume-se que uma folha é retangular e só pode ser dobrada ao longo de linhas paralelas à sua menor borda inicial. O ato de dobrar tal linha, contudo, pode ser realizado em duas direções: tanto a superfície superior da folha é dobrada, ou a superfície inferior. Em ambos os casos as duas partes do retângulo que estão separadas pela linha da dobra são dispostas em conjunto e ignora-se qualquer diferença de espessura na folha dobrada resultante.Depois de diversas dobras serem realizadas pode-se desdobrar a folha novamente e observar sua maior curva de forma que pareça uma curva unidimensional, na verdade a junção de segmentos de linhas. Ao se mover por entre essa curva em uma direção fixa pode-se classificar cada ponto em que a folha foi dobrada como um tipo A, uma rotação em sentido horário, ou tipo V, uma rotação em sentido anti-horário. Dadas tais sequências de classificações, produza um desenho da maior borda da folha assumindo rotações de 90 graus em pontos equidistantes."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2198",
        "saida": "For each case, display its case number followed by the maximum total enclosed area that can be obtained by folding the magic stick at the given points. Answers within an absolute or relative error of 10−4 will be accepted. Follow the format of the sample output.",
        "entrada": "The input contains several test cases. Each test case describes a magic stick. The first line in each test case contains an integer n (1 ≤ n ≤ 500) which indicates the number of the segments in the magic stick. The next line contains n integers S1, S2, . . . , Sn (1 ≤ Si ≤ 1000) which indicate the lengths of the segments in the order they appear in the stick. The last test case is followed by a line containing a single zero.",
        "titulo": "Magic Sticks",
        "descricao": "Magic was accepted by all ancient peoples as a technique to compel the help of divine powers. In a well-known story, one group of sorcerers threw their walking sticks on the floor where they magically appeared to turn into live serpents. In opposition, another person threw his stick on the floor, where it turned into a serpent which then consumed the sorcerers’ serpents! The only magic required for this problem is its solution. You are given a magic stick that has several straight segments, with joints between the segments that allow the stick to be folded. Depending on the segment lengths and how they are folded, the segments of the stick can be arranged to produce a number of polygons. You are to determine the maximum area that could be enclosed by the polygons formed by folding the stick, using each segment in at most one polygon. Segments can touch only at their endpoints. For example, the stick shown below on the left has five segments and four joints. It can be folded to produce a polygon as shown on the right."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1397",
        "saida": "A saída deve ser composta por uma linha por caso de teste, contendo o número de pontos de cada jogador, separados por um espaço.",
        "entrada": "A entrada é composta por vários casos de teste (partidas). Cada caso é iniciado com um inteiro N (de 0 até 10) representando o número de rodadas da partida, sendo que o valor 0 representa o final da entrada e não deve ser processado. Cada uma das próximas N linhas contém dois inteiros, A e B, onde A é o número escolhido pelo primeiro jogador e B é o número escolhido pelo segundo jogador (0 ≤ A, B ≤ 10).",
        "titulo": "Jogo do Maior",
        "descricao": "Og gosta muito de brincar com seus filhos. Seu jogo preferido é o jogo do maior, de autoria própria. Este passatempo (no tempo das cavernas se tinha muito tempo disponível para jogos) é jogado em dupla, Og e um dos seus filhos. O jogo procede da seguinte forma: os dois participantes escolhem um número de rodadas e, a cada rodada, cada participante diz um número de 0 até 10 em voz alta, sendo que o participante que falar o número mais alto ganha um ponto (em caso de empate, ninguém ganha o ponto). No final das rodadas, os pontos são contabilizados e o participante com o maior número de pontos ganha. Og e seus filhos gostam muito do jogo, mas se perdem na contagem dos pontos. Você conseguirá ajudar Og a verificar a pontuação de uma lista de jogos?"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2054",
        "saida": "Para cada instância, você deverá imprimir um identiﬁcador \"Instancia K\", onde K é o número da instância atual. Na linha seguinte, seu programa deve imprimir \"sim\" se o jogador pode vencer a partida, e \"nao\" caso contrário. Imprima uma linha em branco entre cada instância.",
        "entrada": "A entrada começa com um número inteiro N na primeira linha, indicando o número de instâncias do problema que seu programa deve resolver. As próximas N linhas contêm a descrição das instâncias. Cada uma dessas linhas contém uma sequência de 6 números inteiros. O i-ésimo número da sequência indica quantos palitos ainda restam na i-ésima ﬁleira de palitos do jogo. Todos os números da sequência são válidos (ou seja, o i-ésimo inteiro contém um valor entre 0 e o número de palitos com o qual a i-ésima ﬁleira começa o jogo).",
        "titulo": "Last Year at Marienbad",
        "descricao": "Durante a Guerra Fria a cidade de Marienbad na República Tcheca ﬁcou imortalizada pelos espiões que usaram seus hotéis luxuosos para troca de informações e até mesmo como um recanto de férias e descanso. Na cidade ﬁcou famoso o jogo de \"Streichholzpiramidentfernungspiel\", como era conhecido e apreciado pelos espiões das duas Alemanhas. O jogo começa com 6 ﬁleiras de palitos. A primeira ﬁleira contém 1 palito, a segunda contém 3, a terceira 5, a quarta 7, a quinta 9 e a sexta 11. Segue abaixo um desenho com o esquema do jogo inicial. Participam do jogo duas pessoas, que alternam seus movimentos. Em cada jogada, uma pessoa deve tirar uma quantidade diferente de zero de palitos do tabuleiro. Todos os palitos retirados em uma jogada devem pertencer à mesma ﬁleira. Assim, se uma ﬁleira contém k palitos e um jogador decide retirar palitos dessa ﬁleira em sua jogada atual, ele tem k opções distintas de jogadas (poderá remover entre 1 e k palitos). Se após uma jogada o tabuleiro ﬁcar completamente vazio (i.e., sem palitos em qualquer uma das 6 ﬁleiras), o jogador que realizou a última jogada (o jogador que removeu os últimos palitos) perde o jogo. Dada a descrição de uma conﬁguração do tabuleiro após algumas jogadas, determinar se o jogador que fará a próxima jogada pode vencer o jogo, assumindo que o adversário é inteligente e portanto sempre escolhe a melhor jogada possível."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1870",
        "saida": "Para cada caso de teste, imprima, caso o balão tenha passado ileso, a palavra “OUT”, seguida da posição da coluna da qual o mesmo saiu no final; e caso tenha estourado no meio do caminho, a palavra “BOOM”, e em qual linha e coluna o mesmo estourou.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros, L, C e P (1 ≤ L ≤ C ≤ P ≤ 9), indicando a quantidade de L linhas e C colunas da matriz e P a posição da coluna a qual o balão será solto. O último caso de teste é indicado quando L = C = P = 0, sendo que este caso não deve ser processado.",
        "titulo": "Ventiladores e Balões",
        "descricao": "Em um feriado, os empregados da empresa fabricante de ventiladores Irmãos Fulano, mais conhecida como IF, propuseram uma gincana. Dada uma caixa retangular, de grandes dimensões, formadas por compartimentos, contendo apenas a parede frontal e traseira, com todos os compartimentos acessíveis internamente, ventiladores pequenos, mas potentes, e sem a grade de proteção, foram amarrados internamente na caixa, em alguns compartimentos. Após isto, um balão é solto dentro da caixa, na reta de uma determinada coluna de compartimentos. Cada ventilador estará ligado com um determinado nível de força. Então, é verificado o ventilador mais próximo à esquerda e à direita do balão. Se ambos estiverem com o mesmo nível de força, o balão continua descendo normalmente. Caso seja diferente, o balão será empurrado para o lado do ventilador com o nível mais fraco, e o mesmo se deslocará tantas colunas forem a diferença entre o maior nível e o menor entre os ventiladores. Veja o caso abaixo em todos os detalhes: Balão solto na coluna 6; Na primeira linha, o ventilador mais próximo à direita do balão tem dois níveis a mais que o mais próximo da esquerda, deslocando o balão para a coluna 4; Na segunda linha, o ventilador mais próximo à direita do balão tem dois níveis a mais que o mais próximo da esquerda, deslocando o balão para a coluna 2; Na terceira linha, o ventilador mais próximo à direita do balão tem o mesmo nível em relação ao mais próximo da esquerda, mantendo o balão na coluna 2; Na quarta linha, o ventilador mais próximo à direita do balão tem dois níveis a menos que o mais próximo da esquerda, deslocando o balão para a coluna 4, saindo sem estourar; Se, na mesma caixa, o balão fosse solto na coluna 2, o balão teria estourado na linha 1 e coluna 1, nas hélices do ventilador que se encontra neste local. Escreva um programa que, dada uma matriz, representando a caixa e uma coluna, na qual o balão será solto, e verifique se o mesmo passa por todos os ventiladores sem estourar."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1333",
        "saida": "Para cado caso de teste imprima um linha com um inteiro representando o número de diferentes bons empacotamentos de doces, de acordo com as regras dadas acima.",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém um inteiro F indicando o número de sabores (2 ≤ F ≤ 105). A segunda linha contém F inteiros Ci , indicando o número de doces de cada sabor (1 ≤ Ci ≤ 109 para cada 1 ≤ i ≤ F). O último caso de teste é seguido por uma linha contendo um zero.",
        "titulo": "Os Doces de Candy",
        "descricao": "Candy possui um estoque de doces de F diferentes sabores. Ela irá fazer vários pacotes de doces para então vendê-los. Cada pacote deverá ser ou um pacote contendo doces de um único sabor, ou um pacote sortido, contendo doces de cada sabor. Ela decidiu que um bom empacotamento deve honrar as seguintes condições: Cada doce deve ser colocado em exatamente um pacote. Cada pacote, independente de seu tipo, deve conter pelo menos dois doces. Cada pacote, independente de seu tipo, deve conter o mesmo número de doces. Dentro de cada pacote sortido, o número de doces de cada sabor deve ser o mesmo. Deve haver ao menos um pacote sortido. Deve haver ao menos um pacote de cada sabor. Candy estava pensando sobre quantos tipos de bons empacotamentos de doces ela poderia fazer. Dois bons empacotamentos de doces são considerados diferentes se e somente se eles diferem no número de pacotes sortidos, ou no número de doces por pacote. Como Candy irá vender seus doces durante a cerimônia de encerramento desta competição, você foi encorajado a responder sua questão tão rápido quanto possível."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1886",
        "saida": "Para cada instância, imprima uma única linha contendo o numero mínimo de guardas necessários para vigiar todos os templos reais da cidade.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de diversas linhas. A primeira linha contém dois inteiros, N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 5*103) que representam o número de templos reais de Phuket e o número de ruas entre templos reais, respectivamente. Cada templo e identificado por um inteiro entre 1 e N. As seguintes M linhas descrevem as ruas da cidade. Cada rua é descrita por dois inteiros que representam os templos que ela liga.",
        "titulo": "Resguardando os Templos",
        "descricao": "Existem milhares de templos budistas na Tailândia. Em geral, os templos budistas são chamados de \"wat\". Além disso, existem alguns templos que recebem uma distinção pela sua importância e são chamados de \"templos reais\". Um exemplo desse último tipo é o templo \"Wat Phra Kaew\", localizado no Grande Palácio de Bangkok. Esse templo acolhe a imagem do Buda Esmeralda, que é a mais venerada na Tailândia. Em 2016, a final mundial do ACM ICPC será realizada em Phuket, Tailândia. Por isso, espera-se que o turismo se incremente nessa cidade. Isso levou às autoridades de Phuket a pensar em melhorar a segurança dos templos reais da cidade. Por esta razão a Unidade de Segurança de Phuket (USP) contratou a pesquisadora Lua \"a engenhosa\" Kuratowski. A USP está interessada em resolver o seguinte problema, dados N templos reais e M ruas que ligam esses templos, posicionar guardas nessas ruas de forma que todo templo real seja vigiado. Consideramos que um templo é vigiado se pelo menos uma das ruas que tem como extremo esse templo é vigiada por algum guarda. Por outro lado, as ruas foram construídas de forma que sempre existe uma sequência de ruas que liga dois templos quaisquer. Além disso, por costumes ancestrais de Tailândia, se fazemos uma trilha pelos templos reais da cidade, sempre andando por ruas distintas e visitando templos distintos até retornar ao templo de partida, sempre temos a certeza de ter passado por um número par de ruas, já que existe certa superstição com os números ímpares. Como Lua é muito esperta, basta-lhe apenas olhar a descrição dos templos de Phuket, que ela já sabe qual é a resposta ótima (aquela que usa o número mínimo de guardas). Ela escreveu a resposta em um papel, enquanto assobiava \"Elephant Gun\", e o entregou à USP. Ela sabe que você deseja participar da final mundial do próximo ano, e considera que este é um bom problema para testar suas habilidades. Por isso, desafia a você a resolvê-lo."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "2014",
        "saida": "Para cada uma das Q consultas, mostre uma linha com a letra maiúscula \"Y\" se o grupo sanguíneo correspondente é possível na descendência dos pais dadas; caso contrário saída a letra maiúscula \"N\". Escreva os resultados na mesma ordem que as consultas aparecem na entrada.",
        "entrada": "A primeira linha contém dois inteiros N e Q, representando respectivamente o número de pais (e alelos e tipos de antígenos) e o número de consultas (1 ≤ N ≤ 100 e 1 ≤ Q ≤ 40). Cada uma das N linhas seguintes descreve o grupo de sangue de um dos pais. Depois disso, cada uma das seguintes linhas Q descreve um grupo de sangue para testar. Tipos de antigenes são identificados com números inteiros distintos de 1 a N, não letras. Cada linha que descreve um grupo sanguíneo contém um número inteiro B que indica o número de tipos de antigenes do grupo sanguíneo (0 ≤ B ≤ N), seguido por B inteiros diferentes C1, C2, ..., CB representando os tipos de antigénios presentes no sangue grupo (1 ≤ Ci ≤ N para i = 1, 2, ..., B).",
        "titulo": "Grupos Sanguineos",
        "descricao": "Existem quatro grupos possíveis de sangue para os seres humanos: AB, A, B e O, o que significa que os glóbulos vermelhos têm antigenes de tipos, respectivamente, A e B, a apenas A, apenas B, e sem antigene em tudo. O nosso grupo de sangue é determinado por dois alelos no nosso DNA. Cada alelo é do tipo A, B ou O. A tabela a seguir lista os possíveis combinações de alelos que alguém pode ter para cada grupo sanguíneo: Nós herdamos exatamente um alelo de cada um dos nossos dois pais. Assim, tendo em conta os grupos sanguíneos de ambos os pais, podemos dizer com certeza se algum grupo de sangue é possível, ou não, em sua prole. Por exemplo, se os grupos sanguíneos dos dois pais são AB e B, em seguida, as possíveis combinações de alelos para eles são, respectivamente, {AB} e {OB, BB}. Desde o fim dos alelos não importa, as possíveis combinações de alelos para a prole são {OA, AB, OB, BB}. Isso significa que os grupos sanguíneos AB, A e B são possíveis em sua prole, mas o grupo sanguíneo O não é. Muito bom de fato! Mas e se a vida na Terra evoluiu de modo que uma pessoa tinha três pais, três alelos, e três tipos de antígenos diferentes? As combinações de alelos ficaria assim: Se os grupos sanguíneos dos três pais são A, BC e O, em seguida, todos os grupos sanguíneos são possíveis em sua prole, exceto os grupos BC e ABC. O universo é vasto! Pode haver, lá fora, no espaço, alguma forma de vida cujos indivíduos têm pais N, N alelos, e N diferentes tipos de antígenos. Tendo em conta os grupos sanguíneos para os pais N, e uma lista de grupos sanguíneos Q para testar, o programa tem de determinar quais os que são possíveis, e quais não são, na descendência dos pais dadas."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2206",
        "saida": "For each test case, display the case number and the volume of the full bottle on one line. On a second line, display the increasing sequence of no more than 8 successive distances up from the bottom of the bottle for the volume markings. All volumes and height marks should be accurate to two decimal places. If the bottle does not have a volume that allows at least one mark, display the phrase 'insufficient volume'. No test case will result in a mark within 0.01 from the top of the bottle. The volume of the bottle will not exceed 1 000. All rounded distances for marks on a bottle differ by at least 0.05.",
        "entrada": "Each test case consists of three lines of bottle data: Line 1: n, the degree of the polynomial (an integer satisfying 0 ≤ n ≤ 10). Line 2: a0, a1, . . ., an, the real coefficients of the polynomial P defining the bottle’s shape, where a0 is the constant term, a1 is the coefficient of x1 , . . ., and an is the coefficient of xn . For each i, −100 ≤ ai ≤ 100, and an != 0. Line 3: xlow and xhigh, the real valued boundaries of the bottle (−100 ≤ xlow 0.1). inc, an integer which is the volume increment before each successive mark on the bottle (1 ≤ inc ≤ 500).",
        "titulo": "Curvy Little Bottles",
        "descricao": "In her bike rides around Warsaw, Jill happened upon a shop that sold interesting glass bottles. She thought it might make an interesting project to use such bottles for measuring liquids, but this would require placing markings on the bottles to indicate various volumes. Where should those volume marks be placed? Jill formalized the problem as follows. Assume a bottle is formed by revolving a shape that is the same as the graph of a polynomial P between x = xlow and x = xhigh around the x-axis. Thus the x-axis is coincident with a vertical line through the center of the bottle. The bottom of the bottle is formed by a solid circular region at x = xlow, and the top of the bottle, at x = xhigh, is left open. The first sample input represents a bottle formed using the simple polynomial 4 − 0.25x, with xlow = 0 and xhigh = 12. The bottom of this bottle is a circle with a radius of 4, and the opening at the top is a circle with a radius of 1. The height of this bottle is 12. Volume markings are in increments of 25. Given a polynomial P, xlow, xhigh, and the volume increment between successive marks on the bottle, compute the distances up from xlow for the marks at successive volume increments. A mark cannot be made past the top of the bottle, and no more than the first 8 increments should be marked. Assume the value of P is greater than zero everywhere between xlow and xhigh."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1090",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo um número inteiro, indicando o maior número de sets que podem ser formados com as cartas dadas.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (3 · N · 3 × 104), indicando o número de cartas na mesa; cada uma das N linhas seguintes contém a descrição de uma carta. A descrição de uma carta é dada por duas palavras separadas por um espaço; a primeira palavra é \"um\" ou \"dois\"   ou \"tres\" e indica quantas figuras aquela carta possui. A segunda palavra é, “circulo” (ou “circulos”), “quadrado” (ou “quadrados”) ou “triangulo” (ou “triangulos”) indica qual tipo de figura está naquela carta. O final da entrada é indicado por uma linha contendo um zero.",
        "titulo": "Set",
        "descricao": "Set é um jogo jogado com um baralho no qual cada carta pode ter uma, duas ou três figuras. Todas as figuras em uma carta são iguais, e podem ser círculos, quadrados ou triângulos. Um set é um conjunto de três cartas em que, para cada característica (número e figura), ou as três cartas são iguais, ou as três cartas são diferentes. Por exemplo, na figura abaixo, (a) é um set válido, já que todas as cartas têm o mesmo tipo de figura e todas elas têm números diferentes de figuras. Em (b), tanto as figuras quanto os números são diferentes para cada carta. Por outro lado, (c) não é um set, já que as duas últimas cartas têm a mesma figura, mas esta é diferente da figura da primeira carta. O objetivo do jogo é formar o maior número de sets com as cartas que estão na mesa; cada vez que um set é formado, as três cartas correspondentes são  removidas de jogo. Quando há poucas cartas na mesa, é fácil determinar o maior número de sets que podem ser formados; no entanto, quando há muitas cartas há muitas  combinações possíveis. Seu colega quer treinar para o campeonato mundial de Set, e por isso pediu que você fizesse um programa que calcula o maior número de sets que podem ser formados com um determinado conjunto de cartas."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1443",
        "saida": "O programa deverá imprimir, para cada viagem, uma linha contendo a distância percorrida em metros (com duas casas decimais).",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso corresponde a uma viagem e é iniciado por uma linha contendo um inteiro N, que diz a quantidade de faixas de aceleração do veículo durante a viagem. O final da entrada é marcado com N = 0, caso que não deve ser processado. Cada uma das próximas N linhas contém dois inteiros, a e b, designando as faixas de tempo (em segundos) onde o motorista está com o pé no acelerador (acelerou no tempo t = a até t = b). No primeiro caso de teste do exemplo abaixo (primeira viagem) o motorista pisou no acelerador no tempo t = 0s até t = 5s, pisou no freio entre t = 5s e t = 8s, acelerou de t = 8s até t = 15s, freou entre t = 16s e t = 17s e acelerou até t = 50s. A distância percorrida deve ser computada de t = 0s até o segundo final da última faixa de aceleração, neste caso de t = 0s até t = 50s. Limites: 0 ≤ N ≤ 1000, sendo que cada viagem demora no máximo 30h.",
        "titulo": "Engarrafamento",
        "descricao": "Marcos é um cientista de computação que trabalha em uma empresa de transporte, analisando dados das viagens dos caminhões de carga da empresa e otimizando notas de veículos. Devido aos constantes congestionamentos envolvendo veículos da empresa, esta designou uma nova tarefa para Marcos: computar a distância percorrida por cada veículo em situações de tráfego intenso. Marcos está muito ocupado com outras tarefas na empresa, e designou esta tarefa de calcular a distância percorrida em viagens para você, o novo estagiário da empresa. De forma mais específica, a distância percorrida de cada viagem deve ser calculada a partir dos dados de aceleração durante a viagem. Nestes dados constam as faixas de tempo onde o motorista pisou no acelerador (aceleração constante de 1m/s², até uma velocidade máxima de 10m/s), sendo que quando o veículo não estiver acelerando o motorista estará com o pé no freio (veículo parado ou freando com uma desaceleração constante de 2m/s²). A distância total percorrida na viagem deve ser calculada a partir destas faixas de tempo, assumindo que o veículo está inicialmente parado."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2211",
        "saida": "For each case, display the case number. Then if suitable new pipes and plugs can be used to construct the desired system, display the minimum cost of connecting the source junction to the destination junction, accurate to four decimal places. If it is impossible to connect the source to the destination, display the word 'impossible'.",
        "entrada": "The first line of each test case contains two integers N and M, where N (2 ≤ N ≤ 400) is the number of junctions in the building (numbered 1 through N) and M (0 ≤ M ≤ 50 000) is the number of existing usable pipes. Each of the next N lines contains four integers xi , yi , zi , and ki satisfying −10 000 ≤ xi , yi , zi ≤ 10 000 and 0 ≤ ki ≤ 400, i = 1, 2, ..., N. The ith line describes junction i: (xi , yi , zi) is the location of the ith junction where the z-axis is the vertical axis; ki indicates the number of open holes in the junction. Each of the next M lines contains two integers aj and bj satisfying 1 ≤ aj < bj ≤ N. The jth line indicates that pipe j connects junctions aj and bj . At most one pipe connects any pair of junctions, and no two junctions share the same coordinates. The source is junction 1, and the destination is junction N.",
        "titulo": "Minimum Cost Flow",
        "descricao": "You have been hired to construct a system to transport water between two points in an old factory building using some existing components of the old plumbing. The old components consist of pipes and junctions. Junctions are points where pipes may have previously been joined. We say previously joined, because some of the old pipes were damaged and have been removed, effectively leaving open holes in the junctions to which they were connected. If water should enter one of these junctions, it would pour out of an open hole and eventually flood the building—clearly an undesirable event. You can remedy this situation by installing new pipes between some of the open holes and installing plugs to close other open holes as necessary. When you install a new pipe connecting two holes (which must be in two different junctions), the two holes are no longer open and water will be able to flow through the new pipe. The cost of installing a new pipe is equal to the distance between the centers of the two junctions the pipe connects. The cost of installing a plug in an open hole is 0.5. You are not concerned about open holes in junctions that will never be reached by water. Two of the junctions are special. One, called the source, is the point where water will be pumped into the new system. The other, called the destination, is where the water is needed. After any plugs and new pipes have been added to the system, water will be pumped into it at the source with a pressure sufficient to reach a specified height (in the absence of leaks, of course). You are allowed to select the pressure arbitrarily, and are guaranteed that the pressure will not change during the operation of the system. Naturally the pressure must be sufficient to force water up to the heights of both the source and the destination. Your task is simply to find the most inexpensive way of getting water from the source junction to the destination junction without flooding the building. The figure below corresponds to the first sample input case, where black dots represent open holes, junction 1 is the source, and junction 7 is the destination. (The position of a black dot on its circle has no significance and is used for illustration purposes only.) Water flows through the system according to the laws of physics. If the pressure is sufficient to fill a junction with water, then that junction will remain filled with water. If there are pipes extending horizontally or downward from a junction, then water will also flow through those pipes. Water will also flow upward through pipes connected to a junction up to the height determined by the water pressure. Of course, if the water reaches an open hole in a junction, it will flow through the hole and flood the building. In the first sample input case, you can connect junctions 1 and 5 at a cost of 3, plug the open holes in junction 2, and set the pressure so that the water flows up to junction 7 only. The water will fill junctions 1, 2, 5, 6 and 7, and will flow no higher. A different (more expensive) solution would be to simply plug all the holes at a total cost of 5, and let the water flow through all the junctions. You cannot solve this case by connecting junctions 1 and 6 and plugging holes in junctions 2 and 5, since junction 6 has no open holes to which a new pipe can be connected. Assume existing pipes and any new pipes do not interfere with each other or with any junctions, except those to which they are connected. That is, even if a straight line from junction A to junction B passes through junction C, any pipe from A to B will not touch C."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1934",
        "saida": "Seu programa deve produzir uma linha para cada variável do quebra-cabeças, contendo o nome da variável e o seu valor inteiro. As variáveis devem ser escritas em ordem alfabética crescente, ou seja,respeitando a ordem aa, ab, . . . , az, ba, bb, . . . , za, zb, . . . , zz.",
        "entrada": "A primeira linha contém dois inteiros L (1 ≤ L ≤ 100) e C (1 ≤ C ≤ 100) indicando o número de linhas e o número de colunas do quebra-cabeça. Cada uma das L linhas seguintes contém C nomes de variáveis, seguidos de um inteiro S, a soma resultante das variáveis dessa linha (−108 ≤ S ≤ 108). A última linha contém C inteiros Xi (−108 ≤ Xi ≤ 108), indicando respectivamente a soma das variáveis na coluna i. Nomes de variáveis são formados por precisamente duas letras minúsculas, de ’a’ a ’z’. Todos os quebra-cabeças têm solução única, em que todas as variáveis são números inteiros entre −106 and 106.",
        "titulo": "Quebra-cabeça",
        "descricao": "Discussões recentes na Internet causaram uma onda de renovado interesse em quebra-cabeças de lógica. Neste problema a sua tarefa é escrever um programa que resolva quebra-cabeças como o mostrado na figura abaixo, muito comum em revistas de desafios lógicos. Nesse quebra-cabeças, as letras dentro do quadriculado representam variáveis, e os números representam as somas dos valores das variáveis em cada linha ou coluna. O objetivo desse tipo de quebra-cabeça é determinar o valor de cada variável de modo a satisfazer as somas das linhas e colunas mostradas. Mas como esse tipo de quebra-cabeças é para crianças, ele tem uma propriedade que o torna mais fácil de encontrar a solução: sempre é possível encontrar uma linha ou coluna em que há apenas uma variável cujo valor ainda é desconhecido. Assim, uma possível maneira de resolver o problema é, a cada passo da solução, encontrar o valor de uma variável. Dado um quebra-cabeça, você deve determinar os valores das variáveis que o solucionam."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "2156",
        "saida": "Para cada caso de teste, imprima um valor inteiro com a quantidade de pastilhas comidas. ########## #<*******# ########## UWWRWW Neste exemplo, o Pak-man vira para cima, tenta andar duas casas, mas como existe parede, fica no mesmo lugar. Depois vira para a direita e anda duas casas, comendo, com isto, duas pastilhas.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste começa com três valores inteiros, L (3 ≤ L ≤ 100), C (3 ≤ C ≤ 100) e I (3 ≤ I ≤ 10000), indicando a quantidade de linhas e colunas do cenário e a quantidade de instruções. Em seguida, terão L linhas e C colunas, informando o cenário, o qual só terá # onde representa parede, * onde representa uma pastilha, < onde representa o Pak-man e espaço, locais que o Pak-man pode movimentar. A linha seguinte tem I caracteres, com as instruções de movimento do Pak-man, os quais L, R, U e D indica a direção a qual o Pak-man está direcionado (L-Esquerda, R-Direita, U-Cima, D-Baixo) e W significa que o Pak-man irá movimentar uma posição na direção a qual está. Se ele for caminhar e o local pretendido for uma parede, ele não sai do lugar. Se for uma pastilha, ele come a pastilha e onde era pastilha se torna um espaço livre e ele fica no lugar da pastilha. Se for um espaço livre ele vai ao local pretendido. O final da entrada será com três zeros. Detalhe: Pak-man sempre começará um cenário novo virado para a direita.",
        "titulo": "As Aventuras de Pak-man",
        "descricao": "Uma vez, um jogo novo precisava ser desenvolvido. Nele, os jogadores controlariam Pak-man, com o objetivo de comer todas as pastilhas que se encontram espalhadas num labirinto, enquanto evitam quatro fantasmas que escapam de uma prisão. Em cada canto da área de jogo, estão pastilhas maiores que permitem Pak-man caçar os fantasmas, em vez de ser caçado, durante um curto período de tempo. Num primeiro estágio do jogo, sem os fantasmas e sem as pastilhas maiores, você foi designado para desenvolver um programa que, dado um determinado cenário, e uma série de movimentos, informe quantas pastilhas foram comidas. Escreva um programa que, dado um cenário e instruções de movimentos, informe quantas pastilhas foram comidas no jogo."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2199",
        "saida": "For each test case, display its case number followed by the minimum number of escape shafts needed for the system of mine tunnels and the total number of ways these escape shafts can be installed. You may assume that the result fits in a signed 64-bit integer. Follow the format of the sample output.",
        "entrada": "The input consists of several test cases. The first line of each case contains a positive integer N (N ≤ 5·104 ) indicating the number of mine tunnels. Following this are N lines each containing two distinct integers s and t, where s and t are junction numbers. Junctions are numbered consecutively starting at 1. Each pair of junctions is joined by at most a single tunnel. Each set of mine tunnels forms one connected unit (that is, you can get from any one junction to any other). The last test case is followed by a line containing a single zero.",
        "titulo": "Mining Your Own Business",
        "descricao": "John Digger is the owner of a large illudium phosdex mine. The mine is made up of a series of tunnels that meet at various large junctions. Unlike some owners, Digger actually cares about the welfare of his workers and has a concern about the layout of the mine. Specifically, he worries that there may a junction which, in case of collapse, will cut off workers in one section of the mine from other workers (illudium phosdex, as you know, is highly unstable). To counter this, he wants to install special escape shafts from the junctions to the surface. He could install one escape shaft at each junction, but Digger doesn’t care about his workers that much. Instead, he wants to install the minimum number of escape shafts so that if any of the junctions collapses, all the workers who survive the junction collapse will have a path to the surface. Write a program to calculate the minimum number of escape shafts and the total number of ways in which this minimum number of escape shafts can be installed."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1618",
        "saida": "A saída deverá imprimir para cada caso de testes o número 1, se o robô estiver dentro da área (considerar as bordas da figura como parte da área da figura), e imprimir o número 0 caso contrário.",
        "entrada": "A entrada é composta de vários casos de testes. A primeira linha é formada por um número N indicando o total de casos de testes. As próximas N linhas são constituídas por 10 números inteiros (Ax, Ay, Bx, By, Cx, Cy, Dx, Dy, RX, RY) representando cada um dos vértices A, B, C e D e pela posição X, Y do robô. Cada valor é separado por um espaço em branco.",
        "titulo": "Colisão",
        "descricao": "Você recebeu a missão de verificar se o robô invadiu uma área retangular formada por quatro pontos cardeais (A,B,C e D). Serão informados os quatro pontos de um plano cardeal conforme a figura. A área será formada pela ligação dos quatro pontos da seguinte forma A-B, B-C, C-D e D-A. Será informado ainda a coordenada X,Y do robô."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1250",
        "saida": "Para cada caso, seu programa deve imprimir um inteiro representando o número de vezes que KiloMan é atingido.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N que indica o número de casos de teste. Cada caso de teste é composto por 3 linhas. A primeira linha contém um inteiro T (1 ≤ T ≤ 50) que indica o número de tiros. A segunda linha contém T inteiros, que representam a sequência das alturas às quais os tiros estão sendo disparados. Cada elemento da sequência será entre 1 e 7, inclusive. A terceira linha da entrada contém a string \"pulos\", que representa a sequência de pulos que KiloMan tentará; 'J' significa que ele irá pular e 'S' significa que ele ficará parado. Por exemplo, se o primeiro número da sequência de tiros for 3 e o primeiro caractere de \"pulos\" for 'J', então KiloMan pulará assim que o chefão atirar a uma altura 3 (e, portanto, ele será atingido).",
        "titulo": "KiloMan",
        "descricao": "Você chegou a um dos últimos chefões no novo jogo de ação 2-D de deslocamento lateral, KiloMan. O chefão tem uma arma grande que pode atirar projéteis em várias alturas. Para cada tiro, KiloMan pode ficar parado ou pular. Se ele ficar parado e o tiro estiver na altura 1 ou 2, ele será atingido. Se ele pular e o tiro estiver a uma altura maior que 2, então ele também será atingido. Caso contrário, ele não é atingido. Dada a altura de cada tiro e a sequência de pulos, quantas vezes KiloMan será atingido?"
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1588",
        "saida": "Imprima na ordem de classificação os times da entrada, um time em cada linha. Não é necessário imprimir nada entre os casos de teste!",
        "entrada": "Na primeira linha teremos um inteiro T (T ≤ 100), indicando o número de casos de teste. Na primeira linha de cada caso teremos dois números, N (2 ≤ N ≤ 20* ou 2 ≤ N ≤ 100**) e M (1 ≤ M ≤ 100* ou 1 ≤ M ≤ 1000**), indicando quantos times estão no campeonato e quantos jogos já aconteceram. Nas próximas N linhas teremos os nomes dos times, que são únicos, contendo apenas letras minúsculas do alfabeto. Nas próximas M linhas há a informação dos jogos na seguinte forma: X timeA Y timeB, indicando que o timeA jogou contra o timeB e o primeiro marcou X gols e o segundo Y gols. As strings terão tamanho entre 1 e 20 e o número de gols de um time em cada partida será entre 0 e 100.Um time nunca joga contra ele mesmo, porém ele pode jogar inúmeras vezes contra qualquer outro time. * ocorrerá em aproximadamente 90% dos casos de teste; ** ocorrerá no restante dos casos.",
        "titulo": "Ajude a Federação",
        "descricao": "A federação de futebol te contratou para elaborar a classificação dos times do campeonato. Você vai receber uma lista com alguns jogos ocorridos e deve ordenar os times. Uma vitória garante 3 pontos ao time, um empate 1 ponto e uma derrota 0 pontos. Leia atentamente a seguir o regulamento sobre como a classificação deve ser feita: Primeiramente o time com mais pontos deve ficar em primeiro. Caso haja empate, o time com mais vitórias fica na frente. Caso ainda tenha empate, o time com mais gols fica na frente. Por último se nenhum dos critérios acima possa desempatar os times, o que aparecer primeiro na entrada fica na frente. Dado os times e os jogos que já aconteceram, ordene e imprima o nome dos times na ordem de classificação."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1793",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de segundos que a escada rolante ficou ativa.",
        "entrada": "Haverá no máximo 30 casos de teste. Cada caso de teste inicia com uma linha contendo um inteiro N, indicando o número de pessoas que usaram a escada rolante no dia em questão (1 ≤ N ≤ 100). Na linha seguinte haverá N inteiros distintos, dados em ordem crescente, indicando o tempo t em que cada pessoa se aproximou da escada (1 ≤ t ≤ 1000). O último caso de teste é indicado quando N = 0, o qual não deverá ser processado.",
        "titulo": "Escada Rolante",
        "descricao": "Escadas rolantes sem dúvidas facilitam muito a vida das pessoas. Subir escadas é uma das tarefas mais tediosas já inventadas (após a invenção das escadas normais). Após algumas observações você percebeu que há muita energia gasta com escadas rolantes, pois elas continuam funcionando mesmo quando não há ninguém à utilizando. Para contornar isso, o dono de um shopping local instalou um sensor que verifica quando há alguém na escada rolante. Quando o sensor não detecta nenhuma presença, a escada rolante é desativada, assim economizando energia até que a próxima pessoa chegue. Para ser mais específico, o sistema funciona da seguinte maneira: a escada está inicialmente desativada. O tempo necessário para que uma pessoa chegue de um lado até o outro da escada rolante é 10 segundos. Ou seja, se uma única pessoa se aproximar da escada rolante no tempo t, a escada rolante ficará ativada nos tempos t, t+1, t+2, …, t+8 e t+9, e será desativada no tempo t+10, momento no qual a pessoa já saiu da escada rolante. Tal duração pode ser prolongada caso uma ou mais pessoas se aproximem da escada rolante durante tal processo. O dono do shopping local agora pediu sua ajuda. Escreva um algoritmo que, dados os tempos em que as pessoas se aproximaram da escada rolante, diga por quantos segundos a escada ficou ativada."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1800",
        "saida": "Para cada escritório em que ele esteve na última semana seu programa deverá retornar \"0\" caso ele já tenha visitado esse escritório ao procurar pelas chaves, ou \"1\" caso ele não tenha visitado esse escritório ainda enquanto procurava pelas chaves.",
        "entrada": "A primeira linha é composta por dois inteiros Q(1 ≤ Q ≤ 1*103) e E(1 ≤ E ≤ Q) representado respectivamente a quantidade de escritórios que ele esteve na última semana e a quantidade de escritórios que esteve nos últimos dois dias. A linha seguinte contém E inteiros Si (1 ≤ Si ≤ 1000) contendo o número de identificação de cada um dos escritórios em que ele esteve nos últimos dois dias. Seguem Q inteiros Ci (1 ≤ Ci ≤ 1000) contendo número de identificação de cada um dos escritórios em que ele esteve durante a última semana.",
        "titulo": "Onde Estão Minhas Chaves",
        "descricao": "Gabriel trabalha como Engenheiro de Software na empresa FingerBook, na última semana estava com tanto trabalho para fazer que resolveu dormir no FingerBook a semana inteira. Depois que terminou todo o trabalho e resolveu ir embora percebeu que não estava com as chaves de casa, então decidiu voltar e buscar as chaves. Gabriel decidiu começar a procurar visitando quais escritórios ele esteve recentemente, Após procurar em todos os escritórios que esteve nos úlimos dois dias, ele ainda não encontrou as chaves. Então resolveu pedir sua ajuda para procurar pelas chaves novamente. Para isso ele informará alguns dos escritórios em que ele esteve na última semana. Ajude-o a encontrar as chaves informando em quais escritórios é possível que ele tenha esquecido as chaves."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1327",
        "saida": "Para cada caso de teste na entrada, seu programa deve produzir uma linha de saída, contendo o nome do vencedor ou vencedores. A lista de vencedores deve aparecer na mesma ordem dada na entrada, e cada nome deve ser seguido por um espaço. A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste consiste de seis linhas. A primeira linha contém um inteiro N, indicando o número de jogadores no jogo (2 ≤ N ≤ 20). A segunda linha contém uma lista dos nomes dos jogadores, separados por espaços. O nome de um jogador é composto de no máximo 16 letras do alfabeto inglês (de 'A' até 'Z' e 'a' até 'z'). As cartas são entregues aos jogadores na ordem dada na lista. As próximas quatro linhas contém a descrição do baralho embaralhado. As cartas são representadas por inteiros de 1 a 13 (1, 11, 12 e 13 representam, respectivamente, as cartas Ás, Valete, Rainha e Rei). O baralho é descrito em quatro linhas de treze inteiros cada, separados por um único espaço. O baralho é listado de cima para baixo, então a primeira carta entregue é a primeira carta listada. O final da entrada é indicado por N = 0. A entrada deve ser lida da entrada padrão.",
        "titulo": "Drop Out",
        "descricao": "Drop Out é o nome de um simples jogo de cartas, que é jogado com um baralho normal de 52 cartas. As cartas são ordenadas da seguinte maneira: (Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Rainha, Rei), com o Ás sendo o menor deles, e o Rei o maior. O naipe das cartas é desconsiderado. Os jogadores (no mínimo dois) sentam em volta de uma mesa, um baralho é embaralhado e colocado no centro da mesa, com as cartas de face voltada para baixo. No início do jogo, todos os jogadores estão \"ativos\". O jogo se prossegue em turnos. Em cada turno, os jogadores ativos recebem uma carta do baralho, no sentido horário, independente da posição onde estão sentados. Os jogadores que recebem a menor carta no turno são eliminados do jogo e tornam-se \"inativos\". Note que até quatro jogadores podem ser eliminados em cada turno. O jogo termina quando resta somente um jogador ativo, o qual é o vencedor. Se todo o baralho acabar antes dos turnos terminarem, o jogo termina e todos os jogadores ativos no início do último turno são vencedores. Dado o número de jogadores, seus nomes e um baralho de cartas embaralhadas, você deve escrever um programa que simule o jogo e determine o vencedor ou vencedores."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2216",
        "saida": "For each test case, display the case number and either the phrase 'Takeover Incorporated' or the phrase 'Buyout Limited' depending on who wins the takeover war if both corporations act optimally.",
        "entrada": "Each test case is described by three lines of input. The first line contains two numbers 1 ≤ N ≤ 105 and 1 ≤ M ≤ 105 denoting respectively the number of subsidiaries of Takeover Incorporated and Buyout Limited. The next line lists the N sizes ai of the subsidiaries of Takeover Incorporated (1 ≤ ai ≤ 1012), and the third line lists the M sizes bj of the subsidiaries of Buyout Limited (1 ≤ bj ≤ 1012).",
        "titulo": "Takeover Wars",
        "descricao": "You are studying a takeover war between two large corporations, Takeover Incorporated and Buyout Limited. Each of these corporations controls a number of subsidiaries. The aim in this war is simply to drive the competition out of the market. There are N subsidiaries of Takeover Incorporated and M subsidiaries of Buyout Limited, and you know the market value of each subsidiary. Each company can designate one of its subsidiaries to perform a takeover. The takeover can either be friendly or hostile. A friendly takeover means a subsidiary of a corporation merges with a different subsidiary of the same corporation. The market value of the merged subsidiary is the sum of the market values of the constituent subsidiaries. There is no constraint on the relative sizes of the subsidiaries participating in a friendly takeover. A hostile takeover means a subsidiary A of a corporation attempts to take over a subsidiary B of the other corporation. For this to succeed, the market value of A has to be greater than the market value of B. After this move, B disappears from the market. The market value of A does not change (the gain of incorporating B’s assets is offset by the monetary cost of the takeover). For simplicity we assume that no sequence of moves leads to two subsidiaries of different corporations having the same market value. The companies take turns making moves in this takeover war, with Takeover Incorporated going first. A company will do nothing on its turn only if it cannot make a takeover. A company loses the takeover war if all its subsidiaries are taken over. Your aim is to learn which company can guarantee a victory from this war. In the first case of the sample data, Takeover Incorporated can simply take over one of the companies of Buyout Limited in its first move with the 7-value subsidiary. Then it will lose one of its small (1-value) subsidiaries to a hostile takeover, and then it will take over the second subsidiary of Buyout Limited. In the second case, Takeover has to make a friendly takeover in its first move. Buyout Limited will join its two subsidiaries into a single company with market value 10. Takeover will have to make a friendly takeover again (as again it will not have a large enough subsidiary to take over Buyout’s giant). Now Takeover will have two subsidiaries, valued either 9 and 3 or 6 and 6. In either case, Buyout takes over one of these subsidiaries, Takeover has to pass, and Buyout takes over the other one."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1885",
        "saida": "Para cada instância, imprima uma linha contendo um único caractere. Imprima 'Y' se for possível fazer o sorteio; caso contrário, imprima 'N'.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por duas linhas. A primeira linha contém 2 inteiros, N (1 ≤ N ≤ 1018) e K (0 ≤ K ≤ 105), que representam o número de pessoas e o número de dados, respectivamente. A segunda linha contém K inteiros. O i-ésimo inteiro dessa linha, digamos fi (1 ≤ fi ≤ 1018), representa o número de faces do i-ésimo dado.",
        "titulo": "Loteria Tailandesa",
        "descricao": "Borommarachathirat IV (สมเด็จพระบรมราชาธิราชที่ 4) foi um monarca do reino de Ayutthaya no século XVI. Borommarachathirat IV decidiu organizar uma loteria para sua população de súditos, utilizando uma certa quantidade de dados. São dados tradicionais tailandeses, que podem ter várias faces, cada face podendo ocorrer com a mesma probabilidade. Por seu forte senso de justiça, o monarca exige que o sorteio seja perfeitamente justo, ou seja, que cada um de seus súditos tenha a mesma chance de ser sorteado. O sorteio consiste de um número finito de lançamentos e, após cada lançamento, é decidido se houve algum vencedor ou se será necessário realizar um novo lançamento. Os lançamentos devem seguir as seguintes regras: vários dados podem ser jogados simultaneamente no mesmo lançamento; resultados anteriores podem influenciar na escolha dos dados para os lançamentos seguintes; um mesmo dado pode ser escolhido para vários lançamentos. O importante é garantir que, como resultado do sorteio, cada um dos habitantes tenha iguais chances de ser sorteado. Veja que nem sempre isso é possível. Por exemplo, se tivermos 5 pessoas e apenas um dado de 6 faces, não há como realizar o sorteio. Já com este dado é possível realizar o sorteio se a população for de 3, 6, 18, ou 36 pessoas, por exemplo. Sua tarefa neste problema é fazer um programa para ajudar o monarca a decidir se é possível realizar o sorteio com os dados disponíveis."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1558",
        "saida": "Para cada linha, imprima \"YES\" se o número pode ser representado por uma soma de dois inteiros ao quadrado, caso contrário imprima \"NO\".",
        "entrada": "A entrada é composta por várias linhas, cada linha contém um inteiro com módulo menor ou igual a 10000.",
        "titulo": "Soma de Dois Quadrados",
        "descricao": "Quais números inteiros podem ser representados por uma soma de dois inteiros ao quadrado? É essa a pergunta que seu programa deve responder! Por exemplo, o número 41 pode ser representado como (-4)2 + 52 = 41, já o número 7 não pode ser representado da mesma maneira."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2207",
        "saida": "For each test case, display the case number and the time in seconds of the shortest possible tour.",
        "entrada": "The first line of each test case consists of two integers n and m satisfying 3 ≤ n ≤ 20 and 2 ≤ m, where n is the number of locations (hotels, headquarters, attraction) and m is the number of pairs of locations between which the bus can travel. The n different locations are numbered from 0 to n−1, where 0 is the headquarters, 1 through n−2 are the hotels, and n − 1 is the attraction. Assume that there is at most one direct connection between any pair of locations and it is possible to travel from any location to any other location (but not necessarily directly). Following the first line are m lines, each containing three integers u, v, and t such that 0 ≤ u, v ≤ n−1, u != v, 1 ≤ t ≤ 3600, indicating that the bus can go directly between locations u and v in t seconds (in either direction).",
        "titulo": "Bus Tour",
        "descricao": "Imagine you are a tourist in Warsaw and have booked a bus tour to see some amazing attraction just outside of town. The bus first drives around town for a while (a long while, since Warsaw is a big city) picking up people at their respective hotels. It then proceeds to the amazing attraction, and after a few hours goes back into the city, again driving to each hotel, this time to drop people off. For some reason, whenever you do this, your hotel is always the first to be visited for pickup, and the last to be visited for dropoff, meaning that you have to suffer through two not-so-amazing sightseeing tours of all the local hotels. This is clearly not what you want to do (unless for some reason you are really into hotels), so let’s fix it. We will develop some software to enable the sightseeing company to route its bus tours more fairly—though it may sometimes mean longer total distance for everyone, but fair is fair, right? For this problem, there is a starting location (the sightseeing company headquarters), h hotels that need to be visited for pickups and dropoffs, and a destination location (the amazing attraction). We need to find a route that goes from the headquarters, through all the hotels, to the attraction, then back through all the hotels again (possibly in a different order), and finally back to the headquarters. In order to guarantee that none of the tourists (and, in particular, you) are forced to suffer through two full tours of the hotels, we require that every hotel that is visited among the first [h/2] hotels on the way to the attraction is also visited among the first [h/2] hotels on the way back. Subject to these restrictions, we would like to make the complete bus tour as short as possible. Note that these restrictions may force the bus to drive past a hotel without stopping there (this is not considered visiting) and then visit it later, as illustrated in the first sample input."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1225",
        "saida": "Para cada caso de teste imprima uma linha contendo um único número inteiro indicando o número mínimo de compassos que a música terá. Se não é possível terminar a música com todos os integrantes cantando a mesma nota, imprima o valor−1.",
        "entrada": "A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 104) indicando o número de integrantes do coral. As notas serão indicadas por números inteiros. A segunda linha contém N números inteiros, indicando as notas iniciais (−105 ≤ notai ≤105), onde 0 ≤ i ≤ N−1, que cada integrante deve cantar. As notas são dadas em ordem não decrescente de altura (notai ≤notai+1).",
        "titulo": "Coral Perfeito",
        "descricao": "A Maestrina do coral está planejando o espetáculo que apresentará na famosa Semana Brasileira de Corais. Ela pensou em preparar uma nova música, definida da seguinte maneira: • cada um dos integrantes do coral inicia cantando uma nota, e somente muda de nota quando determinado pela Maestrina; • ao final de cada compasso, a Maestrina determina que exatamente dois integrantes alterem a nota que cantam: um integrante passa a cantar a nota imediatamente acima da nota que cantava, e o outro integrante passa a cantar a nota imediatamente abaixo da nota que cantava; • a música termina ao final do primeiro compasso em que todos os integrantes do coral cantam a mesma nota. A Maestrina já tem várias ideias de como distribuir as notas no início da música entre os integrantes do coral, de forma a criar o efeito desejado. No entanto, ela está preocupada em saber se, dada uma distribuição de notas entre os integrantes, é possível chegar ao final da música da forma desejada (todos cantando a mesma nota) e, caso seja possível, qual o número mínimo de compassos da música. Você pode ajudá-la?"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2191",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter um par de inteiros I e J que indicam respectivamente a primeira e última partidas do melhor período, conforme determinado pelo seu programa, exceto quando o saldo de gols do melhor período for menor ou igual a zero; neste caso a segunda linha deve conter a expressão “nenhum”. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "entrada": "Seu programa deve ler vários conjuntos de teste. A primeira linha de um conjunto de teste contém um inteiro não negativo, N (0 ≤ N ≤ 10000), que indica o número de partidas realizadas pelo time (o valor N = 0 indica o final da entrada). Seguem-se N linhas, cada uma contendo um par de números inteiros não negativos X e Y (0 ≤ X,Y ≤ 50) que representam o resultado da partida: X são os gols a favor e Y os gols contra o time de Hipólito. As partidas são numeradas sequencialmente a partir de 1, na ordem em que aparecem na entrada.",
        "titulo": "Saldo de Gols",
        "descricao": "Hipólito é um torcedor fanático. Coleciona flâmulas, bandeiras, recortes de jornal, figurinhas de jogadores, camisetas e tudo o mais que se refira a seu time preferido. Quando ganhou um computador de presente em uma festa, resolveu montar um banco de dados com os resultados de todos os jogos de seu time ocorridos desde a sua fundação, em 1911. Depois de inseridos os dados, Hipólito começou a ficar curioso sobre estatísticas de desempenho do time. Por exemplo, ele deseja saber qual foi o período em que o seu time acumulou o maior saldo de gols. Como Hipólito tem o computador há muito pouco tempo, não sabe programar muito bem, e precisa de sua ajuda. É dada uma lista, numerada seqüencialmente a partir de 1, com os resultados de todos os jogos do time (primeira partida: 3 x 0, segunda partida: 1 x 2, terceira partida: 0 x 5 ...). Sua tarefa é escrever um programa que determine em qual período o time conseguiu acumular o maior saldo de gols. Um período é definido pelos números de seqüência de duas partidas, A e B (A ≤ B ≤ N). O saldo de gols acumulado entre A e B é dado pela soma dos gols marcados pelo time em todas as partidas realizadas entre A e B (incluindo as mesmas) menos a soma dos gols marcados pelos times adversários no período. Se houver mais de um período com o mesmo saldo de gols, escolha o maior período (ou seja, o período em que B - A é maior). Se ainda assim houver mais de uma solução possível, escolha qualquer uma delas como resposta."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1824",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir sim se o sapo passou por todas as mn posições do lago e nao em caso contrário. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "São dadas várias instâncias. Cada instância começa com dois inteiros m (0 ≤ m ≤ 1000) e n (0 ≤ n ≤ 1000) que definem a dimensão do lago. Em seguida vêm m linhas com n números inteiros, descrevendo o comportamento do sapo quando colocado naquela posição do lago. Valores m = n = 0 indicam o final das instâncias e não devem ser processados.",
        "titulo": "Sapos de Tsé-Tsé",
        "descricao": "A mosca do sono é uma das pragas mais sérias na China, que causa prejuízos enormes ao governo do país. Populações inteiras de pequenas cidades são picadas pela mosca e acabam caindo no sono durante o trabalho (muitos suspeitam que nem são as moscas as causadoras do problema, mas isso é outra história...). Preocupados com esta situação os pesquisadores de Engenharia Genética da Universidade de Zhao-Zhao estudaram o genoma de um sapo comedor de insetos da região e descobriram que o padrão de saltos do sapo poderia ser facilmente controlado se uma alteração fosse feita em seu cromossomo 12. Infelizmente nem todos os experimentos resultaram em sucesso e, além de alguns sapos sem pernas e com 12 olhos, os experimentos deram origem a várias espécies de sapos com características diferentes de saltos. O objetivo deste problema é que vocês desenvolvam um programa que, a partir da observação do padrão de saltos de um sapo, verifique se ele é do tipo desejado. Um sapo é do tipo desejado se colocado no canto superior esquerdo de um lago retangular ele cobrir toda a extensão do lago com um número mínimo de saltos. Para anotar o padrão de saltos de um sapo foram feitos vários experimentos. Em cada experimento o sapo foi colocado em uma posição do lago e se anotou para que posição vizinha ele saltou. As posições vizinhas são ordenadas de 1 a 8 no sentido dos ponteiros do relógio, começando na posição imediatamente acima da posição do sapo, como na figura abaixo. 8 1 2 7 sapo 3 6 5 4 Sua tarefa é dada uma instância de um lago, marcado em cada uma de suas posições com o padrão de saltos do sapo, verificar se este, quando colocado no canto superior esquerdo do lago, percorre todas as suas posições."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1318",
        "saida": "Para cada caso de teste seu programa deverá imprimir uma linha, contendo o número de bilhetes do pacote que contém outro bilhete com o mesmo número da sequência.",
        "entrada": "A entrada contém dados de diversos casos de teste. Cada caso de teste contém duas linhas. A primeira linha contém dois inteiros N e M, que indicam, respectivamente, o número de bilhetes originais e o número de pessoas presentes na festa (1 ≤ N ≤ 10000 e 1 ≤ M ≤  20000). A segunda linha do caso de testes contém M inteiros Ti representando os números dos bilhetes contidos no pacote que o diretor lhe deu (1 ≤ Ti ≤ N). O final da entrada é indicado por N = M = 0.",
        "titulo": "Bilhetes Falsos",
        "descricao": "Sua escola organizou uma grande festa para celebrar a brilhante vitória do seu time no prestigiado, e mundialmente famoso CCIP (Competição Colegial Internacional de Poesia). Todos na sua escola foram convidados para a noite, que incluía coquetel, jantar e uma sessão onde a poesia de seu time era lida para a audiência. O evento foi um sucesso – mais pessoas mostraram interesse em sua poesia do que você esperava – porém alguns de seus críticos disseram que tamanho público esteve presente graças à comida, e não graças a sua poesia. Independente do motivo, no dia seguinte você descobriu o motivo pelo qual o salão esteve tão cheio: o diretor da escola lhe confidenciou que diversos dos bilhetes usados pelos visitantes eram falsos. O número real de bilhetes foram numerados sequencialmente de 1 a N (N ≤ 10000). O diretor suspeita que algumas pessoas usaram o scanner e a impressora da Sala da Computação para produzir cópias dos bilhetes verdadeiros. O diretor lhe deu um pacote contendo todos os bilhetes coletados dos visitantes na entrada da festa, e lhe pediu para que determinasse quantos bilhetes no pacote continham “clones”, isto é, outro bilhete com o mesmo número da sequência."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1987",
        "saida": "Seu programa deve fornecer o número da soma dos algarismos de m e logo depois apresentar “sim” caso o número seja divisível por 3 ou “nao” caso não seja. Não esqueça o fim de linha após o produto, caso contrário seu programa apresentará a mensagem: “Presentation Error”.",
        "entrada": "O arquivo de entrada conterá dois números, n (1< n <10) indicando o número de algarismos de m, (1< m < 1000000000). A entrada termina com o fim do arquivo (EOF).",
        "titulo": "Divisibilidade Por 3",
        "descricao": "No mundo da matemática, para sabermos se um grande número é divisível por outro existe uma regra, chamada de regra de divisibilidade. Um número natural é divisível por 3 quando a soma de todos os seus algarismos forma um número divisível por 3, ou seja, um múltiplo de 3. Ex1: 1.104 é divisível por 3? Resposta: SIM. É divisível por 3, pois seus algarismos quando somados: 1 + 1 + 0 + 4 = 6, que é um número divisível por 3 (porque 6 ÷ 3 = 2, que é um número natural). Ex2: 2.791.035 é divisível por 3? Resposta: SIM. 2.791.035 é constituído de algarismos que somados: 2 + 7 + 9 + 1 + 0 + 3 + 5 = 27, gera um número divisível por 3 (pois 27 ÷ 3 = 9, número natural)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2037",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo uma string, representando a lista única de rivais da concorrente número 1 (Florência) que seja compatível com as listas dos rivais dos outros concorrentes. Os rivais indicados nessa lista devem aparecer em ordem cronológica.",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém um único número inteiro N, que representa o número de competidores (2 ≤ N ≤ 9). Cada concorrente é identificado por um número inteiro diferente de 1 a N, e concorrente número 1 é sempre Florência. A segunda linha contém N-1 strings não vazias Li de no máximo de 100 caracteres cada (para i = 2, 3, ..., N). A string Li é composta unicamente de dígitos entre 1 e N, excluindo o dígito i, e representa a lista de rivais do concorrente número i em ordem cronológica. Note que o número do competidor 1 aparece pelo menos uma vez em uma das listas dadas. Em cada caso de teste, existe uma lista única de rivais para a concorrente número 1, que é compatível com as outras listas de rivais. O final da entrada é indicada por uma linha que contém o número -1.",
        "titulo": "A Lista",
        "descricao": "O Comitê Internacional de Xadrez Profissional organiza um torneio para jogadores avançados, com uma metodologia muito estranha. Como esperado, em cada jogo exatamente dois jogadores se enfrentam mutuamente, mas neste caso apenas um jogo ocorre de cada vez, porque existe apenas um tabuleiro de xadrez disponível. Depois de receber as inscrições dos competidores e atribuindo-lhes um número, a organização decide arbitrariamente quais jogos irão acontecer e em qual ordem. Cada concorrente pode enfrentar qualquer outro concorrente qualquer número de vezes, e é até possível que alguns concorrentes nunca joguem uns contra os outros. Assim que decidido todos os jogos a serem jogados, a organização distribui a cada competidor uma lista não-vazia de seus rivais, em ordem cronológica (ou seja, a ordem em que os jogos serão realizados). Florência inscreveu em primeiro lugar, de modo que a ela foi atribuído o número 1. Depois de conversar um pouco com os outros concorrentes, ela percebeu que havia perdido sua lista de rivais. Ela não quer incomodar os organizadores do torneio, então ela pediu a todos os outros concorrentes para obter uma cópia de suas próprias listas de rivais, na esperança de que, com esta informação, ela seria capaz de reconstruir sua lista perdida. Florência não tem certeza se existe apenas um tipo de lista de rivais que é compatível com todas as listas copiadas que foram dadas a ela pelos outros concorrentes. No entanto, ela sabe que a lista que ela foi dada pelos organizadores do torneio é de fato única. Sua tarefa é ajudá-la a reconstruir esta lista."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1712",
        "saida": "Seu programa deve imprimir uma linha contendo um número inteiro, o número máximo de árvores que podem ser preservadas, com as restrições dadas.",
        "entrada": "A primeira linha da entrada contém dois inteiros N e M (2 ≤ N ≤ 50, 1 ≤ M ≤ 10). As N linhas seguintes contêm, cada uma, N inteiros de valor entre 1 e 1000, representando o número de árvores dentro de cada quadrado da fazenda.",
        "titulo": "Ecologia",
        "descricao": "O reino da Poliminogônia passou recentemente uma lei ecológica que obriga todas as fazendas a preservar o máximo de árvores possível em uma porcentagem fixa da área da fazenda. Além disso, para que os animais silvestres possam se movimentar livremente, a área preservada deve ser conexa. As fazendas na Poliminogônia são sempre um reticulado de N × N quadrados de um hectare cada. A figura ao lado ilustra uma fazenda com N = 5. A área preservada deve cobrir exatamente M quadrados. No exemplo da figura, M = 6. Ela deve ser conexa ortogonalmente; quer dizer, tem que ser possível se movimentar entre quaisquer dois quadrados preservados apenas com movimentos ortogonais entre quadrados preservados. A área não preservada, entretanto, pode ser desconexa. Os fazendeiros sabem o número de árvores que há dentro de cada quadrado e você deve escrever um programa que calcule o número máximo possível de árvores que podem ser preservadas com uma area de M quadrados. No exemplo, é possível preservar 377 árvores!"
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1731",
        "saida": "Para cada caso de teste, imprima o menor nome da fruta resultante em uma linha. Se mais de nome for possível, qualquer um será aceito.",
        "entrada": "Cada linha do arquivo de entrada contém duas palavras que representa os nomes das frutas que deve ser combinado. Todos os nomes tem um tamanho máximo de 100 e consiste somente em caracteres do alfabeto. A entrada é terminada por fim de arquivo.",
        "titulo": "Frutas Avançadas",
        "descricao": "A companhia \"Frutas do século 21\" tem se especializado em criar novos tipos de frutas através de transferência de genes a partir de um fruto no genoma da outra. Muita das vezes este método não funciona, mas as vezes, em casos muito raro, uma nova fruta é gerada e tem o gosto da mistura das duas. Um grande tópico de discussão dentro da empresa é \"Como deveria chamar as novas criações?\" Uma mistura entre uma apple e uma pear poderia ser chamada apple-pear, é claro, mas isso não pareçe muito interessante. O patrão finalmente decide usar a menor palavra que contém a combinação ambos os nomes das frutas originais como sub-palavras para o novo nome. Por exemplo, \"applear\" contém \"apple e \"pear\" (APPLEar e apPlEAR), e não tem uma palavra menor que tem a mesma propriedade. A combinação de um cranberry e um bosenberry poderia ser chamado então um \"boysecranberry\" ou um \"craboysenberry\", por exemplo. Seu trabalho é escrever um programa que crie um nome tão curto quanto a combinação das duas frutas fornecidas. Seu algoritmo deve ser eficiente, do contrário é pouco provavel que executará no time alocado para frutas com nomes longos."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1290",
        "saida": "Para cada caso de teste da entrada o seu programa deve produzir uma linha de saída, contendo: somente a palavra 'impossible', caso não seja possível atender ao pedido do cliente (porque não existem pelo menos N caixas do mesmo tamanho no estoque que podem conter o item); ou um inteiro V, que especifica o volume do espaço que sobra quando um dos N itens é colocado em uma das caixas escolhidas.",
        "entrada": "A entrada consiste em vários casos de teste. A primeira linha de cada caso de teste contem dois inteiros N e M, indicando respectivamente o número de caixas que o cliente deseja comprar (1 ≤ N ≤ 1500) e o número de caixas na lista de estoque (1 ≤ M ≤ 1500). A segunda linha contém três inteiros X, Y e Z, representando as dimensões do item que o cliente deseja embrulhar (0 < X, Y, Z ≤ 50). Cada uma das M linhas seguintes contém três inteiros A, B e C representando as dimesões de uma das caixas da lista de estoque (0 < A, B, C ≤ 50). O caso de teste com N = 0 indica o fim da entrada.",
        "titulo": "Caixas Muito Especiais",
        "descricao": "Special Box Company (SBC) é uma empresa familiar que produz caixas de papelão decoradas para embalar presentes. As caixas são feitas à mão, produzidas individualmente a partir de materiais nobres. Ao aceitar uma encomenda de um cliente, eles sempre produzem algumas caixas a mais do que o necessário, para manter um estoque de caixas para ser vendido no futuro. Ao longo dos anos seu estoque tem crescido, com caixas em todo o lugar, e eles decidiram que precisavam se organizar um pouco mais. Eles têm, portanto, feito uma lista registrando as dimensões de cada caixa em seu estoque. SBC acaba de receber um pedido de um cliente que deve ser entregue amanhã, por isso não há tempo para produzir novas caixas. O cliente quer uma certo número N de caixas, todas do mesmo tamanho; cada caixa irá ser usada para embalar um item de dimensões X, Y e Z. Como o papelão utilizado nas caixas é muito fino, você pode assumir que em uma caixa de tamanho (X, Y, Z) se encaixaria perfeitamente o item que o cliente quer embrulhar. Se não houver pelo menos N caixas que encaixam perfeitamente o item, o cliente quer caixas de N que se encaixam os itens tão firmemente quanto possível. O tamanho da caixa que se encaixa os itens tão firmemente quanto possível é a que minimiza o espaço vazio quando o item é colocado dentro da caixa. Um item pode ser rotacionado em qualquer direção para ser acomodado dentro de uma caixa, por isso, uma caixa de tamanho (X, Y, Z) é tão boa como uma caixa de tamanho (Y, Z, X). Você pode ajudar a SBC a descobrir se eles podem atender a ordem do cliente?"
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1964",
        "saida": "Imprima uma linha contendo unicamente o nome da moça que Khan convidou para sair.",
        "entrada": "A única linha da entrada consiste de cinco inteiros, C, VA, VB, T e D: C (0 < C ≤ 1000) representa o comprimento da estrada que circunda o campus, em metros; VA e VB (0 < VA, VB ≤ 400) representam as velocidades constantes, em centímetros por segundo, a que correm respectivamente Ana e Bia; T (0 ≤ T ≤ 200) representa o tempo, em minutos, entre o início da corrida das moças e a chegada de Khan ao obelisco; D (0 ≤ D < C) representa a distância, em metros, no sentido horário do ponto onde Ana e Bia começaram a correr até o obelisco.",
        "titulo": "A Ira de Khan",
        "descricao": "Khan é um rapaz muito inteligente que estuda Ciência da Computação na Universidade Federal da Fronteira Sul (UFFS). Porém, ontem à tarde ele e sua namorada discutiram feio e acabaram terminando, o que o deixou muito irado. Como ele tinha aula à noite, resolveu ir a pé para a universidade, a fim de espairecer um pouco. Ao chegar no campus, parou em frente ao obelisco da UFFS e instantaneamente decidiu que não usaria sua ira para o ódio, mas para o amor: ficaria ali parado até que uma moça passasse por ele, com a qual, convidando-a para sair, tentaria reconstruir sua vida. Se mais de uma moça passasse por ele ao mesmo tempo, Khan escolheria a mais bonita. O campus da UFFS em Chapecó é circundado por uma estrada, à qual se chega através de um único acesso pela cidade de Guatambu, já que o acesso antigo foi desativado. Conforme ilustrado na figura acima, é bem na interseção entre o acesso e a estrada circundante que se encontra o obelisco da UFFS, representado na figura pelo símbolo *. Ana e Bia são duas amigas que também estudam à noite na UFFS. Ambas são muito saudáveis, apesar de Ana ser mais bonita que Bia, e gostam de se exercitar correndo na estrada circundante antes da aula, sempre no sentido horário. Elas sempre começam a correr juntas em algum ponto da estrada circundante, mas, como correm a velocidades constantes não necessariamente iguais, podem se separar e se encontrar diversas vezes durante a atividade. Ontem elas começaram a correr não depois de Khan chegar ao obelisco, e não havia outras moças no campus."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1245",
        "saida": "Para cada caso de teste imprima uma linha contendo um único número inteiro indicando o número total de pares corretos que podem ser formados.",
        "entrada": "A entrada é composta por diversos casos de teste e termina com final de arquivo (EOF). A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 10 4), N é par, indicando o número de botas individuais entregues. Cada uma das N linhas seguintes descreve uma bota, contendo um número inteiro M (30 ≤ M ≤ 60) e uma letra L, separados por uma espaço em branco. M indica o número da bota e L indica o pé da bota: L = 'D' indica que a bota é para o pé direito, L = 'E' indica que a bota é para o pé esquerdo.",
        "titulo": "Botas Perdidas",
        "descricao": "A divisão de Suprimentos de Botas e Calçados do Exército comprou um grande número de pares de botas de vários tamanhos para seus soldados. No entanto, por uma falha de empacotamento da fábrica contratada, nem todas as caixas entregues continham um par de botas correto, com duas botas do mesmo tamanho, uma para cada pé. O sargento mandou que os recrutas retirassem todas as botas de todas as caixas para reembalá-las, desta vez corretamente. Quando o sargento descobriu que você sabia programar, ele solicitou com a gentileza habitual que você escrevesse um programa que, dada a lista contendo a descrição de cada bota entregue, determina quantos pares corretos de botas poderão ser formados no total."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1966",
        "saida": "Imprima uma linha contendo unicamente o número de cubos de queijo que haverá na base da pirâmide de João.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros, N e B (1 ≤ N ≤ 105, 0 ≤ B ≤ 109), os quais representam respectivamente o número de peças de queijo na loja e o orçamento de João. A segunda linha da entrada consiste de N inteiros vi (1 ≤ vi ≤ 104, 1 ≤ i ≤ N), cada um representando o volume, em centímetros cúbicos, da i-ésima peça de queijo. A última linha da entrada consiste de N inteiros pi (0 ≤ pi ≤ 104, 1 ≤ i ≤ N), cada um representando o preço da i-ésima peça de queijo.",
        "titulo": "A Volta para Casa",
        "descricao": "Este problema é dedicado a todos nós que estudamos ou trabalhamos longe da cidade onde moram nossas famílias! João adora queijo. Muçarela, parmesão, provolone, não importa, ama-os todos. João gosta tanto de queijo que põe queijo em tudo o que cozinha, até mesmo em sobremesas. A família de João é tão louca por queijo quanto ele. Como neste fim de semana ele está indo visitar seus familiares, que moram longe, decidiu levar um pouco do famoso queijo chapecoense para eles. João pretende organizar uma festa assim que chegue à sua cidade natal. A ideia é cortar todo o queijo que levar em cubos de 1 cm de lado e montar uma pirâmide com eles como a pirâmide da figura, que possui 5 cubos de queijo na base. Talvez não seja possível utilizar todos os cubos de queijo na construção da pirâmide. Neste caso, João come todo o queijo que sobrar. Na loja de queijos de Chapecó, há queijos de vários tamanhos e preços, todos em forma de paralelepípedo. Não é necessário comprar uma peça inteira de queijo. Pode-se solicitar um volume específico, por exemplo: — Sr. Cleijon, poderia por favor cortar para mim um pedaço de 20 cm × 10 cm × 30 cm de queijo parmesão? João estava com um orçamento restrito para comprar os queijos para levar para sua família, mas mesmo assim comprou o maior volume de queijo possível respeitando o orçamento que destinou para isso."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1366",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma única linha na saída, contendo um número inteiro, indicando o número máximo de retângulos que podem ser formados com o conjunto de varetas dado.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N que indica o número de diferentes comprimentos de varetas (1 ≤ N ≤ 1.000) no conjunto. Cada uma das N linhas seguintes contém dois números inteiros Ci e Vi , representando respectivamente um comprimento (1 ≤ Ci ≤ 10.000) e o número de varetas com esse comprimento (1 ≤ Vi ≤ 1.000). Cada comprimento de vareta aparece no máximo uma vez em um conjunto de teste (ou seja, os valores Ci são distintos). O ﬁnal da entrada é indicado por N = 0.",
        "titulo": "Jogo de Varetas",
        "descricao": "Há muitos jogos divertidos que usam pequenas varetas coloridas. A variante usada neste problema envolve a construção de retângulos. O jogo consiste em, dado um conjunto de varetas de comprimentos variados, desenhar retângulos no chão, utilizando as varetas como lados dos retângulos, sendo que cada vareta pode ser utilizada em apenas um retângulo, e cada lado de um retângulo é formado por uma única vareta. Nesse jogo, duas crianças recebem dois conjuntos iguais de varetas. Ganha o jogo a criança que desenhar o maior número de retângulos com o conjunto de varetas. Dado um conjunto de varetas de comprimentos inteiros, você deve escrever um programa para determinar o maior número de retângulos que é possível desenhar."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1428",
        "saida": "Para cada caso de teste, imprima uma linha contendo o menor número de sonares necessários.",
        "entrada": "A primeira linha da entrada contém um inteiro t, indicando o número de casos de teste. Cada caso de teste é descrito por uma linha contendo dois inteiros separados por um espaço, n e m (6 ≤ n, m ≤ 10000), indicando o tamanho da grade (n linhas e m colunas).",
        "titulo": "Procurando Nessy",
        "descricao": "O mostro do lago Ness é um animal não-identificado misterioso que, dizem, habita o Lago Ness, um grande lago localizado na cidade de Inverness, no norte da Escócia. Nessie é geralmente categorizado como um tipo de mostro de lagos. Tradução livre de trecho de https://en.wikipedia.org/wiki/Loch_Ness_Monster. Em julho de 2003, a rede BBC fez uma grande investigação sobre o Lago Ness, usando 600 sonares separados. Nenhum vestígio de nenhum \"mostro marítimo\" (isto é, um grande animal, conhecido ou desconhecido) foi encontrado no lago. A equipe da BCC concluiu que Nessie não existe. Agora, nós queremos repetir este experimento. Dada uma grade de n linhas e m colunas representando o lago, 6 ≤ n, m ≤ 10000, encontre o menor número de sonares que você precisa colocar no lago de tal forma que podemos controlar todas as posições da grade, com as seguintes condições: Um sonar ocupa uma posição da grade; O sonar controla sua própria posição, além das suas posições adjacentes; As posições nas bordas da grade não precisam ser controladas, pois Nessie não conseguiria se esconder nelas (ela é grande demais para isso). Considere as seguintes figuras: Nas figuras, X representa um sonar, e as posições escuras representam as posições controladas por sonares. A última figura exemplifica uma solução para o problema."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1329",
        "saida": "Para cada caso de teste na entrada, seu programa deverá escrever uma linha contendo a sentença \"Mary won X times and John won Y times\" (\"Maria venceu X vezes e Joao venceu Y vezes\"), onde 0 ≤ X e 0 ≤ Y.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um único inteiro N indicando o número de vezes jogadas (1 ≤ N ≤ 10000). A linha seguinte contém N inteiros Ri, separados por um espaço, descrevendo a lista de resultados. Se Ri = 0 então Maria venceu o iésimo jogo, se Ri = 1 então João venceu o iésimo jogo (1 ≤ i ≤ N). O fim da entrada é indicado por N = 0.",
        "titulo": "Cara ou Coroa",
        "descricao": "João e Maria são amigos desde que se conheceram na creche. Desde então, eles compartilham uma rotina de brincadeiras: todas as vezes que eles se encontram, eles jogam Cara ou Coroa com uma moeda, e quem ganhar tem o privilégio de decidir quais brincadeiras eles irão jogar durante o dia. Maria sempre escolhe cara, e João sempre escolhe coroa. Hoje em dia eles estão na faculdade, mas continuam sendo bons amigos. Sempre que se encontram, eles ainda jogam Cara ou Coroa, e o vencedor decide que filme assistir, ou em que restaurante jantar, e assim por diante. Ontem Maria contou a João que ela guarda um registro de todas as vezes que eles jogaram, desde os tempos da creche. João ficou espantado. Porém João está estudando Ciência da Computação e decidiu que essa era uma boa oportunidade para mostrar a Maria suas habilidades em programação, escrevendo um programa que mostrasse o número de vezes que cada um deles venceu ao longo de todos esses anos."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1816",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequêncial e crescente a partir de 1. Na linha seguinte, você deve imprimir o texto decodificado. Uma linha em branco deve ser impressa após cada instância.",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversas instâncias. Cada instância tem a estrutura que segue. Na primeira linha é fornecido um inteiro m (0 ≤ m ≤ 10000) que representa o número de inteiros que compõem o texto codificado. Na próxima linha são dados, separados por espaços em branco, os m valores inteiros (cada valor é maior ou igual a 1 e menor ou igual a 26). Um valor m = 0 indica o final das instâncias e não ser processado.",
        "titulo": "Vikings em Praga?",
        "descricao": "Vestígios de uma antiga civilização viking foram descobertos nos arredores de Praga, e uma grande quantidade de material impresso foi achada junto ao sítio arqueológico. Como esperado, a leitura deste material mostrou-se uma tarefa árdua e desafiadora, já que essa civilização utilizava um esquema de codifucação de texto para evitar que seu conhecimento fosse assimilado por seus rivais. Recentemente, pesquisadores tchecos anunciaram com grande euforia à imprensa a compreensão do mecanismo de codificação utilizado por esses vikings. De acordo com os pesquisadores, o alfabeto viking era composto pelas letras de A até Z (incluindo as letras K, W e Y). A codificação era realizada da forma que segue. Inicialmente, era construída uma lista em que a letra A aparecia na primeira posição, a letra B aparecia na segunda, e assim sucessicamente,com as letras sequindo a mesma ordem que em nosso alfabeto. Em sequida, o texto a ser codificado era barrido da esquerda para a direita e, para cada letra l encontrada, o número de sua posição na lista era impresso e l era movida para o início da lista. Por exemplo, a codificação viking para a mensagem: A B B B A A B B B B A C C A B B A A A B C era dada pela seguinte sequência de inteiros: 1 2 1 1 2 1 2 1 1 1 2 3 1 2 3 1 2 1 1 2 3 Os pesquisadores tchecos pediram sua ajuda para construir um programa que recebe uma sequência de inteiros que representa uma mensagem codificada e decodifica-a."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1496",
        "saida": "Para cada caso de teste, imprima uma linha com os índices que todos os \"Ultas\" no intervalo da montanha, na ordem com que eles aparecem no perfil.",
        "entrada": "A entrada é composta por diversos casos de teste e termina em EOF. A primeira linha de cada caso contém um inteiro  N (3 ≤ N ≤ 105) que representa o número de pontos em um perfil. A segunda linha contém N inteiros Hi que indicam a altitude (em centimetros) dos pontos, na ordem em que eles aparecem no perfil (0 ≤ Hi ≤ 106 para i = 1, 2, . . . , N). Pontos consecutivos tem altitudes diferentes (Hi != Hi+1 for i = 1, 2, . . . , N − 1), já o primeiro e o último pontos estão no nível no mar (H1 = HN = 0). Você pode assumir que o perfil contém pelo menos um \"Ultra\".",
        "titulo": "Suba os \"Ultras\"",
        "descricao": "A proeminência topográfica de um pico é uma medida de especial interesse para os alpinistas e pode ser definido como se segue: a proeminência de um pico p com a altitude h, em relação ao nível do mar, é o maior valor d tal que qualquer caminho no terreno a partir de p para qualquer pico estritamente superior vai passar através de um ponto de altitude h - d. Se não houver um pico estritamente superior, então a proeminência é h. Aqueles picos com proeminência topográfica maior ou igual a 150000 centímetros (precisão é de grande importância para os alpinistas!) têm um nome especial: eles são chamados de \"Ultras\". Você deve escrever um programa que identifica todos os \"Ultras\" que ocorrem em um perfil bidimensional de uma cadeia de montanhas representada como uma sequência de pontos. Note que a distância horizontal entre os pontos não é importante, tudo o que você precisa é a altitude de cada ponto. Na figura abaixo, os \"Ultras\" são os pontos 7, 12, 14, 20 e 23."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1997",
        "saida": "Para cada caso de teste de saída, imprima uma única linha com um inteiro representando a quantidade mínima de jogadas necessárias para passar as fichas da posição inicial S para o objetivo T.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em uma única linha que contém duas palavras não vazias S e T de igual tamanho e, no máximo, 500 caracteres cada. S indica a posição inicial da ficha, enquanto T representa o objetivo. Ambas as palavras contêm apenas letras maiúsculas \"B\" e \"N\", que representam, respectivamente, branco e preto. A última linha da entrada contém dois asteriscos (\"*\") separados por um espaço único e não deve ser processado como um caso de teste.",
        "titulo": "Branco e Preto",
        "descricao": "O famoso jogo Preto e Branco é um jogo individual que é jogado com um conjunto de fichas idênticas. Cada ficha tem duas faces com cores diferentes. Surpreendentemente, essas cores são preto e branco. O jogo começa colocando N fichas formando uma única linha. Existe um objetivo que é uma dada sequência de N cores preto ou branco. Em um único movimento, o jogador pode escolher um grupo de fichas consecutivas e inverter a sua cor, em outras palavras, para cada ficha no grupo, a cor que estava voltada para cima, esta voltada para baixo, e a que estava voltada para baixo está virada para cima. O jogo termina quando as cores voltadas para cima são iguais ao objetivo. Barby acaba de descobrir este jogo e logo ela percebeu que você pode sempre ganhar invertendo cada ficha individualmente, se necessário. Para tornar o jogo mais desafiador para ela, ela queria ganhar no menor número possível de movimentos. Note que Barby apenas se preocupa com quantos movimentos ela faz, e não importa quantas fichas são invertidas em cada jogada. Para saber o quão bem Barby está jogando, ela lhe pediu para fazer um programa que, dada a posição inicial da ficha e o objetivo, mostra o menor número possível de movimentos para ganhar o jogo. Você vai dizer que não?"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1718",
        "saida": "Seu programa deve produzir apenas uma linha, com apenas uma letra, que deve ser S se é possível dividir a pizza como descrito acima, ou N caso contrário.",
        "entrada": "A primeira linha contém dois inteiros C (3 ≤ C ≤ 105 ) e N (3 ≤ N ≤ 104 , N ≤ C) representando respectivamente a circunferência da pizza e o número de azeitonas. O inteiro C é múltiplo de N. A segunda linha contém N inteiros distintos Xi (0 ≤ X1 < X2 < . . . < XN < C), em ordem crescente, descrevendo as posições das azeitonas, dadas pelo comprimento do arco circular no sentido horário, a partir de um ponto fixo da circunferência.",
        "titulo": "Pizza do Vô Pepe",
        "descricao": "Vovô Pepe é famoso por suas pizzas. Elas são deliciosas, e têm o formato de um círculo perfeito. Vovô preparou uma pizza especial para o jantar de hoje à noite, e colocou um certo número de azeitonas distribuídas aleatoriamente, mas colocadas exatamente na borda da pizza. Sua tarefa é determinar, conhecendo a circunferência da pizza, a quantidade de azeitonas e a posição de cada azeitona, se é possível dividir a pizza em setores circulares de mesmo tamanho, de tal forma que cada pedaço de pizza contenha exatamente uma azeitona. A figura abaixo mostra (a) uma pizza de circunferência 12 com 3 azeitonas e uma possível divisão em pedaços iguais; e (b) uma pizza de circunferência 12 com 4 azeitonas que não pode ser dividida em pedaços iguais como descrito acima. Apesar de deliciosas, as azeitonas são muito pequenas, e suas dimensões podem ser desconsideradas no cálculo da divisão."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1942",
        "saida": "Imprima ‘S’ caso seja possível ou ‘N’ caso contrário.",
        "entrada": "A primeira linha contém os números N (1 ≤ N ≤ 104 ) e K (3 ≤ K ≤ 50), representando o número de participantes e a quantidade de números apostados por cada pessoa respectivamente. As pessoas apostam em inteiros maiores do que 1 e menores do que 50, inclusive. Cada uma das N linhas seguintes contém K números, representando as apostas de cada pessoa, uma pessoa por linha.",
        "titulo": "Loteria",
        "descricao": "A loteria BWS é feita anualmente. Nela N pessoas apostam escolhendo K números cada uma. De modo formal, podemos dizer que Bij é o j-ésimo valor apostado pela i-ésima pessoa. Então os organizadores escolhem K inteiros positivos. Os números escolhidos são chamados de W1, W2, ..., WK. Os vencedores são calculados da seguinte maneira: Um subconjunto não vazio dos N participantes é escolhido aleatoriamente, ou seja, alguns participantes são escolhidos por pura sorte. Para cada pessoa neste subconjunto é calculado o valor S1, que é a soma de todos os primeiros números apostados por elas, ou seja, a soma de Bi1, onde i seria o índice de cada pessoa escolhida. Da mesma maneira os valores S2, ..., SK são calculados. E feito um teste de paridade entre Wj e Sj , ou seja, é testado se as paridades (se o número é par ou ímpar) casam entre W1 e S1, W2 e S2, e assim por diante até WK e SK. Se todas as paridades casam, então este conjunto de pessoas é considerado vencedor! Os organizadores querem saber: é possível escolher os números W1, W2, ..., WK de forma que não exista nenhum subconjunto de participantes vencedor?"
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1814",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir o número mínimo de transformações que devem ser gravadas para esta instância. Uma linha em branco deve ser impressa após cada instância",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversas instâncias. Cada instância tem a estrutura que segue. Na primeira linha são fornecidos dois inteiros n e m (0 ≤ n ≤ 100 e 1 ≤ m ≤ 1000) que representam, nesta ordem, o número de cadeias de DNA e o comprimento delas. Nas próximas n linhas são fornecidas as n cadeias, uma por linha, sem espaços adicionais. Cada cadeia é uma sequência de caracteres tomada sobre o alfabeto Σ = {A, C, G, T}. Um valor n = 0 indica o final das instâncias e não deve ser processado.",
        "titulo": "DNA Storage?",
        "descricao": "A Universidade Charles, situada em Praga, a exemplo de diversas outras universidades de renome ao redor do mundo, instituiu recentemente um programa interdepartamental de pós-graduação na área de biologia computacional. Integrante do corpo docente, Ms. Dolejškova está atualmente interessada no problema das árvores filogenéticas, e trabalhando, portanto, com n cadeias de DNA. Para simplificar o trabalho, Ms. Dolejškova resolveu trabalhar apenas com cadeias gênicas de comprimento m (isto é, todas as cadeias possuem exatamente m bases nitrogenadas). Um subproblema interessante envolve o armazenamento das n cadeias em disco. Até o momento, Ms. Dolejškova está utilizando um esquema ingênuo que requer n × m caracteres, além dos delimitadores. Isto é, todas as sequências são gravadas dentro de um arquivo texto, sequencialmente. Mr. Chuchle, um colega de departamento e especialista em técnicas de armazenamento, sugeriu uma alternativa que pode ser mais econômica. Segundo Mr. Chuchle, é possível armazenar uma cadeia juntamente com informações que permitam transformá-la em outras. Mais especificamente, considere duas cadeias de DNA D1 = ACTA e D2 = AGTC, onde A, C, G, T representam as bases nitrogenadas adenina, citosina, guanina e timina, nesta ordem. Observe que é possível transformar D1 em D2 trocando-se as bases nitrogenadas C e A das posições 2 e 4 de D1 para G e C, respectivamente. Considere agora uma terceira cadeia D3 = CGTC. E necessária apenas uma modificação para transformar D2 em D3 e são necessárias três modificações para transformar D1 em D3. Logo, é vantajoso permitir a transitividade das modificações entre as cadeias. Ms. Dolejškova observou rapidamente que, se as cadeias envolvidas forem muito diferentes entre si, este esquema de armazenamento alternativo não oferece ganhos. Assim, em vez de adotá-lo prontamente, ela solicitou a você que construa um programa que recebe as n cadeias, e determina o número mínimo de transformações que devem ser gravadas (além de uma cadeia) para que seja possível, no futuro, obter-se novamente as n cadeias originais. Baseado no resultado fornecido por seu programa, Ms. Dolejškova vai decidir qual dos esquemas deve utilizar em cada instância de dados que tiver."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1808",
        "saida": "Imprima uma linha com um número racional representando a média das notas do estudante cujas notas o Sr. King entrou como S. O resultado deve ser impresso como um número racional, arredondado se necessário, com exatos dois dígitos depois do ponto decimal.",
        "entrada": "A entrada consiste de uma única linha que contém uma cadeia de caracteres não-vazia S de no máximo 100 dígitos na base 10. Há uma única maneira de particionar S numa lista de subcadeias de caracteres de tal modo que cada subcadeia represente um inteiro entre 1 e 10 na base 10 sem zeros à esquerda.",
        "titulo": "O Retorno do Rei",
        "descricao": "O profílico autor Stephen King estava entrando com as notas dos seus estudantes de literatura numa calculadora geral de médias on-line. Quando terminou, ele percebeu que sua tecla de retorno (ENTER) estava quebrada. Então, ao invés de entrar com as notas de um estudante numa linha separada cada, ele entrou com elas numa única linha sem separação alguma. Uma vez que o Sr. King não possui as habilidades para consertar sua tecla de retorno, ele precisa que você calcule a média das notas dos estudantes a partir da entrada não separada. Cada nota é um inteiro entre 1 e 10. Todas as notas foram digitadas na base 10 sem zeros à esquerda. Por exemplo, se as notas do estudante do Sr. King foram 3, 10, 1 e 10, elas seriam entradas com “310110”."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1657",
        "saida": "Para cada palavra a ser corrigida, imprima uma linha com a palavra a ser corrigida seguida de uma das possibilidades abaixo: is correct, (está correta em inglês) se a palavra está no dicionário. is a misspelling of X, (é um erro de soletração de em inglês) onde X significa a palavra similar do dicionário, uma vez que a palavra a ser corrigida não está no dicionário. Como neste caso poderão existir várias possibilidades, escolha a palavra do dicionário que aparece primeiro no conjunto de entrada. is unknown, (é desconhecida em inglês) se os casos 1 e 2 não se aplicam.",
        "entrada": "A primeira linha do conjunto de entrada contém um número N representando o número de palavras no dicionário (N ≤ 10000). As próximas N linhas contêm as palavras do dicionário. A linha seguinte contém um número inteiro Q (Q ≤ 1000) representando o número de palavras a serem corrigidas. Você pode assumir que cada palavra do conjunto de entrada consiste de 1 a 25 letras minúsculas (de ‘a’ a ‘z’).",
        "titulo": "Corretor Automático de Erros de Soletração",
        "descricao": "Certos editores de texto oferecem um mecanismo de correção para palavras que aparentam estar escritas incorretamente. Neste problema, você deve implementar um simples Corretor Automático de Erros de Soletração (Automatic Correction of Misspellings - ACM). ACM corrige os seguintes erros de soletração: Uma letra faltando (por exemplo, paso ao invés de passo) ou letras escritas a mais (por exemplo, peasso ao invés de passo). Uma letra errada (por exemplo, passu ao invés de passo). Ordem de duas letras adjacentes errada (por exemplo, pasos ao invés de passo). ACM é baseado em um dicionário de palavras. Quando um texto contem uma palavra que não está no dicionário, ACM tentará substitui-la por uma palavra similar do dicionário. Duas palavras são similares se nós podemos transformar uma palavra em outra seguindo exatamente um dos passos listados acima. Uma palavra desconhecida não é alterada se não existem palavras similares no dicionário."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1820",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Caso não existam quadrados nos grupos, seu programa deve imprimir ok. Em caso contrário, seu programa deve imprimir todos os quadrados encontrados, um por linha, com os números dos alunos separados por um espaço em branco. Para facilitar a leitura do reitor, os números dos alunos em um quadrado deverão estar em ordem crescente e os quadrados deverão estar listados em ordem lexicográfica crescente. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "São dadas várias instâncias. Para cada instância é dado o número m (0 ≤ m ≤ 50) de grupos. O valor m = 0 indica o fim dos dados e não deve ser processado. Cada estudante em Sing Pil é identificado com um número inteiro entre 1 e 100, inclusive. Nas próximas m linhas são dados, em cada linha, três números correspondentes a três estudantes que formam um grupo.",
        "titulo": "Grupos da Universidade de Sing Pil",
        "descricao": "Na famosa Universidade de Sing Pil os estudantes sempre fazem os trabalhos em grupo. As regras para a formação dos grupos, no entanto, são estritas e o reitor sempre verifica se não há um grupo de estudantes que violou as regras. Bom, para falar a verdade, a única regra existente remonta à criação da universidade. Naquela época os alunos compunham grupos de três alunos para fazer as tarefas. Quatro alunos, chamados Ting, Ling, Xing e Ming eram muito amigos e, para todas as tarefas que precisavam ser feitas, montavam um grupo entre eles. Isso era muito ruim, porque obrigar as tarefas em grupos visava a aumentar a interação entre os alunos. Desde então proibiu-se em Sing Pil a formção de quadrados, isto é, que quatro alunos montem quatro grupos em que apenas eles são os membros. No caso dos alunos {Ting, Xing, Ling, Ming} (usaremos apenas a primeira letra para simplificar), um quadrado seria formado pelos quatro grupos a seguir: {TLX, TXM, MXL, LMT}. Sua tarefa neste problema é escrever um programa para ajudar o reitor da universidade a verificar se existem ou não quadrados nos grupos."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1140",
        "saida": "Para cada caso de teste, imprima uma única linha contendo o caractere 'Y' se a sentença é um tautograma, ou um 'N' caso contrário.",
        "entrada": "Cada caso de teste é dado em uma única linha que contém uma frase. Uma frase consiste de uma sequência de no máximo 50 palavras separadas por espaços simples. Uma palavra é uma sequência de no máximo 20 letras do alfabeto inglês (maiúsculas e minúsculas). Uma palavra contém ao menos uma letra e uma sentença contém ao menos uma palavra. O último caso de teste é seguido de uma linha contendo apenas o caractere '*' (asterisco).",
        "titulo": "Flores Florescem da França",
        "descricao": "Fiona sempre amou poesia, e recentemente descobriu uma forma poética fascinante. Tautogramas são um caso especial de aliteração, que é a ocorrência da mesma letra no início de palavras adjacentes. Em particular, uma sentença é um tautograma se todas suas palavras começam com a mesma letra. Por exemplo, as seguintes sentenças são tautogramas: Flowers Flourish from France Sam Simmonds speaks softly Peter pIckEd pePPers truly tautograms triumph Fiona quer deslumbrar seu namorado com uma carta romântica repleta desse tipo de sentenças. Por favor, ajude Fiona a verificar se cada sentença que ela escreveu é um tautograma ou não."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1678",
        "saida": "Para cada caso de teste, primeiro apresentar o número do caso (começando com 1 e aumentando sequencialmente). Em seguida, imprima o tempo médio de solução para o conjunto de problemas com dois dígitos à direita do ponto decimal. Siga a descrição de um cronograma de solução que alcança esse tempo médio de solução. Visualiza uma linha para cada problema, na ordem em que foi informado na entrada, que identifica o número do problema, o membro utilizado para resolver (numerado de acordo com a ordem de entrada), o tempo que o membro começou a resolver o problema, e o tempo em que o problema foi resolvido. Siga o formato mostrado no exemplo de saída, e imprima uma linha em branco após cada caso de teste.",
        "entrada": "Os dados de entrada conterão vários casos de teste. Cada caso de teste começa com uma linha contendo um par de números inteiros m e n. O número m especifica o número de membros da equipe (1 ≤ m ≤ 3), e n especifica o número de problemas a serem resolvidos (1 ≤ n ≤ 10). A próxima linha contém m inteiros positivos informando os valores de inteligência dos membros da equipe m. Em seguida, as n linhas descrevem as compensações de tempo de capacidade para cada um dos n problemas. Cada linha começa com um k inteiro positivo (k ≤ 10), seguido por pares de k inteiros positivos s1 ,t1 , s2 , t2 ,..., sk , tk que satisfazem si < si+1 para 1 ≤ i < k . O requisito mínimo de inteligência do problema é s1, ou seja, não pode ser resolvido por um membro com menos capacidade intelectual do que este número. Se o problema é resolvido por um membro da equipe com capacidade s , onde s1 ≤ s < si+1 para algum i , então o tempo de solução será t1. Finalmente, se o problema é resolvido por um membro da equipe com capacidade intelectual sk ou mais, então o tempo de execução será tk. Um par de zeros será a entrada para o último caso de teste. Você pode assumir que cada problema será resolvido exatamente no tempo especificado para a capacidade informada, independentemente do número de outros problemas que estão sendo resolvidos por outros membros da equipe ao mesmo tempo. Nenhum problema terá um requisito de inteligência maior do que a do membro da equipe mais brilhante.",
        "titulo": "Gerenciamento de Partição Fixa em Competição",
        "descricao": "Uma técnica usada em estratégias iniciais de competição de programação envolve particionar a capacidade intelectual disponível de uma equipe por um número de membros, com cada membro tendo uma quantia fixa de inteligência, e diferentes membros potencialmente tendo quantidades diferentes. A soma da capacidade de todos os membros é igual a capacidade intelectual total da equipe. Dado um conjunto de problemas, a tarefa da equipe é atribuir os problemas a diferentes membros da equipe, de modo que os problemas possam ser resolvidos simultaneamente. Esta tarefa é difícil devido ao fato de que o tempo para a solução de um problema pode depender da quantidade de informações disponíveis. Todo problema tem um requisito mínimo de inteligência: se a atribuição for para um membro mais brilhante, o tempo de solução pode aumentar ou diminuir. Nesta tarefa, você tem que determinar atribuições ideais de problemas aos membros da equipe. O programa informa as capacidades intelectuais dos membros da equipe disponíveis para a solução dos problemas, e uma descrição, para cada problema, de como o tempo de solução depende da quantidade de informação disponível. O programa tem que encontrar um cronograma de solução que minimiza o tempo médio de solução para os problemas. Um cronograma de solução é uma atribuição de problemas aos membros da equipe em relação ao tempo, de tal forma que não há dois problemas que usam o mesmo membro ao mesmo tempo, e não há problema que é atribuído a um membro da equipe com menos capacidade do que o seu requisito mínimo. O tempo para a solução do problema é a diferença entre o tempo em que o problema foi submetido para ser resolvido (o início da competição começa no tempo zero para todos os problemas desta tarefa), e o tempo em que o problema foi resolvido."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2200",
        "saida": "For each test case, display its test case number followed by the maximum number of time steps until you are caught (measured as the total number of turns that you get), or the word “never” if you can avoid capture indefinitely. Follow the format of the sample output.",
        "entrada": "The input consists of several test cases. Each test case begins with an integer n (0 ≤ n ≤ 105 ) giving the number of mummies in the desert. The following n lines each contain two integers x and y, indicating that there is initially a mummy at coordinates (x, y) of the desert, where x and y are both bounded by 106 in absolute value. Your starting position is (0, 0), and no mummy starts at this position. The last test case is followed by a line containing the number −1.",
        "titulo": "Mummy Madness",
        "descricao": "During an excursion to the desert at the 2011 ACM-ICPC World Finals, you come across an old Egyptian tomb. Unfortunately, opening the tomb turns out to be a bad idea: all of a sudden, what was just a few moments ago an empty desert has now become a desert crawling with grumpy mummies (you would be grumpy too if you were suddenly awakened after a few thousand years of peaceful sleep).2 Faced with this murderous mass of mad mummies, your only chance is to run for it and try to escape before they catch you. The question is: how long will it take before a mummy catches you, assuming neither you nor the mummies ever get tired? We model the desert as a grid of squares. You and the mummies take turns making moves on the grid. You make the first move. In your turns, you can move to any of the eight squares adjacent to your current location, or you can choose to stand still. In the mummies’ turns, each mummy simply moves to the adjacent square that brings it closest to you (measured by Euclidean distance, assuming that you and all the mummies stand in the centers of their respective squares). It is possible for two mummies to occupy the same square. A time step consists of your move followed by the mummies’ moves. A mummy catches you if it moves to the square where you are located, or if you move to the square occupied by the mummy. Of course, you try to avoid being caught for as long as possible. After how many time steps will you be caught? Figure I.1: A mummy chase The figure illustrates what might happen if you are being chased by four mummies. The square labeled H is your initial position, and the squares labeled M are the initial positions of mummies. After four time steps, you are caught by the mummy whose initial position was (3, 4) with respect to your initial position. 2Fortunately, after solving this problem, you woke up safe and sound in a hotel room in Florida. The enraged mummies had just been a dream. Or had they?"
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1809",
        "saida": "Para cada cenário da entrada, seu programa deve imprimir o texto Cenario x, probabilidade de interceptacao = P, onde x é a posição do respectivo cenário no arquivo de entrada (numerado a partir de 1) e P a probabilidade da informação a ser difundida ser interceptada. Tal probabilidade deve ser impressa com três casas decimais. Você deve deixar uma linha em branco entre cada cenário.",
        "entrada": "Seu programa deverá estar preparado para trabalhar sobre diversos cenários, isto é, diversas difusões de informações confidenciais em diversos países. Cada cenário é descrito da forma que segue. Na primeira linha são especificados o número de agentes no país, 0 < n ≤ 100, incluindo o líder do serviço de inteligência, e o número de pares de agentes que estão no país e se conhecem, 0 ≤ m ≤ 4950. Nas m linhas seguintes existem dois inteiros i, j e um racional pij, com 1 ≤ i,j ≤ n e 0 ≤ pij ≤ 1. Cada linha significa que os agentes i e j se conhecem e que uma mensagem trocada entre eles é interceptada com probabilidade pij. Um valor igual a zero para n indica o fim dos cenários. Você pode supor que sempre será possível difundir as informações confidenciais entre todos os agentes.",
        "titulo": "Agentes Secretos",
        "descricao": "Todas as pessoas que já assistiram a filmes ou seriados de espionagem como 007, Missão Impossível ou Hawai 5-0, sabem que alguns países do mundo mantém grupos de agentes secretos infiltrados em governos e organizações do Oriente Médio, América do Sul e Leste Europeu. Um dado serviço de inteligência possui n agentes espalhados em um país não muito amigável. Cada agente conhece outros agentes e tem procedimentos específicos para arranjar um encontro secreto com cada um deles. Normalmente são trocadas mensagens codificadas para marcar tais encontros. Dados dois agentes que se conhecem i e j, existe uma certa probabilidade pij de que uma mensagem trocada entre eles seja interceptada por pessoas hostis. De tempos em tempos, o líder do serviço de inteligência precisa difundir informações confidenciais a todos os seus agentes em campo. Para tanto, ele utiliza-se do mecanismo de troca de mensagens dos agentes, isto é, ele contacta alguns dos agentes que conhece e estes se encarregam de propagar as informações de modo que a probabilidade de interceptação P seja mínima. Como você pode perceber, o serviço é tão secreto que nem o líder conhece todos os agentes subordinados a ele. Sua tarefa neste problema é construir um programa que calcule P."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2013",
        "saida": "Mostre uma linha com um inteiro representando o maior numero menor ou igual à U que não contenha algarismos repetidos mais que 2 vezes.",
        "entrada": "A entrada consiste em uma única linha que contém um inteiro U (1 ≤ U ≤ 1018).",
        "titulo": "No Máximo Duas Vezes",
        "descricao": "Dado um inteiro positivo U, ache o maior inteiro L tal que L ≤ U e L não contenha nenhum algarismo repetido mais do que 2 vezes."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1421",
        "saida": "Você deverá imprimir um cabeçalho indicando o número da instância que está tratando (Instancia h) e na linha seguinte a mensagem de que o jogador foi o vencedor da partida (Branco ganhou ou Azul ganhou), ou se o jogo empatou (Empate). Lembre-se de que vence a partida o jogador que primeiro conseguiu uma sequencia completa. Uma linha em branco deve ser impressa após cada instância, inclusive após a última.",
        "entrada": "São dadas várias instâncias. A primeira linha de cada instância contém a dimensão 0 ≤ n ≤ 30 da matriz. A seguir, em cada uma das próximas n3 linhas são dadas alternadamente as posições em que os jogadores estão jogando as bolinhas começando pelo jogador branco. Cada posição é dada pelo pino em que a bolinha da cor correspondente foi colocada, ou seja, um par (i, j), onde i, j ∈ {1, ..., n}. A entrada termina com um zero.",
        "titulo": "Tic-Tac-Toe?",
        "descricao": "Mickayil Romanoff ganhou de presente de aniversário um jogo muito interessante: um jogo da velha tridimensional. O jogo é feito de n x n pinos, dispostos em forma de uma matriz quadrada. Cada pino tem espaço para receber n bolinhas das cores branca e azul. Como no jogo da velha tradicional o objetivo é conseguir uma sequencia completa (em qualquer direção) de n bolinhas da mesma cor. Note que ao colocar uma bolinha num dos pinos ela necessariamente cai ate chegar ao primeiro nível vazio por causa da gravidade. Depois de vários jogos, Mickayil percebeu que não conseguia saber se alguém tinha ganho. Sua tarefa neste problema é ajudar ao Mickayil, escrevendo um programa que recebe uma partida e determina quem ganhou."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1125",
        "saida": "Para cada caso de sistema de pontuação da entrada seu programa deve imprimir uma linha, que deve conter o identificador do Campeão Mundial de Pilotos. Se houver mais de um Campeão Mundial Pilotos (ou seja, se houver empate), a linha deve conter todos os Campeões Mundiais de Pilotos, em ordem crescente de identificador, separados por um espaço em branco.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros G e P separados por um espaço em branco, indicando respectivamente o número de Grandes Prêmios (1 ≤ G ≤ 100) e o número de pilotos (1 ≤ P ≤ 100). Os pilotos são identificados por inteiros de 1 a P. Cada uma das G linhas seguintes indica o resultado de uma corrida, e contém P inteiros separados por espaços em branco. Em cada linha, o i-ésimo número indica a ordem de chegada do pilodo i na corrida (o primeiro número indica a ordem de chegada do piloto 1 naquela corrida, o segundo número indica a ordem de chegada do piloto 2 na corrida, e assim por diante). A linha seguinte contém um único número inteiro S indicando o número de sistemas de pontuação (1 ≤ S ≤ 10), e após, cada uma das S linhas seguintes contém a descrição de um sistema de pontuação. A descrição de um sistema de pontuação inicia com um inteiro K (1 ≤ K ≤ P), indicando a última ordem de chegada que receberá pontos, seguido de um espaço em branco, seguido de K inteiros k0, k1, ... , kn−1 (1 ≤ ki ≤ 100) separados por espaços em branco, indicando os pontos a serem atribuídos (o primeiro inteiro indica os pontos do primeiro colocado, o segundo inteiro indica os pontos do segundo colocado, e assim por diante). O último caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco.",
        "titulo": "Fórmula 1",
        "descricao": "A temporada de Fórmula 1 consiste de uma série de corridas, conhecidas como Grandes Prêmios, organizados pela Federação Internacional de Automobilismo (FIA). Os resultados de cada Grande Prêmio são combinados para determinar o Campeonato Mundial de Pilotos. Mais especificamente, a cada Grande Prêmio são distribuídos pontos para os pilotos, dependendo da classificação na corrida. Ao final da temporada, o piloto que tiver somado o maior número de pontos é declarado Campeão Mundial de Pilotos. Os organizadores da Fórmula 1 mudam constantemente as regras da competição, com o objetivo de dar mais emoção às disputas. Uma regra modificada para a temporada de 2010 foi justamente a distribuição de pontos em cada Grande Prêmio. Desde 2003 a regra de pontuação premiava os oito primeiros colocados, obedecendo a seguinte tabela: Ou seja, o piloto vencedor ganhava 10 pontos, o segundo colocado ganhava 8 pontos, e assim por diante. Na temporada de 2010, os dez primeiros colocados receberão pontos obedecendo a seguinte tabela: A mudança no sistema de pontuação provocou muita especulação sobre qual teria sido o efeito nos Campeonatos Mundiais passados se a nova pontuação tivesse sido utilizada nas temporadas anteriores. Por exemplo, teria Lewis Hamilton sido campeão em 2008, já que a diferença de sua pontuação total para Felipe Massa foi de apenas um ponto? Para acabar com as especulações, a FIA contratou você para escrever um programa que, dados os resultados de cada corrida de uma temporada determine Campeão Mundial de Pilotos para sistemas de pontuações diferentes."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1664",
        "saida": "Consiste em um número: o número médio de palavras diferentes necessárias para ganhar o jogo. Escreva o número como uma fração reduzida no formato mostrado a seguir. Reduzir a fração significa que não pode haver um inteiro maior que 1 que divide o numerador e o denominador. Por exemplo, se havia 10 jogos, e o número de palavras diferentes em cada jogo totalizam 55, imprima 11/2.",
        "entrada": "O arquivo de entrada consiste no texto de uma palestra, com BULLSHIT ocorrendo ocasionalmente. O primeiro jogo começa com a primeira palavra da entrada. Cada ocorrência da palavra BULLSHIT indica o fim de um jogo. Você pode assumir, que a palavra BULLSHIT ocorre somente em letras maiúsculas cada palavra tem no máximo 25 letras, e cada linha tem no máximo 100 letras há no máximo 500 palavras diferentes antes que um jogo termine os jogadores seguem as regras, então não há necessidade de verificar se o jogo é válido ou não",
        "titulo": "Bullshit Bingo",
        "descricao": "Bullshit Bingo é um jogo para fazer palestras, seminários e reuniões menos entediantes. Cada jogador tem um cartão com 5 linhas e 5 colunas. Cada uma das 25 células contém uma palavra (a célula do centro sempre tem a palavra BINGO escrita em si). Sempre que um jogador ouvir uma palavra que estiver escrita em seu cartão, ele pode marcá-la. A célula do centro já é marcada quando o jogo começa. Se um jogador tiver marcado todas as palavras na linha, na coluna ou na diagonal, ele se levanta e grita BULLSHIT. Depois disto, o jogo começa mais uma vez. Sentado em uma palestra, você observa que alguns estudantes no auditório estão jogando Bullshit Bingo. Você se pergunta qual o número médio de palavras diferentes até que BULLSHIT seja exclamado. Para o propósito deste problema, uma palavra consiste de letras do alfabeto Inglês (a a z, A a Z). Palavras são separadas por caracteres com exceção das letras (por exemplo espaços, dígitos e pontuação). Faça a comparação das palavras ignorando se ela estiver em maiúsculo ou minúsculo, em outras palavras, Bingo é o mesmo que bingo. Quando contar o número de palavras, ignore a palavra BULLSHIT (que indica o fim do jogo), e considere somente as palavras do jogo atual, ou seja, se uma palavra já ocorreu no jogo anterior, você ainda pode contá-la no jogo atual. Se o último jogo estiver inacabado, ignore as palavras desse jogo."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "2150",
        "saida": "Para cada caso de teste, imprima a quantidade de vogais alienígenas correspondente.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste é formado por duas linhas. A primeira linha informa uma palavra, formada por todas as vogais alienígenas de um determinado planeta. A segunda linha contém uma frase formada por letras do mesmo alfabeto. A entrada termina com fim de arquivo.",
        "titulo": "Vogais Alienígenas",
        "descricao": "Desde o Gerador de Improbabilidade Infinita, muitos nem questionam sobre a vida em outros planetas, e se aprofundam em questionamentos mais improváveis, como, por exemplo, será que seres de outros planetas usam os mesmos caracteres que a gente para escrever? E se isto for verdade, será que usam as mesmas vogais que a gente? Pensando nisto, muitos cientistas projetaram vários tipos de alfabetos alienígenas, usando as letras do nosso alfabeto, além dos dígitos, de 0 a 9, com as suas respectivas vogais. Baseados nisto, estes pedem a sua ajuda para identificar vogais em alfabetos alienígenas e fazer contagens a respeito. Escreva um programa que, dado uma sequência de vogais, em um determinado alfabeto alienígena, contabilize, em um texto escrito com o mesmo alfabeto, quantas vogais o mesmo possui."
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "2157",
        "saida": "Para cada caso de teste, imprima a sequência espelho correspondente.",
        "entrada": "A entrada possui um valor inteiro C indicando a quantidade de casos de teste. Em seguida, cada caso apresenta dois valores inteiros, B e E (1 ≤ B ≤ E ≤ 12221), indicando o início e o fim da sequência.",
        "titulo": "Sequência Espelho",
        "descricao": "Imprimir números em sequência é uma tarefa relativamente simples. Mas, e quando se trata de uma sequência espelho? Trata-se de uma sequência que possui um número de início e um número de fim, e todos os números entre estes, inclusive estes, são dispostos em uma sequência crescente, sem espaços e, em seguida, esta sequência é projetada de forma invertida, como um reflexo no espelho. Por exemplo, se a sequência for de 7 a 12, o resultado ficaria 789101112211101987 Escreva um programa que, dados dois números inteiros, imprima a respectiva sequência espelho."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1254",
        "saida": "Converto o texto do documento que é dado na entrada, utilizando as específicações dadas acima e imprima em uma única linha, o novo texto do documento com as novas tags, para maiores esclarecimentos consulte o exemplo abaixo.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto de três linhas. A primeira linha contém a tag original presente no texto do documento, que irá conter apenas letras (a-z, A-Z), e seu tamanho será entre 1 e 10 caracteres inclusive. A segunda linha contém um valor numérico pela qual a tag original deverá ser substituida, que será um número entre 1 e 1000 inclusive. A terceira e última linha terá entre 1 e 50 caracteres inclusive, e poderá conter os letras (a-z, A-Z), números (0-9), sinal de menor (), sinais de igual (=), barras (/), ou espaços em branco. Todos os '' são usados apenas em tags.",
        "titulo": "Substituição de Tag",
        "descricao": "Você está no comando de um sistema de documentos que utiliza tags de código numérico para renderizar documentos para impressão. Há um lote de documentos com o texto baseado em tags, que você deve analisar e converter para tags numéricas para a entrada no sistema. Uma tag é iniciada por um caracter '<', que pode ser seguida por letras, números, barras ou espaços, e para finalizar a tag um caracter '>'. As tags não podem ser encaixadas umas nas outras. As seguintes tags não são válidas: \">HI\", \"c>\", \"\". As seguintes tags são válidas: \"/=HI\", \"/H=I/\", \"\", \"\", \"\". Para as comparações entre caracteres deve ser desconsiderado o case sensitive."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1367",
        "saida": "Para cada caso de teste a entrada do seu programa deve imprimir uma linha contendo dois inteiros S e P, separados por um espaço, onde S é o número de problemas distintos com o julgamento \"correct\" e P é o tempo no qual cada problema distinto foi julgado pela primeira vez como \"correct\", somado a 20 para cada julgamento \"incorrect\" recebido nesse problema (desde que no final o problema tenha sido julgado como \"correct\"). A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de caso de teste contém um único inteiro N indicando o número de submissões do caso de teste (1 ≤ N ≤ 300). Cada uma das N linhas seguintes descrevem uma submissão; cada uma dessas linhas contém um identificador de problema (uma única letra entre 'A' e 'Z'), seguida por um inteiro T representando o tempo em minutos (0 ≤ T ≤ 300), seguido por um julgamento (a palavra \"correct\", correto, ou a palavra \"incorrect\", incorreto). A entrada está em ordem crescente de tempo, e haverá no máximo um julgamento \"correct\" para cada problema. O final da entrada é indicado por N = 0. A entrada deve ser lida da entrada padrão.",
        "titulo": "Ajude!",
        "descricao": "Então, nós temos que admitir: precisamos da sua ajuda. Esse ano as coisas não estao correndo tão tranquilamente quanto queríamos, e nós não conseguimos finalizar o sistema do software da competição a tempo. Uma parte vital está faltando, e como você sabe, nós precisamos desse sistema funcionando até essa tarde, para a verdadeira competição. A parte que está faltando é a que computa a pontuação dos times, dada a lista de submissões desse time. Por favor, por favor, alguém nos ajude!"
    },
    {
        "nivel": "7",
        "assunto": "3",
        "numero": "1859",
        "saida": "Imprima uma linha contendo unicamente o menor número possível de pares maus numa classificação dos indivíduos nas famílias.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros, N e P (2 ≤ N ≤ 50, 0 ≤ P ≤ 100), os quais representam respectivamente o número de indivíduos fossilizados e o critério de parentesco estabelecido. Cada uma das N linhas seguintes consiste de no máximo 104 caracteres no conjunto {A, T, C, G}, representando o código genético de um indivíduo. À possível exceção da primeira, as linhas da entrada possuem todas o mesmo número de caracteres.",
        "titulo": "Arqueologia Congelante",
        "descricao": "Após desfazerem o plano maquiavélico do malévolo Hans e salvarem o reino de Arendelle, Elsa, Anna e Kristoff iniciaram um projeto arqueológico para saber mais sobre o passado pré-histórico do continente sobre o qual hoje se situa Arendelle. Durante as escavações, eles descobriram que na verdade o continente foi formado geologicamente através da colisão entre quatro continentes outrora separados. Eles conseguiram inclusive descobrir os nomes com os quais os povos da época chavam esses continentes: Westeros, Essos, Sothoryos e Ulthos. No entanto, ainda estão no processo de identificar as famílias que habitavam o primeiro continente, Westeros, já que a promiscuidade entre os povos antigos era muito grande e os registros parecem muito confusos. Na presente etapa do projeto, eles estão considerando apenas que os povos eram divididos em duas grandes famílias: Stark e Lannister. Futuramente eles pretendem dividir essas famílias melhor. Por ora, o objetivo é, dados os códigos genéticos dos indivíduos fossilizados, classificar os indivíduos nessas duas famílias visando minimizar as relações de parentesco entre indivíduos classificados em famílias diferentes. Mais formalmente, dizemos que um indivíduo X é parente de um indivíduo Y se os códigos genéticos de ambos os indivíduos partilham de uma parte idêntica e contígua com comprimento no mínimo P% do comprimento de um dos códigos — como os indivíduos são todos humanos, os códigos genéticos possuem sempre o mesmo comprimento. Por exemplo, tomemos os indivíduos de códigos GATAGACA e CATACAGA. Se o critério de parentesco P é igual a 62, os indivíduos devem ser considerados parentes, já que ACAGA é uma parte contígua comum a ambos de comprimento 5 ≥ 8 × 62% (se você não consegue entender por que ACAGA é uma parte contígua de GATAGACA, entenda que Elsa e sua equipe consideram códigos genéticos como cadeias circulares). Agora, se P = 63, os indivíduos não devem ser considerados parentes. Destarte, o objetivo dos pesquisadores de Arendelle é classificar os indivíduos fossilizados nas famílias Stark e Lannister visando minimizar o número de pares maus. Dizemos que um par (s, l) é mau se satisfaz as três condições a seguir: s foi classificado como Stark; l foi classificado como Lannister; s deve ser considerado parente de l segundo o critério de parentesco estabelecido. Obrigatoriamente, ao menos um indivíduo deve ser classificado como Stark e ao menos um como Lannister."
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "2174",
        "saida": "Você deverá imprimir: \"Falta(m) X pomekon(s).\", onde X representa a quantidade Pomekons não capturados.",
        "entrada": "A primeira linha do caso de teste consiste de um inteiro N (1 ≤ N ≤ 10³), representando a quantidade de Pomekons que Dabriel já capturou. As próximas N linhas consistem de uma string S (1 ≤ |S| ≤ 10³), representando o nome de cada Pomekons. O nome de cada Pomekons consiste apenas de letras maiúsculas e minúsculas.",
        "titulo": "Coleção de Pomekon",
        "descricao": "Desde que foi lançado oficialmente o Pomekon no Brasil, Dabriel está tentando realizar seu maior sonho: Ser um Mestre Pomekon. Sua meta é conquistar os 151 Pomekons disponíveis. Ele já conseguiu capturar muitos monstrinhos, porém em sua cidade aparecem muitos Pomekons repetidos, fazendo com que ele capture diversas vezes o mesmo Pomekon. Vendo que sua mochila está bem cheia, Dabriel pediu para que você fizesse um programa de computador que informasse a ele quantos Pomekons faltam para completar a coleção."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1373",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o comprimento da maior subsequência formada por segmentos consecutivos de comprimento de pelo menos K de ambas palavras. Se não existir uma subsequência comum de comprimento maior que zero, então deve ser imprimido 0.",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de um caso de teste contém um inteiro K representando o comprimento mínimo de segmentos comuns, onde 1 ≤ K ≤ 100. As próximas duas linhas contém, em cada, uma palavra com letras minúsculas do alfabeto tradicional de 26 letras. O comprimento L de cada palavra satisfaz a desigualdade 1 ≤ L ≤ 103. Não existem espaços nas linhas de entrada. O final da entrada é indicado por uma linha contendo um zero.",
        "titulo": "Sequências de DNA",
        "descricao": "Thomas, um cientista da computação que trabalha com sequências de DNA, precisa computar as maiores subsequências comuns de dados pares de strings. Considere um alfabeto S de letras e uma palavra w = a1a2 ... ar, onde ai ∈ Σ, para i = 1, 2, ..., r. Uma subsequencia de w é uma palavra x = ai1ai2 ... ais tal que 1 ≤ i1 < i2 < ... < is ≤ r. A subsequência x é um segmento de w se ij+1 = ij + 1, para j = 1, 2, ..., s-1. Por exemplo a palavra ove é um segmento da palavra lovely, enquanto a palavra loly é uma subsequência de lovely, mas não um segmento. Uma palavra é uma subsequência comum de duas palavras w1 e w2 se ela é uma subsequência de cada uma das duas. Uma maior subsequência comum de w1 e w2 uma subsquência comum de w1 e w2 tendo o maior comprimento possível. Por exemplo, considere as palavras w1 = lovxxelyxxxxx e w2 = xxxxxxxlovely. As palavras w3 = lovely e w4 = xxxxxxx, a última de comprimento 7, são ambas subsequências comuns de w1 e w2. De fato, w4 é a maior subsequência comum delas. Perceba que a palavra vazia, de comprimento zero, é sempre uma subsequência comum, apesar não ser necessariamente a mais longa. No caso do Thomas, existe um requerimento extra: a subsequência tem que ser formada de segmentos comuns tendo comprimento K ou maior. Por exemplo, se Thomas decidir que K = 3, então ele considera lovely como uma subsequência comum aceitável de lovxxelyxxxxx e xxxxxxxlovely, enquanto xxxxxxx, que tem um comprimento de 7 e também é uma subsequência comum, não é aceitável. Você pode ajudar Thomas?"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1503",
        "saida": "Para cada caso de teste, a saída é um único inteiro, correspondente ao tamanho do maior palíndromo comum a todas as strings",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de entrada do problema consiste de mensagens que Mestre Yoda possui. A primeira linha de um caso de teste possui o inteiro n (n <= 10), que é o número de mensagens As próximas n linhas possuem strings compostas apenas por letras minúsculas do alfabeto ('a' - 'z'). O tamanho máximo de cada string é 50000.",
        "titulo": "Maior Palíndromo Comum Você Deve Encontrar",
        "descricao": "Mestre Yoda interceptou mensagens secretas do lado negro da força. Ele tem certeza de que todas elas contém uma mesma informação valiosíssima que pode ajudar os Jedi na luta contra os Sith. Além disso, ele sabe que a informação que ele procura é um palíndromo. Porém, as mensagens são muito grandes e por isso ele precisa da sua ajuda. Você deve criar um programa para dizer qual o tamanho do maior palíndromo comum a todas as mensagens que Mestre Yoda interceptou."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1456",
        "saida": "Para cada instância, você deverá imprimir um identificador \"Instancia k\", onde k é o número da instância atual. Na linha seguinte você deve imprimir a saída do código fornecido na entrada. Após cada instância, seu programa deve imprimir uma linha em branco.",
        "entrada": "A entrada é composta de diversas instâncias. O número de instâncias é dado na primeira linha da entrada. Cada instância começa com uma linha em branco. A próxima linha contém uma cadeia de caracteres não-brancos (ou seja, diferentes de espaço em branco e tabulação), que vai conter a entrada para o programa. Ou seja, os comandos de leitura são realizados nessa cadeia. Toda a entrada para o programa está contida em uma única linha. Por fim, a terceira linha contém a descrição do programa. Assim como a segunda linha, esta também não contém caracteres brancos e está inteiramente contida em uma única linha (a separação feita no segundo exemplo de entrada foi feita para evitar o estouro de linha). Tanto a segunda como a terceira linha têm entre 1 e 100000 caracteres.",
        "titulo": "Brainfuck",
        "descricao": "Linguagens de programação, times de futebol e religião não se discute. Cada um tem seus favoritos e não admite que o do outro seja melhor (que me perdoem os corinthianos, palmeirenses e são-paulinos). Um grupo de pesquisadores (que não tinha o que fazer) resolveu escrever uma linguagem de programação ideal'' (ideal prá quem, cara pálida?): o Brainfuck. Brainfuck é uma linguagem de programação cujo funcionamento é muito parecido com uma máquina de Turing. Essa máquina possui como componentes um vetor de 30000 bytes, indexado de 0 a 29999, e um ponteiro, que guarda uma posição desse vetor. Em cada passo, a máquina realiza uma instrução de acordo com o byte armazenado na posição do vetor indicada pelo ponteiro. Quando esse byte é igual a zero, a execução é terminada. O conjunto de instruções válidas da linguagem é o seguinte: Instrução Descrição > Incrementa o ponteiro. < Decrementa o ponteiro. + Incrementa o byte na posição indicada pelo ponteiro. - Decrementa o byte na posição indicada pelo ponteiro. . Imprime o valor do byte na posição indicada pelo ponteiro. , Lê um byte e armazena na posição indicada pelo ponteiro. Se não houver nada que possa ser lido (entrada acabou), armazenar zero. [ Início do loop: Executa o código delimitado até que o byte na posição indicada pelo ponteiro seja igual a zero. ] Fim do loop. # Imprime os valores das 10 primeiras posições do vetor. O ponteiro sempre começa com valor 0, assim como todas as posições do vetor. Na descrição de programas na linguagem brainfuck, caracteres diferentes dos descritos acima são ignorados."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1667",
        "saida": "Você deve mostrar o texto resultante usando estas regras: Se você ler uma palavra na entrada e a linha resultante não for maior que 80 caracteres, imprima isto, se não, imprima em uma nova linha. Se você ler na entrada, comece uma nova linha. Se você ler na entrada, comece uma nova linha a menos que você já esteja no começo de uma linha, imprima 80 caracteres de ‘-‘ e comece uma nova linha (novamente). A última linha deve ser terminada com um caractere de nova linha.",
        "entrada": "A entrada consiste de um texto que você deve mostrar. Esse texto é composto por palavras e HTML tags separadas por um ou mais espaços, tabuladores ou novas linhas. Uma palavra é uma sequência de letras, números e pontuações. Por exemplo, “abc,123” é uma palavra, mas “abc, 123” são duas palavras, chamadas “abc,” e “123”. Uma palavra é sempre menor que 81 caracteres e não contém nenhum ‘’. Todas tags HTML são ou .",
        "titulo": "HTML",
        "descricao": "Se você alguma vez já tentou ler um documento html em um Macintosh, você sabe o quão difícil isso é sem um navegador instalado. Agora, quem pode esquecer de instalar um navegador HTML? Isso é muito fácil, pois a maioria das vezes você não precisa de um no MAC, porque existe um Acrobate Reader que é nativo para o MAC. Mas, e se você precisar de um, o que você faz? Sua tarefa é escrever um pequeno navegador html. Ele deve imprimir somente o conteúdo do arquivo de entrada e saber os comandos html (tags) o qual faz a quebra de linhas e que tem a função de régua horizontal. Então, você deve tratar de todos tabuladores, espaços e novas linhas em um único espaço e imprimir o texto resultante com não mais de 80 caracteres em uma única linha."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1581",
        "saida": "Imprima uma linha, contendo uma string S, representando o idioma mais apropriado para a conversa.",
        "entrada": "A primeira linha contém um inteiro N, indicando o número de casos de testes a seguir. Cada caso de teste inicia com um inteiro K (2 ≤ K ≤ 100), representando o número de pessoas no grupo. Em seguida haverá K linhas, contendo uma string S cada, representando o idioma nativo de cada uma dessas K pessoas. Cada string conterá no mínimo 1 e no máximo 20 caracteres, entre eles apenas letras minúsculas (a-z).",
        "titulo": "Conversa Internacional",
        "descricao": "Rafael recentemente recebeu uma bolsa de estudos e está fazendo intercâmbio fora do Brasil, onde conheceu várias pessoas de várias nacionalidades diferentes. O idioma nativo desse país é o Inglês, e todas as pessoas que Rafael conheceu falam inglês como primeira ou segunda língua. Como aprender um segundo idioma é uma tarefa difícil e cansativa, as pessoas preferem falar seu idioma nativo sempre que possível. Uma exceção à essa regra é quando há duas pessoas no grupo que não tem o mesmo idioma nativo. Nesse tipo de situação, o idioma utilizado é o inglês. Por exemplo, se em um grupo há só brasileiros, o idioma falado será o português, mas caso haja um espanhol entre os brasileiros, o idioma falado será o inglês. Rafael as vezes fica confuso sobre qual idioma deveria ser falado em cada grupo de pessoas, e para isso pediu sua ajuda."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1277",
        "saida": "Para cada caso de teste imprima os nomes de todos os estudantes que não cumpriram a presença mínima requerida, separados por um espaço. Não deixe espaços sobrando no final da linha.",
        "entrada": "A entrada possui diversos casos de testes. A primeira linha da entrada contém um inteiro T, que indica o número de casos de testes que se seguem. Cada caso de teste é composto por três linhas: A primeira linha de um caso de teste irá conter um inteiro N (0 ≤ N ≤ 100) que indica o número de estudantes na turma. A segunda linha conterá N nomes de estudantes com até 50 caracteres cada nome, separados por um único espaço. Todos os nomes irão conter somente letras maiúsculas e minúsculas (‘A’-‘Z’,‘a’-‘z’). A terceira linha conterá N registros de frequência, correspondentes aos respectivos estudantes da linha anterior. Os registros virão separados por um único espaço, e contêm apenas os caracteres ‘A’, ‘P’ e ‘M’. Um ‘P’ indica que o estudante estava presente à aula, ‘A’ indica que ele estava ausente (ele cabulou à aula) e ‘M’ mostra que, apesar de não ir à aula, ele entregou um atestado médico, então esta aula não deverá ser considerada no cálculo da frequência do estudante. Registros de frequência conterão ao menos um caracter ‘A’ ou ‘P’.",
        "titulo": "Pouca Frequência",
        "descricao": "Os estudantes da tua universidade recentemente adquiriram o desagradável hábito de cabular as aulas. Para enfrentar este problema o seu Conselho de Professores decidiu somente permitir que estudantes com ao menos 75% de presença prestem os exames. A partir de uma lista de nomes de estudantes e seus respectivos registros de frequência, imprima o nome dos estudantes que não obtiveram o mínimo de presença às aulas e que consequentemente não poderão prestar os exames."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1024",
        "saida": "Para cada entrada, deve-se apresentar a mensagem criptografada.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1*104), indicando a quantidade de linhas que o problema deve tratar. As N linhas contém cada uma delas M (1 ≤ M ≤ 1*103) caracteres.",
        "titulo": "Criptografia",
        "descricao": "Solicitaram para que você construisse um programa simples de criptografia. Este programa deve possibilitar enviar mensagens codificadas sem que alguém consiga lê-las. O processo é muito simples. São feitas três passadas em todo o texto. Na primeira passada, somente caracteres que sejam letras minúsculas e maiúsculas devem ser deslocadas 3 posições para a direita, segundo a tabela ASCII: letra 'a' deve virar letra 'd', letra 'y' deve virar caractere '|' e assim sucessivamente. Na segunda passada, a linha deverá ser invertida. Na terceira e última passada, todo e qualquer caractere a partir da metade em diante (truncada) devem ser deslocados uma posição para a esquerda na tabela ASCII. Neste caso, 'b' vira 'a' e 'a' vira '`'. Por exemplo, se a entrada for “Texto #3”, o primeiro processamento sobre esta entrada deverá produzir “Wh{wr #3”. O resultado do segundo processamento inverte os caracteres e produz “3# rw{hW”. Por último, com o deslocamento dos caracteres da metade em diante, o resultado final deve ser “3# rvzgV”."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "2025",
        "saida": "Seu programa deve corrigir o estrago causado pelo vírus Amli.D, imprimindo cada uma das linhas de entrada com a grafia correta da palavra \"Joulupukki\", sempre com a primeira letra maiúscula.",
        "entrada": "A entrada contém milhares de linhas de texto. A primeira linha de entrada contém um inteiro N (1 < N < 10000) que indica a quantidade de linhas de texto dos rascunhos de Noel. Cada uma das N linhas pode conter até 100 caracteres, incluindo letras maiúsculas, minúsculas e espaços em branco.",
        "titulo": "Joulupukki",
        "descricao": "A Lapônia, na Finlândia, é região mais a norte da União Europeia e o seu habitante mais famoso é naturalmente o Papai Noel, ou Pai Natal, ou Joulupukki (seu nome em Finlandês). Naturalmente nos dias de hoje o Papai Noel recebe, além das tradicionais cartinhas, muitos e-mails de crianças de todo o mundo. O problema é que Noel pegou um virus denominado Amli.D em seu computador e todas as mensagens que ele deixou como rascunho tiveram o nome dele alterado. O lado bom é que este virus bagunça apenas o nome dele (Joulupukki) trocando por vezes o primeiro caractere, por vezes o último e não raro os dois. Assim, ao invés de \"Joulupukki\", o nome pode aparecer como \"Joulupukka\", \"SoulupukkA\" ou \"Toulupukki\", entre outras formas. Assim, sua tarefa aqui será fazer um software que corrija todas as aparições erradas de \"Joulupukki\" dos rascunhos dos e-mails de Papai Noel. Temos a garantia dos gnomos de que não há nenhuma palavra com mais de 10 caracteres que contenha a substring \"oulupukk\", mas seja cuidadoso com relação ao ponto final, como \"Toulupukki.\", por exemplo. Neste caso teremos que considerar 11 caracteres."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1237",
        "saida": "O tamanho da maior subsequência comum entre as duas Strings.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por duas linhas, cada uma contendo uma string. Ambas strings de entrada contém entre 1 e 50 caracteres ('A'-'Z','a'-'z' ou espaço ' '), inclusive, ou no mínimo uma letra ('A'-'Z','a'-'z').",
        "titulo": "Comparação de Substring",
        "descricao": "Encontre a maior substring comum entre as duas strings informadas. A substring pode ser qualquer parte da string, inclusive ela toda. Se não houver subseqüência comum, a saída deve ser “0”. A comparação é case sensitive ('x' != 'X')."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1341",
        "saida": "Para cada caso, imprima o número do caso de teste e dois inteiros XA e XB, indicando o número de caracteres removidos de SA e SB, respectivamente. Formate a saída como apresentado no exemplo de saída. Nota: No primeiro exemplo, SA = ABCDG e SB = ADEB. Se removermos 3 caracteres de SA e 2 caracteres de SB, podemos obter SA = SB = AB (SA = SB = AD também é possível).",
        "entrada": "A primeira linha da entrada contém um inteiro t (1 ≤ t ≤ 1000), o número de casos de teste. Cada caso de teste é descrito por várias linhas. A primeira linha contém dois inteiros H e W (1 ≤ H, W ≤ 20). As próximas H linhas descrevem a grade. A linha seguinte contém três inteiros N, X0 e Y0 (1 ≤ X0 ≤ H, 1 ≤ Y0 ≤ W), indicando que a primeira criança deu N passos, começando no quadrado de coordenadas (X0, Y0). A coordenada X cresce de norte a sul, enquanto a coordenada Y cresce de oeste a leste. A próxima linha contém uma string de tamanho N contendo os caracteres 'N' (norte), 'E' (leste), 'W' (oeste) ou 'S' (sul), indicando o caminho percorrido pela primeira criança. Seguem-se então as informações da segunda criança, no mesmo formato. Você pode assumir que as sequências de passos são sempre corretas, isto é, nenhuma criança irá sair da grade.",
        "titulo": "Crianças em uma Grade",
        "descricao": "Duas crianças estão caminhando em uma grade com H linhas e W colunas. Cada quadrado da grade contém um caractere (cujo código ASCII está entre 33 e 127). Ambas as crianças podem se mover ao norte, a leste, a oeste ou ao sul a cada passo. A primeira criança já deu N passos, enquanto a segunda já deu M passos (0 ≤ N ≤ M ≤ 500). Se escrevermos todos os caracteres nos quais cada criança andou em sequência, obtemos duas strings SA e SB. Sua tarefa é remover o menor número possível de caracteres dessas strings de tal forma que elas se tornem iguais."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1305",
        "saida": "Para cada caso de teste da entrada seu programa deve gerar uma linha de saída somente com a parte inteira de num arredondada de acordo com o valor de corte em cutoff.",
        "entrada": "A entrada contem vários casos de teste. Cada caso de teste é composto por duas linhas. A string num está na primeira linha e a string cutoff fica na segunda linha. A string num é formada por 1 ou mais dígitos ('0' a '9') com um ponto decimal opcional ('.'). A string num tem de 1 a 10 caracteres. A string cutoff é formatada exatamente como \"0.####\", onde cada '#' representa um dígito ('0' a '9'). Além disso, a parte fracionária de num NÃO será exatamente igual a cutoff. O final da entrada é determinado por EOF.",
        "titulo": "Arredondamento por Valor de Corte",
        "descricao": "Frequentemente, ao arredondar um número real para um inteiro nós o fazemos para cima se a parte fracionária é maior ou igual a 0,5 e para baixo se a parte fracionária é menor do que 0,5. Neste problema você recebe uma string num contendo um número real e uma string cutoff contendo um valor de corte. A string cutoff será formatada exatamente como \"0.####\", onde cada '#' representa um dígito ('0'-'9'). Pelo menos um dos dígitos da parte fracionária de cutoff será diferente de zero. Sua tarefa é arredondar num para cima se a parte fracionária é maior do que o valor de corte e para baixo caso contrário, devolvendo o resultado como um inteiro. Para evitar problemas com imprecisão de representação em ponto flutuante a parte fracionária de num não será exatamente igual a cutoff. Assim, o método tradicional de arredondamento descrito na frase inicial seria representado por cutoff = \"0.5000\""
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1386",
        "saida": "Para cada teste a saída será de uma única linha, com o comprimento da mais curta mensagem ambígua para o código fornecido ou -1 se o código é inequívoco.",
        "entrada": "Cada caso de teste consistirá em diversas linhas. Em todos os casos, o teste será o alfabeto conjunto de dígitos hexadecimais (dígitos decimais mais as letras maiúsculas \"A\" a \"F\"). A primeira linha de um caso de teste conterá um número inteiro N (1 ≤ N ≤ 100) e o número de palavras de código no código. Cada uma das próximas N linhas descrevem uma palavra de código e contém uma seqüência diferente não-vazio de pelo menos 50 dígitos hexadecimais. A entrada é terminada por N = 0.",
        "titulo": "Códigos Ambíguos",
        "descricao": "Uma extensa área de pesquisa em ciência da computação é o campo das comunicações. Como as redes de computador fazem parte do cotidiano de muitas pessoas, o desenvolvimento de formas para fazer estas redes mais rápidas, mais confiáveis ​​e seguras é constantemente necessário. Esta necessidade prática motiva uma atividade de pesquisa extensa na teoria por trás das comunicações. A primeira coisa necessária para estabelecer qualquer tipo de comunicação é um código comum. Um código é uma maneira de alterar a forma de uma peça de informação em alguma outra forma, de um modo geral, fazer possível transmitir esse pedaço de informação de um lugar para outro. Códigos de bandeira usados por barcos e o código Morse utilizados na telegrafia são exemplos de códigos para traduzir as letras em diferentes formas para permitir a comunicação através de diferentes meios de comunicação. Mais formalmente, um código é um conjunto de strings composto de símbolos de um alfabeto. Cada string definida no código é chamado de uma palavra. A mensagem é então composta de um conjunto concatenado de palavras de código para transmitir a informação necessária. Por exemplo, no código Morse o alfabeto é composto de símbolos hífen e ponto; letra \"S\" é representada pela palavra de código \"...\" letra \"O\" é representada pela palavra de código \"---\", e, portanto, a mensagem de socorro \"SOS\" em código Morse é \"... --- ...\". Códigos para a comunicação podem ter muitas propriedades desejáveis ​​e indesejáveis, tais como a ambigüidade, entropia, redundância, e muitos mais. Neste problema, vamos nos concentrar na ambigüidade como uma propriedade chave. Um código é ambíguo quando existe uma mensagem usando esse código, que pode ser dividida em diferentes sequências de palavras de código. Em outras palavras, um código ambíguo pode ter em uma mensagem mais de um significado. Por exemplo, considere o alfabeto binário, composto de símbolos {0,1}. Para o código das palavras composto {10, 01, 101} na mensagem 10101 pode ser entendida como 10-101 ou 101-01 e, portanto, o código é ambíguo. Por outro lado, para o código composto das palavras {01, 10, 011} existe nenhuma mensagem ambígua e, por tanto, o código é inequívoco. Como parte da comunidade de ciência da computação, você é obrigado a desenvolver um testador que verifica se os códigos são ambíguos. No caso de um código ser de fato ambíguo, você também deverá comunicar o comprimento (isto é, o número de símbolos) da mensagem ambígua mais curto para o código."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1263",
        "saida": "Para cada caso de teste imprima o número de aliterações existentes no texto informado, conforme exemplos abaixo.",
        "entrada": "A entrada contém diversos casos de testes. Cada caso é expresso como um texto em uma única linha, contendo de 1 a 100 palavras separadas por um único espaço, cada palavra tendo de 1 a 50 letras minúsculas ou maiúsculas ('A'-'Z','a'-'z'). A entrada termina em EOF.",
        "titulo": "Aliteração",
        "descricao": "Uma aliteração ocorre quando duas ou mais palavras consecutivas de um texto possuem a mesma letra inicial (ignorando maiúsculas e minúsculas). Sua tarefa é desenvolver um programa que identifique, a partir de uma sequência de palavras, o número de aliterações que essa sequência possui."
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "1873",
        "saida": "Para cada caso de teste, imprima quem venceu, ou se houve empate.",
        "entrada": "Haverá diversos casos de teste. O primeiro número a ser lido será um inteiro C, representando a quantidade de casos de teste. Cada caso de teste tem duas palavras, representando a escolha de Rajesh e de Sheldon, respectivamente.",
        "titulo": "Pedra-papel-tesoura-lagarto-Spock",
        "descricao": "Pedra-papel-tesoura-lagarto-Spock é uma expansão do clássico método de seleção em jogo de pedra-papel-tesoura. Atua sob o mesmo princípio básico, mas inclui outras duas armas adicionais: o lagarto (formado pela mão igual a uma boca de fantoche) e Spock (formada pela saudação dos vulcanos em Star Trek). Isso reduz as chances de uma rodada terminar em um empate. O jogo foi inventado por Sam Kass e Karen Bryla, como \"Rock Paper Scissors Lizard Spock\". As regras de vantagem são as seguintes: Tesoura corta papel Papel cobre pedra Pedra derruba lagarto Lagarto adormece Spock Spock derrete tesoura Tesoura prende lagarto Lagarto come papel Papel refuta Spock Spock vaporiza pedra Pedra quebra tesoura Um dia, dois amigos, Rajesh e Sheldon, decidiram apostar quem pagaria um almoço para o outro, com esta brincadeira. Sua missão será fazer um algoritmo que, baseado no que eles escolherem, informe quem irá ganhar ou se dará empate."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1284",
        "saida": "Para cada caso de teste de entrada imprima um número com duas casas decimais (arredondado caso necessário) que representa o número médio de pressionamentos de tecla necessários para digitar uma palavra no dicionário.",
        "entrada": "Cada caso de teste é descrito por várias linhas. A primeira linha contém um número inteiro N representando o número de palavras no dicionário (1 ≤ N ≤ 105 ). Cada uma das próximas N linhas contém uma string não-vazia de no máximo 80 letras minúsculas do alfabeto inglês, representando uma palavra no dicionário. Dentro de cada caso de teste todas as palavras são diferentes, e a soma dos comprimentos de todas as palavras é, no máximo, 106.",
        "titulo": "Digitando no Telefone Celular",
        "descricao": "Uma equipe de pesquisadores está desenvolvendo uma nova tecnologia para economizar tempo ao digitar mensagens de texto em dispositivos móveis. Eles estão trabalhando em um novo modelo que tem um teclado completo, assim os usuários podem digitar qualquer letra pressionando a tecla correspondente. Desta forma, um usuário precisa pressionar P teclas para digitar uma palavra de comprimento P. No entanto, isto não é suficientemente rápido. A equipe vai montar um dicionário de palavras comuns que um usuário pode digitar. O objetivo é reduzir o número médio de teclas pressionadas necessárias para digitar palavras que constam no dicionário. Durante a digitação de uma palavra, sempre que houver apenas uma possibilidade para a seguinte letra, o sistema de telefone celular irá introduzí-la automaticamente, sem a necessidade de digitação. Para ser mais preciso, o comportamento do sistema de telefone celular irá ser determinado pelas seguintes regras: 1. O sistema nunca irá adivinhar a primeira letra de uma palavra, ou seja, para a primeira letra sempre terá que ser pressionada a tecla correspondente. 2. Se uma sucessão não-vazia de letras c1c2...cn for introduzida, e houver uma letra c tal que cada palavra no dicionário que começa com c1c2...cn também começa com c1c2 ... cnc, em seguida, o sistema coloca a entrada c automaticamente, sem a necessidade de uma combinação de teclas. Caso contrário, o sistema aguarda o usuário. Por exemplo, se o dicionário é composto das palavras \"hello\", \"hell\", \"heaven\" e \"goodbye\", e o usuário pressiona \"h\", o sistema colocará a letra \"e\" automaticamente, porque cada palavra que começa com \"h\" também começa com \"he\". No entanto, uma vez que existem palavras que começam com \"hel\" e com \"hea\", o sistema precisa agora esperar a próxima digitação do usuário. Se o usuário pressionar então o \"l\", obtendo-se a palavra parcial \"hel\", o sistema de entrada incluirá um segundo \"l\" automaticamente. Quando se tem o \"hell\" como entrada, o sistema não pode supor nada, porque é possível que a palavra terminou, ou também é possível que o usuário pode querer pressionar \"o\" para obter \"hello\". Desta forma, para digitar a palavra \"hello\" o usuário precisa de três teclas, \"hell\" exige duas e \"heaven\" também requer duas, porque quando a entrada é \"hea\" o sistema pode colocar automaticamente o restante da palavra aplicando repetidamente a segunda regra. Da mesma forma, a palavra \"goodbye\" precisa de apenas uma tecla, porque depois de pressionar a inicial \"g\", a sistema irá preencher automaticamente a palavra inteira. Neste exemplo, o número médio de teclas necessário digitar uma palavra no dicionário é, então, (3 + 2 + 2 + 1) / 4 = 2.00. Dado um determinado dicionário, sua tarefa então é calcular o número médio de teclas necessárias para escrever uma palavra no dicionário com o novo sistema para celular desenvolvido pelos pesquisadores."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1234",
        "saida": "Transforme a sentença de entrada em uma sentença dançante (conforme o exemplo abaixo) trocando as letras para minúscula ou maiúscula onde for necessário. Todos os espaços da sentença original deverão ser preservados, ou seja, \" sentence \" deverá ser convertido para \" SeNtEnCe \".",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por uma linha que contém uma sentença, que é uma string que contém entre 1 e 50 caracteres ('A'-'Z','a'-'z' ou espaço ' '), inclusive, ou no mínimo uma letra ('A'-'Z','a'-'z').",
        "titulo": "Sentença Dançante",
        "descricao": "Uma sentença é chamada de dançante se sua primeira letra for maiúscula e cada letra subsequente for o oposto da letra anterior. Espaços devem ser ignorados ao determinar o case (minúsculo/maiúsculo) de uma letra. Por exemplo, \"A b Cd\" é uma sentença dançante porque a primeira letra ('A') é maiúscula, a próxima letra ('b') é minúscula, a próxima letra ('C') é maiúscula, e a próxima letra ('d') é minúscula."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1255",
        "saida": "Para cada caso de teste, imprima uma linha contendo a(s) letra(s) que mais ocorreu(ocorreram) no texto em minúsculas (se houver empate, imprima as letras em ordem alfabética).",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste consiste de uma única linha de texto. A linha pode conter caracteres “não letras”, mas é garantido que tenha ao menos uma letra e que tenha no máximo 200 caracteres no total.",
        "titulo": "Frequência de Letras",
        "descricao": "Neste problema estamos interessados na frequência das letras em uma dada linha de texto. Especificamente, deseja-se saber qual(is) a(s) letra(s) de maior frequência do texto, ignorando o “case sensitive”, ou seja maiúsculas ou minúsculas (sendo mais claro, “letras” referem-se precisamente às 26 letras do alfabeto)."
    },
    {
        "nivel": "9",
        "assunto": "3",
        "numero": "1141",
        "saida": "Para cada caso de teste, imprima uma única linha com um único inteiro representando o tamanho da maior sequência de fotos que pode ser produzida.",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém um inteiro N representando o número de strings no conjunto (1 ≤ N ≤ 104). Cada uma das próximas N linhas contém uma string não-vazia e única com no máximo 1000 caracteres minúsculos do alfabeto inglês. Em cada caso de teste, a soma dos tamanhos das strings é no máximo 106. O último caso de teste é seguido de uma linha contendo um zero.",
        "titulo": "Cultivando Strings",
        "descricao": "Gene e Gina possuem um tipo peculiar de fazenda. Ao invés de criar animais e plantar vegetais como acontece em fazendas normais, eles cultivam strings. Uma string é uma sequência de caracteres. As strings, ao crescerem, adicionam caracteres à esquerda e/ou à direita delas mesmas, mas nunca perdem caracteres nem inserem caracteres no meio. Gene e Gina possuem uma coleção de fotos de algumas strings durante diferentes etapas de seus crescimentos. O problema é que a coleção não é rotulada, portanto eles esqueceram a qual string pertence cada uma das fotos. Eles querem montar um painel para ilustrar os procedimentos do cultivo de strings, mas eles necessitam sua ajuda para encontrar uma sequência de fotos apropriada. Cada foto ilustra uma string. A sequência de fotos precisa ter a seguinte propriedade: se si aparece imediatamente antes de si+1 na sequência, então si+1 é uma string que pode ter crescido a partir de si (ou seja, si é uma substring contígua de si+1). Além disso, eles não querem usar fotos repetidas, portanto todas as strings na sequência devem ser diferentes. Dado um conjunto de strings representando todas as fotos disponíveis, sua tarefa é calcular o tamanho da maior sequência que pode ser produzida com as restrições acima."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "2153",
        "saida": "Para cada caso de teste, imprima a palavra devidamente corrigida. Observe os exemplos para verificar o padrão, de modo a corrigir devidamente todos os casos.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste é formado por uma palavra, de, no máximo, 30 caracteres, dita da forma errada. A entrada termina com fim de arquivo.",
        "titulo": "Sanduicheiche",
        "descricao": "A nutricionista Root Escrevemos é uma excelente profissional de sua área. Certo dia, ela foi entrevistada ao vivo para um jornal local. No entanto, ela ficou um pouco nervosa na hora, e numa situação destas, a fala dela se distorce um pouco, repetindo o final de cada palavra após dizer a mesma. Para se prevenir de um desconforto futuro, ela pede sua ajuda para escrever um programa que omita a parte repetida, de modo que as palavras sejam emitidas como deveriam ser. Escreva um programa que, dada uma palavra errada, a mesma seja corrigida."
    },
    {
        "nivel": "6",
        "assunto": "3",
        "numero": "2000",
        "saida": "Para cada caso teste imprima uma linha com \"s\" (sem aspas) se as duas strings tem a mesma quantidade de substrings distintas e \"n\" caso contrário.",
        "entrada": "A primeira linha da entrada contém um inteiro T, representando a quantidade de casos teste. Cada caso teste consiste de duas linhas. Cada uma das duas linhas contém uma string não-vazias de tamanho até 100000, contendo apenas letras do alfabeto minusculas.",
        "titulo": "Adeildo da Odonto",
        "descricao": "Adeildo faz odontologia, mas sua verdadeira paixão é por strings. Ele tem várias strings favoritas. Em uma de suas disciplinas ele conheceu um colega que também é fã de strings, e que também tem suas strings favoritas. Ele gostaria de saber se as strings tem algo em comum. Ele pediu que você descubra se duas strings possuem a mesma quantidade de substrings distintas."
    },
    {
        "nivel": "6",
        "assunto": "3",
        "numero": "1726",
        "saida": "Como saída, mostre o conjunto de resultados entre chaves ‘{’ e ‘}’, cada um em uma linha. Imprima os elementos de cada conjunto em ordem alfabética.",
        "entrada": "A entrada consiste de uma ou mais linhas. Cada linha contém uma expressão que você deve avaliar. Expressões são sintaticamente corretas e somente consistem dos seguintes caracteres: '{' e '}' Os elementos 'A' à 'Z' significando amigos de Arthur até Zora. Operações '+', '-' e '*' '(' e ')' para agrupar operações Caracter de nova linha '\\n' marcando o fim de uma expressão. Uma linha nunca é maior que 255 caracteres.",
        "titulo": "Amigos",
        "descricao": "Você quer planejar uma grande festa de aniversário com seus amigos. Durante o planejamento você percebeu que você deve fazer inúmeros operações com conjuntos de amigos. Existe um grupo que consiste do Arthur, Biene e Clemens. Existe outro grupo de amigos que você conhece do snowboarding que consiste do Daniel, Ernst, Frida e Gustav. Se você quer convidar ambos, o resultado do grupo da festa consiste de g1 + g2 (o resultado é a união de ambos os grupos). Então você pode computar a intersecção dos dois grupos g1 * g2, que consiste no conjunto vazio. Talvez você queira convidar o grupo g1, mas excluindo todos os membros do outro grupo g2, que pode ser escrito como g1 – g2. Intersecção (*) precede sobre união (+) e diferença (-). Todas as operações são associadas a esquerda, o que significa que em A op1 B op2 C você primeiro deve avaliar A op1 B (desde que op1 e op2 possuam uma precedência igual)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1377",
        "saida": "Para cada caso de teste, seu programa deverá retornar uma linha com um inteiro, representando o número de diferentes subsequências contíguas que aparecem pelo menos duas vezes na seqüência de entrada.",
        "entrada": "Há diversos casos de teste. A entrada de cada caso de teste é dada em exatamente uma linha, contendo uma string não-vazia de no máximo 105 caracteres que representa os dados do disco. Cada caractere da string poderá ser uma letra minúscula, uma letra maiúscula, um dígito, um ponto ou uma vírgula. O último caso de teste é seguido por uma linha contendo um único asterisco.",
        "titulo": "Recuperador de Arquivos",
        "descricao": "Sua escola tem um computador que é usado como um servidor web para hospedar seu site institucional, páginas pessoais dos funcionários, sites para grupos de pesquisa, assuntos, e muitos outros. Recentemente, a tabela do disco rígido foi corrompida, por isso a organização de todos os arquivos foi perdida. Infelizmente, não há backups dessas informações. A única esperança é olhar através de todo o disco de dados e tentar descobrir quais partes correspondem a cada arquivo. Felizmente, o disco foi usando um sistema de arquivos que manteve cada arquivo contíguo, apenas as partes contíguas de dados precisam ser inspecionadas. Os dados do disco é uma seqüência de bytes. Cada byte neste disco em particular pode armazenar uma letra do alfabeto Inglês (maiúsculas e minúsculas distintas), um dígito decimal, um ponto ou uma vírgula, totalizando 64 caracteres diferentes. Enquanto você estava pensando em como resolver o problema, você de repente se lembrou de que o sistema de arquivos também manteve várias cópias de cada arquivo, portanto, apenas os pedaços de bytes contíguos que se repetem tem a chance de ser um arquivo. Além disso, para cada repetição dos mesmos bytes contíguos, apenas uma cópia precisa ser verificada. Por exemplo, se os dados forem 'ababcabb', as subsequências repetidos contíguas são 'a', 'b' e 'ab', mas nada que contenha 'c', nem 'ba' ou 'Bb' é. Portanto, temos 3 pedaços de bytes contíguos que precisam de verificação neste caso. Você precisa escrever um programa que calcule exatamente quantas sequências precisam de verificação, isto é o número de sequências diferentes de bytes contíguos que aparecem em pelo menos duas vezes nos dados."
    },
    {
        "nivel": "4",
        "assunto": "3",
        "numero": "2087",
        "saida": "Para cada caso de teste, você deverá imprimir Conjunto Bom, ou Conjunto Ruim, conforme explicado acima.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste terá um inteiro N (1 ≤ N ≤ 10⁵), representando a quantidade de palavras no conjunto. Segue então N linhas, cada uma tendo uma palavra de no máximo 100 letras minúsculas. A entrada termina quando N = 0 e não deve ser processada.",
        "titulo": "Conjuntos Bons e Ruins",
        "descricao": "Nesse problema você deverá descobrir se um conjunto de diversas palavras é bom ou ruim. Por definição, um conjunto é bom quando nenhuma palavra desse conjunto é um prefixo de uma outra palavra. Caso contrário, este é considerado um conjunto ruim. Por exemplo, {abc, dae, abcde} é um conjunto ruim, pois abc é um prefixo de abcde. Quando duas palavras são iguais, definimos como uma sendo prefixo da outra."
    },
    {
        "nivel": "5",
        "assunto": "3",
        "numero": "1846",
        "saida": "O nome do número, por extenso, sem vírgulas (para facilitar). Preste atenção ao \"e\" conectivo. Veja o exemplo de saída.",
        "entrada": "A entrada consiste de uma lista de números, de tamanho desconhecido (cerca de 100000 números). Haverá um único número inteiro n (0 ≤ n < 106) em cada linha.",
        "titulo": "Numero Para Nome",
        "descricao": "A tarefa para este problema é simples: dada uma lista de números, escreva o nome de cada um por extenso."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "2055",
        "saida": "Para cada instância seu programa deve imprimir uma linha contendo Instancia k, onde k é o número da k-ésima instância. Para cada número de telefone processado seu programa deve imprimir todas as codificaçõs possíveis em ordem lexicográfica (a ordem da tabela ASCII) crescente. Cada codificação deve ser impressa no seguinte formato: o número do telefone seguido de dois pontos (:), um espaço e a codificação. Uma linha em branco deve ser impressa entre dois casos de teste.",
        "entrada": "Cada instância é composta por uma linha contendo um número inteiro 0 < n ≤ 75000, o número de palavras no dicionário. AS próximas n linhas contêm palavras com no máximo 50 caracteres. Depois do dicionário segue um inteiro 1 < t < 100000, e nas t linhas seguintes os números de telefone a serem codificados. QUando n for 0 seu programa deve parar.",
        "titulo": "Lisp é Melhor que Java, C e C++",
        "descricao": "Acredite ou não, esse foi o resultado de um estudo conduzido por Ron Garret (Erann Gat) no início do século. A motivação de Garret foi um outro estudo, feito por Lutz Prechelt e publicado na Communications of the ACM, que comparava a performance de tempo de execução e uso de memória de programas escritos em C, C++ e Java. Porém, diferentemete dos benchmarks tradicionais, Prechelt comparou diferentes implementações de uma mesma tarefa feita por 38 desenvolvedores diferentes (em experiência e conhecimento). O estudo de Prechelt mostrou que Java é de 3 a 4 vezes mais lento que C ou C++, porém a variação maior ocorreu entre os programadores, não entre as linguagens, sugerindo que é melhor gastar mais tempo treinando os desenvolvedores do que discutindo que linguagem deve ser escolhida. Anos depois Garret estendeu esse estudo adicionando Lisp como uma das implementações possíveis para o problema, e dessa vez, além de considerar todos os fatores de comparação de Prechelt, acrescentou o tempo de desenvolvimento como métrica. Os resultados de Garret foram surpreendentes: Lisp ganhou disparado em todos os quesitos, necessitando de menos tempo e linhas de código, consumindo menos memória e executando mais rápido que os programas feitos em C, C++ ou Java. Ficou provado que os programadores de Lisp são muito melhores que os outros programadores. Essa é a sua chance de mostrar que o estudo de Garret está errado. Como? Resolvendo o mesmo problema proposto, em menos tempo e com implementações mais rápidas. O problema que foi a base de ambos os estudos é o seguinte: Considere o seguinte mapeamento entre letras e dígitos: Queremos usar esse mapeamento para codificar números de telefone em palavras de forma que seja fácil decorá-los. Sua tarefa é escrever um programa que ache, dado um número de telefone, todas as possíveis codificações do mesmo em palavras. Um número de telefone é uma string arbitrária contendo apenas hífen (-), barras (/) e dígitos. As barras e hífen não devem ser codificados. As palavras são tiradas de um dicionário informado em ordem alfabética. Você deve imprimir apenas as palavras que codifiquem completamente o número de telefone. As palavras no dicionário podem ter letras maiúsculas e mínusculas, hífen (-) e aspas (\"), porém você deve usar apenas as letras para codificar um número. A palavra deve ser impressa como foi dada no dicionário. A codificação de um número de telefone pode consistir de uma ou mais palavras, separadas por espaço. A codificação é construída palavra por palavra, da esquerda para a direita. Se, em um dado ponto da codificação nenhuma palavra do dicionário pode ser inserida, então um único dígito de telefone pode ser usado para a codificação, porém dois números consecutivos não são permitidos numa codificação válida. Em outras palavras: em uma codificação parcial que cobre k dígitos, o dígito k+1 é codificado por ele mesmo se e somente se, primeiro, o dígito k não foi codificado por um dígito e, segundo, não existe palavra no dicionário que pode ser usada na codificação começando no dígito k+1."
    },
    {
        "nivel": "4",
        "assunto": "3",
        "numero": "1941",
        "saida": "Seu programa deve imprimir um único inteiro, representando o tamanho do maior palíndromo possível, como definido acima.",
        "entrada": "A entrada consiste de duas linhas. A primeira linha contém uma cadeia de caracteres maiúsculos S com pelo menos 1 e no máximo 2000 caracteres. A segunda linha contém um inteiro N, (0 ≤ N ≤ |S|), indicando o número de posições especiais que estamos interessados em incluir no palíndromo, seguido de N números distintos, entre 1 e |S|, inclusive, contendo as posições especiais de S.",
        "titulo": "Palíndromo",
        "descricao": "Um palíndromo é uma cadeia de caracteres tal que sua reversão é igual à cadeia original. Em outras palavras, é uma cadeia que, quando lida de trás pra frente, é igual à cadeia original. Por exemplo BANANAB é um palíndromo, enquanto BANANAS não. Neste problema estamos interessados em uma questão um pouco mais interessante. Dada uma cadeia S, queremos encontrar uma subsequência que seja um palíndromo. Uma subsequência é uma cadeia que pode ser obtida a partir da remoção de zero ou mais caracteres da cadeia original. Por exemplo ANNA é uma subsequência de BANANAS. Será dado também um conjunto de posições de S que chamamos de posições especiais. Sua tarefa é encontrar o tamanho da subsequência que seja um palíndromo e que contenha o maior número de posições especiais possível. Caso exista mais de uma subsequência maximizando o número de posições especiais, você deve imprimir o tamanho da maior delas."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1556",
        "saida": "Para cada teste, a saída consiste de várias linhas, contendo todas as sequências que podem ser formadas por Pedro durante o jogo. É garantido para todas as entradas que não haverá mais de 1000 sequências possíveis de ser formadas. Imprima uma linha em branco após cada caso de teste.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de uma linha contendo uma sequência a ser usada no jogo. A sequência é formada apenas por caracteres minúculos e pode possuir até 1000 caracteres.",
        "titulo": "Removendo Letras",
        "descricao": "João desafiou Pedro em um jogo envolvendo sequências de letras. No início, é mostrado aos jogadores uma sequência de letras. Cada jogador deve tentar usar essa sequência para formar outras sequências. Para isso, é permitido remover algumas letras da sequência, sem alterar a ordem. O jogador que conseguir formar mais sequências ganha o jogo. Pedro gostaria de sua ajuda para ganha de João. Sua tarefa é mostrar para Pedro todas as sequências distintas, em ordem alfabética, que ele pode formar durante o jogo."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1586",
        "saida": "Imprima o nome do estudante que, se sorteado, faria as equipes A e B empatarem. Se não há tal estudante, imprima a linha: “Impossibilidade de empate.” (sem as aspas).",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste é composta por um único inteiro N (1 ≤ N ≤ 105), o qual representa o número de estudantes. Seguem, então, N linhas, cada uma contendo o primeiro nome de um estudante. Os nomes dos estudantes são fornecidos segundo a ordem lexicográfica crescente, e no mínimo 1 e no máximo 10 letras do alfabeto latino compõem o nome de um estudante. Não há num mesmo caso de teste dois estudantes com o mesmo primeiro nome, e a primeira letra de um nome é sempre maiúscula, sendo as demais minúsculas. N = 0 finaliza a entrada.",
        "titulo": "Cabo de Guerra",
        "descricao": "Na Final Nacional da Maratona de Programação de 2013, em Uberlândia, durante um período de lazer, o Prof. Carlinhos (USP) propôs uma atividade a todos os estudantes. Ele primeiro organizou os estudantes em ordem lexicográfica crescente, considerando apenas o primeiro nome e desconsiderando diacríticos. Em seguida, sorteou um estudante e montou duas equipes, A e B: a equipe A seria formada por todos os estudantes na ordem até o estudante sorteado, inclusive; a equipe B seria formada por todos os estudantes na ordem a partir do estudante sorteado, exclusive. As duas equipes, então, competiriam num cabo de guerra tradicional, e os vencedores ganhariam um café. Muitas coisas curiosas o Prof. Carlinhos percebeu naquele dia: A força de cada estudante, quando posicionado imediatamente em frente ao adversário (posição 1), era exatamente igual à soma dos valores correspondentes aos caracteres de seu primeiro nome na tabela ASCII. Dessarte, a força do estudante Leandro, se ficasse na posição 1 de uma equipe (fosse A ou fosse B), serial igual a: 709 = 76 + 101 + 97 + 110 + 100 + 114 + 111 = ‘L’ + ‘e’ + ‘a’ + ‘n’ + ‘d’ + ‘r’ + ‘o’ Quanto mais distante da equipe adversária, menos intimidado — e, portanto, mais forte — ficava um estudante. Mais especificamente, um estudante na posição 2 de uma equipe tinha o dobro da força que teria se ficasse na posição 1. Na posição 3, o triplo, e assim por diante. As posições de ambas as equipes são numeradas a partir da posição mais próxima da equipe adversária, começando a contagem em 1. Por exemplo, se o estudante Leandro ficasse na posição 3 de uma equipe, teria força igual a 3 × 709 = 2127. A força de uma equipe era igual à soma das forças de cada um de seus integrantes. Não obstante, se a força da equipe A fosse maior que a da equipe B, a equipe A certamente ganharia. Por outro lado, se a força da equipe A fosse menor que a da equipe B, a equipe B certamente ganharia. Finalmente, se as forças de ambas as equipes fossem iguais, haveria um empate. Existe algum estudante que o Prof. Carlinhos poderia sortear que fizesse as equipes A e B empatarem?"
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1768",
        "saida": "Para cada caso de teste de entrada, seu programa deverá desenhar uma árvore conforme especificação acima e exemplo abaixo, com uma linha em branco após cada árvore.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste em um inteiro N (2 < N < 100).",
        "titulo": "Árvore de Natal",
        "descricao": "As crianças adoram desenhar árvores de natal e você desafiou algumas delas a desenharem árvores de diversos tamanhos com apenas com o caractere asterisco \"*\". A regra é simples. De baixo para cima, o tronco da árvore consiste de 3 asteriscos e depois 1. Em seguida vem o restante da árvore, com cada fileira de folhas iniciando no tamanho que você determinou e diminuindo de dois em dois, até chegar na copa da árvore que terá apenas um asterisco. Note que para isso dar certo, somente será permitido tamanhos ímpares para estas árvores."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1538",
        "saida": "Para cada valor lido, deve ser impresso na tela o elemento na n-ésima posição da sequência alienígena, sempre com uma quebra de linha.",
        "entrada": "Cada linha de entrada contém um inteiro N (1 ≤ N ≤ 100000), que descreve a posição na sequência alienígena do elemento a ser calculado. A entrada é finalizada quando N = 0.",
        "titulo": "Sequência Alienígena",
        "descricao": "Recentemente foi descoberto um planeta intitulado como Gliese 581g. Ele tem apenas três vezes a massa da Terra, e está à 20 anos-luz de distancia, orbitando uma estrela da constelação de Libra conhecida como Gliese 581, uma anã vermelha. Astrônomos da Universidade da Califórnia e da Carnegie Institution de Washington afirmam que o planeta é o primeiro a apresentar potencial real para conter vida. Eles disseram que essa descoberta só foi possível através da análise de antigas escrituras egípcias, remanescentes da biblioteca de Alexandria. Foram encontradas anotações com uma sequencia estranha, que supostamente indicaria as posições dos planetas com vida no universo. Cada elemento é traduzido em coordenadas tridimensionais utilizando um algoritmo extremamente complexo descrito nas anotações, no entanto o algoritmo para cálculo da sequencia se perdeu por causa das páginas queimadas no incêndio da biblioteca. O livro contém apenas os oito primeiros valores dessa sequência, detectada nas páginas legíveis das escrituras, e para conseguir encontrar as outras coordenadas a Universidade da Califórnia lançou um desafio mundial para estudantes de matemática, engenharia e computação. Dados os primeiros elementos da sequência, deve-se escrever um algoritmo capaz de calcular qualquer elemento da série. Os elementos conhecidos são {B, BA, CB, BAA, BCB, CBA, DAB, BAAA}. Acredita-se que seja possível encontrar qualquer elemento da série, cujos elementos parecem estar escritos em um base numérica alienígena."
    },
    {
        "nivel": "6",
        "assunto": "4",
        "numero": "1439",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o número do jogador que ganha a partida.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém três inteiros P, M e N, separados por espaço, indicando respectivamente o número de jogadores (2 ≤ P ≤ 10), o número de cartas distribuídas para cada jogador no começo da partida (1 ≤ M ≤ 11) e o número de cartas no baralho embaralhado (3 ≤ N ≤ 300). Cada uma das próximas N linhas contém a descrição de uma carta. Uma carta é descrita por um inteiro X e um caractere S, separados por um espaço, representando respectivamente o valor da carta e seu naipe. O valor das cartas é mapeado com inteiros de 1 a 13 (Ás é 1, Valete é 11, Dama é 12 e Rei é 13). Os naipes das cartas são designados pela primeira letra do naipe: 'C' (Paus - Clubs), 'D' (Ouros - Diamonds), 'H' (Copas - Hearts) ou 'S' (Espadas - Spades). Os jogadores são identificados com valores de 1 a P e sentam-se em um círculo, no sentido horário, 1, 2 ... P, 1. As primeiras P x M cartas do baralho são distribuídas aos jogadores: as primeiras M cartas ao primeiro jogador (jogador 1), as próximas M cartas ao segundo jogador (jogador 2), e assim por diante. Depois de distribuir as cartas aos jogadores, a próxima carta do baralho - a (P x M + 1)-ésima carta - é usada para começar a pilha de descarte, e as cartas restantes formam a pilha de saque. A (P x M + 2)-ésima carta a aparecer na entrada é a carta do topo da pilha de saque, e a última carta a aparecer na entrada (a N-ésima carta) é a carta de baixo da pilha de saque (a última carta que pode ser sacada). O jogador 1 é sempre o primeiro a jogar (mesmo se a carta usada para começar a pilha de descarte é uma Dama). Todos os casos de teste têm um vencedor, e em todos casos de teste o número de cartas no baralho é suficiente para jogar até o fim da partida. O final da entrada é indicado por uma linha contendo apenas três zeros, separados por espaços.",
        "titulo": "Bora Bora",
        "descricao": "Bora Bora é um jogo de cartas simples para crianças, inventado na Ilha do Pacífico Sul de mesmo nome. Duas ou mais pessoas podem jogar, usando um baralho de cartas normais. As cartas têm os valores normais: Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Dama e Rei. Cada carta tem também um dos quatro naipes: Paus, Ouros, Copas e Espadas. Os jogadores sentam-se em um círculo ao redor da mesa e jogam por turnos. O próximo jogador a jogar pode ser aquele à esquerda (sentido horário) ou o jogador à direita (sentido anti-horário) do jogador atual, dependendo das cartas jogadas, como você verá. No começo, o sentido do jogo é horário. O baralho é embaralhado e é dada a cada jogador uma mão de cartas. O restante do baralho é colocado na mesa, virado para baixo; a essa pilha é dado o nome de pilha de saque. Então a primeira (a mais acima) carta é removida da pilha e colocada na mesa, virada para cima, começando outra pilha, chamada de pilha de descarte. O objetivo do jogo é que um jogador descarte todas suas cartas. Em cada turno, um jogador descarta no máximo uma carta. Uma carta pode ser descartada apenas se ela tem o mesmo valor ou o mesmo naipe da carta que se encontra no topo da pilha de descarte. Um jogador descarta uma carta colocando-a, virada para cima, na pilha de descarte (essa carta se torna a carta do topo). Se um jogador não tiver uma carta passível de ser descartada em seu turno, ele deve sacar uma carta da pilha de saque e adicionar à sua mão; se ele puder descartar essa carta, ele o faz, caso contrário ele não faz mais nada e seu turno acaba. Um jogador sempre descarta a carta mais alta que ele consegue. O valor de uma carta é determinado primeiro pelo valor da carta e então pelo naipe. A ordem dos valores é o valor em si (Ás é o menor e Rei é o maior), e a ordem dos naipes é, do menor para o maior, Paus, Ouros, Copas e Espadas. Portanto, a carta de maior valor é o Rei de Espadas e a de menor valor é o Ás de Paus. Como exemplo, a Dama de Ouros tem um valor maior que um Valete (qualquer naipe) mas tem um valor menor que a Dama de Copas. Algumas das cartas descartadas afetam o jogo, como se segue: Quando uma Dama é descartada, a direção de jogo é invertida: se a direção é horária, ela se torna anti-horária, e vice-versa; Quando um Sete é descartado, o próximo jogador deve sacar duas cartas da pilha de saque (o número de cartas em sua mão aumenta por dois), e perde a vez (não descarta nenhuma carta); Quando um Ás é descartado, o próximo jogador deve sacar uma carta da pilha de saque (o número de cartas em sua mão aumenta por um), e perde sua rodada (não descarta nenhuma carta); Quando um Valete é descartado, o próximo jogador perde a vez (não descarta nenhuma carta). Perceba que a penalidade da primeira carta da pilha de descarte (a carta sacada da pilha de saque no começo) é aplicada ao primeiro jogador a jogar. Por exemplo, se o primeiro jogador é p e a primeira carta na pilha de descarte é um Ás, o jogador p saca uma carta da pilha de saque e não descarta nenhuma carta em seu primeiro turno. Note também que se a primeira carta é uma Dama, o sentido do jogo é invertido para o anti-horário, mas o primeiro jogador a jogar permanece o mesmo. O vencedor é o jogador que descarta todas suas cartas primeiro (o jogo acaba depois de o vencedor descartar sua última carta). Dada a descrição do baralho embaralhado e o número de jogadores, escreva um programa que determine quem vencerá o jogo."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1449",
        "saida": "Para cada instância imprima as N linhas traduzidas. As palavras que não estão no dicionário devem ser impressas como aparecem na entrada. Imprima uma linha em branco após tradução, inclusive após a última. Nenhuma linha da saída contém mais do que 80 letras.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros M e N (1 ≤ M ≤ 1000000, 1 ≤ N ≤ 1000), que representam o número de palavras no dicionário e o número de linhas na letra da música, respectivamente. Os próximos M pares de linhas contêm as traduções: a primeira linha de cada par contém a palavra em Japonês, e a segunda linha contém a tradução para o Português (que pode ter uma ou mais palavras). Todas as palavras usam apenas letras minúsculas. Cada palavra em Japonês aparece apenas uma vez em cada instância. As próximas N linhas contêm a letra da música. Cada linha da letra da música é uma lista de palavras separadas por um espaço (todas as palavras consistem apenas de letras minúsculas). Algumas podem estar vazias, mas nenhuma linha possui espaços no início ou no final. Nenhuma linha contém mais do que 80 letras.",
        "titulo": "O Fantástico Jaspion",
        "descricao": "Em 1985 estréia na TV Japonesa a série Kyojiu Tokusou Jaspion (Investigador Especial de Monstros Jaspion). A série chega ao Brasil alguns anos depois com o título “O Fantástico Jaspion”, e com ela nasce a fantasia de polícia espacial em milhões de brasileirinhos. As crianças saíam da escola, corriam pelas ruas (sem olhar se vinha carro), ligavam a TV e mergulhavam na coragem, exemplo de pessoa, e incontestável sede por justiça do Fantástico Jaspion. O comércio de gibis e as brigas por figurinhas no recreio da escola estavam alcançando números históricos. Até então, tal sentimento só havia sido estimulado com tanta intensidade pelo Chaves e a sua turma! Diante dessa febre inter-galática, o inevitável aconteceu. Os produtores do Jaspion ganharam o Nobel da Paz! Isso mesmo! Os produtores ganharam um Nobel. As histórias do grandioso Jaspion estavam por todo canto. Agora as crianças tinham um belíssimo exemplo para seguir. A paz mundial estava garantida! Não precisávamos mais temer o monstrengo Satan Gos! No Brasil havia uma criança que adorava as histórias do Jaspion! Antônio Melhorança Capote Valente Junior carinhosamente apelidado de ACM, um menino da zona sul de São Paulo que adorava cantar as músicas do grande herói. Ele era tão fanático que chegou a comprar um dicionário de Japonês-Português e iniciou um trabalho árduo de tradução. Entretanto, o trabalho ficou inacabado! Alguns trechos da canção ainda precisam ser traduzidos. Neste momento você deve estar se perguntando: qual é a minha tarefa neste fabuloso problema? Ok! Antes de falar da sua tarefa, convide seu companheiro de equipe para mergulhar com você no desfecho da história. Para isso, vamos falar mais um pouco sobre o nosso ACM. Ele se formou em Ciência da Computação e hoje trabalha no mesmo escritório que você. Pois é! Você trabalha como programador ao lado dessa figura! Como sabemos que você gosta muito dele, temos certeza que vai aceitar a seguinte tarefa: dado um dicionário Japonês-Português e uma letra de música, escreva um programa que imprima a letra traduzida."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2047",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir viavel se é possível transportar todos os passageiros de suas origens até o destino especificado, e inviavel em caso contrário. Uma linha em branco deve separar a saída de cada instância. Inclusive na última instancia.",
        "entrada": "Um cenário será, daqui em diante, chamado de instância. Seu programa deve estar preparado para lidar com diversas instâncias. Cada instância começa com um inteiro 0 ≤ m ≤ 100 que especifica o número de cidades de origem dos passageiros que devem ser transportados. Um valor m = 0 indica o final das instâncias e não deverá ser processado. Em caso contrário, em cada uma das próximas m linhas, são dados o nome de uma cidade de origem e o respectivo número de passageiros daquela cidade (um inteiro não negativo menor ou igual a 100). O nome de uma cidade possui entre 1 e 20 caracteres tomados do alfabeto Σ={a,b,...,z,-}. Na próxima linha são dados um inteiro 0 ≤ n ≤ 100, que representa o número de vôos da instância, e o nome da cidade em que ocorrerá o evento (o CEO decidiu que o programa deveria aceitar isso). O nome desta cidade segue as mesmas regras estabelecidas acima. Em cada uma das próximas n linhas são dados os nomes de duas cidades de um vôo (origem e destino, respectivamente), seguido por um inteiro não negativo menor ou igual a 200 que representa o número de assentos livres naquele vôo. Novamente os nomes das cidades estão sobre Σ e de comprimento entre 1 e 20. Você pode supor que não há duas cidades com o mesmo nome, e que as cidades de origem e destino são sempre diferentes. Além disso, a Fly by Night Ltd. não trabalha com mais de um vôo entre quaisquer duas cidades. Em cada linha da entrada, um número qualquer de espaços pode separar os dados fornecidos.",
        "titulo": "Fly By Night",
        "descricao": "Bill Poucher anunciou em Shangai (China), em abril último, que a trigésima final mundial do ACM-ICPC será realizada em San Antonio (USA) na segunda semana de 2006. Ao tomar conhecimento de tal informação (com alguns meses de atraso), uma empresa de transportes aéreos do Texas - conhecida como Fly by Night Ltd. - decidiu aproveitar o evento para tentar incrementar seu ganho anual. O objetivo do CEO da empresa era oferecer transporte aéreo para os times (incluindo competidores e técnicos) e para a equipe de suporte (aqueles que fazem as coisas funcionarem) a partir de suas cidades de origem, em seus países de origem, até o local da competição. Para tentar garantir o sucesso de sua idéia, o mesmo CEO ofereceu tarifas ligeiramente abaixo do preço de mercado para aqueles que seriam transportados. Como eles eram em sua maioria estudantes e professores universitários, toparam na hora. Como você já deve ter imaginado, a Fly by Night Ltd. opera vôos noturnos. No entanto, em vez de possuir seus proprios aviões, a referida empresa apenas vende assentos em vôos de outras companhias. Ela ganha uma boa comissão devido ao fato de tais vôos terem, historicamente, uma baixa ocupação. No entanto, quando os funcionários da empresa foram verificar os vôos que teriam à disposição para realizarem a operação, tiveram uma bela surpresa. A maior parte dos vôos estava completamente lotada. Os que não estavam lotados, não possuiam muitos assentos livres. Ninguém soube explicar o motivo de tal demanda irregular. Duas hipóteses foram levantadas: a proximidade do spring-break americano e a popularidade da competição. :-) Na tentativa de salvar a empresa (e seu próprio cargo), o CEO percebeu que teria de utilizar escalas e baldeações. O lucro desta forma seria menor, mas nada comparado ao prejuízo que teria se operasse com vôos diurnos ou deixasse de transportar os passageiros (que naquela altura, já tinham pago as passagens...). Os funcionários da Fly by Night Ltd. levantaram então um conjunto de cenários com vôos que poderiam ser utilizados. O que foi percebido pouco depois é que nem todos os cenários eram viáveis, já que nem todos conseguiam transportar o montante de passageiros necessário. Finalmente, o CEO percebeu que não tinha pessoal qualificado para lidar com a situação. Você foi então contratado para desenvolver um programa que, para cada cenário construído, responda se o cenário é viável ou inviável."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1587",
        "saida": "Imprima uma linha revelando o placar final do jogo de acordo com os eventos fornecidos e com as regras descritas. Os exemplos esclarecem o formato em que o placar deve ser impresso.",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste é composta por dois inteiros N e E (1 < N < 2.551.805, 1 < E < 104), os quais encerram a entrada quando são ambos nulos. N é um número par que indica o número de fortalezenses que participaram do jogo. E é o número de eventos que aconteceram durante o jogo. Os times são chamados de A e de B, e os jogadores, de A1, A2, A3… e de B1, B2, B3… Todas as posições são determinadas pela distância em milímetros da linha do gol do time A, ou seja, o gol do time A está na posição 0 e o gol do time B está na posição 2.000.000. A segunda linha de um caso de teste contém N / 2 inteiros xiA (0 ≤ xiA ≤ 2.000.000, 1 ≤ i ≤ N / 2), indicando cada xiA a posição do jogador Ai no início da partida. De igual modo, a terceira linha contém N / 2 inteiros xiB (0 ≤ xiB ≤ 2.000.000, 1 ≤ i ≤ N / 2), indicando cada xiB a posição inicial do jogador Bi. Seguem, então, E linhas, cada uma descrevendo um evento do jogo. O quadro abaixo lista todos os eventos possíveis e como cada um deles é descrito na entrada. I Xi o árbitro concede a bola ao jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2 ) para iniciar uma jogada M Xi x o jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2) se movimenta para a posição X (0 ≤ X ≤ 2000000) P Xi a bola passa para as mãos do jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2) G X a bola entra no gol do time X (X ∈ {A, B}) S a bola sai da piscina Assuma que um evento I ocorre se e somente se é o primeiro evento da partida ou o evento anterior é um evento G ou S.",
        "titulo": "BIT Park",
        "descricao": "A Final Nacional da Maratona de Programação da Sociedade Brasileira de Computação (SBC) de 2014 será em Fortaleza, e os desbravadores maratonistas chapecoenses, ansiosos, já começam a fazer as malas, esperançosos da classificação na Etapa Regional. A capital do Ceará, com uma população de 2.551.805 habitantes (segundo o Censo Populacional de 2013 do IBGE), é mundialmente conhecida por suas belas praias, seus luxuosos hotéis, pousadas e restaurantes, suas magníficas obras de Arquitetura, seu povo alegre e hospitaleiro, e também pelos seus extraordinários parques aquáticos. Visando derrubar a hegemonia do maior parque aquático da cidade, uma empresa local de TI, denominada NCC (Núcleo de Computação Cearense), construiu um parque aquático maior ainda, denominado BIT Park, o qual será inaugurado ainda neste ano. Para a inauguração toda a população da cidade foi convidada, e o NCC promete várias atividades para entreter o povo a tarde toda. Uma das atividades previstas para a inauguração ocorrerá na maior piscina do BIT Park: um colossal jogo de futebol aquático, do qual poderão participar todos os habitantes de Fortaleza, já que a piscina em questão possui nada mais nada menos que 1 km de largura por 2 km de comprimento. O futebol aquático funciona basicamente como o futebol convencional, mas com algumas diferenças: o jogo ocorre dentro d'água, então, a bola é passada com as mãos, não com os pés; o jogo pode ser jogado por qualquer número par de jogadores, desde que haja o mesmo número de jogadores nos dois times --- e desde que todos os jogadores caibam na piscina; não há goleiros, já que todos os jogadores podem defender a bola com as mãos; assim como no futebol convencional, a legalidade da posição de um jogador é avaliada de acordo com a linha paralela à linha do gol adversário em que se encontra, considerando-se também as linhas em que se encontram os jogadores adversários: a posição de um jogador J é considerada ilegal — e o jogador, consequentemente, considerado impedido — se menos de 2/11 dos jogadores adversários encontram-se em linhas mais próximas da linha do gol adversário que a linha em que se encontra J; apenas pode pegar a bola um jogador que esteja numa posição legal, diferentemente do que ocorre no futebol convencional, em que o impedimento é avaliado no momento do passe, não no momento da recepção. Na Figura, em que o time A joga contra o time B, estão impedidos os jogadores A4 e A5. O NCC percebeu que avaliar as legalidades das posições dos jogadores durante o jogo seria impraticável; afinal, toda a população de Fortaleza poderia estar na piscina. A decisão, então, foi deixar o jogo rolar para depois reavaliar todos os eventos e recalcular o placar através de um programa. A partir do momento em que um jogador impedido recebe a bola, o próximo gol que ocorre na partida deve ser anulado, a menos que a bola saia da piscina. No início do jogo, e toda vez que a bola sai da piscina ou que ocorre algum gol, o árbitro sorteia um jogador qualquer — não necessariamente não impedido — e lhe concede a bola para dar continuidade à atividade."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1430",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma única linha contendo um único inteiro, o número de compassos que possuem a duração correta.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em uma única linha contendo uma string cujo tamanho está entre 3 e 200 caracteres, inclusive, representando uma composição. Uma composição começa e termina com uma barra '/'. Compassos em uma composição são separados por uma barra '/'. Cada nota em um compasso é representada pela letra correspondente segundo a descrição acima. Você pode assumir que cada composição contém ao menos um compasso e que cada compasso contém ao menos uma nota. Todos os caracteres na entrada serão barras ou uma das sete letras maiúsculas usadas para representar as notas. O último caso de teste é seguido por uma linha contendo um único asterisco.",
        "titulo": "Composição de Jingles",
        "descricao": "A. C. Marcos está dando os primeiros passos para ser um compositor de jingles. Ele está tendo alguns problemas, mas ao menos ele está criando melodias agradáveis e ritmos atrativos. Na música, uma nota tem um tom (sua frequência, resultando em quão grave ou agudo é o som) e uma duração (por quanto tempo a nota soa). Neste problema, estamos interessados apenas na duração das notas. Um jingle é dividido em uma sequência de compassos, e um compasso é formado de uma série de notas. A duração de uma nota é indicada pela sua forma. Neste problema, iremos utilizar letras maiúsculas para indicar a duração de uma nota. A seguinte tabela lista todas as notas disponíveis: ​ A duração de um compasso é a soma da duração de suas notas. Nos jingles de Marcos, cada compasso tem a mesma duração. Como Marcos é apenas um iniciante, seu famoso professor Johann Sebastian III o ensinou que a duração de um compasso deve ser sempre 1. Por exemplo, Marcos escreveu uma composição contendo cinco compassos, dentre os quais quatro possuem a duração correta e um está errado. No exemplo abaixo, cada compasso é delimitado com barras e cada nota é representada como na tabela acima. /HH/QQQQ/XXXTXTEQH/W/HW/ Marcos gosta de computadores assim como de música. Ele quer que você escreva um programa que determine, para cada uma de suas composições, quantos compassos possuem a duração correta."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1520",
        "saida": "Cada caso de entrada deverá produzir uma única linha de saída, indicando as posições da prateleira nas quais o parafuso de tamanho Num se encontra ou indicando que não foi possível encontrar o parafuso, conforme o exemplo abaixo.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto por várias linhas. A primeira linha contém um inteiro positivo N (N < 100) que indica a quantidade de caixas de parafusos. Seguem N linhas, cada uma delas com dois valores X e Y (1 ≤ X < Y ≤ 100) que representam os tamanhos dos lotes de parafusos e porcas presentes naquela caixa. A próxima linha de entrada conterá um único inteiro positivo Num (1 ≤ Num ≤ 100), que indica o número que Mango deseja pesquisar após todos os produtos serem organizados na estante ou rack. Obs. A estante ou rack possui prateleiras enumeradas de 0 a P, sendo que este P não deve ser superior a 10000.",
        "titulo": "Parafusos e Porcas",
        "descricao": "Pedro está trabalhando em um novo emprego em uma loja de parafusos e porcas. Toda semana ele irá receber novas encomendas de parafusos mistos em grandes caixas e precisa saber onde ele deve armazenar esses produtos. Mango, que é supervisor de Pedro, pediu-lhe para organizar todos os parafusos e porcas em um rack enorme, de forma que seja fácil de responder onde é possível encontrar cada predeterminado lote de parafusos e quanto de cada um destes lotes a loja tem.  Pedro recebe todos os parafusos e porcas em caixas etiquetadas com o intervalo de tamanho dos produtos. Por exemplo, duas caixas com os respectivos intervalos (1, 2) e (4, 8) representam lotes de produtos com tamanho {1, 2, 4, 5, 6, 7, 8}. Um número de parafuso e porca pode estar presente em mais de uma caixa, e ele aparece na lista uma vez para cada intervalo. Por exemplo, três caixas com os respectivos intervalos (1, 3), (2, 4) e (3,5) representam lotes de parafusos e porcas com tamanho {1, 2, 2, 3, 3, 3, 4, 4, 5}."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1548",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de alunos que não precisaram trocar de lugar mesmo após a fila ser reordenada.",
        "entrada": "A primeira linha contém um inteiro N, indicando o número de casos de teste a seguir. Cada caso de teste inicia com um inteiro M (1 ≤ M ≤ 1000), indicando o número de alunos. Em seguida haverá M inteiros distintos Pi (1 ≤ Pi ≤ 1000), onde o i-ésimo inteiro indica a nota do i-ésimo aluno. Os inteiros acima são dados em ordem de chegada, ou seja, o primeiro inteiro diz respeito ao primeiro aluno a chegar na fila, o segundo inteiro diz respeito ao segundo aluno, e assim sucessivamente.",
        "titulo": "Fila do Recreio",
        "descricao": "Na escola onde você estuda, a hora do recreio é a mais aguardada pela grande maioria dos alunos. Não só porque as vezes as aulas são cansativas, mas sim porque a merenda servida é muito boa, preparada por um chefe italiano muito caprichoso. Quando bate o sinal para a hora do recreio, todos os alunos saem correndo da sua sala para chegar o mais cedo possível na cantina, tanta é a vontade de comer. Um de seus professores notou, porém, que havia ali uma oportunidade. Utilizando um sistema de recompensa, seu professor de matemática disse que a ordem da fila para se servir será dada não pela ordem de chegada, mas sim pela soma das notas obtidas em sala de aula. Assim, aqueles com maior nota poderão se servir antes daqueles que tem menor nota. Sua tarefa é simples: dada a ordem de chegada dos alunos na cantina, e as suas respectivas notas na matéria de matemática, reordene a fila de acordo com as notas de matemática, e diga quantos alunos não precisaram trocar de lugar nessa reordenação."
    },
    {
        "nivel": "6",
        "assunto": "4",
        "numero": "1083",
        "saida": "Como saída, para cada expressão de entrada deverá ser gerado uma linha indicando o resultado do processamento. Se a expressão estiver correta, esta deverá ser transformada para a forma posfixa. Se não for possível, deverá ser impressa a mensagem \"Lexical Error!\" indicando erro léxico ou \"Syntax Error!\" indicando o erro de sintaxe, nesta ordem.",
        "entrada": "Como entrada, são válidos: a) Operandos: todas as letras maiúsculas ou minúsculas ('a'..'z', 'A'..'Z') e números (0...9). b) Parênteses. c) Operadores: deverão ser aceitos os seguintes operadores segundo a tabela de prioridades  apresentada abaixo: Operador Prioridade ^ 6 *,/ 5 +,- 4 >,<,=,#, 3 AND ( . ) 2 OR ( | ) 1 Para facilitar a implementação, será utilizado um ponto para representar o AND (.) e o Pipe ( | ) para representar o OR. Obs.: Como restrição, não será permitida a entrada de expressões com operadores unários, como por e exemplo o '-' de: 4 * -2 A finalização da entrada será determinada pelo final do arquivo de entrada EOF().",
        "titulo": "LEXSIM - Avaliador Lexico e Sintático",
        "descricao": "Uma das formas mais interessantes do uso de pilhas é a na avaliação de uma expressão matemática. Pode-se, através da pilha, fazer a análise léxica de uma expressão (indicar se uma expressão possui um operando inválido, como por exemplo um símbolo qualquer que não está presente nem na tabela de operadores, nem na tabela de operandos) e também a análise sintática. A análise sintática pode indicar que está faltando um ou mais parênteses, sobrando um ou mais parênteses, sobrando operador, 2 operandos sucessivos, etc. A tarefa aqui é determinar se uma expressão está correta ou não."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1326",
        "saida": "Para cada caso de teste da entrada, seu programa deve produzir uma linha, contendo a string 'PRODUCT requires N containers', onde o PRODUCT é a substância final e N é o número de recipientes necessários para produzi-lo.",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste começa com uma linha contento um inteiro R, indicando o número de reações para serem consideradas(1 <= R <= 5000). A seguir R linhas são da forma: S1 + S2 → S3 Descreve uma reação que consome S1 e S2 e produz S3 como resultado. Os nomes de todas as substâncias são cadeias-alfanumericas de tamanho no máximo 5. Um caso de teste com R = 0 indica o final da entrada.",
        "titulo": "Química",
        "descricao": "Internacional Chemical Products Company (ICPC) é uma empresa conhecida mundialmente pelos seus bons produtos e acessíveis, o que inclui shampoos, produtos de limpeza, matadores de insetos, e alguns tipos de vacinas. Os engenheiros da ICPC sempre estão procurando meios de reduzir o custo de fabricação de seus produtos, sem perder a qualidade. Um dos engenheiros, Sr. Poucher, tem uma nova ideia de reduzir o custo, que visa reduzir o número de recipientes necessários para manter as substâncias durante a sequência de reações químicas para se obter uma última substância. Essas substâncias finais são obtidas através de uma sequência de reações na forma de X + Y → Z, onde X e Y são substâncias iniciais ou intermediarias (que já foram geradas em reações anteriores). Essas reações são feitas dentro de um recipiente de reações, que quando vazio pode ser limpo e usado novamente. O processo de gerar a substância final pode ser descrevido por uma sequência de duas simples operações: Colocar uma substância disponível em um recipiente de reação vazio C; Realizar a reação de X + Y → Z ou colocando X no recipiente de reação contendo Y, ou colocando Y no recipiente de reação contendo X. A ordem não afeta o resultado final da reação. O que Sr. Poucher percebeu é que escolhendo a sequência de reação correta, ICPC poderia cortar o número de reações necessárias na companhia drasticamente . Por exemplo, considerando a seguinte sequência de reações químicas usadas para obter a substância final P: 1) A + B -> T1 2) C + D -> T2 3) E + F -> T3 4) T2 + T3 -> T4 5) T4 + T1 -> P Nesse exemplo, A, B, C, D, E e F são as substância iniciais (somente aparecem no lado esquerdo das reações), T1, T2, T3 e T4 são substâncias intermediarias (aparecem no lado esquerdo pelo menos uma vez, e exatamente uma na direita de alguma outra reação) e P é a substância final (só aparece na direita de uma única reação, que vai ser a última listada). Se a sequência de reações é realizada como foi dito então três recipientes são necessários em ordem para produzir a substância final P: Recipientes Operações C1 C2 C3 colocar A em C1: A - - adicionar B para C1: T1 - - colocar C em C2: T1 C - adicionar D para C2: T1 T2 - colocar E em C3: T1 T2 E adicionar F para C3: T1 T2 T3 colocar T2 em C3: T1 - T4 colocar T4 em C1: P - - Nota-se, contudo, que se as reações são realizadas na sequência 2, 3, 4, 1, 5, dois recipientes são suficientes: Recipientes Operações C1 C2 colocar C em C1: C adicionar D para C1: T2 colocar E em C2: T2 E adicionar F para C2: T2 T3 colocar T2 em C2: - T4 colocar A em C1: A T4 adicionar B para C1: T1 T4 colocar T1 em C2: - P Você foi contratado pela ICPC, e sua tarefa é criar um programa de computador que determine o número minimo de recipientes necessárias para executar a sequência de reações necessárias para obter a substância final. Você deve assumir que: A reação de produção da substância final é a última listada, e a reação que produz uma substância intermediária sempre vai preceder as reações onde essa substância intermediária é usada. Uma sequência de reações que produzem a última substância é sempre possível. ICPC tem um suprimento ilimitado de substâncias iniciais. No início do processo de produção, cada substância inicial está em um recipiente de armazenamento, usado para guardar todo estoque de substâncias da ICPC. Tais recipientes não podem ser utilizados como recipiente de reação para armazenar produtos intermediários da reação. Todos os recipientes de reação são grandes o suficiente para manter todas as substâncias resultantes. A quantidade de substâncias geradas por uma única reação é suficiente para ser usada como entrada para uma única outra reação. Por exemplo, se um produto intermediário Z é necessário como entrada para duas diferentes reações, este produto deve ser produzido duas vezes. Cada reação usa exatamente duas substâncias diferentes e gera também uma substância distinta, isto é, toda reação tem a forma X + Y → Z, onde X, Y e Z são distintos."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1162",
        "saida": "Para cada caso de teste imprima a sentença: 'Optimal train swapping takes S swaps.' onde S é um inteiro.",
        "entrada": "A entrada contém na primeira linha o número de caso de testes (N). Cada caso de teste consiste de duas linhas de entrada. A primeira linha de um caso de teste contém um inteiro L, determinando o tamanho do trem (0 ≤ L ≤ 50). A segunda linha de um caso de teste contém uma permutação dos números 1 até L, indicando a ordem corrente dos vagões. Os vagões devem ser ordenados de forma que o vagão 1 venha por primeiro, depois o 2, etc, com o vagão L vindo por último.",
        "titulo": "Organizador de Vagões",
        "descricao": "Na estação de trem você ainda pode encontrar o último dos “organizadores de vagões”. Um Organizador de vagões um empregado cujo trabalho é apenas reordenar os vagões do trem, trocando-os de posição. Uma vez que os vagões são organizados em uma ordem considerada ótima, o condutor pode desconectar cada vagão e colocá-los na estação. O título “organizador de vagões” é dado à pessoa que realiza esta tarefa, cuja estação fica perto de uma ponte. Ao invés da ponte poder subir ou descer, ela roda sobre um pilar que fica no centro do rio. Após rodar 90 graus, os barcos podem passar na esquerda ou direita dela. O Primeiro organizador de vagões descobriu que girando a ponte 180 graus com dois vagões em cima dela, é possível a troca de lugar entre os dois vagões. Obviamente a ponte pode operar no máximo com dois vagões sobre ela. Agora que quase todos os organizadores de vagões já faleceram, a estação gostaria de automatizar esta operação. Parte do programa a ser desenvolvido é uma rotina que decide para um dado trem com um determinado número de vagões, o número de trocas entre trens adjacentes que são necessárias para que o  trem fique ordenado. Sua tarefa é criar tal rotina."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2020",
        "saida": "Para cada lista codificada por elfos, deve-se apresentar a mensagem “LISTA #X:”, onde X é o número da lista seguindo a sequência (1, 2, 3, ...), em seguida deve-se listar todos os presentes em ordem alfabética e maiúsculo, um em cada linha. Imprimir uma linha em branco entre dois casos de teste consecutivos. No fim da saída não deve haver uma linha em branco.",
        "entrada": "A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10000), que corresponde ao número de linhas codificadas por elfos. As N linhas seguintes contém um número indefinido de inteiros i (1 ≤ i ≤ 27), cada número inteiro i representa a linha da matriz e se i for 27, um espaço. A entrada termina com final de arquivo (EOF).",
        "titulo": "Elfos e seus Códigos",
        "descricao": "Neste ano Papai Noel recebeu várias listas de presentes, com pedidos e mais pedidos. Para dificultar, todas as listas são codificadas por elfos. Como são milhares de listas e o Papai Noel é organizado, decidiu pedir a sua ajuda. Ele sabe que você é dedicado e conhece o padrão de decodificação dos elfos, e para isso disponibilizou 26 gnomos e 676 duendes. Cada lista é decodificada através da colaboração de gnomos e duendes ajudantes do Papai Noel. Os gnomos são enumerados de 1 a 26 e para cada gnomo, 26 duendes que correpondem a letras de A até Z (incluindo as letras K, W, Y). Quando a decodificação é iniciada, todas as N linhas são executadas. Cada N linha corresponde a um presente. Seguem os passos para decodificar uma determinada lista criada por elfos: 1º Os gnomos e duendes são organizados, gnomos representam linhas e duendes representam as colunas. 2º Para cada gnomo, é encontrado um duende. Por exemplo, se o número inteiro i for 2 (linha 2) o gnomo é 2 e obrigatoriamente o duende também é 2, correspondendo, portanto, ao caractere B. 3º Todos os duendes, na posição gnomo devem ser movidos para o final. 4º A linha correspondente ao gnomo é movida para a última posição válida. Após este primeiro movimento, se o próximo número da entrada para i for 2 (linha 2) o gnomo agora será 3 e consequentemente o duende também será 3, correspondendo portanto, ao caractere D. O 1º passo é executado a cada nova lista codificada por elfos, o 2º, 3º e 4º passo são executados a cada número inteiro i que corresponde a linha da matriz. Papai Noel quer saber os presentes que contém na lista codificada por elfos."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1424",
        "saida": "Para cada consulta, imprima o índice do vetor (1-indexado) da ocorrência solicitada. Se tal ocorrência não existe, imprima 0 ao invés.",
        "entrada": "Há vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros n e m (1 ≤ n, m ≤ 100.000), o número de elementos no vetor e o número de consultas a serem respondidas, respectivamente. A próxima linha contém n inteiros positivos não maiores que 1.000.000, que descrevem o vetor. As próximas m linhas contém dois inteiros k e v cada (1 ≤ k ≤ n, 1 ≤ v ≤ 1.000.000), descrevendo as consultas. O arquivo de entrada termina com fim-de-arquivo (EOF). O tamanho do arquivo de entrada não excede 5 Mb.",
        "titulo": "Problema Fácil de Rujia Liu?",
        "descricao": "Embora Rujia Liu geralmente escreve problemas difíceis para algumas competições (como, por exemplo, competições regionais de Xi'an em 2006, de Pequim em 2007 e de Wuhan em 2009, ou competições no UVA OJ como a \"Rujia Liu's Presents\" 1 e 2), ele escreve problemas fáceis algumas vezes (como, por exemplo, o problema \"the Coco-Cola Store\" no UVA-OJ), para encorajar mais pessoas a resolver mais problemas :D Dado um vetor de inteiros, sua tarefa é encontrar a k-ésima ocorrência (da esquerda para a direita) de um inteiro v no vetor. Para tornar o problema mais difícil (e mais interessante!), você deve responder a m consultas deste tipo."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1069",
        "saida": "Você deve imprimir a quantidade de diamantes possíveis de serem extraídos em cada caso de entrada.",
        "entrada": "Deve ser lido um valor inteiro N que representa a quantidade de casos de teste. Cada linha a seguir é um caso de teste que contém até 1000 caracteres, incluindo \", .\"",
        "titulo": "Diamantes e Areia",
        "descricao": "João está trabalhando em uma mina, tentando retirar o máximo que consegue de diamantes \"\". Ele deve excluir todas as particulas de areia \".\" do processo e a cada retirada de diamante, novos diamantes poderão se formar. Se ele tem como uma entrada .>....>....>>>., três diamantes são formados. O primeiro é retirado de , resultando  .....>....>>>. Em seguida o segundo diamante é retirado, restando .....>>>. O terceiro diamante é então retirado, restando no final .....>>>., sem possibilidade de extração de novo diamante."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1897",
        "saida": "A saída é o número mínimo de operações para converter N em M.",
        "entrada": "A entrada contém dois inteiros N ( 0 ≤ N ≤ 10000) e M ( 0 ≤ M ≤ 10000).",
        "titulo": "Jogo Esperto",
        "descricao": "Enquanto Bino descansava, inventou um jogo esperto. Dado um número N e um número M, Bino quer saber qual a quantidade mínima de operações para converter N em M. Existe seis operações permitidas. Operação 1: N = N*2 Operação 2: N = N*3 Operação 3: N = N/2 Operação 4: N = N/3 Operação 5: N = N+7 Operação 6: N = N-7"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1704",
        "saida": "Para cada teste imprima uma única linha representando a menor quantidade de dinheiro perdida.",
        "entrada": "A entrada é composta por diversos casos teste e termina com o final do arquivo. Cada um descreve uma lista de tarefas e começa com dois inteiros N (1 ≤ N) e H (H ≤ 1000), o número de tarefas e a quantidade de horas disponível do computador, respectivamente. As próximas N linhas contém cada uma v (1 ≤v ≤ 1000) e t (1 ≤ t ≤ H) como descrito acima.",
        "titulo": "Arrumando as Tarefas",
        "descricao": "Você trabalha para uma empresa muito grande e que tem uma cultura move-fast. Hoje, um dos seus colegas ficou doente e você precisa repor o trabalho dele. Seu chefe disse que você tem apenas um computador para realizar algumas tarefas. Cada uma delas dá v de lucro e deve ser terminada até t horas a partir de agora. Após esse tempo, não pode ser mais realizada e não possui nenhum valor. O computador realiza exatamente uma tarefa por hora. Você deseja impressionar o seu chefe e assim ganhar uma promoção. Para isso, você pretende usar suas habilidades de programador e selecionar quais tarefas executar de tal forma a minimizar a quantidade de dinheiro perdida."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1633",
        "saida": "Para cada caso de teste, imprima o valor inteiro que representa a soma, para todos os processos, do tempo, em ciclos de processamento, que cada processo espera até entrar em execução. Por favor, note que este valor pode não caber em 32 bits.",
        "entrada": "A entrada é composta por vários casos de teste. A primeira linha de cada caso de teste consiste de um único inteiro N (1 ≤ N ≤ 105), o qual representa o número de processos que requisitaram sua execução ao SBC. Cada uma das N linhas seguintes corresponde, então, a um processo e é formada por dois inteiros t e c (1 ≤ t, c ≤ 103), os quais representavam respectivamente o tempo do sistema em que o processo fez sua requisição e o número de ciclos de processamento que durará a execução do processo. Considere que o tempo do sistema é contado em ciclos de processamento e que o contador começa em 1 em cada caso de teste. Considere ainda que a entrada é finalizada em fim de arquivo.",
        "titulo": "SBC",
        "descricao": "A Federação dos Apagadores e Celulares Esquisitos (FACE) assinou recentemente um contrato com o Governo Federal para desenvolver um telefone celular de baixo custo que será distribuído gratuitamente a populações de baixa renda. Apesar de simples, o aparelho contará com uma série de aplicativos, a fim de que as pessoas possam desfrutar de todas as facilidades que as plataformas móveis proporcionam. Um desafio, contudo, está intrigando os programadores da FACE: o aparelho não dispõe de muitos recursos de hardware, e os programadores estão tendo dificuldades em escrever o módulo que gerenciará os processos do sistema operacional SBC (Sistema Bonito para Celulares), desenvolvido especialmente para a arquitetura. Os programadores receberam dos analistas as seguintes diretivas, as quais precisam ser rigorosamente seguidas: O sistema executa apenas um processo por vez, e cada processo até o fim. O sistema jamais pode ficar ocioso se há processos esperando para serem atendidos. Para que um processo não trave o sistema, cada processo, quando requisita sua execução, deve informar ao sistema o tempo exato, em ciclos de processamento, que sua execução durará. O sistema jamais permite que a execução de um processo dure mais que o tempo previsto, abortando-a se necessário. Ainda, se um processo se encerra antes do informado, o sistema aproveita os ciclos restantes para rotinas de coleta de dados e comunicação com o Governo. Dessarte, para todos os efeitos, a execução de um processo que informou precisar de c ciclos dura sempre exatos c ciclos. O sistema garante que é mínima a soma, para todos os processos, do tempo que cada processo espera até entrar em execução. Ajude a FACE a completar o SBC escrevendo o módulo que falta!"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1701",
        "saida": "Para cada caso teste você deve imprimir um número, a soma dos N primeiros elementos da sequência de Fibo. Esse número pode ser muito grande, então você deve imprimi-lo MOD 1000000007.",
        "entrada": "A entra contém diversos casos testes. Cada caso teste contém três inteiros, A, B e N (1 <= A, B, N <= 1000000000), os significados foram explicados acima. A entrada termina com três zeros.",
        "titulo": "Sequência de Fibo",
        "descricao": "Fibo é um grande fã de números, especialmente números grandes. Ele ama sequências que crescem rápido, sua favorita é a tão famosa: sequência de Fibonacci. Um dia ele decidiu criar uma nova sequência usando a sua favorita. Sua nova sequência é criada multiplicando números consecutivos da sequência de Fibonacci. A partir de números de Fibonacci de índices A e B. O primeiro elemento de sua nova sequência será o número de fibonacci de índice A multiplicado pelo número de Fibonacci de índice B, o segundo número é o número de Fibonacci de índice A+1 multiplicado pelo número de Fibonacci de índice B+1 e assim por diante. Ele sabe como obter cada elemento dessa nova sequência eficientemente, mas ele gostaria de calcular outra coisa. Ele gostaria de calcular a soma dos N primeiros números de sua nova sequência.Você pode ajudá-lo? Obs: Fibonnaci(0) = 0 e Fibonnaci(1) = 1"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1740",
        "saida": "O programa deve imprimir uma linha por pergunta do tipo 4 (“4 X Y”), respondendo se a sequência A[X...Y] é NON INCREASING, NON DECREASING, ALL EQUAL ou NONE como explicado acima.",
        "entrada": "A entrada contém diversos casos testes e termina com o fim de arquivo. A primeira linha de cada caso teste começa com um inteiro N (1 ≤ N ≤ 104,) o número de elementos na sequência inicial. Na próxima linha tem N inteiros |A[i]| ≤ 109 (1 ≤ i ≤ N). A próxima linha contém um inteiro Q (1 ≤ Q ≤ 105), o número de operações que devem ser executadas. As próximas Q linhas são as operações.",
        "titulo": "Está Ordenado?",
        "descricao": "Chavaska gosta de jogar com sequência de inteiros. Ele tem uma sequência A que contém N inteiros que ele modifica e analisa. Particularmente ele está interessado na ordem de algumas sequências contíguas. Ele explicou a Kabralouco como ele está se divertido e lhe convidou para jogar. Kabralouco quer jogar, mas como ele não consegue pensar tão rápido como Chavaska e não gosta de ficar atrás, ele decidiu roubar e agora esté te pedindo para ajudá-li criando um programa que pode realizar as seguintes operações 0 X Y – Troca os elementos X e Y. 1 X Y – Troca o valor do elemento na posição X por Y. 2 X Y – Insere o elemento Y na posição X. 3 X – Remove o elemento na posição X X. 4 X Y – Pergunta a estrutura dos elementos A[X..Y] e as respostas devem ser: “ALL EQUAL” – Se A[i] = A[i+1] para todo i em [X,Y −1] “NON DECREASING” – Se A[i] ≤ A[i+1] para todo i em [X,Y−1] e A[i] ≠ A[i+1] para algum i em [X,Y−1] “NONINCREASING” – Se A[i] ≥ A[i+1] para todo i em [X,Y−1] e A[i] ≠ A[i+1] para algum i em [X,Y−1] “NONE” – Se nenhum dos casos acontecem."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1088",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, com o nome do vencedor, igual a Carlos ou Marcelo., sem espaços em branco.",
        "entrada": "A entrada contém vários casos de teste. Os dados de cada caso de teste estão numa única linha, e são inteiros separados por um espaço em branco. Cada linha contém um inteiroN (2 ≤ N ≤ 105), seguido da seqüência inicial P = (X1, X2, ...,XN) de N inteiros distintos dois a dois, onde1 ≤ Xi ≤ N para 1 ≤ i ≤ N. O final da entrada é indicado por uma linha que contém apenas o número zero.",
        "titulo": "Bolhas e Baldes",
        "descricao": "Andrea, Carlos e Marcelo são muito amigos e passam todos os finais de semana à beira da piscina. Enquanto Andrea se bronzeia ao sol, os dois ficam jogando Bolhas. Andrea, uma cientista da computação muito esperta, já disse a eles que não entende por que passam tanto tempo jogando um jogo tão primário. Usando o computador portátil dela, os dois geram um inteiro aleatório N e uma seqüência de inteiros, também aleatória, que é uma permutação de 1, 2, . . . ,N. O jogo então começa, cada jogador faz um movimento, e a jogada passa para o outro jogador. Marcelo é sempre o primeiro a começar a jogar. Um movimento de um jogador consiste na escolha de um par de elementos consecutivos da seqüência que estejam fora de ordem e em inverter a ordem dos dois elementos. Por exemplo, dada a seqüência 1, 5, 3, 4, 2, o jogador pode inverter as posições de 5 e 3 ou de 4 e 2, mas não pode inverter as posições de 3 e 4, nem de 5 e 2. Continuando com o exemplo, se o jogador decide inverter as posições de 5 e 3 então a nova seqüência será 1, 3, 5, 4, 2. Mais cedo ou mais tarde, a seqüência ficará ordenada. Perde o jogador impossibilitado de fazer um movimento. Andrea, com algum desdém, sempre diz que seria mais simples jogar cara ou coroa, com o mesmo efeito. Sua missão, caso decida aceitá-la, é determinar quem ganha o jogo, dada a seqüência inicial."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1236",
        "saida": "Cada linha de entrada deve produzir uma linha de saída que é a compactação da linha de entrada, conforme exemplo abaixo.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém um valor N que indica a quantidade de casos de teste. Cada caso de teste contém uma linha com até 2000 caracteres para serem compactados.",
        "titulo": "Compactação de Nulos e Brancos",
        "descricao": "O Professor Francisco solicitou sua ajuda para compactar alguns arquivos de texto que ele possui. Como os arquivos basicamente possuem muito espaço em branco e valores nulos (0), o compactador deve ser algo bem simples. O texto somente contém letras do alfabeto, espaços e números. Para simplificar, vamos considerar o $ como símbolo para compactação de espaços em branco e o # como símbolo para compactação de zeros. Só lembre de 2 detalhes: É o caractere da tabela AscII correspondente à frequência que deve ser gravado, e não o número decimal. caso apareça mais do que 255 caracteres seguidos de nulos ou brancos, a gravação deverá ser feita em mais do que um bloco. Por exemplo, para compactar 380 zeros seguidos, o primeiro bloco compacta as 255 ocorrências e o segundo bloco as 125 restantes, e assim por diante. O resultado seria \"# #}\". Note que o caractere 255 é invisível (aparece como se fosse um espaço em branco). Para você entender um pouco melhor a entrada e a saída, considere a tabela ASCII abaixo: Por exemplo CHR(3) equivale ao “ETX” Observações: Não compactar quando ocorrerem apenas dois zeros ou apenas dois espaços seguidos (\"*00*\" ou \"*  *\"), pois a compactação não teria efeito. o nosso toolkit pode não mostrar alguns caracteres especiais exigidos no output deste problema."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2018",
        "saida": "Como saída, deve ser impresso o quadro de medalhas das Olimpíadas de Natal. A primeira linha contém a informação \"Quadro de Medalhas\". Cada uma das próximas linhas conterá o nome de um país seguido pelo respectivo número de medalhas de ouro, prata e bronze que este país conquistou, separadas por um espaço em branco. O critério de desempate é, na ordem, o número de medalhas de ouro seguido pelo número de medalhas de prata e de bronze. Se países empatarem nestes três critérios, a listagem será por ordem ascendente do nome do país participante.",
        "entrada": "A entrada contem um unico caso de teste que consiste em uma relacao com o resultado de todas as provas realizadas nas Olimpíadas de Natal. Cada prova ou modalidade contém quatro linhas de informação: a primeira linha contém a descrição da prova, a segunda linha contém o país que ficou campeão nesta modalidade, a terceira linha contém o país vice-campeão e a última linha contém o país que ficou com a medalha de bronze na referida prova. O final da entrada é determinado por EOF.",
        "titulo": "Olimpíadas de Natal",
        "descricao": "Segundo a tradição, as provas das Olimpíadas de Natal são muito interessantes e diferentes. Dentre as provas existentes, podemos citar por exemplo, o levantamento de saco de brinquedos, a escalada de pinheiros, o hipismo com renas, o arremesso de duendes (com e sem o consentimento deles - esse segundo é mais perigoso) e o tempo de mergulho em buraco no gelo sem equipamentos, entre outros. Parte do melhoramento da competição proposto por Noel para este ano sera a disponibilização do quadro de medalhas dos países participantes através de um placar eletrônico. Você foi convidado para viajar até as montanhas de Korvatunturi na Lapônia, Finlândia, aonde será a sede destes jogos, para, à partir de uma relação das provas e os países vencedores, desenvolver o sistema para este placar. Serão quase trezentos países participantes e até 1000 modalidades de provas, no máximo."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2071",
        "saida": "Para cada instância seu programa deve produzir Q linhas na saída, sendo uma para cada consulta. Cada uma dessas linhas deve conter dois inteiros: o primeiro representa a soma do intervalo com maior soma, e o segundo, o número de elementos desse intervalo. Caso haja mais de um intervalo com maior soma, imprima o número de elementos naquele com maior número de elementos.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N, indicando o número de contas no Banco do Faraó, onde 1 ≤ N ≤ 100 000. A segunda linha de cada instância contém N inteiros, entre -10 000 até 10 000, indicando os saldos nas contas dos correntistas. A terceira linha contém um inteiro Q, onde 1 ≤ Q ≤ 100 000, indicando o número de consultas que serão feitas. Cada uma das Q linhas seguintes contém dois inteiros A e B, onde 1 ≤ A, B ≤ N, indicando o intervalo que deve ser consultado.",
        "titulo": "Banco do Faraó",
        "descricao": "Pouca gente sabe, mas foi no Antigo Egito que surgiram os primeiros bancos, de uma forma muito semelhante ao que conhecemos hoje. O principal banco era do faraó, que decidia, de tempos em tempos, tomar para o Estado o conteúdo de algumas contas. Isso ocorria da seguinte forma. Dado N, o número de correntistas do Banco do Faraó (era esse o nome do banco), cada conta podia ter uma quantia em menés (moeda do Antigo Egito) que podia ser, inclusive, negativa (indicando que a pessoa devia aquela quantia ao banco), ou seja, o estado de cada conta era um inteiro ai. O objetivo do faraó era fazer diversas consultas nas contas de seus súditos. Dado um intervalo [A;B] (correspondente as contas aA; aA+1; ... ; aB-1; aB) o faraó desejava encontrar um subintervalo de soma máxima, ou seja, cujo sequestro pelo Estado renderia ao Faraó a maior quantia de dinheiro. Isso era explicado aos correntistas como sendo uma oferenda a Amon-Ahcid, o Deus egípcio do dinheiro. Fazendo regularmente tais oferendas o deus ficava satisfeito e permitia que o sistema econômico funcionasse perfeitamente. Isso durou surpreendentemente mais de 500 anos, até que num desses sequestros os correntistas se rebelaram, tomaram o palácio e mataram o faraó. O banco foi saqueado e o sistema ruiu. Só se ouviu falar de bancos novamente centenas de anos depois. Sua tarefa é dado um registro de contas e uma série de consultas, determinar para cada consulta um intervalo de soma máxima."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1405",
        "saida": "Para cada caso de teste, seu programa deve produzir uma linha contendo um inteiro que representa o valor de saída (retorno) para a entrada N dada, ou um asterisco (*) no caso de o programa nunca terminar.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste se inicia com dois inteiros, L e N, representando respectivamente o número de linhas do programa (1 ≤ L ≤ 100) e o valor do parâmetro de entrada do programa (0 ≤ N ≤ 100). As L linhas seguintes contêm o programa. Pode-se assumir que ele está sempre sintaticamente correto de acordo com as regras definidas acima. Todos os comandos (bem como o nome das variáveis) só conterão letras maiúsculas. O final da entrada é marcado pelo caso em que L = N = 0 e não deve ser processado.",
        "titulo": "O Problema da Parada",
        "descricao": "O Problema da Parada (The Halting Problem) é um problema de decisão clássico da Ciência da Computação que consiste, basicamente, em determinar se um dado programa sempre vai parar (ou seja, terminar sua execução) para uma dada entrada arbitrária ou se vai executar infinitivamente. Alan Turing provou, em 1936, que é impossível resolver o problema da parada generalizando para qualquer par programa-entrada. Neste problema, porém, dada a descrição de uma linguagem simples, um programa escrito nessa linguagem e uma entrada para esse programa, você deve determinar se o programa dado pára com a entrada dada e, em caso positivo, qual a saída produzida. Esta linguagem só trabalha com números inteiros de 0 a 999 (inclusive). Sendo assim, o sucessor de 999 é 0, e o antecessor de 0 é 999. Além disso, ela possui dez variáveis (R0 a R9), sendo que a R0 sempre é atribuído o valor de chamada do programa (ou seja, o parâmetro de entrada) e a R9 é sempre atribuído o valor de saída (o retorno). No início da execução do programa, é atribuído o valor 0 a todas as variáveis, com exceção de R0 que recebe o parâmetro de entrada. As operações básicas são atribuição (MOV), soma (ADD), subtração (SUB), multiplicação (MUL), divisão inteira (DIV) e resto da divisão inteira (MOD). Todas essas operações têm a sintaxe COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde COMANDO é uma dessas operações, OPERANDO1 é uma das 10 variáveis (R0 a R9) e OPERANDO2 pode ser uma das 10 variáveis ou um valor inteiro (entre 0 e 999). Todas as operações modificam o valor de OPERANDO1, sendo assim MOV R4,100 é o equivalente a atribuir o valor 100 a R4, enquanto que MUL R3,R8 é o equivalente a multiplicar R3 por R8 e atribuir o resultado a R3. A operação DIV, assim como a MOD, retornam 0 (zero) se OPERANDO2 for 0 ou se a variável equivalente tiver valor 0. Ou seja, DIV R4,0 é o equivalente a MOV R4,0. Por divisão inteira, entendemos a parte inteira do quociente da divisão (sem a parte fracionária). Por exemplo, a divisão inteira de 7 por 2 é 3 (sendo o resto 1). Existem seis comandos de fluxo de decisão: IFEQ (se igual), IFNEQ (se diferente), IFG (se maior), IFL (se menor), IFGE (se maior ou igual) e IFLE (se menor ou igual). A sintaxe de todos eles é COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde OPERANDO1 e OPERANDO2 podem ser variáveis (R0 a R9) ou valores inteiros (entre 0 e 999). Assim, o comando IFEQ R4,123 é o equivalente a testar se R4 é igual a 123. Caso a condição testada seja verdadeira, o programa continua a executar normalmente a linha subsequente ao comando de decisão. Caso a condição seja falsa, o programa passa a executar a linha subsequente ao ENDIF mais próximo. Todos os comandos de decisão devem ter um comando ENDIF correspondente. Finalmente, existem os comandos CALL e RET, ambos com a sintaxe COMANDO OPERANDO, onde OPERANDO é uma variável (R0..R9) ou valor direto (entre 0 e 999). O comando CALL chama o próprio programa novamente, passando OPERANDO como parâmetro de entrada, ou seja, atribuindo o valor de OPERANDO à variavel R0. Já RET termina a execução do programa, retornando o valor de OPERANDO como o resultado de saída. A última linha do programa sempre será um comando RET. Observe que, caso o programa chame a si mesmo através do comando CALL, quando a execução voltar, o valor de R9 vai estar alterado com o valor retornado pelo programa. Note também que todas as variáveis (R0..R9) são locais, ou seja, uma chamada subsequente ao programa não pode alterar os valores guardados nas variáveis da instância anterior, com exceção, naturalmente, do valor de R9 que recebe o retorno da instância chamada. O exemplo a seguir ilustra um programa que calcula o fatorial de um número. 1a linha: Verifica se o valor de R0 vale 0, caso positivo, executa a próxima linha, caso contrário, pula para a 4a linha (ENDIF mais próximo). 2a linha: Retorna 1 como saída do programa. 3a linha: Marca o fim do bloco de decisão iniciado na primeira linha. 4a linha: Atribui o valor de R0 a R1 (R1 ← R0). 5a linha: Diminui 1 de R1 (R1 ← R1 - 1). 6a linha: Chama o programa passando R1 como parâmetro de entrada. 7a linha: Guarda o valor de R9 (retornado pela chamada anterior) em R2 (R2 ← R9). 8a linha: Multiplica o valor de R2 por R0 (R2 ← R2 * R0). 9a linha: Retorna o valor de R2 como saída do programa. A tabela seguir traz um resumo dos comandos para referência:"
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1211",
        "saida": "Para cada caso de teste imprima uma linha informando o maior número possível de caracteres economizados por este processo.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada caso de teste contém um inteiro N, que informa o número de telefones na lista. As próximas N (1 ≤ N ≤ 105) linhas possuem, cada uma delas, um telefone Xi, de até 200 caracteres. Para um mesmo caso de teste os números de telefone têm a mesma quantidade de caracteres. Um número de telefone pode começar com o caracter ’0’.",
        "titulo": "Lista Telefônica Econômica",
        "descricao": "Devido ao grande número de reclamações, a companhia telefônica de São Petersburgo está sendo obrigada a investir pesado na melhora de seus serviços. Para isso a companhia decidiu diminuir o orçamento de alguns setores para aumentar o de outros mais essenciais. Um dos setores que terá seu orçamento reduzido é o de impressão de listas telefônicas. Com um orçamento reduzido, o setor de impressão de listas telefônicas não consegue comprar toner suficiente para imprimir as listas completas. Como os números de telefone são impressos alinhados na vertical, foi sugerida a seguinte solução: a partir do segundo número de telefone impresso, os dígitos iniciais do próximo número a ser impresso que coincidirem com os do número acima são omitidos, ficando apenas um espaço em branco. Por exemplo, para os números 535456, 535488, 536566 e 835456 a impressão é a seguinte: 5 3 5 4 5 6         8 8     6 5 6 6 8 3 5 4 5 6 Note que esta impressão economizou a impressão de 6 caracteres. A companhia telefonica cogitou também não imprimir os sufixos repetidos, mas nos testes feitos viram que a resposta não foi boa para o usuário e decidiram, portanto, fazer apenas a eliminação em prefixos. Para saber se a economia será suficiente, o setor de impressão quer saber o número máximo de caracteres que podem ser omitidos. No entanto, como em qualquer cidade grande, são vários os números telefônicos e eles não querem gastar homens-hora para calcular manualmente este valor. Então cabe a você, novo empregado da companhia, automatizar a economia feita pelo toner, no número de caracteres."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1535",
        "saida": "Se houver apenas um único número N em uma única linha, imprima dois números inteiros não negativos a e b, tal que a * a - b * b = N. Se o número não pode ser expresso em tal formato, então imprima a mensagem “Bachelor Number.” em uma única linha caso esse número seja par e imprima a mensagem “Spinster Number.” caso esse número seja ímpar. Se existirem dois números n1 e n2 na entrada então imprima quantos números \"bachelor\" estão entre n1 e n2 (incluindo n1 e n2). Observe que (n1 ≤ n2 e (n2 - n1) ≤ 1000000).",
        "entrada": "Cada conjunto de entrada é dado por uma única linha. Cada conjunto de entrada pode conter um ou dois números inteiros de 32 bits com sinal. A entrada é terminada por EOF (Fim de Arquivo).",
        "titulo": "Números Casal-Solteirão-Solteirona",
        "descricao": "Pode qualquer número ser expresso como uma subtração de dois quadrados? Os números, que podem ser expressos de tal forma, são chamados de números \"square-couple\" ou, traduzindo, casal quadrado. Seu trabalho é descobrir: a) Se um número é um número casal quadrado.  b) Se o número for casal quadrado então encontre esse forma de expressá-lo. c) Descubra quantos números casal quadrado estão dentro de um determinado intervalo (incluindo os números das pontas)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1804",
        "saida": "Para cada linha \"? i\", imprima uma linha contendo o número de pessoas da excursão ainda remascentes atrás do buggy i naquele momento. Mas não seja bugueiro (nada de pôr bugs em seu código)!",
        "entrada": "Um inteiro N (1 ≤ N ≤ 105) constitui a primeira linha da entrada, o qual representa o número de buggies que deixaram o hotel. A segunda linha da entrada é constituída por N inteiros pi (1 ≤ pi ≤ 5, 1 ≤ i ≤ N), cada um representando o número de pessoas no buggy i (incluindo o bugueiro). Cada uma das linhas seguintes pode ser constituída: por um caractere 'a' seguido de um inteiro i (1 ≤ i ≤ N), o qual caracteriza a abdução do buggy i (que ainda não havia sido abduzido); por um caractere '?' seguido de um inteiro i (1 ≤ i ≤ N), o qual caracteriza que, naquele momento, o bugueiro do (ainda) não abduzido buggy i gostaria de saber quantas pessoas da excursão restavam atrás do seu buggy. Considere que o identificador i de um buggy não muda. Assim, o terceiro buggy a deixar o hotel deverá sempre ser identificado pelo inteiro 3, mesmo que os buggies 1 e 2 sejam abduzidos.",
        "titulo": "Precisa-se de Matemáticos em Marte",
        "descricao": "Aconteceu na semana passada em Beberibe, CE, o VIII Latin-American Algorithms, Graphs and Optimisation Symposium (LAGOS 2015), uma conferência que reuniu matemáticos e cientistas da Computação do mundo todo para discutirem alguns desafios computacionais. A fim de que os participantes pudessem relaxar um pouco, os organizadores do evento contrataram buggies para levar os pesquisadores a alguns pontos turísticos da região. Os buggies saíram do hotel numa fila, um atrás do outro. Quem conhece os passeios de buggy do Ceará sabe que o turista pode pedir ao bugueiro um passeio com emoção ou sem emoção. No entanto, a excursão do LAGOS contou com uma emoção extra. Como em Marte atualmente há uma carência de pesquisadores em Algoritmos, Grafos e Otimização, alienígenas marcianos começaram a abduzir alguns buggies, com todas as pessoas a bordo (inclusive o pobre bugueiro, que nada tinha a ver com a história). Foi muito triste nosso planeta ter perdido mentes tão brilhantes para Marte, mas a tragédia teria sido menor se cada bugueiro mantivesse atualizada a informação de quantas pessoas no total estavam nos buggies atrás dele — assim ele poderia perceber a aproximação da sonda alienígena e acelerar o buggy."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1022",
        "saida": "A saída consiste em um valor racional, seguido de um sinal de igualdade e outro valor racional, que é a simplificação do primeiro valor. No caso do primeiro valor não poder ser simplificado, o mesmo deve ser repetido após o sinal de igualdade.",
        "entrada": "A entrada contem vários casos de teste. A primeira linha de cada caso de teste contem um inteiro N (1 ≤ N ≤ 1*104), indicando a quantidade de casos de teste que devem ser lidos logo a seguir. Cada caso de teste contém um valor racional X (1 ≤ X ≤ 1000), uma operação (-, +, * ou /) e outro valor racional Y (1 ≤ Y ≤ 1000).",
        "titulo": "TDA Racional",
        "descricao": "A tarefa aqui neste problema é ler uma expressão matemática na forma de dois números Racionais (numerador / denominador) e apresentar o resultado da operação. Cada operando ou operador é separado por um espaço em branco. A sequência de cada linha que contém a expressão a ser lida é: número, caractere, número, caractere, número, caractere, número. A resposta deverá ser apresentada e posteriormente simplificada. Deverá então ser apresentado o sinal de igualdade e em seguida a resposta simplificada. No caso de não ser possível uma simplificação, deve ser apresentada a mesma resposta após o sinal de igualdade. Considerando N1 e D1 como numerador e denominador da primeira fração, segue a orientação de como deverá ser realizada cada uma das operações: Soma: (N1*D2 + N2*D1) / (D1*D2) Subtração: (N1*D2 - N2*D1) / (D1*D2) Multiplicação: (N1*N2) / (D1*D2) Divisão: (N1/D1) / (N2/D2), ou seja (N1*D2)/(N2*D1)"
    },
    {
        "nivel": "5",
        "assunto": "4",
        "numero": "1301",
        "saida": "Para cada caso de teste imprima uma linha com uma string que representa o resultado de todos os comandos de produto do caso de teste. O caracte i da string representa o resultado do enésimo (i-th) comando de produto. Se o resultado do comando for positivo, o caractere deve ser '+' (mais), se o resultado for negativo, o caractere deve ser '-' (menos), se o resultado é zero, o caractere deve ser '0' (zero) .",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros N e K respectivamente, indicando o número de elementos na seqüência e o número de rodadas do jogo (1 ≤ N, K ≤ 105). A segunda linha contém N inteiros Xi que representam os valores iniciais da sequência (-100 ≤ Xi ≤ 100 para i = 1, 2, ..., N). Cada uma das próximas K linhas descreve um comando e começa com uma letra maiúscula 'C' ou 'P'. Se a letra é 'C', a linha descreve um comando de mudança, e a letra é seguida por dois inteiros I e V,indicando que os XI devem receber o valor V (1 ≤ I ≤ N e -100 ≤ V ≤ 100). Se a letra for 'P', a linha de comando descreve um produto, e a letra é seguida por dois números inteiros I e J, indicando que o produto a partir de XI até XJ, inclusive deve ser calculado (1 ≤ I ≤ J ≤ N). Dentro de cada teste há pelo menos um comando de produto.",
        "titulo": "Produto do Intervalo",
        "descricao": "É normal sentir-se preocupado e tenso o dia antes de uma competição de programação. Para relaxar, você saiu para beber com alguns amigos em um pub. Para manter sua mente afiada para o dia seguinte, você decidiu jogar o seguinte jogo. Para começar, seus amigos vão dar-lhe uma seqüência de N inteiros X1, X2, ..., XN. Em seguida, haverá K rodadas; a cada rodada, seus amigos vão emitir um comando, que pode ser: um comando de alteração, quando seus amigos querem mudar um dos valores na seqüência, ou um comando de produto, quando seus amigos lhe dar dois valores I, J e perguntar-lhe se o produto XI x XI+1 x ... x XJ-1 x XJ é positivo, negativo ou zero. ​ Uma vez que você está em um pub, foi decidido que a pena para uma resposta errada é beber um copo de cerveja. Você está preocupado como isso poderia afetá-lo negativamente na competição do dia seguinte, e você não quer verificar se a teoria do pico de Ballmer é correta. Felizmente, seus amigos lhe deram o direito de usar o seu notebook. Uma vez que você confia mais nas suas habilidades de codificação do que na sua matemática, você decidiu escrever um programa que o ajudasse no jogo."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1874",
        "saida": "Para cada caso de teste, imprima as pilhas após a inserção dos novos blocos. Em alguns casos, a fila de novos blocos será mais que suficiente para que todas as pilhas fiquem do mesmo tamanho. Neste caso, desconsidere os blocos que sobrarem na fila.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste terá 3 números inteiros, H, P e F, indicando a altura da pilha mais a direita , a quantidade de pilhas de blocos e o tamanho da fila de blocos a ser inserida. Após isto, serão lidos H linhas com P valores, com valores 1, representando onde tem bloco, e 0, representando onde não tem bloco. A seguir, será lida uma linha com F valores, representando a fila com os blocos novos. O último caso de teste é representado por três zeros, e não deverá ser processado.",
        "titulo": "Empurrando Blocos",
        "descricao": "A Empresa Blocos Regulares Inventando Serventia de Algo, mais conhecida como BRISA, construi blocos, sempre do mesmo tamanho. Um detalhe que chama a atenção está na forma em que os blocos são armazenados em estoque, depois de fabricados. Os mesmos são formados por uma fileira de pilhas. A retirada de uma caixa do estoque é um tanto quando desordenado, pois se escolhe uma pilha aleatoriamente e retira-se algum bloco do topo dela. Porém, a forma de armazenamento é um tanto quanto interessante: uma esteira, localizada na reta do topo da pilha mais à direita do estoque, é utilizada. Com isto, forma-se uma fila com os novos blocos. A esteira roda da direita para a esquerda. Assim que houver um espaço vago em uma das pilhas seguintes, o bloco será inserido na mesma, caso não haja, ele vai avançando até as pilhas seguintes. Segue abaixo um exemplo de inserção de blocos."
    },
    {
        "nivel": "6",
        "assunto": "4",
        "numero": "1388",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha na saída, contendo uma permutação dos números {1, 2, ..., N}, que quando ordenada usando bubblesort produz o mesmo número de intercâmbios no mesmo número de turnos especificados na entrada. Ao imprimir a permutação, deixe um espaço em branco entre dois elementos consecutivos. Se mais de uma permutação existir, imprima a maior na ordem lexicográfica padrão para sequências de números (a ordem lexicográfica da permutação a1, a2, ..., aN é maior do que a da permutação b1, b2, ..., bN se para algum 1 ≤ i ≤ N temos ai > bi e o prefixo a1, a2, ..., ai-1 é igual ao prefixo b1, b2, ..., bi-1). Em outras palavras, caso exista mais de uma solução, imprima aquela onde o primeiro elemento da permutação é o maior possível. Caso exista mais de uma solução satisfazendo essa restrição, imprima, dentre estas, aquela onde o segundo elemento é o maior possível. Caso exista mais de uma solução satisfazendo as duas restrições anteriores, imprima, dentre estas, a solução onde o terceiro elemento é o maior possível, e assim sucessivamente. Para toda entrada haverá pelo menos uma permutação solução.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M que indicam respectivamente o número de elementos (1 ≤ N ≤ 100.000) na sequência que está sendo ordenada, e o número de turnos (0 ≤ M ≤ 100.000) necessários para ordenar a sequência usando bubblesort. A segunda linha de um caso de teste contém M inteiros Xi, indicando o número de intercâmbios em cada turno i (1 ≤ Xi ≤ N - 1, para 1 ≤ i ≤ M). O final da entrada é indicado por N = M = 0.",
        "titulo": "Onde Estão as Bolhas?",
        "descricao": "Uma das operações mais frequentes em computação é ordenar uma sequência de objetos. Portanto, não é surpreendente que essa operação seja também uma das mais estudadas. Um algoritmo bem simples para ordenação é chamado Bubblesort. Ele consiste de vários turnos. A cada turno o algoritmo simplesmente itera sobre a sequência trocando de posição dois elementos consecutivos se eles estiverem fora de ordem. O algoritmo termina quando nenhum elemento trocou de posição em um turno. O nome Bubblesort (ordenação das bolhas) deriva do fato de que elementos menores (\"mais leves\") movem-se na direção de suas posições finais na sequência ordenada (movem-se na direção do início da sequência) durante os turnos, como bolhas na água. A figura abaixo mostra uma implementação do algoritmo em pseudocódigo: Para i variando de 1 até N faça   Para j variando de N - 1 a i faça     Se seq [j - 1]> seq [j] então       Intercambie os elementos seq[j - 1] e seq[j]     Fim-Se   Fim-Para   Se nenhum elemento trocou de lugar então     Final do algoritmo   Fim-Se Fim-Para Por exemplo, ao ordenar a sequência [5, 4, 3, 2, 1] usando o algoritmo acima, quatro turnos são necessários. No primeiro turno ocorrem quatro intercâmbios: 1 x 2, 1 x 3, 1 x 4 e 1 x 5; no segundo turno ocorrem três intercâmbios: 2 x 3, 2 x 4 e 2 x 5; no terceiro turno ocorrem dois intercâmbios: 3 x 4 e 3 x 5; no quarto turno ocorre um intercâmbio: 4 x 5; no quinto turno nenhum intercâmbio ocorre e o algoritmo termina. Embora simples de entender, provar correto e implementar, o algoritmo bubblesort é muito ineficiente: o número de comparações entre elementos durante sua execução é, em média, diretamente proporcional a N2, onde N é o número de elementos na sequência. Você foi requisitado para fazer uma \"engenharia reversa\" no bubblesort, ou seja, dados o comprimento da sequência, o número de turnos necessários para a ordenação e o número de intercâmbios ocorridos em cada turno, seu programa deve descobrir uma possível sequência que, quando ordenada, produza exatamente o mesmo número de intercâmbios nos turnos."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2186",
        "saida": "Para cada operação 1, imprima uma única linha contendo a quantidade de ocorrências do caractere C no intervalo entre as posições A e B. Para cada operação 2, imprima a primeira e a última ocorrência do caractere C no intervalo entre as posições A e B. Caso não exista o caractere C no intervalo, imprima -1. Ao final das N operações, imprima a string resultante das operações.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros L ( 1 ≤ L ≤  106) e N ( 1 ≤ N ≤  105), representando a quantidade de letras que formam inicialmente o nome S, e a quantidade de rodas, respectivamente. A segunda linha contém uma string S, representando o nome inicial do cachorro de Prant. Então, seguiram N linhas, representando as N operações realizadas. É garantido que a string S contém apenas letras minúsculas do alfabeto.",
        "titulo": "Bino, Prant e a Indecisao",
        "descricao": "Como você já deve saber, Prant é um garoto muito indeciso, de tal modo que foi muito difícil escolher o nome do seu cachorro. Depois de Prant escolher o nome S para seu cachorro, Bino propôs um desafio.  O desafio de Bino consiste em N rodadas, e em cada rodada pode ser realizada uma das seguintes operações sobre o nome S: 1 A B C: Retornar a quantidade de ocorrências de um caractere C no intervalo entre as posições A e B. Por exemplo, para S = “abcda”, A = 1, B = 5 e C = ‘a’, a resposta é 2. 2 A B C: Encontrar a primeira e a última ocorrência de um caractere C no intervalo entre as posições A e B. Por exemplo, para S = “abcda”, A = 1, B = 5 e C = ‘a’, a primeira ocorrência de C é na posição 1, e a última é na posição 5. 3 A B: Inverter todas as letras no intervalo entre as posições A e B. Por exemplo, para S = “abcd”, A = 2 e B = 4, após a operação, S = “adcb”. 4 A C: Adicionar um caractere C antes o caractere da posição A. Por exemplo, para S = “abcd”, A = 2 e C = ‘z’, após a operação, S = “azbcd”."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2064",
        "saida": "A saída deve ser composta de duas linhas. A primeira linha deve conter um inteiro V que representa o maior número de letras favoritas presente no nome que deve ser escolhido por Prant. A segunda linha deve conter o nome que dever ser escolhido (se houver mais de uma resposta imprima o primeiro nome gerado por Prant que contém V letras favoritas).",
        "entrada": "A primeira linha da entrada é composta por 3 inteiros: k, m, n (1 ≤ k ≤ 26, 1 ≤ m, n ≤ 100 000). Nas próximas duas linhas haverá duas strings, compostas apenas de letras minúsculas, de tamanho k e m respectivamente. A primeira string é composta por letras não repetidas e representa as letras favoritas de Prant. Já a segunda string é o nome inicial do cão de Prant (o primeiro nome que Prant havia pensado). As próximas n linhas são compostas de dois caracteres a e b que representam as letras envolvidas em cada operação de troca de letras.",
        "titulo": "Prant e a Indecisão",
        "descricao": "Prant é garoto muito indeciso, qualquer tipo de escolha é uma tarefa muito difícil e estressante para o menino. Porém recentemente Prant ganhou um cachorro e tem que escolher um nome para seu novo mascote. Ele tem um nome em mente, mas por ser muito indeciso de tempos em tempos Prant realiza uma operação de troca de letras, em que ele escolhe duas letras, A e B, e todas as letras A viram B e todas letras B viram A, assim trocando o nome de seu cachorro. É possível que alguma letra (A ou B) não esteja na palavra e ainda que A e B sejam a mesma letra, porque Prant fica muito nervoso ao fazer as operações. Para tomar uma decisão Prant sorteou algumas letras e as definiu como sendo suas letras favoritas (afinal Prant é muito indeciso, como ele iria escolher tais letras se não de maneira aleatória?) de modo que a melhor escolha de nome é a palavra que possui o maior número de letras favoritas. O problema é que Prant, devido ao nevorsimo, não consegue raciocinar na hora de definir as trocas de letras para formar o melhor nome possível, então ele continua fazendo trocas possivelmente ilógicas e assim alterando o nome do cão. Por exemplo se as letras fatoritas de Prant são {a, e, i, o, u}, o nome inicial do cão é \"abccdab\" com 2 letras favoritas e Prant realiza as seguintes operações de troca: troca(c, e), assim \"abccdab\" -> \"abeedab\", e agora o nome do cão é \"abeedab\" com 4 letras favoritas troca(b, i), assim \"abeedab\" -> \"aieedai\", e agora o nome do cão é \"aieedai\" com 6 letras favoritas troca(a, f), assim \"aieedai\" -> \"fieedfi\", e agora o nome do cão é \"fieedfi\" com 4 letras favoritas troca(d, h), assim \"fieedfi\" -> \"fieehfi\", e agora o nome do cão é \"fieehfi\" com 4 letras favoritas O melhor nome gerado durante as operações foi o nome \"aieedai\", pois foi o nome gerado com maior número de letras favoritas. Sua tarefa é, sabendo o nome inicial do cachorro de Prant, as letras favoritas de Prant e as operações por ele realizadas em ordem, definir qual foi o melhor nome gerado para o cãozinho. Perceba que manter o nome inicial é uma opção e que Prant sempre realiza as operações independetemente de serem lógicas ou não."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1762",
        "saida": "Na primeira linha de saída deverá ser informado o peso total de presentes da lista de pedidos, com duas casas após a vírgula. Na segunda linha será informado o número de trenós necessários para levar os presentes da lista de pedidos. Caso seja inserido na lista de pedidos um presente que não consta na lista do lote dos brinquedos, deverá ser impresso a seguinte mensagem “NAO LISTADO: ” seguido pelo nome do presente. Deixar uma linha em branco após a impressão de cada caso de teste.",
        "entrada": "A primeira linha contem um número inteiro Y correspondendo a o número de casos de testes, após você deverá informar um inteiro T (0 < T < 1000) que corresponde a o número de presentes do lote, após você deve ler a lista de presentes, uma string N com o nome do presente e um valor de ponto flutuante K (0 < K <= 100 ) que corresponde ao peso em quilogramas do presente, o nome e o peso devem ficar em linhas separadas. Após inserir todos os T presentes você deve informar um valor de ponto flutuante M (0 < M <= 100) que corresponde em quilogramas a capacidade de carga do trenó, considerar duas casas após a vírgula. Após inserir o valor M você deve informar a lista que contém X pedidos da seguinte forma, uma string P correspondendo ao nome do presente, na próxima linha um valor inteiro J (0 < J <= 100) que corresponde a quantidade desse presente. Essa lista só termina quando forem inseridos um \"-\" para o nome do presente e \"0\" para o peso do presente.",
        "titulo": "Trenós do Papai Noel",
        "descricao": "Todos os anos quando chega o natal, o Papai Noel tem a importante e difícil tarefa de entregar milhares de presentes a todas as crianças do mundo. O que ninguém sabe, é que ele desenvolveu uma maneira eficaz para conseguir entregar todos os presentes antes que o natal acabe, e essa maneira consiste numa infinidade de trenós espalhados pelo globo entregando simultaneamente todos os presentes. Dessa maneira fica muito mais fácil para completar as entregas, mas por conta de ser um número muito grande de presentes a ser entregue, o Papai Noel sempre tem dificuldades em saber quantos trenós ele disponibilizará para cada lote de presentes. Noel tem uma lista com o número de presentes de cada lote contendo o nome do presente e o seu peso, e ele também sabe a capacidade de carga de cada trenó. Sabendo essas informações, todo ano, Noel pede ajuda a um estudante para desenvolver um programa que possa ajuda-lo a saber quantos trenós serão necessários para cada lote. Sua tarefa é desenvolver um programa que armazene um número determinado de presentes de um lote, cada presente é armazenado com o nome do brinquedo e o seu respectivo peso em Quilogramas(considerar duas casas após a vírgula), depois de armazenar a lista, você irá informar a capacidade de carga do trenó, e após você deve informar a lista de pedidos, contendo o nome do presente e a sua quantidade, feito isso você deve calcular o peso total dos presentes e determinar quantos trenós serão necessários para efetuar a entrega."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1511",
        "saida": "Imprima todas as linhas de saída na sequência, para todos os casos de teste. Para cada query do tipo “QUERY x y d” deverá ser respondido na saida padrão o gcd (Greatest Common Divisor) de todas as posição que estão a uma distância manhattan de no máximo 'd' da posição do tabuleiro (x, y).",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. A primeira linha de cada caso de teste contém um inteiro Q (1 <= Q <= 105) que representa a quantidade de queries a serem feitas. As proximas Q linhas contém cada uma query, podendo ser dos seguintes tipos: SET x y d QUERY x y d 0 <= |x|, |y| <= 500 0 <= d <= 106",
        "titulo": "Tabuleiro GCD",
        "descricao": "Dado um grid infinito totalmente setado para o valor zero e Q queries dos tipos: SET x y d: Seta a posição (x,y) do tabuleiro para o valor d QUERY x y d: Retorna o gcd (Greatest Common Divisor) de todas as posições do tabuleiro que estão a uma distância de manhattan de no máximo d da posição (x,y)."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1259",
        "saida": "Apresente todos os valores lidos na entrada segundo a ordem apresentada acima. Cada número deve ser impresso em uma linha, conforme exemplo abaixo.",
        "entrada": "A primeira linha de entrada contém um único inteiro positivo N (1 < N < 105) Este é o número de linhas de entrada que vem logo a seguir. As próximas N linhas conterão, cada uma delas, um valor inteiro não negativo.",
        "titulo": "Pares e Ímpares",
        "descricao": "Considerando a entrada de valores inteiros não negativos, ordene estes valores segundo o seguinte critério: Primeiro os Pares Depois os Ímpares Sendo que deverão ser apresentados os pares em ordem crescente e depois os ímpares em ordem decrescente."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1673",
        "saida": "Cada linha da entrada é codificada separadamente como descrito acima. A nova linha no final de cada linha não é codificada, mas é passada diretamente para a saída.",
        "entrada": "A entrada consiste de letras(maiúsculas e minúsculas), digitos, espaços e pontuação. Toda linha é terminada com um caractere terminador de linha.",
        "titulo": "Codificação Run-length",
        "descricao": "Sua tarefa é escrever um programa que realiza uma simples Codificação Run-Length, como descrita nas regras abaixo. Qualquer sequencia entre 2 e 9 caracteres idênticos é codificada por dois caracteres. O primeiro caractere é a largura da sequência, representada por um dos caracteres entre 2 a 9. O segundo caractere é o valor do caractere repetido. Uma sequência de mais de 9 caracteres identicos repetidos é resolvida com primeiro codificando 9 caracteres, depois os caracteres restantes. Qualquer sequência de caracteres que não contém repetições consecutivas de qualquer caracteres é representada por um caractere '1' seguido da sequência de caracteres e terminado com outro '1'. Se um '1' aparecer como parte da sequencia, ele será terminado com um '1', tendo então dois caracteres '1' como saída."
    },
    {
        "nivel": "6",
        "assunto": "4",
        "numero": "1274",
        "saida": "Cada problema de projeto da P-Network na entrada deverá gerar uma única linha de saída. Se o problema não tem solução a saída deve ser No solution. Caso contrário, a linha deverá conter uma descrição de uma P-Network qualquer (com N fios e menos do que 4N2 cursos), que realiza o conjunto de transformações solicitado. A descrição é dada por um conjunto de valores M, s1, s2, . . . sM, em que os valores consecutivos são separados por um único espaço em branco. O valor de M é o tamanho da P-Network, isto é, o número de cursos. Os valores de s1, s2, . . . sM descrevem os cursos da P-Network; isto deve ser entendido como o i-ésimo curso da esquerda para a direita, que liga os fios si e 1 + si (1 ≤ i ≤ M). Observe que 0 ≤ M < 4N2 , enquanto 1 ≤ si < N para cada 1 ≤ i ≤ M.",
        "entrada": "A entrada tem um certo número de problemas de projeto da P-Network. Cada problema é descrito em apenas uma linha que contém os valores N, i1, i2,. . . iN, separados por um único espaço em branco. O valor de N é a ordem da P-Network desejada, isto é, o seu número de fios (1 ≤ N ≤ 20). Os valores i1, i2,. . . iN representam que a P-Network deve determinar o conjunto de transformações {1 → i1, 2 → i2,. . . N → iN} (1 ≤ ij ≤ N, para cada 1 ≤ j ≤ N). A entrada termina com uma linha com N = 0 e que não deve ser processada.",
        "titulo": "P-Networks",
        "descricao": "Pretty Networks Inc. é uma empresa que constrói alguns artefatos curiosos, cujo propósito é transformar um conjunto de valores de entrada de uma determinada maneira. A transformação é determinada por aquilo que eles chamam de uma P-Network. A imagem abaixo mostra um exemplo de uma P-Network. No caso geral, uma P-Network de ordem N e tamanho M, tem N fios horizontais numerados de 1, 2,. . . N, e M cursos verticais. Cada curso conecta dois fios consecutivos. Não há dois cursos diferentes tocando o mesmo ponto de nenhum fio e não há nenhum curso tocando o ponto mais à esquerda ou mais à direita de qualquer fio. O exemplo acima é uma P-Network de ordem 5 e tamanho 9. A transformação determinada por uma P-Network pode ser explicada através de um conjunto de regras que governam a maneira como um P-Network deve ser percorrida: 1. comece no ponto mais à esquerda de um fio, e vá para a direita; 2. cada vez que um curso aparecer mude para o fio conectado, e continue indo da esquerda para a direita; 3. pare quando o ponto mais à direita de um fio for alcançado. Se partindo do fio i a travessia termina no fio j, dizemos que o P-Network transforma i em j, e denotamos isso com i → j. No exemplo acima, o P-Network determina o conjunto de transformações {1 → 3, 2 → 5, 3 → 4, 4 → 1, 5 → 2}. A empresa Pretty Networks contratou você para resolver o seguinte problema de projeto da P-Network: dado um número N e um conjunto de transformações {1 → i1, 2 → i2, . . . N → iN}, decida se uma P-Network de ordem N pode ser construída para realizar estas transformações e, nesse caso, forneça uma P-Network que faça isto. Quando existe uma solução com um determinado tamanho, em muitos casos há uma outra solução com um tamanho maior. Cientistas da Pretty Networks afirmaram que se existe uma solução para um problema de projeto da P-Network, então esta solução tem tamanho inferior a 4N2 . Portanto, eles estão interessados apenas em soluções com um tamanho inferior a este limite."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1944",
        "saida": "Para cada grupo de visitantes, deve ser informado quantos destes receberão brindes.",
        "entrada": "A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100), representando o número de visitantes que vão receber as letras. Em cada uma das N linhas seguintes deve ser informada a combinação das 4 letras que o visitante deseja inserir no painel, separadas por espaço.",
        "titulo": "BRINDE FACE 2015",
        "descricao": "A FACE em 2015 está apoiando a terceira edição da Maratona de Programação, mas desta vez a organização solicitou sua ajuda para criar um sistema de sorteio utilizando as letras da palavra FACE. Como a feira utiliza uma proposta diferenciada e alegre, cada participante que entra na feira ganha 4 letras, uma de cada cor e em formato de bloco de madeira, conforme Figura 1, e deve inserí-las num painel. Se, no momento da inserção, as 4 letras formarem o contrário das 4 últimas letras, o visitante ganhará um brinde. Figura 1 - Entrada de FACE no painel seguido de ACEF. Por exemplo: suponha que já tiveram 3 participantes que entraram na feira e o painél ficou da seguinte forma: F A C E E C F A A C F E A C E F. Note que sempre que o painél fica vazio, assim como no início do evento, as letras F A C E são inseridas pela organização do evento. Agora, na entrada do quarto participante, ele inseriu as letras F E C A e, com isso, receberá um brinde por fechar o contrário de A C E F. Após essa situação, o painél deve ficar F A C E E C F A A C F E. Escreva um algoritmo que, dadas as letras recebidas e inseridas pelos participantes, diga quantos participantes ganharam brindes. Lembre-se que sempre que o painel fica vazio as letras F A C E são inseridas pela organização do evento."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1523",
        "saida": "Para cada caso de teste imprima uma linha, contendo a palavra “Sim”, caso seja possível que todos os N motoristas façam uso do estacionamento, ou “Nao” caso contrário.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e K (3 ≤ N ≤ 10⁴, 1 ≤ K ≤ 10³), representando o número de motoristas que farão uso do estacionamento, e o número de carros que o estacionamento consegue comportar, respectivamente. Em seguida haverá N linhas, cada uma contendo dois inteiros Ci e Si (1 ≤ Ci, Si ≤ 10⁵), representando, respectivamente, o horário de chegada e saída do motorista i (1 ≤ i ≤ N). Os valores de Ci são dados de forma crescente, ou seja, Ci < Ci+1 para todo 1 ≤ i < N. Não haverá mais de um motorista que chegam ao mesmo tempo, e nem mais de um motorista que saiam ao mesmo tempo. É possível que um motorista consiga estacionar no mesmo momento em que outro motorista deseja sair. O último caso de teste é indicado quando N = K = 0, o qual não deverá ser processado.",
        "titulo": "Estacionamento Linear",
        "descricao": "Após muito tempo juntando dinheiro, Rafael finalmente conseguiu comprar seu carro (parcelado, é claro). Chega de pegar ônibus, agora sua vida será mais fácil. Pelo menos isso é o que ele pensava, até ouvir falar do estacionamento perto da faculdade onde ele decidiu estacionar o carro todos os dias. O estacionamento tem apenas um corredor, com largura o suficiente para acomodar um carro, e profundidade suficiente para acomodar K carros, um atrás do outro. Como este estacionamento só tem um portão, só é possível entrar e sair por ele. Quando o primeiro carro entra no estacionamento, o mesmo ocupa a posição próxima à parede, ao fundo do estacionamento. Todos os próximos carros estacionam logo atrás dele, formando uma fila. Obviamente, não é possível que um carro passe por cima de outro, portanto só é possível que um carro saia do estacionamento se ele for o último da fila. Dados o horário de chegada e saída prevista de N motoristas, incluindo Rafael, diga se é possível que todos consigam estacionar e remover seus carros no estacionamento citado."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1281",
        "saida": "Para cada caso de teste, imprima o valor que será gasto por dona Parcinova no seguinte formato: R$ seguido de um espaço e seguido do valor, com 2 casas decimais, conforme o exemplo abaixo.",
        "entrada": "A primeira linha de entrada contém um inteiro N que indica a quantidade de idas à feira de dona Parcinova (que nada mais é do que o número de casos de teste que vem a seguir). Cada caso de teste inicia com um inteiro M que indica a quantidade de produtos que estão disponíveis para venda na feira. Seguem os M produtos com seus preços respectivos por unidade ou Kg. A próxima linha de entrada contém um inteiro P (1 ≤ P ≤ M) que indica a quantidade de diferentes produtos que dona Parcinova deseja comprar. Seguem P linhas contendo cada uma delas um texto (com até 50 caracteres) e um valor inteiro, que indicam respectivamente o nome de cada produto e a quantidade deste produto.",
        "titulo": "Ida à Feira",
        "descricao": "Dona Parcinova costuma ir regularmente à feira para comprar frutas e legumes. Ela pediu então à sua filha, Mangojata, que a ajudasse com as contas e que fizesse um programa que calculasse o valor que precisa levar para poder comprar tudo que está em sua lista de compras, considerando a quantidade de cada tipo de fruta ou legume e os preços destes itens."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1577",
        "saida": "Imprima \"Yes\" se o polígono regular pode ser construído com régua e compasso ou \"No\" caso contrário.",
        "entrada": "Na primeira linha, um número inteiro T<50000 representanto o número de casos; então, T números inteiros representando o número de lados de um polígono regular não-degenerado, até no máximo 1000000 (106).",
        "titulo": "Polígonos Regulares Construtíveis",
        "descricao": "A pesquisa sobre quais polígonos regulares podem ser construídos apenas com régua e compasso é um problema clássico na Matemática. Triângulos, quadrados, hexágonos podem ser construídos facilmente mas, podemos construir um heptágono regular? Foi o matemático alemão Gauss (1777-1855) quem provou primeiro que se poderia construir um polígono regular de 17 lados e depois, em um dos mais bonitos trabalhos matemáticos de todos os tempos (Disquisitiones Arithmeticae, 1798), ele deu condições necessárias e suficientes para determinar quais polígonos regulares podem ser construídos."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1815",
        "saida": "O arquivo de saída deve conter, para cada instância de entrada, um identificador Instancia h, em que h é um número inteiro, seqüencial e crescente a partir de 1. Na linha seguinte um número (arredondado em 6 casas decimais) indicando a probabilidade do Mr. Třeboň não ter encontrado a sua casa após m campainhas tocadas. Uma linha em branco deve separar a saída de cada instância, inclusive na ultima.",
        "entrada": "O arquivo de entrada tem a seguinte composição para cada instância: a primeira linha contém os inteiros 0 ≤ n ≤ 100, 0 < t ≤ n, 0 < k ≤ n, 0 < m ≤ 100, representando o número de casas, a casa inicial, a casa do Mr. Třeboň e a quantidade de casas que ele poderá tocar a campainha para tentar chegar em casa, respectivamente. São dadas então n linhas. A i-ésima linha representa a casa i e contém os números ai1, ... , aij, ... , ain, separados por brancos, representando a probabilidade do Mr. Třeboň ir da casa i para a casa j. A entrada termina com n = 0.",
        "titulo": "Drunk People?",
        "descricao": "Nos invernos de Praga o frio é insuportável. Para manter o corpo aquecido, diversos moradores utilizam-se de bebidas quentes (como café ou chá) ou alcoólicas. De tempos em tempos, Mr. Třeboň frequenta um pequeno bar de seu bairro. Porém, depois de muitas horas, alguns acabam exagerando nas doses. Nesse momento, Mr. Třeboň precisa retornar a sua casa. O problema é que ele não está se sentindo bem (ele está bêbado mesmo :-) e não lembra onde mora. Então ele começa a tocar as campainhas das casas e a perguntar se mora ali. Assim faz até encontrar sua casa. Devido ao seu estado, o Mr. Třeboň não segue nenhuma ordem lógica para tocar as campainhas das casas. Após tocar uma campainha e verificar que não é a sua casa, ele irá continuar procurando. Além disso, ele não consegue memorizar quais campainhas já tocou. A forma como ele escolhe as casas para tocar a campainha segue uma distribuição de probabilidade condicionada apenas à última casa tocada. Considere que alguém sempre atende à porta e responde ao Mr. Třeboň se ele mora ali ou não. Queremos saber qual a chance dele não conseguir chegar em casa para dormir, sabendo que após tocar um certo número de campainhas ele não aguentará mais e ficará por ali mesmo."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "2101",
        "saida": "Para cada instância na entrada, imprima uma linha contendo a quantidade de combinações de dias diferentes entre os dois planetas. A resposta deve ser dada em módulo 1713371337.",
        "entrada": "A entrada contém várias instâncias. Cada instância é composta por apenas uma linha contendo dois inteiros D1 e D2 (1 ≤ D1, D2 ≤ 1.000.000.000), que correspondem ao número de dias no mês nos dois diferentes planetas. A entrada termina quando D1 = D2 = 0.",
        "titulo": "Combinações de Dias",
        "descricao": "Estamos no ano de 2433, e a nave Pythanic acabou de ser lançada com a primeira leva de humanos a habitar outro planeta. Tal viagem tem sido muito esperada desde que as condições de vida na Terra se tornaram extremamente difíceis após uma tentativa frustrada de um terrorista de acabar com os humanos usando bactérias mutantes, há pouco mais de 400 anos atrás. Como as bactérias foram muito mal-feitas, com muitas gambiarras de última hora, tudo o que ele conseguiu fazer foi deixar um incrível mal cheiro no ambiente. Antes que a viagem fosse feita, ealgumas decisões tiveram que ser tomadas com relação ao modo de vida que tais pessoas levariam no outro planeta. Uma dessas decisões foi de que a duração do dia seria a mesma em todos os planetas habitados pelos humanos. Ou seja, a palavra \"dia\" passa a ser simplesmente um termo que significa \"24 horas\", e não mais um termo que especifica uma rotação completa do planeta em torno de si mesmo. No entanto, ficou decidido que a duração do mês poderá variar de planeta para planeta. Preocupados com a confusão que isso poderia causar, os analistas da comissão de colonização interplanetária pediram a você para criar um programa que, dadas as durações dos meses (em dias) em dois diferentes planetas, diga quantas combinações diferentes existirão de pares (D1, D2), onde D1 é um dia do mês no planeta 1, e D2 é um dia do mês no planeta 2 (não precisam ser dias do mesmo mês). Você deve assumir que o primeiro dia 1/1 (ou seja, primeiro dia do ano) ocorre ao mesmo tempo nos dois planetas. Por exemplo, se um planeta possui 2 dias num mês e outro possui 3, teremos 6 combinações diferentes de dias: (1,1), (2,2), (1,3), (2,1), (1,2) e (2,3). Se um planeta tiver 4 dias num mês e outro possuir 2, existirão apenas 4 combinações: (1,1), (2,2), (3,1), (4,2). Dados D1 e D2, seu programa deve determinar quantas combinações de dias existem."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1620",
        "saida": "Para a entrada seu programa deve produzir um único resultado real X com precisão de seis casas decimais. Utilize variáveis de dupla precisão para o cálculo.",
        "entrada": "A entrada é composta de um conjunto de teste, que contém uma única linha com um valor inteiro L (3 ≤ L ≤ 1080). A entrada termina quando L = 0.",
        "titulo": "Triangulação de Delaunay",
        "descricao": "Em matemática, uma Triangulação de Delaunay para um conjunto de pontos P no plano é uma triangulação DT(P) onde nenhum ponto em P está dentro da circunferência formada por qualquer triângulo na DT(P). A Triangulação de Delaunay maximiza o menor ângulo de todos os triângulos na triangulação; esta tende a evitar triângulos com ângulos internos muito pequenos. A triangulação foi inventada por Boris Delaunay em 1934. Para um conjunto de pontos em uma mesma linha, não existe Triangulação de Delaunay (o conceito de triangulação é desfeito para este caso). Para quatro ou mais pontos em um mesmo círculo (isto é, os vértices de um retângulo) a Triangulação de Delaunay não é única: cada uma das duas possibilidades de triangulação que divide o quadrilátero em dois triângulos satisfaz a “condição Delaunay”, isto é, que as circunferências de todos os triângulos tenham interiores vazios. Considerando que as circunferências são esferas, a noção de Triangulação de Delaunay estende-se a três dimensões. Generalizações são possíveis para métricas diferentes das Euclidianas. Entretanto, nestes casos não se pode garantir a existência ou a unicidade da Triangulação de Delaunay. O doutor Louco da Silva, em seu doutorado, resolveu verificar a afirmativa sobre a triangulação de Delaunay anteriormente dita era verdadeira. Analisou as configurações de polígonos perfeito, como mostra a figura. Ele verificou que é verdadeira e que a quantidade de arcos que criam a triangulação de Delaunay para a mesma quantidade de pontos era sempre a mesma. Por exemplo, para 3 pontos é sempre 3, para 4 pontos é sempre 5, para 5 pontos é sempre 7 e para 6 pontos é sempre 9 e assim sucessivamente. Ele resolveu então criar um número real (X) determinado pela relação da quantidade de arco (I) com a quantidade de pontos (L) que é: Ajude o doutor fazendo um programa que calcule o valor do número real X."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1776",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #X: Y\", onde X é o número do caso atual, iniciando em 1, e Y é o número mínimo de salgados que eles devem comprar.",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 1000), o número de casos de teste. Cada uma das próximas T linhas contém um número N (1 ≤ N ≤ 10⁹), o número de salgados que vem numa caixa só.",
        "titulo": "Baile de Formatura",
        "descricao": "A turma de Ciência da Computação do CIn-UFPE de 2025.1 está se formando! É uma formatura muito especial, não só porque todos os projetões dos alunos desta turma viraram multinacionais, mas também porque o número 2025 é um quadrado perfeito! Por isso, os alunos decidiram tornar todos os números da cerimônia quadrados perfeitos: datas, quantidade de convidados, hash do nome da turma, até a quantidade de formandos (roleta russa FTW!). Os organizadores da festa estavam conseguindo atender a essa exigência, até chegar a hora de comprar os salgados. Eles vinham em caixas com N salgados de uma vez. Se N não for um quadrado perfeito, terão que comprar mais de uma caixa. Calcule o número mínimo de salgados que eles devem comprar para atender à demanda excêntrica dos formandos."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1869",
        "saida": "Para cada caso de teste, imprima o valor correspondente à entrada, na base 32.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (0 ≤ N ≤ 263), indicando um número na base decimal. O último caso de teste é indicado quando N = 0.",
        "titulo": "Base 32",
        "descricao": "Num país chamado Tresdoislândia, todos os números são tratados na base 32, na qual cada símbolo numérico representa a ordem numérica, e os algarismos seguintes utilizam as letras de A até V. Por exemplo, o número 31 na base 32 é o algarismo V, e o número 32 na base 32 se torna 10. Escreva um programa que, dado um número inteiro na base decimal, converta para a base 32."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2145",
        "saida": "Seu programa deverá imprimir a relação entre os dois números, de acordo com as condições abaixo: 1 - Se o amor for correspondido, imprima \"Friends and lovers <3\"; 2 - Se o amor for quase correspondido, imprima \"Almost lovers!\"; 3 - Se o amor não for correspondido, imprima \"X friendzoned Y!\", em que a soma dos divisores de X é diferente da soma dos divisores de Y, e X é múltiplo da soma dos divisores de Y (Y ama X) mas Y não é múltiplo da soma dos divisores de X (X não ama Y); 4 - Se não houver relação, isto é, a soma dos divisores de X for diferente da soma dos divisores de Y, e X não for múltiplo da soma dos divisores de Y e Y não for múltiplo da soma dos divisores de X, imprima \"No connection.\". OBS.: Neste problema, a soma dos divisores não considera o próprio número, e nos casos em que o amor é correspondido e também quase correspondido, prevalece o amor correspondido.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por N e M (2 ≤ N, M ≤ 109), sendo N e M números diferentes. A entrada termina com N = M = 0.",
        "titulo": "A Vida Amorosa dos Números",
        "descricao": "Um número natural ama outro número se a soma de seus divisores for um divisor do outro número. Por exemplo, 9 ama 12, pois a soma dos divisores de 9 é igual a 4, um divisor de 12. Porém, 12 não ama 9, pois 16 (soma dos divisores de 12) não é um divisor de 9. Nesse caso, 9 ama 12 e não é correspondido, o que o torna um número na 'friendzone'. No entanto, há casos em que o amor será correspondido: quando a soma dos divisores de um número for igual ou divisor do outro número e vice-versa. Por outro lado, um amor quase correspondido é quando a soma dos divisores de um número for exatamente igual à soma dos divisores do outro número."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1450",
        "saida": "Para cada instância imprima uma linha contendo a altura da maior pirâmide possível.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N, onde 1 ≤ N ≤ 15, indicando o número de blocos. Cada uma das N linhas seguintes possui três inteiros X, Y e Z que indicam as medidas do bloco.",
        "titulo": "Os Joguinhos de Ramsés",
        "descricao": "Ramsés II foi o mais prestigioso dos faraós egípcios. Reinou entre 1279 a.C. e 1213 a.C. Construiu vários templos, inclusive os famosos templos de Núbia. O mais famoso é um esculpido na rocha, em Abu Simpel, perto da segunda catarata do Nilo, onde o próprio faraó é reproduzido. Com Nefertari e outras esposas teve provavelmente mais de 6 filhos, com quem gostava muito de brincar de um jogo que chamava de “pirâmide mais alta”. O jogo consistia do seguinte. As crianças recebiam pequenos paralelepípedos de diferentes dimensões (que podiam ser rotacionados), e deveriam com estes cubos construir a pirâmide mais alta que conseguissem. Para construí-la não podiam colocar um paralelepípedo maior sobre um menor, ou seja, se o bloco A está sobre o bloco B, tanto a largura como a profundidade de A devem ser menores ou iguais que as de B. Amen-hotep, primogênito de Ramsés, era muito bom no jogo, e muitas vezes conseguia construir pirâmides muito mais altas que o pai conseguia. Então, Ramsés decidiu chamar o grande matemático da corte, Narmer, para encontrar para cada conjunto de paralelepípedos a maior pirâmide possível, isto é, a pirâmide com a maior altura possível."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1703",
        "saida": "Para cada caso teste imprima uma única linha com a resposta. Sua resposta será considerada correta se tiver um erro absoluto menor que 0.00001. Obs.: Seguindo o exemplo de entrada, para o segundo caso de teste (3 1) teríamos as seguintes possibilidades: 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 Na primeira e segunda configurações, nós terminamos no lugar 1 após 1 passo.",
        "entrada": "Você receberá um inteiro T, o número de casos testes. As próximas T linhas contém N e K (1 <= N,K <= 10^5).",
        "titulo": "Pulando Pedras",
        "descricao": "Petr está jogando um jogo chamada \"Pulando Pedras\". Nesse jogo, existem N lugares em uma linha numerados de 1 a N. Em cada lugar tem uma pedra com um número escrito em cima. Os números vão de 1 a N e são todos diferentes. Petr começa no 1º lugar e realiza K passos. Em cada passo, ele olha o número escrito na pedra atual e pula para o lugar correspondente a esse número.   Fixado os inteiros N e K, determine entre todas as possíveis configurações a probabilidade que ele retorne ao 1º lugar após K passos. Assuma que todas as configurações são igualmente prováveis."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1324",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma linha contendo dois inteiros não-negativos ta e tb separados por um espaço. Se não houver possibilidade de colisão, ta = tb = 0, caso contrário ta/tb deve ser uma fração irredutível representando o tempo da primeira colisão. Mesmo se a fração resultar em um valor inteiro, você ainda deve imprimir o número 1 como denominador (veja os exemplos abaixo). A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada consiste de vários casos de teste, um por linha. Cada caso de teste contém oito números inteiros separados por espaços, A1 B1 C1 D1 A2 B2 C2 D2 (-104 ≤ A1 B1 C1 D1 A2 B2 C2 D2 ≤ 104). Os primeiros quatro valores (A1, B1, C1, D1) correspondem aos quatro parâmetros mostrados pelo primeiro acelerador portátil e os valores de entrada seguintes (A2, B2, C2, D2) correspondem aos quatro parâmetros mostrados pelo segundo acelerador portátil quando ambas partículas são lançadas. O final da entrada é representado por A1 = B1 = C1 = D1, A2 = B2 = C2 = D2 = 0, que não deve ser processado como um caso de teste, uma vez que esses são os valores mostrados pelo acelerador de partículas quando um grande buraco negro seria criado se as partículas fossem lançadas. Embora o final da entrada seja representado por uma linha com oito zeros, note que o número zero é um valor de entrada possível. A entrada deve ser lida da entrada padrão.",
        "titulo": "Bóson de Higgs",
        "descricao": "Já passaram-se 100 anos desde a detecção do primeiro Bóson de Higgs e agora a física de partículas é uma matéria principal em todas escolas de ensino médio. Obviamente, as crianças adoram o fato de poderem criar pequenos buracos negros usando apenas seus aceleradores de partículas portáteis e mostrá-los para amigos e colegas. Apesar da criação de grandes buracos negros que poderiam engolir o planeta inteiro ser possível mesmo com esses aceleradores portáteis, os aparelhos estão programados para lançar partículas apenas quando esse efeito colateral indesejável não puder acontecer. Sua neta está tentando criar buracos negros com um kit acelerador portátil, que é composto de dois pequenos aceleradores de partículas que jogam, cada um, uma partícula do tamanho de um bóson. Ambas partículas são jogadas simultaneamente, e um buraco negro aparece quando as partículas colidem. Entretanto, sua neta não sabe quanto tempo ela vai ter que esperar antes disso acontecer. Felizmente, cada acelerador pode prever a trajetória da partícula, mostrando quatro valores inteiros em seu mostrador, chamados A, B, C e D. Cada valor pode ser substituído nas seguintes equações: r = At + B θ = Ct + D para determinar a trajetória da partícula, em coordenadas polares. O raio (r) é representado em unidades de distância e o ângulo (θ) em graus. O tempo (t) é dado em unidades de tempo e é sempre um valor racional que pode ser representado por uma fração irredutível. Sua neta sabe que em coordenadas polares um ponto tem infinitas representações. Em geral, o ponto (r, θ) pode ser representado como (r, θ ± k x360°) ou (-r, θ ± (2k + 1) x 180°), onde k é qualquer inteiro. A origem (r = 0) pode ser representada como (0, θ) para qualquer θ. Usando esses parâmetros informados por cada acelerador de partículas, sua neta quer determinar se as partículas vão colidir e, se forem colidir, o momento em que o farão. Depois da primeira colisão é impossível prever a trajetória da partícula, portanto, apenas a primeira possível colisão deve ser considerada. Apesar de sua neta ser muito inteligente e ter um profundo conhecimento de física de partículas, ela não sabe programar computadores e está procurando no carderno de seu avô (ou avó) por anotações (não se esqueça, ela é sua neta!). Felizmente para você, existe uma anotação no seu caderno que fala que você escreveu aquele código durante a Competição Regional Sul-Americana do ICPC de 2008 (ou, para ser mais exato, essa competição)."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1623",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro, indicando o número de palavras distintas que esta nova língua terá. E imprimirá “descartado” caso o número de palavras ultrapasse o valor de T.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois números inteiros N e Q (1 < N ≤ 100000, 1 ≤ Q < N), indicando o tamanho do alfabeto e o número de caracteres do alfabeto que será considerado na repetição que pode ocorrer em qualquer parte da palavra, respectivamente. A segunda linha é composta por um inteiro T( 1 ≤ 105000) indicando o número máximo de palavras permitido por idioma. O último caso de teste é indicado quando N = Q = 0, o qual não deverá ser processado.",
        "titulo": "Linguagem",
        "descricao": "Germanio um guerreiro intergaláctico e conquistador de planetas tem uma dificuldade para falar quando ele fica nervoso, ele fica um pouco gago. Então, palavras como QUERO, ele fala QQUERO, VAMOS, ele fala VVAMOS e assim por diante. Aborrecido com esta situação, Germanio decidiu que toda nova conquista de um novo planeta ele iria inventar uma nova língua. Dado um alfabeto, onde não ocorre repetição de caracteres, por exemplo, QABCDEFG, todas as palavras da nova língua começariam com a letra Q duas vezes. Neste caso, a palavra QQABCDEFG seria válida. Você analisou o caso, e ainda fez a sugestão para que os caracteres a serem repetidos possam ocorrer em qualquer parte da nova palavra desde que sejam na mesma ordem e sempre juntos. No exemplo dado, ABCDEFGQQ seria válido também. O amado guerreiro Germanio gostou de sua ideia e pediu para você calcular quantas palavras estes novos idiomas terão. Mas, se o idioma tiver um número muito grande de palavras ele quer descartar este idioma."
    },
    {
        "nivel": "8",
        "assunto": "5",
        "numero": "1625",
        "saida": "Em cada linha deverá ser impresso o tamanho da menor esteira para produzir todos os conjuntos de robocopiadores, com precisão de 10 casas decimais.",
        "entrada": "A entrada é composta por vários casos de testes. A primeira linha é composta de um inteiro N (1 ≤ N ≤ 10000) que representa o número de casos de testes. Cada caso de teste é composto por um número inteiro C (1 ≤ C ≤ 100) indicando o número de conjuntos de robocopiadores fabricados. Cada conjunto é composto por um número inteiro c (1 ≤ c ≤ 10000) representando o número de robocopiadores do conjunto, seguido de c linhas de números inteiros, indicando a coordenada -100000 ≤ (x, y) ≤ 100000 de cada robocopiador do conjunto.",
        "titulo": "Robocopia",
        "descricao": "Robocopiadores são pequeninos drones que uma vez ativados copiam o movimento de rotação uns dos outros. Quando um drone é ativado junto com outros, eles trabalham em conjunto, como se fossem um só. Recentemente Daniel comprou uma fábrica de robocopiadores. Um braço mecânico coloca cada ropocobiador aleatoriamente em uma área, formando assim um conjunto de robocopiadores. Cada conjunto pode ser de composto por números diferentes de robocopiadores. E para testá-los, eles são ativados. Os robocopiadores ativados devem passar por uma esteira para posteriormente serem desativados e armazenados. Vários conjuntos de rodocopiadores podem passar pela mesma esteira. A largura da esteira deve ser sempre a menor possível, mas que comporte todos os conjuntos. Como Daniel é um empresário inexperiente, não fez um planejamento adequado e então teve de contratar funcionários adicionais para verificar manualmente qual o tamanho da esteira que ele tem de configurar para suportar os diferentes conjuntos de robocopiadores. E claro, este processo é muito custoso e demorado. Para diminuir os gastos e aumentar a eficiência, Daniel contratou você para calcular, de maneira automática, qual a menor largura da esteira para que todos os conjuntos de robocopiadores possam ser armazenados corretamente. Figure 1. Figure 2. Na Figura 1, por exemplo, a máquina ativou 3 robocopiadores (A,B e C) e a menor distância é a = 2, entre BC. Quando a máquina fizer o outro conjunto de robocopiadores (A,B,C e D) da Figura 2, a menor distância é AB ou DC, b = 3, e neste caso, o conjunto tem de ser rotacionado 90 graus para passar na esteira, que tem tamanho 3. Logo, se estes conjuntos fossem passar pela esteira, esta teria que ter uma largura mínima de 3."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1232",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, indicando o menor número de aplicações completas da sequência para que o cubo retorne ao seu estado original.",
        "entrada": "Cada caso de teste é descrito em uma única linha, que contém a sequência de movimentos. Obs: Cada sequência tem no mínimo um movimento e no máximo 80 movimentos.",
        "titulo": "Ciclo de Rubik",
        "descricao": "Provavelmente todos conhecem o Cubo de Rubik, um passatempo 3-D desafiador, que tem cada uma das seis faces cobertas com nove etiquetas, cada etiqueta de uma cor (azul, amarelo, laranja, branco, verde e vermelho). No estado inicial, todas as nove etiquetas de uma face têm a mesma cor. Um mecanismo engenhoso permite que cada face seja rotacionada independentemente, fazendo com que as cores das etiquetas nas faces possam ser misturadas. Cada uma das faces do Cubo de Rubik é denotada por uma letra: F, B, U, D, L, e R, como ilustrado na figura abaixo. U F D R L B A rotação de uma face é denominada de um movimento. Para descrever os movimentos utilizamos as letras identificadoras das faces: uma letra maiúscula representa um giro de 90o no sentido horário da face correspondente; uma letra minúscula representa um giro de 90o no sentido anti-horário da face correspondente. Por exemplo, F representa um giro de 90o no sentido horário da face F; r representa um giro de 90o no sentido anti-horário da face R. Uma sequência de movimentos é denotada por uma sequência de letras identificadoras de faces. Assim, rDF representa um giro de 90o no sentido anti-horário da face R, seguido de um giro de 90o no sentido horário da face D, seguido de um giro de 90o no sentido horário da face F. Uma propriedade interessante do Cubo de Rubik é que qualquer sequência de movimentos, se aplicada repetidas vezes, faz com que o cubo retorne ao estado original (estado que tinha antes da primeira aplicação da sequência). Por exemplo, após quatro aplicações da sequência B o cubo retorna ao estado original. Você deve escrever um programa que, dada uma sequência de movimentos, determine o menor número de aplicações completas dessa sequência para que o cubo retorne ao seu estado original."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1872",
        "saida": "Para cada caso de teste, imprima o valor esperado, com a quantidade de casas necessária.",
        "entrada": "Haverá diversos casos de teste. O primeiro número a ser lido será um inteiro C, representando a quantidade de casos de teste. Cada caso de teste tem um número real R (0 ≤ R ≤ 999.999,999999). Lembrando que a entrada terá, no máximo, 6 casas decimais, e que o separador decimal é o ponto ao invés da vírgula.",
        "titulo": "Palíndromo Real",
        "descricao": "Um palíndromo é uma palavra, frase ou qualquer outra sequência de unidades (como uma cadeia de ADN; Enzima de restrição) que tenha a propriedade de poder ser lida tanto da direita para a esquerda como da esquerda para a direita. Capicua ou número palíndromo é um número (ou conjunto de números) inteiros cujo reverso é ele próprio. Este problema quer que você analise um número real e verifique qual o menor valor que deve ser somado a este para que o mesmo se torne um palíndromo real, sem nome específico até o momento. Por exemplo, se o número for 101,099 , ao somar com 0,002, obteremos o palíndromo real 101,101. Outro exemplo seria o número 13,31 , que já é um palíndromo real, devendo somar 0 para que o mesmo continue assim. Um último exemplo é o número 100,9 , o qual deve somar 0,1 , para que a soma se torne 101. Escreva um programa que, dado um número real, verifique qual o menor valor a ser somado para que o mesmo se torne um palíndromo real."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1995",
        "saida": "Para cada caso de teste, você deve imprimir uma linha contendo um número racional que representa o número máximo esperado de jogos que o torneio dado pode ter. O resultado deve ser arredondado para o número racional mais próximo com 2 dígitos decimais. Em caso de empate, o número deve ser arredondado para cima. Nota-se que você deve sempre imprimir 2 dígitos após o ponto, mesmo que isso signifique terminar com um zero.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito usando várias linhas. A primeira linha contém quatro números inteiros, K, S, J e D. O valor K indica o número de rodadas no torneio (1 <= K <= 3). O valor S indica o número de rodadas que um jogador deve vencer para ganhar um jogo (1 <= S <= 10). O valor J indica o número mínimo de jogos que um jogador deve vencer a fim de ganhar a rodada, enquanto que D indica que um jogador deve ganhar D mais jogos do que o seu adversário para ele vencer a rodada (1 <= D <= J <= 100). Os jogadores estão identificadas por diferentes números inteiros entre 1 e N = 2K. Cada uma das N linhas seguintes contém N valores. Na i-ésima linha, o j-ésimo valor é um número inteiro P_ij tal que p_ij = P_ij/100 é a probabilidade que o jogador número i ganhe um jogo contra o jogador de número j (0 <= P_ij <= 100 para 1 <= i, j <= N). Você pode assumir que P_ii = 0 (nenhum jogador se opõe a ele mesmo) e que P_ij + P_ji = 100 para i e j diferente. O final da entrada é indicado por uma única linha contendo o número -1.",
        "titulo": "Game, Set e Match",
        "descricao": "A Associação de Clubes Modernos organiza anualmente um torneio de CompuTenis, que é um esporte especialmente adaptado para um público sem quaisquer qualidades físicas mensuráveis. As regras do CompuTenis são muito complexas (basta dizer que elas envolvem codificação com o cotovelo colado ao ouvido), mas, felizmente, não é necessário conhecêlas para resolver este problema. Você só precisa saber que em uma partida CompuTenis dois jogadores se opõem um ao outro, e o jogo é ganho pelo jogador que ganha primeiro S rodadas; por sua vez, cada conjunto é composto de vários jogos, e para ganhar um conjunto um jogador deve ganhar pelo menos J jogos, com uma diferença de, pelo menos, D mais jogos ganhos do que o adversário. O torneio tem K rodadas, e existem N = 2K jogadores na mesma, e todos participam da primeira rodada. Em cada rodada cada um dos jogadores participantes restantes está emparelhado com outro jogador participante, a fim de jogar uma única partida. O vencedor de cada uma dessas partidas avança para a próxima rodada, enquanto o perdedor é automaticamente desclassificado do torneio. O vencedor do único jogo na rodada K é, portanto, o vencedor do torneio. É desejável que o torneio dure o maior tempo possível, tendo em vista que os jogos são transmitidos pela televisão e a Associação é paga por cada minuto no ar. Dado qualquer par de jogadores diferentes, a Associação sabe a probabilidade de um deles vencer um jogo contra o outro. Você é um membro da comissão organizadora, e sua tarefa é organizar os jogos de cada rodada, a fim de maximizar o número esperado de jogos disputados no torneio. Organizar as partidas é decidir quais pares de jogadores vão jogar um jogo na primeira rodada, e depois para cada uma das rodadas seguintes decidir qual par de partidas da rodada anterior fornecerá os jogadores vencedores para cada jogo nessa rodada. Note que isto só pode depender da identificação das partidas na rodada anterior. A figura a seguir mostra um possível emparelhamento para K = 3 rodadas e N = 23 = 8 jogadores. Agora, a Associação quer apenas estimar seus ganhos, por isso é suficiente dizer a eles o número máximo esperado de jogos que podem ser jogados no torneio."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1650",
        "saida": "Para cada caso de teste, imprima o número de tabuleiros de xadrez contidos dentro da dada pintura.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha com três inteiros n, m e c.(8 ≤ n, m ≤ 40000), onde n é o número de linhas do quadro, e m é o número de colunas do quadro. c é sempre 0 ou 1, onde 0 indica que o canto inferior da pintura é preto, e 1 indica que este canto é branco. O último caso de teste é seguido por uma linha composta por três zeros.",
        "titulo": "Pintura Preto e Branco",
        "descricao": "Você está visitando o Centro Pompidou que contém muitas pinturas modernas. Em particular você nota que uma pintura consiste somente em quadrados pretos e brancos, arranjados em linhas e colunas como em um tabuleiro de xadrez(sem que quadrados adjacentes tenham a mesma cor). Já que você está entediado, você se pergunta quantos tabuleiros de xadrez 8 x 8 formam a pintura. O canto inferior direito do tabuleiro de xadrez tem que ser branco."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1221",
        "saida": "Para cada caso de teste imprima a mensagem “Prime” (Primo) ou “Not Prime” (Não Primo), de acordo com o exemplo abaixo.",
        "entrada": "A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 200), correspondente ao número de casos de teste. Seguem N linhas, cada uma contendo um valor inteiro X (1 < X < 231) que pode ser ou não, um número primo.",
        "titulo": "Primo Rápido",
        "descricao": "Mariazinha sabe que um Número Primo é aquele que pode ser dividido somente por 1 (um) e por ele mesmo. Por exemplo, o número 7 é primo, pois pode ser dividido apenas pelo número 1 e pelo número 7 sem que haja resto. Então ela pediu para você fazer um programa que aceite diversos valores e diga se cada um destes valores é primo ou não. Acontece que a paciência não é uma das virtudes de Mariazinha, portanto ela quer que a execução de todos os casos de teste que ela selecionar (instâncias) aconteçam no tempo máximo de um segundo, pois ela odeia esperar."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1582",
        "saida": "Imprima para cada linha da entrada a linha “tripla pitagorica primitiva” (sem as aspas) se os inteiros dados formam uma tripla pitagórica primitiva, “tripla pitagorica” se os inteiros dados formam uma tripla pitagórica não-primitiva, ou “tripla” se não formam uma tripla pitagórica.",
        "entrada": "Cada linha da entrada é formada por 3 inteiros, x, y e z (1 ≤ x, y, z ≤ 104), separados entre si por um espaço em branco e fornecidos não necessariamente em ordem alguma, terminando em EOF.",
        "titulo": "O Teorema de Pitágoras",
        "descricao": "Pitágoras foi um matemático grego anterior a Euclides que viveu entre 570 e 495 a.C, considerado por Aristóteles como ‘o primeiro matemático’. Um dos mais antigos e mais importantes teoremas da História, o Teorema de Pitágoras estabelece que, em qualquer triângulo retângulo, o quadrado da hipotenusa é igual à soma dos quadrados dos catetos. O Teorema possui inúmeras aplicações, sendo a base de diversos resultados na Matemática, na Engenharia, na Física e na Ciência da Computação. Embora o Teorema leve o nome de Pitágoras, acredita-se que matemáticos ainda mais antigos, da Babilônia, já tivessem conhecimento da fórmula. Diz-se que uma tripla de inteiros positivos (x, y, z) é uma tripla pitagórica se é possível existir um triângulo retângulo que tenha x, y e z como lados, independentemente da ordem em que os inteiros figurem na tripla. Por exemplos, (3, 4, 5), (6, 8, 10) e (5, 13, 12) são triplas pitagóricas, pois 52 = 32 + 42, 102 = 62 + 82 e 132 = 52 + 122. No entanto, a tripla (6, 8, 10) é apenas a tripla (3, 4, 5) multiplicada por 2, e, por isso, dizemos que (6, 8, 10) não é uma tripla pitagórica primitiva. Um tripla pitagórica (x, y, z) é dita primitiva se mdc(x, y, z) = 1. Euclides mostrou no século III a.C. que existem infinitas triplas pitagóricas primitivas."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1785",
        "saida": "Para cada caso de teste imprima “Caso #X: Y”, onde X é o número do caso atual, iniciando em 1, e Y é o retorno da rotina de krapekar ou -1 caso a rotina entre em loop infinito.",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 10⁴), o número de casos de teste. Cada caso de teste consiste de uma linha contendo um inteiro X (0 ≤ X ≤ 9999).",
        "titulo": "Kaprekar",
        "descricao": "O inteiro 6174 é conhecido como a constante de Krapekar em homenagem ao matemático indiano Dattathreya Ramachandra Kaprekar. Esse número é interessante graças ao fato que se X é um número de 4 dígitos (zeros iniciais são permitidos para completar os 4 dígitos) em que todos os dígitos não são iguais entre si, a rotina de Krapekar iniciando no número X sempre converge para 6174. Ou seja, a rotina de Krapekar converge para 6174 se, e somente se, X possui 4 dígitos com pelo menos dois deles diferentes entre si. A rotina de Krapekar é executada da seguinte forma: int krapekar(int X) {    int cnt = 0;    while (X != 6174) {        int maior = maior_numero_com_digitos_de(X);        int menor = menor_numero_com_digitos_de(X);        X = maior - menor;        cnt = cnt + 1;    }    return cnt; } maior_numero_com_digitos_de(X) é o maior número que pode ser formado usando-se os dígitos de X. menor_numero_com_digitos_de(X) é o menor número que pode ser formado usando-se os dígitos de X. Por exemplo: maior_numero_com_digitos_de(3524) = 5432 menor_numero_com_digitos_de(3524) = 2345 maior_numero_com_digitos_de(10) = 1000 //pois 10 = 0010 com quatro dígitos menor_numero_com_digitos_de(10) = 1"
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1734",
        "saida": "Para cada consulta imprima três números em uma mesma linha: sendo o valor absoluto da soma mais próxima e os índices inferiores e superiores de algum intervalo onde esta soma absoluta é alcançada. Possíveis índices começam com 1 e vão até n.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com dois números de n (1 ≤ n ≤ 105) e k. A entrada é terminada por n = k = 0. Caso contrário, segue n inteiros com valores absolutos menores do que 104 que constituem a sequência. Em seguida, segue k consultas para esta sequência. Cada consulta é um alvo t (0 ≤ t ≤ 109).",
        "titulo": "Limite Encontrado",
        "descricao": "Sinais possivelmente de origem extraterrestre foram recebidos e digitalizados pela Aeronautic and Space Administration (que deve estar passando por uma fase desafiadora: \"Mas eu quero usar pés, e não metros!\"). Cada sinal parece vir em duas partes: uma sequência de valores inteiros n e um inteiro não negativo t. Não vamos entrar em detalhes, mas os pesquisadores descobriram que um sinal codifica dois valores inteiros. Estes podem ser encontrados como o limite inferior e superior de uma subfaixa da sequência cujo valor absoluto de sua soma é mais próximo de t. Dada à sequência de n números inteiros e o alvo não negativo t, você deve encontrar uma variedade não vazia da sequência (ou seja, uma subsequência contínua) e saída de seu índice mais baixo l e seu índice superior u. O valor absoluto da soma dos valores da sequência a partir do l-nésimo para o elemento de u-nésimo (inclusive) deve ser pelo menos tão perto de t como o valor da soma absoluta quanto qualquer outro intervalo não vazio."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1371",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha na saída, contendo a sequência crescente de números correspondente aos identificadores dos quartos cujas portas estarão abertas. Ao imprimir a sequência, deixe um espaço em branco entre dois elementos consecutivos.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha que contém um inteiro N (0 ≤ N ≤ 25000000), indicando o número de portas e descendentes. O final da entrada é indicado por N = 0.",
        "titulo": "Fechem as Portas!",
        "descricao": "Madame Beauvoir possui uma mansão onde ela recebe todos os seus descendentes (netos e bisnetos) durante as férias. Sua mansão possui exatamente N quartos (cada quarto é numerado de 1 a N), onde N é também a quantidade de netos e bisnetos (cada descendente é também numerado de 1 a N). Como toda criança, os descendentes de Mme. Beauvoir são bastante travessos. Todo dia é a mesma confusão: eles acordam de manhã cedo antes dela e se encontram no grande jardim. Cada descendente, um de cada vez, entra na mansão e troca o estado das portas dos quartos cujos números são múltiplos do seu identificador. Trocar o estado de uma porta significa fechar uma porta que estava aberta ou abrir uma porta que estava fechada. Por exemplo, o descendente cujo identificador é igual a 15 vai trocar o estado das portas 15, 30, 45, etc. Considerando que todas as portas estão inicialmente fechadas (todos os descendentes fecham as portas antes de descer para o jardim) e que cada descendente entra exatamente uma vez na mansão (a confusão é tão grande que não sabemos em que ordem), quais portas estarão abertas após a entrada de todos os descendentes na mansão?"
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1990",
        "saida": "Para cada caso de teste, imprima por linha um inteiro que representa o número total de diferentes conjuntos equilibrados que pode ser obtido através da adição de um número inteiro para o conjunto dado, tal como se explica na descrição do problema.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em duas linhas. A primeira linha contém um único número inteiro positivo N que indica o número de elementos do conjunto equilibrado deve ter (3 <= N <= 499). A segunda linha contém N-1 inteiros distintos Z_i que representam os elementos dados do conjunto (-1014 <= Z_i <= 1014 para 1 <= i <= N-1). A última linha da entrada contém o número -1, e não deve ser processado como um caso de teste.",
        "titulo": "Equilíbrio",
        "descricao": "A média e a mediana geralmente confunde os alunos por causa de sua ortografia semelhante, mas eles são muito diferentes conceitos. Neste problema, vamos trabalhar com a média e a mediana de um conjunto constituído por N pares inteiros distintos, onde N é ímpar. A média de tal conjunto é definida, como é habitual, como a soma dos números divididos por N, enquanto que a mediana é o único elemento no conjunto que é maior do que (N-1) / 2 dos seus elementos, e menor do que o outro (N-1) / 2 elementos do conjunto. Por exemplo, se o conjunto é {0, 2, 6, 4, 13}, a média é 5 enquanto a mediana é 4. Nosso objetivo é tornar a vida do aluno mais fácil através da geração de conjuntos \"equilibrados\", isto é, conjuntos compostos por um número ímpar de inteiros, todos distintos entre si, onde a média e a mediana coincidem. Por exemplo, o conjunto {0, 2, 6, 4, -2} é equilibrado, uma vez que tem N = 5 inteiros diferentes, e a média e mediana, são ambos iguais a 2. O procedimento seguinte tem sido sugerido para a obtenção de conjuntos equilibrados. Um conjunto com um número par de inteiros distintos é escolhido, e um número inteiro adicional diferente de cada elemento do conjunto é adicionada a ele, de tal modo que o conjunto resultante é equilibrado. Nós queremos que você verifique se o procedimento indicado funciona. Por isso a sua tarefa é, dado N-1 inteiros distintos, com N ímpar, contar o número de conjuntos equilibrados que podem ser formados, seguindo o procedimento descrito."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2154",
        "saida": "Para cada caso de teste, imprima o polinômio com a derivada aplicada.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste é formado por um número inteiro T, que representa a quantidade de termos que o polinômio possui. Na linha seguinte, há o polinômio propriamente dito, formado por T (1 ≤ T ≤ 100) termos, todos separados por um espaço, um sinal de soma e outro espaço, e cada um contendo um inteiro C (2 ≤ C ≤ 100), a letra x e um inteiro E (2 ≤ E ≤ 100), sendo C o coeficiente e E o expoente do termo. A entrada termina com fim de arquivo.",
        "titulo": "Derivada de Polinômios",
        "descricao": "A fórmula de cálculo de uma derivada de uma função na forma xn é definida por: f(x) = xn    →     f(x)’ = n.xn-1 Veja um exemplo: f(x) = 4x3 + 3x2    →     f(x)’ = 12x2 + 6x Escreva um programa que, dado um polinômio simples, calcule a sua derivada."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "2096",
        "saida": "Você deve imprimir P linhas, cada uma contendo um número inteiro com a resposta a uma das perguntas feitas por Horácio, na ordem em que aparecem na entrada.",
        "entrada": "A primeira linha contém um inteiro P que indica o número de questões que Horácio quer pedir (1 <= P <= 105). Cada uma das próximas P linhas descreve uma pergunta usando três números inteiros A, B e K, o que significa que Horácio gostaria de saber quantos valores diferentes de n satisfaz A <= n <= B e a ordem do jogo começando com n é K (2 <= A <= B <= 106 e 1 <= K <= 106) .",
        "titulo": "Horácio e Seus Primos",
        "descricao": "Horácio gosta de brincar de escrever números naturais no quadro-negro em seu quarto. Um dos seus jogos favoritos consiste em primeiro escrever um número n, então a soma de todos os diferentes números primos que dividem a n, e assim por diante até que o número escrito na placa se torne um número primo. Por exemplo, se Horácio começa a escrevendo o número n = 90, porque 90 = 2 × 32 × 5 o próximo número a ser escrito, será de 2 + 3 + 5 = 10; então, como 10 = 2 × 5 Horácio vai escrever o número 2 + 5 = 7; finalmente, porque 7 é um número primo o jogo terminará aqui. Formalmente, este jogo em cada número natural n> = 2 define uma sequência cujo primeiro elemento é n, e cada novo elemento é a soma de todos os números primos que dividem o elemento anterior na sequência. O fim do jogo é a posição do primeiro número primo na sequência, e coincide com o número total de números escritos . No exemplo do parágrafo anterior, com n = 90 o fim do jogo é K = 3, porque os números que estão escritos será de 90, 10 e 7. Agora, nem todos os jogos são igualmente divertido para Horácio, e neste caso ele prefere começar por escrever um número n tal que a ordem do jogo correspondente é um valor especial K. Horácio gostaria de saber quantos diferentes valores de n inclusive entre A e B satisfaçam esta condição, mas porque ele não sabe como codificar ele precisa de alguém para fazer este cálculo para ele. Você pode ajudá-lo?"
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1735",
        "saida": "Para cada caso de teste imprima uma única linha que contém o código Prufer da árvore especificada. Separe os números por um único espaço. Não imprima espaços no final da linha.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste especifica uma árvore, como descrito acima em uma linha do arquivo de entrada. A entrada é terminada por EOF. Você pode assumir que 1 ≤ n ≤ 50.",
        "titulo": "Codifique a Árvore",
        "descricao": "Uma árvore (isto é, um grafo conexo sem ciclos) com os vértices numerados por números inteiros 1, 2, ..., n é dado. O código \"Prufer\" de tal estrutura é construído como da seguinte forma: a folha (um vértice que é incidente a uma única aresta) com o menor número é tomado. Esta folha, juntamente com a sua aresta incidente é removida do grafo, enquanto o número do vértice que era adjacente à folha é anotado. No grafo obtido, este procedimento se repete, até que haja apenas um vértice restante (que, por sinal, sempre tem o número n). A sequência de escrita com n-1 números, é chamado o código Prufer da árvore. Sua tarefa é, dada uma árvore, para calcular o seu código Prufer. A árvore é indicada por uma palavra do idioma especificado pela seguinte gramática: T ::= \"(\" N S \")\" S ::= \" \" T S | vazio N ::= número Ou seja, as árvores têm parênteses em torno deles, e um número indicando o identificador do vértice raiz, seguido por arbitrariamente muitas (talvez nenhuma) subárvores separadas por um único caractere de espaço. Como exemplo, dê uma olhada na árvore na figura abaixo que é indicado na primeira linha da entrada de amostra. Observe que, de acordo com a definição dada acima, a raiz de uma árvore pode ser uma folha também. É só para facilitar a denotação que designa algum vértice para ser a raiz. Normalmente, o que estamos lidando aqui com é chamada de \"árvore não enraizada\"."
    },
    {
        "nivel": "8",
        "assunto": "5",
        "numero": "1656",
        "saida": "Para cada caso de teste, imprima uma linha com os índices dos vizinhos que as crianças devem selecionar (aqui, o índice i corresponde ao vizinho i que dá um total de doces ai). Se não houver solução, onde cada criança recebe pelo menos um doce, imprima \"no sweets\". Observe que, se existir várias soluções onde cada criança recebe pelo menos um doce, você pode imprimir qualquer uma delas.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros c e n (1 ≤ c ≤ n ≤ 100000), sendo o número de crianças e o número de vizinhos, respectivamente. A próxima linha contém n inteiros separados por espaço a1,...,an (1 ≤ ai ≤ 100000), onde ai representa o número de doces que as crianças recebem se visitarem vizinho i. O último caso de teste é seguido por dois zeros.",
        "titulo": "Doces do Dia das Bruxas",
        "descricao": "Todos os anos há o mesmo problema no Halloween: Cada vizinho só está disposto a dar certo número total de doces neste dia, não importa quantas crianças peçam, por isso pode acontecer que uma criança fique sem nada, se for tarde demais. Para evitar conflitos, as crianças decidiram que vão colocar todos os doces juntos e depois dividi-los igualmente entre si. A partir da experiência do Halloween do ano passado, elas sabem quantos doces recebem de cada vizinho. Visto que elas se preocupam mais com a justiça do que o número de doces que recebem, elas querem selecionar um subconjunto de vizinhos para visitar, para que na partilha cada criança receba o mesmo número de doces. Elas não vão ficar satisfeitas se sobrar doces que não possam ser divididos. Seu trabalho é ajudar as crianças e apresentar uma solução."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1807",
        "saida": "A saída é a soma módulo (231 - 1) de todos os elementos da linha R. Não esqueça do caractere de fim-de-linha após exibir a soma.",
        "entrada": "A entrada é o número de linha R (0 &leq; R &leq; 999999999).",
        "titulo": "Triângulo Trinomial, a Vingança",
        "descricao": "O triângulo trinomial é um triângulo numérico de coeficientes trinomiais. Ele pode ser obtido com uma linha contendo um único \"1\", a próxima linha contendo três 1 e cada elemento das linhas seguintes sendo calculado como a soma do elemento acima à esquerda, imediatamente acima e acima à direita: A primeira linha do triângulo trinomial é numerada com zero, a segunda linha é a de número 1 e assim sucessivamente. Sua tarefa é, dado um número de linha R, escrever um programa que exiba a soma de seus elementos. Por exemplo, a soma dos elementos da linha 2 é 9 = 1 + 2 + 3 + 2 + 1. Mas desta vez o número de linha R pode ser muito maior! Sendo assim, a soma dos elementos da linha R deve ser mostrada módulo (231 - 1). Por exemplo, a soma dos elementos da linha 20 é 3486784401 mas a resposta a ser dada é 1339300754, que é congruente a 3486784401 módulo (231 - 1)."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1380",
        "saida": "Para cada instância imprima uma linha contendo os três últimos dígitos do número de bacilos após K instantes de tempo.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por apenas uma linha que contém um inteiro K (1 ≤ K ≤ 101000000).",
        "titulo": "Crescimento das Populações de Bacilos",
        "descricao": "Heinrich Hermann Robert Koch foi um médico alemão que viveu de 1843 a 1910 e ficou famoso por ter isolado o bacilo causador da tuberculose. Seus estudos sobre a doença que causava muitas mortes até meados do século XX possibilitaram o desenvolvimento de uma vacina que salvou milhões de vidas por todo o mundo. Robert Koch foi agraciado em 1905 com o prêmio Nobel de Medicina e é considerado um dos pais da Microbiologia. Um dos estudos de Koch estava ligado com a velocidade de crescimento das populações de bacilos. Koch observou que os bacilos demoram um instante de tempo para atingir a maturidade e iniciar a divisão celular. A partir daí, o bacilo gera um novo indivíduo a cada instante de tempo por meio de uma divisão. Dessa forma, se partirmos de uma população inicial com apenas um indivíduo, no instante seguinte teremos ainda um (ele atinge a maturidade para divisão), no seguinte teremos 2, no outro 3, então 5 e assim por diante. Sua tarefa é, dado um inteiro K, determinar os três últimos dígitos do número de bacilos após K instantes de tempo, partindo de uma população inicial com um indivíduo."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "2007",
        "saida": "A saída é uma linha com um número inteiro que representa a soma dos valores de todas as plantas que se encontram no exterior da vedação.",
        "entrada": "A primeira linha contém dois inteiros P e V, que representam, respectivamente, o número de plantas e o número de vértices de cima do muro poligonal (1 ≤ P, V ≤ 105). Cada uma das linhas próximas a P descreve uma planta diferente, com dois inteiros Xp e Yp, indicando as coordenadas da planta (-109 ≤ Xp, Yp ≤ 109). O valor da planta p-th na entrada é P, para p = 1, 2,. . . , P. Cada uma das seguintes linhas V descreve um vértice da vedação com dois números inteiros Xv e Yv, indicando as coordenadas do vértice (-109 ≤ Xv, Yv ≤ 109). Vértices são dadas na ordem anti-horário. Cada um destes pontos é um real vértice do polígono, isto é, ela não é colinear com os seus dois vértices adjacentes. O polígono é representado um polígono simples com cada lado paralelo a um eixo. Não há duas plantas estão na mesma posição, e nenhuma planta encontra-se no lado de uma cerca.",
        "titulo": "Falha Ao Cercar Legumes",
        "descricao": "Aos 40 anos, Alice e Bob decidiram se aposentar. Depois de mais de duas décadas de trabalho como exemplos de protocolos de rede, livros teóricos sobre jogos e vários outros textos, eles estavam cansados. Para permanecerem ativos, eles decidiram praticar a jardinagem. Alice e Bob plantaram vários vegetais em um enorme campo. Depois de terminado, eles perceberam que as plantas precisariam de proteção contra animais selvagens, então eles decidiram construir uma cerca para protegê-los. O campo é representado pelo plano XY e cada vegetal está em um ponto diferente. A cerca é representada como um polígono no plano. De qualquer forma, nem todo polígono é uma cerca válida. Ela deve ser uma cerca de um único polígono simples, com cada um dos seus lados paralelos a um dos eixos. Claro que, o polígono deve conter todos os pontos que representam as plantas. Uma cerca demasiado perto das plantas ou para si poderia tornar difícil para caminhar ao redor, de modo que cada lado do polígono precisa ser afastado de todas as plantas e todos os lados não adjacentes. Infelizmente, Alice e Bob contrataram uma multinacional desagradável para a construção da cerca. A empresa tinha um monte de advogados na folha de pagamento, mas não há bons designers da cerca, pois eles não cumpriram com todos os requisitos. Eles construíram uma cerca que é um polígono simples com lados paralelos aos eixos e cujos lados são longe de plantas e em si. No entanto, eles se esqueceram de fazer a cerca conter todas as plantas! Alice e Bob querem ajuda para avaliar a extensão do problema. Uma vez que nem todas as plantas são igualmente valioso para eles, eles querem saber o valor total das plantas que foram deixados do lado de fora da cerca."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1570",
        "saida": "Para cada linha de entrada, exceto a primeira que informa o número de linhas, você deve imprimir exatamente duas linhas de saída. A primeira linha contém o número do caso e a seguinte linha contém os possíveis valores de X e Y (Um par de valores em cada linha). Se houver mais do que uma solução possível, imprima a que o X tiver o menor valor. Quando os valores dados de P e Q são impossíveis para qualquer valor inteiro de X e Y, você deve imprimir \"Impossible\".",
        "entrada": "A primeira linha contém um inteiro N (N <= 75000) que informa o número total de entradas. Cada uma das N linhas seguintes contém dois inteiros que denota os valores de P e Q, respectivamente, aqui |P| < 231, |Q| < 231.",
        "titulo": "Um Dia na Terra da Matemática",
        "descricao": "X e Y são dois números inteiros e X >= Y. Os valores de X e Y  são inteiros positivos ou negativos. Quando a soma destes dois números é multiplicado por Y obtemos P e quando o valor absoluto da subtração destes dois números é multiplicado por X obtemos Q. Dado o valor de P e Q, é preciso encontrar o valor de X e Y."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2177",
        "saida": "A saída deve ser composta de uma única linha contendo os identificadores (índices) ordenados do menor para o maior de quais jogos Maria conseguirá assistir. Se Maria não conseguir assistir nenhum jogo imprima \"-1\" (sem as aspas)",
        "entrada": "A primeira linha da entrada consiste da posição de Maria dada por x e y (0 ≤ x, y ≤ 1000) e de um número n (1 ≤ n ≤ 10⁶) que indica o número de ingressos que Maria comprou. As próximas n linhas são formadas por 3 números, xi, yi, ti, respectivamente a posição x do local do jogo i, a posição y do local do jogo i, e o tempo restante para o jogo i iniciar (0 ≤ xi, yi ≤ 1000 e 1 ≤ ti ≤ 1000000).",
        "titulo": "Rio 2016",
        "descricao": "Maria adora esportes e está muito animada com o ínicio das Olímpiadas 2016. No auge de sua animação Maria acabou comprando vários ingressos para os jogos e competições, mas infelizmente devido à distância da sua casa para os locais em que os jogo irão acontecer, que pode ser muito grande, ela provavelmente não conseguirá chegar em todas partidas a tempo. Maria sabe que você adora desafios de programação tanto quanto ela adora esportes, então ela te pediu para escrever um programa que dados os locais (posição (x, y) no plano) em que as partidas vão ocorrer e quanto tempo resta até cada partida começar indique quais jogos ela conseguirá chegar a tempo, ou seja antes do jogo começar, se ela sair agora do ponto em que ela está e for diretamente para o local do jogo. Maria se encontra numa certa posição (x, y) e se move com velocidade 1 metro por minuto (apesar da animação Maria anda lentamente para não perder nenhum pokestop no caminho), a distância entre os pontos, também em metros, é definida pela Distância Euclidiana, e o tempo restante para ínicio das partidas se encontra em minutos."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1484",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma resposta. A primeira linha de uma resposta deve conter um identificador do caso de teste, no formato '#i', onde 'i' tem inicialmente o valor 1 e é incrementado a cada caso de teste. Então, se uma solução para o passatempo existe, seu programa deve produzir uma lista das possíveis sequências de termos. Se mais de uma sequência é possível, elas devem aparecer em ordem lexicográfica crescente. Cada sequência de termos deve ser impressa em uma linha, com os termos separados por um espaço em branco. Se não há solução, seu programa deve imprimir uma linha contendo a palavra 'impossivel' (note ausência de acentuação). Definição: considere as sequências Sa = a1a2 ... am e Sb = b1b2 ... bn. Sa precede Sb em ordem lexicográfica se e apenas se Sb é não-vazia e uma das seguintes condições é verdadeira: Sa é uma sequência vazia; a1 < b1; a1 = b1 e a sequência a2a3 ... am precede a sequência b2b3 ... bn.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste em apenas uma linha, contendo dois inteiros S e D, separados por um espaço, representando a soma desejada e o número de dígitos de cada termo (0 ≤ S ≤ 10.000.000.000 e 1 ≤ D ≤ 10). O final da entrada é indicado por S = D = −1.",
        "titulo": "Tecle & Some",
        "descricao": "Strike Boy, como o apelido sugere, é um garoto fanático por todo tipo de jogos em computador. Ele está passando as férias em uma ilha paradisíaca, onde computadores não são permitidos. Ele se divertiu por algum tempo com os jogos em seu telefone celular, mas a bateria acabou e não há eletricidade na ilha, de forma que ele parou de jogar. Strike Boy então decidiu inventar um novo passatempo, usando o teclado de seu telefone celular. Neste novo jogo, para dois jogadores, um deles escolhe dois inteiros S e D. O jogador oponente deve então encontrar uma sequência de termos tal que: Cada termo da sequência é um número com D dígitos decimais, exceto pelo último termo, que pode ter entre 1 e D dígitos; A soma de todos os termos da sequência é igual a S; Os dígitos utilizados para formar um termo correspondem às teclas de um teclado padrão de telefone celular (‘0’ a ‘9’); Cada dígito é utilizado no máximo uma vez na sequência; O primeiro termo de uma sequência pode começar com qualquer dígito, mas a ordem dos dígitos da sequência, quando lidos da esquerda para a direita, é tal que a próxima tecla corresponde sempre a uma tecla imediatamente vizinha da tecla utilizada previamente (na vertical, na horizontal ou na diagonal). Por exemplo, se S = 230 e D = 3, há apenas duas soluções possíveis obedecendo as regras do jogo: [074, 156] e [085, 142, 3]. A sequência [230] não é uma solução porque a tecla ‘3’ não é vizinha da tecla ‘0’. Imagem da esquerda: Teclado ilustrando as teclas utilizadas para formar a sequência [074, 156] Imagem da direita: Teclado ilustrando as teclas utilizadas para formar a sequência [085, 142, 3] Ajude Strike Boy a verificar se as respostas do oponente estão corretas: escreva um programa que, dados S e D, imprima todas as soluções possíveis."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1992",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um numero que representa o tempo mínimo (em segundos) necessário para Gabriela terminar seu percurso sem violar qualquer regra de tráfego, ou um asterisco se é impossível fazer isso. O resultado deve ser arredondado para o número racional mais próximo com 2 dígitos decimais. Em caso de empate, o número deve ser arredondado para cima. Notese que você deve sempre imprimir 2 dígitos após o ponto, mesmo que isso signifique terminar com um zero.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito usando várias linhas. A primeira linha de cada caso de teste contém quatro inteiros N, L, A e D. N representa o número total de pontos de verificação que estão presentes na rota de Gabriela (1 <= N <= 105). L indica o comprimento do percurso em metros (2 <= L <= 107). A e D representam, respectivamente, o número máximo permitido da aceleração e desaceleração para o ônibus (1 <= A, D <= 100). Cada uma das N linhas seguintes descrevem um ponto de verificação diferente usando três inteiros X, V e W, que representam, respectivamente, a distância entre o ponto de verificação e o ponto de início do trajeto (1 <= X <= L-1), a velocidade mínima, e a velocidade máxima permitida para o ônibus no momento em que passa por esse ponto de verificação (1 <= V, W <= 100). Suponha que, em cada caso de teste dos pontos de verificação os pontos são dados em ordem de distância ascendente desde o ponto de partida da rota, e não existem dois pontos de verificação que estão à mesma distância do ponto de partida. Neste problema, o comprimento é expresso em metros, a velocidade em m/s e a aceleração em m/s2. O fim da entrada é indicado por uma linha contendo o número 1 quatro vezes, e não deve ser processado como um caso de teste.",
        "titulo": "Ganhando Tempo",
        "descricao": "Gabriela dirige um ônibus escolar. Sendo uma das poucas mulheres que têm esse trabalho, ela é sempre ridicularizada pelos motoristas do sexo masculino. Para melhorar a sua condição, ela decidiu que além de dirigir com responsabilidade ela vai conduzir de forma mais eficiente. Sua ideia é terminar a sua rota gastando o mínimo de tempo possível, sem violar qualquer regra de trânsito. O ônibus que Gabriela dirige tem um sistema de condução muito moderno que lhe permite ajustar a aceleração para qualquer número real instantaneamente. Assim, a aceleração é constante em intervalos, mudando para outra aceleração sempre que Gabriela decidir. Se v é a velocidade do ônibus em um determinado instante de tempo, e a sua aceleração que permanece constante ao longo de um período de tempo t, a velocidade de rotação no final desse período será v+ at. Além disso, o ônibus vai passar a uma distância de at² / 2 + vt durante esse período de tempo. As regras de trânsito impede os veículos de usar uma aceleração maior do que A, ou uma desaceleração menor que D, ou seja, a aceleração a em qualquer momento deve satisfazer -D <= a <= A. Além disso, existem pontos de verificação ao longo da rota do ônibus onde a velocidade deve situarse dentro de um determinado intervalo dado. Gabriela sabe de antemão a localização dos pontos de verificação, o comprimento total do percurso, e as constantes A e D. No início do percurso, a velocidade e a aceleração do ônibus são ambos 0. Não há restrições adicionais em relação a velocidade ou a aceleração que o ônibus deve ter no final do percurso (em particular, não é necessário parar no final). Seu trabalho é usar esses dados para determinar o tempo mínimo que Gabriela precisa para terminar o percurso sem violar as regras."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1512",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro, mostrando quantos azulejos serão pintados no final do processo.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste contém três inteiros, N, A e B (3 ≤ N ≤ 10⁹, 2 ≤ A, B ≤ N). O último caso de teste é indicado quando N = A = B = 0, o qual não deverá ser processado.",
        "titulo": "Azulejos",
        "descricao": "Rafael resolveu trocar os azulejos de sua sala de estar, e para isto fez as medições e comprou N azulejos brancos na loja. O fato de todos os azulejos serem brancos deixou Rafael um pouco preocupado com o design de sua sala de estar, e então decidiu pintar alguns deles para dar um “ar mais moderno” à sua casa. Posicionou todos os N azulejos em uma linha reta, e enumerou todos eles de 1 até N, da esquerda para a direita. Para escolher quais azulejos pintar, pensou na seguinte lógica: Escolheu dois inteiros A e B, e disse que iria pintar todos os azulejos cuja enumeração fosse múltipla de A e/ou B. Ajude Rafael a descobrir quantos azulejos serão pintados no total."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1999",
        "saida": "Para cada caso de teste, imprima uma única linha contendo o numero de formas diferentes em que o numero de convidados de cada reino podem ser escolhidos para um baile com exatamente N danças, com todas as restrições mencionadas no problema.",
        "entrada": "Cada caso de teste é descrito usando uma linha, que contém um inteiro N que indica o número total de danças que o baile deve ter (1 ≤ N ≤ 104). O fim da entrada é indicado por uma linha contendo o número -1.",
        "titulo": "Baile de Reconciliação",
        "descricao": "Todos os anos, os reinos da Cubiconia, Quadradonia e Noglônia organizam um baile para comemorar o fim da guerra que devastou a região por um longo tempo. Algum número de nobres de cada reino é convidado a participar do evento, e espera-se cada par de convidados de diferentes reinos dancem juntos exatamente uma vez. Ou seja, cada convidado de Cubiconia deve dançar uma vez com todos os convidados de Quadradonia e Noglônia, e da mesma forma a cada convidado Quadradonia deve dançar uma vez com todos Noglônia. Porém, os hóspedes de um mesmo reino nunca devem dançar juntos. Para ajudar a organizar o baile, o numero total de danças é determinado antecipadamente, então é preciso ter cuidado ao escolher o numero de convidados de cada reino. Por exemplo, se você decidir que o baile tem N = 20 danças, uma possibilidade é convidar 6 nobres de Cubiconia, 2 de Quadradonia e 1 de Noglônia, que pode ser representado pela expressão (6, 2, 1). Esta é uma opção válida, porque a quantidade total de danças seria 6 × 2 + 6 × 1 + 2 × 1 = 20. Tradições, cuja origem ninguém se lembra, indicam que o número de convidados Cubiconia deve ser maior ou igual ao número de convidados de Quadradonia, e por sua vez o número de convidados Quadradonia deve ser maior ou igual o número de convidados Noglônia. Assim, para N = 20 danças há exatamente 5 possíveis formas de escolher o número de convidados em cada reino (5, 4, 0), (4, 2, 2), (10, 2, 0), (20, 1, 0) e o acima mencionado (6, 2, 1). Com tantas restrições, o comitê organizador da cerimônia tem problemas em encontrar o número de convidados de cada reino. Sua missão é ajudar o comitê a contar as diferentes formas que os convidados podem ser escolhidos para um baile com N danças. Duas maneiras de escolher o número de convidados de cada reino são consideradas diferentes se eles diferem no número de convidados em pelo menos um dos reinos."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1819",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir os três números a1, a2 e a3, representando os cocientes da função linear procurada. Esses números devem estar truncados em três casas decimais. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "A entrada é composta de diversas instâncias. Para cada instância da entrada é dado um número inteiro 3 ≤ n ≤ 1000 indicando quantas triplas foram obtidas na coleta de dados. Em cada uma das próximas n linhas é dada uma tripla Xi, Yi e Zi ,como área de plantio (em milhares de hectares), a quantidade de trabalhadores envolvidos (dado em milhares de pessoas), e a produção agrícola (dada em toneladas de alimentos), respectivamente. O arquivo de entrada termina quando for encontrado n = 0. Assuma que não existe uma relação linear entre a quantidade de trabalhadores e a área de plantio, ou seja, não existem constantes α,β tais que, para todo i, xi = αyi + β. Assuma também que 0 ≤ Xi,Yi,Zi ≤ 1000 e que todos os valores dados são inteiros.",
        "titulo": "Estimando a Produção",
        "descricao": "A China é uma grande produtora de alimentos, mas também uma enorme consumidora. Pesquisadores chineses perceberam que em certos momentos de sua história a produção agrícola foi maior que o consumo, e em outros momentos esse quadro se inverteu. Preocupados com o futuro da grande nação, passaram a coletar dados sobre a área de plantio, a quantidade de trabalhadores e a produção agrícola. Para melhor investir seus recursos, eles agora desejam fazer uma previsão sobre a produção do país. O conjunto de dados que os pesquisadores conseguiram coletar é formado por triplas (Xi,Yi,Zi), em que Xi representa a área de plantio, Yi a quantidade de trabalhadores e Zi a produção agrícola. Como essa produção está ligada diretamente com os demais dados coletados, eles decidiram estimar a produção futura usando a função linear a1+a2x+a3y, que minimiza a soma dos erros quadrados em que n é o total de triplas disponíveis. Desta forma eles serão capazes de planejar melhor a produção e o consumo dos próximos anos. Seu objetivo é calcular a função linear desejada."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1193",
        "saida": "Para cada caso de teste, você deve apresentar o número de caso de teste seguido por duas linhas, que contém a conversão do valor fornecido para as outras duas bases. A sequência das bases de saída será sempre: decimal, hexadecimal (em minúsculo) e binário, ou seja deve-se respeitar esta ordem excluindo obviamente o formato de entrada. Obs: deverá ser impressa uma linha em branco após cada caso de teste, inclusive após o último caso de teste.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste que virão a seguir, um por linha. Cada caso de teste contém um valor X (X > 0) seguido de um texto Y com três caracteres, indicando se o valor X está no formato binário, decimal ou hexadecimal. Independente do formato, qualquer dos números deverá caber em um inteiro de 32 bits.",
        "titulo": "Conversão entre Bases",
        "descricao": "O professor de matemática de Juliano marcou uma prova cujo conteúdo será apenas conversão entre valores decimais, hexadecimais e binários. Uma das coisas mais complexas para Juliano é fazer estas conversões de base entre números. Por mais que estude, tem muita dificuldade para entender. Portanto, como você entende de computação e é amigo(a) de Juliano, ele solicitou a tua ajuda para que faça um programa que verifique se as conversões feitas por ele estão correta."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1501",
        "saida": "Para cada linha de entrada, imprima uma única linha informando quantos zeros finais terá o fatorial desse número no sistema de numeração solicitado e também quantos dígitos terá o fatorial desse número neste mesmo sistema de numeração. Separe esses dois números com um único espaço. Você pode ter certeza que o número de zeros à direita ou o número de dígitos não será maior do que 231-1",
        "entrada": "Há diversas linhas de entrada. Cada linha forma um bloco. Cada linha conterá um valor decimal  N (um número de 20 bits sem sinal) e um número inteiro B (1 < B ≤ 800), que é a base do sistema de números que você vai considerar. Por exemplo 5! = 120 (em decimal) mas é 78 no sistema de numeração hexadecimal. Portanto, no sistema hexadecimal 5! não tem zeros no final.",
        "titulo": "Quantos Zeros e Quantos Dígitos?",
        "descricao": "Dado um número inteiro decimal, você terá que descobrir quantos zeros à direita o seu fatorial conterá em um determinado sistema de numeração e você também terá que encontrar quantos dígitos terá este fatorial no mesmo sistema de numeração. Você pode assumir que um sistema numérico baseado em B há B diferentes símbolos para identificar valores indo de 0 até b-1."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1989",
        "saida": "Para cada caso de teste, imprima em uma única linha um inteiro que representa o número de minutos que o casal gasta em assistir toda a série.",
        "entrada": "A entrada contém vários casos de teste. Cada teste é descrito em duas linhas. A primeira linha tem dois inteiros N e M representando respectivamente quantas temporadas a série tem e a duração em minutos de cada capítulo (1 <= N <= 105, 1 <= M <= 106). A próxima linha tem N inteiros C_i representando quantos capítulos cada temporada tem ordenados cronologicamente. (1 <= C_i <= 100 para 1 <= i <= N). A última linha da entrada contém o número -1 duas vezes e não deve ser processado como um caso de teste.",
        "titulo": "Fazendo Nada",
        "descricao": "Um jovem casal faz o seu tempo ser o mais produtivo possível. Esta atividade é muito estressante, então eles decidiram \"perder\" algum tempo assistindo sua série de TV favorita. A série tem N temporadas, e cada temporada pode ter um numero diferente de capítulos de acordo com o seu sucesso, a disponibilidade de atores, tempo de produção e outros fatores externos. Cada capítulo tem uma duração de exatamente M minutos. Para manter-se com o enredo, antes de assistir a cada nova temporada, eles assistem, sem qualquer descanso, todos os capítulos de todas as temporadas anteriores. Isto os fez preocupar com quanto tempo irão gastar com este passatempo, que deve mantê-los calmos. Eles precisam de sua ajuda para que eles voltem para a situação estressante que tinham."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1436",
        "saida": "Para cada caso de teste, imprima uma linha no formato “Case x: a”\\(sem as aspas), onde x é o número do caso de teste e a é a idade do capitão.",
        "entrada": "A entrada começa com um número inteiro T (T ≤ 100), representando o número de casos de teste. Cada uma das próximas T linhas irá começar com um número inteiro N (1 < N < 11), número de membros da equipe, seguido por N inteiros separados por espaço representando as idades de todos os membros de uma equipe. Cada um destes N inteiros será entre 11 e 20(inclusive). Nota-se que, as idades serão dadas estritamente em ordem crescente ou estritamente em ordem decrescente. Nós não vamos mencionar qual está aumentando e qual está diminuindo, você tem que ser cuidadoso o suficiente para lidar com ambas as situações.",
        "titulo": "Jogo do Tijolo",
        "descricao": "Há uma vila em Bangladesh, onde o jogo de tijolo é muito popular. Jogo de tijolo é um jogo de equipe. Cada equipe é constituída por um número ímpar de jogadores. O número de jogadores deve ser maior do que 1, mas não pode ser superior a 10. A idade de cada jogador deve estar entre 11(inclusive) e 20(inclusive). Não há dois jogadores com a mesma idade. Há um capitão para cada equipe. A falta de comunicação entre dois jogadores depende da sua diferença de idade, ou seja, é maior se a diferença de idade for maior. Assim, eles selecionam o capitão de uma equipe de maneira que a quantidade de jogadores desta equipe que são mais jovens e mais velhos do que ele é igual. As idades de todos os membros da equipe são fornecidas. Você tem que determinar a idade do capitão."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1761",
        "saida": "A saída deverá apresentar a quantidade de cordão luminoso necessário para adornar a árvore. Observação: Os valores deverão ser arredondados em 2 casas decimais.",
        "entrada": "A entrada possui vários casos de teste. Cada caso de teste é composto de um valor de ponto flutuante de dupla precisão A que é o ângulo calculado pelo teodolito (1.00 < A < 90.00), um valor de ponto flutuante de dupla precisão B (1 ≤ B ≤ 100) que corresponde à distância entre o teodolito e a árvore e um valor de ponto flutuante de dupla precisão C (0,50 ≤ C ≤ 1.50 ) que é a altura do elfo medidor. O final da entrada é determinado por EOF.",
        "titulo": "Decoração Natalina",
        "descricao": "Neste Natal, Papai Noel designou alguns de seus mais dedicados elfos para enfeitar o quintal da fábrica de presentes no Polo Norte. No quintal haviam vários pinheiros, de tamanhos diversos. Papai Noel orientou aos elfos que para enfeitar uma árvore com cordões luminosos, o tamanho dos mesmos deveria ser 5 vezes o tamanho da árvore. Para descobrir a altura de cada árvore, Papai Noel deu a eles um teodolito velho (aparelho utilizado para medir ângulos) e mandou que utilizassem conceitos trigonométricos para descobrir a altura de cada árvore. Sua tarefa é ajudar os elfos a descobrir uma forma de calcular a quantidade de cordões luminosos necessários para cada árvore. Considere para este desafio que o teodolito fica posicionado na altura de cada elfo e que essa altura precisa ser computada. O teodolito informará valores em graus. Utilize neste problema PI = 3.141592654."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1444",
        "saida": "O seu programa deve imprimir na saída padrão uma linha por caso de teste, contendo o número de corridas necessárias para escolher o marreco campeão.",
        "entrada": "A entrada do programa é composta por vários casos de teste. Cada caso de teste é composto por uma linha contendo um número inteiro n, sendo que 0 ≤ n ≤ 100.000, sendo que n = 0 é utilizado unicamente para marcar o término das entradas, sendo que este deve ser desconsiderado.",
        "titulo": "Corrida dos Marrecos",
        "descricao": "Pirabeiraba é um distrito de Joinville, onde colonizadores alemães se instalaram no início do século XX. Anualmente há a festa do aipim, tubérculo conhecido como macaxeira no nordeste do Brasil. Para acompanhar o aipim, nada como um prato típico germânico: o marreco recheado! Para os entendidos de culinária, há uma magia nesta combinação: marreco com aipim. Contudo, para matar o marreco, você deve capturá-lo quando este estiver com o sangue bem quente. Para isto, o marreco deve estar cansado. Dizem que seu sangue quente é sinônimo de fertilidade, para não dizer: afrodisíaco! Mas isto é uma outra história. Nesta brincadeira de correr atrás do marreco, surgiu a ideia de cansá-los com uma corrida entre eles. O espaço físico da Sociedade Rio da Prata é limitado, assim, construíram apenas 3 raias para se realizar estas corridas. As corridas são feitas em grupos de 2 e 3 marrecos. Os primeiros colocados destes grupos são novamente divididos em grupos de 2 ou 3 para uma nova rodada. Isto acontece até que só reste o marreco campeão, que, como prêmio foge (por ora) da panela. Todos os marrecos sobreviventes devem correr na rodada, isto é, se não for possível dividir todos os marrecos em grupos de 3, alguns grupos de 2 devem ser formados, mas de forma a minimizar o número de corridas. Exemplos são vistos na Figura 1. Figura 1: Exemplos: Competição com 4, 5 e 6 marrecos. Os marrecos perdedores, por sua vez, serão os primeiros a irem para panela. Você foi convidado para comer marreco com aipim, mas, em troca, deve escrever um programa que calcule o número de corridas realizadas para se determinar o marreco campeão."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1214",
        "saida": "Para cada caso de teste imprima uma linha dando o percentual de estudantes que estão acima da média da turma, com o valor arredondado e com 3 casas decimais.",
        "entrada": "A entrada contém muitos casos de teste. A primeira linha da entrada contém um inteiro C, indicando o número de casos de teste. Seguem C casos de teste ou instâncias. Cada caso de teste inicia com um inteiro N, que é o número de pessoas de uma turma (1 ≤ N ≤ 1000). Seguem N inteiros, separados por espaços, cada um indicando a média final (um inteiro entre 0 e 100) de cada um dos estudantes desta turma.",
        "titulo": "Acima da Média",
        "descricao": "Sabe-se que 90% dos calouros tem sempre a expectativa de serem acima da média no início de suas graduações. Você deve checar a realidade para ver se isso procede."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2107",
        "saida": "Para cada instância, imprima uma linha contendo 4 caracteres. O primeiro caractere deve ser S se o observador enxerga a face da pirâmide oposta ao vértice A e N caso contrário. Analogamente para o segundo, terceiro e quarto caracteres, mas levando em conta as faces opostas aos vértices B, C e D respectivamente.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de 5 linhas. Cada linha contém três inteiros, separados por espaços e representam as coordenadas dos pontos A, B, C, D e X respectivamente, onde X é a posição do observador e os demais pontos são vértices da pirâmide. Todos os pontos fornecidos têm coordenadas inteiras entre -100 e 100. Os pontos A, B, C e D não são coplanares. Todos os pontos fornecidos são distintos. O ponto X não pertence nem ao interior nem a nenhuma face da pirâmide.",
        "titulo": "As Pirâmides de Ecaterinburgo",
        "descricao": "As pirâmides são estruturas muito frequentes em civilizações antigas de todo o mundo. As mais famosas, as do Egito, foram construídas mais de 2000 anos antes da passagem de Cristo pela Terra. Outras pirâmides famosas são as encontradas no México e América Central, ligadas às civilizações astecas e maias. Poucos conhecidas, porém, são as pirâmides construídas nos montes Urais, perto da cidade de Ecaterimburgo. Tais pirâmides remontam ao início da era cristã, e acredita-se que foram construídas por povos mongois, que invadiram a Europa através dos montes Urais vindos da Asia. Diferentemente das outras pirâmides conhecidas, estas tinham base triangular. Dessa forma tais pirâmides tinham 4 faces triangulares. Muitas dessas pirâmides eram construídas sobre colunas, o que permitia construções não paralelas ao solo e até mesmo que a base “de baixo” ficasse exposta. Isso era muito importante, pois as faces da pirâmide eram pintadas com figuras que representavam deuses antigos, figuras mitológicas, planetas e outros corpos celestes, e assim por diante. Dessa forma, em algum ponto da cidade, um cidadão poderia visualizar uma ou mais das faces da pirâmide. Isso era importante na religião local, e encontrar uma casa de cuja janela se vislumbrasse as melhores faces das pirâmides era muito valorizado naquela época. Sua tarefa é, dadas as posições no espaço dos vértices de uma pirâmide, e a posição no espaço de um observador, determinar quais das faces da pirâmide são visíveis a ele, considerando que não existe nenhum obstáculo entre o observador e a pirâmide."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1674",
        "saida": "Para cada caso de teste imprima na linha m os números e1, ..., em, separados por um caractere de espaço, de tal forma que 2e1, ..., 2ek são os primeiros m números na sequência definida, que são potências de 2. Você pode assumir que há pelo menos m potências de 2 entre os primeiros 7654321 elementos da sequência.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa com três inteiros m, N, k. Você pode assumir que 1 ≤ m ≤ 40, 1 ≤ N ≤ 1000, e 1 ≤ k ≤ 100. Então seguem k frações f1, ..., fk. Para cada fração, primeiro seu numerador é dado, seguido por seu denominador. Você pode assumir que ambos são números inteiros positivos menores ou iguais a 1000 e seu maior divisor comum é 1. O último caso de teste é seguido por um zero.",
        "titulo": "Fractran",
        "descricao": "Para jogar o \"jogo da fração\", correspondente a uma lista dada f1, f2, ..., fk de frações e inteiros começando em N, você repetidamente multiplica o inteiro que você tem em qualquer fase (inicialmente N) pelos primeiros fi na lista para os quais a resposta é um inteiro. Sempre que não exista tal fi, o jogo para. Formalmente, definimos uma sequência S0=N, e Sj+1=fiSj, se para 1 ≤ I ≤ k, o número fiSj é um inteiro, mas os números f1Sj, ..., fi-1SJ não são. Por exemplo, se temos a lista com oito frações f1=170/39, f2=19/13, f3=13/17, f4=69/95, f5=19/23, f6=1/19, f7=13/7, f8=1/3, e iniciando com N = 21, nós produzimos a sequência (finita) (21,39,170,130,190,138,114,6,2). Em geral, a sequência pode ser infinita. Dada uma lista de frações e um inteiro de início, calcule uma parte da sequência definida. Na verdade, estamos interessados apenas nas potências de 2 que aparecem na sequência."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1289",
        "saida": "Para cada conjunto de entrada, deve ser impresso um único valor com 4 casas decimais indicando a probabilidade de ganhar do jogador I, conforme apresentado no exemplo abaixo.",
        "entrada": "A primeira linha de entrada irá conter um inteiro S (S ≤ 1000), que indica a quantidade de casos de teste. Cada caso de teste é composto por uma única linha contendo 3 valores, separados por um espaço em branco. O primeiro destes 3 valores é um inteiro N (N ≤ 1000) que indica o número de jogadores. Segue um número de ponto flutuante P que indica a probabilidade de ocorrência de um evento desejado ou bem sucedido em um único lançamento de dado (Se por exemplo, \"bem sucedido\" significa conseguir um número 3, então P é a probabilidade de obter 3 em uma partida. Para um dado normal a probabilidade de se obter 3 é 1/6). O terceiro e último valor de cada caso de teste é um inteiro I (I ≤ N) que é o número de série do jogador cuja probabilidade de vencer deverá ser determinado (varia de 1 até N, inclusive). Você pode assumir que nenhum valor inválido de probabilidade (P) será fornecido como entrada.",
        "titulo": "Qual é a Probabilidade?",
        "descricao": "Probabilidade sempre foi uma parte importante de algoritmos. Os algoritmos probabilísticos vem para suprir uma lacuna deixada pelos algoritmos determinísticos, que não conseguem resolver determinados problemas em curto espaço de tempo. Neste problema, não estamos lidando com qualquer algoritmo probabilístico. Vamos apenas tentar determinar a probabilidade de ganhar de um determinado jogador. ​Um jogo é jogado através do arremesso de um dado(que não se deve presumir que ele tem seis lados como um dado comum). Se um determinado evento ocorre quando um jogador joga os dados (tal como a obtenção de um 3, ficando lado verde em cima ou seja lá o que for) este é declarado o vencedor. Tal jogador pode ser o jogador N. Assim, o primeiro jogador vai jogar os dados, depois o segundo e, finalmente, o jogador N e, novamente, o primeiro e assim por diante. Quando um jogador obter um determinado resultado ele é declarado vencedor e o jogo termina. Você terá que determinar a probabilidade de ganhar de um (O enésimo) destes jogadores."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1909",
        "saida": "Para cada caso, exiba o tempo de quique da bola escolhida por você, ou “impossivel” caso não exista uma bola que irá satisfazer o desejo de Kiko.",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N (1 ≤ N ≤ 100) e T (1 ≤ T ≤ 105) representando a quantidade de bolas que Kiko tem em mãos e o segundo que Kiko deseja ver as N+1 bolas quicando juntas. Na próxima linha, N inteiros no intervalo [1, T] seguem representando o tempo de quique de cada uma das bolas. A entrada termina com N = T = 0, a qual não deve ser processada.",
        "titulo": "Ajude Kiko",
        "descricao": "Depois de tanto pedir uma bola quadrada à sua mãe, Kiko não ganhou apenas uma, mas sim várias bolas de aniversário! A diversão de Kiko é soltar várias bolas de uma vez no chão e ficar observando elas quicarem. Como as bolas possuem tamanho, peso e são feitas de matérias diferentes, o tempo de quique de uma para outra é variável. Nesse problema iremos supor que toda bola quica infinitamente de acordo com seu tempo de quique. Kiko soltou ao mesmo tempo N bolas e percebeu que dependendo das bolas que solta, em alguns instantes, todas as bolas quicam ao mesmo tempo, e ele achou isso genial! Dado o tempo de quique em segundos das N bolas que Kiko escolheu e um tempo T, que é o segundo que Kiko deseja que todas as bolas quiquem ao mesmo tempo, sua tarefa é escolher o menor tempo de quique de mais uma bola para que todas as N+1 bolas, quando forem soltas juntas, quiquem todas ao mesmo tempo pela primeira vez exatamente no segundo T. Obs: O tempo de quique que irá escolher, não pode ser igual ao de nenhum previamente escolhido por Kiko e deverá ser maior que 1. Tempo de quique é a diferença dos tempos que a bola encosta no chão por duas vezes consecutivas. Se uma bola tem tempo de quique = 4, iremos considerar que ela quicará nos segundos 4, 8, 12, 16..."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1839",
        "saida": "Para cada região descrita na entrada, imprima uma linha contendo unicamente o número de possibilidades que os arquitetos têm para rearranjar as unidades quadradas de parede da região apenas dentro da própria região. Como o número de possibilidades pode ser muito grande, imprima apenas o resto que o número deixa quando dividido por 109 + 7.",
        "entrada": "A primeira linha da entrada informa as dimensões N e M (1 ≤ N, M ≤ 50) da planta em unidades quadradas, as quais representam respectivamente o número de linhas e o número de colunas do grid, e as N linhas seguintes descrevem o grid, de modo que unidades quadradas livres são representadas pelo caractere ‘.’ e unidades quadradas de parede pelo caractere ‘#’. Cada uma das demais linhas da entrada é composta por quatro inteiros xA, yA, xB e yB (1 ≤ xA < xB ≤ N, 1 ≤ yA < yB ≤ M), os quais definem uma região através do ponto superior esquerdo (xA, yA) e do ponto inferior direito (xB, yB) da região. A entrada termina em fim de arquivo.",
        "titulo": "A Câmara Secreta",
        "descricao": "A cidade de Chapecó, no oeste do estado brasileiro de Santa Catarina, é onde ficam situados a Reitoria da Universidade Federal da Fronteira Sul e um dos 6 campi da universidade. No próximo dia 25 de agosto, comemorar-se-ão os 98 anos da cidade, e os vereadores já estão organizando os preparativos da festa. O objetivo desta festa, além da celebração do aniversário da cidade, é arrecadar fundos para a construção da nova Câmara de Vereadores, a qual será uma Câmara Secreta, onde os vereadores poderão votar mais tranquilamente os aumentos da tarifa de ônibus sem serem tão incomodados pelos estudantes. A Câmara Secreta será um verdadeiro labirinto, isso para que eventuais invasores não consigam sair com tanta facilidade. Mas os arquitetos ainda não estão certos quanto à planta e querem fazer modificações no projeto. Para facilitar o trabalho, eles projetaram toda a planta sobre um grid de unidades quadradas, de modo que cada unidade quadrada fosse integralmente parede ou integralmente espaço livre, como na figura abaixo. Visando atacar o problema de modo mais restrito, os arquitetos ainda elegeram algumas regiões da planta para estudarem cada região isoladamente. Agora, eles querem saber qual o número de possibilidades que têm para rearranjar as unidades quadradas de parede de cada região apenas dentro da própria região. Por exemplo, para a região destacada na figura acima, há 5 possibilidades, as quais ilustramos na figura abaixo."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1381",
        "saida": "Para cada instância imprima uma linha contendo o número de soluções inteiras que respeitam as restrições.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por uma linha contendo dois inteiros N e C (1 ≤ N, C ≤ 1000000). Como este valor pode ser muito grande então imprima o resultado módulo 1300031.",
        "titulo": "Equações Diofantinas",
        "descricao": "Diofanto de Alexandria viveu no terceiro século d.C. e é considerado por muitos o “pai da Álgebra”. Seu livro “Arithmetica” tratava da solução de equações algébricas com coeficientes inteiros para as quais se busca soluções também inteiras. Tais equações são conhecidas como equações diofantinas. Um grande estudioso do trabalho de Diofanto foi Pierre de Fermat, conhecido matemático francês. Neste problema você deve resolver uma classe de equações diofantinas do tipo x1 + x2 + ... +xn = C. Ou seja, dados inteiros N e C, determine quantas soluções inteiras não-negativas existem para a equação x1 + x2 + ... +xn = C, onde 0 ≤ xi ≤ C para todo i = 1, 2, ... , N."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1093",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha. A linha deve conter apenas um número real, escrito com precisão de uma casa decimal, representando, em termos de percentagem, a probabilidade de o vampiro 1 vencer o combate.",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste consiste de uma única linha, contendo 4 inteiros EV1, EV2, AT e D separados por espaços (1 ≤ EV1, EV2 ≤ 10, 1 ≤ AT ≤ 5 and 1 ≤ D ≤ 10). O final da entrada é indicado por uma linha contendo quatro zeros, separados por espaços.",
        "titulo": "Vampiros",
        "descricao": "Felipinho está empolgado com seu novo jogo de RPG sobre guerras entre clãs de vampiros. Nesse jogo ele representa um personagem de um vampiro e constantemente entra em conflito contra vampiros de outros clãs. Tais batalhas são realizadas com base nas características de cada personagem envolvido e com a ajuda de um dado comum de seis faces. Por simplicidade, vamos considerar apenas as lutas entre dois vampiros, vampiro 1 e vampiro 2. Cada um possui uma energia vital (chamaremos de EV1 e EV2 respectivamente) e, além disso, são determinadas uma força de ataque AT e uma capacidade de dano D. O combate é realizado em turnos da maneira descrita a seguir. A cada turno um dado é rolado, se o valor obtido for menor do que ou igual a AT, o vampiro 1 venceu o turno, caso contrário o vampiro 2 é quem venceu. O vencedor suga energia vital do adversário igual ao valor D, ou seja, D pontos de EV são diminuídos do perdedor e acrescentados ao vencedor. O combate segue até que um dos vampiros fique com EV igual a ou menor do que zero. Por exemplo, suponhamos que EV1=7, EV2=5, AT=2 and D=4. Rola-se o dado e o valor obtido foi 3. Nesse caso, o vampiro 2 venceu o turno e, portanto, 4 pontos de EV são diminuídos do vampiro 1 (EV1) e acrescentados ao vampiro 2 (EV2) Sendo assim, os novos valores seriam EV1=3 e EV2=9. Observe que se no próximo turno o vampiro 2 ganhar novamente, o combate irá terminar. Os valores de AT e D são constantes durante todo o combate, apenas EV1 e EV2 variam. Apesar de gostar muito do jogo, Felipinho acha que os combates estão muito demorados e e gostaria de conhecer de antemão a probabilidade de vencer, para saber se vale a pensa lutar. Assim, ele pediu que você escrevesse um programa que, dados os valores iniciais de EV1, EV2, além de AT e D, calculasse a probabilidade de o vampiro 1 vencer o combate."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1660",
        "saida": "Para cada caso de teste imprima uma única linha indicando o número de soldados sobreviventes.",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste consiste numa única linha contendo 3 inteiros N (2 ≤ N ≤ 109), A and B (0 ≤ A, B < N) separados por um espaço em branco. Você pode assumir com segurança que o primeiro soldado morre com não mais que um milhão (106) de etapas. A entrada termina com um único 0 que não deve ser processado.",
        "titulo": "Flavius Josephus Está de Volta",
        "descricao": "Flavius Josephus uma vez foi preso em uma caverna junto com seus colegas soldados pelos romanos. Todos os colegas de Josephus preferiram se suicidar a se render. Então eles formaram um círculo e concordaram em um número K. Toda K-ésima pessoa no círculo cometeria suicídio. Entretanto, Josephus tinha prioridades diferentes e não queria morrer no momento. De acordo com a lenda ele conseguiu achar um lugar seguro no círculo onde ele seria o último a cometer suicídio. Ele então se rendeu aos romanos e se tornou um cidadão de Roma anos depois. Já um fato menos conhecido é que as almas de Josephus e seus companheiros todas renasceram em tempos modernos. Obviamente Josephus e seus colegas renascidos queriam evitar ao máximo um fiasco similar no futuro. Então eles contrataram uma empresa de consultoria para bolar um esquema melhor. Pelo bem da tradição todos os soldados deveriam ficar em um círculo. Dessa forma um número entre 0 e N-1 seria associado a cada soldado, onde N é o número de soldados. Como os números mutáveis no esquema antigo eram terrivelmente ineficientes, agora o número associado a cada soldado não muda durante o jogo. A empresa de consultoria vai prover dois números A e B que serão usados para calcular o número do próximo soldado da seguinte forma: Seja X o número do soldado atual, o número do próximo soldado é A · X2 + B mod N. Começa-se com o soldado número 0 e então os soldados calculam o número do próximo soldado de acordo com a fórmula acima. Já que todos merecem uma segunda chance um soldado cometerá suicídio na vez que seu número for calculado pela segunda vez. Na ocasião de um número de soldado for calculado pela terceira vez o jogo acaba e todos os soldados remanescentes se rendem. Você deve escrever um programa que dado o número de soldados N e as constantes A e B, determine o número de sobreviventes."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1795",
        "saida": "A saída é a soma de todos os elementos da linha R. Não esqueça do caractere de fim-de-linha após exibir a soma.",
        "entrada": "A entrada é o número de linha R (0 ≤ R ≤ 20).",
        "titulo": "Triângulo Trinomial",
        "descricao": "O triângulo trinomial é um triângulo numérico de coeficientes trinomiais. Ele pode ser obtido com uma linha contendo um único \"1\", a próxima linha contendo três 1 e cada elemento das linhas seguintes sendo calculado como a soma do elemento acima à esquerda, imediatamente acima e acima à direita: A primeira linha do triângulo trinomial é numerada com zero, a segunda linha é a de número 1 e assim sucessivamente. Sua tarefa é, dado um número de linha R, escrever um programa que exiba a soma de seus elementos. Por exemplo, a soma dos elementos da linha 2 é 9 = 1 + 2 + 3 + 2 + 1."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1279",
        "saida": "Para cada entrada, imprima as diferentes propriedades dos anos em diferentes linhas de acordo com a descrição anterior e os exemplos fornecidos abaixo.  Uma linha em branco deve separar cada caso de teste de saída. Note que existem quatro diferentes propriedades. Obviamente não deverá ter uma linha em branco após o último caso de teste.",
        "entrada": "A entrada conterá vários casos de teste. Cada caso de teste consiste de uma linha contendo um ano que nunca será menor do que 2000 (para evitar regras anteriores diferentes para anos bissextos), mas pode ter mais do que 1.000 dígitos. O final da entrada é determinado por fim de arquivo (EOF).",
        "titulo": "Ano Bissexto ou Ano não Bissexto",
        "descricao": "A antiga raça de Gulamatu é muito avançada no seu esquema de cálculo dos anos. Eles entendem o que é ano bissexto (ano que é divisível por 4 e não é divisível por 100, com a ressalva de que ano que são divisíveis por 400 são também anos bissextos.), E têm também alguns anos que ocorrem alguns festivais. Um deles é o festival Huluculu (acontece em anos divisíveis por 15) e o festival Bulukulu (acontece em anos divisíveis por 55 desde que também seja um ano bissexto). Dado um ano você terá de indicar quais propriedades este ano tem. Se o ano não é ano bissexto e nem ano de festival imprima a linha 'This is an ordinary year.', ou seja, que é um ano comum. A ordem de impressão das propriedades dos anos (se presente) é leap year -> huluculu -> bulukulu."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1647",
        "saida": "Para caso de texto, imprima uma linha com o número de rodadas necessárias para o jogo terminar. Você pode assumir que esse número cabe em um inteiro de 64 bits (em C/C++ você pode usar o tipo “long long” e em Java o tipo “long”).",
        "entrada": "A entrada é composta de vários casos de teste. Cada caso de teste é composto por uma linha, contendo um inteiro n (1 ≤ n ≤ 50), o número de bacias no jogo. A linha seguinte contém n inteiros mi (1 ≤ i ≤ n, 0 ≤ mi ≤ 1000), onde mi representa o números de bolas de gude na bacia i no início do jogo. Um único valor 0 indica o fim da entrada.",
        "titulo": "Um Jogo com Bolas de Gude",
        "descricao": "Existem n bacias, numeradas de 1 até n. Inicialmente, a bacia i contém mi bolas de gude. Uma rodada consiste em remover uma bola de gude de uma bacia. Quando uma bola de gude é removida da bacia i (i > 1), outra bola de gude é adicionada a cada uma das primeiras i-1 bacias; se uma bola de gude é removida da bacia 1, nenhuma nova bola de gude é adicionada. O jogo termina quando cada uma das bacias estiver vazia. Seu trabalho é determinar quantas rodadas são necessárias para o jogo terminar. Você pode assumir que o suprimento de bolas de gude é suficiente, e que todas as bacias são grandes o suficiente, de tal forma que cada rodada possível pode ser executada."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1338",
        "saida": "Para cada instância seu programa deve imprimir uma linha que contém o N -ésimo número livre de divisores quadrados perfeitos.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém um inteiro N , onde 1 ≤ N ≤ 20 000 000 000.",
        "titulo": "It-Miha",
        "descricao": "No Egito antigo as construções das pirâmides são cercadas de muitos mistérios. Muitos pesquisadores consideram que a tecnologia necessária para construí-las não estava disponível na época, e suspeitam que os egípcios tiveram ajuda de extraterrestres para fazê-las. Um exemplo de um desses mistérios são os números de “It-miha”. Na província egípcia de It-miha foi encontrada uma pedra em que uma sequência de números estava gravada. Aparentemente os números não tinham qualquer ligação, até que Poincaré, no final do século XIX conjecturou que os números gravados naquela pedra eram os 500 primeiros inteiros livres de divisores quadrados perfeitos. Um quadrado perfeito é um número que possui raiz quadrada inteira, como 1, 4, 9, 16, 25, etc. Dizemos que um número é livre de divisores quadrados perfeitos se não for divisível por um quadrado perfeito maior que 1. Pode parecer simples para nós, hoje, determinar tais números, mas devemos pensar que naquela época, há mais de 3500 anos, mesmo o sistema de numeração utilizado era outro, e tornava qualquer conta muito difícil. Vale lembrar que os números de “It-miha” são muito frequentes nas construções das pirâmides. A base da pirâmide de Quéops, por exemplo é de 210 x 210 e sua altura 105 metros. Todas as dimensões são números de “It-miha”!!! Os primeiros dez números de “It-Miha” são 1, 2, 3, 5, 6, 7, 10, 11, 13, 14. Sua tarefa neste exercícios será dado N determinar o N -ésimo número de “It-miha”."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1831",
        "saida": "Para cada caso de testes deve ser impressa a mensagem \"Caso #t: N laranja(s)\", onde t é o número do caso de teste (cuja contagem tem início no número um) e N é o total de laranjas. Caso exista mais de uma solução, deve ser escolhida a menor solução inteira positiva possível.",
        "entrada": "A entrada consiste em uma série de casos de teste. Cada caso de teste é representado por três linhas, onde cada linha representa o número de laranjas restantes ri (0 ≤ ri < Li) após o empacotamento em sacos com Li (2 ≤ Li ≤ 1000) laranjas cada, separados por um espaço em branco, com i = 1, 2, 3. Pode-se considerar que Li e ri são números inteiros tais que não há divisores comuns entre L1, L2, L3, e que as sobras se referem às laranjas que não foram devidamente embaladas (uma laranja só é considerada devidamente embalada se estiver em um saco com exatamente Li laranjas).",
        "titulo": "Dia Difícil de Trabalho",
        "descricao": "José trabalha no ramo de vendas de laranjas. Ele tem uma equipe de funcionários que embalam as laranjas para a venda e distribuição em sacos, onde cada saco contém o mesmo número de laranjas. Com o aumento da produção, José contratou novos funcionários. No primeiro dia de trabalho da nova equipe, os trabalhadores embalaram as laranjas em sacos com 5 laranjas cada, e restaram 2 laranjas. A equipe, contudo, não sabia que o número de laranjas em um saco havia subido para 7, de modo que tiveram que desembalar as laranjas e reempacotá-las em sacos com 7 unidades cada. Ao fim deste segundo serviço sobraram 3 laranjas. Ao chegar, José observou que eles não tinham atentado à promoção de fim de ano, onde cada saco teria 9 laranjas. Uma vez mais foram obrigados a reembalar as laranjas: desta vez não houve nenhuma sobra. Uma vez que o caminhão de entregas já tinha partido, a equipe de iniciantes percebeu que cometera mais um erro: ninguém contou o total de laranjas embaladas, nem o número de sacos preparados! Antes que tivessem que comunicar mais esta falha ao patrão, um dos funcionários sugeriu que seria possível, apenas com as informações sobre o número de laranjas em cada saco e os restos, recuperar o total de laranjas. Você pode escrever um software que auxilie os trabalhadores neste dia difícil de trabalho?"
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1213",
        "saida": "Para cada caso de teste, imprima quantos dígitos tem o múltiplo de n que atende os requisitos acima.",
        "entrada": "A entrada consiste de vários casos de teste e termina com EOF. Cada caso de teste contém um inteiro n (1 ≤ n ≤ 10000) não divisível por 2 ou por 5.",
        "titulo": "Ones",
        "descricao": "Dado qualquer inteiro n (1 ≤ n ≤ 10000) não divisível por 2 ou por 5, algum múltiplo de n deve ser um número que é uma sequência de números 1. Você deve então calcular e mostrar quantos dígitos tem o menor múltiplo de n que tem todos seus dígitos iguais a 1."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1754",
        "saida": "Para cada caso de teste imprima uma única linha contendo o inteiro K.",
        "entrada": "A primeira linha da entrada contém um inteiro T (1 ≤ T ≤ 100), o número de caso de teste. As T linhas seguintes contém 2 inteiros cada: X (1 ≤ X ≤ 1015) e Y (1 ≤ Y ≤ 105), o tempo necessário para completar o treinamento e o tempo do trajeto de Super Buu.",
        "titulo": "A Sala do Tempo",
        "descricao": "Na tentativa de parar Super Buu, Goten e Trunks entraram na Sala do Tempo para treinar. Dentro dessa sala o tempo passa mais rápido (1 segundo fora da sala pode ser equivalente a segundos, minutos, horas ou até mesmo dias dentro da sala). Goten e Trunks precisam de X segundos para finalizar o treinamento, porém Super Buu ficou impaciente e ordenou que Sr. Picollo o levasse até seus oponentes imediatamente. Sr. Picollo usou seus poderes telepáticos para alertar os meninos (que até então estavam apenas brincando pela sala) e eles iniciaram o treinamento imediatamente. Sr. Picollo tentou retardar ao máximo o trajeto até a entrada da Sala do Tempo, levando um tempo Y para tal. Seja K a quantidade de segundos que se passa dentro da sala durante 1 segundo fora da mesma. Encontre o menor valor de K que permita que os meninos finalizem o treinamento antes da chegada de Super Buu. Considere que independente da duração do treinamento os meninos jamais param para descansar, afinal eles tem várias sementes dos Deuses para repor as energias e que o treinamento se encerra no momento que Super Buu passar pela porta."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "2001",
        "saida": "Para cada caso de teste imprima o valor do FK e a soma de todos os elementos da função de Bile menores ou iguais a FK, separados por um espaço. Suas respostas devem ser apresentadas em módulo 303700049.",
        "entrada": "A entrada consiste em vários casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha de cada caso de teste contém dois inteiros, N ( 2 ≤ N ≤ 100 ) e K ( N ≤ K ≤ 1018 ), representando o número de valores inicialmente conhecidos da sequência de Bile. A segunda linha consiste de N inteiros Fi ( F1, F2, … ,FN ) e ( 0 ≤ Fi ≤ 1010 ) que representam os valores inicialmente conhecidos. A entrada termina com final de arquivo (EOF).",
        "titulo": "Bile",
        "descricao": "Bile é um garoto esperto que gosta bastante de recorrências. Ele estava participando de uma competição em que a melhor sequência ganharia um premio. Bile criou uma sequência F em que os N primeiros valores são conhecidos, e para descobrir o valor de FK, para um K N, é utilizada a formulação abaixo. Para N K: FK = 1*FK-1 + 2*FK-2 + ... + N*FK-N Mas Bile não sabe calcular de forma rápida os valores de sua sequência e pediu a sua ajuda. No primeiro caso de teste: N = 2, K = 3, F1 = 2, F2 = 5, F3 = F2 + 2*F1 = 9, F4 = F3 + 2*F2 = 19 ..."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1212",
        "saida": "Para cada linha de entrada, com exceção da última, você deve computar e imprimir a quantidade de operações \"leva 1\" que resultam da adição dos 2 números, no formato apresentado no exemplo abaixo.",
        "entrada": "Cada linha de entrada contém dois inteiros sem sinal com no máximo 9 dígitos. A última linha de entrada contém 0 0.",
        "titulo": "Aritmética Primária",
        "descricao": "As crianças são ensinadas a adicionar vários dígitos da direita para a esquerda, um dígito de cada vez. Muitos acham a operação \"vai 1\" (em inglês chamada de \"carry\", na qual o valor 1 é carregado de uma posição para ser adicionado ao dígito seguinte) um desafio significativo. Seu trabalho é para contar o número de operações de carry para cada um dos problemas de adição apresentados para que os educadores possam avaliar a sua dificuldade."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1219",
        "saida": "Para cada caso, seu programa deverá mostrar as saídas das áreas com girassóis, violetas e rosas respectivamente. Imprima suas respostas corretamente com 4 casas decimais.",
        "entrada": "Cada linha de entrada contém 3 inteiros a, b, c, que são os tamanhos dos 3 lados da região triangular, com 0 < a ≤ b ≤ c ≤ 1000. A entrada é terminada por final de arquivo (EOF).",
        "titulo": "Flores Coloridas",
        "descricao": "\"Roses are red, violets are blue...\" Mr Smith é um milionário muito conhecido – não por sua saúde, mas por seu senso de \"arte\"... Mr Smith Fez um jardim circular. Nos limites ele marcou três pontos e fez um triângulo. Ele então encontrou o maior círculo dentro da região triangular. Mais ou menos conforme a figura abaixo: Mr Smith então plantou girassóis amarelos, violetas azuis e rosas vermelhas, como mostrado na figura acima. (Combinaçào legal, não? :-) Dado os tamanhos dos 3 lados do triângulo, você deve encontrar as áreas que correspondem respectivamente aos 3 tipos de flores: amarelas, azuis e vermelhas."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1220",
        "saida": "Para cada viagem, imprima uma linha com a quantidade de dinheiro (em dólares e centavos), que deve ser trocada para equalizar os custos dos estudantes.",
        "entrada": "A entrada contém a informação de diversas viagens. A informação de cada viagem consiste de uma linha contendo um inteiro positivo n (1 ≤ n ≤ 1000) indicando o número de alunos na viagem, seguida por n linhas de entrada, cada uma contendo a quantidade em dólares e centavos, gastos por cada um dos estudantes. Nenhum estudante gastou mais de R$ 10.000,00. Uma única linha contendo 0 vem logo após a última viagem e determina o fim da entrada.",
        "titulo": "A Viagem",
        "descricao": "Alguns estudantes são membros de um clube que viaja anualmente para locais exóticos. Os seus destinos no passado incluíram Indianapolis, Phoenix, Nashville, Filadélfia, San Jose, e Atlanta. Nesta primavera eles estão planejando uma viagem para Eindhoven. O grupo concorda com antecedência em dividir as despesas de forma igual, mas não é prático ficar fazendo acerto a cada despesa nova que ocorre. Assim, cada indivíduo do grupo paga por coisas específicas, como refeições, hotéis, passeios de táxi, bilhetes de avião, etc. Após a viagem, as despesas de cada aluno são computados e dinheiro é trocado de modo a que o custo final para cada um deles é o mesmo, com diferença de no máximo um centavo. No passado, esta troca de dinheiro tem sido tediosa e demorada. Seu trabalho é calcular, a partir de uma lista de despesas,a quantidade mínima de dinheiro que tem de mudar de mãos, a fim de equalizar (dentro de um centavo) os custos de todos os estudantes."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1280",
        "saida": "A saída deverá conter, para cada caso de teste, um inteiro igual ao valor que José terá que pagar a João.",
        "entrada": "A primeira linha da entrada contém um inteiro T que é o número de casos de testes. As T linhas seguintes conterão dois inteiros m (0 ≤ m ≤ 4) e n (0 ≤ n ≤ 200), separados por um espaço, que representam os valores que José quer pagar e que João quer receber, respectivamente.",
        "titulo": "Amigos",
        "descricao": "João realizou uma tarefa para seu amigo José, mas os dois não chegaram a um acordo quanto ao pagamento pela realização da tarefa. Depois de muita discussão, João, que é muito bom em matemática, propôs um acordo. Inicialmente cada um deﬁniria, sem que o outro o soubesse, um determinado valor, ou seja, João especiﬁcaria um valor n e José um valor m.  Assim, se José propusesse não pagar nada, então ele teria que pagar n + 1 reais! Se João não quisesse receber nada e José propusesse pagar um ou mais reais, José pagaria o mesmo valor que teria que pagar caso João pedisse 1 real e José propusesse pagar apenas m - 1 reais!! Se ambos os valores fossem superiores a zero, então José pagaria o mesmo valor que teria que pagar caso José propusesse m - 1 reais e João quisesse receber o mesmo que receberia se José propusesse m reais e ele pedisse n - 1 reais!!! Eles também estipularam que se José estivesse disposto a pagar no máximo 3 reais, então João poderia pedir até 200 reais. Por outro lado, se José estivesse disposto a pagar 4 reais, então João só poderia pedir até 2 reais! Depois de horas discutindo essas regras, eles ﬁnalmente concordaram que seria muito trabalhoso calcular o valor devido por José. Portanto, escreva um programa que calcule o valor que José terá que pagar a João, segundo essas regras."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1630",
        "saida": "Para cada caso de teste imprima uma linha com o número mínimo de estacas necessário para cercar o tereno.",
        "entrada": "Haverão diversos casos de teste, cada caso de teste é descrito em uma linha por dois números X e Y (1 ≤ X, Y ≤ 100000000), os quais representam as dimensões do terreno. O final da entrada é indicado por final de arquivo.",
        "titulo": "Estacas",
        "descricao": "Marcos trabalha em uma empreiteira, sua tarefa é cercar com estacas os terrenos onde serão construidos prédios. Existem duas restrições para a distribuição destas estacas, elas devem ser colocadas de tal forma que a distância entre duas estacas seja sempre igual, e a segunda restrição é que Marcos deve usar o menor número possível de estacas. Marcos é seu amigo e pediu para que você desenvolva um programa para ajudá-lo."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1626",
        "saida": "Para cada inteiro N lido, imprima uma linha contendo dois valores: a soma dos divisores de N! distintos de N! e o próprio N!. Como ambos os valores podem ser muito grandes, imprima apenas o resto que deixam por 109 + 7.",
        "entrada": "Cada linha da entrada é constituída de um único inteiro N (2 ≤ N ≤ 105). A entrada termina em fim de arquivo (EOF).",
        "titulo": "Maratona All FACE",
        "descricao": "As universidades da região brasileira conhecida como Fronteira Sul participam da Maratona de Programação há muitos anos, revezando a sede da Etapa Regional especialmente entre as cidades de Erechim, no Rio Grande do Sul, e Chapecó, em Santa Catarina. Desde o ano passado, nossa sede tem sido a 2ª maior do país. Neste ano de 2014, participaram 34 times de 12 escolas na UNOCHAPECÓ, em Chapecó. As instituições envolvidas na organização do evento — em especial a UNOCHAPECÓ, a UNOESC, a URI e a recém-criada UFFS — acreditam que as competições de Programação são um dos principais meios para fortalecer a cultura de Programação, promovendo independência e inovação científica e tecnológica e maior relevância da Região no cenário nacional. Após a cerimônia de premiação da Etapa Regional deste ano, estudantes e professores das instituições supracitadas foram a um rodízio de pizza com dois objetivos: 1. matar a fome; 2. conversar sobre a organização da Maratona de Programação da Feira de Conhecimento, Cultura e Educação (FACE) de Chapecó, que aconteceria dali duas semanas. Durante a discussão, contudo, um dos professores propôs: “Por que não realizamos uma Maratona aqui mesmo, não de Programação, mas de pizza? Quem comer menos pizza paga uma rodada de cerveja para todos!”. Todos concordaram, e assim aconteceu a 1ª Maratona All FACE. O perdedor, contudo, quis a princípio se esquivar de pagar a cerveja. “Só pago se alguém for capaz de me dizer um número perfeito que seja também um fatorial”, disse ele. “6”, respondeu um outro estudante mais que depressa. Será que existe algum outro número perfeito que também seja fatorial? É claro que não, mas o perdedor, indignado por pagar cerveja para todos, resolveu fazer um programa para se convencer. Lembrando: um inteiro positivo M é dito perfeito se é igual à soma de todos os seus divisores distintos de M (por exemplo, 6 = 1 + 2 + 3 e 28 = 1 + 2 + 4 + 7 + 14), e dito um fatorial se existe um natural N tal que N! = M."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2135",
        "saida": "Para cada instâncias, você deverá imprimir um identificador \"Instancia k\", onde k é o número da instância atual iniciando por 1. Na linha seguinte imprima o inteiro que satisfaça a restrição descrita acima. Caso não exista tal inteiro imprima \"nao achei\". Após cada instância imprima uma linha em branco.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em um inteiro n (1 ≤ n ≤ 100) indicando o número de inteiros na linha seguinte que devem ser processados. A entrada termina com final de arquivo (EOF).",
        "titulo": "Recuperação",
        "descricao": "A nossa grandiosa Professora Cris no último aquecimento ficou conhecida como a grande maquiavélica do IME. Para quem não está a par do assunto, a digníssima professora exigiu que os alunos formassem uma fila em ordem lexicográfica (pelo nome) com no máximo k permutações. Isto fez com que muitos alunos nem sequer entrassem na sala para fazer a prova. No entanto, nesta seletiva ela resolveu se redimir perante seus alunos, e resolveu aplicar um probleminha para recuperação. Sua tarefa, mesmo não tendo sido reprovado, é dada uma sequência de n inteiros a1,a2,...,an.Onde -30 ≤ aj ≤ 30 para j = 1,,...,n, imprima, se existir, um inteiro ak tal que .Se houver mais de um inteiro que satisfaça esta condição, imprima o que aparece primeiro na sequência. Observação da professora: \"Meninos, lembrem-se que a soma de nenhum número diferente de zero é zero! Tá?\""
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1376",
        "saida": "Para cada caso de teste, seu programa deve imprimir R linhas com C inteiros cada, separados por um único espaço no mesmo formato que a entrada, o que representa a distribuição de terras, após todas as batalhas.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém quatro inteiros N, R, C e K, separados por espaços simples. N é o número de sucessores (2 ≤ N ≤ 100), R e C são a dimensões do reino (2 ≤ R, C ≤ 100), e K é o número de batalhas (1 ≤ K ≤ 100). Herdeiros são identificados por números inteiros sequenciais a partir de zero (0 é o primeiro herdeiro, 1 é o segundo herdeiro, ..., N - 1 é o último herdeiro). Cada uma das próximas linhas R contém C inteiros Hr,c separado por espaços simples, que representam a distribuição de terras inicial: Hr,c é o proprietário inicial do município em r linha e coluna c (0 ≤ Hr,c ≤ N - 1). O último caso de teste é seguido por uma linha contendo quatro zeros separados por espaços.",
        "titulo": "Irmãos",
        "descricao": "Na terra de ACM governou um grande rei que se tornou obcecado com a ordem. O reino tinha um forma retangular, e o rei dividiu o território em uma grade de pequenos municípios retangulares. Antes de morrer, o rei distribuiu os municípios entre seus filhos. No entanto, ele não tinha conhecimento de que seus filhos tinham desenvolvido uma rivalidade estranha: O primeiro herdeiro odiava o segundo herdeiro, mas não o resto, o segundo herdeiro odiava o terceiro herdeiro, mas não o resto, e assim diante... Finalmente, o último herdeiro odiava o primeiro herdeiro, mas não os outros herdeiros. Assim que o rei morreu, a estranha rivalidade entre os filhos do rei desencadeou uma generalizada guerra no reino. Ataques só ocorreram entre pares de municípios adjacentes (municípios adjacentes são aqueles que partilham uma fronteira vertical ou horizontal). Um município X atacava um município Y adjacente sempre que o proprietário do X odiava o proprietário de Y. O município que foi atacado sempre era conquistado pelo irmão atacante. Por uma regra de honra todos os ataques foram realizados ao mesmo tempo, e um conjunto de ataques simultâneos foi chamado de batalha. Depois de um certo número de batalhas, os filhos sobreviventes fizeram uma trégua e nunca lutaram novamente. Por exemplo, se o rei tinha três filhos, chamados 0, 1 e 2, a figura abaixo mostra o que acontece na primeira batalha de uma dada distribuição inicial de terras: Você foi contratado para ajudar um historiador de ACM a determinar, dado o número de herdeiros, a inicial distribuição de terras e o número de batalhas, como ficou a distribuição de terras após todas as batalhas."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1390",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma única linha de saída, indicando para quais bases a equação dada é válida. Se a expressão for verdadeira para infinitas bases, imprima \"B+\", onde B é a primeira base para a qual a equação é válida. Se a expressão for válida apenas para um conjunto finito de bases, imprima elas em ordem crescente, separadas por espaço. Se a expressão não for verdadeira em nenhuma base, imprima o caractere '*'.",
        "entrada": "Cada linha da entrada contém um caso de teste; cada caso de teste é uma equação da forma \"EXPR=EXPR\", onde ambos \"EXPR\" são expressões aritméticas com no máximo 17 caracteres. Todas expressões são válidas e contém apenas os caracteres '+', '*' e os dígitos entre '0' e '9'. Nenhuma expressão contém sinais de mais no começo da equação e nenhum número tem zeros à esquerda. O final da entrada é indicado por uma linha contendo apenas \"=\".",
        "titulo": "Bases",
        "descricao": "O que você consegue se multiplicar 6 por 9? A resposta, é claro, é 42, mas somente se você fizer os cálculos na base 13. Dado um inteiro B ≥ 2, o sistema de numeração na base B é a maneira de escrever inteiros usando somente dígitos entre 0 e B - 1, inclusive. Em um número escrito na base B, o dígito mais à direita tem seu valor multiplicado por 1, o segundo mais à direita tem seu valor multiplicado por B, o terceiro mais à direita tem seu valor multiplicado por B2, e assim por diante. Algumas equações são verdadeiras ou falsas dependendo da base em que são consideradas. A equação 2 + 2 = 4, por exemplo, é verdadeira para qualquer B ≥ 5 - ela não vale para a base 4, por exemplo, visto que não existe dígito '4' na base 4. Por outro lado, uma equação como 2 + 2 = 5 nunca é verdadeira. Escreva um programa que, dada uma equação, determine em quais bases ela é verdadeira."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1767",
        "saida": "Para cada caso de teste de entrada, seu programa deverá imprimir três linhas de saída, com mensagem correspondente conforme o exemplo abaixo, seguidas por uma linha em branco. A primeira destas linhas deverá conter a quantidade de brinquedos que Y-URI irá carregar até o trenó. A segunda linha conterá o peso total destes brinquedos. A última linha, por pedido de Noel, será a quantidade de pacotes que sobraram para uma viagem futura. No segundo caso de teste abaixo, por exemplo, foram selecionados para a viagem 106 brinquedos que estão agrupados nos pacotes com 24, 2, 3, 4, 5 e 8 kg, somando um total de 46 kg. Para a maior quantidade de brinquedos selecionada, haverá apenas uma quantidade de peso e pacote que irá sobrar.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que é o número de casos de teste, ou melhor, o número viagens que Papai Noel irá fazer para entregar os presentes. Cada viagem inicia com um inteiro Pac (1 < Pac < 100) que indica a quantidade de pacotes disponíveis para esta viagem. As próximas Pac linhas irão conter dois valores inteiros cada uma, qt (1 < qt ≤ 300) e peso (1 ≤ peso ≤ 50) que são respectivamente a quantidade de brinquedos e o peso de cada um destes pacotes, separados por um espaço em branco.",
        "titulo": "Saco do Papai Noel",
        "descricao": "Papai Noel vai começar a fazer as suas viagens de trenó para entregar os presentes de Natal. A SBC (Sociedade Brasileira de Carregadores) determinou que o máximo de peso de cada saco com presentes, poderá ser 50 kgs, para que os elfos, que são \"puxa-sacos\" ou ajudantes de Papai Noel não fiquem com dores nas costas ao carregarem o trenó e também para que o Papai Noel não se machuque ao entregar os brinquedos. Uma vez que todos os brinquedos estão agrupados em pacotes, sua tarefa é auxiliar com um programa que agrupe o máximo de brinquedos possíveis dentro do peso limite de 50 kgs. Logo na sequência Y-URI, que é o elfo chefe, levará este saco até o trenó para que Noel possa seguir com sua viagem."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1545",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, o maior número de pontos que Alberto consegue obter.",
        "entrada": "Cada caso de teste é descrito em duas linhas. A primeira linha contém um inteiro par N (2 ≤ N ≤ 104), que indica o número de cartões sobre a mesa. A segunda contém N inteiros, que descrevem a sequência de cartões. Cada um dos N inteiros cabem em um inteiro de 32 bits.",
        "titulo": "Cartões II",
        "descricao": "Wanderley, após descobrir que Alberto utilizava-se ilicitamente de um programa para ajuda-lo, decidiu parar de jogar o jogo dos cartões. Agora, Alberto passa suas tardes jogando o jogo sozinho. A versão individual do jogo é muito semelhante à original. Um conjunto com um número par de cartões contendo números inteiros é disposto sobre uma mesa, um ao lado do outro, formando uma sequência. Alberto pode pegar um dos dois cartões das pontas, que é computado na soma. A seguir, Alberto descarta um dos cartões que agora está em uma das pontas, e assim sucessivamente, até que os cartões acabem. Alberto tem como objetivo maximizar o número total de pontos que ele consegue nos cartões que não descarta, somando os valores dos cartões escolhidos. Você deve escrever um programa que, dada a sequência de cartões, determine o maior número de pontos que Alberto consegue obter."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1649",
        "saida": "Para cada caso de teste, imprima o número mínimo de operações necessárias para criar a pintura, ou -1 se for impossível.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com uma linha contendo quatro inteiros n, m, r e c. (1 ≤ r ≤ n ≤ 100, 1 ≤ c ≤ m ≤ 100). As próximas n linhas descrevem uma linha de pixels da pintura que você deseja criar. Cada linha consiste em m caracteres com a descrição do pixel desejado a ser pintado (0 indica a cor branca, 1 indica a cor preta). Os casos de testes terminam com uma line contendo 4 zeros.",
        "titulo": "Ferramenta Irritante de Pintura",
        "descricao": "Talvez você queira saber o que é uma ferramenta irritante de pintura? Primeiro de tudo, a ferramenta de pintura falada só aceita cor preta e branca. Portanto, uma imagem consiste em uma área retangular de pixels, que pode ser preto ou branco. Em segundo lugar, existe apenas uma operação para mudar a cor dos pixels: Selecione uma área retangular de r linhas e c colunas, que está completamente dentro do quadro. Como resultado da operação, cada pixel no interior do retângulo selecionado muda a sua cor (preto vira branco e branco vira preto). Inicialmente, todos os pixels são brancos. Para criar uma imagem, a operação descrita acima pode ser aplicada várias vezes. Você pode pintar uma certa imagem que você tem em mente?"
    },
    {
        "nivel": "9",
        "assunto": "6",
        "numero": "1565",
        "saida": "Para cada teste, a saída consiste de uma linha contendo o número mínimo de pontos que precisam ser adicionados na matriz para conectar todos os pontos. Caso seja impossível conectar todos os pontos, imprima 'impossivel'.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é iniciado por uma linha contendo dois inteiros N e M indicando as dimensões da matriz (1 ≤ N*M ≤ 100). Após a primeira linha, seguem N linhas descrevendo a matriz da mesma maneira mostrada no enunciado.",
        "titulo": "Ligue os Pontos",
        "descricao": "Vou te fazer um desafio! Você irá receber uma matriz de dimensões N por M, com caracteres iguais a '-', '#' e '*'. Veja um exemplo a seguir: *-#-* ----- --*-- ####- *---- Os caracteres '#' significam obstáculos, os caracteres '-' significam espaços vazios e os caracteres '*' significam pontos. O seu trabalho é colocar o mínimo de pontos adicionais necessários para deixar todos os pontos conectados. Você só pode colocar mais pontos em espaços vazios. Por exemplo, para a matriz acima, você precisa de no mínimo 7 pontos adicionais para ligar os pontos, assim como mostra a figura a seguir: *-#-* -*-*- --*-* ####* ****- Você aceita o desafio?"
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1636",
        "saida": "Para cada caso de teste imprima uma permutação dos números inteiros de 1 a n, que é tanto antimonotônica quanto cíclica. No caso de existirem várias soluções, você pode imprimir qualquer uma. Separe todos os inteiros por caracteres em branco.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste consiste de uma linha contendo um número inteiro n, (3 ≤ n ≤ 106), o número de inteiros na permutação. A entrada é terminada por n = 0.",
        "titulo": "Permutações Antimonotônicas Cíclicas",
        "descricao": "Uma permutação é uma sequência de números inteiros, que contém cada número inteiro entre 1 e n exatamente uma vez. Neste problema estamos à procura de permutações com propriedades especiais: Antimonotônica: para cada 3 valores consecutivos pi-1, pi, pi+1 (1 < i < n), pi deve ser tanto o menor ou o maior dos três valores. Cíclica: A permutação deve consistir de apenas um ciclo, isto é, quando nós utilizarmos pi como um ponteiro a partir de i a pi, ele poderá começar na posição 1 e seguir os ponteiros alcançando todas as posições de n antes de retornar para a posição 1."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2072",
        "saida": "Para cada instância imprima uma linha contendo um único inteiro, o maior número de balas de canhão que Anúbis pode derrubar.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N, onde 1 ≤ N ≤ 50, indicando o número de balas de canhão. Cada uma das próximas N linhas contém três inteiros cada, xi, yi e zi, onde −1000 ≤ xi, yi, zi ≤ 1000, indicando as coordenadas da i-ésima bala de canhão no momento em que Anúbis pode invocar seus raios. Os franceses tem uma mira muito boa, assim eles as vezes atiram balas que vão grudar uma na outra para aumentar o dano. Logo, não se assuste se houverem pontos repetidos na entrada. Eles representam balas diferentes que estão juntas. Nesses casos cada bala é contada separadamente caso Anúbis decida acertá-las.",
        "titulo": "Canhões de Anúbis",
        "descricao": "Anúbis está preocupado, soldados franceses estão praticando tiro ao alvo com balas de canhão na esﬁnge novamente! Dessa vez ele vai tentar impedir que outras partes da esﬁnge tenham o mesmo destino do seu nariz favorito. Para parar os canhões, ele pode invocar raios, que destroem tudo em que tocam, inclusive as balas de canhões. Mas os deuses egípcios já não tem tantos seguidores, o que limita os seus poderes. Anúbis só pode invocar os raios em determinados instantes de tempo. Por sorte um desses condiz com um momento em que as balas estão no ar. Anúbis quer aproveitar essa chance para derrubar o maior número possível de balas. Acontece que para fazer a invocação, Anúbis precisa temporariamente passar para o nosso plano de existência. Assim ele só pode acertar alvos que estejam todos num mesmo plano. Ajude Anúbis a derrubar o maior número possível de balas de canhão."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1744",
        "saida": "Imprima uma linha contendo um inteiro que representa o número mínimo de moedas que Shagga terá que pagar a Dolf para ordernar as pedras de tal forma que todas as pedras pretas estejam à esquerda de todas as pedras brancas.",
        "entrada": "A primeira linha contém dois inteiros A e B (0 ≤ B <A ≤ 106), que representam, respectivamente, o custo da troca de duas pedras e o valor da restituição ao trocar pedras adjacentes. A segunda linha contém uma string não-vazia S de, no máximo, 5.000 caracteres. O i-ésimo caracter de S indica a cor da i-ésima pedra, a partir da esquerda para a direita, no arranjo inicial das pedras. O caracter é a letra maiúscula \"B\" ou a letra maiúscula \"W\", indicando, respectivamente, uma pedra preta ou uma pedra branca.",
        "titulo": "Pedras Pretas e Brancas",
        "descricao": "Shagga e Dolf gostam de jogar um jogo com pedras, cada uma das quais é preto ou branco. No início do jogo, Dolf organiza todas as pedras em uma única linha, da esquerda para a direita. Então, o objetivo da Shagga é reordenar as pedras para que todas as pedras pretas fiquem à esquerda de todas as pedras brancas. Para fazer isso, ele pode escolher qualquer par de pedras de cor diferente e trocar as suas posições, pagando A moedas para Dolf no processo. No entanto, se as duas pedras cujas posições que ele está trocando são adjacentes, Dolf deve dar-lhe um reembolso de B moedas, o que significa que a operação vai custar a Shagga apenas A - B moedas. Shagga não é muito esperto, por isso ele ainda não percebeu que ele só vai perder moedas ao jogar este jogo. No entanto, ele está consciente de suas limitações, então ele sabe que, se ele jogar de forma ótima ele perderá menos moedas do que ele está perdendo agora, com sua estratégia de escolher aleatoriamente as pedras que ele troca a cada movimento. Por isso, ele quer saber o número mínimo de moedas que ele terá que pagar a Dolf, a fim de chegar a ordenação desejada das pedras, e ele está ameaçando a te dar de aleatoriamentento as cabras, se você não ajudá-lo."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1900",
        "saida": "Para cada caso de teste imprima o número de Sequências Nulas na sequência dada.",
        "entrada": "A primeira linha do caso de teste contém um inteiro N (1 ≤ N ≤ 105) que representa a quantidade dos números escolhidos por Chico. Na segunda linha do caso de teste contém os N inteiros Vi (-106 ≤ Vi ≤ 106) separados por espaços representando os elementos da sequência.",
        "titulo": "Sequências Nulas",
        "descricao": "Chico ganhou de aniversário uma lista de números inteiros e chamou seu amigo Mário para brincar com ele. A brincadeira é a seguinte: \"Chico vai escolher N números da lista e vai colocá-los em uma sequência aleatória, e o Mário terá que dizer se existe pelo menos uma Sequência Nula nesta nova sequência.\". Vamos chamar de uma Sequência Nula, uma sequência contígua de inteiros onde a soma de todos os elementos é igual a zero. Dada a sequência do primeiro caso de teste: (-2,-1,0,1,2). Exemplo de Sequências Nulas: (-2,-1,0,1,2), (-1,0,1), (0). Exemplo de Sequências Não Nulas: (-1,1), (-2,0,2), (1). Chico está furioso por que Mário está ganhando toda hora, então ele resolveu dificultar o jogo. Agora ele não terá que dizer se existe ou não uma Sequência Nula, mas dizer quantas sequências na lista são Sequências Nulas. Agora quem está ficando furioso é o Mário e você tem que ajudá-lo sem que o Chico perceba."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2042",
        "saida": "Imprima uma linha com um inteiro T que representa o máximo de felicidade que Fofão consegue proporcionar ao seus fãs na viagem do bairro P ao bairro D. Se for impossível para Fofão chegar com vida ao bairro D, imprima -1.",
        "entrada": "A entrada descreve um único caso de teste. A primeira linha consiste de dois inteiros N e M, que representam a quantidade de bairros e a quantidade de ruas, respectivamente. Os bairros são enumerados de 1 até N. (2 <= N <= 100, 1 <= M <= (N * (N - 1)) / 2) A segunda linha consiste de dois inteiros P e D, que representam o bairro de partida e o bairro de destino, respectivamente. (1 <= P, D <= N e P != D) A terceira linha contém um inteiro B, o qual representa a quantidade de borracha inicial no solado de Fofão. (1 <= B <= 1000). As M linhas seguintes descrevem as ruas (e o muro presente em cada rua). Cada rua é descrita por quatro inteiros: Xi, Yi, Fi e Si, que representam, respectivamente, o primeiro bairro que é conectado à rua, o segundo bairro que é conectado à rua, a quantidade de felicidade que o muro presente na rua proporciona aos fãs quando um mortal é aplicado por Fofão e a quantidade de borracha do solado de Fofão que é gasta quando um mortal é aplicado no muro da rua. (1 <= Xi, Yi <= N, 1 <= Si <= 1000, 1 <= Fi <= 10^9 e Xi != Yi)",
        "titulo": "Fofão da Pérsia",
        "descricao": "É sabido que uma organização de seres extraordinários vem ascendendo nos últimos tempos. Não se sabe ao certo de onde ou como ela surgiu, mas é notável o quão influente mundialmente são seus membros e o quanto são adorados. Pergaminhos encontrados há décadas indicam que chegaria um tempo em que uma organização que traria felicidade à humanidade chamada Carreta Furacão surgiria e, ao que tudo indica, esse tempo chegou. As escrituras também dão nomes aos lendários seres que fazem parte da organização: Popeye, Capitão América, Patatá, Ben 10, Homem Aranha, Mickey Mouse, Pica-Pau e seu líder supremo: Fofão. As habilidades malabarísticas de Fofão fazem jus a seu apelido de sua forma suprema: Fofão da Pérsia. Apesar de toda sua superioridade, Fofão da Pérsia tem um problema. Sua cidade é formada por bairros e ruas bidirecionais que os ligam. Em cada rua há exatamente um muro. Ele está a bordo do trenzinho da Carreta Furacão em um bairro P, mas todos os outros membros da Carreta Furacão estão em um bairro D. Com o objetivo de reunir todos os membros e formar o Exódia, Fofão deseja chegar no bairro D (o trenzinho consegue chegar em qualquer bairro partindo de qualquer outro bairro). Quando o trenzinho entra em uma rua, Fofão não resiste à tentação e sempre desce do trenzinho para aplicar o seu famoso mortal no muro daquela rua (ver imagem abaixo) e retorna logo após. Cada mortal proporciona aos fãs que estão dentro do trenzinho um nível de felicidade Fi, a depender da altura do muro. O solado do tênis de Fofão começa com uma quantidade B de borracha e, para cada mortal em um muro, uma quantidade Si de borracha é gasta do solado, a qual depende das condições do muro. Se em algum momento a quantidade de borracha no solado de Fofão for X e ele tentar aplicar um mortal em um muro que tem Si > X, Fofão explode. Fofão (e o motorista do trenzinho) não se importa de passar pela mesma rua várias vezes; a única coisa que ele deseja é chegar no bairro D com vida e tendo proporcionado o máximo de felicidade aos fãs dentro do trenzinho. Note que se em dado momento o trenzinho chegar no bairro D, o motorista irá tirar um cochilo e nenhuma rua mais poderá ser percorrida. Escreva um programa que diga ao Fofão qual é o máximo de felicidade que ele consegue proporcionar aos fãs que estão dentro do trenzinho."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1432",
        "saida": "Para cada caso de teste, imprima o número do caso e a resposta, como mostrado abaixo.",
        "entrada": "Cada linha da entrada representa um caso de teste, que contem o tamanho do padrão N (1 ≤ N ≤ 30), e o padrão P. Pode haver um máximo de 35 casos de teste. A entrada termina quando N é 0.",
        "titulo": "Strings Binárias Triple-Free",
        "descricao": "Uma sequência binária consiste em zeros e uns. Dada uma string binária T, se não houver uma seqüência binária S tal que SSS (três cópias do S concatenadas) é uma subsequência de T, dizemos que T é o triplo-free. Um padrão consiste de uns e zeros, asteriscos, onde um asterisco (*) pode ser substituído por um ou zero. Por exemplo, o padrão de 0**1 contém strings 0001, 0011, 0101, 0111, mas não 1001 ou 0000. Dado um padrão P, quantas strings binárias triple-livres contém?"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1210",
        "saida": "Para cada instância a saída deve conter duas linhas. Na primeira, imprima o custo mínimo para o período dado. Na segunda, uma sequência crescente de inteiros, separados por espaços, indicando os anos nos quais são trocadas as máquinas. Se a máquina nunca é trocada, então imprima apenas um 0. Caso exista mais de uma sequência possível, escolha aquela na qual as máquinas são trocadas o mais cedo possível e sempre que possível (por exemplo, entre as sequências “1 4 7” e “1 2 8 10 14” escolha a segunda).",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância possui 4 inteiros, N (1 ≤ N ≤ 2000), I (1 ≤ l ≤ M), M (1 ≤ M ≤ 2000) e P (1 ≤ P ≤ 1000) representando, respectivamente, o período de produção, a idade inicial do destilador, a idade máxima do destilador e o preço de um destilador novo. A linha seguinte contém M inteiros, separados por espaços, correspondendo ao custo de manutenção Ci (1 ≤ Ci ≤ 1000), para i = 0,1,2, ... M - 1. A próxima e última linha contém M inteiros, separados por espaços, correspondendo ao valor de venda Vi (1 ≤ Vi ≤ P), para i = 1,2, ..., M.",
        "titulo": "Produção Ótima de Ótima Vodka",
        "descricao": "A produção de vodka da cidade de São Petersburgo é famosa em todo o mundo. Conta a lenda que a vodka produzida é distribuída diretamente na casa de alguns dos funcionários mais graduados da empresa através do sistema de abastecimento de água. Ou seja, basta abrir a torneira e a vodka jorra geladinha (afinal os canos estão correndo a uma temperatura negativa na maior parte do ano) do cano. Isso causa diversos problemas de segurança, afinal as pessoas escavam as ruas procurando os supostos canos de vodka que saem da empresa. Este não é o único problema enfrentado na produção de vodka da cidade. Para garantir o padrão de qualidade exigido da bebida, ela é produzida em apenas um destilador, que tem uma vida útil bem definida, de M anos. Sua manutenção varia dependendo da idade do equipamento. O custo de manutenção é Ci , onde i é a idade do destilador, e deve ser pago todo ano, até mesmo para destiladores novos. Estes destiladores têm um preço P quando comprados novos (idade 0) e os destiladores usados em fábricas russas são disputados por destilarias de todo o mundo, onde são usados ainda por muitos anos, e por museus. O preço de venda de um destilador com idade i é Vi. Note que um destilador com idade M não pode mais ser usado e deve ser vendido. Sua tarefa neste problema é decidir em quais instantes a empresa deverá trocar o destilador de forma a minimizar o custo de produção ao final de N anos (a partir do ano 1). Considere que a troca de destiladores só pode ser feita no início do ano."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1596",
        "saida": "Para cada instância imprima uma linha com os jogadores ordenados de acordo com a classificação de Yusuf II. Caso exista mais de uma classificação possível, qualquer uma será aceita. Caso não exista classificação de acordo com o esquema de Yusuf II, imprima a palavra inclassificavel.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 1.000) correspondendo ao número de jogadores do torneio. Os jogadores são numerados de 1 a N . Para cada i = 1, . . . , N , a (i + 1)-ésima linha contém um inteiro di ≥ 0 seguido pela identificação dos di jogadores vencidos pelo jogador i.",
        "titulo": "Torneio de Yusuf II",
        "descricao": "Marrakech é uma das cidadelas do mundo árabe. A cidade foi fortificada nos anos 1122-1123 por Ali ibn Yusuf, filho de um dos primeiros dirigentes da cidade. Um dos grandes chefes da cidade foi o Califa Abu Yaqub Yusuf ‘al-Mustansir’ também conhecido como Yusuf II. O califa viveu apenas 21 anos (1203-1224) e reinou desde os seus 10 anos. Conhecido como um amante das artes e esportes, foi um grande incentivador da construção de palácios e museus. Idealizou uma grande competição de xadrez, uma de suas paixões, disputada por toda a corte. O esquema imaginado por Yusuf II para determinar a classificação do campeonato de xadrez era muito interessante. Todos os N competidores jogavam contra todos. Um jogador K é chamado de ملك (malik) se para todo jogador J diferente de K, ou K vence J ou K vence algum jogador J' que vence J. A classificação do campeonato é uma ordenação dos jogadores J1 , J2 , . . . , JN tal que cada jogador Ji , 1 ≤ i < N , vence Ji+1 e é ملك se considerarmos os jogadores que aparecem depois dele na ordenação, isto é, ignorando os anteriores. Sua tarefa será, dados os resultados dos jogos de um torneio de xadrez em Marrakech, determinar se é possível obter uma classificação de Yusuf II para aquele campeonato."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1843",
        "saida": "Imprima uma linha contendo unicamente o inteiro que representa o menor número de cliques que o jogador precisa fazer para tornar o grid monocromático. Tome cuidado! Fomos generosos ao definirmos os casos de teste e o limite de tempo deste problema, mas nem tanto.",
        "entrada": "A primeira linha da entrada é constituída por 2 números inteiros N e M (1 ≤ N ≤ 4, 1 ≤ M ≤ 5), os quais representam respectivamente o número de linhas e o número de colunas do grid. As próximas N linhas descrevem a configuração inicial do grid, representando cada cor por um inteiro entre 0 e 9. A entrada não é constituída por nenhuma outra linha.",
        "titulo": "O Enigma do Príncipe",
        "descricao": "Neste ano, ao invés de se submeterem a rituais de iniciação humilhantes, os calouros do curso de Ciência da Computação resolver fazer algo muito mais humanitário para celebrarem seu ingresso numa universidade federal. Primeiramente, eles foram doar sangue no HEMOSC, o hemocentro do estado de Santa Catarina. Depois, ainda com metade do sangue no corpo, eles foram até uma escola pública, o Centro de Educação Infantil Municipal Pequeno Príncipe (ou simplesmente Pequeno Príncipe), realizar trabalhos voluntários. Numa das atividades desenvolvidas, as crianças da escola deveriam jogar no computador um jogo single-player muito interessante chamado Flood It!. Em Flood It!, é apresentado ao jogador um grid N × M em que cada célula está pintada com uma cor, como na figura à esquerda. Quando o jogador clica numa célula qualquer do grid de cor α, a célula no canto superior esquerdo do grid, chamada de origem, de cor β, assume a cor α, mas não somente ela: todas as células que estejam conectadas à origem por caminhos que usam apenas as cores α ou β também assumem a cor α. As adjacências entre as células devem ser consideradas apenas nos sentidos horizontal ou vertical para formar os caminhos. Por exemplo, quando o jogador clica na célula destacada na figura à esquerda, o grid assume a coloração da figura à direita. O objetivo do jogo é tornar o grid monocromático."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1648",
        "saida": "Para cada caso de teste imprima uma linha contendo o menor preço por área que se pode conseguir comprando qualquer uma das pizzas no máximo uma vez. Faça um arredondamento desse número na quarta casa decimal, note que você pode combinar um número de cupons de descontos arbitrários: Por uma pizza de custo 10, e dois cupons de desconto de 50 e 20, para esta mesma pizza, você só teria de pagar 10 * 0.8 * 0.5 = 4 (unidades monetárias).",
        "entrada": "O arquivo de entrada contém diversos casos testes. Cada caso de teste começa com um número m, o número de pizzas Alfredo oferece. A entrada é terminada pelo m = 0.Caso contrário, 1 ≤ m ≤ 15. Logo, segue m linhas descrevendo as pizzas. Cada uma destas seguintes linhas descreve pizza i (1 ≤ i ≤ m) e começa com os três números inteiros pi, ai e ni especificando respectivamente o preço da pizza, sua área e número de cupons de desconto conseguidos ao compra-la, 1 ≤ pi ≤ 10000, 1 ≤ ai ≤ 10000 e 0 ≤ ni < m. Haverá em seguida ni pares de números inteiros xij e yij, que especificam o índice xij (1 ≤ xij ≤ m, xij ≠ i) da pizza que se obtém cupom de desconto e yij (1 ≤ yij ≤ 50) o desconto em termos de porcentagem obtidos ao comprar a pizza xij. Você pode assumir que para cada i o valor de xij é um par distinto.",
        "titulo": "Ajude Bob",
        "descricao": "Bob ama Pizzas, mas sempre está sem dinheiro. Certo dia ele lê nos jornais que sua pizzaria favorita, Alfredo's Pizza Restaurant, está realizando uma competição: para a primeira pessoa que lhes disser o menor preço por área, que se pode conseguir ao comprar qualquer uma das pizzas no máximo uma vez, receberá a doação de uma pizza grande. \"Essa tarefa é fácil!\", pensou Bob, \"Para cada pizza somente presciso calcular a razão de cada preço e o menor quociente será a resposta.\". Infelizmente, o problema é um pouco mais complicado: Alberto desponibiliza cupons de desconto com a venda de algumas pizzas, para obter outra pizza mais barato, e pior, esses cupons podem ser combinados. As pizzas precisão ser compradas uma após a outra, e não é possivel usar um cupom para ter um desconto retrospectivamente para uma pizza a qual já foi comprada. Você pode ajudar Bob a ser o primeiro a resolver esta tarefa, e ganhar a pizza de graça?"
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1408",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único número inteiro, indicando o número mínimo de trocas que Mário precisa efetuar para satisfazer o pedido do novo cliente (ou seja, ter N armários consecutivos lívres).",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois números inteiros N e L (1 ≤ N ≤ L ≤ 100000), indicando quantos armários são necessários para acomodar o pedido de locação do novo cliente e quantos armários estão disponíveis, respectivamente. A linha seguinte contém L números inteiros positivos separados por espaços em branco, nenhum deles maior do que 1000000000, indicando as posições dos armários disponíveis. Os números dos armários livres são dados em ordem crescente. O final da entrada é indicado por um caso onde N = L = 0.",
        "titulo": "Mário",
        "descricao": "Mário é dono de uma empresa de guarda-volumes, a Armários a Custos Moderados (ACM). Mário conquistou sua clientela graças à rapidez no processo de armazenar os volumes. Para isso, ele tem duas técnicas: Todos os armários estão dispostos numa fila e são numerados com inteiros positivos a partir de 1. Isso permite a Mário economizar tempo na hora de procurar um armário; Todos os armários têm rodinhas, o que lhe dá grande flexibilidade na hora de rearranjar seus armários (naturalmente, quando Mário troca dois armários de posição, ele também troca suas numerações, para que eles continuem numerados sequencialmente a partir de 1). Para alugar armários para um novo cliente, Mário gosta de utilizar armários contíguos, pois no início da locação um novo cliente em geral faz muitas requisições para acessar o conteúdo armazenado, e o fato de os armários estarem contíguos facilita o acesso para o cliente e para Mário. Desde que Mário tenha armários livres em quantidade suficiente, ele sempre pode conseguir isso. Por exemplo, se a requisição de um novo cliente necessita de quatro armários, mas apenas os armários de número 1, 3, 5, 6 e 8 estiverem disponíveis, Mário pode trocar os armários 5 e 2 e os armários 6 e 4 de posição: assim, ele pode alugar o intervalo de armários de 1 até 4. No entanto, para minimizar o tempo de atendimento a um novo cliente, Mário quer fazer o menor número de trocas possível para armazenar cada volume. No exemplo acima, ele poderia simplesmente trocar os armários 1 e 4 de posição, e alugar o intervalo de 3 até 6. Mário está muito ocupado com seus clientes e pediu que você fizesse um programa para determinar o número mínimo de trocas necessário para satisfazer o pedido de locação de um novo cliente."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1606",
        "saida": "Para cada instância, imprima uma única linha com a permutação que originou a sequência da entrada, com um espaço separando inteiros consecutivos. Caso exista mais de uma permutação possível, qualquer uma delas será aceita.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém os inteiros K (2 ≤ K ≤ 10 5) e N (1 ≤ N ≤ K) indicando, respectivamente, o tamanho da sequência escrita por Ali Babá e o maior inteiro da permutação original. A linha seguinte contém os K inteiros da sequência, separados por um espaço.",
        "titulo": "As Dicas de Ali Babá",
        "descricao": "As Mil e Uma Noites são uma coleção de histórias árabes que remontam ao século IX. Algumas traduções para o ocidente foram feitas a partir do século XVII, e algumas destas histórias, como \"Simbad, o Marujo\", \"Aladim e a Lâmpada Mágica\" e \"Ali Babá e os Quarenta Ladrões\" são hoje conhecidas por crianças de todo o mundo. Na história de Ali Babá os tesouros são guardados em uma gruta que se abre quando a expressão \"Abre-te Sésamo\" é usada. Na verdade, o tesouro estava escondido dentro de um cofre na parede da gruta, que se abria quando uma permutação dos inteiros de 1 a N era recitada. Nem todos os 40 ladrões tinham boa memória, assim Ali Babá era obrigado a manter nas paredes da gruta, dicas de como reconstruir a permutação, caso algum dos ladrões a esquecesse. Ele anotava uma sequência de inteiros a1, a2, ... , ak gerada a partir da permutação que abria o cofre após possíveis aplicações das seguintes operações: duplicação (i, j) e espelhamento (i, j), para i ≤ j. A operação duplicação (i, j) cria uma cópia da subsequência ai, ai+1, ... , aj e a insere entre aj e aj+1. A operação espelhamento (i, j) insere uma cópia invertida da subsequência de ai até aj (aj, aj-1, ... , ai) entre aj e aj+1. Por exemplo, dada a sequência (a1, a2, a3, a4, a5, a6), a aplicação da operação espelhamento (3,5) gera a sequência (a1, a2, a3, a4, a5, a'5, a'4, a'3, a6). Sua tarefa é reconstruir a permutação original."
    },
    {
        "nivel": "9",
        "assunto": "6",
        "numero": "1283",
        "saida": "Para cada caso de teste deverá ser impressa uma linha com um número inteiro que representa o número de maneiras nas quais as S pedras podem ser distribuídas entre as primeiras B - 1 caixas, de modo que Carolina fique certa que ela pode ganhar o jogo. Como este número poderá ser muito grande, você é obrigado a imprimí-lo como o restante deste número dividido por 109 + 7.",
        "entrada": "Cada caso de teste é composto por uma linha. A linha contém dois inteiros S (1 ≤ S ≤ 200) e B (2 ≤ B ≤ 100), representando respectivamente, o número de pedras e o número de caixas no jogo.",
        "titulo": "Caixas e Pedras",
        "descricao": "Paulo e Carolina gostam de jogar um jogo com S pedras e B caixas enumeradas de 1 até B. Antes de iniciar o jogo, eles arbitrariamente distribuem as S pedras entre as caixas desde a caixa 1 até a caixa B - 1, deixando a caixa B vazia. O jogo então avança algumas rodadas. Em cada rodada, primeiro Paulo escolhe um subconjunto P das pedras que estão nas caixas; ele pode escolher tantas pedras quantas deseja a partir de tantas caixas quantas ele quiser, ou ele pode simplesmente não escolher nenhuma pedra, e neste caso P é vazio. Então, Carole decide o que fazer a seguir: ela pode ou promover o subconjunto P e descartar as pedras restantes (isto é, aquelas pedras não escolhidas por Paulo na primeira etapa), ou ela pode descartar o subconjunto P e promover as pedras restantes. Promover um dado subconjunto significa pegar cada pedra deste subconjunto e movê-la para a caixa com o próximo número na sequência, de modo que, se houver uma pedra neste subconjunto dentro de uma caixa b, ela é movida para a caixa b + 1. Descartar um determinado subconjunto significa remover todas as pedras deste subconjunto de sua correspondente caixa, de modo que essas pedras não sejam utilizadas ​​no jogo para as rodadas restantes. A figura abaixo mostra um exemplo das duas primeiras rodadas de um jogo. Paulo e Carolina jogam até que pelo menos uma pedra atinja uma caixa com número B, caso em que Paulo vence o jogo, ou até que não haja mais pedras deixadas nas caixas, caso em que Carolina ganha o jogo. Paulo é um jogador muito racional, mas Carolina é um rival digno, porque ela não é apenas extremamente boa nesse jogo, mas também tem muita sorte. Gostaríamos de saber quem é o melhor jogador, mas antes disso temos que compreender como o resultado de um jogo depende da distribuição inicial das pedras. Em particular, gostaríamos de saber de quantas maneiras as pedras S poderiam ser distribuídas inicialmente entre as primeiras B - 1 caixas de modo que Carolina possa ter certeza de que irá ganhar o jogo se jogar da melhor maneira possível, mesmo que Paulo nunca cometa nenhum erro."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1913",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma única linha com o valor da altura da maior torre de cilindros que pode ser construída, seguido da palavra “centimetro(s)”.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10³ ), que representa a quantidade de cilindros dispostos sobre a mesa, seguem N linhas, cada linha contendo a altura h (1 ≤ h ≤ 1000) do cilindro em centimetros, o raio r (1 ≤ r ≤ 1000) da base do cilindro e uma palavra p representando a cor do cilindro. A palavra pode ser: VERMELHO, LARANJA, VERDE ou AZUL. O fim da entrada é indicado quando N == 0, a qual não deverá ser processada.",
        "titulo": "Ajude o Sr. Barriga",
        "descricao": "Nhonho, filho do Sr. Barriga está participando de uma brincadeira nova criada pelas crianças da vila bastante conhecida por “Torre de cilindros”. A brincadeira consiste em construir a maior torre composta por cilindros, respeitando todas as regras, claro! Logo abaixo está descrito o funcionamento da brincadeira. Será disposta em uma mesa, uma quantidade N de cilindros. Cada cilindro possui uma cor, que pode ser: Vermelho, laranja, verde ou azul. Cada cilindro possui uma altura h, e uma base com um raio de tamanho r. Para a construção da torre, os cilindros deverão ser empilhados, sendo que o cilindro do topo deverá sempre ter a base menor que a do cilindro logo abaixo dele. Exceto o primeiro cilindro, que poderá ter a base de qualquer tamanho, já que não existe nenhum outro cilindro abaixo dele. Existem também algumas restrições bem interessantes quanto às cores dos cilindros. Elas estão descritas abaixo: Um cilindro vermelho nunca pode ser colocado sobre um cilindro laranja. Um cilindro laranja nunca pode ser colocado sobre um cilindro azul. Um cilindro azul nunca pode ser colocado sobre um cilindro verde. Um cilindro verde nunca pode ser colocado sobre um cilindro vermelho. Cansado de ver o seu filho reclamar de perder sempre e consequentemente de ouvir a frase “Olha ele hein! Olha ele hein! Olha ele...” repetidas vezes, Sr. Barriga quer dar uma pequena dica para Nhonho, informando a maior altura que é possível ser construída dado a lista com as características dos cilindros disponíveis para construção da torre. Porém, apesar de ser bom em matemática e cobrar o preço do aluguel corretamente, Sr. Barriga não conseguiu calcular a altura máxima que a torre pode ter, devido a grande quantidade de cilindros disponíveis. Então ele contratou você para escrever um programa capaz de informar esse valor. Para lhe ajudar a entender melhor o problema, Sr. Barriga lhe demonstrou através de um desenho a altura da maior torre possível de ser construída com cinco peças, seguindo todas as regras da brincadeira. Logo abaixo você pode consultar o desenho do Sr. Barriga."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1905",
        "saida": "Seu programa deverá imprimir \"COPS\" caso o grupo dos policiais ganhem, e \"ROBBERS\" caso o grupo dos ladrões ganhem.",
        "entrada": "A primeira entrada consiste de um inteiro T(1 ≤ T ≤ 400) indicando o número de casos de testes. As próximas T entradas consistem de uma matriz 5x5, composta de valores inteiros, sendo 0 ou 1",
        "titulo": "Polícia e Ladrão",
        "descricao": "Mario adora convidar seus amigos para brincar em sua casa. Então decidiu convidar seus amigos para brincarem de Polícia e Ladrão. O jogo consiste em dois grupos, um grupo é a polícia e o outro é o grupo dos ladrões. Os ladrões devem se esconder e a polícia deve capturá-los. Caso a polícia consiga capturá-los e prendê-los os ladrões perdem o jogo e caso a polícia não consiga capturá-los os ladrões vencem o jogo. Mario decidiu que seria do grupo da polícia e que teria que procurar seus amigos do grupo dos ladrões e capturá-los, porém algum de seus amigos sentiram-se em desvantagens por não possuírem lugares estratégicos para se esconder no seu quintal. Portanto decidiram planejar uma forma em que poderiam deixar os policiais sem saída e terem chances de ganhar o jogo. Para isso montaram um labirinto usando caixas de papelão e marcaram como “0” todos os lugares no quintal aonde os policiais poderiam atravessar e como “1” aonde os policiais não poderiam atravessar. Os ladrões irão se esconder sempre no último espaço do labirinto, Se os policiais ficarem encurralados no labirinto os ladrões vencem e poderão comemorar a fuga, mas se os policiais alcançarem o ultimo espaço do labirinto os policiais serão os vencedores. Os policiais poderão andar somente nos blocos marcados como 0. Sua tarefa é determinar a partir do labirinto quem vai ganhar o jogo."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1690",
        "saida": "Para cada caso de teste, imprima uma única linha, a resposta para o problema.",
        "entrada": "A primeira linha contém um número T (1 ≤ T ≤ 1000), indicando que se seguirão T casos de teste. Para cada teste, a primeira linha conterá um número N (1 ≤ N ≤ 10000), indicando a quantidade de números que existem no array. A linha seguinte conterá N inteiros positivos separados por espaços, entre 1 a 109.",
        "titulo": "Soma de Sobconjuntos",
        "descricao": "Você tem em mãos um array de números inteiros positivos, não necessariamente distintos. Vamos escolher alguns dos números no array, isto é, um subconjunto não vazio do array original. O valor de um subconjunto é a soma dos elementos contidos nele. Qual é o menor valor de um subconjunto que não pode ser gerado? Por exemplo, pegue o array [2, 1, 5]. Os seguintes subconjuntos pode ser formados: [1], [2], [5], [1, 2], [1, 5], [2, 5], [1, 2, 5]. Os seus valores são os seguintes: 1, 2, 5, 3, 6, 7, 8, respectivamente. O valor menor do subconjunto que não pode ser gerado, neste caso, é 4."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1996",
        "saida": "Para cada caso de teste, imprima em uma única linha um inteiro representando o número de tendas diferentes válidas que podem ser configurados usando as varas dadas.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em duas linhas consecutivas. A primeira linha contém um inteiro N que indica o número de varas (1 <= N <= 60). A segunda linha contém N inteiros H_i representando as alturas das varas em pés (1 <= H_i <=109 para 1 <= i <= N). A última linha da entrada contém um único -1 e não deve ser processado como um caso de teste.",
        "titulo": "Construção de Tendas",
        "descricao": "O Comitê Internacional de Preparação de Tendas (ICPC) tem um procedimento peculiar para a criação de suas tendas. O procedimento depende de uma visão bidimensional das tendas. Uma determinada tenda é criada utilizando N pólos de diferentes alturas. Para configurar as tendas, o ICPC usa o seguinte procedimento. Primeiro, N+2 pontos são marcadas no chão, todos na mesma linha, de modo que dois pontos consecutivos são sempre separados por uma distância de exatamente dois pés. Depois disso, uma vara é colocada verticalmente sobre cada um dos N pontos centrais. Finalmente, a tenda é estendida sobre as varas, juntando-se a extremidade superior de cada vara com a extremidade superior das varas vizinhas. As primeiras e últimas varas são unidas com os pontos livres no chão. A figura a seguir mostra três possíveis formas de criação de uma tenda usando as instruções mencionadas antes, com alturas das varas de 4, 5, 7, 8 e 9. Depois de anos de trabalho duro, o ICPC chegou à conclusão de que, a fim de obter tendas úteis e robustas, é necessário que o ângulo formado por duas lonas consecutivas na extremidade de uma vara, medido em seu interior, é estritamente inferior a 180 graus. Na figura, somente a tenda na esquerda satisfaz esta condição. A tenda no meio tem um ângulo superior a 180 graus nas varas de altura 4 e 7, enquanto a tenda da direita tem um ângulo de exatamente 180 graus na vara de altura 8. Dizemos umatenda é válida quando cumpre a recomendação da ICPC. É claro que, dado o número de varas e suas alturas, há um grande número de diferentes maneiras de colocá-los, alguns dos quais irão produzir telas válidas e alguns não. A tarefa é, através destes dados, contar o número de diferentes tendas válidas que podem ser criadas. Duas tendas válidas são consideradas diferentes se a sequência de alturas das varas em um deles, visto da esquerda para a direita, é diferente da sequência de alturas do outro, visto da mesma maneira."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1475",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma única linha contendo um inteiro indicando o menor comprimento total de remendos que é suficiente para consertar todos os furos do pneu.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha contém quatro inteiros N (1 ≤ N ≤ 1000), C (1 ≤ C ≤ 106), (1 ≤ T1) e T2 (T2 ≤ C). O inteiro N corresponde ao número de furos no pneu e C corresponde ao comprimento da circunferência do pneu, em centímetros. Os comprimentos dos remendos, em centímetros, são dados pelos inteiros T1 e T2. A segunda linha da entrada contém N inteiros Fi (0 ≤ Fi ≤ C-1), um para cada furo, descrevendo a distância no sentido horário da marca de giz até o furo i (1 ≤ i ≤ N), em centímetros. O Final da entrada é determinado por EOF (fim de arquivo). Obs: Se a distância entre dois furos é exatamente k centímetros, um remendo de comprimento k centímetros é suficiente para cobrir ambos os furos.",
        "titulo": "Remendo",
        "descricao": "Carlão é muito preocupado com o meio ambiente. Sempre que possível, ele tenta utilizar meios de transporte menos poluentes. Recentemente ele conseguiu um emprego próximo de casa e agora está utilizando sua bicicleta para ir ao trabalho. Infelizmente, no caminho entre sua casa e seu emprego, há uma fábrica de pregos, que frequentemente deixa alguns pregos caírem de seus caminhões que acabam furando os pneus de da bicicleta de Carlão. Por isso, ele acaba tendo que fazer diversos remendos nos pneus de sua bicicleta. Para fazer os consertos, Carlão usa dois tipos diferentes de remendos. Ambos os tipos têm a largura do pneu da bicicleta, mas diferem no comprimento. Como o valor do remendo é proporcional ao seu comprimento, Carlão está tentando encontrar uma maneira de economizar, gastando o menor comprimento total possível de remendos para fazer os consertos, mas sem precisar cortá-los. O primeiro passo para efetuar o conserto é fazer uma marca com giz em uma posição do pneu e depois anotar as distâncias, medidas no sentido horário, de cada um dos furos em relação à marca de giz. Todos os furos devem ser cobertos por um remendo. Carlão gostaria de sua ajuda para determinar, a partir das posi¸cões dos furos, a forma mais econômica de efetuar o conserto."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1485",
        "saida": "Para cada caso de teste na entrada seu programa deve escrever uma linha de saída, contendo um inteiro indicando a máxima arrecadação que a banca pode obter em um turno. A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros S e B que indicam respectivamente o número de espaços na roleta (3 ≤ S ≤ 250) e o número de bolas usadas (1 ≤ B ≤ floor(S/2)). A segunda linha de um caso de teste contém S inteiros Xi, indicando os números associados com os espaços da roleta, na direção horária (-64 ≤ Xi ≤ 64, para 1 ≤ i ≤ S). A terceira linha de um caso de teste contém B inteiros Yi, indicando o número associado com as bolas (-64 ≤ Yi ≤ 64, para 1 ≤ i ≤ B), na sequência em que as bolas são jogadas na roleta (note que elas estão na ordem que elas terminam dispostas na roleta, na direção horária). O fim da entrada é indicada por S = B = 0.",
        "titulo": "Roleta Turca",
        "descricao": "Roleta turca é um jogo de azar que usa uma roleta com S espaços, cada um numerado com um inteiro entre -64 e 64. Em cada turno do jogo, os jogadores apostam em B bolas, cada uma também numerada de -64 a 64. Para cada uma das B bolas, exatamente um jogador apostará nela. Após girar a roleta, o representante da banca joga as B bolas sequencialmente. Quando a roleta para, cada bola está disposta em dois espaços adjacentes, como descrito na figura a seguir, que mostra uma roleta com 32 espaços e 4 bolas. Note que, como a figura ilustra, uma bola ocupa dois espaços adjacentes, e, portanto, há espaço para no máximo floor(S/2) bolas na roleta. As bolas terminam dispostas na mesma posição relativa em que elas foram jogadas na roleta. Isto é, se as bolas a, b e c são jogadas nessa sequência, elas terminam dispostas tais que, na direção horária, a é seguida por b que é seguida por c que é seguida por a. O valor de uma bola em um turno é calculado pela multiplicação do número da bola pela soma dos números dos espaços adjacentes sobre os quais a bola está disposta. Se o valor de uma bola é positivo, o jogador que apostou nessa bola recebe essa quantia (o valor da bola) da banca; se o valor de um bola é negativo, o jogador que apostou nessa bola deve pagar essa quantia para a banca. A arrecadação da banca em um turno é a quantia total recebida menos a quantia total paga. Por exemplo, na figura anterior, a banca paga $5.00 para bola numerada -1, paga $7.00 para bola numerada -7, recebe $24 pela bola numerada 12 e não paga nem recebe pela bola numerada 3. Portanto, neste turno a banca fez uma arrecadação de $12.00 (24 -5 -7); note que a arrecadação da banca em turno pode ser negativa (perda). Será dada a descrição da roleta, a descrição das bolas e a sequência em que as bolas foram jogadas na roleta. Escreva um programa que determine a arrecadação máxima que a banca pode fazer em um turno."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "2113",
        "saida": "Para cada caso imprima o número de setores que são cobertos por pelo menos K agentes. A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada é composta por vários casos de teste e termina com final de arquivo (EOF). A primeira linha de cada caso contém dois inteiros, N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 105) , indicando a dimensão da área retangular falada no enunciado. A segunda linha contém o número de agentes, C , e o número K (1 ≤ K ≤ C ≤ 103). As C linhas seguintes têm a descrição dos agentes Xc (1 ≤ Xc ≤ N), Yc (1 ≤ Yc ≤ M) e Rc (0 ≤ Rc ≤ 108), onde (Xc , Yc ) é o centro da área circular de raio Rc que o agente cobre. A entrada deve ser lida da entrada padrão.",
        "titulo": "O Incidente de Sverdlovsk",
        "descricao": "Durante os anos da União Soviética o nome da cidade de Ecaterimburgo era Sverdlovsk, em homenagem ao bolchevique Iakov Sverdlov, filho de um artesão judeu que era excelente orador e foi um dos principais protagonistas ao lado de Lenin na revolução de outubro de 1905. Era considerado honesto, enérgico e trabalhador e respeitado por todos os setores do partido. Faleceu aos 34 anos. A cidade retomou o nome original em 1991 por iniciativa de Boris Yeltsin primeiro presidente da Rússia, nascido na cidade. Em 2 de abril de 1979, quando a cidade ainda se chamava Sverdlovsk houve um vazamento de antraz de uma fábrica militar na cidade. Este incidente é muitas vezes chamado de “Chernobyl biológico”, e causou aproximadamente 100 mortes, apesar de que o número exato de vítimas e contaminados seja desconhecido. A União Soviética negou por anos as reais causas do acidente e todos os registros das vítimas desapareceram, pois poderiam revelar sérias violações da Convenção de Armas Biológicas. As autoridades soviéticas tiveram de recorrer a procedimentos altamente sofisticados de descontaminação, especialmente das áreas rurais. Cada área retangular de dimensões N por M metros era dividida em N × M setores quadrados de um metro quadrado. Estes setores eram identificados pelas coordenadas de seus centros, numeradas de oeste para leste e de sul para norte a partir de (1, 1). Cada setor seria considerado descontaminado se ele for coberto por pelo menos K agentes de saúde. Cada agente era capaz de cobrir uma área circular. O raio dessa área variava de acordo com os equipamentos usados e com a experiência do agente de saúde. Sua tarefa é determinar quantos desses setores são considerados descontaminados, isso é, cobertos por pelo menos K agentes. Consideramos que um setor é coberto se seu centro está numa área coberta por um agente de saúde."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1727",
        "saida": "Para cada estudo de caso, primeiro exiba uma linha escrito “Grupo #x” onde x é o número do caso (contando de 1). Então, imprima uma linha por time na ordem em que aparecem na entrada. Em cada linha, exiba o nome do time, um caractere vazio, sua melhor posição possível, um sinal de menos e sua pior posição possível. Imprima uma linha vazia após cada estudo de caso, inclusive após a última.",
        "entrada": "A entrada consistirá em um ou mais estudos de caso. Cada estudo de caso se atém ao seguinte formato: Na primeira linha haverá um inteiro n (1 ≤ n ≤ 20), representando o número de times no grupo. Nas próximas n linhas, os nomes dos times se seguirão. Nomes sempre são menores que 30 caracteres e não contém espaços em branco. Na próxima linha, haverá um inteiro g, representando o número de jogos completos. Finalmente, cada uma das g linhas seguintes, descrevem um jogo completo no formato time1 time2 gols1 gols2. Você pode partir do pressuposto que no máximo 10 jogos restam e cada time tem ao menos um jogo a jogar. (Isso simplifica o problema um pouco). A entrada será encerrada quando o valor de n for igual a zero.",
        "titulo": "Copa Européia 2000",
        "descricao": "Como você talvez saiba, a qualificação para o Campeonato Europeu de Futebol 2000 é um torneio em que em cada grupo cada time joga um contra o outro duas vezes.A Alemanha está no grupo 3 junto com a Turquia, Finlândia, Moldávia e Irlanda do Norte. 14 jogos foram disputados e 6 ainda acontecerão. Uma olhada rápida nas posições atuais talvez te faça pensar que a Irlanda do Norte já está fora do páreo. Mas isso está errado! Imagine que a Irlanda do Norte ganhe os seus três jogos restantes, a Alemanha empata com a Turquia e perde para a Finlândia, e a Moldávia derrota a Turquia. Aí a Irlanda do Norte fica em primeiro! Para aqueles que não estão familiarizados com o modelo de pontuação: Em cada jogo um time ganha 3 pontos por uma vitória, 1 ponto por um empate ou 0 pontos por uma derrota. Depois que todos os jogos tenham sido jogados, os times são ordenados de acordo com seus pontos. No caso de empate, os desempates adicionais são: diferença de gols (gols feitos - gols tomados), gols feitos e escolha aleatória, nessa ordem. A questão que seu programa deve responder é: Levando em conta todas as possibilidades de como os jogos restantes possam terminar, qual é a posição mais alta e mais baixa de cada time no grupo quando o torneio acabar?"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1034",
        "saida": "Para cada instância, imprima o número mínimo de blocos necessários para obter um bloco de comprimento M.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 25) e M (1 ≤ M ≤ 1000000) representando o número de tipos de blocos e o comprimento desejado pelo artista, respectivamente. A próxima linha contém os inteiros a1; a2; ...; aN , onde (1 ≤ ai ≤ 100) para todo i (1,2,...N) separados por espaço.",
        "titulo": "Festival de Estátuas de Gelo",
        "descricao": "Todos os anos, artistas de todo o mundo se reúnem na cidade, onde fazem esculturas de gelo gigantescas. A cidade vira uma galeria de arte ao céu aberto, uma vez que as esculturas ficam expostas na rua por semanas, sem derreter. Afinal, a temperatura média no inverno de Harbin (época em que ocorrerá a final mundial do ICPC) é de -20 graus. O primeiro passo para fazer a escultura é montar um grande bloco de gelo da dimensão pedida pelo artista. Os blocos são recortados das geleiras de Harbin em blocos de altura e profundidade padrão e vários comprimentos diferentes. O artista pode determinar qual o comprimento que ele deseja que tenha o seu bloco de gelo para que a escultura possa começar a ser esculpida. Os comprimentos disponíveis dos blocos são {a1; a2; ...;  aN} e o comprimento que o artista deseja é M. O bloco de comprimento 1 é muito usado, por este motivo ele sempre aparece na lista de blocos disponíveis. Sua tarefa é determinar o número mínimo de blocos tal que a soma de seus comprimentos seja M."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1927",
        "saida": "Imprima a quantidade máxima de trufas que Tapioca é capaz de comer.",
        "entrada": "A primeira linha de entrada contém um inteiro 1 ≤ n ≤ 2000, que representa a quantidade de trufas que irão cair do céu. Cada um das próximas n linhas irá conter três inteiros, 0 ≤ xi, yi ≤ 20 e 0 ≤ ti ≤ 1000, representando as coordenadas do local da queda e o momento da queda da trufa i.",
        "titulo": "Tapioca e a Chuva de Trufas",
        "descricao": "Tapioca sonhou que estava chovendo trufas na cidade onde ele mora, Lagoa de Roça (Lá já choveu granizo, mas isso é papo pra outro problema). Trufas de todos os sabores, pena que ele não pode comer todas, porque as que caem no chão se espatifam completamente. Mas ele pode tentar comer a maior quantidade possível, basta pegá-las antes que elas caiam no chão. Felizmente, nesse sonho Tapioca é capaz de prever o futuro e é por isso que ele sabe o instante e a posição em que cada uma das trufas irá cair. No entanto ele não tem o poder de fazer duas coisas ao mesmo tempo e é por isso que sua ajuda é necessária. Escreva um programa que com as premonições de Tapioca, informe a quantidade máxima de trufas que ele pode comer. Considere Lagoa de Roça como sendo um plano e que Tapioca se encontra no instante 0 na posição (6, 6). Além disso ele só pode se mover para posições ortogonais, ou seja, Norte, Sul, Leste e Oeste. Para se movimentar ele leva 1 segundo. E ele só é capaz de pegar uma trufa se estiver na mesma posição e no momento em que ela irá cair."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1517",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro, representando qual o número máximo de maçãs que Rafael consegue pegar com sua cesta.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros, N, M e K (3 ≤ N, M ≤ 20, 1 ≤ K ≤ 1000), representando, respectivamente, a quantidade de linhas e colunas da área abaixo da árvore, e o número de maçãs derrubadas por seu primo. A seguir haverá K linhas, contendo três inteiros cada, Xi, Yi e Ti (1 ≤ Xi ≤ N, 1 ≤ Yi ≤ M, 1 ≤ Ti ≤ 2*K), representando, respectivamente, a linha e coluna em que a maçã i caiu, e o tempo exato em que Rafael deve estar em tal posição para que ela caia em sua cesta. A sequência de valores Ti dada na entrada é não-decrescente, ou seja, Ti-1 ≤ Ti, para todo 2 ≤ i ≤ K. Não há duas maçãs que caiam no mesmo lugar ao mesmo tempo. A seguir haverá dois inteiros X e Y (1 ≤ X ≤ N, 1 ≤ Y ≤ M), indicando a linha e a coluna em que Rafael estará no tempo 0. O último caso de teste é indicado quando N = M = K = 0, o qual não deverá ser processado.",
        "titulo": "Maçãs",
        "descricao": "Rafael resolveu passar o final de semana na fazenda de seu tio, Antônio, e quando percebeu que havia lá uma árvore carregada de maçãs, decidiu fazer uma torta de maçã. Para fazer a torta, porém, Rafael precisaria pegar o maior número de maçãs possíveis, e para isso pediu ajuda a seu primo. O combinado era: Seu primo subiria na árvore e chacoalharia diversos galhos contendo as maçãs, fazendo com que elas caissem. A medida que as maçãs iam caindo, Rafael estaria no chão com uma cesta e iria pegá-las no meio do caminho entre a árvore e o chão. Como as maçãs caiam com muita velocidade, o impacto com o chão fazia com que elas rachassem, e Rafael decidiu que iria ignorar todas as maçãs que não conseguisse pegar com a cesta. Podemos representar a situação da seguinte maneira: Rafael está posicionado em uma área de N linhas e M colunas abaixo da árvore, e pode se mover uma posição horizontalmente, verticalmente ou diagonalmente por segundo. Cada maçã cai em uma determinada posição dessa área, digamos [i, j] (linha i, coluna j), e o momento exato em que Rafael deve estar nessa posição para que ela caia dentro de sua cesta é um determinado tempo t. Dada a posição inicial de Rafael, diga quantas maçãs ele consegue pegar com sua cesta, dentre todas as K maçãs derrubadas por seu primo."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1058",
        "saida": "Para cada caso, imprima o número do caso de teste seguido do número de configurações válidas.",
        "entrada": "A primeira linha de entrada é um inteiro T (T<100) que indica o número de casos de teste. Cada caso consiste de duas linhas. A primeira linha é um inteiro P ( 2 < P < 40 e P é um múltiplo de 3). P representa o número de batalhões. As próximas linhas consistem de uma string de tamanho P. Cada caracter da string é  ‘R’ (Red: vermelho) ou ‘B’ (Black: preto). A string dá a posição do batalhão no sentido horário. A posição inicial é arbitrariamente escolhida. Portanto, o exemplo acima pode ser representado por qualquer uma das seguintes sequências: ‘RBBBRB’, ‘BBBRBR’, ‘BBRBRB’, ‘BRBRBB’, ‘RBRBBB’ ou ‘BRBBBR’.",
        "titulo": "Zonas de Ataque Independentes",
        "descricao": "Uma técnica comum usada por exércitos invasores é cercar uma cidade em vez de diretamente entrar nela. Os exércitos divididem-se em pelotões com bases em uma forma circular ao redor da cidade. Para assumir o controle interno da cidade, pelotões são agrupados em três para cobrir regiões triangulares. Isso é uma política do general para garantir que não haja duas regiões triangulares sobrepostos. Infelizmente, o processo é um pouco mais complicado porque existem dois tipos de exércitos na força invasora. Os dois exércitos diferentes são conhecidos como Exército Vermelho eo Exército Negro. Cada pelotão é formado por um tipo de exército. Enquanto o Exército Preto tem clara intenção de servir ao General, os vermelhos podem trair na primeira oportunidade. Então se decidiu que cada grupo triangular será composto de no máximo um pelotão do Exército Vermelho para que os vermelhos não dominam em qualquer tarefa que lhes for atribuída. Supondo 6 pelotões (4 pretos e 2 vermelhos) como mostrado na figura abaixo: Uma vez que são 6 pelotões, nós podemos formar 2 grupos ( 6 / 3 = 2 ). Há duas possibilidades de arranjo para esta configuração. Problema: será dado a você um número de pelotões e suas cores. Você deve encontrar o número de possíveis configurações tal que cada pelotão faça parte de exatamente um grupo e respeite as restrições passadas acima."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1599",
        "saida": "Para cada instância imprima as coordenadas dos picos do mapa correspondente, uma por linha,ordenado primeiro pelas linhas e, em caso de empate, pelas colunas. Caso não existam picos, imprima -1. Imprima uma linha em branco no final da saída de toda instância.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância corresponde ao mapa de uma região e é representado por uma matriz N × M (1 ≤ N, M ≤ 1.000). A primeira linha de cada instância contém os inteiros N e M. Para i = 1, 2, . . . , N, a (i + 1)-ésima linha corresponte a i-ésima linha da matriz e contém M inteiros separados por um espaço.",
        "titulo": "Picos do Átlas",
        "descricao": "O Marrocos é cortado pelas montanhas Atlas, cujo pico mais alto é Toubkal, com 4.165 metros. Estas montanhas deram origem a diversos mitos e histórias durante toda a antiguidade, como, por exemplo, nos 12 trabalhos de Hércules. Próximo à cidade de Marrakech fica o que se chama de “alto Atlas”, a parte mais alta destas montanhas. O estudo das altitudes dos diversos picos tem sido feito há séculos. Antigos documentos berberes documentam o registro de diferentes altitudes dos vários pontos das montanhas Átlas desde o século XVI. O documento é um mapa da região dividido em quadrantes. Em cada quadrante está anotada a altura média daquele ponto. Sabemos que um ponto é um pico se a altura daquele quadrante é maior que de seus vizinhos (um quadrante tem até 8). Sua tarefa neste exercício é ler esse mapa e identificar os picos existentes na região documentada."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1611",
        "saida": "Para cada caso, imprima em uma única linha o valor da mínima energia necessária.",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso teremos os números inteiros N (1 ≤ N ≤ 104), C (1 ≤ C ≤ M) e M (1 ≤ M ≤ 1000* ou 1 ≤ M ≤ 5*104**). Na próxima linha teremos M inteiros indicando os andares a serem visitados pelas pessoas. Os inteiros indicando os andares vão de 1 até N-1, inclusive. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste.",
        "titulo": "Elevador Lotado",
        "descricao": "Em um prédio de N andares temos um elevador com capacidade para até C pessoas. Os andares são numerados de 0 a N-1. Há um grupo de M pessoas querendo usar o elevador, todas no andar 0. Cada uma deseja ir a um andar específico. Você deve decidir a ordem em que as pessoas devem usar o elevador de forma que a energia utilizada seja a menor possível. Inicialmente um grupo de tamanho no máximo C pessoas decidido por você entra no elevador no andar 0. Depois você deve decidir a ordem em que os andares são visitados. Logicamente, os andares de todas as pessoas dentro do elevador devem ser visitados. O custo de energia do elevador é apenas no deslocamento, ou seja, a cada andar em que ele sobe ou desce você gasta uma unidade de energia. O processo é repetido até que não se tenha mais pessoas no andar 0. No fim o elevador deve voltar ao andar 0. Dado o tamanho do prédio, a capacidade do elevador e os andares das pessoas que querem utilizar o elevador, monte a melhor estratégia que minimize a energia utilizada. Imprima o valor desta energia."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1976",
        "saida": "Assuma que as matrizes em nomes A1, A2, ..., AN. Para cada caso de teste, seu programa deverá imprimir uma linha contendo a ordem das matrizes a serem multiplicadas (Seguindo o exemplo de saída), em caso de mais de uma solução possível seu programa deverá imprimir apenas a quantidade total de contas necessárias.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1000), indicando o número de matrizes a serem multiplicadas. Segue então N linhas cada uma contendo dois inteiros L e C (1 ≤ L, C ≤ 100), indicando o número de linhas e colunas de cada matriz. A entrada termina quando N = 0 e não deverá ser processada.",
        "titulo": "Matrizes",
        "descricao": "Gustavo em uma de suas aulas de pré-cálculo aprendeu a fazer multiplicações de matrizes, como ele é um aluno muito esperto, rapidamente percebeu que quando fazemos a multiplicação, a ordem com que as matrizes são multiplicadas pode influenciar na quantidade total de contas necessárias para encontrar a resposta. Apesar de muito dedicado, Gustavo está com pouco tempo para realizar trabalhos da faculdade, pois atualmente está estudando muito para a maratona de programação, então ele pediu sua ajuda em um tarefa solicitada na aula de pré-cálculo. A professora passou como exercício diversas matrizes para que a turma treinasse a multiplicação, então Gustavo precisa de um programa que dado as dimensões das matrizes, o informe qual a melhor ordem de realizar as multiplicações levando em consideração a menor quantidade de contas necessárias para gerar a resposta. Como você é amigo de Gustavo e tem mais tempo do que ele, resolveu ajudá-lo, mas com algumas regras: 1ª Gustavo sempre terá que informar matrizes onde a multiplicação na ordem dada é sempre possível; 2ª Caso haja mais que uma solução ótima, seu programa irá informar somente a quantidade de contas necessárias para a multiplicação."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1681",
        "saida": "Para cada caso de teste, imprima em em uma linha o número mínimo de passos de dobradura necessários para produzir a folha de papel descrita.",
        "entrada": "A entrada contém vários casos de teste, cada um em uma linha distinta. Cada linha contém uma string não vazia de caracteres A e V descrevendo o lado mais longo da folha. Assuma que o comprimento da string é menor que 200. O arquivo de entrada termina imediatamente após o último caso de teste.",
        "titulo": "Dobra",
        "descricao": "Leia a descrição do problema 1680 (Lado) para entender como dobrar uma folha de papel e como interpretar a entrada. Uma \"tira\" é definida como a parte maximal de uma folha que não tem vincos atravessando-a. Como as dobras ocorrem em locais equidistantes, todas as tiras são congruentes. Neste problema é dada a descrição do resultado da realização de diversas dobras como no problema E: Lado, ou seja, no estado desdobrado. Adicionalmente, é sabido que o comprimento da folha em seu estado dobrado é exatamente o comprimento de uma tira (novamente a grossura do papel é ignorada). Encontre o número mínimo de dobraduras necessárias para gerar a folha descrita a partir de uma folha de papel inicialmente plana. Note que realizar uma dobradura pode criar mais que uma dobra no resultado porque partes do papel estão sobrepostas devido à dobraduras anteriores. No entanto, quando um passo de dobradura é realizado todas as partes sobrepostas do papel são afetadas, isso é, não é permitido dobrar, por exemplo, apenas as três camadas superiores. Por último, note que todo resultado pode ser obtido iterando as dobras em uma direção fixa e realizando uma dobradura por vez, acumulando dessa forma uma pilha de todas as tiras, com comprimento de uma tira. Se n é o número de dobras na descrição de entrada, esse procedimento requer então n passos de dobradura, que não é necessariamente o mínimo, como pode ser observado na saída de exemplo."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2026",
        "saida": "A saída devera apresentar o número total de enfeites para cada galho. Imprima uma linha em branco após o total de enfeites de cada galho.",
        "entrada": "A primeira linha de entrada possui um inteiro G para os galhos da árvore, e também representando o numero de casos de teste, a segunda linha de entrada possui um inteiro P (1 < P < 100) que indica o número de pacotes, a próxima linha possui um inteiro W (1 < W < 1000) que indica a capacidade de peso que o galho da árvore suporta. As próximas P linhas indicam o número de enfeites em cadas pacote E(1 < E ≤ 300) e o peso de cada pacote PC (1 ≤ PC ≤ W).",
        "titulo": "Árvore de Natal",
        "descricao": "Com a chegada do clima natalino muitas famílias ao redor do mundo decoram suas casas, colocam luzes constroem suas próprias árvores de natal, colocando os mais váriados enfeites decorativos sempre com muita criatividade. Na família Enilno Egduj, descendetes de Italianos, sempre muito organizados e perfeccionistas criaram uma tradição onde todo o ano alguém fica responsável por enfeitar a árvore de natal. Neste ano o filho mais novo da família Rolien Enilno Egduj, ficou encarregado de fazer a decoração, e para isso precisava comprar os enfeites para a árvore. Para quem não conhece Rolien, ele é um menino muito perfeccionista, tão perfeccionista que descidiu fazer um programa para auxilia-lo na sua tarefa. Para enfeitar a árvore estavam disponíveis no mercado onde Rolien foi procurar enfeites natalinos, vários pacotes com uma quantidade X de enfeites e em cada pacote o seu respectivo peso em gramas. Baseando-se nessas informações Rolien estipulou que cada galho pudesse suporta uma quantidade K em gramas. Com isso ele precisava encontrar qual a melhor opção entre os pacotes, ou seja, quais pacotes ele deve levar que combinados possuam o maior número de enfeites e que o galho ao qual ele vai enfeitar consiga suportar suportar o peso dos enfeites."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1265",
        "saida": "Para cada consulta k em um caso de teste, você deverá imprimir uma única linha contendo o k-ésimo som tocado na festa. Uma linha em branco deve ser impressa após cada caso de teste.",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste consiste de três linhas. A primeira linha contém dois inteiros N e Q que indicam respectivamente o número de sons escolhidos pelo DJ e o número de consultas feitas pelos participantes ( 1 ≤ N ≤ 26 e 1 ≤ Q ≤ 1000 ). A segunda linha conterá N títulos de sons (o título de um som é a cadeia de caracteres alfanuméricos de pelo menos um e no máximo 100 caracteres) separados por um espaço simples. A última linha de um caso de teste contém a sequência de consultas. Cada consulta é um número k (1 ≤ k ≤ 100000000) que corresponde ao k-ésimo som tocado na festa. O final da entrada é indicado por N = Q = 0.",
        "titulo": "DJ da Computação",
        "descricao": "Um DJ muito famoso foi recentemente convidado para atuar em uma festa fechada de uma conferência de Ciência da Computação. Na tentativa de impressionar os participantes do evento, ele decidiu usar um programa que escolhesse automaticamente os sons que iriam tocar nesta festa. Entretanto, o resultado foi um desastre, uma vez que o modo como o programa escolhia os sons foi muito estranho e repetitivo. Antes de tudo o DJ selecionou N sons a partir de um conjunto que ele tinha disponível. O programa usado pelo DJ então rotulava cada um dos sons utilizando um caracter de 'A' até 'Z'. O enésimo som é rotulado atrávés do uso do enésimo caracter da sequência. O programa escolhe o som a ser tocado na festa a fim de que seus títulos apareçam na seguinte sequência infinita de caracteres: primeiro viriam todas as palavras com um caracter em ordem lexicográfica; na sequência todas as palavras com dois caracterem em ordem lexicográfica. Depois viriam todas as palavras com três caracteres, também em ordem lexicográfica, e assim por diante. Para N = 3 , esta sequência seria: ABCAAABACBABBBCCACBCCAAAAABAACABAABBABC... No final da festa, algumas pessoas perguntaram ao DJ se ele lembrava qual tinha sido o primeiro som que havia sido tocado. Outros queriam saber qual tinha sido o sétimo som e assim por diante. O DJ não conseguia lembrarr nada além do estranho padrão de repetição dos sons, portanto, ele precisa da tua ajuda urgente para escrever um programa que responda a estas consultas ou perguntas."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1970",
        "saida": "Imprima uma linha contendo unicamente o número máximo total de minutos de música que é possível gravar nos cartuchos.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros positivos N e K (N ≤ 100, K ≤ 3), os quais representam respectivamente o número de canções no computador de Fernando e o número de cartuchos que ele tem. A segunda linha da entrada consiste de N inteiros positivos, os quais representam as durações em minutos de cada música. A última linha da entrada consiste de K inteiros positivos, os quais representam o número máximo de minutos de música que é possível gravar em cada cartucho. Nenhuma música possui mais de 50 minutos, e em nenhum cartucho cabe mais de 50 minutos de música.",
        "titulo": "Primeiro Contato",
        "descricao": "Quem já teve um Super Nintendo deve lembrar que os cartuchos quase nunca pegavam no primeiro contato com o console. Às vezes, era preciso soprar repetidas vezes nos conectores tanto dos cartuchos quanto do console para que a conexão fosse estabelecida com sucesso. Ainda bem que a tecnologia evoluiu, mas, diga a verdade, você até que sente falta daquele tempo, não? Fernando é um garoto fascinado por estudar video games antigos. Ele descobriu que é possível inclusive gravar música nos cartuchos antigos do Super Nintendo. Ele tem uma coleção de canções em seu computador e gostaria de gravá-las em alguns cartuchos. Ele sabe que cada cartucho tem capacidade para gravar no máximo um número limitado de minutos de música, e sabe a duração em minutos de cada canção. No entanto, ele está tendo dificuldades para decidir quais canções gravar em quais cartuchos visando maximizar o uso dos cartuchos."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1396",
        "saida": "Para cada instância, você deverá imprimir um identificador \"Instancia c\", onde c é o número da instância atual. Na linha seguinte você deve imprimir a lista de nomes resultante do processo. Após cada nome, seu programa deve imprimir um espaço em branco, inclusive após o último nome (por exemplo, na saída do primeiro caso de teste abaixo: wanderleybthadeubchegadob, onde b representa um espaço em branco. Após cada instância, seu programa deve imprimir uma linha em branco, inclusive após a última.",
        "entrada": "A entrada é composta de diversas instâncias. Cada instância começa com dois inteiros n e k, onde 1 ≤ n ≤ 100 e 0 ≤ k ≤ n, indicando a quantidade nomes e a quantidade máxima de trocas, respectivamente. A próxima linha contém uma sequência de n nomes. Cada nome possui tamanho máximo de 20 caracteres, e letras de 'a' a 'z'. O programa deve parar de processar a entrada quando n = k = 0.",
        "titulo": "Hoje tem Prova da Cris!",
        "descricao": "A Profa. Cristina é muito exigente. Sua fama de maquiavélica já é conhecida fora da universidade e ela até gosta disso... Mas, parece que agora ela exagerou... Na última prova de sua disciplina, a professora exigiu que os alunos formassem fila indiana para entrar na sala de aula. Eles formaram. Quando eles iam entrar, ela gritou: \"Mas, vocês não estão em ordem lexicográfica crescente!!!???\" Os alunos revoltados formaram uma comissão e foram conversar com a professora dizendo que aquilo já era demais. Para não parecerem intransigentes eles disseram que permitiriam no máximo um número k de trocas de posição entre pessoas consecutivas na fila. A professora gostou da idéia, e colocou como um problema extra da prova. Dada uma sequência de nomes e um inteiro k, devolver a menor sequência (em ordem lexicográfica) que pode ser obtida a partir da original com no máximo k trocas de elementos vizinhos. Sua tarefa é resolver este exercício para os alunos da Profa. Cristina a fim de que eles consigam entrar na sala e começar a prova."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1354",
        "saida": "Para cada caso de teste da entrada, imprima uma linha contendo um único número inteiro K, indicando o número mínimo de quadrados necessários para construir a praça de destino. cada uma das K linhas seguintes, contém três inteiros X, Y, L, indicando as coordenadas do canto superior esquerdo, e o comprimento do lado do quadrado correspondente (1 ≤ x, y ≤ N).",
        "entrada": "A primeira linha da entrada contém um único inteiro T, indicando o número de casos de teste (1 ≤ T ≤ 20). Cada caso contém um único inteiro N (2 ≤ N ≤ 50).",
        "titulo": "Um Quadrado Grande, Por Favor",
        "descricao": "Tomy possui vários quadrados de papel. O comprimento do lado destes quadrados(chamamos de 'tamanho'), variam de 1 a N-1, e ele possui na verdade, inúmeros quadrados de cada tipo. Ele costumava ter muito orgulho de seus quadrados, mas um dia, de repente, ele quis ter um maior - um quadrado de tamanho N! Embora ele não tem tal quadrado, ele pode fazê-lo com os quadrados que ele já tem. Por exemplo, um quadrado de tamanho 7 pode ser feito com nove quadrados menores, como mostrado abaixo. Note que não deve haver nenhum espaço vazio no quadrado, e nenhum papel adicional fora do quadrado, e os pequenos quadrados não devem se sobrepor. Como você pode imaginar, Tomy quer fazê-lo usando o número mínimo de quadrados que ele tem, você pode ajudar?"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1166",
        "saida": "Para cada caso de teste da entrada, imprima uma linha contendo um inteiro que indica o número máximo de bolas que podem ser colocadas. Imprima -1 se um número infinito de bolas pode ser colocado.",
        "entrada": "A primeira linha de entrada contem um único inteiro T (1 ≤ T ≤ 50), indicando o número de casos de teste Cada caso de teste contém um único inteiro N (1 ≤ N ≤ 50), indicando o número de varetas disponíveis.",
        "titulo": "Torre de Hanoi, Novamente!",
        "descricao": "As pessoas pararam de mover discos de uma haste para outra depois que eles descobriram o número de passos necessários para completar a tarefa. Por outro lado, elas não pararam de pensar sobre puzzles similares à Torre de Hanoi. Senhor S, como é conhecido, inventou um pequeno jogo. O jogo consiste de N astes e um MONTE de bolas. As bolas são numeradas 1,2,3... As bolas parecem comum, mas na verdade elas são mágicas. Se a soma dos números de duas bolas não for um quadrado perfeito elas irão se repelir com uma força grande quando estiverem muito perto, portanto, elas NUNCA podem ser colocadas encostando uma na outra. O jogador deve colocar uma bola no topo de cada haste por vez. Ele deve primeiro tentar a bola 1, então a bola 2, depois a bola 3, assim por diante... Se ele falhar em fazer isto, o jogo termina. O Jogador deve tentar colocar o máximo de bolas possíveis nas hastes. Você pode ver o exemplo da figura acima, que nos mostra o melhor resultado possível de se obter utilizando 4 hastes."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2169",
        "saida": "Para cada caso de teste imprima se Leon conseguirá ou não completar a missão. Mostre conforme o exemplo de saída.",
        "entrada": "A entrada é composta por diversos casos de teste, cada caso inicia com um valor QA, (1 <= QA <= 7), indicando a quantidade de armas. Em seguida são lidos QA valores e suas respectivas quantidades de munição. É lido então um valor QM (1 <= QM <= 10), indicando a quantidade de monstros, e seguem QM linhas indicando o monstro e a quantidade de cada um. E por ultimo, é recebido um valor QB (1 < QB < 104), indicando a quantidade máxima de balas que ele poderá utilizar, pois dessa forma ele não sairá sem balas do galpão... se sair.",
        "titulo": "Ajude o Leonardo!",
        "descricao": "\"Leonardo Silva Kennedy era apenas um policial novato quando presenciou o tenebroso evento que aconteceu em 1998, na cidade de Raccoon City. Muito tempo se passou e Leonardo finalmente conseguiu deixar para trás as imagens daquele dia. Seis anos depois, ele é um agente do serviço secreto norte-americano, responsável pela proteção da família presidencial. A filha do presidente é sequestrada na saída de sua universidade por uma organização desconhecida. A única pista é que ela teria sido vista em uma remota ilha do continente europeu. Agora, cabe a Leonardo resgatá-la. Mal sabia ele que isso significava uma nova imersão em um pesadelo que ele acreditava ter acabado.\" Em um determinado momento, Leonardo descobre um mapa de um galpão onde ele deverá entrar para buscar uma relíquia. Através do mapa ele pode ver quantos e que tipo de monstros existem no local. Ele dispõe de N armas e um valor Y de munição. Para a sorte dele, ali próximo existe um mercador de armas. Então Leonardo solicita a sua ajuda(o mercador) para que diga se ele conseguirá, com a quantidade de balas e as armas que ele dispõe, matar os monstros ou se será morto. Seguem as armas que Leonardo dispõe no momento e a potência de cada uma: E os monstros que pode haver no galpão: Obs: Ao escolher uma arma, Leonardo utiliza todas as balas que ela possui."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1860",
        "saida": "Imprima uma linha com dois valores: o valor de xl e a distância para o esconderijo mais longe. Arredonde e imprima ambos os valores com exatamente duas casas decimais.",
        "entrada": "A primeira linha contém dois inteiros N e X (1 ≤ N ≤ 5×104, 10 ≤ X ≤ 104). As próximas N linhas indicam as posições dos esconderijos. Cada linha contém dois inteiros xi e yi (0 ≤ xi ≤ X, -104 ≤ yi ≤ 104, yi ≠ 0) indicando a existência de um esconderijo no ponto (xi, yi).",
        "titulo": "A Caminhada da Vergonha de Cersei",
        "descricao": "Septa Unella: \"Vergonha! Vergonha!\" Para pagar por seus pecados, Cersei deve caminhas pelas ruas de King's Landing, nua. Considere King's Landing como um plano Cartesiano. Cersei deve caminhar a partir do ponto (0, 0) até o ponto (X, 0), em linha reta. Note que, para completar seu trajeto, Cersei não deve deixar o eixo x. Entretanto, ela planeja não completar todo o trajeto! Em algum ponto (xl, 0) (0 ≤ xl ≤ X), ela sairá de seu trajeto e correrá para um dos N esconderijos na cidade. Ela quer ficar o mais longe possível do trajeto original. Por isso, ela correrá para o esconderijo que ficar mais longe do ponto (xl, 0). Entretanto, Cersei deve chegar ao esconderijo o mais cedo possível. Sua tarefa é ajudar Cersei a determinar o valor de xl tal que, se ela sair do trajeto no ponto (xl, 0), a distância para o esconderijo mais longe é minimizada."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1365",
        "saida": "Para cada caso de teste, imprima uma única linha contendo a extensão mínima que o grupo pode ter.",
        "entrada": "Cada caso de teste consistirá em diversas linhas. A primeira linha conterá três inteiros positivo R, C e K, como explicado acima (1 ≤ R, C ≤ 300, 1 ≤ K ≤ R × C). As próximas linhas R conterão exatamente C caracteres cada. O j-ésimo caractere da i-ésima linha será 'X' se o j-ésimo assento no a i-ésima linha é tomada ou '.' se ele estiver disponível. Sempre haverá pelo menos K assentos disponíveis no total. A entrada é terminada com R = C = K = 0.",
        "titulo": "Procurando Assentos",
        "descricao": "Um grupo K de amigos vai ver um filme. No entanto, já está muito tarde para obter bons ingressos, por isso, eles estão procurando uma boa maneira de sentar-se todos próximos. Uma vez que todos eles são estudantes de ciências, eles decidiram avançar com um problema de otimização em vez de ir em frente com argumentos informais para decidir quais bilhetes comprar. O cinema tem R linhas com C lugares cada, e eles podem ver um mapa com os atuais assentos disponíveis. Eles decidiram que estar perto um do outro é o que importa, mesmo se isso significar estar na fila da frente, onde a tela é tão grande que é impossível ver tudo de uma só vez. Para obedecer os critérios formais, eles acharam que iriam comprar bancos em ordem, a fim de minimizar a extensão do grupo. A extensão é definida como a menor área do retângulo com os lados paralelos aos assentos que contém todos os assentos comprados. A área de um retângulo é o número de assentos nele contidas. Eles levaram um laptop e pediram para você os ajudá-los a encontrar os assentos desejados."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1700",
        "saida": "Para cada caso de teste imprima em uma única linha o tamanho do maior par de antenas, de mesmo tamanho, que podem ser construídas utilizando qualquer número de palitos.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância contém um inteiro N ( 1 <= N <= 1000 ), o número de palitos encontrados. A segunda linha de cada instância contém uma sequência de N inteiros, S1, ..., Sn, onde Si (1 <= Si <= 100) é o tamanho do iésimo palito encontrado por Joãozinho. O final da entrada é sinalizado por um caso com N = 0. Que não deve ser processado.",
        "titulo": "Antenas",
        "descricao": "A professora do jardim de infância pediu como tarefa de casa que a turma montasse um robô utilizando apenas palitos de dente e cola. Joãozinho decidiu que para diferenciar seu robô dos robôs dos demais alunos, ele faria as antenas de seu robô do maior tamanho possível. Quando Joãozinho estava montando seu robô, os palitos acabaram, exatamente quando faltava apenas montar as duas antenas, e como já era tarde, não havia como comprar mais palitos. Joãozinho quebrou sua cabeça pensando numa forma de terminar seu robô, até que se lembrou que seu vizinho, seu Zé, era dono de um bar, e talvez pudesse lhe arrumar alguns palitos. Infelizmente Joãozinho não estava no seu dia de sorte, quando ele chegou no bar, seu Zé lhe disse que também estava sem palitos, e os únicos palitos que haviam no bar, eram os palitos usados pelos clientes do dia, que estavam esparramados pelo chão do bar, e muitos deles sujos e quebrados. Mas, como Joãozinho é um menino bastante insistente e um pouco porquinho, ele resolveu que iria usar esses palitos mesmo, e combinou com seu Zé que varreria o chão do bar em troca de todos os palitos que encontrasse. Como já era madrugada quando Joãozinho acabou de varrer o chão ele pediu a sua ajuda para determinar qual o maior par de antenas, de mesmo tamanho, que poderia ser montado. Dado o número N de palitos encontrados por Joãozinho e o tamanho de cada um desses palitos, determine o tamanho do maior par de antenas, de mesmo tamanho, que podem ser montadas colando qualquer número de palitos pelas suas extremidades."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1395",
        "saida": "Para cada caso de teste o programa deve produzir uma linha com a mensagem: No solution Se o resultado não puder ser obtido a partir dos números de entrada, ou se um conjunto de linhas com a seqüência de operações leve a partir dos números iniciais para o resultado, levando em consideração os critérios anteriores. Cada operação deve ser expressa da seguinte forma: operando_da_esquerda operador operando_da_direita = resultado Onde operando_da_esquerda e operando_da_direita representam os números envolvidos na operação, o resultado é o resultado da operação, e o operador é um único caractere que representa a operação que deverá ser feita a partir dos seguintes: '+': Adição 'x': multiplicação '-': Subtração '/': Divisão Para cada caso de teste, a última linha de sua solução deve terminar com um símbolo '<-', indicando que esta é a última operação, que dá o número de destino como resultado. Para todos os casos, deverá haver um espaço vazio (apenas um) entre cada impresso e o seguinte. Não deve haver nenhum caractere (/) negociando espaços em branco no início e no fim de cada linha de saída. Cada linha deve terminar com uma marca de final de linha, e não deve aparecer nenhuma linha em branco na saída.",
        "entrada": "A entrada é constituída por um conjunto de linhas. Cada linha representa um caso de teste, e lhes serão dados no seguinte formato: T N I1 ... IN T é o número de destino, N é a quantidade de números iniciais e I1 ... IN são os próprios números iniciais. Todos os números são separados por um único espaço em branco. Não haverá caractere (/) levando espaços em branco no início e no fim de qualquer linha de entrada. A linha final com um único zero marca o fim da entrada e não será processada.",
        "titulo": "Números e Operações",
        "descricao": "Queremos resolver um problema clássico de obtenção de um determinado número a partir de um conjunto de números iniciais, de acordo com as seguintes regras: Todos os números envolvidos no problema são inteiros positivos, e por isso todo resultado intermediário de qualquer operação também deverá ser inteiro. Assim, as operações que levam a não inteiros ou números não positivos serão estritamente proibidas (não vamos considerar truncamento ou resultados de arredondamento, nem qualquer outra coisa do tipo). Nós podemos fazer qualquer uma das quatro operações aritméticas elementares: adição, multiplicação, subtração e divisão. Cada número pode ser utilizada no máximo uma vez: quando utilizamos dois números, os mesmos não podem ser utilizados novamente em operações posteriores (mas o resultado desta operação pode, e as mesmas considerações aplicam-se a este novo número). Não há nenhuma obrigação de fazer uso de todos os números iniciais. Faremos as seguintes premissas sobre os dados de entrada: Para qualquer número de saída T, ele terá sempre que: 0 < T < 2000. Para qualquer número de entrada I, ele terá sempre que: 0 < I < 200. Haverá sempre pelo menos dois números iniciais e sete no máximo. Não vamos considerar os casos de problemas triviais, ou seja, casos em que o número de destino já está contido nos iniciais. A fim de tornar a única solução oferecida pelo programa, também deverá fazer as seguintes suposições sobre a solução que iremos considerar como correta: O programa deverá fornecer a solução que satifaz as condições, com um número mínimo de operações. Se houver mais do que uma solução com o número mínimo de operações, vamos decidir qual tomar de acordo com as características da primeira operação na qual eles se diferem. As próximas regras serão aplicadas. Para duas operações iguais, será escolhido aquele cujo operando do lado esquerdo é maior que, ou igual a, o operando do lado direito. Por exemplo, a operação \"10 x 5 = 50\" terá prioridade sobre \"5 x 10 = 50\". Para as operações que envolvem dois operadores diferentes, será preferido aquele cujo operador tem a prioridade mais alta, definidos como se segue: Adição (mais alto) - Multiplicação - Subtração - Divisão (mais baixo). Para operações com o mesmo operador, será preferido um que envolve o número cuja posição é mais baixa, na ordem em que foram dados na entrada (que aparece em primeiro lugar). Se este primeiro número pode aparecer em duas operações diferentes de mesma precedência, o mesmo critério deve ser aplicado para o segundo operando. Novos números gerados pelas operações são assumidos para serem então, colocados no início da lista ordenada."
    },
    {
        "nivel": "9",
        "assunto": "6",
        "numero": "1282",
        "saida": "Para cada caso teste de saída terá uma linha com um inteiro representando o mínimo custo total, para reagrupar os N amontoados iniciais em K montes maiores.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros N e K os quais denotam espectivamente, o número de montes ou pilhas iniciais e o número desejado de montes após o reagrupamento (1 ≤ K < N ≤ 1000). Cada uma das seguintes N linhas descrevem um dos montes iniciais com dois números inteiros X e W indicando que o ponto X de mineração produziu um amontoado com peso de W (1 ≤ X, W ≤ 106 ). Dentro de cada caso de teste, os montes ou pilhas são dados estritamente em ordem ascendente, considerando os seus pontos de mineração.",
        "titulo": "Organizando Pacotes",
        "descricao": "Uma empresa de mineração extrai térbio, um metal raro usado para a construção de ímãs leves, a partir de areia de rio. Eles mineram um grande rio em N pontos de mineração, cada um deles identificado por sua distância a partir da origem do rio. Em cada ponto de mineração, uma pequena pilha ou amontoado de minério mineral altamente valorizado é extraido do rio. Para recolher o minério mineral, a empresa reagrupa os N amontoados produzidos em um menor número de K pilhas ou montes maiores, cada um localizado num dos pontos de extração inicial. Os montes recém-formados são então recolhidos por caminhões. Para reagrupar os N montes eles usam uma barca, o que na prática pode levar qualquer quantidade de minério mineral por ser bem larga. A barcaça começa na origem do rio e somente pode viajar rio abaixo, de modo que o amontoado de mineral produzido em um ponto X de mineração pode ser levado para um ponto Y de mineração somente se Y > X. Cada monte é movimentado completamente para outro ponto de mineração, ou não se move. O custo de mover um monte com peso W a partir de um ponto X de mineração para um ponto Y de mineração é W (Y - X). O custo total do agrupamento é a soma dos custos de cada movimento de um monte. Nota-se que um monte que não é movido não tem influência sobre o custo total. Dados os valores de N e K, os N pontos de mineração, e o peso da pilha ou amontoado produzido de cada ponto de mineração, escreva um programa que calcule o custo total mínimo para reagrupar estes N montinhos iniciais em K pilhas ou montes maiores."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1687",
        "saida": "Para cada caso de teste você deve imprimir uma única linha contendo o número de possíveis padrões de destravamento. Como este número pode ser grande, imprima seu resto quando dividido por 1300031.",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso contém dois números em uma única linha: N (2 ≤ N ≤ 15) e P (1 ≤ P ≤ 105). A última linha da entrada contém dois 0, caso que não deve ser processado.",
        "titulo": "Destrave o Celular",
        "descricao": "Henrique trabalhou muito durante as últimas férias ajudando seus amigos em problemas de matemática. Ele usou o dinheiro que ganhou para comprar um smartphone. Ele se interessou bastante no sistema de trava do seu celular. O sistema consiste de um grid N por N de pontos e para destravá-lo é preciso desenhar um padrão que passa por exatamente P pontos. Passar por um mesmo ponto mais de uma vez é permitido, mas tais repetições não podem acontecer seguidamente (um movimento que vai de um ponto a ele mesmo não é permitido). Pode-se ir diretamente de um ponto X para outro ponto Y se o segmento que conecta X e Y não passa por nenhum outro ponto. Henrique trabalhou bastante para comprar seu celular e quer ter certeza de que ninguém descobrirá seu padrão de destravamento. Ele quer saber quantos padrões diferentes existem. Dois padrões são considerados o mesmo se e somente se começam no mesmo ponto e seguem uma mesma sequência de movimentos."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1838",
        "saida": "Imprima uma única linha contendo o número máximo de minutos da semana em que é possível não deixar a pedra filosofal ociosa.",
        "entrada": "A primeira linha da entrada é constituída por um único inteiro N (1 ≤ N ≤ 103), o qual representa o número de requisições que foram feitas para a semana. Cada uma das N linhas seguintes, por sua vez, descreve uma requisição através de dois inteiros i e j (1 ≤ i < j ≤ 3.600), os quais representam respectivamente o minuto a partir do qual o pesquisador gostaria de começar a usar a pedra filosofal e o minuto a partir do qual a pedra filosofal estaria livre para ser usada por outro pesquisador.",
        "titulo": "A Pedra Filosofal",
        "descricao": "A Universidade Federal da Fronteira Sul (UFFS) foi criada no dia 15 de setembro de 2009, tendo suas atividades de ensino, pesquisa e extensão começado em 29 de março de 2010 em prédios provisórios alugados. Atualmente, a UFFS possui 6 campi, nas cidades de: Chapecó, Laranjeiras do Sul, Realeza, Cerro Largo, Erechim e Passo Fundo. Em Chapecó, a mudança dos prédios provisórios para o campus ocorreu no 2ọ semestre de 2013. No prédio provisório em que funcionava o curso de Ciência da Computação funcionavam também vários outros cursos, como o curso de Defesa contra as Artes das Trevas, mas havia somente 3 laboratórios, 2 auditórios e 1 pedra filosofal. Todos os pesquisadores interessados em usar a pedra filosofal precisavam fazer suas requisições com no mínimo uma semana de antecedência. Com base na lista de requisições feitas para a semana, o secretário decidia quais requisições atender visando minimizar o tempo em que a pedra filosofal ficaria ociosa. A pedra filosofal ficava disponível para uso 12 horas por dia, o que corresponde a 3.600 minutos por semana. Numerando-se, então, esses 3.600 minutos de 1 a 3.600, cada pesquisador, ao fazer sua requisição, deveria informar o minuto a partir do qual gostaria de começar a usar a pedra filosofal e o minuto a partir do qual a pedra filosofal estaria livre para ser usada por outro pesquisador. Escreva um programa capaz de gerenciar as requisições conforme descrito. Nós nos encarregaremos de voltar no tempo para entregar seu programa ao secretário."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1689",
        "saida": "Para cada caso de teste imprima um único número, a resposta para o problema.",
        "entrada": "A primeira linha conterá um número T (1 ≤ T ≤ 100), indicando a quantidade de casos de teste. Para cada caso de teste, a primeira linha conterá um inteiro N (1 ≤ N ≤ 106) e K (1 ≤ K ≤ 106), o número de radares e a menor distância entre 2 radares, respectivamente. A próxima linha conterá N inteiros separados por espaços, indo de 1 até 106, indicando a posição dos radares, em ordem crescente. A última linha conterá N inteiros positivos separados por espaços, indo de 1 a 103, indicando o lucro de cada radar.",
        "titulo": "Radares",
        "descricao": "Antonio, prefeito de Rio Pequeno, está querendo implantar radares na estrada principal da cidade. Para isso, ele tem uma lista de possíveis pontos onde os radares podem ser instalados. Cada radar tem um lucro associado. Sabe-se que a distância entre dois radares não pode ser inferior a K, de acordo com a legislação de trânsito. Dada a lista de pontos e os seus lucros, a sua tarefa é ajudar Antonio a escolher os pontos para instalar os radares de modo que o lucro seja maximizado. Printe o lucro máximo! Por exemplo, imagine radares nas posições 1, 2 and 3, com lucro 2, 5 e 3, respectivamente. Se K for igual a 2, uma solução ótima seria escolher os radares nas posições 1 e 3, somando 5 de lucro."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2050",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, seqüencial e crescente a partir de 1. Nas próximas linhas, você deve imprimir os nomes de três jogadores daquela mesa seguida de sao amigos ou sao inimigos conforme o caso. Devem haver tantas linhas quantos forem os casos determinados. Estas linhas devem estar listadas em ordem lexicográfica. O mesmo vale para os três nomes em uma mesma linha. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "São dadas várias mesas de pôquer (cada mesa tem sempre 6 jogadores). Para cada mesa é dado o número −1 ≤ m ≤ 15 de pares de amigos seguido, na linha seguinte, dos nomes dos participantes daquele jogo (cada nome é uma string de no mínimo 1 e no máximo 15 caracteres e você pode supor que os nomes dos jogadores são dois a dois distintos). O valor −1 indica o fim dos dados. Em seguida, vêm m linhas, cada uma com os nomes de dois amigos naquela mesa. Considere que um jogador não é amigo de si mesmo.",
        "titulo": "Bar do Ramsey",
        "descricao": "Bill “Snake” Ramsey foi um dos mais famosos donos de saloon em San Antonio. Seu saloon era conhecido até a costa oeste, e suas mesas de pôquer sempre lotadas eram sinônimo de jogos eletrizantes, muito dinheiro e, muitas vezes, muitas disputas sangrentas. Ramsey tinha uma teoria (e seu revólver .38 intimidava os que dele discordavam ao contestá-lo) de que em uma mesa de pôquer com 6 participantes havia sempre ou 3 que eram amigos entre si, ou 3 que eram inimigos entre si (naquela época em San Antonio se você não era amigo de alguém automaticamente se tornava seu inimigo). Hoje sabemos que Ramsey tinha de fato razão. Sua tarefa neste problema é checar a afirmação de Ramsey para vários exemplos."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1487",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia H em que H é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, deve ser impressa a pontuação total conseguida com a coleção determinada por seu programa. Com relação a quais são as atrações da coleção determinada, os colegas decidiram que iriam perguntar para você pessoalmente no futuro, já que eles não querem que outras pessoas saibam e venham a utilizá-la. Uma linha em branco deve ser impressa após cada caso de teste.",
        "entrada": "Seu programa deve estar preparado para processar diversas instâncias. Na primeira linha são dados dois inteiros 0 ≤ N ≤ 100 e 0 ≤ T ≤ 600, em que N é o número de atrações nas quais os colegas gostariam de brincar, e T é o tempo (em minutos) que eles terão disponível para isso. Nas próximas N linhas, são dados dois inteiros 0 ≤ D ≤ 600 e 0 ≤ P ≤ 100 (em cada linha). O primeiro deles, D, representa a duração do brinquedo (incluído aí o tempo de fila e uma estimativa do tempo de traslado entre os brinquedos). O segundo, P, representa a pontuaçãao atribuída ao brinquedo pelos colegas. Um valor N = 0 indica o final das instâncias e não deverá ser processado.",
        "titulo": "Six Flags",
        "descricao": "O Six Flags Fiesta Texas é um dos maiores parques de diversão do mundo, e fica em San Antonio. Sabendo que as finais do ACM-ICPC de 2006 serão naquela cidade, três colegas começaram a planejar em quais dos famosos brinquedos eles iriam, caso seu time se classificasse para as finais mundiais. Para isso, estabeleceram notas para cada uma das atrações de acordo com o quanto eles gostariam de brincar lá. Por exemplo, a montanha russa \"Superman Krypton Coaster\" (que tem 800m de giros, loops e quedas com o carrinho indo a mais de 100km/h) recebeu a maior pontuação possível entre os colegas. O problema é que é impossível visitar todas as atrações em um mesmo dia. Assim, os colegas pesquisaram, para cada uma delas, quanto tempo durava o brinquedo (e quanto tempo de fila teriam de enfrentar até chegar a ele...). Sua tarefa neste problema é encontrar, dado o tempo disponível pelos colegas no Six Flags, uma coleção (pode haver repetições) de atrações que dá a maior pontuação dentro deste período."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1661",
        "saida": "Para cada caso de teste, imprima a quantidade mínima de unidades de trabalho necessárias para que todo habitante tenha sua demanda cumprida. Você pode assumir que este número cabe em um inteiro de 64 bits com sinal (em C/C++ você pode usar o tipo de dados \"long long\", em JAVA o tipo de dados \"long\").",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste inicia com o número de habitantes n (2 ≤ n ≤ 100000). A linha seguinte contém n inteiros ai (-1000 ≤ ai ≤ 1000). Se ai ≥ 0, isso significa que cada habitante que vive na ith casa, deseja comprar ai garrafas de vinho, caso contrário se ai < 0, ele deseja vender -ai garrafas de vinho. Você pode assumir que os números ai resumem a 0. O último caso de teste é seguido por uma linha contendo 0.",
        "titulo": "Comércio de Vinhos na Gergóvia",
        "descricao": "Como você deve saber do cômico \"Astérix e o Escudo de Arverne\", Gergóvia consiste de uma única rua e cada habitante da cidade é um vendedor de vinho. Você quer saber como essa economia funciona? Bem simples: todos compram vinhos dos outros habitantes da cidade. Cada dia, cada habitante decide quanto vinho ele quer comprar ou vender. Curiosamente, a demanda e o fornecimento são sempre os mesmos de modo que cada habitante consegue o que deseja. Contudo, há um problema: transportar o vinho de uma casa para outra resulta em trabalho. Sendo todos os vinhos igualmente bons, os habitantes de Gergóvia não se importam com quais pessoas eles irão comercializar, eles estão somente interessados em vender e comprar um quantidade específica de vinho. Eles são espertos o suficiente para imaginar uma forma de negociar de modo que todo o montante de trabalho necessário para o transporte seja minimizado. Nesse problema você está sendo inquerido para reconstruir o comércio durante um dia em Gergóvia. Para simplificar, nós assumimos que as casas são construidas ao longo de uma linha reta com a mesma distância entre as casas adjacentes. Transportar uma garrafa de vinho de uma casa para uma casa adjacente resulta em uma unidade de trabalho."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1310",
        "saida": "Para cada caso de teste imprima o máximo de dinheiro que George pode ganhar trazendo o seu circo para a cidade de acordo com o exemplo abaixo.",
        "entrada": "A entrada contém muitos casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 50) que representa o número de dias que George pode trazer o seu circo para a cidade. A segunda linha do caso de teste contém um número inteiro custoPorDia (0 ≤ custoPorDia < 1000) que representa o custo em manter o circo na cidade. Segue N linhas (uma por cada dia), contendo cada um um inteiro receita (0 ≤ receita < 1000) representa a receita que o circo obtem em cada dia. O final da entrada é indicado por EOF (fim de arquivo).",
        "titulo": "Lucro",
        "descricao": "George é dono de um circo e traz seu circo de cidade em cidade. Ele sabe o quanto de receita ele pode obter em qualquer dia de uma série de dias em uma cidade. Ele também sabe o custo constante diário para manter o seu circo. George quer trazer seu circo à cidade para a série de dias que resulta em maior lucro. Por exemplo, se em uma determinada cidade o custo for de $ 20 por dia em um exemplo com 6 dias, sendo que as receitas previstas por dia são {$ 18, $ 35, $ 6, $ 80, $ 15, $ 21}, George pode obter o máximo de lucro trazendo o seu circo para esta cidade do dia 2 ao dia 4. Desta forma ele pode lucrar (35 + 80 + 6) - (3 * 20) = $ 61. Nota: A série de dias que George traz seu circo para a cidade pode ser entre 0 e o número máximo de dias, inclusive. Obviamente, se George traz seu circo para a cidade por 0 dias, ele obtém $ 0 de lucro."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1642",
        "saida": "Para cada teste, imprima uma linha com o comprimento da maior subsequência do texto que consiste em no máximo m caracteres diferentes.",
        "entrada": "A entrada consiste em vários casos de teste, cada caso de teste possui duas linhas. A primeira linha de cada caso contém o número m (1 ≤ m ≤ 128), que especifica o número de teclas restantes (as que ainda funcionam) . A segunda linha de cada caso de teste consiste no texto em que Bruce deseja digitar. Você pode deduzir que esse texto não ultrapasse 1 milhão de caracteres. Note que a entrada pode possuir caracteres de espaço, que devem ser tratados como qualquer outro carácter. O último caso de teste é seguido por uma linha contendo um zero. Dica: A maior substring para o primeiro caso de teste é \"_by_bru\", onde _ representa um caractere de espaço.",
        "titulo": "Teclado Quebrado",
        "descricao": "O teclado do Bruce está quebrado, apenas algumas teclas ainda funcionam, Bruce descobriu que ele ainda pode digitar textos, mudando o layout do teclado, sempre que a letra necessária não está no mapeada para as m teclas que atualmente funcionam do teclado. Dado o texto que Bruce deseja digitar, ele quer saber se você consegue dizer a ele o número máximo de caracteres consecutivos no texto, que pode ser digitado sem a necessidade de mudar o layout do teclado, Ou seja, cada tecla está mapeada para exatamente um carácter, e não é possível digitar esse carácter por outras combinações de teclas, isso significa que Bruce quer saber o comprimento da maior subsequência do texto, que consiste em no máximo m caracteres diferentes."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1590",
        "saida": "Imprima o maior valor possível para cada caso, em uma única linha.",
        "entrada": "Na primeira linha temos um inteiro T (T = 100), indicando o número de casos de teste. Para cada caso, há uma linha que terá os números inteiros N (1 ≤ N ≤ 20* ou 1 ≤ N ≤ 35**) e K (1 ≤ K ≤ 7) . Na linha seguinte terão os N números inteiros separados por espaços. Os números da lista vão de 0 até 230-1, inclusive, e podem se repetir. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes. Os limites são estes porque 35+7=42 ;)",
        "titulo": "Cuarenta e Dois",
        "descricao": "Dado uma lista de N números inteiros, escolha K ou mais deles em que a operação binária AND dos números escolhidos seja o maior possível. Imprima este valor. Para informações sobre o AND consulte: http://en.wikipedia.org/wiki/Binary_and#AND"
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1892",
        "saida": "Para cada caso de teste, imprima uma única linha com o número pedido na especificação.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um único inteiro N, que representa o número de alunos, onde 1 ≤ N ≤ 105. As próximas N linhas são a classificação final dos alunos. Cada linha contém uma cadeia de exatamente 10 caracteres.",
        "titulo": "Calouro Vence Veterano?",
        "descricao": "Professor Denis está curioso para saber se a classificação final de seus N alunos de programação competitiva segue a ordem de matrícula na universidade. Ele pediu a sua ajuda para, dada a classificação final, contar quantos pares (i, j) existem tais que i m[j], onde 1 ≤ i,j ≤ N e m[i] significa a matrícula do aluno que ficou em i-ésimo lugar."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1645",
        "saida": "Para cada caso de teste, imprimir uma linha com o número de sequências crescentes de tamanho k que a sequência de entrada contém. Você pode assumir que a maneira com que as entradas são escolhidas permite que esse número caiba em um inteiro com sinal de 64 bits (em C/C++, você pode usar o tipo de dado \"long long\", em java, o tipo \"long\").",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois números n e k (1 ≤ k ≤ n ≤ 100), sendo que n é o tamanho da sequência escolhida pela máquina e k é o tamanho desejado das sequências crescentes. A linha seguinte deve conter n inteiros distintos dois a dois ai (-10000 ≤ ai ≤ 10000), sendo ai o i-ésimo número na sequência escolhida pela máquina. A linha seguinte ao último caso de teste deve conter dois zeros.",
        "titulo": "El Dorado",
        "descricao": "Bruce Force foi a Las Vegas, o El Dorado dos apostadores. Ele está especialmente interessado em um jogo de apostas no qual uma máquina escolhe números aleatórios, formando uma sequência de n números. Cada jogador deve estimar previamente quantas subsequências crescentes de tamanho k existirão na sequência de números. Uma subsequência de uma sequência a1,...,an é definida como ai1, ..., ail sendo que 1 ≤ i1 < i2 < ... < il ≤ n. A subsequência é crescente se aij-1 < aij para todos 1 < j ≤ l. Bruce não confia que o Cassino contará corretamente o número de subsequências crescentes de tamanho k. Ele perguntou se você consegue resolver esse problema para ele."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2109",
        "saida": "Para cada instância, imprima uma linha com um único ponto flutuante arredondado para 3 casas decimais, indicando a probabilidade que o Alexey vença o duelo, sendo que ele que começa atacando.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém quatro inteiros, VA, VB (1 ≤ VA , VB ≤ 300), NA and NB (1 ≤ NA, NB ≤ 10). Cada uma das próximas NA linhas descrevem um ataque do Alexey, elas começam com um inteiro D (1 ≤ D ≤ 3) e são seguidas por outros D inteiros L1 , . . . , LD (1 ≤ Li ≤ 12), indicando que nesse ataque Alexey lança D dados, com L1 , L2 , . . . , LD faces. As próximas NB linhas descrevem os ataques do Boris de maneira análoga.",
        "titulo": "Duelo de Espiões",
        "descricao": "Alexey e Boris eram dois agentes da KGB que moravam em Ecaterimburgo nos anos 70. A cidade era um tanto parada, e como nada acontecia, os dois decidiram inventar um jogo de dados para não morrerem de tédio. Nesse jogo cada um deles começa com A e B pontos de vida respectivamente. Cada um têm à sua disposição um número de ataques possíveis, e eles se alternam atacando um ao outro. Cada ataque é descrito por uma quantidade de dados. Para saber o dano do ataque rodamos essa quantidade de dados e a soma dos valores é igual ao dano causado. Para jogar, eles têm disponível dados honestos com um número de faces entre 1 e 12. Dessa forma, se um dado com L faces for jogado ele vai mostrar um valor inteiro entre 1 e L, com igual probabilidade e de maneira independente de qualquer outro lançamento no jogo. Ambos os jogadores conhecem todos os seus ataques e os do seu oponente e escolhem como atacar em cada turno de forma a maximizar a sua própria probabilidade de vitória. Sua tarefa nesse problema é determinar qual a probabilidade de vitória de cada jogador."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1738",
        "saida": "Para cada consulta em todos os casos de teste, gere uma linha contendo os identificadores de todas as empresas que podem rotear pacotes de dados em suas próprias conexões a partir do nó de início para o nó final da consulta. Se não houver empresas, imprima \"-\". Imprima uma linha em branco após cada caso de teste.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia-se com o número de nós da rede n. A entrada é terminada por n = 0 . Caso contrário, 1 ≤ n ≤ 200. Os nós tem os números 1 , ..., n . Depois segue-se uma lista de conexões . Cada conexão começa com dois números A, B. A lista de conexões é terminada por A = B = 0. Caso contrário, 1 ≤ A, B ≤ n, e eles indicam o início e o ponto final da conexão unidirecional, respectivamente. Para cada conexão, os dois nós são seguidos pelas empresas que têm uma ligação do nó A para o nó B. A companhia é identificada por uma letra minúscula. O conjunto de empresas que possuem uma conexão é uma palavra composta apenas por letras minúsculas. Depois da lista de conexões, cada caso de teste é completado por uma lista de consultas. Cada consulta é composta de dois números A, B. A lista (e com ela o caso de teste) é terminada por A = B = 0. Caso contrário, 1 ≤ A, B ≤ n, e eles indicam o início e o ponto final da consulta. Você pode assumir que nenhuma ligação e nenhuma consulta contém os nós iniciais e finais idênticos.",
        "titulo": "Rede de Fibra",
        "descricao": "Diversas empresas iniciantes decidiram construir uma Internet melhor, a chamada \"FiberNet\". Eles já instalaram muitos nós que atuam como roteadores em todo o mundo. Infelizmente, eles começaram a discutir sobre as linhas de conexão, e acabou cada empresa estabelecendo seu próprio conjunto de cabos entre alguns dos nós. Agora, provedores de serviços, que querem enviar dados do nó A para o nó B estão curiosos, qual é a empresa capaz de fornecer as conexões necessárias. Ajude os provedores, respondendo às suas perguntas."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1205",
        "saida": "Para cada instância imprima uma linha contendo a probabilidade de sucesso do soldado soviético. A probabilidade deve ser impressa com 3 casas decimais.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém 3 inteiros, N (2 ≤ N ≤ 1000), M, e K (0 ≤ K ≤ 1000) e a probabilidade P (0 ≤ P ≤ 1) do soldado matar um atirador. Os inteiros N, M, e K representam respectivamente os números de pontos estratégicos, estradas ligando pontos estratégicos e balas carregadas pelo soldado soviético. Os pontos estratégicos são numerados de 1 a N. Cada uma das próximas M linhas contém um par de inteiros i e j indicando que existe uma estrada ligando o ponto i ao j. Em seguida tem uma linha contendo um inteiro A (0 ≤ A ≤ 2000), correspondendo ao número de atiradores na cidade, seguido por A inteiros indicando a posição de cada atirador. A última linha de cada instância contém dois inteiros indicando o ponto de partida e o destino do soldado.",
        "titulo": "Cerco a Leningrado",
        "descricao": "A cidade de São Petersburgo mudou de nome depois da revolção russa em 1914 para Petrogrado. Após a morte de Lênin, em homenagem ao grande líder o nome da cidade mudou novamente para Leningrado em 1924, e assim permaneceu até o fim da União Soviética. Em 1991, a cidade voltou a ter o nome antigo. Durante a segunda guerra mundial a cidade de Leningrado sofreu um cerco das tropas alemãs que durou cerca de 900 dias. Foi uma época terrível, de muita fome e perdas humanas, que terminou em 27 de janeiro de 1944 com a vitória dos soviéticos. É considerada uma das vitórias mais custosas da história em termos de vidas humanas perdidas. No auge da ofensiva alemã, no ano de 1942, vários atiradores de elite foram espalhados pela cidade, inclusive, em alguns pontos estratégicos da cidade mais de um atirador aguardavam soldados inimigos. A espionagem russa tinha informações detalhadas das habilidades desses atiradores, mas seus esconderijos eram excelentes, tornando a tarefa de um soldado soviético que desejasse cruzar a cidade extremamente difícil. Os soldados soviéticos eram bem treinados, mas com o passar do tempo e a continuação do cerco à cidade, os melhores soldados foram sendo dizimados, uma vez que se errassem o alvo na primeira tentativa certamente eram mortos pelos soldados alemães na tocaia. Sabendo a probabilidade de um soldado em matar um atirador alemão e sabendo também o número de balas que ele tinha à sua disposição, desejamos saber a probabilidade desse soldado conseguir chegar a um ponto estratégico de destino, partindo de um ponto estratégico de origem. O soldado, sendo muito experiente, sempre usava um caminho que maximizava a probabilidade de sucesso. Note que o soldado deve matar todos os atiradores presentes no caminho usado, inclusive os que estiverem nos pontos estratégicos de origem e destino."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1774",
        "saida": "Seu programa deve imprimir um único valor inteiro que representa o custo total que a empresa gastará com cabos após as modificações.",
        "entrada": "A primeira linha é composta por dois inteiros R (3 ≤ R ≤ 60) e C (R ≤ C ≤ 200) representado respectivamente a quantidade de roteadores e a quantidade de cabos de internet utilizados atualmente. Seguem C linhas, cada uma contendo três inteiros V (1 ≤ V ≤ R), W (1 ≤ W ≤ R) e P (1 ≤ P ≤ 10000), sendo V e W um par de roteadores que estão conectados por um cabo de internet e P o preço do cabo de internet utilizado.",
        "titulo": "Roteadores",
        "descricao": "Bruno é o responsável por configurar os roteadores de uma empresa. Os roteadores transmitem os dados entre si através dos cabos de internet, Os dados transmitidos podem trafegar por uma ou mais rotas para serem entregues ao destinatário. O preço dos cabos de rede utilizados nos roteadores da empresa pode chegar a ser muito caro, e a empresa precisa cortar gastos. Pensando nisso a empresa decidiu fazer algumas alterações na infra-estrutura de redes. Bruno deve modificar a infra-estrutura da rede da empresa de forma com que todos os roteadores consigam transmitir dados entre si e exista somente uma rota entre cada par de roteadores, economizando o máximo possível de cabos de internet. A sua tarefa é descobrir qual será o custo total com cabos que a empresa terá após as modificações feitas por Bruno. A figura abaixo mostra (a) a infraestrutura de redes atual; e (b) a infraestrutura de redes após as modificação feitas."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "2130",
        "saida": "Para cada instância, você deverá imprimir um identificador Instância k, onde k é o número da instância atual. Para cada consulta, na ordem da entrada, você deve imprimir o custo mínimo ou -1 caso não exista caminho entre as duas cidades. Após cada instância imprima uma linha em branco.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em dois inteiros n (1 ≤ n ≤ 100) e m (1 ≤ m ≤ 100000), indicando o número de cidades e o número de escalas. Nas m linhas seguintes temos três inteiros u, v e w (1 ≤ u, v ≤ n e 0 ≤ w ≤ 100) indicando que existe uma escala que vai de u para v com custo w. Em seguida um inteiro c (1 ≤ c ≤ 10000) indicando o número de consultas e nas c linhas seguintes temos três inteiros o, d e t (1 ≤ o, d ≤ n e 1 ≤ t ≤ n) onde o é a cidade de origem, d é a cidade de destino e t indica que as cidades 1,2,..,t podem ser usadas para escalas. A entrada termina com ﬁnal de arquivo.",
        "titulo": "Final Mundial de 2008",
        "descricao": "Preocupado com a atual situação de crise no transporte aéreo, o diretor regional do concurso do ICPC no Brasil já iniciou seus preparativos para fazer as reservas das passagens aéreas para as ﬁnais mundiais de Banff em 2008. O primeiro passo foi estudar a malha aérea disponível, em que cada voo tem um certo preço e liga duas cidades (estamos, na verdade, chamando de voo apenas um trecho non stop de um voo comercial). O objetivo do diretor é fazer várias consultas nesta malha de voos. Em geral desejamos fazer voos sem escalas, mas estes podem ser muito caros. Para contornar este fato o diretor deseja permitir algumas escalas possíveis. Assim, ele ordenou as várias cidades da malha em sua ordem de preferência para fazer escala. Ou seja, a cidade de índice 1 é a que ele prefere fazer escala, seguida pela cidade 2, e assim por diante. As consultas que o diretor fará são do seguinte tipo. É dada a cidade de partida e de chegada e um número t de cidades em que o diretor permite que sejam feitas escalas. Seu programa deverá encontrar o custo de um voo de custo mínimo entre as cidades que faça, no máximo, escalas nestas cidades. Por exemplo, se t = 1 você deverá encontrar o custo de um voo de custo mínimo entre as duas cidades que seja, ou non stop ou que faça uma escala na primeira cidade."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1498",
        "saida": "Para cada caso de teste de entrada, imprima uma linha com um inteiro que representa o tamanho mínimo (número total de caracteres) que o texto pode ter assim como os códigos gerados têm os comprimentos determinados.",
        "entrada": "A entrada contém vários casos de teste e terminam com EOF. A primeira linha de cada caso de teste contém um inteiro N (2 ≤ N ≤ 50) que representa o número de caracteres diferentes que aparece no texto. A segunda linha contém N inteiros Li indicam os comprimentos dos códigos escolhido pelo algoritmo de Huffman para os diferentes caracteres (1 ≤ Li ≤ 50 para i = 1, 2, ..., N). você pode assumir que existe pelo menos uma árvore, construída tal como descrito, que produz códigos com o dado comprimentos.",
        "titulo": "Inversão de Huffman",
        "descricao": "Codificação Estática de Huffman é um algoritmo de codificação usado principalmente para compressão de texto. Dado um texto de determinado tamanho feito de n caracteres diferentes, o algoritmo escolhe N códigos , um para cada diferente caractere. O texto é compactado usando esses códigos. Para escolher os códigos, o algoritmo constrói uma árvore binária com N folhas. Para N ≥ 2 a árvore pode ser construído como se segue. 1. Para cada caractere diferente no texto construa uma árvore contendo apenas um único nodo, e atribua a ele um peso coincidente com o número de ocorrências de caracteres no texto. 2. Construia um conjunto s contendo as N árvores acima. 3. Enquanto s contiver mais de uma árvore: (a) Escolha t1 ∈ s com peso mínimo e remova-o de s. (b) Escolha t2 ∈ s com peso mínimo e remova-o de s. (c) Crie uma nova árvore t com t1 como a sua subárvore esquerda e t2 como sua subárvore direita e atribua para t a soma dos pesos de t1 e t2. (d) Inclua t em s. 4. Retorne a única árvore que sobrar em s . Para o texto \"abracadabra\" , a árvore produzido pelo processo acima descrito pode ser semelhante a imagem à esquerda, onde cada nodo interno é marcado com o peso da sub-árvore esquerda daquele nodo. Note que a árvore obtida também pode se parecer com a imagem da direita, entre outras coisas, porque nas etapas 3a e 3b do conjunto s pode conter várias árvores com peso mínimo. Para cada caractere diferente do texto, seu código depende do caminho que existe na árvore final, à partir da raiz até a folha correspondente ao caracter. O tamanho do código é o número de arestas existentes no caminho (que coincide com o número de nodos internos do caminho). Assumindo que a árvore da esquerda foi construída por um algoritmo, o código para “r” tem tamanho 3 enquanto que o código para “d” tem tamanho 4. Sua tarefa é, dado os tamanhos dos N códigos escolhidos pelo algoritmo, encontrar a árvore mínima (em número total de caracteres) que o texto poderá ter de forma que os códigos gerados tenham comprimento N"
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1454",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Nas próximas k linhas, você deve imprimir as maiores alturas encontradas nas rotas entre os k pares (origem, destino) fornecidos, um valor por linha, na ordem da entrada. Uma linha em branco deve ser impressa após cada instância.",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversos mapas, doravante denominados instâncias. Cada instância tem a estrutura que segue. Na primeira linha são fornecidos dois inteiros n (0 ≤ n​ ≤ 100) e m (0 ≤ m ≤ 4950) que representam, respectivamente, os números de interseções e de ruas. Por razões de clareza, as interseções são numeradas de 1 a n, inclusive; toda rua começa e termina em uma interseção; e não existem interseções fora das extremidades de uma rua. Nas próximas m linhas são fornecidos três inteiros: i e j (1 ≤ i, j ≤ n) que indicam a existência de uma rua entre as interseções i e j; e h que representa a maior altitude encontrada quando a rua é trafegada. Esses inteiros estão separados por espaços em branco. Na linha seguinte, é dado um inteiro k (1 ≤ k ≤ 50) que representa o número de pares (origem, destino) que serão especificados nas próximas k linhas. Cada par é formado por dois inteiros i e j como acima. Isto é, origem e destino são interseções de ruas, e também estão separados por espaços em branco. Valores n = m = 0 indicam o final das instâncias e não devem ser processados.",
        "titulo": "O País das Bicicletas",
        "descricao": "Como você já deve saber, a bicicleta é um dos meios de transportes mais populares da China. Quase todos os chineses possuem a sua, e utilizam-na para trabalho, recreação, e outras atividades. Após muitos anos pedalando, Mr. Lee já não têm a mesma disposição para encarar as diversas subidas da cidade onde mora. E a cidade em que Mr. Lee vive é extremamente montanhosa. Por razões sentimentais, ele não quer mudar para uma cidade mais plana. Resolveu, então, que tentaria evitar grandes altitudes em seus caminhos mesmo que, para isso, tivesse que pedalar um pouco mais. Mr. Lee obteve com o serviço topográfico chinês uma coleção de mapas de sua cidade, em que cada rua desses mapas possui a informação da maior altitude encontrada quando trafegada. Tudo que ele precisa fazer agora é determinar rotas que minimizem a altura percorrida entre pares (origem, destino). Sabendo que você planeja visitar a cidade em que ele mora no próximo ano, Mr. Lee pediu sua ajuda. Em uma primeira etapa, ele deseja que você implemente um programa que receba mapas topográficos da cidade e uma coleção de pares (origem, destino). Para cada par, seu programa deve imprimir a maior altura encontrada em uma rota entre a origem e o destino. Lembre-se que as rotas devem minimizar tais alturas. As rotas propriamente ditas, serão determinadas em uma segunda etapa (quando você chegar à China para visitá-lo). Como o transporte utilizado é uma bicicleta, você pode considerar que todas as ruas da cidade são de mão dupla. Não demore, pois Mr. Lee conta com você. :-)"
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2117",
        "saida": "Seu programa deve gerar uma única linha que contêm um único inteiro: o maior número de amigos que o Mestre pode conseguir.",
        "entrada": "A primeira linha da entrada contêm dois inteiros: N e M (3 ≤ N, M ≤ 1000), o número de comentários na lista que mestre recebeu e o número de pessoas que são amigos de amigos do Mestre, respectivamente. As próximas N linhas irão conter cada um dos comentários da lista que Mestre recebeu. Cada linha representa um comentário. Por restrição do FariasBook, cada comentário só pode conter no máximo 140 caracteres, que devem ser letras (minúsculas ou maiúsculas) ou espaços. As próxima M linhas contêm cada uma, uma letra maiúscula Ci e um inteiro Ki, que representam, respectivamente, a letra favorita da pessoa i e quantas vezese ela deve aparecer em um comentário para que a pessoa aceite a solicitação de amizade do Mestre.",
        "titulo": "Mestre Me Ajude",
        "descricao": "Mestre Pátio Zero é um coordenador do Farias Brito que usa de sua extensa rede de amigos no FB (FariasBook) para auxiliar jovens alunos que desejam estudar na organização. Recentemente, ele decidiu ampliar ainda mais seu número de amigos, e fará isso comentando fotos avulsas de pessoas que são amigas de seus amigos. Baseado em um recente estudo do renomado instituto de pesquisa FBideias, Mestre sabe que uma determinada pessoa i aceitará sua solicitação de amizade após ele deixar um comentário S em uma de suas fotos se a letra favorita da pessoa i aparecer pelo menos Ki vezes em S, não importando se a letra aparece em sua forma maiúscula ou minúscula. Por carregar consigo o nome da Organização, Mestre enviou para o FBideias todos os seus possíveis comentários, e recebeu uma lista com os N que foram aprovadas como politicamente corretos, mas como o FariasBook tem uma política contra SPAM muito rígida, ele não pode repetir o mesmo comentário em duas fotos distintas. Jogério Rúnior estuda para olimpíadas de informática no colégio, e por isso Mestre decidiu pedir a ajuda dele em duas tarefas: consertar sua impressora e escolher o que comentar em cada foto de modo que seu número de amigos aumente o máximo possível. Ele percebeu que a impressora apenas estava com um cabo solto, resolveu esse problema e passou para você, a novata Fia Breire, a missão de comentar as fotos. Ajude o Mestre!"
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2056",
        "saida": "Para cada labirinto, inicialmente imprima o número da instância, conforme mostra o exemplo de saída abaixo. Se for impossível levar a caixa até sua posição final, imprima \"Impossivel\" (sem aspas). Caso contrário, você deve imprimir dois inteiros x e y; x indica o número de movimentos (passos + empurrões) e y o número de empurrões de uma sequência que faz com que você leve a caixa até a posição final. O número de empurrões deve ser minimizado. Caso exista mais de uma sequência possível que utiliza um número mínimo de empurrões, o número total de movimentos deve ser minimizado. Imprima uma linha em branco após cada instância.",
        "entrada": "O arquivo de entrada é composto por várias instâncias. Cada instância começa com uma linha contendo dois inteiros r e c (20 ≥ r,c) representando o número de linhas e colunas do labirinto. Em seguida, são fornecidas r linhas, cada uma contendo c caracteres. Cada caractere descreve uma célula do labirinto. Uma célula ocupada por uma pedra é indicada por # e uma célula vazia é representada por um \".\" (sem aspas). Sua posição inicial é indicada por S, a posição inicial da caixa é indicada por B e a posição final da caixa é indicada por T. A entrada termina quando r = c = 0.",
        "titulo": "O Cubo",
        "descricao": "Num futuro não muito distante as pessoas buscarão jogos cada vez mais perigosos para se divertir. Depois de ultra-leve e bungee-jump as pessoas precisarão de jogos em que suas habilidades mentais sejam também colocadas a prova. É o caso deste jogo, chamado \"O Cubo\", inventado na Nova Zelândia. Em alguns lugares o jogo também é conhecido pelo seu nome em japonês: \"Sokoban\". Considere um labirinto bi-dimensional composto por células quadradas. Cada uma delas ou está livre ou está sendo ocupada por uma pedra. A cada passo, você pode sair da célula em que está e se mover para outra célula vizinha livre (acima, abaixo, à direita ou à esquerda). Uma única célula do labirinto contém uma pilha de caixas. A pilha pode ser movida de uma célula i para uma célula k (por exemplo, k = i + 1), vizinha de i, apenas se você estiver numa célula j (no caso, j = i - 1), vizinha de i, e a direção ik é igual à direção ji (ou seja, você está empurrando a caixa para a próxima célula). A caixa não pode ser movida de qualquer outra maneira (você não pode puxá-la, por exemplo). Logo, se ela for parar em algum canto do labirinto, você não será capaz de movê-la novamente. Por fim, note que em cada empurrão você dá um passo, e que o contrário não é necessariamente verdade. Uma das células vazias é marcada como a célula final. Sua tarefa é trazer a caixa para essa célula final através de uma sequência de passos e de empurrões. Como a caixa é pesada, você quer realizar o menor número possível de empurrões. Observe que no jogo da vida real há a possibilidade de você se prender ou mesmo ser esmagado pela caixa, tornando tudo muito mais divertido."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1270",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma linha com o comprimento total mínimo de fibra óptica necessária para ligar as cidades informadas. Sua resposta deve ser arredondada para um dígito decimal.",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste começa com uma linha contendo o número de cidades N (1 ≤ N ≤ 1000) no país. A seguir, para cada cidade, há uma sequência de linhas. A primeira linha contém o nome (único) da cidade (apenas letras maiúsculas, no máximo de 15 letras), e o número de locais candidatos Ci (1 ≤ Ci ≤ 50) em que o roteador óptico pode ser instalado. Então, existe uma linha para cada local candidato, contendo dois inteiros X e Y que representam as coordenadas do local (-10000 ≤ X, Y ≤ 10000). Você deve usar a distância euclidiana entre os sites para calcular o comprimento da fibra correspondente necessário para ligá-los. Depois da descrição de cada cidade, com seus sites candidatos, haverá N - 1 linhas, cada uma delas contendo o nomes de duas cidades que terão um link de fibra instalado entre elas. O final da entrada é indicado por N = 0.",
        "titulo": "Fibra Óptica",
        "descricao": "Um país em desenvolvimento está tentando melhorar sua infra-estrutura de comunicação. Atualmente, cada cidade do país tem a sua rede de computadores local, mas não há uma comunicação rápida entre as cidades. O Ministério Autônomo das Comunicações (ACM) do país decidiu criar uma rede de fibra óptica de grande velocidade que ligará todas as cidades. A fim de fazer isso, eles decidiram fazer a seguinte abordagem. Pares de cidades foram escolhidas para ter uma ligação de fibra óptica instalada entre elas. A escolha foi tal que haverá apenas um caminho de fibra entre qualquer par de cidades, a fim de reduzir o custo. Os pares de cidades foram escolhidos considerando diversos fatores, incluindo a análise de demanda estimada e a distância entre as cidades. Cada cidade terá um roteador óptico instalado, o qual será utilizado para conectar todas as ligações óticas com uma extremidade da cidade. Em cada cidade, há muitos locais diferentes onde o roteador óptico pode ser instalados. Sua tarefa, como engenheiro que está trabalhando neste projeto, é desenvolver um programa de computador que receba as localizações de cada uma das cidades e minimize o tamanho total de fibra que seria necessária para este projeto."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2173",
        "saida": "Para cada caso de teste deve ser impressa uma única linha com um inteiro que representa a maior quantia possível do prefeito roubar e não mentir em seu discurso.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N (1 ≤N ≤104) e M(1 ≤M ≤105), o número de esquinas e de ruas respectivamente. Cada uma das próximas M linhas possui três inteiros X (1 ≤X ≤ N), Y(1 ≤ Y ≤ N) e C(1 ≤ C ≤ 103), indicando que para asfaltar a rua que liga a esquina X com a esquina Y o custo é C. Sempre é possível escolher as ruas de maneira que o discurso do prefeito seja verdadeiro. Depois do último caso de teste, tem uma linha com dois zeros.",
        "titulo": "Caixa Dois",
        "descricao": "O prefeito de Nlogônia está sendo acusado de usar o asfaltamento como caixa dois. Os investigadores suspeitam que ele fez um orçamento maior do que o usado nas obras. Em um pronunciamento oficial, o prefeito disse: “Eu asfaltei o menor número de ruas que permitissem aos cidadãos passearem sem precisarem passar por uma rua de barro”. O Folha de Nlogônia conseguiu alguns documentos sobre as ruas que poderiam ser pavimentadas e quanto isso custaria. Aqui é onde você entra, o jornal te contratou e te forneceu os documentos que eles possuem. Então você pode calcular o maior valor que o político pode ter ganho nesse esquema. Lembre-se você deve considerar que o discurso é verdadeiro, caso contrário você pode ser processado."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1823",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, seqüencial e crescente a partir de 1. Na linha seguinte, voce deve imprimir sim se existir uma maneira de ir do ponto de partida do labirinto até seu ponto de chegada (sem atravessar nenhum pauzinho...), e imprimir nao em caso contrário. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversos labirintos, doravante denominados instâncias. Cada instância é iniciada com uma linha contendo 5 números, ditos n xi yi xf yf . O valor n indica o número de pauzinhos que foram usados para construir o labirinto. O par ( xi , yi ) é o canto inferior esquerdo do pátio e também o ponto de partida. O par ( xf , yf ) é o canto superior direito e também ponto de chegada do labirinto. Nas próximas n linhas são dadas as coordenadas x1 y1 x2 y2 representando os extremos ( x1 , y1 ) e ( x2 , y2 ) de um dos pauzinhos usados na construção do labirinto. O arquivo de entrada termina com n < 0. Pode-se assumir que todos os números dados são inteiros e que n ≤ 1000.",
        "titulo": "O Penúltimo Imperador",
        "descricao": "Muito se conhece do último imperador da China, imortalizado no clássico filme vencedor do Oscar. Porém, seu antecessor, o Imperador Thang Po Lop teve uma vida muito mais interessante, uma vez que morreu ainda na cidade proibida, cercado de concubinas e criados eunucos. O Imperador Po Lop era um grande colecionador de pauzinhos (daqueles que os orientais utilizam para comer). Desde seus 9 anos ele os guardava e construía com eles enormes labirintos utilizando uma estratégia bastante interessante. Inicialmente Po Lop escolhia um dos pátios retangulares da cidade proibida para construir o labirinto, e esse labirinto sempre ocupava todo o espaço do pátio escolhido. Os pauzinhos eram então colocados nesse pátio aparentemente em lugares aleatórios, sempre paralelos a um dos cantos do pátio. O imperador nunca colocava pauzinhos sobrepostos (nem mesmo parte deles), apesar de ser possível existir cruzamentos ou até mesmo pauzinhos se encostando. Consta na biografia do imperador Po Lop que ele construiu labirintos gigantescos, sempre tomandos esses cuidados. Infelizmente havia um problema. Apesar de exímio construtor de labirintos, o imperador era incapaz de saber se afinal o labirinto continha ou não um caminho ligando sua a entrada à sua saída (sempre em lados opostos do pátio). Para saber isso, ele se utilizava de seus eunucos. Ele instruía o eunuco a procurar o caminho naquele labirinto. Muitas vezes, o eunuco dizia não ser possível. O imperador Po Lop se zangava e degolava o infeliz, pois duvidava da resposta do criado. Felizmente, além de muito paciente (não com eunucos) o imperador era bastante cuidadoso, e anotava criteriosamente as informações sobre os labirintos que construía. Estas anotações foram encontradas na biblioteca da cidade proibida quando da revolução e salvas da destruição. Sua tarefa neste problema é resolver finalmente o enigma, verificando se os labirintos construídos pelo Imperador Po Lop têm ou não saída."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1348",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha, contendo ou a palavra 'yes' (se é possível satisfazer a todos os clientes que votaram) ou a palavra 'no' (se não é possível).",
        "entrada": "Seu programa deverá processar diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros C e P, representando respectivamente o número de clientes e o número de produtos no teste (1 ≤ C ≤ 1000 e 1 ≤ P ≤ 10000). Cada uma das próximas C linhas descreve a preferência de um cliente, representada por quatro inteiros X, Y, S e T (0 ≤ X, Y, S, T ≤ P). X e Y são os produtos que o cliente quer que o supermercado continue vendendo, S e T são os produtos que o cliente quer que o supermercado pare de vender. Um valor 0 (zero) para qualquer uma das variáveis X, Y, S e T significa que o cliente não está fazendo uso daquele voto. Uma linha com C = P = 0 indica o fim da entrada.",
        "titulo": "X-Mart",
        "descricao": "A bem conhecida rede de supermercados X-Mart decidiu cortar custos, reduzindo o número de diferentes produtos disponíveis nas prateleiras de suas lojas. O departamento de marketing ficou preocupado se esta decisão afetaria as vendas, e decidiu explorar a redução dos produtos para promover a relação com clientes. Para tal, a rede de supermercados X-Mart organizou uma votação na Internet, na qual os clientes poderiam escolher quais produtos eles gostariam que permanecessem nas prateleiras, e quais produtos eles gostariam que fossem retirados destas. A lista dos produtos disponíveis atualmente foi publicada na Internet. Para simplificar o sistema de votação, foi permitido a cada consumidor escolher no máximo dois produtos para votar a favor (significando que o supermercado deveria continuar a vender estes) e no máximo dois produtos para votar contra (significando que o supermercado deveria parar de vender estes). Sendo que o departamento de marketing possui todos os votos em sua base de dados, este quer saber se é possível escolher uma nova lista de produtos que satisfaça TODOS os clientes que votaram. O departamento de marketing considera que um cliente estará satisfeito se pelo menos um dos produtos que ele/ela votou a favor continua sendo vendido, e se pelo menos um dos produtos que ele/ela votou contra foi removido das prateleiras dos supermercados. Você pode considerar que um cliente não vota a favor e contra um mesmo produto."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1322",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um caractere 'Y' se é possível organizar o círculo de forma que todas crianças tenham seus desejos atendidos, ou um 'N' caso contrário.",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros K e W representando respectivamente o número de crianças (3 ≤ K ≤ 109) e o número de desejos (0 ≤ W ≤ 105). Crianças são identificadas por números inteiros entre 1 e K. Cada uma das próximas W linhas descreve um desejo através de dois inteiros distintos A e B (1 ≤ A, B ≤ K); esses valores significam que a criança A deseja sentar ao lado da criança B. Cada criança possui no máximo dois desejos. ​O último caso de teste é seguido de uma linha contendo dois zeros.",
        "titulo": "Desejos das Crianças",
        "descricao": "Kevin é uma criança. Ele almoça na escola junto com muitas outras crianças. Eles costumam ir até o pátio e almoçar sentados no chão. Eles adoram formar um grande círculo onde cada criança tem exatamente dois vizinhos, um na esquerda e outro na direita. Às vezes a professora tem problemas para organizar o círculo pois muitas crianças desejam sentar ao lado de outras crianças. Cada criança pode desejar sentar ao lado de no máximo duas outras crianças já que cada criança tem apenas dois vizinhos. A professora quer saber se é possível organizar o círculo de forma que todos os desejos de todas as crianças sejam satisfeitos. Você limpa o lugar quando o almoço termina. Já que você quer terminar seu trabalho o mais cedo possível, ajude a professora a responder essa questão."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1702",
        "saida": "Para cada caso teste, imprima uma única lina com \"Y\" (sem aspas) se é possível construir tal grafo ou \"N\" caso contrário.",
        "entrada": "A entrada contém múltiplos casos testes. A primeira linha contém a quantidade de casos testes T (T < 70). Cada caso teste começa com 4 inteiros na seguinte ordem: o número de vértices N (1 <= N <= 10^3), o número de arestas no grafo original M (0 <= M <= 10^5), o número de arestas a serem inseridas P (0 <= P <= 10^6) e o número de cores K (1 <= K <= 10^3). A linha seguinte contém N números Xi indicando a cor do i-ésimo vértice (1 <= Xi <= K). As M seguintes linhas contém um par de inteiros (V_i, V_j) indicando a presença de uma aresta entre os vértices V_i e V_j. (1 <= V_i,V_j <= N).",
        "titulo": "Colorindo Grafos",
        "descricao": "Seja G um grafo simples com N vértices coloridos e M arestas. Nós desejamos saber se é possível adicionar exatamente P arestas em G de tal forma que o grafo resultante seja simples, conexo e nenhuma aresta conecte dois vértices da mesma cor."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2182",
        "saida": "Imprima um único inteiro, o índice da casa onde Luciano deverá morar.",
        "entrada": "A primeira linha contêm dois inteiros, N, M, representando a quantidade de casas disponíveis e a quantidade de caminhos entre elas. (1 ≤ N ≤ 104, 0 ≤ M ≤ 105). Após isso, M linhas seguem, cada uma com três inteiros, X, Y, B, representando um caminho bidirecional entre as casas X e Y com uma quantidade B de buracos. (1 ≤ X, Y ≤ N, X != Y, 0 ≤ B ≤ 100).",
        "titulo": "Luciano e a Bicicletinha",
        "descricao": "Luciano é um fã de esportes, ainda mais quando se trata do ciclismo. Luciano possui uma bicicleta e a cuida como se fosse seu filho, evitando ao máximo andar em ruas ruins, ou seja, ruas com muitos buracos. Luciano irá mudar de cidade e precisa de sua ajuda para encontrar o melhor bairro para se morar. Para Luciano, o melhor bairro é aquele onde a média da quantidade de buracos entre todos os caminhos é a menor possível. Duas casas estão no mesmo bairro se for possível sair de uma e chegar até a outra usando os caminhos existentes. Após decidir o bairro, Luciano escolhe a casa baseado no seu identificador, ele prefere a casa com o maior identificador possível. Você receberá uma lista com N casas disponíveis para Luciano morar e M caminhos entre essas casas. Em cada um desses caminhos existe uma quantidade de buracos. Nunca haverá mais de um caminho direto entre duas casas. Cada casa possui um identificador [1, N]. Se existir um bairro com apenas uma casa, a quantidade de buracos nesse bairro será 0, já que não existe caminhos. Ajude Luciano e diga qual o identificador da casa onde deverá morar."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1489",
        "saida": "O programa deve imprimir a cada instância uma linha com Instancia i, onde i é o número de i-ésima instância. A linha seguinte deve conter a expressão pair programming se a proposta de Wander for viável. Caso contrário, imprima a expressão extreme programming. Após cada instância, seu programa deve imprimir uma linha em branco.",
        "entrada": "A primeira linha da entrada contém um número k, que indica o número de instâncias. Cada instância é composta por uma linha contendo um número inteiro 2 ≤ n ≤ 100, a quantidade de profissionais de desenvolvimento da empresa, seguida por n linhas. A i-ésima linha começa com um número p, indicando o número de pessoas com a qual o i-ésimo programador tem produtividade aceitável, e vem seguida por p inteiros, cada um entre 1 e n, indicando tais parceiros.",
        "titulo": "Engenharia de Software",
        "descricao": "Wander Vega é um experiente gerente de projetos numa grande empresa de desenvolvimento de sistemas. Ele recentemente leu na renomada revista científica Boas Práticas os resultados de uma pesquisa que indicam que alguns aspectos de metodologias de desenvolvimento ágil podem ser aplicadas em grandes equipes aumentando a produtividade. Ele ficou surpreso ao descobrir que um desses aspectos é a programação pareada (pair programming), onde dois desenvolvedores trabalham juntos, usando o mesmo computador. Ávido por impor mudanças que sejam notadas pela diretoria, Wander resolveu adotar programação pareada no próximo grande projeto que irá gerenciar. Só que como todo bom engenheiro de software, Wander quer otimizar esse processo. Ele resolveu que irá usar pares fixos de desenvolvedores. Além disso ele vai alocar os pares de programadores previamente. Porém, Wander não está disposto a correr riscos desnecessários, e só permitirá a composição de duplas de desenvolvedores que tenham níveis aceitáveis de produtividade, comunicação e capacidade de interação em trabalhos conjuntos. Caso isso não seja possível, Wander colocará todos os desenvolvedores de seu próximo projeto numa sala quente, com várias esfihas, refrigerantes e um computador, e aplicará as técnicas de programação extrema (extreme programming) para viabilizar o desenvolvimento do sistema. Avaliando suas possibilidades ele percebeu que seu plano seria mais reutilizável em outros projetos se ele tivesse um programa que verificasse a viabilidade do pair programming em sua empresa. Nesse momento ele pensou em você, o mais novo estagiário da empresa, para escrever um programa que resolva esse problema. Wander fez uma profunda análise de requisitos e chegou na seguinte especificação que seu programa deve seguir."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1977",
        "saida": "Seu programa deverá produzir duas linhas na saída. Uma contendo o horário de chegada a faculdade e outra contendo \"Ira se atrasar\" ou \"Nao ira se atrasar\".",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém três inteiros separados por um espaço, X (1 ≤ X ≤ 50), N (1 ≤ N ≤ 90) e V (1 ≤ V ≤ 10), indicando o tempo que Anne levá para ir do trabalho ao ponto, a quantidade possíveis rotas e o número de pontos que ela poderá passar. Seguem-se, então, N linhas, cada uma com duas strings não-vazias e únicas contendo os locais das rotas que Anne pode passar e um inteiro separados por espaço, O, D e T (1 ≤ T ≤ 60), indicando que existe uma rota para ir do local O para o local D, e que tal trajeto levará T minutos. A entrada termina quando X = N = V = 0, e não deve ser processada.",
        "titulo": "Não Posso me Atrasar",
        "descricao": "Anne é uma aluna muito aplicada do curso de ciência da computação. Ela não gosta de chegar atrasada de forma alguma, sempre tenta chegar no máximo 18:00 em ponto que é o horário de início das aulas. Porém o trânsito na cidade de Teresópolis entre 16:30 e 19:00 é muito lento, então um trajeto que normalmente levaria 10 minutos, leva um tempo bem maior. Anne sai do seu trabalho às 17:00 e leva aproximadamente X minutos para chegar ao ponto, porém os ônibus em direção à faculdade passam exatamente as 17:30, nesse horário passam diversos ônibus com trajetos diferentes que levarão à faculdade, caso Anne os perca, terá de esperar até as 17:50 até passar mais ônibus. Do ponto de ônibus que ela geralmente espera, até a faculdade, levará facilmente mais de 30 minutos se não escolher o ônibus que tenha o melhor trajeto. Anne precisa saber que horas ela chegará a faculdade escolhendo o melhor trajeto e se chegará atrasada. Sua tarefa é, a partir de N rotas possíveis, dizer que horas Anne chegará na faculdade indo pelo melhor trajeto, sabendo que ela deve sair da varzea e chegar ao alto, com pesos T de tempo entre um local e outro, levando em consideração o trânsito (o T da varzea ao alto não é o mesmo que do alto a varzea, pois o transito no sentido contrário pode ser diferente) e informar se houve ou não atraso. Assuma que Anne sempre chegará no ponto antes de 17:50 e que sempre terá um caminho entre a Várzea e o Alto."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1908",
        "saida": "Imprima o menor custo para ir do campus 1 ao campus N.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros N e K (2 ≤ N ≤ 104, 1 ≤ K ≤ 103), os quais representam respectivamente o número de campi e o número de linhas de transporte coletivo criadas pela UFFS. Cada uma das K linhas de entrada seguintes descreve uma linha de transporte L e consiste do inteiro |L| (2 ≤ |L| ≤ 102) seguido pelos |L| identificadores Ci (1 ≤ Ci ≤ N, 1 ≤ i ≤ |L|) dos campi pelos quais a nave passa, sendo C1 e C|L| os extremos de L. Para todo campus A e todo campus B é garantido que é possível ir de A a B usando o sistema de transporte coletivo da UFFS.",
        "titulo": "UFFS Multicampi",
        "descricao": "É o ano de 2.265, e a UFFS (Universidade da Fronteira Final da Sapiência) já conta com 112.345 campi espalhados pela galáxia. Para integrar todos os campi, a UFFS criou várias linhas de transporte coletivo em velocidade de dobra. O itinerário de cada linha L é uma sequência de |L| ≥ 2 campi C1, C2, …, C|L|, e cada linha conta com uma única nave, a qual passa por todos os campi da linha, seguindo a ordem do itinerário, parando em cada um deles e dando meia-volta sempre que atinge um extremo do itinerário, revertendo a ordem dos campi no itinerário. O passe do transporte custa Ƀ1 (1 bitcoin, a unidade monetária que se tornou a moeda oficial da galáxia graças aos trabalhos do Prof. Emílio Wuergues no início do séc. XXI), e deve ser pago pelo passageiro ao embarcar na nave, independente do tempo que passará nela. Deste modo, o menor custo para ir do campus A ao campus B considerando as linhas hipotéticas da figura abaixo é de Ƀ2."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1724",
        "saida": "Para cada caso de teste imprima em uma linha o número mínimo de movimentos necessários para levar as três peças para a mesma posição, ou a palavra \"impossible\" caso isso não seja possível para o tabuleiro e as posições iniciais dadas.",
        "entrada": "O arquivo de entrada contém diversos casos de teste. Cada caso de teste começa com o número n. A entrada é terminada por n = 0. Caso contrário, 1 ≤ n ≤ 50. A seguir há três inteiros p1, p2, p3 com 1 ≤ pi ≤ n denotando as posições iniciais das peças do jogo. As cores das ligações são dadas em seguida como uma matriz m x m de letras minúsculas separadas por espaço. O elemento mij denota a cor da ligação entre os locais i e j. Como o grafo não é direcionado, você pode assumir que a matriz é simétrica.",
        "titulo": "Caminhada em um Grafo",
        "descricao": "\"Caminhada em um Grafo\" é um jogo jogado em um tabuleiro onde um grafo não-direcionado é desenhado. O grafo é completo e tem todos os ciclos, isso é, para quaisquer dos locais, existe exatamente uma ligação entre eles. As ligações são coloridas. Existem três jogadores e cada um deles tem uma peça. No início do jogo, as três peças estão em lugares pré-determinados no grafo. Em seu turno, os jogadores podem fazer um movimento. Um movimento consiste em mover a peça ao longo de uma ligação para um novo local no tabuleiro. A seguinte restrição é imposta sobre isso: a peça pode ser movida somente entre ligações da mesma cor que a ligação entre as peças dos jogadores adversários. Nos anos sessenta (\"faça amor, não faça guerra\") surgiu uma variante para um jogador desse jogo. Nessa variação, uma pessoa move todas as três peças, não necessariamente em ordem, mas apenas uma por vez. O objetivo desse jogo é colocar todas as peças no mesmo local com o menor número de movimentos possível. Encontre o menor número de movimentos necessários para colocar todas as três peças no mesmo local, dada uma configuração de tabuleiro e posições iniciais."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1148",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir K linhas na saída. A I-ésima linha deve conter um inteiro M , o tempo mínimo, em horas, para se enviar uma carta na I-ésima consulta. Se não houver meio de comunicação entre as cidades da consulta, você deve imprimir ”Nao e possivel entregar a carta”(sem acentos). Imprima uma linha em branco após cada caso de teste.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros separados por um espaço, N (1 ≤ N ≤ 500) e E (0 ≤ E ≤ N2), indicando o número de cidades (numeradas de 1 a N) e de acordos de envio de mensagens, respectivamente. Seguem-se, então, E linhas, cada uma com três inteiros separados por espaços, X, Y e H (1 ≤ X, Y ≤ N, 1 ≤ H ≤ 1000), indicando que existe um acordo para enviar uma carta impressa da cidade X à cidade Y , e que tal carta será entregue em H horas. Em seguida, haverá uma linha com um inteiro K (0 ≤ K ≤ 100), o número de consultas. Finalmente, virão K linhas, cada uma representando uma consulta e contendo dois inteiros separados por um espaço, O e D (1 ≤ O, D ≤ N). Você deve determinar o tempo mínimo para se enviar uma carta da cidade O à cidade D. A entrada termina quando N = E = 0.",
        "titulo": "Países em Guerra",
        "descricao": "No ano 2050, após diversas tentativas da ONU de manter a paz no mundo, explode a terceira guerra mundial. Segredos industriais, comerciais e militares obrigaram todos os países a utilizar serviços de espionagem extremamente sofisticados, de forma que em cada cidade do mundo há ao menos um espião de cada país. Esses espiões precisam se comunicar com outros espiões, com informantes e mesmo com as suas centrais durante as suas ações. Infelizmente não existe uma forma segura de um espião se comunicar em um período de guerra, então as mensagens são sempre enviadas em código para que somente o destinatário consiga ler a mensagem e entender o seu significado. Os espiões utilizam o unico serviço que funciona no período de guerra, os correios. Cada cidade possui uma agência postal onde as cartas são enviadas. As cartas podem ser enviadas diretamente ao seu destino ou a outras agências postais, até que a carta chegue à agência postal da cidade de destino, se isso for possível. Uma agência postal na cidade A pode enviar diretamente uma carta impressa para a agência postal da cidade B se houver um acordo de envio de cartas, que determina o tempo, em horas, que uma carta leva para chegar da cidade A à cidade B (e não necessariamente o contrário).a Se não houver um acordo entre as agências A e B, a agência A pode tentar enviar a carta a quantas agências for necessário para que a carta chegue ao seu destino, se isso for possível. Algumas agências são interligadas por meios eletrônicos de comunicação, como satélites e fibras ópticas. Antes da guerra, essas ligações atingiam todas as agências, fazendo com que uma carta fosse enviada de forma instantânea, mas durante o período de hostilidades cada país passou a controlar a comunicação eletrônica e uma agência somente pode enviar uma carta a outra agência por meio eletrônico (ou seja, instantaneamente) se ela estiver no mesmo país. Duas agências, A e B, estão no mesmo país se houver uma forma de uma carta impressa enviada de uma das agências ser entregue na outra agência. O serviço de espionagem do seu país conseguiu obter o conteúdo de todos os acordos de envios de mensagens existentes no mundo e deseja descobrir o tempo mínimo para se enviar uma carta entre diversos pares de cidades. Você seria capaz de ajudá-lo?"
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1915",
        "saida": "Para cada caso de teste exiba, com duas casas após o ponto, o percentual máximo de amigos da vila que ficarão com um brinquedo. Veja a formatação de saída.",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N e M (1 ≤ N, M ≤ 100) representando a quantidade de amigos da vila e a quantidade de brinquedos. N linhas seguem, cada uma contendo o nome de um amigo, o tamanho do nome nunca ultrapassará 100 caracteres [A-Z]. Após isso, M linhas seguem contendo cada o nome de um brinquedo, o tamanho do nome de um brinquedo nunca ultrapassará 100 caracteres [A-Z]. A entrada termina com N = M = 0, a qual não deve ser processada.",
        "titulo": "Ajude Chaves",
        "descricao": "Uma das coisas que a turma da vila mais faz é brincar, porém na maioria das vezes a brincadeira termina em confusão, pois Chaves sempre fica sem nenhum brinquedo. Para tentar evitar as confusões e poderem se divertir em paz o dia todo, Chaves deu a ideia de cada um pegar apenas um brinquedo e ficar o dia todo com ele. O processo para a escolha dos brinquedos é um tanto quanto diferente e será explicado abaixo. Dado os nomes dos N amigos da vila e M diferentes brinquedos, cada nome/brinquedo será criptografado em uma sequência de números, de acordo com a tabela a seguir: Os valores da tabela acima só serão válidos para a primeira aparição de cada letra, se uma letra aparecer pela segunda vez, seu valor será o valor original + 26. Se a mesma letra aparecer pela terceira vez, seu valor será o valor original + 26 + 26 e assim por diante. Ex: O nome KIKO será criptografado na seguinte sequência: 11 9 37 15. Agora vem a parte necessária para a escolha dos brinquedos, uma pessoa X só irá desejar ficar com um brinquedo Y, se a soma da quantidade mínima de números necessários de serem retirados de suas sequências para que elas se tornem iguais for um múltiplo de cinco. Veja o exemplo: CHAVES = 3 8 1 22 5 19 - Retirando os números 3, 8, 22 e 19, sobrará a sequência 1 5. PATINETE = 16 1 20 9 14 5 46 31 - Retirando os números 16, 20, 9, 14, 46 e 31, sobrará a mesma sequência 1 5. Ou seja, foi necessário retirar 4 + 6 = 10 números, logo Chaves deseja brincar com o Patinete, pois 10 é um múltiplo de 5. Dado o nome dos N amigos e M brinquedos, você deverá maximizar o percentual de amigos que ficarão com um brinquedo."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1128",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha contendo um inteiro G, onde G é igual a 1 se o requisito de conexidade está satisfeito, ou G é igual a 0, caso contrário.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros N e M, separados por um espaço em branco, indicando respectivamente o número de intersecções (2 ≤ N ≤ 2000) e o número de ruas (2 ≤ M ≤ N(N−1)/2). O caso de teste tem ainda mais M linhas, que contêm, cada uma, uma descrição de cada uma das M ruas. A descrição consiste de três inteiros V, W e P, separados por um espaço em branco, onde V e W são identificadores distintos de intersecções (1 ≤ V, W ≤ N , V ≠ W ) e P pode ser 1 ou 2; se P = 1 então a rua é de mão única, e vai de V para W; se P = 2 então a rua é de mão dupla, liga V e W. Não existe duas ruas ligando as mesmas intersecções. O ultimo caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco.",
        "titulo": "Ir e Vir",
        "descricao": "Numa certa cidade há N intersecções ligadas por ruas de mão única e ruas com mão dupla de direcão. É uma cidade moderna, de forma que muitas ruas atravessam túneis ou têm viadutos. Evidentemente é necessário que se possa viajar entre quaisquer duas intersecções, isto é, dadas duas intersecções V e W, deve ser possível viajar de V para W e de W para V. Sua tarefa é escrever um programa que leia a descrição do sistema de tráfego de uma cidade e determine se o requisito de conexidade é satisfeito ou não."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1928",
        "saida": "Seu programa deve produzir uma linha contendo um inteiro, o maior valor total de pontos que é possível acumular.",
        "entrada": "A primeira linha da entrada contém o número de cartas N (2 ≤ N ≤ 50000, N é par). A segunda linha da entrada contém N inteiros Ci, indicando qual número está anotado na carta na posição i (1 ≤ Ci ≤ N/2, para 1 ≤ i ≤ N). As cartas são dadas na ordem crescente das posições: a primeira carta ocupa a posição 1, a segunda a posição 2, e assim por diante até a última carta, que ocupa a posição N. Cada uma das N − 1 linhas seguintes contém dois números A e B, indicando que existe uma linha desenhada entre as cartas nas posições A e B (1 ≤ A ≤ N e 1 ≤ B ≤ N).",
        "titulo": "Jogo da Memória",
        "descricao": "Pedro e Paulo resolveram complicar um pouco o tradicional Jogo da Memória, em que os jogadores precisam virar duas cartas iguais. Eles colocam N cartas no chão, com as faces viradas para baixo. A face de cada carta tem a figura de um número de 1 até N/2, sendo que exatamente duas cartas possuem a figura de cada número entre 1 e N/2. Como as cartas têm as faces viradas para baixo, elas podem também ser identificadas por suas posições, que são inteiros de 1 a N. Pedro e Paulo então desenham no chão, usando giz, algumas linhas ligando pares de cartas, de modo que para qualquer par de cartas (A, B) existe uma e apenas uma sequência de cartas e linhas desenhadas que leva de A até B. A figura abaixo mostra um exemplo de jogo, (a) com todas as cartas com as faces viradas para baixo, e (b) com todas as cartas com as faces viradas para cima. O jogo é jogado com todas as cartas com as faces viradas para baixo. A cada jogada, o jogador deve escolher um par de cartas A e B. Se as faces das duas cartas escolhidas têm a mesma figura, o jogador acumula um número de pontos igual ao número de linhas desenhadas que existem no caminho entre as cartas A e B. Pedro e Paulo, agora, estão estudando qual é a melhor estratégia para esse jogo e precisam da sua ajuda para resolver uma tarefa específica: dadas as cartas existentes em cada posição, e as ligações desenhadas com giz, calcular o maior valor total de pontos que é possível acumular."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1799",
        "saida": "Imprima um valor inteiro identificando a quantidade mínima de pontos do labirinto pelos quais IBO deve passar para cumprir a sua tarefa.",
        "entrada": "A primeira linha de entrada contém dois inteiros Pontos (4 ≤ Pontos ≤ 4000) e Ligacoes (4 ≤ Ligacoes ≤ 5000) representando respectivamente o número de pontos estrategicamente marcados no labirinto e quantidade de ligações existentes entre estes pontos. Seguem as linhas que indicam cada uma das ligações entre estes pontos. As ligação entre dois pontos indica que qualquer um dos dois pode ser a origem.",
        "titulo": "O Rato no Labirinto",
        "descricao": "Em 1942, um estudo feito por Robert Tryon concluiu que os traços genéticos frequentemente podem contribuir para o comportamento, independente do meio ambiente. Para fazer isso Tryon criou uma experiência que testou a proficiência de gerações sucessivas de ratos em completar um labirinto, separando os que fizeram os menores números de erros em \"brilhantes\", e aqueles com mais erros em \"medíocres\". Dando continuidade a este processo durante sete gerações ele criou duas raças distintas de ratos: \"brilhantes\" e \"medíocres\". O ratinho IBO é descendente da linhagem de ratos \"brilhante\", sendo o melhor de todos no desempenho deste experimento. Ele consegue entrar, pegar o queijo e sair de qualquer labirinto sem se perder, e sempre faz o caminho mais curto possível. Sua tarefa neste problema é, dado o desenho do Labirinto e a posição do queijo, determinar por quantos pontos estrategicamente marcados por letras do alfabeto (ou palavras contendo somente letras) IBO deve passar para pegar o queijo (indicado pelo caractere '*') e sair, sempre partindo do ponto Entrada e terminando em Saida (sem acento). No exemplo abaixo, a sequência de IBO à partir da Entrada seria: A, F, J, *, I, M, K e Saida, o que resultaria em 8, que é a quantidade mínima de pontos pelos quais IBO deve passar para cumprir a sua tarefa. Se IBO tiver que passar por um ponto duas vezes (uma indo para o queijo e outra indo para a saída) isso conta como dois pontos visitados."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1476",
        "saida": "Para cada sede, na ordem em que elas foram descritas na entrada, seu programa deve imprimir uma linha contendo um único inteiro, indicando o maior peso bruto, em toneladas, que pode ser transportado por caminhão do depósito que irá fornecer os balões até ela.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três inteiros N(2 ≤ N ≤ 2 x 104), M(1 ≤ M ≤ 105) e S(1 ≤ S ≤ 5 × 104), indicando, respectivamente, o número de ilhas da Nlogônia, o número de pontes que ligam as ilhas e o número de sedes. As ilhas nlogonianas são numeradas de 1 a N. Cada uma das M linhas seguintes descreve uma ponte. A descrição de cada ponte consiste de uma linha contendo três inteiros A, B(1 ≤ A,B ≤ N, A != B) e P(0 ≤ P ≤ 105), indicando as duas ilhas ligadas por aquela ponte e o peso máximo permitido naquela ponte, em toneladas. Todas as pontes são de mão dupla; cada par de ilhas é ligado por no máximo uma ponte; é possível ir de qualquer ilha para qualquer outra ilha utilizando apenas as pontes do arquipélago (mas pode ser preciso passar por outras ilhas primeiro). Cada uma das S linhas seguintes descreve uma sede. A descrição de cada sede consiste de uma linha contendo dois inteiros A e B, indicando, respectivamente, a ilha onde está a sede e a ilha onde está o depósito que irá fornecer os balões àquela sede. O final da entrada é determinado por EOF (fim de arquivo).",
        "titulo": "Caminhão",
        "descricao": "A Sociedade de Bal˜oes Coloridos (SBC) é a principal fornecedora de balões para competições de programação; ela dispõe de grandes fábricas e depósitos, além de uma extensa frota de caminhões para garantir a alegria dos competidores. Há várias sedes regionais na Nlogônia, todas as quais contrataram a SBC para o fornecimento de balões para a prova. A Nlogônia é um arquipélago ligado por várias pontes. Cada ilha do arquipélago pode conter várias sedes regionais e vários depósitos da SBC. Ao planejar as rotas, a SBC se deparou com um problema: por razões de segurança, cada ponte da Nlogônia tem um limite máximo de peso permitido para os veículos que trafegam sobre ela. Devido ao grande número de pontes na Nlogônia, e ao elevado peso da mercadoria transportada, o diretor de operações da SBC pediu que você escrevesse um programa que determina o maior peso bruto que pode ser transportado entre os depósitos e os locais de prova."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1923",
        "saida": "Imprima a quantidade de pessoas que serão convidadas para o churrasco, em seguida o nome de cada uma delas em ordem lexicográfica crescente.",
        "entrada": "A primeira linha da entrada irá conter dois inteiros 3 ≤ n ≤ 103 e 1 ≤ G ≤ 500, representando a quantidade de relações de amizades direta e o grau de distância máxima a ser considerado. Cada uma das próximas n linhas irá conter duas strings sem espaços S e T, 1 ≤ |S|, |T| ≤ 20, descrevendo uma relação de amizade direta, (A relação é mútua).",
        "titulo": "Rerisson e o Churrasco",
        "descricao": "Após ter feito um churrasco para festejar os resultados da OPI (Olimpíada Paraibana de Informática) com os amigos, Rerisson pretende fazer outro churrasco, dessa vez um bem maior, com o intuito de conhecer novas pessoas. Ele irá convidar todas as pessoas que possuem um grau de relacionamento para com ele (chamado g) de no máximo, G. Por exemplo, considere “>” como sendo o sinal de relacionamento direto: Rerisson > Lucas Rerisson > Jonathan Lucas > Jonathan Jonathan > Pedro Pedro > Juan Lucas > Juan Para esse exemplo, considerando o G = 1, apenas Lucas e Jonathan seriam convidados para o churrasco. Com o auxílio de uma rede social, Rerisson conhece todas os relacionamento diretos, mas está ocupado preparando o churrasco e gostaria que você, com a lista de relacionamentos preparada por Rerisson, informe quais pessoas serão convidadas para a grande festa."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1409",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha na saída contendo um número inteiro, a quantidade mínima inicial de mana necessária. Caso não seja possível recuperar o tesouro, você deve imprimir -1.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém quatro inteiros M, N, G e K, indicando respectivamente o número de magias (1 ≤ M ≤ 1000), de salões (1 ≤ N ≤ 1000), de galerias (0 ≤ G ≤ 1000000) e de monstros (0 ≤ K ≤ 1000). Cada uma das M linhas seguintes descreve uma magia. A descrição de uma magia contém dois números inteiros, a quantidade de mana consumida (entre 1 e 1000) e o número de pontos de danos provocados (também entre 1 e 1000). Em seguida, há G linhas, cada uma descrevendo uma galeria. Uma galeria é descrita por dois números inteiros A e B (A ≠ B), representando os salões que a galeria conecta. Zak pode utilizar a galeria nos dois sentidos, ou seja, para ir de A para B ou de B para A. Finalmente, as últimas K linhas de um caso de teste descrevem os monstros. A descrição de um monstro contém dois números inteiros representando respectivamente o salão no qual ele vive (entre 1 e N inclusive) e o seu número inicial de pontos de vida (entre 1 e 1000 inclusive). O final da entrada é indicado por M = N = G = K = 0.",
        "titulo": "Zak Galou",
        "descricao": "Zak Galou é um famoso bruxo matador de monstros. Diz a lenda que existe uma caverna escondida nos confins da selva contendo um tesouro milenar. Até hoje nenhum aventureiro conseguiu recuperar o tesouro, pois ele é bem guardado por terríveis monstros. Mas Zak Galou não é um aventureiro qualquer e decidiu preparar-se para recuperar o tão sonhado tesouro. Zak Galou dispõe de uma certa quantidade de mana (uma espécie de energia mágica) e de uma lista de M magias. Cada monstro tem um determinado número de pontos de vida. Cada vez que Zak Galou lança uma magia contra um monstro, Zak gasta uma certa quantidade de mana (o custo da magia) e inflige um certo dano ao monstro. O dano infligido provoca a perda de pontos de vida do monstro (o número de pontos perdidos depende da magia). Um monstro está morto se tiver zero ou menos pontos de vida. Zak sempre luta contra um monstro a cada vez. Como é um bruxo poderoso, ele pode usar a mesma magia várias vezes, desde que possua a quantidade necessária de mana. Em suas pesquisas, Zak Galou conseguiu o mapa do tesouro. A caverna é representada como um conjunto de salões conectados por galerias. Os salões são identificados sequencialmente de 1 a N. Zak sempre inicia no salão 1 e o tesouro está sempre no salão N. Existem K monstros identificados sequencialmente de 1 a K. Cada monstro vive em um salão, do qual não sai (note que é possível que mais de um monstro viva no mesmo salão). Durante a busca pelo tesouro, Zak Galou pode sair ou recuperar o tesouro de um salão somente se o salão estiver vazio (sem monstro). Em outras palavras, Zak deve sempre, antes de sair ou de recuperar o tesouro de um salão, matar o(s) monstro(s) que lá viver(em). Dadas as descrições das magias, dos monstros e da caverna, sua tarefa é determinar a quantidade mínima inicial de mana necessária para que Zak Galou consiga recuperar o tesouro."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1539",
        "saida": "Para cada caso de teste, deve-se imprimir C linhas, sendo que cada uma representa a distância do menor caminho entre as duas antenas. Os valores devem ser INTEIROS, ou seja, a parte real deve ser truncada (não arredondada), e sempre com uma quebra de linha. Caso não seja identificada uma rota entre as antenas, deve ser impresso o valor -1.",
        "entrada": "A entrada é composta de vários casos de testes. Sendo que, a primeira linha contém um inteiro não negativo, N (2 ≤ N ≤ 100), que indica o número de antenas disponíveis para interconexão na rede. Seguem-se N linhas, cada uma contendo três números inteiros X (0 ≤ X ≤ 1000), Y (0 ≤ Y ≤ 1000) e R (1 ≤ R ≤ 1000), que descrevem a posição da antena, coordenadas X e Y, e o seu raio de alcance R (separados por espaço em branco). A linha seguinte contém outro inteiro não negativo, C (1 ≤ C ≤ 100), que descreve a quantidade de cálculos à serem realizados nessa rede. As C linhas seguintes contém 2 inteiros cada, A1 (1 ≤ A1 ≤ N) e A2 (1 ≤ A2 ≤ N), que descrevem o índice das antenas a serem utilizadas e também separadas por espaço em branco. O fim das entradas é sinalizado por um número 0.",
        "titulo": "Empresa de Telecom",
        "descricao": "Cesário é um analista da Algar Telecom, e está trabalhando em um projeto de análise da rede de telefonia móvel. Ele terá que desenvolver um sistema que analise o alcance de cada uma das antenas dessa rede, e que defina os custos operacionais para o envio de dados de de dispositivo para outro, baseando-se na distancia entre as antenas. O objetivo minimizar esses custos, encontrando a melhor rota disponível. Os cálculos também visam descobrir se é possível estabelecer um caminho entre dois dispositivos, de forma a detectar graves problemas na rede. Mesmo com todos os dados disponíveis para processamento, Cesário tem enfrentado problemas na implementação devido a alta complexidade desse algoritmo, por isso você foi contratado para ajudá-lo. O seu objetivo é analisar todas as antenas da rede da Algar Telecom, observando as suas coordenadas e raios de alcance; verificar quais as antenas possíveis de serem acessadas (dentro do raio de alcance); e calcular o menor caminho entre duas antenas determinadas."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1902",
        "saida": "Seu programa deve imprimir numa linha um único inteiro, representando o maior número de casamentos que é possível a SBC formar.",
        "entrada": "A entrada é composta por no máximo 105 linhas e finalizada por fim de arquivo. Cada linha da entrada consiste dos nomes de duas pessoas A e B, indicando que a pessoa A é apaixonada pela pessoa B. Cada nome de pessoa é uma cadeia de no mínimo 1 e no máximo 10 letras do alfabeto latino, sem diacríticos.",
        "titulo": "Sociedade Brasileira Casamenteira",
        "descricao": "A Sociedade Brasileira Casamenteira (SBC) perguntou a todas as pessoas solteiras do país se estavam apaixonadas e por quem estavam apaixonadas. Curiosamente, cada pessoa solteira respondeu que estava apaixonada por exatamente uma outra pessoa, mas que tinha vergonha de declarar seus sentimentos. Dispondo agora dessas informações, a SBC deseja formar casamentos, para que as pessoas vivam mais felizes. Se uma pessoa A1 é apaixonada por uma pessoa A2 e a pessoa A2 também é apaixonada pela pessoa A1, é claro que a SBC pode formar o casamento {A1, A2}. Contudo, se A1 é apaixonada por A2, mas A2 é apaixonada por A3, que é apaixonada por A4… que é apaixonada por Ak, sendo que Ak é apaixonada por A1, também é possível formar o casamento {A1, A2, …, Ak}, já que, recentemente, foi aprovado o casamento poligâmico no Brasil. Mais formalmente, a SBC pode formar o casamento {A1, …, Ak} se e somente se k ≥ 2, a pessoa Ak é apaixonada pela pessoa A1 e, para todo i ∈ {2, …, k}, a pessoa Ai - 1 é apaixonada pela pessoa Ai. Ajude a SBC a formar o maior número possível de casamentos."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1621",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando a distância entre a entrada e a saída do labirinto se a localização da entrada e da saída do labirinto for escolhida de forma ótima.",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (5 ≤ N, M ≤ 500), representando o número de linhas e colunas do labirinto, respectivamente. A seguir haverá N linhas contendo M caracteres cada, representando o labirinto a ser analizado. O caractere da i-ésima linha e da j-ésima coluna indica o que há na posição i, j do labirinto. Se o caractere for um “.” (ponto), significa que aquele é um espaço vazio, por onde o jogador pode passar. Caso seja um “#”, significa que aquele é um obstáculo, por onde o jogador não pode passar. Haverá sempre ao menos dois espaços vazios no labirinto, e só há um caminho entre quaisquer dois espaços vazios. A entrada e a saída do labirinto não necessariamente precisam estar nas bordas. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.",
        "titulo": "Labirinto",
        "descricao": "Labirinto de papel é o passatempo favorito de Rafael, mas ele anda reclamando que os labirintos que ele encontra para resolver são muito fáceis. Para ser mais específico, a distância entre o início do labirinto e a saída é sempre muito pequena. A entrada de um labirinto é por onde o jogador deve começar a resolvê-lo, e a saída é por onde o jogador deve terminar o labirinto. O jogador pode dar passos nas quatro direções – cima, direita, baixo ou esquerda – e a distância entre a entrada e a saída do labirinto é dado pela soma de passos do menor caminho que pode ser feito. Dado um labirinto de N linhas e M colunas, diga qual a distância máxima que pode ser definida se a entrada e a saída for escolhida de forma ótima."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1592",
        "saida": "Imprima o menor custo de combustível possível para cada caso em uma única linha, e caso Golias não consiga chegar até Elias, imprima -1.",
        "entrada": "Na primeira linha terá um inteiro T (T = 200) indicando o número de casos de teste. Para cada caso, a primeira linha terá três números inteiros, N (2 ≤ N ≤ 50* ou 2 ≤ N ≤ 1000**), M (1 ≤ M ≤ 200* ou 1 ≤ M ≤ 3000**) e K (2 ≤ K ≤ N), indicando o número de cidades, o número de estradas e o máximo número de cidades diferentes que podem ser visitadas, respectivamente. Nas M seguintes linhas haverá três inteiros A (0 ≤ A ≤ N-1), B (0 ≤ B ≤ N-1) e C (1 ≤ C ≤ 105) indicando que há uma estrada de mão única da cidade A para a cidade B, e que custa C unidades de combustível . Pode haver mais de uma estrada conectando duas cidades, ou uma estrada conectando uma cidade a ela mesma. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes.",
        "titulo": "Elias e Golias",
        "descricao": "Várias cidades são conectadas por estradas. As N cidades são nomeadas com números de 0 até N-1. Golias deseja viajar de carro de sua cidade, identificada pelo número 0, para a capital, identificada pelo número N-1 para visitar seu amigo Elias. Cada estrada é de uma mão, ou seja, os carros viajam em apenas uma direção, e se tem um custo de combustível para atravessá-la. Dado a configuração das cidades e estradas, Golias quer saber qual o menor custo de combustível de maneira que ele passe por no máximo K cidades diferentes. As cidades inicial e final também contam, ou seja, sempre ele terá de visitar no mínimo duas cidades, a inicial e a final."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2112",
        "saida": "Para cada instância o seu programa deverá imprimir uma permutação das turmas que atenda os requisitos de todos os docentes, ou seja, todas as turmas em que um docente dá aula estejam adjacentes. Caso não exista uma tal permutação seu programa deverá imprimir impossível. Se existir mais de uma permutação possível, qualquer uma será aceita.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Na primeira linha de cada instância é dado o número de turmas T (1 < T < 103), numeradas de 1 a T, e o número de docentes D (1 < D < 103). Nas D linhas seguintes são dados o número K (0 < K < T) de turmas em que o docente correspondente dá aulas seguido pelas identificações destas turmas em ordem crescente.",
        "titulo": "Escalonamento de Salas de Aula",
        "descricao": "Os professores da Universidade de Ecaterimburgo não gostam de deslocar-se por longas distâncias. Cada docente deseja que as salas em que ele vai dar aula estejam em posições adjacentes. No início de cada semestre cabe ao responsável pela Comissão de Graduação determinar as salas de aula em que os docentes deverão dar aula. Cada docente sabe que turma de alunos deverá assistir às suas aulas como, por exemplo, alunos do terceiro período de Engenharia Mecânica, ou alunos do primeiro período de Computação, etc. Os alunos de cada turma permanecem na mesma sala em todas as aulas. O importante é que todas as salas em que um docente dá aulas fiquem em posições adjacentes. Nem sempre é possível satisfazer os requisitos dos docentes. Se, por exemplo, um docente dá aulas para o terceiro semestre de Matemática e primeiro semestre de Computação, um segundo dá aulas para o primeiro semestre de Computação e segundo período de Engenharia Elétrica e um terceiro professor dá aulas para os alunos do segundo período de Engenharia Elétrica e terceiro semestre de Matemática, claramente não é possível satisfazer os três professores. Sua tarefa é ajudar o responsável pela alocação das salas, e determinar se é possível satisfazer todos os requisitos dos docentes."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1617",
        "saida": "Para cada caso de teste, a saída deverá ser uma linha contendo um único inteiro – o número de minutos que o caminhão precisará para ir de DeTI até DeOT e voltar. (Considere que o tempo que o caminhão fique em DeOT seja desprezível). Se não houver solução, escreva “Pernoite.”.",
        "entrada": "A entrada conterá vários casos de testes. Cada caso de teste iniciará com um inteiro N (2 ≤ N ≤ 100) indicando o número de cidades. DeTI é a cidade de número 1, e a DeOT é a cidade N. A próxima linha conterá um inteiro M representando o número de estradas/rodovias. As próximas M linhas descreverão as M estradas/rodovias. Cada linha conterá 3 inteiros, ou seja, as duas cidades conectados por uma estrada/rodovia e o tempo necessário para percorrer a distância entre elas (em minutos). Nenhuma estrada/rodovia levará mais do que 1000m ou menos que 1m. Cada estrada/rodovia se conectará a duas diferentes cidades. Nenhum par de cidades será diretamente conectado por mais do que uma estrada/rodovia. O último caso de teste será seguido por uma linha contendo o número 0.",
        "titulo": "Caminho Seguro",
        "descricao": "Você, um Tenente especializado em computação, foi designado para ajudar o Coronel Rambo que por ser italiano, prefere ser chamado de Ramboni. Ramboni é o bravo comandante das tropas aliadas, que luta para manter a ordem na região das Algarias. Para executar as missões, as tropas precisam se alimentar bem e com regularidade. Para isso, diariamente um caminhão sai do quartel, na cidade DeTI e viaja alguns quilômetros passando por várias cidades até chegar ao destino, na cidade DeOT, onde tem comida farta. Entretanto, nos últimos dias, começaram a ocorrer ataques ao caminhão para roubar o carregamento. Diante deste cenário crítico, o Coronel Ramboni elaborou um plano. O caminhão deveria ir por um caminho e voltar por outro caminho totalmente diferente do caminho de ida. Sendo que o caminhão não pode passar pela mesma rodovia/estrada duas vezes. Caso não seja possível essa possibilidade, o caminhão deve ficar no destino para voltar apenas no outro dia. O incansável Coronel Ramboni pediu uma coisinha a mais: temos que ser rápidos, pois a tropa não pode ficar com fome."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "2128",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima sim se existe uma atribuição de construções de rodovias que atenda as exigências descritas acima, caso contrário imprima nao. Após cada instância imprima uma linha em branco.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em três inteiros n (1 ≤ n ≤ 100), m (1 ≤ 10000) e k (1 ≤ k ≤ 2n) que indicam o número de cidades, número de orçamentos e o número de empresas. As próximas m linhas contém três inteiros u (1 ≤ u ≤ n), v (1 ≤ v ≤ n) e c (1 ≤ c ≤ k) indicando que a empresa c pode construir uma rodovia que liga a cidade u à cidade v. As instâncias são separadas por uma linha em branco. A entrada termina com final de arquivo.",
        "titulo": "Demonstração de Honestidade!",
        "descricao": "Com o grande número de imigrantes argentinos no Canadá, o governo canadense está criando novas rodovias para as regiões mais distantes e isoladas habitadas por argentinos. Foram feitas diversas licitações para descobrir quais empresas poderiam conduzir as obras de cada rodovia. Cada empresa divulgou os orçamentos para as rodovias que ela poderia construir. Os canadenses são conhecidos pela intolerância à corrupção e querem a qualquer custo evitar que alguma empresa seja beneficiada acima das outras. Então decidiram que cada empresa pode ser contratada para fazer no máximo uma das rodovias. Dá para perceber que no Brasil as coisas funcionam da mesma forma. (Mas não vamos entrar neste mérito!) Entre duas cidades apenas uma empresa pode ter sido escolhida para construir uma rodovia. Sua tarefa é: Dado um conjunto de orçamentos para construção das rodovias que ligam as cidades decida se existe uma maneira de atribuir as construções para as empresas, atendendo a exigência do governo canadense, e que seja possível viajar de qualquer cidade para qualquer outra usando as rodovias construídas."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1668",
        "saida": "Para cada caso de teste, escreva uma linha contendo a frequência de acesso para cada nó em ordem crescente de valores dos nós. Para evitar problemas de precisão, as frequências devem ser escritas como números inteiros, significando que a probabilidade de acesso de um nó será a frequência dividida pela soma de todas as frequências. Certifique-se que você não escreverá qualquer inteiro maior que 263 - 1 (o valor máximo que cabe no tipo long long para C/C++ ou long para Java). Caso contrário, você poderá produzir uma solução qualquer sem a garantia de que é exatamente uma árvore binária de busca ótima: a árvore binária de busca dada na entrada.",
        "entrada": "O entrada contém vários casos de teste. Cada caso inicia com um inteiro n (1 ≤ n ≤ 50), que é o número de nós de uma árvore binária de busca ótima. Para simplificar, os valores dos nós serão inteiros de 1 a n. A seguir temos n linhas que descrevem a estrutura da árvore. A i-ésima linha contém os valores dos nós da sub-árvore esquerda e direita com valor i (ou -1 para uma árvore vazia). Você pode assumir que a entrada sempre conterá uma árvore binária de busca válida. O último caso é seguido por um zero. Note que o primeiro caso de teste no exemplo de entrada descreve uma árvore parecida com:    2  /  \\ 1    3",
        "titulo": "Ajude o Autor do Problema",
        "descricao": "Preparar um problema para uma competição de programação leva muito tempo. Você não somente tem que escrever a descrição e a solução de um problema, mas você também tem que criar arquivos de entrada difíceis. Nesse problema, você terá a chance de ajudar o autor de problemas a criar algumas entradas para um determinado problema. Para isso vamos selecionar o problema que não foi resolvido durante uma competição local no ano passado. O problema era encontrar a árvore binária de busca ótima, dado a probabilidade de que certos nós são acessados. Seu trabalho será: dado a árvore binária de busca ótima desejada, descubra algumas probabilidades de acesso para que esta seja a única e melhor árvore. Não se preocupe se você não leu o problema no ano passado, pois todas as definições exigidas foram colocadas abaixo. Vamos definir uma árvore binária de busca indutivamente da seguinte forma: Uma árvore vazia que não possui nenhum nó é uma árvore binária de busca; Cada árvore binária de busca não vazia possui uma raiz, que é um nó identificado por um inteiro e duas sub-árvores uma a direita e outra a esquerda da raiz; A sub-árvore da esquerda não contém nenhum nó com rótulo ≥ que o rótulo da raiz; A sub-árvore da direira não contém nenhum nó com rótulo ≤ que o rótulo da raiz. Dado tal árvore de busca binária, o seguinte procedimento de busca pode ser usado para localizar um nó na árvore: Começe com a raiz. Compare o rótulo do nó atual com o rótulo do nó desejado. Se forem iguais, você encontrou o nó correto. Caso contrário, se o rótulo desejado for menor busqye na sub-árvore da esquerda, senão, busca na sub-árvore da direita. O custo de acesso para localizar um nó é o número de nós que você visitou até encontrar o nó certo. Uma árvore binária de busca ótima é uma árvore com o mínimo custo esperado."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1317",
        "saida": "Para cada caso de teste seu programa deverá exibir uma lista de nomes seguida dos atributos que adquiriram. Seu programa deve escrever os nomes das pessoas na ordem em que aparecerem na entrada, seguido de ‘:’ e de um espaço, seguido de seus atributos de acordo com os SPAM que enviaram. Os atributos devem ser escritos na ordem que apareceram na entrada; cada atributo deve ser seguido de espaço.",
        "entrada": "Seu programa deverá processar vários casos de teste. A primeira linha do caso de teste contém um inteiro N indicando o número de pessoas no grupo (2 ≤ N ≤ 20). Na entrada a pessoa é identificada por um inteiro de 1 a N. As N linhas seguintes contêm cada, uma lista de amigos de cada pessoa (a linha i contém a lista de amigos da pessoa i). A lista de amigos da pessoa i descreve os amigos que a pessoa i conhece o endereço de e-mail, e consiste de uma lista de inteiros Fi (1 ≤ Fi ≤ N, Fi ≠ i) terminada pelo valor 0 (zero). Seguindo a lista de amigos vem a descrição das mensagens de SPAM (terá no máximo 100 mensagens). Cada descrição aparece em uma linha diferente. A descrição consiste de um inteiro P identificando a pessoa originadora do SPAM (2 ≤ P ≤ N); dois inteiros T1 e T2 representando os valores limites; e os três atributos A1, A2 e A3 (cada atributo é uma palavra de não mais que vinte letras). A lista de SPAM acaba com uma linha contendo apenas o valor 0 (zero). As N linhas contém cada, um nome, que é uma palavra apenas, com não mais que vinte letras. O nome na linha de i é o nome da pessoa número i. O fim da entrada é indicado por N = 0.",
        "titulo": "Eu Odeio SPAM, Mas Algumas Pessoas Amam",
        "descricao": "Hoje em dia, infelizmente, mensagens de SPAM estão ficando mais e mais comuns. Algumas delas têm efeito de multiplicação, já que pedem que repasses para teus amigos. Algumas mensagens de SPAM desejam boa sorte, outras, prometem que tornar-se-á rico, e outras apenas lhe lembram o quão importante é contar a seus amigos o quanto você se importa com suas amizades. Eis um exemplo de SPAM:    De: Alice    Para: Bob, Mary, Julia, Paul    Olá, este é um e-mail de boa sorte. Desejo que se torne milionário, mas    isso depende de você. Se você:    * mandar esse e-mail para 10 pessoas você se ficará milionário    * mandar esse e-mail para 5 ou mais pessoas você ficará rico    * mandar esse e-mail para menos de 5 pessoas você será pobre    Como eu disse, depende de você. Escreve seu e-mail e seja rico! :-)    Alice Pessoas normalmente reagem de dois modos diferentes quando recebem SPAM: Eles descartam a mensagem imediatamente sem ao menos lê-la (eles odeiam SPAM); Eles encaminham a mensagem para todos que conhecem (eles amam SPAM). Para esse problema, nós assumiremos que todos amam SPAM, mas ninguém manda a mesma mensagem duas vezes. Cada mensagem de SPAM tem um efeito baseado no número de amigos que você manda as mensagens. Por exemplo: uma mensagem de SPAM poderá lhe dizer que ficarás pobre se mandares a mensagem para 5 amigos, mas serás rico se mandares para 10, e serás o mais rico do mundo se mandares para 20 amigos, e assim vai. Consideraremos apenas as mensagens de SPAM similares ao exemplo acima. Mais especificamente, uma mensagem de SPAM definirá dois valores limiares T1 e T2 e três atribuidores A1, A2 e A3. Uma pessoa adquire um dos três valores dependendo do número de mensagens enviadas para aquele SPAM específico. Se a pessoa encaminha T mensagens e T < T1 então o atributo dele/dela é A1, se T1 ≤ T < T2 então o atributo dele/dela é A2, caso contrário o atributo dela é A3. Lhe será dado os nomes de um grupo de pessoas, e para cada pessoa do grupo, um conjunto de amigos que ele/ela conhece o endereço de e-mail. Lhe será dado um conjunto distinto de mensagens de SPAM, e para cada mensagem de SPAM ela limita valores e atributos, e a informação sobre cada pessoa que iniciou a proliferação do SPAM. Você tem que escrever um programa que determine, para cada pessoa no grupo dado, quais atributos ele/ela adquiriu, baseado no SPAM encaminhado. Você assumirá que o originador do SPAM tenha pelo menos um amigo (em outras palavras, ele/ela enviará pelo menos uma mensagem), e a pessoa não mandará para si mesma."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1053",
        "saida": "Para cada caso, imprima o número do caso de teste seguido pela quantidade total de tinta requerida com 2 dígitos depois do ponto decimal. Se as linhas não podem ser desenhadas sem que se levante a caneta, imprima o número do caso de teste seguido de “~ x (“, conforme exemplo abaixo (caso 2).",
        "entrada": "A primeira linha de entrada é um inteiro T(T<20) que indica o número total de casos de teste. Cada caso inicia com um inteiro N (N<10). Então N linhas vem a seguir, cada uma descrevendo um segmento de linha. Um segmento de linha é definido por dois pontos Y   1   X  1    Y 2 X2  . Y1 e  Y2 estarão no intervalo [A,E]. X1 e X2 estarão no intervalo [1,5]. O  primeiro exemplo é mostrado na figura acima. Portanto, olhe para o exemplo para compreender o formato exato.",
        "titulo": "Desenho Contínuo",
        "descricao": "Uma tarefa simples! Você receberá os pontos finais de alguns segmentos de linha. Basta desenhá-los! Está achando muito fácil, certo? Você decide desafiar a si mesmo e, portanto, adicionar algumas restrições. 1] Iniciar a partir do ponto final de qualquer segmento de linha. 2] Não levante a caneta do papel. 3] Você pode passar por cima de uma linha de mais de uma vez. 4] Não desenhar qualquer outra linha além das citadas. 5] Você só pode mudar de direção em coordenadas inteiras de x e y. 6] Use a menor quantidade de tinta necessária. Você precisa de uma unidade de tinta para desenhar uma unidade de linha. As distâncias entre os pontos sucessivos são: 1 unidade. Portanto Distância (A1 até B1) = 1 unidade and Distância (A1 até A2) = 1 unidade."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1628",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único inteiro representando o número máximo de movimentos que o jogador deve fazer para xecar o rei usando uma só peça e se livrar de virar a dose de tequila. Se o número não for finito, imprima “INF” (sem as aspas).",
        "entrada": "A entrada é composta por vários casos de teste, sendo cada caso de teste composto por 3 linhas. Na primeira linha figura um único inteiro positivo N, o qual representa o número de peças brancas que o dealer pôs no tabuleiro. A segunda linha descreve as N peças brancas, seguindo a Notação Algébrica¹ do Xadrez. A terceira linha, por fim, indica a posição do rei preto. A entrada é finalizada quando N = 0.",
        "titulo": "ChessGuess",
        "descricao": "Um novo jogo virou a maior sensação na Nlogônia. Batizado de ChessGuess, este jogo baseado no xadrez é definido pelas seguintes regras, as quais compõem o Manifesto do ChessGuess: O ChessGuess pode ser jogado por qualquer número de jogadores maior que 1, sendo um deles escolhido pelo grupo para ser o dealer. Em cada rodada, o dealer prepara um tabuleiro de xadrez com qualquer número positivo de peças brancas e um único rei preto, desde que nenhum rei branco seja colocado no tabuleiro. O número de peças de cada tipo não é limitado como no xadrez tradicional, ou seja, podem ser colocados, por exemplo, 63 peões brancos e 1 rei preto sem problemas. Após preparar o tabuleiro duma rodada, o dealer escolhe um dos demais jogadores, de modo que cada jogador, à exceção do próprio dealer, seja escolhido exatamente uma vez. O jogador escolhido deve, então, escolher uma única peça branca e movê-la tantas vezes quantas achar necessário para pôr o rei preto em xeque. Os movimentos das peças obedecem aos movimentos do xadrez tradicional, com a única exceção de que ao peão não é permitido andar duas casas para frente em seu primeiro movimento. Se o jogador for capaz de adivinhar uma escolha ótima, que põe o rei em xeque com o número mínimo de movimentos usando uma só peça, o dealer deve virar uma dose de tequila. Do contrário, quem vira a dose de tequila é o jogador. No exemplo da Figura, 1 é o número máximo de movimentos que o jogador deve fazer para xecar o rei usando uma só peça e se livrar de virar a dose de tequila. Um problema, porém, está comprometendo o sucesso do novo jogo. Conforme avança a brincadeira, as pessoas vão ficando bastante bêbadas, especialmente o dealer, que já não consegue mais decidir se a escolha feita pelo jogador é ótima ou não. Portanto, a Federação e Associação do ChessGuess Ecológico (FACE) precisa de um programa que, dada a configuração inicial do tabuleiro montada pelo dealer, calcula o número máximo de movimentos que o jogador deve fazer para embebedar o dealer ainda mais."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2038",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um número inteiro, representando o lucro máximo que a GigaFarma pode obter a partir de uma cadeia de DNA produzível e alienígena. Se nenhum lucro é positivo, você deve imprimir o valor 0. Se o lucro pode ser arbitrariamente grande, você deve imprimir um asterisco '*'.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois números inteiros G e P, representando o número de genes no catálogo e o número de partes que a GigaFarma pode produzir (1 ≤ L, P ≤ 100). Cada uma das seguintes G linhas descrevem um gene diferente, usando uma string S e um número inteiro V. A string S tem entre 1 e 10 caracteres, e é formada exclusivamente por letras minúsculas representando as bases que formam este gene; o número inteiro V representa o valor desse gene (1 ≤ V ≤ 1000). Cada uma das P linhas seguintes descrevem uma parte diferente do DNA, usando uma string T e um inteiro C. A string T tem entre 1 e 30 caracteres, e é composta de apenas letras minúsculas e hifens, respectivamente representando as bases e as conexões nesta parte. T contém pelo menos uma conexão, mas nunca terá conexões iniciais, finais ou consecutivos. O inteiro C representa o custo de produção para a parte correspondente (1 ≤ C ≤ 1000). Note que em todos os casos de teste, todos os genes são diferentes um dos outros, e todas as partes também são diferentes uma da outra. O fim da entrada é indicado por uma linha que contém duas vezes o número -1.",
        "titulo": "Gerando DNA Alienígena",
        "descricao": "GigaFarma é uma das maiores empresas farmacêuticas do mundo, e está atualmente conduzindo experimentos usando DNA alienígena. Seu objetivo é produzir uma cadeia de DNA alienígena que irá resultar no maior lucro possível quando comercializado. Uma cadeia de DNA estranho pode ser entendida como uma sequência não vazia de genes ligados, e por sua vez, cada gene é uma sequência não vazia de bases. Devido ao fato que nem todas as sequências possíveis de bases corresponde a um gene válido, a GigaFarma criou um catálogo de genes que aparecem no DNA alienígena, que são as únicas consideradas sequências válidas de bases. Cada um destes genes tem um valor de acordo com a sua funcionalidade, e uma dada cadeia de DNA alienígena tem um valor de mercado que é a soma dos valores dos genes que o compõem. Vamos representar as diferentes bases com letras minúsculas, 'a' - 'z', e as ligações usando um hífen \"-\". No exemplo a seguir, podemos ver na esquerda uma possível lista de genes e seus valores correspondentes; à direita há algumas cadeias de DNA alienígena que podem ser formados com esses genes, juntamente com os seus correspondentes valores de mercado. GigaFarma só pode produzir cadeias de DNA muito específicas, que chamamos de produzível. Estas cadeias são uma sequência não vazia de partes de DNA que a empresa pode sintetizar, unidas sem quaisquer ligações adicionais entre eles. Cada parte é uma sequência de bases e conexões que contenham pelo menos uma conexão, mas sem quaisquer ligações consecutivas, iniciais ou finais. Cada parte tem um custo, determinado pela dificuldade associada com a sua produção, de modo que cada cadeia produzível de DNA tem um custo de produção que é a soma dos custos de cada uma das partes que o compõem. No exemplo a seguir, podemos ver na esquerda uma lista de partes de DNA e os seus custos; do lado direito, temos algumas cadeias produzíveis de DNA que podem ser formadas com essas partes, juntamente com os seus custos de produção. Note que pode haver várias maneiras de formar uma mesma cadeia produzível usando diferentes partes. Este é o caso de \"como-como-les\" no exemplo, que pode ser obtido usando porções \"como-co\" e \"mo-les\" com um custo de produção de 7, ou simplesmente usando \"como-como-les\" com um custo de produção de 12. É claro que, quando existe mais de uma maneira de sintetizar uma determinada cadeia produzível de DNA, GigaFarma sempre faz usando o processo mais barato possível. Claramente, o conjunto de cadeias de DNA alienígena é infinito, assim como o conjunto de cadeias de DNA produzíveis. No entanto, a GigaFarma não está interessada em nenhum destes conjuntos, mas na sua intersecção. Se verificar os exemplos anteriores, podemos ver que \"como-les\" é uma cadeia de DNA alienígena válida, mas não é produzível, \"mo-les\" é produzível, mas não é uma cadeia de DNA alienígena, e \"como-como-les\" é produzível e uma cadeia de DNA alienígena. Para cada cadeia de DNA alienígena e produzível, a empresa pode comercializar essa cadeia para obter um lucro que equivale ao valor dessa cadeia menos o seu custo de produção do mercado. É claro que, se este lucro não é positivo, a cadeia correspondente nunca será produzida. Por existir muito material genético em todo o lugar, GigaFarma pagaria qualquer coisa para saber o lucro máximo que ela pode obter por algumas cadeias de DNA produzível e alienígena."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1427",
        "saida": "Para cada rota de cada caso de teste, você deve produzir uma ou duas linhas de saída. Se existe uma rota entre as localizações solicitadas, você deve produzir duas linhas: uma contendo o custo mínimo da viagem e outra contendo a rota utilizada. As linhas devem ser impressas no seguinte formato (sem aspas): \"Mr to go from to , you will receive euros\" \"Path: \" Se não há uma rota possível entre as localizações de origem e destino, você deve produzir uma linha, no seguinte formato (sem aspas): \"Sorry Mr you can not go from to \" Se houver dois caminhos minimos possiveis entre A e B e os dois tem vertices intermediarios, a preferencia é do caminho que aparece antes na entrada, por exemplo: Se as cidades da entrada forem: A B C D E F, o caminho \"A C D B\" tem mais prioridade que o caminho \"A E B\" (pois E aparece depois que D) e o caminho \"A D E B\" tem mais prioridade sobre \"A C F B\" (pois F aparece depois que E). A analise é feita olhando-se a ordem de entrada dos vértices intermediários.",
        "entrada": "A entrada começa com uma linha contendo um inteiro C (1 ≤ C ≤ 99), indicando o número de casos de testes. Cada caso de teste é descrito a seguir. A primeira linha de um caso de teste contém um inteiro P (1 ≤ P ≤ 99), indicando o número de localizações existentes. A segunda linha contém os nomes das localizações, separados por um TAB. Cada nome tem no máximo 20 caracteres.  As próximas P linhas contém os custos para ir de uma localização diretamente para outra, também separados por TAB. A primeira destas linhas contém os custos para ir diretamente da primeira localização para todas as outras; a segunda linha contém os custos para ir da segunda localização para todas as outras; e assim por diante. Um custo é dado por um inteiro W (-1 ≤ W ≤ 300), onde W = -1 indica que a viagem direta entre as localizações é muito cara e não pode ser realizada, e W = 0 indica o custo para ir diretamente de uma localização a ela mesma.  Depois das P linhas, há uma linha contendo um inteiro R (1 ≤ R ≤ 99), indicando o número de rotas a serem consideradas. As próximas R linhas contém cada uma o nome de um funcionário e o nome das localizações de origem e destino de sua entrega. Os nomes das localizações diferenciam maiúsculas e minúsculas (case sensitive), e o nome do funcionário tem no máximo 30 caracteres.",
        "titulo": "O Problema da Scrooge Co.",
        "descricao": "A empresa de entregas Scrooge Co. quer estabelecer um sistema para pagar a menor quantia necessária de dinheiro a seus empregados durante suas entregas. A empresa sabe qual é a quantia mínima de dinheiro necessária para ir diretamente de uma localização até outra. A empresa pediu para você escrever um programa que compute a menor quantia de dinheiro que um empregado deve receber para poder ir de uma localização até outra, e a rota que ele deve usar."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1552",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma linha contendo o valor com precisão de duas casas decimais correspondente ao comprimento mínimo de teia, em metros, necessário para se conectarem todas as pessoas do grupo. Atente para que o separador das casas decimais seja . (ponto), não , (vírgula).",
        "entrada": "A entrada é constituída por vários casos de teste. A primeira linha de entrada contém um inteiro C que determina a quantidade de casos de teste. Cada caso de teste começa com um inteiro positivo n (n ≤ 500), o qual representa o número de pessoas no grupo. Seguem, então, n linhas, cada uma designando uma pessoa do grupo pelas suas coordenadas x e y na malha (0 ≤ x, y ≤ 104).",
        "titulo": "Resgate em Queda Livre",
        "descricao": "Ó, meu Deus! Um grupo de pessoas está caindo em queda livre! Elas saltaram todas exatamente ao mesmo tempo de vários aviões que estavam exatamente à mesma altura. A intenção era realizar o maior e mais belo salto sincronizado da História. No entanto, o malévolo Loki, para se deleitar com a insignificância humana, sabotara os paraquedas, e agora a única esperança está numa ação conjunta do Homem-Aranha com o Homem-de-Ferro. Como ambos são muito nerds, notaram que as pessoas estavam caindo todas num mesmo plano paralelo ao solo, a despeito da resistência do ar e de outros fatores. Então, bolaram um plano infalível. Primeiro, o aracnídeo unirá todas as pessoas através de cabos de teia entre elas. Uma vez que não haja pessoa que não esteja conectada ao grupo, o playboy poderá eletromagnetizar o grupo todo e, segurando na mão de uma apenas das pessoas do grupo, pousar todas elas em segurança. Mas não há muito tempo para divagações. O Homem-Aranha precisa agir rápido, o que no caso dele significa gastar o mínimo possível de teia. Para tanto, o Homem-de-Ferro em seu screen projetou numa malha cartesiana o plano em que as pessoas estão, usando o centímetro como unidade de medida, e obteve as coordenadas de cada pessoa na malha. Agora, J.A.R.V.I.S. está computando qual o mínimo necessário de teia de que o Homem-Aranha precisará. Dependendo da resposta, o Homem-de-Ferro não esperará pelo garoto e improvisará alguma outra peripécia."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1550",
        "saida": "Para cada caso de teste, o programa deve imprimir um inteiro indicando o número mínimo de apertos de botão para que o número do visor passe de A para B.",
        "entrada": "A entrada é iniciada por um inteiro T, 0 < T ≤ 500, que indica a quantidade de casos de teste a ser processados. Segue-se T linhas cada uma contendo dois inteiros A e B, 0 < A < B < 10000, indicando respectivamente o número inicial no visor e o número que deve ser mostrado no visor depois de apertar os botões.",
        "titulo": "Inversão",
        "descricao": "Pedro é um garoto curioso que gostava de eletrônica. Certo dia, o menino estava mexendo no laboratório de sua escola e encontrou uma caixa cheia de pequenos aparelhos eletrônicos feitos por outros alunos em anos anteriores. Dentro dessa caixa havia um aparelho que possuía apenas um visor e dois botões. Esse visor apresentava um número inteiro. Mexendo nos botões, Pedro descobriu para que servia cada um deles. O primeiro botão adicionava uma unidade ao número no visor. O segundo botão invertia os dígitos do número, por exemplo, 123 invertido resulta em 321 e 150 invertido resulta em 51 (ignora-se os zeros a esquerda). Inicialmente, o visor apresentava o número A. Após a descoberta da função dos botões, Pedro quer saber como fazer o número do visor mudar de A para um número maior igual a B. O seu trabalho nesse problema é ajudar Pedro a descobrir qual é o número mínimo de apertos de botão para que o número no visor passe a ser igual a B."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1100",
        "saida": "para cada caso de teste imprima uma linha dizendo \"To get from xx to yy takes n knight moves.\". No caso xx é a origem, yy é o destino e n é a quantidade de movimentos necessários para ir de xx  até yy.",
        "entrada": "A entrada contém um ou mais casos de teste. Cada caso de teste consiste de uma linha contendo dois quadrados separados por um espaço. Um quadrado será uma string consistindo de uma letra (a-h) representando a coluna e um dígito (1-8) representando a linha do tabuleiro de xadrez (veja figura acima).",
        "titulo": "Movimentos do Cavalo",
        "descricao": "Pedro está fazendo uma pesquisa sobre o problema do movimento do cavalo em um tabuleiro de xadrez e incumbiu você da tarefa de encontrar o menor conjunto de movimentos possíveis, podendo sair de qualquer quadrado a e podendo chegar em qualquer quadrado b dentro do tabuleiro, sendo que a e b são quadrados diferentes. Ele pensa que a parte mais difícil do problema é determinar o menor número de movimentos do cavalo entre 2 quadrados fornecidos e que uma vez que você está comprometido com esta tarefa, encontrar a sequência de movimentos entre estes 2 quadrados será uma tarefa muito fácil. É claro que você sabe que o movimento é vice versa. Portanto você deve fornecer a Pedro um programa que resolva esta questão. Seu trabalho então será escrever um programa que, pegando dois quadrados a e b como entrada, determine o número de movimentos para encontrar a rota mais curta de a até b."
    },
    {
        "nivel": "2",
        "assunto": "7",
        "numero": "2046",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia H em que H é um número inteiro, seqüencial e crescente a partir de 1. Nas L linhas seguintes, você deve imprimir por qual sede da empresa o pedido correspondente àquela linha foi atendido. Em caso de haver mais de uma sede à mesma distância, dê preferência pela que possuir menor índice de linha. Persistindo o empate, dê preferência pela com menor índice de coluna. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "São dadas várias instâncias. Para cada instância são dadas as dimensões 0 ≤ M, N ≤ 1000 da cidade (será uma grade com M linhas e N colunas). Um valor N = 0 ou M = 0 indica o fim dos dados. A seguir vem o número 0 < K ≤ 100000 de sedes da empresa. Nas K linhas seguintes vêm as coordenadas das sedes. A seguir, vem o número 0 ≤ L ≤ 100000 de ligações pedindo steaks. Nas L linhas seguintes vêm as coordenadas da posição de cada chamada (que também são vértices da grade).",
        "titulo": "Entregadores de Steak",
        "descricao": "O Texas é famoso pela sua carne de excelente qualidade. “Steaks” com até dois centímetros de espessura assados em churrasqueiras são a especialidade culinária do estado. Em San Antonio é difícil encontrar entregadores de pizza por telefone, mas é muito comum encontrar “disk steaks”. Você liga para o número e em poucos minutos chega um suculento bife à sua casa, quente e pronto para comer. É claro que tamanha eficiência depende de um complicado sistema de entregas. Há várias sedes da empresa espalhadas pela cidade, e sempre que uma chamada é feita a sede mais próxima é acionada, o steak é assado e o entregador segue com o suculento jantar. Sabemos que San Antonio é uma cidade planejada. Podemos imaginar os cruzamentos da cidade como vértices de uma grade. Por algum motivo obscuro, todas as sedes estão instaladas em cruzamentos. Sua tarefa é ajudar a empresa na entrega dos steaks."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1413",
        "saida": "Para cada caso de teste, seu programa deve imprimir apenas uma linha, contendo um número real que representa a penalidade mínima, isto é, a menor soma possível dos tempos levados pelos membros da equipe para chegar a seus respectivos pontos de chegada. Suas respostas devem ser arredondadas a um dígito depois do ponto decimal.",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M, representando o número de membros na equipe e o número de pontos de chegada, respectivamente (1 ≤ N ≤ M ≤ 100). As próximas N linhas contém dois inteiros X e Y cada, representando a posição inicial de cada membro (-20000 ≤ X, Y ≤ 20000), e um número real s, representando a velocidade do competidor. Os membros da equipe são identificados pela ordem em que suas posições iniciais são dadas na entrada (o primeiro competidor a aparecer é o número 1, o segundo é o número 2, e assim por diante). Esses mesmos números são utilizados para identificar a cor de cada membro. As próximas M linhas contém dois inteiros X e Y cada que descrevem a posição de um ponto de chegada (-20000 ≤ X, Y ≤ 20000), e a lista de cores Ci que são aceitas pelo ponto (1 ≤ Ci ≤ N); o fim desta lista é indicado por um 0 (zero). O fim da entrada é indicado por N = M = 0.",
        "titulo": "Apresse-se!",
        "descricao": "Orientação, uma corrida a pé onde os competidores recebem um mapa e uma bússola, é um esporte muito popular em alguns países da Europa. Johnny e seus amigos entraram em uma competição de orientação, e pretendem vencer. Nesta competição, cada membro de uma equipe se veste com uma cor diferente, e inicia a prova em um lugar diferente. Existem alguns pontos de chegada, e cada ponto de chegada tem uma lista de cores que ele \"aceita\". Todo competidor de uma uma equipe deve ir de seu ponto inicial até um dos pontos de chegada que aceitam a sua cor. Nenhum membro de uma equipe pode ir para o mesmo ponto de chegada de outro membro. A penalidade de uma equipe no jogo é igual à soma do tempo que os membros da equipe levam para ir de seus pontos iniciais aos seus pontos finais. Para maximizar as chances de vitória, Johnny e seus companheiros de equipe querem determinar quais são os pontos de chegada mais apropriados para cada membro, assumindo que ele e seus amigos caminham a velocidades possivelmente diferentes. Assim, eles querem determinar um ponto de chegada diferente para cada membro da equipe, de forma que a penalidade da equipe seja minimizada. Você pode assumir que sempre haverá uma resposta válida (isto é, um ponto de chegada diferente para cada membro da equipe)."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1988",
        "saida": "Para cada caso de teste, imprima em uma única linha um inteiro que representa o número mínimo de vias aquáticas adicionais que devem ser construídas de modo que cada ilha pertença a pelo menos um circuito turístico.",
        "entrada": "A entrada contém vários casos de teste. Cada teste é descrito em várias linhas. A primeira linha contém dois números inteiros N e M (3 <= N <= 100, 1 <= M <= 1000) que indicam o número de ilhas e o número de vias aquáticas, respectivamente. Cada ilha é identificada por um número entre 1 e N. Cada uma das M linhas seguintes contém dois inteiros U e V (1 <= U <V <= N), indicando que existe um percurso de ligação aquático ilhas U e V. Pode-se supor que em cada caso de teste existe no máximo um percurso aquático que liga o mesmo par de ilhas. A última linha da entrada contém o número -1 duas vezes e não deve ser processado como um caso de teste.",
        "titulo": "Circuitos Turísticos",
        "descricao": "Todo mundo está ciente da existência do bem conhecido arquipélago Nordenskjold, situado no Oceano Ártico e pertencente ao Krasnoyarsk Krai da Rússia. Este arquipélago é constituído por um grupos de ilhas N e M rotas aquáticas entre alguns pares de ilhas. Cada percurso liga um par de ilhas e para cada par, há no máximo um percurso ligando-os. Considerando a popularidade do Archipelago Nordenskjold, autoridades de Krasnoyarsk estão preocupadas com o seu valor turístico. O valor turístico do arquipélago é dado pelo número total de ilhas que pertencem a pelo menos um \"circuito turístico\". Um circuito turístico é um caminho que começa e termina na mesma ilha que visita pelo menos três diferentes ilhas, nunca visita a mesma ilha mais de uma vez e usa apenas as rotas aquáticas para ir de uma ilha para a próxima. Autoridades de Krasnoyarsk quer saber o número mínimo de rotas aquáticas adicionais que devem ser construídas de modo que cada ilha pertença a pelo menos um circuito turístico. Sua tarefa é escrever um programa que responde a esta pergunta."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1447",
        "saida": "Para cada instância, imprima a linha \"Instancia k\", onde k é o número da instância atual. Além disso, imprima a menor quantidade possível de dinheiro que os amigos vão gastar para voltar ao Brasil (que está limitada por 1015). Caso não seja possível escolher um conjunto de voos que levem todos para casa, imprima \"impossivel\". Imprima uma linha em branco após cada instância.",
        "entrada": "O problema é composto por várias instâncias. Cada instância começa com uma linha com dois inteiros positivos N (2 ≤ N ≤ 100) e M (1 ≤ M ≤ 5000), onde N é o número de cidades que pertencem às M rotas de voo consideradas. Os amigos querem ir da cidade 1 até a cidade N. Nas próximas M linhas são fornecidos triplas de inteiros A B C descrevendo a rota do avião (A e B) e o preço da passagem aérea por pessoa (C). Os valores de A e B estão entre 1 e n. As rotas são bidirecionais (ou seja, há um voo de A até B e um voo de B até A com preço C) e haverá no máximo uma rota entre duas cidades. Na próxima linha são dados dois inteiros, D e K, onde D é o número de amigos e K é o número de assentos livres em cada voo. Cada rota só pode ser utilizada uma vez.",
        "titulo": "Back to the Future",
        "descricao": "Um grupo de amigos resolveu ir à Alemanha para apoiar a seleção brasileira em sua jornada gloriosa rumo ao hexa. Como as passagens aéreas e as estadias eram caras, cada um trouxe uma quantidade de dinheiro que julgou suﬁciente para passar o mês com conforto e voltar para casa sem problemas. Porém, após a bela campanha do Brasil na copa do mundo, o grupo de amigos se viu obrigado a gastar o dinheiro que tinha guardado para as etapas ﬁnais da copa com a famosa cerveja alemã. As consequências de tais atos foram terríveis. Após uma grande bebedeira, todos foram pegos pela polícia local dormindo na rua, e receberam multas pesadíssimas. Além disso, todos perderam suas passagens de volta. Devido a esses contratempos, a viagem de volta ﬁcou ameaçada. De repente, eles descobriram que precisavam voltar para casa gastando a menor quantidade possível de dinheiro. Analisando as rotas aéreas disponíveis, os amigos notaram que em todas as rotas o número de assentos disponíveis nos aviões era sempre o mesmo. Porém, os preços das viagens entre uma cidade e outra eventualmente variavam bastante. Assustados com a possibilidade de não encontrar lugares suﬁciente nos aviões para que todos pudessem voltar e preocupados em gastar a menor quantidade possível de dinheiro, o grupo de amigos resolveu pedir sua ajuda."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1711",
        "saida": "Para cada consulta da entrada seu programa deve produzir apenas uma linha, contendo apenas um número inteiro, o comprimento do percurso mínimo que Dona Minhoca deve percorrer dentro da caverna para entrar e sair pelo salão indicado na consulta, sem dar marcha-a-ré. Se não for possível para Dona Minhoca entrar e sair sem dar marcha-a-ré, a linha deve conter o valor −1.",
        "entrada": "A primeira linha contém dois inteiros S (2 ≤ S ≤ 104 ) e T (1 ≤ T ≤ 2S) representando respectivamente o número de salões e o número de túneis da caverna. Os salões são identificados por inteiros de 1 a S. Cada uma das T linhas seguintes descreve um túnel e contém três inteiros A, B e C (1 ≤ A < B ≤ S; 1 ≤ C ≤ 100), onde A e B representam os salões ligados pelo túnel, e C representa o comprimento do túnel. Um salão é ligado por túneis a no máximo outros 100 salões e cada dois salões são ligados por no máximo um túnel. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 100), que indica o número de consultas. Cada uma das Q linhas seguintes descreve uma consulta, e contém dois inteiros X (1 ≤ X ≤ S) e M (1 ≤ M ≤ 105 ), que indicam respectivamente o salão pelo qual Dona Minhoca quer entrar e o comprimento de Dona Minhoca.",
        "titulo": "Dona Minhoca",
        "descricao": "Dona Minhoca fica furiosa quando ouve as pessoas dizerem que minhocas são bichos palíndromes, nos quais não é possível distinguir a cabeça do rabo. Que infâmia! Dona Minhoca vive em uma linda caverna, composta de salões e túneis. Cada túnel liga dois salões distintos e pode ser usado nas duas direções. Um “ciclo” na caverna é uma sequência de salões s1, s2, . . . , sn, sn+1 = s1 , tais que s i ≠ si+1 e (si, si+1) é um túnel, para 1 ≤ i ≤ n. A caverna de Dona Minhoca pode conter ciclos, mas cada salão faz parte de no máximo um ciclo da caverna. Os túneis e salões são estreitos, de forma que se uma parte do corpo de Dona Minhoca ocupa um túnel ou salão, não há espaço para Dona Minhoca entrar novamente por esse túnel ou salão. Alguns salões da caverna têm acesso a partir da superfície. Dona Minhoca tem um mapa que descreve a caverna, informando para cada túnel o seu comprimento e quais dois salões o túnel liga. Dona Minhoca também é vaidosa e conhece o seu próprio comprimento. Dona Minhoca quer saber, para os salões que têm acesso à superfície, se é possível entrar na caverna pelo salão, percorrer a menor distância possível dentro da caverna, e sair novamente pelo mesmo salão que entrou, sempre andando para a frente, sem nunca dar marcha-a-ré. Você pode ajudá-la?"
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1706",
        "saida": "Para cada caso você deve imprimir Y se for possível o festival acontecer ou N caso contrário.",
        "entrada": "Terão diversos casos testes. Cada caso teste contém dois inteiros: N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 4000). A próxima linha contém N letras, indicando o som inicial da i-ésima torre. As próximas M linhas, contém dois inteiros a (1 ≤ a) e b (b ≤ N e a != b ), indicando que existe uma ponte conectando a torre a e a torre b. A entrada termina com o final do arquivo.",
        "titulo": "Pontes Mágicas",
        "descricao": "Como acontece em todo réveillon, o reino Doce organizará uma incrível festa da virada. A princesa Bubblegum (PB) pediu para construir diversas torres musicais, com pontes conectando essas. Uma torre musical é uma nova ideia de PB e funciona assim: cada torre pode tocar duas notas musicais A e B. Elas começam com uma nota aleatória (A ou B) e o objetivo é fazer todas as torres tocarem a nota A. Aí que as pontes entram, se você tocar a ponte com uma varinha doce mágica, as notas das duas torres magicais conectadas por essa ponte mudarão. Agora PB não sabe se é possível organizar o festival cumprindo tal objetivo. Ela deu aos heróis Finn e Jake o mapa com as torres musicais, as conexões das pontes e o som inicial de cada torre e perguntou a eles se seria possível organizar tal festival. Como Finn e Jake não sabem muito sobre ciência, eles pediram para você resolver essa tarefa."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1499",
        "saida": "Cada caso de teste de entrada imprima uma linha com um número racional representando o tamanho esperado do sistema viário, após a dois reinos se unirem, considerando que todos os caminhos que ligam eles são igualmente possíveis de serem construídos. O resultado deve ser emitido como um número racional com exatamente três dígitos após o decimal ponto, arredondado, caso necessário.",
        "entrada": "A entrada contém vários casos de testes e termina com EOF. A primeira linha de cada caso de teste contém dois números inteiros N e Q e representam o número de cidades em cada um dos dois reinos (1 ≤ N, Q ≤ 4 × 104). As cidades em Nlogônia são identificadas com diferentes números inteiros de 1 a N, enquanto as cidades Quadradônia são identificados com diferentes números inteiros de 1 a P. Cada um dos seguinte N - 1 linhas descreve uma estrada em Nlogônia com dois números inteiros distintas A e B, indicando que a estrada liga A cidade com a cidade B (1 ≤ A, B ≤ N). Cada uma das próximas Q-1 linhas descreve uma estrada em Quadradônia com dois inteiros distintos C e D, indicando que a estrada liga cidade C com a cidade D (1 ≤ C, D ≤ Q). O sistema viário de cada reino é construído de tal forma que existe exatamente um caminho apenas entre cada par de cidades do reino.",
        "titulo": "Junte Dois Reinos",
        "descricao": "Os reinos de Nlogônia e Quadradônia travaram uma longa e terrível guerra que os historiadores a chamaram de Almost Completely Meaningles (ACM), que significa quase completamente sem sentido porque ninguém agora consegue se lembrar por que tudo começou. Quando a guerra ACM finalmente terminou, os dois reinos decidiram reforçar seus laços a fim para evitar mais derramamento de sangue, e por esta razão eles consultaram o Consórcio Internacional para a Prevenção de Conflitos (ICPC). O ICPC recomenda a construção de uma única estrada para ligar uma cidade da Nlogônia com uma cidade em Quadradônia, permitindo, assim, o intercâmbio comercial e cultural entre o dois países. Nlogônia e Quadradônia tem N e Q cidades respectivamente. O sistema viário de cada reino consiste de um conjunto de estradas bidirecionais que unem pares de diferentes cidades no mesmo reino, de tal forma que há um caminho único (ou seja, uma seqüência de estradas consecutivas) que se pode tomar para ir de qualquer cidade de um reino para qualquer outra cidade no mesmo reino. O \"tamanho\" de um tal sistema de estradas é definido como o número máximo de caminhos que se deve tomar a fim de viajar entre quaisquer pares de cidades . Uma vez que o ICPC não especificou quais duas cidades deve ser conectadas pela nova estrada que une os dois reinos, os cidadãos estão preocupados que o tamanho do sistema viário combinado pode ser demasiado grande. Para evitar uma segunda guerra ACM, você gostaria de convencê-los de que este não é o caso e, para isso, você precisa calcular o tamanho esperado deste sistema de estradas, resultando assumindo que todos os caminhos possíveis entre os dois reinos são igualmente propensos de serem construídos."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1461",
        "saida": "Para cada caso de teste, imprima o número de caminhos simétricos ótimos. Imprima o resto da divisão do resultado por 1.000.000.009 .",
        "entrada": "Haverá no máximo 25 casos de teste. Cada caso de teste começa com um inteiro n (2 ≤ n ≤ 100). As próximas n linhas contém n dígitos cada, diferentes de zero (isto é, um número em 1, 2, 3, ..., 9). Esses n2 inteiros são os dígitos na grade. A entrada termina com um caso de teste onde n = 0, que não deve ser processado.",
        "titulo": "Caminhos Simétricos Ótimos",
        "descricao": "Você tem uma grade de n linhas e n colunas. Cada quadrado da grade contém um dígito, diferente de zero. Você deve ir do quadrado mais acima e mais à esquerda para o quadrado mais abaixo e mais à direita da grade. A cada passo, você pode se mover para o quadrado adjacente que está à esquerda, à direita, acima ou abaixo (você não pode se mover pelas diagonais). Além disso, você não pode passar por um quadrado mais de uma vez. Há ainda uma outra regra: seu caminho deve ser simétrico em relação à linha que conecta o quadrado mais abaixo e mais à esquerda ao quadrado mais acima e mais à direita da grade. A figura abaixo exemplifica um caminho simétrico em uma grade 6 x 6. Sua tarefa é descobrir, dentre todos os caminhos válidos, quantos deles têm a soma mínima de dígitos nos quadrados percorridos."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1298",
        "saida": "Para cada caso de teste imprima uma linha com um número inteiro que representa o número mínimo de interruptores de barreira necessárias para reconfigurar o tanque conforme especificado.",
        "entrada": "Cada caso de teste consiste de diversas linhas. A primeira linha contém um inteiro N que indica que a lagoa tem 2N linhas 2N + 1 colunas ( 1 ≤ N ≤ 300). Cada uma das próximas 2N - 1 linhas contém uma string de N caracteres descrevendo a orientação das barreiras. Na enésima (i-th) linha, o enésimo (j-th) caractere indicata a orientação da barreira cujo ponto central tem coordenadas (i, 2j - 1) se i for ímpar, ou (i, 2j) caso i for par, para i = 1, 2,..., 2N - 1 e j = 1, 2,..., N. O caracter é a letra maiúscula 'V' se a orientação for vertical ou a letra maiúscula 'H' se ela for horizontal.",
        "titulo": "Corrija o Labirinto",
        "descricao": "A fazenda de camarão usa um lago retangular construído como uma grade com linhas 2N e colunas 2N + 1 de células quadradas, para um dado inteiro N. Cada lado da célula tem um metro de comprimento. A lagoa tem exatamente (2N-1) x N barreiras de dois metros de comprimento, usado para isolar temporariamente seções menores dentro da lagoa para criação de diferentes tipos de camarão. As barreiras têm os seus pontos médios fixados precisamente nas coordenadas inteiro (a, b), para todo 0 <a <2N e 0 <b <2N + 1, onde a e b são ímpares, ou pares. ​​Cada barreira pode ser girada em torno do seu ponto central para alterar a configuração do tanque, no entanto, sendo girada, uma barreira muda entre apenas duas posições possíveis, sempre sendo estas posições paralelas aos lados da lagoa, vertical ou horizontal. A parte esquerda da figura abaixo mostra uma configuração de tanque, com N = 3. ​ No final de cada temporada a lagoa é fechada para manutenção e limpeza. Em seguida, deve ser reconfigurada para que uma máquina especial possa varrer o chão da lagoa. A máquina inicia o seu trabalho na célula superior esquerda, e precisa passar por todas as células exatamente uma vez, terminando na célula inferior esquerda. A parte direita da figura mostra uma reconfiguração tal, onde seis barreiras foram trocados. Para este exemplo, porém, quatro chaves de barreira seriam suficientes. Você deve escrever um programa que, dada uma configuração de lagoa, determina o número mínimo de interruptores de barreira necessários para reconfigurar a lagoa, conforme especificado acima. Existe sempre, pelo menos, uma maneira possível para reconfigurar o tanque de acordo com a especificação."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1081",
        "saida": "Para cada caso de entrada, deve ser apresentada uma saída que representa a busca em profundidade de todos os nodos,  respeitando a hierarquia e profundidade de cada um deles. O símbolo b  representam um espaço em branco. Veja o exemplo abaixo para ilustrar: bb0-2 pathR(G,2) bbbb2-1 pathR(G,1) bbbb2-4 pathR(G,4) bbbbbb4-1 E assim sucessivamente... Obs.: Há uma linha em branco depois de cada segmento impresso do grafo, inclusive após o último segmento.",
        "entrada": "A entrada será um arquivo contendo vários casos de teste. A primeira linha do arquivo de entrada contém um inteiro N que indica a quantidade de casos de teste que vem a seguir. Cada um dos N casos de teste contém, na primeira linha, duas informações: V (1 ≤ V ≤ 20) e E (1 ≤ E ≤ 20) que são, respectivamente, a quantidade de Vértices e de Arestas (Edges) do grafo. Seguem  E linhas contendo informações sobre cada uma das arestas do grafo.",
        "titulo": "DFSr - Hierarquia de Profundidade",
        "descricao": "A rotina PathR é bem conhecida em grafos. É também chamada de dfs ou dfsr. Trata-se de uma busca em profundidade dos nodos do grafo, utilizando backtracking. A tarefa aqui é, dado o grafo de entrada, simplesmente gerar o desenho da hierarquia dos nodos pesquisados. Para isso, é apresentada a rotina PathR abaixo, como apoio."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1894",
        "saida": "A saída esperada consiste em duas linhas. A primeira linha contém o custo mínimo da árvore. A segunda linha contém a sequência genética do indivíduo de índice (N*2)-1, que sempre é a raiz da árvore.",
        "entrada": "A entrada consiste de múltiplas linhas. A primeira linha contém 2 inteiros N (3 ≤ N ≤ 10000) e L (1 ≤ L ≤ 1000), representando o número de espécies e o comprimento dos códigos. As próximas N linhas contêm as sequências genéticas dos indivíduos das folhas (1, ..., N). As próximas (N-1)*2 linhas contêm dois inteiros A (1 ≤ A ≤ (N*2)-1) e B (1 ≤ B ≤ (N*2)-1) representando que existe uma ligação entre o individuo de índice A e o individuo de índice B.",
        "titulo": "Filogenia",
        "descricao": "Bino é um naturalista, e viajou para o planeta Binox com o objetivo de estudar a filogenia dos seres desse planeta. Bino conseguiu desenhar as árvores filogenéticas dos seres do planeta Binox, porém ele precisa da sua ajuda para determinar a menor quantidade possível de mudanças evolutivas que ocorreram entre os decendentes diretos na árvore. Computacionalmente, as árvores filogenéticas são representadas por árvores binárias, em que suas folhas representam indivíduos conhecidos e seus nós internos e a raiz representam ancestrais hipotéticos, que geralmente não se possui informações genéticas precisas sobre. Com isso, Bino vai fornecer uma topologia de árvore e o código genético dos indivíduos representados pelas folhas. O código genético dos seres de Binox é representado por uma sequência de letras minúsculas do alfabeto. Como Bino irá fornecer apenas os códigos genéticos dos indivíduos representados pelas folhas, a sua tarefa será inferir os códigos genéticos dos indivíduos representados pelos outros nós. Sua inferência terá que minimizar a quantidade de mudanças entre os códigos dos indivíduos diretamente ligados na árvore. As figuras a seguir apresentam a configuração inicial e duas possíveis configurações finais para a árvore do primeiro caso de teste: Para calcular o custo total da árvore depois de inferida, basta comparar todas as posições do código genético de indivíduos ligados diretamente. Para cada diferença encontrada, o custo é incrementado em um. Por exemplo, para a árvore resposta do primeiro caso de teste:     Custo inicia em 0     Ligação entre 1 (\"ac\") e 4 (\"aa\"): 'c' ≠ 'a' (Custo + 1).     Ligação entre 2 (\"ba\") e 4 (\"aa\"): 'b' ≠ 'a' (Custo + 1).     Ligação entre 3 (\"ab\") e 5 (\"aa\"): 'b' ≠ 'a' (Custo + 1).     Ligação entre 4 (\"aa\") e 5 (\"aa\"): \"aa\" = \"aa\".     Custo total 3. As duas árvores inferidas tem custo total 3. Porém, Bino quer a árvore com menor custo possível e que a raiz tenha o menor valor lexicográfico possível para esse custo. Logo, Bino escolherá a árvore com raiz de código \"aa\". É garantido que todos as indivíduos folhas não tenham filhos e que todos os demais tenham exatamente dois filhos."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1950",
        "saida": "Imprima uma linha consistindo de um único valor representando a probabilidade de o robô ter conseguido sair do labirinto em no máximo T2 unidades de tempo contando a partir do início do experimento. A probabilidade deve ser exibida como uma porcentagem com duas casas decimais após o ponto decimal.",
        "entrada": "A primeira linha da entrada consiste de quatro inteiros, N, M, T1 e T2 (1 ≤ N, M ≤ 30, 1 ≤ T1 < T2 ≤ 105), os quais representam respectivamente o número de linhas e o número de colunas do grid e os tempos programados no sistema conforme já explanado. As próximas N linhas descrevem a configuração inicial do labirinto e contêm exatamente M caracteres cada, sendo o j-ésimo (1 ≤ j ≤ M) caractere da i-ésima (1 ≤ i ≤ N) linha ., # ou R se a posição (i, j) do grid começou, respectivamente, livre, bloqueada ou contendo o robô. A linha seguinte da entrada consiste de um único inteiro K (0 ≤ K ≤ N × M), o qual representa o número de posições livres que foram bloqueadas T1 unidades de tempo após o início do experimento, e as K últimas linhas da entrada descrevem essas posições, cada uma consistindo de dois inteiros i e j (1 ≤ i ≤ N, 1 ≤ j ≤ M) para designar a posição (i, j).",
        "titulo": "Spöhndriger",
        "descricao": "— Taca-lhe pau, Marco véio! Estas palavras ficaram gravadas para sempre no coração do Dr. Marco Spohn, e é por isso que ele faz tudo com excelência e dedicação. Ultimamente, ele tem trabalhado num sistema operacional que gerencia um robô e um labirinto e que é capaz de fazer o robô encontrar a saída do labirinto. Por enquanto, o projeto está num estágio muito inicial, e na atual versão o robô apenas se move aleatoriamente no labirinto. O labirinto é uma caixa eletrônica cujas posições formam um grid N × M. Cada posição do grid pode estar bloqueada, quando uma parede de borracha está erigida na posição do fundo ao topo da caixa, ou livre. Assumindo que a indexação das linhas e colunas do grid começa em 1, a saída do labirinto se encontra sempre na posição (N, M) e nunca está bloqueada, sendo a única posição não coberta pela tampa da caixa. O robô do Dr. Spohn é esperto e consegue, através de suas câmeras e sensores, saber quais das posições adjacentes à posição em que se encontra estão livres ou bloqueadas. Destarte, a próxima posição para a qual vai é sempre tomada com distribuição uniforme dentre todas as posições livres adjacentes. As adjacências são sempre consideradas apenas nos sentidos horizontal e vertical. Se há posições livres adjacentes, o movimento da posição corrente para a próxima custa uma unidade de tempo constante. Do contrário, o robô fica parado. Ontem o Dr. Spohn fez um experimento interessante. Primeiramente, ele configurou o labirinto deixando algumas posições livres e as outras bloqueadas. Em seguida, pôs o robô numa posição livre qualquer do labirinto, tampou a caixa, programou dois tempos T1 e T2 (T1 < T2) e iniciou o sistema. Uma vez iniciado o sistema, o robô, sem poder ser visto pelo Dr. Spohn, começou a se mover dentro do labirinto conforme descrito acima, até não conseguir mais se mover, até chegar na posição (N, M), ou até o tempo T2 ser excedido e o experimento ser abortado. Após T1 unidades de tempo a partir do início do experimento, o sistema sorteou K posições livres em que não estava o robô e as bloqueou, reportando num visor ao Dr. Spohn quais posições foram bloqueadas. Dados os tempos T1 e T2, a configuração inicial do labirinto e as K posições livres que foram bloqueadas após T1 unidades de tempo, calcule a probabilidade de o robô ter conseguido sair do labirinto em no máximo T2 unidades de tempo contando a partir do início do experimento."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "2098",
        "saida": "Imprimir uma única linha contendo um número inteiro que representa a quantidade máxima de tempo, em segundos, que se pode recolher o tesouro, de modo a ser capaz de retornar para o barco sem ser atingido pela névoa mortal. Imprimir o número -1 se for impossível voltar para o barco, mesmo quando se inicia o caminho de volta assim que o tesouro é descoberto.",
        "entrada": "A primeira linha contém dois números inteiros R e C, representado, respectivamente, o número de linhas e colunas da grade que representa a ilha, constituído por pelo menos duas células (1 ≤ R, C e R ≤ 500 × C ≥ 2). Cada uma das seguintes R linhas contém C valores. No i-ésimo destas R linhas, o valor j-ésimo é um número inteiro Hij que representa a altura da célula da linha i e coluna j (1 ≤ Hij ≤ 106 para i = 1, ..., R e j = 1, ..., C).",
        "titulo": "Ilha do Tesouro",
        "descricao": "Encontrar os tesouros escondidos há séculos pelos piratas das ilhas do Caribe não é tarefa fácil, mais difícil ainda é viver para contar a história. Isto porque, como todo mundo sabe, os piratas tinham poderes sobrenaturais que eles usavam para amaldiçoar a pessoa que levou o seu tesouro sem autorização. Uma maldição muito comum entre os mais poderosos dos piratas, e para a qual é sempre uma boa ideia estar preparado, é hoje conhecida como a névoa mortal. Sempre que o tesouro de um pirata for encontrado, esta maldição vai fazer com que a névoa venenosa suba do chão até que toda a ilha fique coberta por ela. Qualquer criatura viva que é tocado pela névoa vai morrer instantaneamente, algo especialmente indesejável para quem acabou de encontrar um tesouro. A única maneira de se salvar é, em seguida, retornar para o seu barco, sempre passando por áreas que ainda não foram cobertas pela névoa, e, assim, fugir com a parte do tesouro que pode ter sido resgatada. Neste problema estamos interessados em saber qual é a quantidade máxima de tempo que uma pessoa pode recolher o tesouro e ser capaz de voltar para o barco vivo. Para simplificar o problema, vamos considerar que uma ilha pode ser representada por uma grade com R linhas e C colunas, em que a célula na linha i-th e coluna j-th tem altura Hij acima do nível do mar. Além disso, vamos supor que o tesouro está sempre escondido na célula de linha 1 e coluna 1, porque esta é a mais distante do único lugar onde o barco pode ancorar, que é a célula da linha R e coluna C. A névoa mortal aparece no nível do mar no mesmo instante que o tesouro é encontrado, em seguida, levanta-se em toda a ilha, a uma taxa de uma unidade de altura por segundo, para que depois de t segundos não se pode estar em qualquer célula de altura menor ou igual a t. A fim de voltar para o barco, você pode ir de uma célula para outra somente se elas compartilham um lado, de modo que, se você estiver em uma determinada célula você só pode mover horizontalmente para a célula antes ou depois da mesma linha, ou verticalmente para a célula antes ou depois, na mesma coluna, mas você não pode se mover na diagonal ou cruzar as fronteiras da ilha. Cada um desses movimentos de uma célula para outra leva exatamente um segundo."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1466",
        "saida": "Para cada caso de teste de entrada você deverá imprimir a mensagem \"Case n:\", onde n indica o número do caso de teste seguido por uma linha contendo a listagem por nível dos nodos da árvore, conforme o exemplo abaixo. Obs: Não deve haver espaço em branco após o último item de cada linha e há uma linha em branco após cada caso de teste, inclusive após o último. A árvore resultante não terá nodos repetidos e também não terá mais do que 500 níveis.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro C (C ≤ 1000), indicando o número de casos de teste que virão a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um inteiro N (1 ≤ N ≤ 500) que indica a quantidade de números que deve compor cada árvore e a segunda linha contém N inteiros distintos e não negativos, separados por um espaço em branco.",
        "titulo": "Percurso em Árvore por Nível",
        "descricao": "Em uma árvore binária, o percurso por nível é um percurso denominado breadth first search (BFS) ou em português, busca em largura, a qual seria não-recursiva por natureza. Este percurso utiliza uma fila ao invés de pilha para armazenar os próximos 2 nodos que devem ser pesquisados (filho à esquerda e à direita). Esta é a razão pela qual você deve percorrer os nodos na ordem FIFO ao invés da ordem LIFO, obtendo desta forma a recursão. Portanto nossa tarefa aqui, após algumas operações de inserção sobre uma árvore binária de busca (pesquisa), é imprimir o percurso por nível sobre estes nodos. Por exemplo, uma entrada com a sequência de valores inteiros: 8 3 10 14 6 4 13 7 1 resultará na seguinte árvore: Com a saída de uma listagem por nível: 8 3 10 1 6 14 4 7 13."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1479",
        "saida": "Para cada caso de teste haverá um número não definido de linhas de saída. Sempre que, na entrada, o general requisitar a distância mínima entre a base da operação e um ponto estratégico (letra P), tal distância deve ser impressa em uma linha única. Caso não seja possível chegar a tal ponto estratégico, deve-se imprimir -1. Deve haver uma linha em branco após cada caso de teste.",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste inicia com dois inteiros, N e M (2 ≤ N ≤ 1000 e 1 ≤ M ≤ 10000), representando, respectivamente, o número de pontos estratégicos e o número de rotas que interligam dois pontos estratégicos. Após, haverão M linhas, cada uma com três inteiros U, V e W (1 ≤ U, V ≤ N e 1 ≤ W ≤ 100) cada, representando que há uma rota que interliga o ponto U ao ponto V, em direção única, com distância W. Haverá então um inteiro Q (1 ≤ Q ≤ 1000), que representa o número de consultas ou atualizações que serão feitas sobre essas rotas. Nas próximas Q linhas haverá uma letra e um determinado número de inteiros. Se a letra digitada for a letra R, haverá em seguida dois inteiros U e V (1 ≤ U, V ≤ N), indicando que a rota que antes interligava o ponto U até o ponto V foi bombardeada. Caso a letra digitada for a letra I, haverá em seguida três inteiros U, V e W (1 ≤ U, V ≤ N e 1 ≤ W ≤ 100), indicando que foi encontrada uma nova rota que interliga o ponto U até o ponto V, com distância W. E caso a letra digitada for a letra P, haverá em seguida um inteiro V (1 ≤ V ≤ N), e você deve informar ao general qual a distância mínima entre a base da operação e o ponto estratégico V. A entrada termina quando N = M = 0.",
        "titulo": "Ajude seu General",
        "descricao": "Um bom general de guerra deve tomar decisões rápidas, e ao mesmo tempo ser um bom estrategista. Uma das funções do general é delegar soldados a diversos pontos estratégicos, de modo que o inimigo seja supreendido e derrotado. Há diversos pontos estratégicos no campo de batalha, assim como diversas rotas que interligam esses pontos. O seu campo está, porém, sendo bombardeado, e essas rotas não são tão seguras mais. Uma vez que uma bomba caia em uma rota, tal terreno se torna irregular e a sua travessia se torna impossível. Para contornar tal problema, o general delegou uma nova tarefa a alguns soldados: encontrar novas rotas. O general pediu sua ajuda então para calcular qual o caminho mais curto entre a base da operação e os pontos estratégicos. Você será informado sobre o estado inicial do campo de batalha, com N pontos estratégicos (sendo o ponto 1 a base da operação) e M rotas. Conforme as bombas inutilizam algumas rotas, e outras rotas vão sendo encontradas pelos soldados, você deve atualizar seu cálculo para que o general possa fazer bom uso de tais informações. Boa sorte, o país depende de você."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1782",
        "saida": "Para cada caso imprima “Caso #X:”, onde X é o número do caso atual, iniciando em 1, seguido pelas respostas das Q consultas desse caso de teste, precedidas por um espaço.",
        "entrada": "A primeira linha da entrada contém um inteiro T (1 ≤ T ≤ 50), o número de casos de teste. A primeira linha de cada caso de teste contém N (1 ≤ N ≤ 10⁵), o número de nós que o grafo de Guga possui. Cada uma das N-1 linhas possui três inteiros A (1 ≤ A ≤ N), B (1 ≤ B ≤ N) e C (1 ≤ C ≤ 10⁶), indicando que existe uma aresta do nó A para o nó B com peso C. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 10⁴), o número de partidas que Guga e André irão jogar. A próxima linha possui Q inteiros Xi (1 ≤ Xi ≤ 10⁶), o maior peso permitido no caminho, como explicado acima.",
        "titulo": "Honorável Presente",
        "descricao": "Guga ganhou um grafo conexo de aniversário, com N nós e N-1 arestas bidirecionais. Cada aresta conecta dois nós e possui um peso. Quando André descobriu a existência do presente de Guga pensou na seguinte brincadeira: Dado um número inteiro X, quantos pares (A,B) (A ≤ B) existem tal que o menor caminho do nó A para o nó B possui todas as arestas com peso menor ou igual a X? Agora Guga e André estão precisando de um programa que responda várias dessas perguntas, para que assim eles possam brincar infinitamente e saber se acertaram a resposta ou não."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1362",
        "saida": "Para cada caso teste, imprima uma linha contendo YES se existe pelo menos uma maneira de distribuir as camisetas de tal forma que todo voluntário tenha uma camiseta que lhe serve, ou NO caso contrário.",
        "entrada": "A primeira linha da entrada contém o número de casos de teste. Para cada caso de teste, há uma linha contendo os números N e M. O número N é múltiplo de seis, 1 ≤ N ≤ 36, e indica o número total de camisetas disponíveis. O número M, 1 ≤ M ≤ 30, indica o número de voluntários, com N ≥ M. As próximas M linhas descrevem os voluntários, um por linha. Cada linha contém dois tamanhos de camiseta possíveis (XXL, XL, L, M, S ou XS) separados por um espaço, indicando quais tamanhos servem para o voluntário.",
        "titulo": "Minha Camiseta Me Serve",
        "descricao": "Nosso amigo Victor é instrutor em um programa ambiental voluntário. O chefe de Victor pediu para ele distribuir N camisetas para M voluntários (N é múltiplo de seis, e N ≥ M). Cada voluntário deve receber exatamente uma camiseta (se N ≠ M, algumas camisetas podem sobrar). Há o mesmo número de camisetas disponíveis para cada tamanho de camiseta possível: XXL, XL, L, M, S e XS (siglas em inglês para P, M, G, etc.). Victor tem um pequeno problema: apenas dois tamanhos de camisetas servem para cada voluntário. Você deve escrever um programa que decide se Victor pode distribuir as camisetas de tal forma que todo voluntário tenha uma camiseta que lhe serve."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1698",
        "saida": "Para cada caso de teste, imprima dois números A e B (A < B) indicando os índices das duas estações que deverão ser conectadas pelo sistema de teletransporte para que o número de configurações possíveis seja o maior possível. Em caso de múltiplas respostas possíveis, imprima a lexicograficamente menor.",
        "entrada": "A entrada consiste de vários casos de teste e termina com final de arquivo (EOF). Na primeira linha de cada caso de teste temos dois inteiros N e M (1 < N <= 12 e N - 1 <= M < N*(N - 1)/2), as próximas M linhas contém inteiros A e B (0 <= A, B <= N - 1), significando que as estações A e B estavam conectadas por uma rota antes do terremoto.",
        "titulo": "Metrô Brasileiro",
        "descricao": "Um grande terremoto destruiu todo o sistema de metrô de São Paulo, porém o Brasil irá ser o anfitrião da Copa do Mundo, de forma que o Governo resolveu tomar duas medidas: A primeira é comprar um sistema de teletransporte entre duas estações de metrô, a segunda é, com a intenção de evitar custos desnecessários, reconstruir algumas rotas de metrô de forma que exista exatamente um caminho entre qualquer par de estações de metrô. Uma configuração é um possível sistema de metrô resultante após as medidas do Governo. Dado o antigo sistema de metrô, determine qual o par de cidades que, se conectadas pelo sistema de teletransporte, geram o número máximo de possíveis configurações."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1751",
        "saida": "Apresente uma linha com um inteiro que representa o montante total mínimo de energia necessária para visitar todos os seus amigos a partir do topo da montanha.",
        "entrada": "A primeira linha contém dois inteiros N e F (1 ≤ F <N ≤ 105), representando, respectivamente, o número de pontos de referência e o número de seus amigos que estão subindo a montanha. Referenciais são identificados com números inteiros distintos entre 1 e N, sendo 1 o topo da montanha, onde você está inicialmente. Cada uma das próximas N - 1 linhas descreve uma diferente trilha com três números inteiros A, B e C, o que indica que existe uma trilha de A a B, que vai para baixo e requer uma quantidade de energia C para ser escalado (1 ≤ A ≤ N , 2 ≤ B ≤ N, A = B e 1 ≤ C ≤ 100). A próxima linha contém F diferentes inteiros L1, L2,. . . , LF (2 ≤ Li ≤ N para i = 1, 2,.,.,. F), representando os marcos onde seus amigos estão. Você pode assumir que as trilhas entre os marcos são tais que existe exatamente uma rota que vai para baixo a partir do topo da montanha para cada outro referencial.",
        "titulo": "Alpinista Intrépido",
        "descricao": "Quem iria adivinhar? Você escalou a montanha mais alta de sua cidade. Você está tão animado sobre isso que você precisa dizer a todos os seus amigos, e você decidiu começar com aqueles que estão a tentar estar exatamente onde você está neste exato momento. A montanha tem N marcos, e um deles é o topo da montanha, onde você está agora. Cada um de seus amigos que está escalando a montanha está em algum outro local de referência, e você pretende visitar todos eles. Existem trilhas que ligam os pares de pontos de referência, de tal forma que existe exatamente um percurso (isto é, uma sequência de trilhas consecutivas) que vai para baixo a partir do topo da montanha para cada outro ponto de referêmcia. Para visitar dois amigos em duas referências diferentes, você pode ter que descer em algumas trilhas, subir em outras, e descer outras novamente. Descer a montanha é \"fácil\", já que não consome muito sua energia quando você desce por uma trilha. Mas cada vez que você subir uma trilha, você consome uma certa quantidade de energia. Depois de visitar todos os seus amigos, você pode apenas sentar e descansar. Por exemplo, considere a montanha na imagem abaixo, que tem N = 6 pontos de referência. Se seus amigos estão em raferenciais 5 e 2, você pode visitar tanto se você seguir a seqüência de referências 1 ↓ 2 ↑ 1 ↓ 3 ↓ 5, onde a ↓ b significa que você desce uma trilha de uma referência a até uma referência b, e a ↑ b significa que você subir uma trilha de uma referência a até uma referência b. Outra sequência possível é 1 ↓ 3 ↓ 5 ↑ 3 ↑ 1 ↓ 2. Dadas as trilhas entre os pontos de referência, a energia necessária para escalá-los, e os pontos de referência onde seus amigos estão, calcular o montante total mínimo de energia necessária para visitar todos os seus amigos a partir do topo da montanha."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1952",
        "saida": "Imprima uma linha contendo um único inteiro, o qual represente o número mínimo de movimentos necessários para um cavalo ir da posição (i1, j1, k1) à posição (i2, j2, k2).",
        "entrada": "A primeira linha da entrada contém unicamente os inteiros N, M e L (8 ≤ N, M ≤ 100, 3 ≤ L ≤ 100). A segunda linha contém uma tripla de coordenadas (i1, j1, k1), e a terceira linha contém uma tripla de coordenadas (i2, j2, k2) (1 ≤ i1, i2 ≤ N, 1 ≤ j1, j2 ≤ M, 1 ≤ k1, k2 ≤ L).",
        "titulo": "O Cavalo no Xadrez 3D",
        "descricao": "Caso você ainda não saiba, o estudante Alesom Zorzi, um dos nossos heróis do AKM (time da UFFS que fez 6 balões na Primeira Fase da Maratona de Programação), é enxadrista, tendo inclusive conquistado algumas medalhas em torneios importantes. Das peças do xadrez, uma das peças mais interessantes é o cavalo, a qual pode pular de uma casa de coordenadas (i1, j1) para uma de coordenadas (i2, j2) se e somente se {|i1 - i2|, |j1 - j2|} = {1, 2}. Inspirado na série Star Trek, Alesom desenvolveu sua própria variante do Xadrez 3D, na qual o jogo é composto não de 1, mas de L tabuleiros de dimensões N × M, cada um num nível numerado de 1 a L. A propósito, as linhas de cada nível são numeradas de 1 a N, e as colunas, de 1 a M, de modo que cada posição do jogo pode ser identificado por uma tripla de coordenadas (i, j, k), sendo i o índice da linha, j o índice da coluna e k o índice do nível. Um cavalo nesta variante do Xadrez 3D pode pular de uma casa de coordenadas (i1, j1, k1) para uma de coordenadas (i2, j2, k2) se e somente se {|i1 - i2|, |j1 - j2|, |k1 - k2|} = {0, 1, 2}. A figura ilustra um cavalo na posição (5, 5, 1) de um jogo com 3 níveis de dimensões 8 × 8, destacando suas posições adjacentes."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1692",
        "saida": "Imprimir se existe, o número máximo de servidores infectados. Caso contrário, você deve imprimir \"Impossible Revenge!\".",
        "entrada": "Existem vários testes, a primeira linha de cada teste contém dois inteiros N e K --- Número de servidores na rede e o Kuro-number (2 ≤ K <N ≤ 1000). As próxima N - 1 linhas contém a descrição dos N - 1 fios dessa rede --- Cada linha contém um par (u, v) significa que há uma conexão entre o servidor u e o servidor v (1 ≤ u, v ≤ N).",
        "titulo": "Curo Ataque",
        "descricao": "Uma nova rede universitária é composta por N servidores distribuídos em todo o campus , cada par de servidor é ligado por um caminho único feito de fios e são N - 1 fios ao todo, mas o Departamento de Informática esqueceu de atribuir os servidores para o instituto de matemática. Um estudante de matemática preguiçoso, chamado Curo , está se sentindo ressentido, porque agora ele não pode executar seus programas em uma máquina poderosa. Então , ele decidiu implantar um vírus, feito por ele durante seu tempo livre, porque ele odeia seus cursos de matemática e prefere codificar algo mais divertido, ao invés de escrever números e símbolos intediantes. Curo quer infectar o número máximo de servidores e ter sua vingança contra o departamento de Informática. Ele preparou uma simulação do ataque, mas seu computador não é poderoso o suficiente para executá-lo . Assim, ele precisa de sua ajuda para esta tarefa, mas primeiro você tem que saber como o vírus funciona. Se o vírus infectar um servidor, os servidores adjacentes serão infectados também. Além disso, o programa tem uma variável pseudo-aleatória chamada Kuro-number. No final do processo de infecção, a maior distância entre dois servidores infectados deve ser o Kuro-number. Dada uma rede de computadores e um Kuro-number você deve obter, se existe, o número máximo de servidores infectados, caso contrário, você deve imprimir \"Impossible Revenge!\""
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "2002",
        "saida": "Para cada caso de teste, imprima o menor custo de mover Rogério até a Casa de Rogério",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros N (1 ≤ N ≤ 100) e M (1 ≤ M ≤ 100), representando o tamanho do tabuleiro. Em seguida, N linhas, cada uma com M inteiros, representando os valores das células do tabuleiro (o valor de cada célula pode variar de 1 até 1000000000000). A entrada termina com final de arquivo (EOF). E garantido que a resposta pode ser representada por um inteiro de 64 bits com sinal.",
        "titulo": "Casa de Rogério",
        "descricao": "Rogério é um menino bem esperto e malino. Ele gosta de usar seu tempo livre para criar jogos de tabuleiro. O último jogo criado por Rogério foi o \"Casa de Rogério\". Nesse jogo, o tabuleiro tem tamanho NxM. Cada célula do tabuleiro possui um valor inteiro. O Rogério (Personagem do jogo) começa na célula superior esquerda e a casa de Rogério na célula inferior direita. O objetivo do jogo é mover Rogério até a casa com menor custo possível. Cada rodada, você pode mover Rogério para uma das células adjacentes (não é permitido mover Rogério nas diagonais). O custo para mover Rogério de uma célula de valor X para uma célula de valor Y é definido pela função C(X,Y). C(X, Y) = min(X,Y) XOR (min(X,Y)+1) XOR ... XOR max(X,Y). Perceba que se X é igual a Y, C(X,Y) = X. XOR é a operação binária conhecida como \"ou exclusivo\". Para facilitar a entendimento da função C(X,Y), seu código em C++ está apresentado abaixo:"
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2081",
        "saida": "Para cada instância imprima uma linha contendo o número mínimo de movimentos que resolve o problema, ou \"impossivel\" se não for possível resolver o problema com no máximo 50 movimentos.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha da instância possui dois inteiros N e M (1 ≤ N, M ≤ 50), indicando o número de linhas dos mapas e o número de colunas dos mapas, respectivamente. Nas linhas seguintes são dados os dois mapas. Para cada mapa teremos N linhas com M caracteres. O caractere “.” indica uma posição livre; “#” indica uma posição cercada por paredes; “B” indica um buraco; “R” indica a posição inicial do robô e “F” indica a posição final do robô.",
        "titulo": "Sonhos, Acredite Neles!",
        "descricao": "Um dos mais importantes ativistas políticos do mundo foi o Dr. Martin Luther King Jr, cujo discurso mais conhecido foi “I have a dream”. Em 1964, ele recebeu o Nobel da Paz por seu empenho na luta pelo fim do preconceito racial nos Estados Unidos, e pela sua liderança nos movimentos não violentos. Pouco tempo depois de ter recebido o prêmio, Luther King foi assassinado momentos antes de uma marcha no Memphis. Além do empenho na luta política, Luther King gostava de jogar quebra-cabeça. Um dos jogos que ele adorava jogar é o seguinte: são dados dois mapas N-por-M, cada um com um robô. Cada mapa contém um ponto inicial e um final. Algumas “casas” do mapa são cercadas por paredes. Uma casa do mapa pode ser ou não um buraco. Um comando dado (Cima, Baixo, Esquerda, Direita) é executado ao mesmo tempo para ambos os mapas. Os robôs não atravessam as paredes e nem flutuam sobre os buracos. O objetivo é chegar com os dois robôs no ponto final ao mesmo tempo, em até 50 movimentos, se isso for possível. Neste problema, sua tarefa é dados dois mapas N-por-M, determinar o número mínimo de movimentos que resolve o problema."
    },
    {
        "nivel": "2",
        "assunto": "7",
        "numero": "1790",
        "saida": "Seu programa deve imprimir a quantidade de pontes que não estão contidas em qualquer ciclo.",
        "entrada": "A entrada termina em EOF. Para cada caso de teste, a primeira linha contém dois inteiros positivos C e P que representam respectivamente a quantidade de cidades (2 <= C <= 50) e a quantidade de pontes (1 <= P <= 1250). Seguem-se P linhas onde cada linha contém dois inteiros positivos X e Y (indexados a partir do 1) indicando que há uma ponte interligando as cidades X e Y.",
        "titulo": "Detectando Pontes",
        "descricao": "Pedrinho Ritchie mora em um país chamado Grafolândia. As cidades desse país estão interligadas através de pontes. Não existem cidades isoladas e nenhuma ponte é inserida mais de uma vez. Seu professor propôs um desafio: detectar a quantidade de pontes que não estão contidas em qualquer ciclo. Podemos dizer que um ciclo começa e termina na mesma cidade e nenhuma cidade se repete. Pedrinho gosta muito de desafios de programação, mas precisa de sua ajuda para resolver esse problema, será que você consegue ajudá-lo?"
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1082",
        "saida": "Para cada caso de teste da entrada, deve ser apresentada uma mensagem Case #n:, onde n indica o número do caso de teste (conforme exemplo abaixo). Segue a listagem dos vértices de cada segmento, um segmento por linha, separados por vírgula (inclusive com uma virgula no final da linha). Finalizando o caso de teste, deve ser apresentada uma mensagem indicando a quantidade de componentes conexos do grafo (em inglês). Todo caso de teste deve ter uma linha em branco no final, inclusive o último caso de teste. Obs: os nodos devem sempre ser apresentados em ordem crescente e se há caminho de a até b significa que há caminho de b até a.",
        "entrada": "A primeira linha do arquivo de entrada contém um valor inteiro N que representa a quantidade de casos de teste que vem a seguir. Cada caso de teste contém dois valores V e E que são, respectivamente, a quantidade de Vértices e arestas (Edges) do grafo. Seguem E linhas na sequência, cada uma delas representando uma das arestas que ligam tais vértices. Cada vértice é representado por uma letra minúscula do alfabeto ('a'-'z'), ou seja, cada grafo pode ter no máximo 26 vértices. Cada grafo tem no mínimo 1 componente conexo. Obs: Os vértices de cada caso de teste sempre iniciam no 'a'. Isso significa que um caso de teste que tem 3 vértices, tem obrigatoriamente os vértices 'a', 'b' e 'c'.",
        "titulo": "Componentes Conexos",
        "descricao": "Com base nestas três definições: Grafo conexo: Um grafo G(V,A) é conexo se para cada par de nodos u e v existe um caminho entre u e v. Um grafo com apenas um componente é um grafo conexo. Grafo desconexo: Um grafo G(V,A) é desconexo se ele for formado por 2 ou mais componentes conexos. Componente conexo: Componentes conexos de um grafo são os subgrafos conexos deste grafo. O grafo a seguir possui 3 componentes conexos. O primeiro é formado pelos nodos a,b,c. O segundo é formado unicamente pelo nodo d e o terceiro componente é formado pelos nodos e,f. Com base nestes conceitos, onde cada entrada fornecida que tem a identificação de cada um dos vértices, arestas e as ligações entre os vértices através destas arestas,  liste cada um dos componentes conexos que existem no grafo, segundo a entrada fornecida."
    },
    {
        "nivel": "8",
        "assunto": "8",
        "numero": "1358",
        "saida": "Para cada caso de teste na entrada, seu programa deve produzir uma lista ordenada de cortes que devem ser feitos para separar o grande painel nos painéis menores desejados. Cada corte deve aparecer em uma linha diferente. Um corte é descrito em quatro inteiros X1, Y1, X2, Y2, onde (X1, Y1) e (X2, Y2) especificam as marcações do corte, sendo X1 < X2 e Y1 = Y2 para um corte horizontal, e X1 = X2 e Y1 < Y2 para um corte vertical. Como mais de um corte é possível, seu programa deve imprimir a lista em uma ordem particular. Se em algum ponto mais que um corte for possível, imprima primeiramente o corte com o X1 menor; se mais de um corte ainda for possível, imprima primeiro aquele com o Y1 menor. Imprima uma linha em branco após cada lista do caso de teste.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha do teste contém um inteiro N indicando o número de janelas e quadros de foto, sendo (2 ≤ N ≤ 2000). Cada uma das próximas N linhas contém quatro inteiros X1, Y1, X2, Y2, onde (X1, Y1) e (X2, Y2) representam as coordenadas esquerda-inferior e direita-superior marcadas por tio Jeff no grande painel de vidro (-5000 ≤ X1, Y1, X2, Y2 ≤ 5000; X1 < X2 e Y1 < Y2). Você deve assumir o seguinte caso de teste: Os retângulos marcados não se sobrepõem (mas pode haver interseções nos pontos as bordas) e dividem o grande painel de vidro em regiões retângulares, de modo a não haver desperdídio. Isso significa que as coordenadas esqueda-inferior e direita-superior do grande painel podem ser inferidas com as coordenadas dos triângulos marcados. É possível partir o o grande painel de vidro em retângulos menores atravéz de uma sequência de cortes de extremidade à extremidade. O fim da entrada é indicado por N = 0.",
        "titulo": "Cortando Extremidades",
        "descricao": "Tio Jeff é dono de uma loja de vidros, que vende painéis de vidros para janelas e quadros de foto. Como você provavelmente sabe, um painel de vidro pode ser cortado apenas de extremidade à extremidade em linha reta. A figura abaixo mostra como o painel de vidro pode ser cortado em três painéis menores. ​ (a) painel de vidro original              (b) primeiro corte                 (c) segundo corte                  Tio Jeff normalmente opera da seguinte forma. Ele primeiro coleta vários pedidos de pequenos painéis retangulares, para janelas ou quadros de foto. Ele então marca a posição de cada painel retangular em um grande painel retangular, de forma a que nenhum deles se sobreponha. Finalmente ele realiza uma sequência de cortes verticais e horizontais, sempre de extremidade à extremidade do painel, para produzir painéis para todos os clientes. Já que a última fase (a de cortar o grande painel em pedaços) é a parte mais chata que alguém possa jamais imaginar, tio Jeff está pedindo sua ajuda. Ele quer um programa no qual dado um grande painel retangular e as coordenadas esquerdo-inferior e direito-superior de cada retângulo marcado, determine a ordem no qual cada corte de extremidade à extremidade deve ser feito. Essa lista de cortes será dada a máquina que fará os entediantes cortes para ele!"
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "1370",
        "saida": "Para cada caso de teste, imprima uma linha contendo o comprimento da menor rota válida possível, arredondado para duas casas decimais.",
        "entrada": "A entrada é composta por vários casos de teste. A primeira linha de um caso de teste contém cinco números inteiros xi, yi, xf, yf e n, representando respectivamente as coordenadas do ponto de início (xi, yi), as coordenadas do ponto de chegada (xf, yf) e a quantidade de obstáculos (n ≤ 150). Cada uma das n linhas seguintes de um caso de teste contém quatro números inteiros x1, y1, x2 e y2 que descrevem as coordenadas dos dois extremos de um obstáculo. Considere que as coordenadas x e y de qualquer ponto satisfazem -5000 ≤ x, y ≤ 5000. O final da entrada é representado por uma linha contendo xi = yi = xf = yf = n = 0.",
        "titulo": "Regata de Cientistas",
        "descricao": "Todos os anos, desde 1996, cientistas da computação do mundo todo se encontram para a famosa Regata dos Cientistas. A competição consiste em uma corrida de barcos com obstáculos pelo oceano, onde o objetivo de cada equipe é, partindo de um ponto em comum, alcançar o ponto de chegada sem que nenhum obstáculo seja tocado ou transpassado. Uma equipe que toca ou transpassa um obstáculo é automaticamente desclassificada. A equipe vencedora é aquela que primeiro atinge o ponto de chegada (o ponto de chegada é distinto do ponto de início). Você foi contratado pela equipe brasileira para desenvolver um programa que calcule o comprimento da menor rota válida possível do ponto de partida ao ponto de chegada. O oceano é considerado um plano infinito, onde cada obstáculo é localizado em uma posição fixa e representado por um segmento de reta descrito por seus dois extremos (x1, y1) e (x2, y2). Os barcos são adimensionais (representados como um ponto no plano) e os obstáculos possuem espessura desprezível. Os obstáculos são dispostos de tal forma que os mesmos não se interceptam. De forma similar, os pontos de início e de chegada da competição não são interceptados por nenhum obstáculo."
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "1857",
        "saida": "Imprima uma linha contendo unicamente o valor exato da área da terra que Robb Stark recebeu, sem zeros desnecessários à esquerda ou à direita.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros, N e B (0 ≤ N < 100, 1 ≤ B ≤ 103), os quais representam respectivamente o número de construções já existentes no mapa e o limite para a área do território de Robb Stark estabelecido por Lorde Frey. A segunda linha consiste de dois inteiros, Xm e Ym (0 ≤ Xm, Ym ≤ 104), os quais representam respectivamente a latitude e a longitude da localidade que Robb escolheu para a construção da mansão. Cada uma das N linhas seguintes é composta por dois inteiros X e Y (0 ≤ X, Y ≤ 104), os quais representam respectivamente a latitude e a longitude de cada construção.",
        "titulo": "Prelúdio de um Casamento Vermelho",
        "descricao": "Poucos sabem que, na série de eventos que antecederam o sangrento Casamento Vermelho, Lorde Frey prometeu a Robb Stark uma parte do território das Terras Fluviais, além de uma mansão. As exatas palavras que Lorde Frey disse a Robb Stark, numa reunião nas Gêmeas, foram: — Aqui está o mapa das Terras Fluviais e de todas as construções que existem nelas. Coloque um prego em cima da localidade onde você deseja que seja construída sua mansão. Escolha a localidade que quiser, desde que ela não fique em cima nem ao norte de uma construção já existente. Ainda, se a localidade que você escolher ficar na mesma latitude que outra construção, a outra construção deverá estar mais a leste que a sua localidade. E assim procedeu Robb Stark. Lorde Frey, então, continuou: — Pegue agora estes outros pregos e ponha-os em cima de construções já existentes, para que lhe pertençam também. Escolha as construções que quiser. Saiba que, após terminar, eu esticarei este elástico em volta de todo o mapa e o soltarei, de modo que o elástico seja parado pelos pregos. Todo o território no interior ou sobre a fronteira da região definida pelo elástico será seu. No entanto, não abuse de minha benevolência. Se a área do seu território exceder B metros quadrados, eu lhe cortarei fora a cabeça aqui mesmo. Robb fez sua escolha de modo a possuir a maior área de terra possível mantendo sua cabeça, pelo menos por um tempo. Você é capaz de adivinhar qual área ele obteve?"
    },
    {
        "nivel": "8",
        "assunto": "8",
        "numero": "1748",
        "saida": "Imprima uma linha com dois inteiros P e A que representam, respectivamente, o perímetro em milímetros e a área em milímetros quadrados da cerca que Alice e Bob querem construir.",
        "entrada": "A primeira linha contém um inteiro V (1 ≤ V ≤ 105) representando o número de vegetais no campo de Alice e Bob. Cada uma das V linhas seguintes descreve um vegetal diferente com dois inteiros X e Y (1 ≤ X, Y ≤ 108), indicando as coordenadas da planta, em milímetros. Não há duas plantas em um mesmo local.",
        "titulo": "Cerque Os Vegetais",
        "descricao": "Na tenra idade de 40 anos, Alice e Bob decidiram se aposentar. Depois de mais de duas décadas de trabalho como exemplos para protocolos de rede, livros teóricos sobre jogos e de vários outros textos, eles estavam cansados. Para se manterem ativos, eles decidiram praticar jardinagem. Alice e Bob plantaram vários vegetais em um campo enorme. Após terminar, eles perceberam que as suas plantas precisavam de proteção contra animais selvagens, por isso eles decidiram construir uma cerca em volta deles. O campo é representado como o plano XY, e cada vegetal é representado por um ponto diferente no mesmo. Uma cerca é representada como um polígono no plano. No entanto, nem todo polígono é uma cerca válida. Uma carca deve ser um único polígono simples com cada um dos seus lados paralelos a um dos eixos. Naturalmente, o polígono tem de conter todos os pontos que representam os vegetais. Uma cerca muito perto das plantas ou de si mesma poderia tornar difícil passear pelo campo, desta forma cada lado do polígono precisa ter, pelo menos, um milímetro de distância de todas as outras plantas e de todos os lados não adjacentes. Entre todas as cercas válidas, Alice e Bob decidiram construir aquela com menor perímetro, a fim de economizar no material. Se existem várias cercas válidas com perímetro mínimo, eles querem construir uma com área mínima entre aquelas disponíveis, para economizar tempo quando forem regar seu jardim. Nas imagens seguintes, várias cercas diferentes são mostrados em um campo com quatro vegetais representados como círculos. Por sorte, Alice e Bob já participaram de projetos científicos rigorosos e por isso ele foram muito cuidadosos com seus registros: eles sabem a localização exata de suas plantas com precisão milimétrica. Usando esses dados, ajude-os a calcular o perímetro e a área de uma cerca ideal."
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "1294",
        "saida": "A entrada contém vários casos de teste e termina com final de arquivo (EOF). Cada linha de entrada deve produzir uma linha de saída, que deverá conter dois ou mais números de ponto flutuante com três dígitos após o ponto decimal, separados por um único espaço. O primeiro número indica o valor para o qual o volume da caixa é o máximo possível e os valores seguintes (classificados em ordem crescente) indicam os valores para os quais o volume da caixa é o mínimo possível.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por uma linha que contém dois valores positivos de ponto flutuante L (0 < L < 10000) e W (0 < W < 10000), o que indicam respectivamente o comprimento e a largura do cartão.",
        "titulo": "A Maior e Menor Caixa",
        "descricao": "Na figura a seguir você pode ver um cartão retangular. A largura do cartão é W e comprimento do cartão é L, com espessura é igual a zero. Quatro quadrados (x * x) são cortados a partir dos quatro cantos do cartão mostrado pelas linhas com tracejado preto. Em seguida, o cartão é dobrado ao longo das linhas em vermelho para fazer uma caixa sem tampa. ​ Fig.: Corte e Dobra o Cartão. Dada a largura e altura da caixa, você terá que encontrar o valor de x para o qual a caixa teria inicialmente o máximo e posteriormente o mínimo volume possíveis, separados por espaços."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1464",
        "saida": "Deverá haver uma linha de saída para cada caso de teste na entrada. Para cada caso de teste imprima a string Take this onion to the lab! se a cebola deve ser levada para o laboratório ou Do not take this onion to the lab! se a cebola não deve ser levada para o laboratório.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de um inteiro 3 ≤ N ≤ 2000 em uma linha simples, indicando o número de pontos coletados pelo assistente. A seguir, haverão N linhas, cada uma contendo dois inteiros -2000 ≤ X, Y ≤ 2000 correspondendo às coordenadas de cada ponto. A entrada terminará com N = 0, que não deve ser processado.",
        "titulo": "Camadas de Cebola",
        "descricao": "Dr. Kabal, um reconhecido biólogo, recentemente descobriu um líquido que é capaz de curar as mais avançadas doenças. O líquido é extraído de uma cebola muito rara que pode ser encontrada em um país chamado Cebolândia. Mas nem todas cebolas de Cebolândia são apropriadas para se levar ao laboratório para processamento. Somente cebolas com um numero ímpar de camadas contém o líquido milagroso. Isto é uma descoberta ímpar! Figura 1: Cebola de Cebolândia Dr. Kabal contratou muitos assistentes de pesquisa para coletar e analisar cebolas para ele. Como ele não quer compartilhar sua descoberta com o mundo ainda, ele não disse para os assistentes procurarem por cebolas com um numero ímpar de camadas. Ao invés disso, a cada assistente foi dada a tarefa de coletar cebolas, e selecionar pontos de cada uma das beiradas da camada mais externa, isso dá uma aproximação da estrutura de camadas da cebola que pode ser reconstruída depois. Dr. Kabal disse aos assistentes que o próximo passo seria a \"análise complicada\" desses pontos. De fato, tudo que eles farão é usar os pontos para contar o número de camadas em cada uma das cebolas, e selecionar aquelas com um número ímpar de camadas. Figura 2: Pontos coletados por um assistente É claro que a aproximação obtida por Dr. Kabal, dos pontos coletados, pode ter uma aparência diferente da cebola original. Por exemplo, somente alguns pontos da cebola mostrada na figura 1 podem ser extraídos no processo, dando origem a um conjunto de pontos como mostrado na figura 2. Com estes pontos Dr. Kabal tentará aproximar as camadas originais da cebola, obtendo algo como mostrado na figura 3. O procedimento de aproximação seguido pelo Dr. Kabal (cujo resultado é mostrado na figura 3) é simplesmente recursivamente encontrar polígonos convexos aninhados tais que no fim todo ponto pertencerá a um dos polígonos. Os assistentes foram informados para selecionar pontos de tal forma que o número de camadas na aproximação, se feita desta forma recursiva, seja o mesmo que na cebola original, o que é bom para o Dr. Kabal. Os assistentes também estão cientes de que eles precisam de pelo menos três pontos para aproximar uma camada, mesmo as internas. ​ Figura 3: Aproximação do Dr. Kabal Sua tarefa é escrever um programa que, dado o conjunto de pontos coletado pelo assistente (como mostrado na figura 2), determine se a respectiva cebola pode ser levada para o laboratório."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1549",
        "saida": "Para cada caso de teste, imprima o valor de h tal que cada copo deve ser preenchido até a altura h cm. Arredonde e imprima o resultado com exatamente 2 casas decimais.",
        "entrada": "A primeira linha de entrada contém um inteiro C que determina a quantidade de casos de teste. Cada caso de teste inicia com uma linha contendo dois inteiros, N e L (1 ≤ N ≤ 100, 1 ≤ L ≤ 108 ), indicando o número de pessoas no grupo e a quantia de Coca-Cola que deve ser dividida, em mililitros. A segunda linha contém três inteiros b, B e H (1 ≤ b ≤ B ≤ 100, 1 ≤ H ≤ 100), indicando o raio da base menor e maior do copo, assim como sua altura. Todas as medidas são dadas em centímetros.",
        "titulo": "Dividindo a Coca",
        "descricao": "Um grupo de N amigos foi a um restaurante almoçar. Embora cada pessoa escolheu um prato diferente para comer, todos decidiram que iriam beber Coca-Cola. O grupo pediu então uma garrafa de L ml de Coca-Cola, e deve agora dividir o conteúdo da garrafa entre as N pessoas de tal forma que todas as pessoas recebam partes iguais da bebida. Há um copo vazio para cada pessoa, que deve ser preenchido com o refrigerante que aquela pessoa irá beber. Todos os N copos são iguais, e podem ser descritos como um tronco de um cone cuja altura é H cm, cuja base menor é uma circunferência de raio b cm e cuja base maior é uma circunferência de raio B cm, como indicado na imagem. Indicação de copos preenchidos com Coca-Cola até a altura h cm Sua tarefa é ajudar o grupo a dividir a garrafa de Coca-Cola. Para tal, você deve encontrar a altura h de cada copo de tal forma que, se cada copo for preenchido com refrigerante até a altura h cm, então todas as pessoas irão receber a mesma quantia da bebida. Considere que nenhum copo será preenchido com uma quantia de refrigerante maior que sua capacidade."
    },
    {
        "nivel": "3",
        "assunto": "8",
        "numero": "1834",
        "saida": "O relatório a ser impresso contém várias linhas. A primeira delas deverá conter a mensagem \"Relatorio Vogon #35987-2\". Em seguida, deve ser impressa, em uma linha, a mensagem \"Distancia entre referencias: d anos-luz\", onde d é a distância entre os dois pontos de referência pelos quais a autoestrada deve passar, em anos-luz, com duas casas decimais de precisão. Na linha seguinte deve ser impressa a mensagem \"Setor Oeste:\" e, nas duas linhas seguintes, as mensagens \"P planeta(s)\" e \"H bilhao(oes) de habitante(s)\", onde P é o número de planetas que ficaram à esquerda da autoestrada, quando se viaja no sentido do primeiro ponto de referência ao segundo, e H é o total de habitantes destes planetas. De modo semelhante, devem ser produzidas três mensagens equivalentes para o Setor Leste, que fica à direita da autoestrada. Por fim, deve ser impressa a mensagem: \"Casualidades: P planeta(s)\", onde P é o número de planetas que estavam na rota da construção da autoestrada e, naturalmente, tiveram que ser dizimados.",
        "entrada": "A primeira linha da entrada contém as coordenadas X1, Y1, X2, Y2 (-10.000 ≤ Xi, Yi ≤ 10.000) dos pontos de referência P1 e P2 pelos quais a autoestrada passará em linha reta, separadas por um espaço em branco. As coordenadas são números inteiros e a unidade de distância é o ano-luz. A segunda linha da entrada contém o número N (1 ≤ N ≤ 1.000) de planetas que fazem parte do setor espacial onde a estrada passará. As próximas N linhas contém, cada uma, as coordenadas X e Y (-10.000 ≤ X, Y ≤ 10.000) do planeta e o número H (1 ≤ H ≤ 100.000) de habitantes, em bilhões. Estes valores são números inteiros separados por espaços em branco.",
        "titulo": "Vogons!",
        "descricao": "Os vogons são uma raça alienígena que habita a Vogosfera, segundo o \"Guia do Mochileiro das Galáxias\", escrito por Douglas Adams. Nas palavras do próprio autor: \"Here is what to do if you want to get a lift from a Vogon: forget it. They are one of the most unpleasant races in the Galaxy. Not actually evil, but bad-tempered, bureaucratic, officious and callous. They wouldn't even lift a finger to save their own grandmothers from the Ravenous Bugblatter Beast of Traal without orders - signed in triplicate, sent in, sent back, queried, lost, found, subjected to public inquiry, lost again, and finally buried in soft peat for three months and recycled as firelighters. The best way to get a drink out of a Vogon is to stick your finger down his throat, and the best way to irritate him is to feed his grandmother to the Ravenous Bugblatter Beast of Traal. On no account should you allow a Vogon to read poetry at you.\" No romance, os vogons foram os responsáveis pela destruição da Terra, pois ela ficava na rota de construção de uma autoestrada intergalática. Este é típico modo de trabalho vogon: muitas raças já foram exterminadas e planetas inteiros destruídos para que o trânsito entre as galáxias ficasse menos congestionado. Dados dois pontos de referência, pelos quais a nova autoestrada intergalática passará em linha reta, e as coordenadas e habitantes dos planetas do setor espacial, escreva um programa que gere um relatório para os vogons."
    },
    {
        "nivel": "3",
        "assunto": "8",
        "numero": "1797",
        "saida": "A saída de seu programa deve consistir de uma só linha, contendo a palavra YEAH caso a fuga seja possível ou a palavra OUCH caso não seja.",
        "entrada": "A primeira linha da entrada estabelece o número N de andares do edifício (1 ≤ N ≤ 106) e o valor de AAH (0 < AAH < 2 × 104). Cada uma das N linhas seguintes descreve um andar do edifício através de 3 inteiros: XC, YC e L (0 < XC, YC, L < 104), os quais representam respectivamente as coordenadas do centro e o comprimento do lado do andar. Os andares são descritos em ordem decrescente de altitude.",
        "titulo": "Ferozes e Curiosos",
        "descricao": "Vin Gasoline e seu melhor amigo Paul Runner estão na cobertura de um edifício em Abu Dhabi roubando um Lykan HyperSport. É o ano de 2300, e os andares dos prédios não mais se sustentam um sobre o outro, mas são todos flutuantes e movem-se de vez em quando, apenas mantendo sua altitude. No prédio em que nossos heróis estão, os andares são todos quadrados. A figura à esquerda ilustra o prédio como visto de cima e a figura à direita o ilustra como visto de frente, representando o solo pela linha mais espessa. Gasoline e Runner querem abandonar o prédio o mais rápido possível e precisam, portanto, acelerar o supercarro para pular da cobertura para o penúltimo andar, do penúltimo para o antepenúltimo andar, e assim sucessivamente até chegarem ao solo e fugirem. Eles sabem que o Lykan HyperSport aguenta pular de um andar i para um andar j se e somente se j = i - 1 e a distância horizontal necessária a ser percorrida no ar não é maior que AAH, o Alcance Aéreo Horizontal do carro. Com o computador de bordo, eles têm todas as informações pertinentes à localização dos andares, mas precisam rapidamente calcular se a fuga será possível ou não."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1295",
        "saida": "Para cada conjunto de entrada imprima uma única linha de saída contendo um valor de ponto flutuante (com 4 dígitos após o ponto decimal) o qual denotará a distância entre os dois pontos mais próximos. Se não existirem tais dois pontos na entrada cuja distância for menor do que 10000, imprima a mensagem \"INFINITY\" sem as aspas.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com um número inteiro N (0 ≤ N ≤ 10000), que denota o número de pontos neste conjunto. As N linhas seguintes contêm, cada uma delas, dois valores que são as coordenadas dos N pontos bidimensionais. O primeiro destes dois valores indica a coordenada X e o último indica a coordenada Y. A entrada é terminada por um conjunto cujo N = 0. Esta entrada não deve ser processada. O valor das coordenadas será um número não-negativo menor do que 40000.",
        "titulo": "Problema dos Pares Mais Próximos",
        "descricao": "Dado um conjunto de pontos em um espaço bidimensional, você deverá encontrar a distância entre os pontos mais próximos."
    },
    {
        "nivel": "8",
        "assunto": "8",
        "numero": "1336",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro representando a mínima perda possível para o jardineiro.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha, contém dois inteiros P e L, representando respectivamente o número de pinheiros e larícios (1 ≤ P, L ≤ 1000). Cada uma das próximas P linahs descreve um pinheiro. Depois disso, cada uma das L linhas seguintes descreve um larício. As árvores são modeladas como pontos no plano XY. Cada árvore é descrita usando três inteiros X, Y e V , onde X e Y são as coordenadas da árvore (-105 ≤ X, Y ≤ 105), e V é seu valor (1 ≤ V ≤ 1000). Você pode assumir que em cada caso de teste duas árvores não terão a mesma localização. O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Cerca do Jardim",
        "descricao": "Gary é um jardineiro cuidadoso que possui um campo retangular repleto de árvores. Existem dois tipos de árvores em suas terras: pinheiros e larícios. Para melhorar suas vitalidades, ele decidiu começar a usar um fertilizante específico para cada tipo de árvore, em vez do fertilizante genérico que ele estava usando até agora. Como Gary possui muitas árvores, fertilizantes não podem ser colocados individualmente em cada árvore. Por este motivo ele decidiu construir uma cerca que separa o campo em dois, e usar o fertilizante de pinheiro em um lado e o fertilizante de larício no outro lado. A nova cerca será construída sobre uma linha reta conectando dois pontos distintos localizados na fronteira das terras. Infelizmente, cada fertilizante é ótimo para o tipo de árvore que ele foi projetado, mas mortal para o outro. Depois de construir a cerca e decidir que fertilizante ele irá usar em cada lado, os larícios do lado dos pinheiros e os pinheiros do lado dos larícios serão derrubados, para previnir uma morte lenta que irá arruinar a paisagem. Além disso, antes de construir a cerca é necessário derrubar qualquer árvore que esteja exatamente sobre a linha onde a cerca será construída. É claro, Gary ama suas árvores. Dependendo do seu tipo, idade e outros fatores, cada árvore possui um certo valor. O jardineiro quer construir a cerca e selecionar onde usar cada fertilizante de tal modo que sua perda seja minimizada, onde a perda é a soma dos valores das árvores que serão derrubadas. Você foi contratado para construir a cerca. Antes de começar seu trabalho, diga a Gary quanto ele perderá quando escolher otimamente a localização da cerca e o fertilizante para cada lado."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1971",
        "saida": "A saída deve consistir de exatamente três linhas com exatamente três caracteres cada, representando se o estudante deve se render ou se pode continuar correndo. Os exemplos esclarecem quais caracteres devem ser impressos.",
        "entrada": "A entrada consiste de cinco linhas contendo dois inteiros X e Y cada (0 ≤ X, Y ≤ 104). As quatro primeiras linhas representam as coordenadas dos quatro policiais, e a última linha representa as coordenadas do estudante. Dois corpos não podem ocupar o mesmo lugar no espaço.",
        "titulo": "Insurreição",
        "descricao": "Numa insurreição, um estudante resolveu fugir da Frida, mas foi seguido por quatro policiais. Num dado momento da perseguição, os policiais gritaram: Pare! Você está cercado! Agora, o estudante quer saber se realmente está cercado, situação em que deve se render, ou se pode continuar fugindo. Dizemos que o estudante está cercado pelos policiais se os policiais não estão todos sobre uma mesma reta e se o estudante se encontra no interior ou na fronteira do único polígono formado pelos policiais (sim, se os policiais não estão todos numa mesma reta, é garantido que o polígono formado por todos eles é único)."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1613",
        "saida": "Para cada caso imprima o número de pontos que são seguros para Goemon ficar.",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso de teste terá a coordenada (x, y) do epicentro da explosão de luz. Na próxima linha terá um inteiro P (1 ≤ P*), indicando o número de paredes existentes. Nas próximas P linhas seguirão pares de inteiros indicando as posições das paredes, onde começa e termina uma parede (lembre-se que elas ficam no eixo Y, ou seja, X = 0). Depois haverá um inteiro G (G ≤ 100* ou G ≤ 104**) indicando os pontos candidatos para Goemon se esconder. Depois G linhas seguirão com pares de coordenadas (x, y) indicando as coordenadas dos pontos. Todas as coordenadas irão de -104 até 104 e serão números inteiros. O centro da explosão terá X 0. O Y inicial de uma parede sempre será estritamente menor do que o final. As paredes não estarão ordenadas. As paredes não se intersectarão, e não podem compartilhar um ponto inicial ou final. Pode ter posições repetidas de Goemon. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste.",
        "titulo": "Goemon em Apuros",
        "descricao": "O lendário Ishikawa Goemon será fervido vivo em um grande caldeirão de ferro se for capturado! Para se esconder dos guardas nosso herói correu para dentro de uma casa que contém algumas paredes. Como é noite e a casa está escura os guardas jogaram uma bomba de luz para localizar o fugitivo. Tudo que for iluminado pela explosão da bomba será visto pelos guardas. A bomba emite infinitos raios de luz, em linha reta, para todas as direções partindo de seu epicentro. Podemos simplificar este cenário usando um plano cartesiano 2D, onde as paredes da casa são segmentos da reta X = 0. O epicentro da explosão de luz sempre terá coordenada com valor X 0. A imagem abaixo ilustra o cenário iluminado quando a bomba no ponto E(-12,12) explode: As paredes são descritas por segmentos de reta, e elas bloqueiam os raios de luz. No exemplo acima temos a parede A que vai do ponto A(0,0) até o ponto A1(0,2), a parede B que vai de B(0,4) até B1(0,6), a parede C que vai de C(0,10) até C1(0,12) e a parade D que vai de D(0,14) até D1(0,16). O epicentro da explosão de luz é o ponto E(-12,12) no exemplo dado, e Goemon tem as opções de ficar nos pontos G1(8,2), G2(12,14) e G3(10,10). Destes três pontos, ele só estará protegido no ponto G3, pois os raios de luz da explosão não alcançam este ponto mas alcançam os outros pontos (inclusive o G1), tornando-os visíveis para os guardas. Dado o epicentro da explosão, as paredes e os pontos que Goemon pode ficar, calcule quantos destes pontos são seguros para ele se esconder."
    },
    {
        "nivel": "6",
        "assunto": "8",
        "numero": "1651",
        "saida": "Para cada teste, mostre uma linha com o maior valor possivel do volume do cilindro. Adicione 3 casas decimais ao valor mostrado.",
        "entrada": "A entrada consiste em alguns testes. Cada teste consiste em dois números w e h (1 ≤ w ≤ h ≤ 100), que indica a largura e o tamanho do papel. O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Cilindro",
        "descricao": "Usando um papel e uma tesoura, você pode cortar duas faces de um cilindro dessa maneira: Corte o papel na horizontal (paralelo ao lado menor) para ter duas partes retangulares. Da primeira parte, corte um círculo com o maior raio possivel. O círculo será a parte de baixo do cilindro. Enrole a segunda parte de um jeito que tenha o perimetro igual a circunferência, e encaixe uma parte do rolo com a circunferência. Note que o rolo possa ter papel a mais do que o tamanho da circunferência requerida"
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "1982",
        "saida": "Para cada caso de teste você deverá imprimir: \"Tera que comprar uma fita de tamanho x.\", onde x é o total de fita necessário para cobrir todos os computadores, com duas casas decimais.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste inicia com um inteiro N (3 ≤ N ≤ 2000), em seguida terão N linhas, cada uma contendo dois inteiros X e Y (-2000 ≤ X, Y ≤ 2000), indicando as coordenadas de cada supercomputador dentro do depósito. A entrada termina com N = 0 e não deve ser processada.",
        "titulo": "Novos Computadores",
        "descricao": "Acaba de chegar novos supercomputadores para os laboratórios de ciência da computação. Os funcionários do curso estão muito ocupados e as máquinas são muito pesadas, sendo assim necessitará de bastante tempo e de vários funcionários para tirarem elas do lugar, portanto nem tão cedo eles conseguirão buscar as máquinas. Figura 1: Os pontos representam como estão dispostos os computadores no depósito. Os funcionários precisam isolar as máquinas com uma fita de segurança, para poder evitar que as pessoas esbarrem ou mexam. Como na Serra tudo é muito caro, eles precisam comprar o mínimo de fita possível para passar em volta dos computadores. Devido ao peso das supermáquinas eles irão apenas dar uma volta de fita nas máquinas que estão nas bordas, sem tirar nenhum computador do lugar. Figura 2: A linha vermelha representa como deve ser feito o isolamento. Você como um aluno muito entusiasmado com as máquinas irá auxiliar na compra da fita, dizendo para eles qual a menor quantidade possível de fita se deve comprar para que seja possível isolar todos os computadores."
    },
    {
        "nivel": "3",
        "assunto": "8",
        "numero": "1631",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma linha contendo um valor com 3 casas decimais que representa a menor diferença possível entre ΣESQ e ΣDIR.",
        "entrada": "Vários casos de teste compõem a entrada. A primeira linha de cada caso de teste contém um único inteiro positivo N (4 ≤ N ≤ 100), o qual representa o número de cerejas no bolo. Seguem, então, N linhas, cada uma composta por dois inteiros X e Y (-50 ≤ X, Y ≤ 50, X2 + Y2 ≤ 502), os quais representam as coordenadas, em centímetros, das cerejas do bolo, considerando que o centro do bolo está posicionado na origem do plano cartesiano. A entrada é encerrada com N = 0.",
        "titulo": "O Fantástico Bolo de Bobby",
        "descricao": "Bobby está muito feliz, afinal, ganhou de aniversário um bolo circular fantástico, de 1 metro de diâmetro, decorado com muitas cerejas. Para facilitar a distribuição dos pedaços entre seus entes queridos, Bobby deseja inicialmente cortar o bolo em dois seguindo uma linha reta. Embora a reta do corte não precise passar pelo centro do bolo, ela precisa passar por ao menos duas cerejas. Além disso, sendo ΣESQ a soma, para todas as cerejas à esquerda da reta, da distância de cada cereja à reta, e sendo ΣDIR a soma, para todas as cerejas à direita da reta, da distância de cada cereja à reta, Bobby deseja que a diferença entre ΣESQ e ΣDIR seja a menor possível, como na Figura, em que as cerejas são representadas por pontos. Não obstante, pode-se considerar que cerejas partidas pelo corte não estão nem à esquerda nem à direita da reta, e que o diâmetro das cerejas é desprezível."
    },
    {
        "nivel": "1",
        "assunto": "8",
        "numero": "2158",
        "saida": "Para molécula imprima a quantidade de átomos e suas ligações conforme mostra o exemplo de saída.",
        "entrada": "A entrada é composta por diversos casos de teste, cada entrada é composta por dois inteiros, FP e FH (1 < FP, FH < 1015), que correspondem a quantidade de faces pentagonais e hexagonais.",
        "titulo": "Ajudando o Tio Cláudio",
        "descricao": "O ano é 1986, em uma publicação científica foi divulgada a descoberta de uma molécula 3D de carbono, onde os átomos ocupam os vértices de um poliedro convexo com faces pentagonais e hexagonais, como em uma bola de futebol. Em homenagem ao professor Cláudio Carvalho, a molécula foi denominada Claudeno. Cláudio gosta muito de verificar a quantidade de átomos e de ligações em uma determinada molécula. Hoje com a idade avançada do professor ele não consegue mais fazer os calculos \"de cabeça\", e solicita que você, o estagiário cuidador de velhinhos, crie um programa que o possa ajudar."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1991",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um número racional que representa o comprimento em metros da ponte mais curta que liga as duas margens do rio dada no sentido NorteSul. O resultado deve ser arredondado para o número racional mais próximo com 2 dígitos decimais. Em caso de empate, o número deve ser arredondado para cima. Notese que você deve sempre imprimir 2 dígitos após o ponto, mesmo que isso signifique terminar com um zero.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito por três linhas. A primeira linha contém um número inteiro A, denotando a largura do rio em metros (3 <= A <= 104). A segunda linha descreve a margem norte do rio, enquanto que a terceira linha descreve sua margem sul. A descrição de cada margem começa com um número inteiro C que indica o número de semicírculos que são utilizados para modelar esta margem (1 <= C <= 1000). Isto éseguido por um caractere \"N\" ou \"S\", que significa, respectivamente, que o semicírculo mais para o Oeste nesta margem é orientado para o Norte ou mais para o Sul. A descrição termina com C números inteiros R_i, representando o raio em metros dos semicírculos que formam a margem (1 <= R_i <A / 2 para 1 <= i <= C). Os semicírculos são dados em ordem, do que estiver situado mais para o Oeste (raio R_1) para o situado mais ao Leste (raio R_C). As orientações dos semicírculos alternam entre Norte e Sul após o primeiro semicírculo, cuja orientação é dada como descrito acima. Assumese que em cada caso de teste ambas as margen estão alinhadas, o que implica que a soma dos raios dos semicírculos que formam cada margem é o mesmo. O final da entrada é indicado por uma única linha contendo o número -1.",
        "titulo": "Fábrica de Pontes",
        "descricao": "Na área central da Macedónia há um rio seguindo a direção LesteOeste. Habitantes da região querem construir uma ponte que cruza o rio na direção NorteSul, uma tarefa para a qual foram contratados os fabricantes mais baratos que eles conhecem, a Short Bridge Construction Company. Como demonstrado por seu nome, esta empresa de construção especializada na construção de pontes mais curtas possíveis para cada rio. A primeira coisa que a empresa faz é modelar as margens do rio (Norte e Sul). Cada um deles é considerado como sendo formado por semicírculos de diferentes raios, alternativamente orientado para um lado ou para o outro, com todos os seus centros colineares. As duas retas que são definidas pelos centros dos semicírculos de cada margem tem a direção LesteOeste e são separados por uma distância A uma da outra. O valor A é a largura do rio. Note que se ambas as margens estão alinhadas, isto é, a margem do Norte não começa nem termina mais a oeste ou para o leste do que na margem sul. Na figura a seguir você pode ver o modelo de um determinado rio. Na margem do Norte o semicírculo mais para o Oeste está orientado para o Norte, enquanto que na margem sul o semicírculo mais para o Oeste está orientado para o Sul. Em cada margem, a orientação do próximo semicírculo alterna. A ponte mais curta possível no sentido NorteSul é a mostrada na figura. Sua tarefa é ajudar a empresa de construção a encontrar o comprimento mais curto possível da ponte que liga as duas margens do rio, no sentido Nortesul."
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "1204",
        "saida": "Para cada instância imprima duas linhas. A primeira linha deve conter o primeiro ponto de contato da bola com a parede do campo e a segunda linha deve conter o segundo ponto de contato. Um ponto de contato deve ser impresso como dois números racionais separados por um espaço. Imprima os números com exatamente 3 casas decimais.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste em uma linha contendo 6 inteiros, X, Y, Dx, Dy, (-1000 <= Dx,Dy <= 1000), A e B, (1 <= A,B <= 500). A posição inicial da bola é dada pelo ponto (X; Y ) dentro da elipse e a direção pelo vetor (Dx;Dy). O campo tem o formato de uma elipse descrita pela equação x²    y²      -  +  -  = 1. A²    B²",
        "titulo": "Myachowski, o Futebol Russo",
        "descricao": "Muitas origens diferentes são atribuídas ao futebol. A atividade mais antiga que se assemelha ao futebol era praticada na China entre os séc. III e II a.C. e chamava-se ts’uh Kúh (cuju), e consistia em jogar uma pequena bola com os pés para uma rede. No Japão existe o kemari, praticado até hoje em eventos culturais. Em Roma jogava-se o harpastum, e na Grécia o epislcyros. Com a descoberta do novo mundo descobriu-se também um jogo maia muito semelhante ao futebol, o pok ta pok que teria mais de 3 000 anos de história. Na idade média jogava-se em Florença o calcio florentino, que muitos reputam ser o berço do futebol moderno. Até hoje índios do Amazonas jogam um jogo muito semelhante em que uma bola é empurrada usando apenas a cabeça em direção às metas inimigas. Seja como for, é quase  impossível dizer qual o jogo que deu origem ao futebol hoje jogado, cujas regras foram formalmente estabelecidas pelos ingleses no final do século XIX. Pouco se tem notícia de um jogo russo, também ancestral do futebol e com regras bastante claras (como diria o Arnaldo). É o Myachowski, também conhecido como Otskok. O nome vem provavelmente de Myach que significa \"bola\" em russo. No jogo um jogador entra em um campo que é uma elipse fechada e deve acertar um buraco localizado na parede do campo. Porém, o ponto só é computado se a bola entra no buraco após ser chutada contra as paredes do campo, sendo desviada para dentro do buraco. Dadas a posição inicial da bola, a direção na qual ela está se movimentando e a descrição do campo, sua tarefa é determinar os próximos dois pontos de contato da bola com a parede do campo. Considere que o centro do campo é a posição (0; 0). Reflexão da Bola: Suponha para esse problema que a bola é refletida perfeitamente quando atinge a parede do campo. Isso é, o ângulo que o vetor de entrada faz com a reta tangente à parede do campo no ponto de contato é o mesmo que ângulo de saída. A Figura abaixo exemplifica esse comportamento. Ângulo de entrada é igual ao ângulo de saída"
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "1293",
        "saida": "Para cada linha de entrada, você deve produzir uma linha de saída, que contém um número de ponto flutuante F. F é a maior distância possível entre a casa de Romeu e casa de Julieta, e tem três dígitos após o ponto decimal.",
        "entrada": "A entrada contém vários casos de teste e termina com final de arquivo (EOF). Cada caso de teste é composto por uma linha que coném seis valores de ponto-flutuante, x1, y1, x2, e y2 (0 ≤ x1, y1, x2, y2 ≤10000) CMD, ENF. Aqui (x1, y1) é a coordenada de A, (x2, y2) é a coordenada de B, CMD é o ângulo entre as direções dos canhões apontados na direção de M e ENF é o valor similar para o ponto N.",
        "titulo": "Romeu e Julieta!",
        "descricao": "Neste problema, vamos discutir os problemas de um Romeu moderno e uma Julieta moderna. Você está convidado a resolver os problemas deles para que eles não tenham que ser um par trágico como o de Shakespeare. Como de costume as famílias de Romeu e Julieta têm relações hostis e por isso eles estão trancados em dois lugares diferentes M e N. Dois canhões são colocados no local A e dois canhões são colocados no local B. Um canhão na localização A é apontado para M e o outro é apontado para N. a mesma coisa se ​​aplica aos dois canhões de localização B. M e N estão sempre no lado oposto de AB. ​Fig: Cenário parcial de Romeu e Julieta Os movimentos dos canhões, que estão visando M, estão interrelacionados, ou seja, o ângulo entre suas direções é constante. Portanto o ângulo CMD ((5 graus) ≤ (ângulo CMD) <(80 graus)) é constante. A mesma regra se aplica aos outros dois canhões. Ou seja, o ângullo ENF ((5 graus) ≤ (ângulo ENF) <(80 graus)) também é constante. Todas essas coisas são mostradas na imagem acima. Mas outra coisa que é importante e que está faltando na figura acima é que os locais N, A, M, são mantidos sempre em uma linha reta. A razão por trás disso é muito estranha. Um robô foi contratado como guarda de Romeu e Julieta. Ele tem dois olhos em lados opostos da sua cabeça e este robô é posicionado no ponto A. Para ser mais preciso, A, B e ângulo de CMD e ângulo ENF são constantes em um cenário e todas as outras posições ou valores são variáveis. Também lembro que ponto M deve permanecer sempre apontado pelos dois canhões. A mesma coisa se ​​aplica ao ponto N. O problema é que, nas noites estreladas Romeu canta a música \"Noites Azuis\" de \"Michael Learns to Rock\" em voz alta e ambos os pais não querem que Julieta ouça essa música. Então, eles querem colocar as casas (M e N), tão distantes uma da outra quanto for possível para preservar todas as restrições explicadas antes. Seu trabalho é medir esta máxima distância entre M e N e informá-la a Romeu, para que ele possa decidir se ele deve ou não cantar ou qual o volume de voz que deve usar."
    },
    {
        "nivel": "9",
        "assunto": "8",
        "numero": "1126",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir um único número, indicando a distância entre as duas naves, com duas casas decimais de precisão. A distância entre as duas naves é sempre maior que zero.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro T, indicando o número de casos de teste da entrada. Cada um dos T casos de teste é composto de oito linhas, cada uma descrevendo a coordenada de um vértice de uma nave; as quatro primeiras linhas indicam os vértices da nave rebelde; as quatro linhas seguintes indicam os vértices da nave do Império. Cada descrição de coordenada é uma linha contendo três inteiros X, Y, Z indicando a coordenada do vértice no espaço (−103 ≤ X ≤ 103, −103 ≤ Y ≤ 103, −103 ≤ Z ≤ 103); os quatro vértices de cada nave sempre definem um tetraedro de volume não nulo e as duas naves são sempre disjuntas.",
        "titulo": "Guerra nas Estrelas",
        "descricao": "Há muito tempo atrás, em uma galáxia muito, muito distante, havia um império que dominava a todos. Uma aliança rebelde, descontente com essa situação, decidiu lutar contra tais forças, com o objetivo de restaurar a democracia e a paz para todos os povos. Capitão Cael, um dos comandantes rebeldes, está navegando pelo espaço com seu cruzador espacial, quando de repente percebe a presença de uma nave do Império (de acordo com os padrões estéticos da época, todas as naves são tetraedros). Após ser surpreendido por um ataque inicial do império, Cael percebe que está em posição de disparo e que pode posicionar um canhão em qualquer ponto de sua nave. Como a potência de sua arma é fixa, Cael quer posicionar seu canhão de forma que a distância percorrida pelo feixe de energia até a nave do Império seja mínima, para evitar perdas. Para isso, ele pediu para que você, sub-capitão Cin Talig, calculasse a menor distância entre a nave rebelde e a nave do Império."
    },
    {
        "nivel": "2",
        "assunto": "8",
        "numero": "1721",
        "saida": "Para cada caso, imprima a frase \"M is x km off A/B equidistance.\" com M,x,A,B aproximadamente substituidos, M pelo local de encontro, x pela distancia calculada e arredonda para o mais próximo número inteiro., A pela localidade da casa de Alice, B pela localidade da casa de Bob. Se uma das localidades do caso não estiver na lista de localidades subistitua x por \"?\" .",
        "entrada": "A entrada consiste de duas partes: uma lista de localidades e uma lista de casos. A lista de localidade possui até 100 linhas, uma por localidade. Cada uma contém uma String S e dois números não inteiros, La, Lo, separados por espaço em branco. S representa o nome da localidade, La a latitude e Lo a longitude. Nomes são únicos e menores do que 30 caracteres e não contem espaços em branco. Latitudes estão entre -90 (Polo Sul) e 90 (Polo Norte) inclusive. Longitudes estão entre -180 e 180 inclusive, onde números negativos denotam locais à oeste do meridiano e positivos a leste. (Meridiano de Greenwich, Londres). A lista termina com uma linha com somente um caracter ‘#’. Cada linha dos casos contém três localidades, A, B, M. Assuma que, A é a localidade da casa da Alice, B é a localidade da casa do Bob, e M o terceiro local, em que pode ser o possível ponto de encontro. A lista de casos acaba com uma linha com somente um caracter ‘#’.",
        "titulo": "Equidistância",
        "descricao": "Alie e Bob não se encontram àlgum tempo. Bob não está feliz com isso, então ele instiga Alice a marcar um encontro. Vamos ver um trecho da ligação: Alice:...talvez devêssemos nos encontrar em um lugar neutro. Bob:Eu já ouvi isso de você --- dois anos atrás. Alice:eu sei, eu só não encontrei ainda um lugar adequado a mesma distancia de mim e de você. Bob:Bom, o lugar geométrico que . é equidistante de dois dados pontos na superfície de uma esfera( e a terra está mais para esfera do que disco) é um grande circulo ( ou seja, o que intersecta o circulo grande pelos pontos dados ortogonalmente no centro deles). Se você insiste em somente numa distancia aproximadamente igual, então nós temos uma área de alguns quilômetros de largura e cerca de 40000 km de comprimento. Nem tudo nesta área é agua. Assim, eu acho que é uma tarefa possível encontrar um lugar apropriado. Alice:Agora, se eu te falar para escolher qualquer um, nós certamente acabaremos em Honolulu. Bob:O que não é uma má ideia. Então, devo escolher qualquer um? Alice:Contando que eu não tenha que aceitar --- mas estou aberta a sugestões. Bob: Honolulu ? Alice: Está na área geométrica que você falou, não? Bob: Nem tanto ... Bom. Agora vamos parar com as preliminares e chegar aos fatos: Dadas duas localizações na superfície da terra, você pode encontrar o lugar geométrico de todos os pontos equidistantes sobre a superfície. Para outro dado local, calcule sua distância para esta área geométrica. Assuma que a terra é uma esfera de raio de 6378 km."
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "1108",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número real, escrito com precisão de duas casas decimais, indicando o raio de cobertura do equipamento a ser utilizado nas duas torres. O resultado de seu programa deve ser escrito na saída padrão.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um número inteiro N, o número de residências da cidade (3 ≤ N ≤ 40). Cada uma das N linhas seguintes contém dois inteiros X e Y , separados por um espaço em branco (0 ≤ X ≤ 104 e 0 ≤ Y ≤ 104), representando a coordenada de uma residência. Cada residência tem uma localização diferente. O final da entrada é indicado por uma linha que contém apenas um zero.",
        "titulo": "Torres de Telefonia Celular",
        "descricao": "Uma nova operadora de telefonia pretende oferecer serviços de telefone residencial em sua cidade. Os telefones serão residenciais, mas a operadora vai utilizar tecnologia de telefonia celular, com torres de transmissão, para evitar os gastos de construir uma rede de cabos por toda a cidade. A potência do transmissor/receptor colocado em uma torre define o raio de cobertura da torre (que por sua vez define a área de cobertura do equipamento, que é um círculo, já que a cidade é perfeitamente plana). O custo do equipamento instalado em cada torre depende de sua potência, e portanto de seu raio de cobertura. A operadora decidiu que utilizará exatamente duas torres na cidade. O mesmo tipo de equipamento será instalado nas duas torres, ou seja, as duas torres terão o mesmo raio de cobertura. Como a operadora quer poder oferecer o seu serviço para todas as residências, a área de cobertura das duas torres em conjunto deve englobar todas as resid^encias da cidade. Adicionalmente, o raio de cobertura das duas torres deve ser o menor possível, para miniminar o custo dos equipamentos. A figura abaixo mostra duas possíveis configurações de cobertura das duas torres para uma cidade com dez residências. Tanto (a) quanto (b) oferecem cobertura a todas as residências da cidade, mas (b) é a que utiliza o menor raio de cobertura possível. Dada a localização de cada residência na cidade, você deve escrever um programa para calcular o menor raio de cobertura das torres, de forma a garantir que todas as residências sejam cobertas."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1825",
        "saida": "Para cada cenário, você deverá escrever uma linha no arquivo de saída, com um dos seguintes conteúdos: No caso da formiga morrer de fome, a espressão \"Morreu...\" Caso contrário, você deverá escrever: A porcentagem das comidas que foram devoradas na peregrinação da formiga rumo à saída (com três digitos, espaços à esquerda se for o caso, arredondado para o inteiro mais próximo, ou para baixo, no empate, seguido seguido do sinal %); A quantidade de trombadas que a formiga deu nas paredes do retângulo (10 casas, alinhado à direita, espaços à esquerda); A porta pela qual ela saiu. A imagem a seguir é sobre o exemplo abaixo:",
        "entrada": "A entrada consistirá de diversos cenários. Para cada cenário serão fornecidas, numa única linha, as medidas do retângulo, primeiro a largura M (Norte - Oeste), depois a profundidade N (Norte - Leste) (0 < m,n ≤ 100.000), e a porta por onde entrou a formiguinha. Uma linha contendo o valor 0 para uma das dimensões do retângulo marca o final da entrada.",
        "titulo": "Formigando",
        "descricao": "Um grupo de cientistas malucos da ACGOP (Academia de Ciência e Ginástica Olímpica Pindamonhangabense) está estudando o comportamento de uma estranha raça de formigas cegas. Após anos de estudo, eles concluíram que: Essas formigas só andam em linha reta e seu comportamento é o mesmo da luz. Ou seja, quando encontram uma parede pela frente, sua rota é \"refletida\" (como se fosse um raio de luz incidindo num espelho plano) e ela segue andando de modo que sua rota forme com o obstáculo um ângulo igual ao de incidência; Essas formigas só param quando passam por um alimento e voltam a andar no mesmo sentido que vinham logo após devorar o alimento; O máximo que uma formiga consegue viajar sem morrer de fome é 2 metros. Para comprovar essas conclusões, os cientistas construíram uma série de cenários, onde eles colocariam as formigas para andar. Cada cenário consiste num retângulo de dimensões M x N metros com 4 entradas, situadas nos vértices, que de agora em diante chamaremos pelos nomes dos pontos cardeais, conforme a figura: Dentro do retângulo foram distribuidas MN comidas, colocadas no centro de cada quadrado de 1 metro de lado interior ao retângulo. As formigas são introduzidas nos retângulos por uma das quatro portas numa rota que forma 45 graus com os lados do retângulo de modo que, após percorrer aproximadamente 0,707 metros, alcançam o primeiro alimento e, em seguida, continuam suas viagens pelo mesmo caminho, até que uma das três situações ocorra: A formiga bate na parede: neste caso sua rota é refletida e ela segue andando de modo que sua rota forma com a aparede um ângulo igual ao de incidência (ou seja, permanece 45 graus); A formiga anda mais de 2 metros e não encontra comida: nesse caso ela morre (tadinha); A formiga encontra uma porta: nesse caso ela sai e o experimento está concluído. Sua missão é escrever um programa que preveja o que vai acontecer com a formiga colocada em cada um dos cenários da pesquisa."
    }
]