[
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2187",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. Na segunda linha devem aparecer quatro inteiros I, J, K e L que representam o resultado encontrado pelo seu programa: I indica o número de cédulas de B$50,00, J indica o número de cédulas de B$10,00, K indica o número de cédulas de B$5,00 e L indica o número de cédulas de B$1,00. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "descricao": "As Ilhas Weblands formam um reino independente nos mares do Pacífico. Como é um reino recente, a sociedade é muito influenciada pela informática. A moeda oficial é o Bit; existem notas de B$ 50,00, B$10,00, B$5,00 e B$1,00. Você foi contratado(a) para ajudar na programação dos caixas automáticos de um grande banco das Ilhas Weblands. Os caixas eletrônicos das Ilhas Weblands operam com todos os tipos de notas disponíveis, mantendo um estoque de cédulas para cada valor (B$ 50,00, B$10,00, B$5,00 e B$1,00). Os clientes do banco utilizam os caixas eletrônicos para efetuar retiradas de um certo número inteiro de Bits.  Sua tarefa é escrever um programa que, dado o valor de Bits desejado pelo cliente, determine o número de cada uma das notas necessário para totalizar esse valor, de modo a minimizar a quantidade de cédulas entregues. Por exemplo, se o cliente deseja retirar B$50,00, basta entregar uma única nota de cinquenta Bits. Se o cliente deseja retirar B$72,00, é necessário entregar uma nota de B$50,00, duas de B$10,00 e duas de B$1,00.",
        "titulo": "Bits Trocados",
        "entrada": "A entrada é composta de vários conjuntos de teste. Cada conjunto de teste é composto por uma única linha, que contém um número inteiro positivo V (0 ≤ V ≤ 10000), que indica o valor solicitado pelo cliente. O final da entrada é indicado por V = 0."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1918",
        "saida": "Para cada caso de teste, se for possível chegar a Acapulco antes que a promoção finalize, imprima duas linhas. Na primeira linha a palavra “POSSIBLE” (sem aspas) e na segunda linha a menor data possível no seguinte formato: “DD/MM/AAAA – hh:mm:ss”. Caso não seja possível chegar até a data limite, imprima apenas uma linha com a palavra “IMPOSSIBLE” (sem aspas).",
        "descricao": "Após terem realizado uma grande viagem para Acapulco há algum tempo atrás, o moradores da vila fizeram uma grande reunião e decidiram se unir para viajar novamente para aquela linda cidade. Apesar de Seu Madruga ter tido uma grande sorte e ganhado a viagem passada com todas as despesas pagas, o gasto geral entre todos os moradores da vila foi gigantesco e dessa vez eles estão querendo economizar o máximo possível, ainda mais porque ninguém da vila ganhou a viagem paga novamente. Acontece que eles foram informados por um desconhecido, que o melhor hotel da cidade (o mesmo que eles se hospedaram na viagem passada) estará com uma promoção por um tempo limitado, então como eles desejam economizar, estão querendo chegar a tempo de pegar a promoção. Seu Barriga responsável por administrar o dinheiro gasto é um homem que entende bem de números e agora quer utilizar o poder da tecnologia para conseguir algumas informações úteis antes de realizar a viagem. Como ele já conhece suas habilidades como matemático e programador, ele contratou você para desenvolver um programa que dado todas as informações sobre as cidades e rotas disponíveis, a data e o horário que eles pretendem sair da vila e a data e o horário limite da promoção do hotel em Acapulco, informe se é possível chegar a Acapulco antes que a promoção termine, e qual a menor data e horário possível, ou se não é possível chegar a tempo de pegar a promoção.",
        "titulo": "Viagem para Acapulco",
        "entrada": "A primeira linha de entrada contém um único inteiro QT (1 ≤ QT ≤ 100), indicando a quantidade de casos de teste que vem a seguir. A primeira linha de cada caso de teste é composta por 2 inteiros N (2 ≤ N ≤ 105) e M (1 ≤ M ≤ 3x105), representando respectivamente a quantidade de cidades e a quantidade de rotas que ligam essas cidades. A segunda linha de cada caso de teste é composta pela data e o horário que os moradores da vila pretendem sair e a terceira linha de cada caso é composta pela data e o horário limite que o hotel de Acapulco estará em promoção. As datas e os horários estão descritos na seguinte notação: “DD/MM/AAAA – hh:mm:ss”, onde DD (1 ≤ DD ≤ 31) representa o dias do mês, MM (1 ≤ MM ≤ 12) representa o mês do ano, AAAA (1970 ≤ AAAA ≤ 2100) representa o ano, hh (0 ≤ hh ≤ 23) representa as horas, mm (0 ≤ mm ≤ 59) representa os minutos, ss (0 ≤ ss ≤ 59) representa os segundos. Seguem M linhas, cada linha contêm 2 inteiros a e b e uma data, indicando que existe uma rota bidirecional entre a cidade a (0 ≤ a ≤ N-1) e b (0 ≤ b ≤ N-1), e a data no formato “DD-hh-mm-ss”, representando o tempo necessário para ir de a para b e vice-versa. Considere que a vila fica na cidade de número 0 e a cidade de Acapulco é a cidade de número N-1."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1483",
        "saida": "Para cada um dos casos de teste seu programa deve imprimir uma linha contendo um número real, com duas casas decimais, representando o valor do prêmio correspondente à aposta dada.",
        "descricao": "Em um país muito distante, as pessoas são viciadas em um jogo de apostas bastante simples. O jogo é baseado em números e é chamado jogo do bicho. O nome do jogo deriva do fato que os números são divididos em 25 grupos, dependendo do valor dos dois últimos dígitos (dezenas e unidades), e cada grupo recebe o nome de um animal. Cada grupo é associado a um animal da seguinte forma: o primeiro grupo (burro) consiste nos números 01, 02, 03 e 04; o segundo grupo (águia) é composto dos números 05, 06, 07 e 08; e assim em diante, até o ultimo grupo contendo os números 97, 98, 99 e 00. As regras do jogo são simples. No momento da aposta, o jogador decide o valor da aposta V e um número N (0 ≤ N ≤ 1000000). Todos os dias, na praça principal da cidade, um número M é sorteado (0 ≤ M ≤ 1000000). O prêmio de cada apostador é calculado da seguinte forma: Se M e N têm os mesmos quatro últimos dígitos (milhar, centena, dezena e unidade), o apostador recebe V × 3000 (por exemplo, N = 99301 e M = 19301); Se M e N têm os mesmos três últimos dígitos (centena, dezena e unidade), o apostador recebe V × 500 (por exemplo, N = 38944 e M = 83944); Se M e N têm os mesmos dois últimos dígitos (dezena e unidades), o apostador recebe V × 50 (por exemplo, N = 111 e M = 552211); Se M e N têm os dois últimos dígitos no mesmo grupo, correspondendo ao mesmo animal, o apostador recebe V × 16 (por exemplo, N = 82197 and M = 337600); Se nenhum dos casos acima ocorrer, o apostador não recebe nada. Obviamente, o prêmio dado a cada apostador é o máximo possível de acordo com as regras acima. No entanto, não é possível acumular prêmios, de forma que apenas um dos critérios acima deve ser aplicado no cálculo do prêmio. Se um número N ou M com menos de quatro dígitos for apostado ou sorteado, assuma que dígitos 0 devem ser adicionados na frente do numero para que se torne de quatro dígitos; por exemplo, 17 corresponde a 0017. Dado o valor apostado, o número escolhido pelo apostador, e o número sorteado, seu programa deve calcular qual o prêmio que o apostador deve receber.",
        "titulo": "Jogo do Bicho",
        "entrada": "A entrada contém vários casos de teste. Cada caso consiste em apenas uma linha, contendo um número real V e dois inteiros N e M, representando respectivamente o valor da aposta com duas casas decimais (0.01 ≤ V ≤ 1000.00), o número escolhido para a aposta (0 ≤ N ≤ 1000000) e o número sorteado (0 ≤ M ≤ 1000000). O final da entrada é indicado por uma linha contendo V = M = N = 0."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1414",
        "saida": "Para cada um dos casos de teste seu programa deve imprimir uma única linha contendo um número inteiro, representando a quantidade de jogos que terminaram empatados até o momento.",
        "descricao": "Uma Copa do Mundo de futebol de botões está sendo realizada com times de todo o mundo. A classificação é baseada no número de pontos ganhos pelos times, e a distribuição de pontos é feita da forma usual. Ou seja, quando um time ganha um jogo, ele recebe 3 pontos; se o jogo termina empatado, ambos os times recebem 1 ponto; e o perdedor não recebe nenhum ponto. Dada a classificação atual dos times e o número de times participantes na Copa do Mundo, sua tarefa é de determinar quantos jogos terminaram empatados até o momento.",
        "titulo": "Copa do Mundo",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros T e N, indicando respectivamente o número de times participantes (2 ≤ T ≤ 200) e o número de partidas jogadas (0 ≤ N ≤ 10000). Cada uma das T linhas seguintes contém o nome de um time (uma cadeia de máximo 10 letras e dígitos), seguido de um espaço em branco, seguido do número de pontos que o time obteve até o momento. O final da entrada é indicado por T = 0."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1030",
        "saida": "Para cada caso de teste de entrada será apresentada uma linha de saída no seguinte formato: Case n: m tendo sempre um espaço antes do n e do m.",
        "descricao": "O problema de Josephus é assim conhecido por causa da lenda de Flavius Josephus, um historiador judeu que viveu no século 1. Segundo o relato de Josephus do cerco de Yodfat, ele e seus companheiros (40 soldados) foram presos em uma caverna, cuja saída foi bloqueada pelos romanos. Eles preferiram suicidar-se a serem capturados, e decidiram que iriam formar um círculo e começar a matar-se pulando de três em três. Josephus afirma que, por sorte ou talvez pela mão de Deus, ele permaneceu por último e preferiu entregar-se aos romanos a suicidar-se.",
        "titulo": "A Lenda de Flavious Josephus",
        "entrada": "Haverá NC (1 ≤ NC ≤ 30 ) casos de teste. Em cada caso de teste de entrada haverá um par de números inteiros positivos n (1 ≤ n ≤ 10000 ) e k (1 ≤ k ≤ 1000). O  número n representa a quantidade de pessoas no círculo, numeradas de 1 até n. O número k representa o tamanho do salto de um homem até o próximo homem que será morto. Segue um exemplo com 5 homens e um salto = 2. Neste exemplo o elemento que restará após as eliminações é 3."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1975",
        "saida": "Para cada saída, você deverá imprimir o nome do aluno que teve mais aparições no quadro, em caso de empate seu programa deverá mostrar todos os alunos com mais aparições separados por vírgulas em ordem alfabética.",
        "descricao": "VI é uma professora de cálculo muito excêntrica, sempre que corrige as provas dos alunos (Que por sinal são provas dificílimas), ela anota todas as pérolas que encontra enquanto corrige, para que no dia da entrega ela possa escrever todas no quadro, para deixar os alunos envergonhados e que eles nunca mais errem as mesmas coisas. Sempre que a bronca termina e as provas são entregues, os alunos tentam descobrir quem foi que teve mais pérolas no quadro. Como a cada prova os números de pérolas aumentam e os alunos tem que estudar muito pois a cada semana acontece uma nova prova de cálculo, eles não tem tempo para verificar todas as provas e ver quem apareceu mais vezes no quadro. Sabendo que você é programador eles pediram sua ajuda para mostrar qual foi o aluno que teve mais pérolas escritas no quadro naquele dia.",
        "titulo": "Pérolas",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiros P, A e R (1 ≤ P, A, R ≤ 104), indicando respectivamente, o número de pérolas, número de alunos e a quantidade de respostas dadas por cada aluno. Segue P linhas com as pérolas escritas no quadro que terão no máximo 1000 caracteres. Em seguida terão A alunos, para cada aluno a primeira linha será seu nome com no máximo 100 caracteres minúsculos de 'a' até 'z', seguindo as R linhas mostrando suas respostas. A entrada termina quando P = A = R = 0, e não deve ser processada."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1105",
        "saida": "Para caso de teste, seu programa deve imprimir uma única linha, contendo um único caractere: 'S', se for possível liquidar todos as debêntures sem intervenção do Banco Central da Nlogônia, e 'N', se algum banco precisar de empréstimos do governo para liquidar suas debêntures.",
        "descricao": "A mais recente crise econômica foi em parte causada pela forma como os bancos faziam empréstimos para pessoas que não tinham capacidade de honrá-los e revendiam tais empréstimos para outros bancos (debêntures). Obviamente, quando as pessoas pararam de pagar os empréstimos, o sistema inteiro entrou em colapso. A crise foi tão profunda que acabou atingindo países do mundo inteiro, inclusive a Nlogônia, onde o honrado primeiro ministro Man Dashuva ordenou que o presidente do Banco Central procurasse uma solução para o problema. Esse, por sua vez, teve uma idéia brilhante: se cada banco fosse capaz de liquidar seus empréstimos somente com suas reservas monetárias, todos os bancos sobreviveriam e a crise seria evitada. Entretanto, com o elevado número de debêntures e bancos envolvidos, essa tarefa é extremamente complicada, e portanto ele pediu a sua ajuda para escrever um programa que, dados os bancos e as debêntures emitidas, determine se é possível que todos os bancos paguem suas dívidas, utilizando suas reservas monetárias e seus créditos.",
        "titulo": "Sub-prime",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros B e N, indicando respectivamente o número de bancos (1 ≤ B ≤ 20) e o número de debêntures emitidas pelos bancos (1 ≤ N ≤ 20). Os bancos são identificados por inteiros entre 1 e B. A segunda linha contém B inteiros Ri separados por espaços, indicando as reservas monetárias de cada um dos B bancos (0 ≤ Ri ≤ 104, para 1 ≤ i ≤ B). As N linhas seguintes contêm cada uma três inteiros separados por espaços: um inteiro D, indicando o banco devedor (1 ≤ D ≤ B), um inteiro C, indicando o banco credor (1 ≤ C ≤ B e D ≠ C), e um inteiro V, indicando o valor da debênture (1 ≤ V ≤ 104). O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1753",
        "saida": "Apresente uma linha com um inteiro que representa o número de distribuições distintas dos K cavaleiros ao redor da mesa. Este número pode ser bastante grande, por isso imprima o resto da divisão por 109 + 7.",
        "descricao": "Todos os meses o Rei Arthur celebra uma reunião do Conselho Superior. Os K cavaleiros que participam desses encontros são conhecidos como Os Cavaleiros da Távola Redonda, provavelmente porque eles se sentam em uma enorme mesa de carvalho redonda tendo K lugares e um grande trono com uma espada e uma pedra esculpidas em sua parte traseira. Para a reunião de hoje, cada cavaleiro recebeu um número entre 1 e K que indica o assento que ele deve tomar durante a reunião. Os assentos são numerados no sentido horário de 1 a K, sendo o assento numerado 1 o primeiro a esquerda do grande trono. Obviamente, o próprio rei não foi dado um número, porque ele se senta no trono. O escudeiro do Rei Arthur garantiu que não há dois cavaleiros com o mesmo número portanto não deverá haver nenhum problema. Como de costume, o rei foi o primeiro a entrar na sala do conselho hoje. De acordo com as regras de protocolo, ele sentou-se no seu trono e preparou-se para receber os K cavaleiros que devem entrar e sentar-se um a um. Após os D primeiros cavaleiros chegarem, o rei observou que alguns deles poderiam ter-se sentado em assentos errados, porque eles estavam distraídos falando sobre quem iria ganhar o próximo torneio. Que confusão! O escudeiro do Rei Arthur prontamente interveio e deu instruções para o restante K - D cavaleiros. Cada um deles deve entrar na sala do conselho e tentar sentar-se em seu assento legítimo; se sua cadeira já está ocupada, o cavaleiro deve caminhar no sentido horário ao redor da mesa e sentar no primeiro assento desocupado que ele encontra. Assim, a distribuição final de cavaleiros em torno da mesa depende da ordem em que entram na sala. Rei Arthur está agora interessado em saber o número de distribuições distintas dos K cavaleiros ao redor da mesa, dadas as cadeiras ocupadas pelos primeiros D cavaleiros. Duas distribuições são consideradas distintas quando há pelo menos um cavaleiro que se sente em diferentes lugares em ambas as distribuições. Como o Royal Advisor in Combinatorics and other Mathematics (ou Real ACM) a tarefa é atribuída a você. Você precisa dar uma resposta dentro de cinco horas em risco de perder o favor do rei. Anda logo!",
        "titulo": "Cavaleiros Da Tàvola Redonda",
        "entrada": "A primeira linha contém dois inteiros K (1 ≤ K ≤ 106) e D (1 ≤ D ≤ 105), representando, respectivamente, o número de cavaleiros e o número de cavaleiros distraídos. Cada uma das linhas próximas D descreve um cavaleiro distraído diferente com dois inteiros A e B (1 ≤ A, B ≤ K), indicando que o cavaleiro que foi atribuído o assento A na verdade sentou-se no assento B. É garantido que não há dois cavaleiros que se sentaram no mesmo assento."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1445",
        "saida": "A cada conjunto de relação, imprima o número total de participantes na festa, incluindo o anfitrião. O total da festa, uma por linha. Na entrada 0 não escreva nada.",
        "descricao": "A garoa fina que caiu na última semana levou o professor Claudius Virux ficar saudoso de seus tempos de Campina Grande – Pb, como estudante na UFCG. Lá, o inverno é um período marcado por uma chuvinha igual a de Joinville, com noites frias. Na universidade, as festinhas dos estudantes, que ocorriam em quase todas as sextas-feiras e sábados, eram um programa e tanto. O mais interessante é que se encontravam as figuras mais inusitadas, poetas, cantores, professores, e outros artistas, além, é claro, dos estudantes. Sempre havia algum motivo para organizar uma festa, quando não, a ideia era celebrar a semana dura da universidade que se passou. O mais curioso era a sistemática de como o anfitrião fazia o convite. O dono(a) da casa (em seus tempos se chamava de república) convidada os seus amigos imediatos, estes por sua vez convidavam outros, e assim, sucessivamente. Chegado o dia da festa, o anfitrião queria conhecer os seus novos amigos, a fim de verificar como tal corrente de convite tinha se propagada. Para controlar quantos e como os convidados vieram à festa, o anfitrião solicitou a cada um que chegasse, escrevesse seu nome, e quem o convidou. Sua tarefa é contar quantos convidados estão presentes em cada festa, dada apenas a relação imediata entre convidado e um amigo.",
        "titulo": "Quem Vai à Festa?",
        "entrada": "Para cada festa, haverá um número de relação entre os convidados. Este é um valor N escrito antes das relações que seguem em pares do tipo (x, y) = (y, x). Onde x é o nome de um amigo e y o seu convidado. Os valores de x e y são numerados de 1 a 1000, e o anfitrião é sempre o número 1. A leitura de 0 na entrada indica fim de festa! O formato dessas entradas seguem os padrões abaixo."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "2015",
        "saida": "Saída de uma linha com dois números inteiros representando o volume da peça Carol e Carla terá, em nessa ordem, se ambos tomam suas decisões de forma otimizada.",
        "descricao": "Carol e Carla são companheiras de quarto. Ontem elas tiveram uma grande festa e hoje eles têm um bolo parcialmente comido que eles querem dividir. Uma vez que as pessoas foram descuidados ao cortar-se de uma fatia, o bolo é agora a forma de um prisma com as suas faces superior e inferior sendo a mesma polígono convexo simples. Para adicionar um pouco de diversão para o processo de dividir o bolo, as meninas vieram com o jogo seguinte. Carol escolhe um vértice v da face superior do bolo. Carla escolhe outro vértice w da face superior que não é adjacente ao v. Em seguida, cortam o bolo em dois pedaços em sentido para baixo ao segmento vw, de modo a obter duas peças separadas de bolo, cada um na forma de um prisma. Por fim, Carol escolhe a peça que ela prefere, e Carla começa o outro. Carla imediatamente viu que este sistema dá uma vantagem Carol. Carla quer saber exatamente o quanto da vantagem Carol tem. É lhe dado um polígono que representa tanto as faces superior e inferior do bolo. A altura do bolo é 2, de modo que o volume de uma parte de bolo é de 2 vezes a área da sua face superior. Assumindo que o bolo é dividido conforme explicado, e que ambas as meninas tomam suas decisões para maximizar o volume da peça que eles têm no final, calcule o volume da peça que cada menina vai conseguir.",
        "titulo": "Fatia do Bolo",
        "entrada": "A primeira linha contém um inteiro N representando o número de vértices da face de topo poligonal do bolo (4 ≤ N ≤ 105). Cada uma das N linhas seguintes descreve um vértice do polígono com dois inteiros X e Y, que indica as coordenadas do vértice no plano XY (-108 ≤ X, Y ≤ 108). Vértices são dadas em sentido anti-horário e definir um polígono convexo simples. Nenhum de três pontos na entrada são colineares."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1849",
        "saida": "A saída deve ser um número A, que indica a área do maior quadrado possível de se formar com os dois retângulos dados.",
        "descricao": "Daenerys Targaryen, a filha da tempestade, tem 3 dragões: Drogon, Viserion e Rhaegal. Ela os utiliza com frequência em batalhas e os faz cuspir fogo ao dizer \"Dracarys!\". Ocorre que quando os dragões lançam fogo em superfícies planas, o fogo queima sempre uma área retangular. As dimensões dessas áreas dependem de diversos fatores, mas Daenerys consegue indicar com precisão para Drogon e Viserion qual a largura e o comprimento do retângulo que vai ser incendiado. Daenerys requer sua ajuda para que indique qual o maior tamanho de superfície plana quadrada é possível queimar dadas as dimensões dos retângulos que Drogon e Viserion conseguem fazer.",
        "titulo": "Dracarys!",
        "entrada": "A entrada é composta por 4 inteiros positivos LD, CD, LV, CV separados por espaço, que representam a largura e o comprimento do retângulo a ser incendiado por Drogon e a largura e o comprimento do retângulo a ser incendiado por Viserion, respectivamente. Nenhum dos inteiros excede o valor de 10000."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1867",
        "saida": "Para cada caso de teste, imprima uma linha, contendo um inteiro, indicando 1 se o primeiro número for o maior de um algarismo, 2 se o segundo número for o maior de um algarismo ou 0 se ambos os números possuírem o mesmo valor de um algarismo.",
        "descricao": "Os habitantes do planeta Uno possuem um terrível problema de detecção de números com mais de um algarismo, de modo que, para tudo que vão fazer, transformam qualquer valor inteiro em um número de um algarismo, realizando somas sucessivas do número até o mesmo ser reduzido a um algarismo. Por exemplo, o número 999999999991, no planeta Uno, soma-se todos os algarismos, resultando em 9+9+9+9+9+9+9+9+9+9+9+1 = 100. Como o número 100 tem mais de um algarismo, o processo se repete, resultando em 1+0+0 = 1 Uma das grandes dificuldades que os habitantes possuem está em comparar dois números e verificar qual deles é o maior, segundo as regras do planeta. Escreva um programa que, dados dois números inteiros, identifique qual deles é o maior número de um algarismo.",
        "titulo": "Maior Número de Um Algarismo",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (0 ≤ N ≤ 10100, 0 ≤ M ≤ 10100), indicando os dois números a serem comparados. O último caso de teste é indicado quando N = M = 0, sendo que este caso não deverá ser processado."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1136",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um único caractere 'Y' se for possível anunciar todos os números de 0 até N, inclusive, ou um único caractere 'N' caso contrário.",
        "descricao": "Albert, Charles e Mary inventaram uma nova versão do clássico jogo de Bingo. Na versão tradicional, o jogo é presidido por um não-jogador conhecido como caller. No começo de cada partida, cada jogador recebe uma carta contendo uma única combinação de números de 0 até N dispostos em colunas e linhas. O caller opera um globo contendo N+1 bolas numeradas de 0 até N. Em cada turno, o caller sorteia uma bola do globo, anuncia o número sorteado aos jogadores e não a coloca novamente no globo. Cada jogador procura pelo número em sua carta e o marca caso o encontre. O primeiro jogador que marcar um padrão pré-definido completo em sua carta (uma linha horizontal, por exemplo) ganha um prêmio.   Na versão Albert-Charles-Mary, em cada turno, o caller sorteia uma primeira bola, coloca-a de volta no globo, sorteia uma segunda bola, coloca-a de volta no globo, e então anuncia a diferença absoluta entre os números das duas bolas. Para aumentar o entusiasmo, antes do início da partida, um subconjunto possivelmente vazio de bolas é retirado do globo, de forma que ao menos duas bolas permaneçam no globo. Eles gostariam de saber se cada número de 0 até N podem ainda ser anunciados utilizando a nova regra de sorteio e considerando apenas as bolas que permaneceram dentro do globo.",
        "titulo": "Bingo!",
        "entrada": "Cada caso de teste é dado em exatamente duas linhas. A primeira linha contém dois inteiros N e B. O significado de N foi descrito acima (1 ≤ N ≤ 90), enquanto B representa o número de bolas que permaneceram no globo (2 ≤ B ≤ N+1). A segunda linha contém B inteiros distintos bi, indicando as bolas que permaneceram no globo (0 ≤ bi ≤ N). O último caso de teste é seguido por uma linha contendo dois zeros."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1638",
        "saida": "Para cada caso de teste imprima uma linha contendo os custos resultantes de uma escolha ideal do tamanho da porção de alimentos. Imprimir cada valor como uma fração reduzida. Se o resultado for um número inteiro, não imprima o denominador 1. Veja o exemplo de saída para mais detalhes.",
        "descricao": "A cantina da universidade não quer nenhum estudante deixe a cantina com fome. Portanto, enquanto um aluno estiver com fome, ele pode obter uma outra porção de comida de graça. A cantina usa um tamanho fixo de porção de alimentos, porque levaria muito tempo para pergunta a um estudante a quantidade de comida que ele quer. Pode acontecer que um aluno não terminar a sua última porção de comida e o restante seja jogado fora. Para minimizar os custos, o gerente da cantina quer determinar um tamanho fixo de porção de alimentos S de tal forma que a quantidade de comida que é desperdiçada seja pequena, mas também o número de vezes que os alunos têm de buscar outra porção da comida não seja muito grande. Note que esses dois objetivos podem ser conflitantes: Ao escolher um tamanho muito pequeno da porção de alimentos, não se desperdiçar comida, mas ao mesmo tempo o número de vezes que os alunos voltam para buscar mais comida é grande. Ao escolher um tamanho muito grande da porção de alimentos, pode-se assegurar que cada aluno tem de buscar apenas uma porção, mas, ao mesmo tempo, pode acontecer que uma grande quantidade de comida seja desperdiçada. O gerente da cantina coletou dados sobre quanto cada aluno consome. O problema a ser resolvido pode agora ser formulado matematicamente como se segue: Seja X a quantidade de alimentos que é desperdiçado, e Y o número de vezes que os estudantes vão buscar alimentos. Então, o objetivo é o de minimizar A × X + B x Y, em que A, B ​​são pesos que representam a importância relativa dos dois objetivos em conflito. Note-se que X e Y dependem do tamanho da porção de alimento S e as quantidades de alimentos cada aluno consome. Nós impomos a restrição adicional de que nenhum estudante deveria ter que passar mais de 3 vezes para buscar alimentos.",
        "titulo": "Tamanho da Porção de Comida",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um inteiro N, (1 ≤ N ≤ 1000), que corresponde o número de alunos que comem na cantina. A próxima linha contém o valor de A e B (1 ≤ A, B ​​≤ 10). A terceira linha de cada caso de teste consiste de N inteiros Y1 , ..., Yn (1 ≤ Yi ≤ 100), onde Yi é a quantidade de comida estudante I consome. A entrada é terminada por N=0. OBS: Na primeira entrada, o tamanho ideal porção de alimentos é de 4,5. Note que o tamanho da porção de alimento, de 3 renderia um custo menor de 16, o quinto estudante, no entanto, teria que buscar comida 4 vezes."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1891",
        "saida": "Para cada instância, imprima em uma linha Y se for possível remover todas as moedas, ou N caso contrário. Se for possível remover todas as moedas, a linha seguinte deve conter uma lista de N inteiros separados por espaços, cada qual representando o número de uma moeda, indicando a sequência em que elas devem ser removidas. Caso haja mais de uma sequência possível, imprima a lexicograficamente menor.",
        "descricao": "Andréh e Andréas são dois amigos multiperitos que gostam muito de jogos. Sabendo que vários de seus amigos anseiam por uma viagem a Phuket, na Tailândia, Andréh e Andréas querem desafiar seus amigos em um tradicional jogo tailandês, o Kem Kradãn. Kem Kradãn (เกมกระดาน) é um jogo de tabuleiro tailandês existente desde o século II a.C. As peças do jogo são N moedas em que uma das faces é dourada e a outra é branca. Inicialmente as moedas são dispostas em linha sobre o tabuleiro e numeradas de 1 a N, da esquerda para a direita. Quando uma moeda de número i está com a face dourada exposta, ela pode ser retirada da mesa. Ao fazê-lo, as moedas de números i-1 e i+1, caso existam e ainda estejam no tabuleiro, são revertidas. Isto é, se estavam com a face dourada exposta, passam a ficar com a face branca exposta e vice-versa. O jogo consiste em tentar remover todas as moedas da mesa. Antes de desafiar seus amigos, Andréh e Andréas querem ter certeza que as configurações escolhidas para o desafio têm solução. Para ajudá-los, dada uma configuração inicial, você deve determinar se é possível remover todas as moedas e, se possível, mostrar como fazer isso.",
        "titulo": "Removendo Moedas no Kem Kradãn",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é dada por um inteiro N (0 ≤ N ≤ 105), representando o número de moedas, seguido por uma cadeia de comprimento N, formada pelos caracteres 'B' (face branca exposta) e 'D' (face dourada exposta), representando uma configuração inicial."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "2142",
        "saida": "Seu programa deve imprimir o percurso do pombo. O símbolo '*' indica o momento em que o pombo é alcançado e o símbolo '!', o momento em que ele é capturado. Caso ele saia da área de ação da esquadrilha, imprima: \"Raios! Raios Duplos! Raios Triplos!\". Não deve haver espaço em branco somente após o último caractere da última linha da matriz, que deve ser justificada.",
        "descricao": "A Esquadrilha Abutre está cansada de tentar caçar o pombo Doodle. Em vista disso, Dick Vigarista elaborou um plano de caça infalível, pelo menos em sua concepção. Toda vez que eles acionam o turbo de velocidade em suas máquinas voadoras, eles alcançam o pombo viajando uma quantidade a mais do que já viajaram, e conseguem finalmente pegá-lo quando viajam mais metade de onde já estão. Porém, se o pombo sair da área de ação da esquadrilha e, dessa forma, não for capturado, Dick Vigarista se irrita e resmunga, dizendo: \"Raios! Raios Duplos! Raios Triplos!\".",
        "titulo": "Pegue o Pombo!",
        "entrada": "A entrada tem vários casos de teste. Em cada, você deverá informar a área de ação da esquadrilha (25 ≤ A < 106), isto é, sempre um quadrado perfeito, e o momento em que o turbo é ativado. A entrada termina com fim de arquivo. O voo do pombo e da esquadrilha são espirais e iniciam sempre a partir do elemento central, que é o número 1."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1717",
        "saida": "Seu programa deve imprimir uma linha contendo um número real, com precisão de 4 casas decimais. O número deve ser o peso de uma decomposição de peso mínimo do polígono dado.",
        "descricao": "Todo polígono convexo, com 2N vértices, pode ser decomposto em N − 1 quadril ́ateros, fazendo-se N − 2 cortes em linha reta entre certos pares de vértices. A figura abaixo ilustra três diferentes decomposiçõoes do mesmo polígono com N = 5. O peso da decomposição é a soma dos comprimentos de seus N − 2 cortes. Seu programa deve computar o peso de uma decomposição de peso mínimo!",
        "titulo": "Corte",
        "entrada": "A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100). As 2N linhas seguintes contém cada uma dois números reais X e Y (0 ≤ X, Y ≤ 10000), com precisão de 4 casas decimais: as coordenadas dos 2N pontos, em sentido anti-horário, do polígono convexo."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1585",
        "saida": "Para cada caso de teste de entrada, imprima um valor inteiro (desconsiderando a parte decimal) correspondente a àrea da pipa criada, em cm2, seguido de um espaço e do texto \"cm2\", sem as aspas.",
        "descricao": "Anastácia adora construir pipas (ou pandorgas) para seus amigos. Pedro, que sabe disso, separou vários retalhos de bambus da fábrica de móveis de seu tio que seriam descartados para dar a Anastácia. Ao entregar os bambus à Anastácia, Pedro perguntou a ela qual era a maior pipa que poderia ser construída com aqueles retalhos de bambus. Anastácia, então, que não é muito boa em calcular, quer que você a ajude nesta tarefa. Obs.: Cada pipa é construída com dois pedaços de bambus amarrados em forma de cruz, formando um losango.",
        "titulo": "Fazendo Pandorgas",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de pipas que serão construídas. Cada uma das N linhas a seguir contém dois valores inteiros x (10 ≤ x ≤ 100) e y (10 ≤ y ≤ 100) que indicam o tamanho dos dois bambus utilizados para construir a pipa."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1893",
        "saida": "Baseado nos dois percentuais observados por Jade, imprima na tela a fase na qual a lua se encontrava na noite anterior, conforme o exemplo abaixo. Não esqueça de imprimir o caractere de fim de linha após a saída :).",
        "descricao": "Jade ganhou de presente de aniversário um telescópio e ficou muito feliz, pois adora olhar a lua à noite. Ela sempre foi uma estudante muito boa, e só analizando a lua por duas noites seguidas, já consegue identificar as mudanças que ocorreram na iluminação e o percentual aproximado da lua que está iluminada. Você, que é amigo da Jade e estuda Computação, resolveu fazer um pequeno programa que, baseado nesta avaliação que ela fez nas duas últimas noites, informa a fase na qual a lua se encontra. Se a porção visível da lua no momento estiver entre 0 e 2%, por exemplo, é lua nova, se for entre 3 e 96% é lua crescente, se for entre 97 e 100% é lua cheia e se for entre 96 e 3% (diminuindo) é lua minguante.",
        "titulo": "Fases da Lua",
        "entrada": "A entrada é composta por uma única linha contendo dois valores inteiros. O primeiro valor corresponde ao percentual observado por Jade na noite de dois dias atrás. O segundo valor corresponde ao percentual observado por jade na noite anterior."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1772",
        "saida": "Para cada caso de teste imprima uma linha contendo 3 inteiros separados por espaço: RES MAX MIN, onde RES representa o número N após as permutações, MIN representa o menor valor intermediário e MAX representa o maior valor intermediário. (MAX e MIN também devem considerar também os valores inicial e final de N).",
        "descricao": "Para descobrir se seus alunos realmente entenderam a aula de representação binária de números inteiros, o professor Marcelo mostrou o seguinte problema: “Dado um número inteiro e uma sequência de permutações dos bits de sua representação binária, encontre 3 números: o resultado final após todas as permutações, o maior e o menor valor encontrado durante as permutações”. O professor prometeu um ponto extra na média pra quem resolvesse o problema primeiro. Como ele nunca fez isso na vida (dar ponto extra), você se apressou pra resolver o mais rápido possível com medo que o professor mudasse de ideia.",
        "titulo": "Embaralhamento de Bits",
        "entrada": "A primeira linha de um caso de teste contém os inteiros N (0 ≤ N ≤ 232 - 1)e K (1 ≤ K ≤ 100), representando o número inicial e a quantidade de permutações, respectivamente. As K linhas seguintes conterão dois inteiros A e B separados por espaço (0 ≤ A, B ≤ 31), indicando que deve haver a permutação entre os bits A e B do número N. A entrada encerra com N = K = 0."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1320",
        "saida": "Para cada caso de teste, imprima uma única linha contendo as respostas para as Q consultas, na mesma ordem em que as consultas aparecem na entrada e separadas por um espaço em branco. Para cada consulta, você deve imprimir um caractere 'Y' se for possível chegar ao destino a partir da estação inicial usando o metrô, ou 'N' caso contrário.",
        "descricao": "O Rei da Logônia em breve irá inaugurar um novo e revolucionário metrô, baseado numa invenção dos Engenheiros Reais, que permite teletransporte. O novo metrô consiste de um longo túnel com uma estação a cada quilômetro. Existem também T teletransportadores, que estão localizados em algumas das estações. Em cada estação existe um teclado com T teclas, onde cada tecla corresponde a um teletransportador. A figura abaixo ilustra um sistema de metrô com três teletransportadores localizados nas estações marcadas como A, B e C. O metrô funciona da seguinte maneira: o usuário vai até uma estação (a estação inicial) e pressiona a tecla correspondente ao teletransportador que ele quer usar. O usuário então é teletransportado para a estação que está à mesma distância do teletransportador que a estação inicial, mas do lado oposto ao teletransportador. Mais precisamente, se a localização da estação inicial é i e o usuário pressiona a tecla correspondente ao teletransportador localizado na posição j, ele será levado à estação localizada na posição 2 x j - i. Por exemplo, se o usuário está na estação 6 e quer ir até a estação -2, ele pode usar o teletransportador C (e ir do 6 ao 10) e depois o teletransportador A (e ir do 10 ao -2). ​ O Rei, no entanto, sabe que é possível que não exista uma sequência de teletransportadores que leve um usuário de uma estação X até uma estação Y. Para evitar que os usuários tentem ir para um lugar inacessível, ele quer criar um programa disponível na Internet para os ajudar. O Rei quer que você escreva um programa que, dadas as posições de cada teletransportador, responda uma sequência de consultas. Para cada consulta, as estações inicial e final são dadas, e seu programa deve determinar se é possível para um usuário ir da estação inicial até a estação final.",
        "titulo": "Metrô Engenhoso",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros T e Q indicando, respectivamente, o número de teletransportadores (1 ≤ T ≤ 105) e o número de consultas (1 ≤ Q ≤ 10). A segunda linha contém T inteiros distintos ti indicando a posição do i-ésimo teletransportador (-107 ≤ ti ≤ 107). Cada uma das Q linhas seguintes descreve uma consulta e contém dois inteiros distintos S e D indicando a posição das estações inicial e final (-107 ≤ S, D ≤ 107). ​O último caso de teste é seguido de uma linha contendo dois zeros."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2179",
        "saida": "A saída consiste em 2 linhas. A primeira linha contém uma lista contendo as células da vizinhança, ordenadas pelo percurso que Batuke e separadas por um espaço em branco. A segunda linha mostra o número total de células percorridas por Batuke.",
        "descricao": "Batuke é um cachorro com comportamento repetitivo que tem uma rotina particular quando sai para caminhar na sua vizinhança. A vizinhança também é de certa forma particular: uma matriz N x N que batuke percorre rotineiramente em espiral. Batuke inicia percorrendo: 1 célula à direita, uma abaixo, seguida por duas à esquerda, duas acima, então 3 à direita, 3 para baixo, então 4, e assim por diante. Lucas (o dono de Batuke), leva Batuke de carro para a célula inicial e o cão sempre segue sua rotina de corrida pelas células de sua vizinhança. Por exemplo, se a vizinhança tem tamanho N = 4, as células são enumeradas como segue: e o percurso feito por Batuke, iniciando na célula 1,1 (célula superior esquerda é 0,0) é: 6,7,11,10,9,5,1,2,3,4,8,12,16,15,14,13 Neste caso, a rotina de Batuke o faz caminhar por 16 células no total. Mas Batuke não compreende nada sobre fronteiras e ele sempre faz sua rotina (mesmo se ele tem que caminhar por diversas células a mais), para atravessar todas as células da vizinhança. Se a célula inicial for 2,2 por exemplo, a travessia em espiral (apenas as células da vizinhança são mostradas) é: 11,12,16,15,14,10,6,7,8,13,9,5,1,2,3,4. Neste caso, Batuke caminha por 24 células no total. Lucas sabe que você está estudando Computação e ele pediu a você um programa para resolver este problema: dado a vizinhança de N linhas por N colunas e uma célula inicial, você deverá mostrar o percurso em espiral e o total células percorridas.",
        "titulo": "Batuke",
        "entrada": "A entrada consiste em três números inteiros: N (2 < N ≤ 10 ), F e C. N é o número de linhas na vizinhança (células enumeradas em 1..NxN, por linhas, da esquerda para a direita). F e C indica linha e coluna aonde Batuke inicia o seu percurso."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1883",
        "saida": "Para cada instância, imprima uma linha contendo um único caractere. Imprima 'Y' se a pessoa teve alguma chance de ter sido perdoada; caso contrário, imprima 'N'.",
        "descricao": "Ayutthaya foi um dos primeiros reinos da Tailândia. Ele existiu entre os anos 1351 e 1767. A organização de Investigadores de Mistérios Extraordinários (IME) tem um grande interesse em revelar os segredos dessa antiga civilização. Um dos historiadores mais renomeados dessa instituição é Márcio \"o imprescindível\" Himura. Atualmente, ele está investigando as regras de conduta e os castigos que eram impostos na época do rei Ramathibodi I, fundador de Ayutthaya. Descobertas recentes mostram uma forma de punição dada aos habitantes de Ayutthaya que não se convertiam ao budismo theravada, religião que foi adotada pelo rei Ramathibodi I. Esse castigo consistia em deixar a pessoa presa em uma sala que tinha uma única saída, e onde era aceso fogo em diferentes lugares. Se a pessoa conseguia chegar à saída antes de ser atingida pelo fogo, sua vida era perdoada. Márcio tem acesso a diferentes registros que mostram a estrutura de algumas salas onde eram feitos esses castigos. Porém, não existem documentos onde se registre se a pessoa punida foi perdoada ou não. Márcio gostaria de saber se para cada uma dessas pessoas existe alguma chance de ela ter sido perdoada. Para isso, Márcio representou cada sala como uma grade de N linhas e M colunas onde cada posição contém um símbolo com o seguinte significado onde \"início\" se refere à posição da pessoa dentro da sala quando o fogo foi aceso. Além disso, Márcio impôs as seguintes restrições para modelar cada situação: O fogo se propaga nas quatro direções cardinais (N, S, E, O) à velocidade de uma célula por minuto. A pessoa presa também se move em essas quatro direções com essa mesma velocidade. Nem o fogo e nem a pessoa presa podem ultrapassar uma parede. Se a pessoa e o fogo chegarem a ocupar a mesma posição no mesmo instante de tempo, então considera-se que essa pessoa morre instantaneamente. Você é um membro do IME e Márcio quer saber se você merece tal distinção. Por isso, encarregou a você a tarefa de determinar se um preso teve a chance de ser perdoado.",
        "titulo": "Fuga de Ayutthaya",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de diversas linhas. A primeira linha contém dois inteiros, N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 103) . A seguintes N linhas contêm exatamente M símbolos representando, como descrito no enunciado, uma sala onde uma pessoa foi presa."
    },
    {
        "nivel": "9",
        "assunto": "2",
        "numero": "1339",
        "saida": "Para cada caso de teste seu programa deverá imprimir uma linha. Se seu avô estiver correto, imprima “Yes grandpa!”, caso contrário imprima “No, you are wrong!”.",
        "descricao": "O famoso brinquedo/passatempo, chamado Cubo Mágico, consiste em um cubo como mostrado na Figura 1a, onde letras representam cores (e.g. B para azul, R para vermelho). O objetivo do jogo é rotacionar as faces do cubo de modo que no final cada face do cubo contenha uma cor diferente, como mostrado na Figura 1b. Note que,   (a) Embaralhado                               (b) Posição vencedora Figura 1: Cubo Mágico quando uma face é rotacionada, as configurações das cores em todas as faces adjacentes trocam. Figura 2a ilustra a rotação de uma das faces. Dada uma configuração embaralhada, chegar até a posição final pode ser bem desafiador, como você já deve saber. Figura 2: Exemplo de rotação Mas seu avô tem muitos anos de experiência, e diz que, dada qualquer configuração do Cubo Mágico, ele consegue apresentar uma sequência de rotações que levam a uma configuração vencedora. Para que todas as faces do cubo estejam visíveis, nós iremos representar o cubo como mostrado na Figura 3a. As seis cores são Amarelo, Vermelho, Azul, Verde, Branco e Magenta, representadas pelas respectivas letras, Y, R, B, G, W e M. Você receberá uma configuração inicial e uma lista de rotações. Uma rotação será representada por um valor inteiro, indicando a face que será rotacionada e a direção da rotação (um valor positivo significa rotação no sentido horário, um valor negativo significa rotação no sentido anti-horário). As faces do cubo são numeradas como mostrado na Figura 3b. Você deverá escrever um programa que checa se a lista de rotações irá levar a uma configuração vencedora.         (a) Cores                                                    (b) Identificadores de face para rotação Figura 3: Representação do cubo",
        "titulo": "O Cubo Mágico do Avô",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha da entrada é um inteiro que indica o número de testes. Cada descrição do teste contém dez linhas de entrada. As primeiras nove linhas do teste irão descrever a configuração inicial, no formato mostrado na Figura 3a. A próxima linha irá conter uma lista de rotações, terminando com o valor 0."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1919",
        "saida": "Para cada caso, exiba lexicograficamente o(s) conjunto(s) de valores {a, b, c, d, e} que resolvem o enigma do professor Girafales, ou “impossivel” caso não exista solução. Deixe uma linha em branco após cada caso de teste. Observe a formatação de saída.",
        "descricao": "Depois de Professor Girafales descobrir que Nhonho faltava às aulas e pedia para Chaves assinar seu nome na lista de presença em troca de um pão com presunto, Nhonho começou a receber toda semana um desafio especial do professor, e se ele não os resolvesse, seria dedurado para seu pai. O desafio dessa semana se chama “Soma permutada”, e consiste em resolver o seguinte enigma: abc + acb + bac + bca + cab + cba = K, dado um valor de K, sem que ocorram repetições de dígitos (a ≠ b ≠ c). Com K = 1332, uma das possíveis soluções seria usar a = 1, b = 2 e c = 3, somando suas permutações: 123 + 132 + 213 + 231 + 312 + 321 = 1332. Outra solução seria: a = 0, b = 1, c = 5: 015 + 051 + 105 + 150 + 501 + 510 = 1332. As explicações acima usaram apenas 3 dígitos para maior facilidade de entendimento, o problema real, que Professor Girafales passou a Nhonho e você terá que ajudá-lo a resolver, consiste em 5 dígitos, e deverá ser somada todas suas permutações (abcde + abced + ..... + edcba), sem repetição de dígitos (a ≠ b ≠ c ≠ d ≠ e). Dado o valor de K, exiba, lexicograficamente, todos os possíveis conjuntos de números que satisfaçam o enigma de Girafales.",
        "titulo": "Ajude Nhonho",
        "entrada": "A primeira linha da entrada possui um inteiro T, indicando a quantidade de casos de testes. Cada uma das T linhas a seguir contém um inteiro K (1 ≤ K ≤ 107), como descrito acima."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2125",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, em que k é o número da instância atual. Imprima a lista de todas ocorrências linha coluna (o canto superior esquerdo é a posição 0 0) do quadrado m × m no quadrado n × n. A saída deve estar ordenada primeiro pelas colunas e em seguida pelas linhas. Caso não tenha nenhuma ocorrência, imprima uma linha com nenhuma ocorrência.",
        "descricao": "Várias civilizações pré-colombianas habitaram a região de Alberta, Canadá. Pouco restou destas culturas, dizimadas pelo frio intenso, pelos ursos e, finalmente, pelos invasores ingleses e franceses que chegaram depois do descobrimento. Hoje, pesquisadores da Universidade de Alberta tentam desvendar os mistérios destes povos, estudando os totens produzidos na região. Estudos do departamento de artes da universidade mostraram que os construtores de totens gostavam de marcá-los com várias cópias de suas assinaturas. A assinatura do artista era feita com sulcos verticais “|” e horizontais “_”. Estudiosos imaginam que o símbolo era uma representação do mal na cultura primitiva e, portanto, tabu, construindo um padrão quadrado. Já foram identificadas várias assinaturas de artistas daquela época. Sua tarefa neste problema é fazer um programa que recebe o desenho de um totem, através de um padrão quadrado de tamanho n × n de sulcos verticais e horizontais, e uma assinatura quadrada de tamanho m × m com um padrão do mesmo tipo, e encontrar todas as ocorrências da assinatura no totem.",
        "titulo": "Construtores de Totens",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em dois inteiros n (1 ≤ n ≤1000) e m (1 ≤ m ≤ 60 e m < n), indicando os tamanhos dos quadrados. Nas n linhas seguintes temos n caracteres \"|\" ou \"_\" que representam os caracteres do quadrado n × n. Nas m linhas seguintes temos m caracteres \"|\" ou \"_\" que representam os caracteres do quadrado m × m."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2193",
        "saida": "For each test case, display its case number followed by one of the following three messages: “equivalent solutions” to indicate that there are one or more valid transformations, and all of them have the same effect on the whole drawing (no matter what the whole drawing looks like). “inconsistent solutions” to indicate that there are several valid transformations, but in general not all of them map the entire drawing in the same way (some drawing is mapped differently by two valid transformations). “no solution” to indicate that neither of the first two cases occurs. A valid transformation is a combination of rotation, translation and scaling (or rotation, scaling and translation) which satisfies the restrictions described above and maps the initial set of red dots to the final set (occupying all three final locations). Follow the format of the sample output.",
        "descricao": "Tess L. Ation ran into a little problem last week when she demonstrated the beta version of her new drawing software. On the screen she had an elegant demonstration design that illustrated every feature of her program; it had taken her hours to produce it. She was just putting the finishing touches on it as a group of potential investors entered the room to see the demonstration. The presentation went well. Near the end, Tess clicked on a control panel button and told her audience, “This is the ‘snap to grid’ control. It forces control points, such as vertices, to jump to the nearest grid point. Here, let me show you,” and she placed three bright red dots on the screen. Each one appeared at the grid point nearest to where she clicked. (“Luckily all control points in my demo design were already at integer coordinates. But I will have to remember to delete these three red dots before I save my diagram,” she thought to herself.) “Now I’ll step into the next room and get out of your way so you can discuss the system among yourselves and get a closer look at the screen, but please don’t touch anything, since I haven’t saved that file yet.” A few minutes later, the group joined Tess. One of the visitors stepped up to Tess and said, “I hope you don’t mind, but I wanted to try it myself. Don’t worry, I just played with the x-scale and y-scale controls a little bit.” The next person said, “Sorry if this is a problem, but I really wanted to get a feel for the speed of display, so I just played around with the translation tool.” And a third person said, “I couldn’t resist just one tiny test: I rotated the image just so I could see all of the vertices snap to the nearest grid points after the rotation.” The person who played with the rotation tool remembered going first, but the other two could not recall their order. The three remembered only a few details of the changes. The x- and y-scaling factors had been (possibly negative) nonzero integers; the center of scaling was the origin (0, 0). The x- and y-translation amounts had been integers. Rotation had been specified by a point with integer coordinates (x, y) on the perimeter of a square of width 20 centered at the origin (hence, −10 ≤ x, y ≤ 10 and the absolute value of x or y or both was 10). The tool rotated the drawing around the origin such that the positive x-axis would pass through (x, y) afterwards. Snapping took place after this rotation (coordinates with a fractional part of 0.5 were rounded away from zero). After they left, Tess looked at her design – it was completely changed! She had not yet implemented the “undo” feature, and she had not saved the diagram prior to giving the demonstration. However, the three identical red dots were still there (transformed to other integer grid locations, of course), and Tess could remember the integer coordinates where she had originally placed them. Obviously, someone else might have altered the drawing without saying anything to her, but she could write a program to see if it was possible to reconstruct the sequence of alterations. Can you too?",
        "titulo": "Affine Mess",
        "entrada": "The input contains several test cases. Each test case consists of six pairs of integers xi and yi (−500 ≤ xi , yi ≤ 500 for 1 ≤ i ≤ 6), three pairs per input line. The first three pairs represent the distinct initial locations of the three red dots. The last three pairs represent the distinct final locations of the three dots. The indexing of the pairs in each group of three is not significant: for example, (x1, y1) could have been mapped to any of (x4, y4), (x5, y5) or (x6, y6). The last test case is followed by a line with six zeros."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1546",
        "saida": "Para cada caso de teste você deve imprimir o nome do membro da equipe responsável por responder o feedback.",
        "descricao": "Muitos alunos de diversas universidades conhecem o portal de programação IRU. Este portal possui milhares de problemas de programação disponíveis. Diariamente a equipe do IRU recebe diversos feedbacks (elogios, bugs, dúvidas, sugestões, ...) que precisam primeiramente ser atribuídos para membros da equipe resolver. Como a equipe é muito ocupada e não tem tempo para classificar estes feedbacks, você foi convidado a escrever um programa que faça isso e mostre quem será o membro responsável por resolver e responder o feedback. Os membros responsáveis em cada setor são: Elogios: Rolien Bugs: Naej Dúvidas: Elehcim Sugestões: Odranoel",
        "titulo": "Feedback",
        "entrada": "O primeiro valor a ser lido é o número de casos de teste N (1 < N < 100). Cada caso de teste representa um dia de trabalho respondendo feedbacks. Cada caso de teste inicia com K (1 < K < 50), indicando o número de feedbacks recebidos naquela data. Seguem K linhas indicando a categoria de cada um dos feedbacks, conforme mostrado acima (1, 2, 3 ou 4)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1899",
        "saida": "Imprima uma única linha contendo Y se é possível acertar o alvo, ou N caso contrário.",
        "descricao": "\"Acerte o Alvo!\" é um jogo muito popular na Nlogônia.  As regras do jogo são muito simples. Há uma bola no chão. Além disso, existe uma parede a DT metros de distância da bola, a qual contém um alvo. O alvo começa a AT metros do chão, e termina a BT metros do chão (logo, o comprimento do alvo é de BT-AT metros). Você deve chutar a bola em alguma direção. A bola irá seguir uma linha reta na direção em que for chutada. O objetivo do jogo é chutar a bola em uma direção tal que ela acerte qualquer ponto do alvo. Entretanto, há também N paredes entre a bola e o alvo. A parede i (1 ≤ i ≤ N) está a Di metros de distância da bola. Existe apenas uma abertura em cada parede. A parede i tem uma abertura começando a Ai metros do chão e terminando a Bi metros do chão. Naturalmente, a bola deve passar por todas as aberturas e acertar o alvo. No caso da bola passar exatamente em um ponto no qual uma abertura começa ou termina (isto é, a Ai ou Bi metros do chão), considere que a bola passa pela abertura com sucesso. Dependendo das posições das paredes e das aberturas, pode não haver uma maneira de acertar o alvo. Sua tarefa é determinar se é possível acertar o alvo ou não. A imagem a seguir mostra o primeiro exemplo de entrada e uma rota possível para a bola, provando que é possível acertar o alvo neste caso.",
        "titulo": "Acerte o Alvo!",
        "entrada": "A primeira linha contém o inteiro N (0 ≤ N ≤ 1000). As próximas N linhas contém três inteiros cada, descrevendo as paredes. A linha i (1 ≤ i ≤ N) contém os inteiros Di, Ai e Bi (1 ≤ Di ≤ 104, 1 ≤ Ai < Bi ≤ 104). A última linha contém três inteiros DT, AT e BT (1 ≤ DT ≤ 104, 1 ≤ AT < BT ≤ 104). Você pode assumir que D1 < D2 < ... < DN < DT."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1431",
        "saida": "Para cada caso de teste, imprima uma única linha com um único inteiro representando o menor valor para a diferença acumulada se T for escolhido de forma ótima.",
        "descricao": "No ensino médio da América Latina, Klingon se tornou tão popular que muitos dos estudantes começaram a aprender essa língua artificial por conta própria. Após tomar conhecimento da situação, os diretores deciriram implementar cursos formais de Klingon. O problema é que as crianças possuem diferentes níveis iniciais da linguagem. Sendo assim, os diretores decidiram oferecer dois níveis de curso: básico e avançado. A escola possui diversas divisões, com cada estudante pertencendo a exatamente uma divisão. Devido à burocracia e conflitos de agenda, estudantes de divisões diferentes não podem fazer parte do mesmo curso. Além disso, para ser justo, os níveis básico e avançado devem ser oferecidos a todas as divisões, e ter o mesmo nível de dificuldade em uma divisão. Sendo assim, cada divisão será particionada em dois grupos: um grupo será associado ao nível básico e o outro grupo ao nível avançado. É possível que uma divisão não possua nenhum estudante em um dos níveis. Para definir os grupos, um teste de Klingon foi aplicado previamente a todos os estudantes da escola, cada um tirando uma nota entre 0 e 1000, inclusive. Os diretores da escola decidiram que todos os estudantes com uma nota maior ou igual a algum valor T serão matriculados no nível avançado, e todos os estudantes com nota menor que T serão matriculados no nível básico. No entanto, eles não conseguiram decidir o melhor valor de T. Eles gostariam de um valor que dividisse igualmente todas as divisões. Para isso, eles bolaram uma métrica: eles querem o valor de T que minimize a diferença acumulada, ou seja, a soma da diferença entre o número de estudantes nos dois grupos (básico e avançado) em cada divisão. Por exemplo, se a escola possui duas divisões, onde uma divisão possui 10 estudantes no nível básico e 20 no nível avançado, enquanto a outra possui 17 e 15, respectivamente, a diferença acumulada seria |10 - 20| + |17 - 15| = 12;",
        "titulo": "Níveis de Klingon",
        "entrada": "A entrada contém vários casos de teste. Cada caso é dado em várias linhas. A primeira linha de cada caso de teste contém um único inteiro N (1 ≤ N ≤ 104), o número de divisões na escola. 2 x N linhas seguem, com cada divisão sendo descrita em duas linhas consecutivas. A primeira linha de cada par contém um único inteiro Ki (1 ≤ Ki ≤ 104), o número de estudantes na divisão i. A segunda linha contém Ki inteiros entre 0 e 1000, inclusive, separados por espaços simples, representando as notas de cada um dos estudantes da divisão i. Você pode assumir que o número total de estudantes em cada caso de teste (ou seja, a soma de todos Ki) não é maior que 105. O último caso de teste é seguido de uma linha contendo um único zero."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1553",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de perguntas que serão adicionadas na nova sessão do site.",
        "descricao": "Muitos sites na internet adicionam uma sessão chamada “Perguntas mais Frequentes” que, como o nome já diz, contém as perguntas mais feitas pelos usuários que utilizam o site. O portal do URI costuma receber muitas perguntas de seus usuários, então Neilor imaginou que seria uma boa ideia adicionar uma sessão de Perguntas mais Frequentes no site. Como o Neilor anda muito ocupado ultimamente, ele pediu a sua ajuda para adicionar essa sessão. Dados os identificadores de perguntas feitas pelos usuários, diga o número de perguntas que serão adicionadas na nova sessão do site. Uma pergunta é classificada como “frequente” quando ela é feita ao menos K vezes.",
        "titulo": "Perguntas mais Frequentes",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e K (1 ≤ N ≤ 1000, 1 ≤ K ≤ 100), indicando o número de perguntas realizadas, e o número de vezes que uma pergunta deve ser feita para ser considerada “frequente”, respectivamente. Em seguida haverá N inteiros P (1 ≤ P ≤ 100), cada um indicando o número de uma determinada pergunta. O último caso de teste é indicado quando N = K = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1884",
        "saida": "Para cada instância, imprima uma linha contendo 'Y' se for possível que Nai Khanom Tom vença todos os Rajasis; imprima 'N' caso contrário.",
        "descricao": "O Muay Thai é uma arte marcial originária da Tailândia. Muitos praticantes dessa arte são considerados lendas pelo povo tailandês. Dentre todos eles, Nai Khanom Tom é considerado o \"pai\" do muay thai. A seguinte história faz parte da lenda desse lutador. O rei Mangra da Birmânia organizou uma luta entre um preso de guerra tailandês e um guerreiro birmano para decidir qual tinha o melhor estilo de luta. Nai Khanom Tom foi escolhido para lutar e derrotou com muita facilidade seu adversário. Porém, o árbitro da luta alegou que isso aconteceu pela dança (Ram Muay) feita por Nai Khanom Tom. Por isso, o rei mandou a que Nai lutasse contra dez guerreiros birmanos, um após o outro. Ainda assim, o resultado foi o mesmo, Nai Khanom Tom venceu todos. Após ver as habilidades de Nai, o rei Mangra concedeu-lhe a liberdade. Essa história passou de geração a geração. Existem até pessoas que acreditam que Nai Khanom Tom podia vencer qualquer quantidade de adversários, incluindo seres da mitologia tailandesa. Você é um grande fã do muay thai e deseja testar a veracidade dessa afirmação. Suponha que Nai Khanom Tom possui H pontos de vida e tem que lutar contra N Rajasis. Cada um deles possui xi pontos de vida e yi pontos de recuperação. Para vencer uma luta, os pontos de vida de Nai devem de ser maiores do que os pontos de vida do Rajasi. Após lutar, Nai perde xi pontos de vida e recupera yi pontos em seguida. Além disso, pelo seu treinamento Nai conhece K feitiços que podem ser usados para derrotar um Rajasi instantaneamente. Porém, nesse caso, ele não perde nem ganha os pontos de vida como o caso anterior. Agora, chegou a sua oportunidade de provar essa hipótese. Dada a descrição de um conjunto de N Rajasis, você deve responder se Nai Khanom Tom pode vencer todos eles. Note que Nai Khanom Tom pode lutar com os Rajasis na ordem que ele quiser.",
        "titulo": "Lutando Contra os Rajasi",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém 3 inteiros, N (1 ≤ N ≤ 2000), H (0 ≤ H < 109) e K (1 ≤ K ≤ 2000), onde H representa o valor inicial dos pontos de vida. Cada uma das N linhas seguintes contém 2 inteiros, xi e yi (1 ≤ xi, yi < 109)."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "2010",
        "saida": "Para cada caso de teste na entrada, há a saída de uma linha com um inteiro que representa a quantidade mínima de dinheiro do jogo que é necessário para concluir todos os níveis de N no jogo. Se é impossível completar todos os níveis, escreva o valor \"-1\".",
        "descricao": "A Incrível Companhia de Produção de Consoles (ICPC) está agora a projetar o seu mais novo console de videogame modelo, o Super-Arcade Reloaded (SAR). O lançamento do SAR será acompanhado pela liberação de um jogo carro-chefe, que só estará disponível para os seus usuários. Este jogo, que, aliás, será chamado \"Aventuras do Capitão Mikado (ACM)\" e o mesmo dispõe de uma moeda do jogo que pode ser convenientemente comprado com o dinheiro do mundo real! O ACM é um jogo muito simples que consiste em níveis de N numerados 1, 2,. . . , N. O nível i-th requer exatamente Ei unidades de energia para ser concluída. Isto significa que, a fim de completar esse nível, o utilizador deve ter pelo menos Ei de energia, e depois de fazê-lo, vai diminuir exatamente esse montante. Para ganhar o jogo o usuário deve completar todos os níveis, em ordem crescente, começando no nível 1 e continuando até nível N, sem nunca voltar para algum nível já concluído. Inicialmente, o usuário começa com nenhuma energia, e, a fim de obter alguma ele deve comprar pacotes de energia das lojas distribuídas entre os N níveis. Há M lojas. Cada loja vende um pacote de energia tendo um teor S e um custo C que variam a cada loja. O usuário só pode comprar pacotes de energia das lojas do nível que ele está atualmente antes de começar a completar esse nível. O efeito de uma compra de pacote de energia de força S é que a energia do usuário se transforma imediatamente em S, independentemente do valor que tinha antes. A fim de aumentar ainda mais as suas vendas, o ICPC tem o pensamento de uma promoção revolucionária: ela vai reembolsar o custo total da SAR para quem completa o jogo ACM usando o mínimo de quantidade de dinheiro no jogo. Dada a descrição do jogo, você pode ajudá-los a descobrir o que é a quantidade mínima de dinheiro necessário para terminar o jogo?",
        "titulo": "Mantenha Isso Energizado",
        "entrada": "A entrada contém vários casos de teste; cada caso de teste é formatado como segue. A primeira linha contém dois inteiros N e M, representando respectivamente o número de níveis e o número de lojas no jogo (1 ≤ N, M ≤ 105). A segunda linha contém N inteiros E1, E2. . . , EN, onde Ei é a energia necessária para completar o nível i-th (1 ≤ Ei ≤ 104 para i = 1, 2,. . . , N). Cada uma das próximas M linhas descreve uma loja com três inteiros L, S e C, que representam, respectivamente, o nível em que a loja está localizada, a força e o custo da energia vendida (1 ≤ L ≤ N, 1 ≤ S ≤ 109 e 1 ≤ C ≤ 104)."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1127",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um caractere: ‘S’ caso o trecho realmente tenha sido plagiado pela música ou ‘N’ caso contrário.",
        "descricao": "As notas musicais são unidades básicas da música ocidental tradicional. Cada nota está associada a uma frequência. Duas notas musicais cujas frequêcias fundamentais tenham uma relação de potência de 2 (uma metade da outra, uma duas vezes a outra, etc.) são percebidas como muito similar. Por isso, todas as notas com esse tipo de relação recebem o mesmo nome, como descrito a seguir. Há doze notas básicas, em uma sequência crescente de frequências, cada nota separada da anterior por uma mesma distância na escala musical (essa distância é chamada de meio-tom). Sete dessas doze notas são representadas por letras do alfabeto (A, B, C, D, E, F e G). A tabela abaixo mostra a distância, em meio-tons, entre essas notas. Note que há cinco notas que não são representadas pelas letras do alfabeto: as que estão entre A e B, entre C e D, entre D e E, entre F e G e entre G e A. As notas podem ser modificadas por duas alterações cromáticas: sustenido e bemol, representadas respectivamente pelos símbolos ‘#’ e ‘b’. Sustenido altera a nota em meio tom para cima, e bemol altera a nota em meio tom para baixo. Uma nota com alteração cromática é denotada pelo nome da nota seguida pelo símbolo da alteração. Note que com esse esquema conseguimos representar todas as doze notas. A figura abaixo ilustra o nome das notas, segundo o esquema descrito acima, em um trecho de teclado de piano. Uma melodia pode ser representada por uma sequência de notas musicais. Por exemplo, A   A   D   C#   C#   D   E   E   E   F#   A   D   G#   A é uma melodia muito conhecida. Note no entanto que, como as distâncias entre os meios-tons são sempre iguais, a mesma melodia pode ser escrita iniciando em outra nota (dizemos que a melodia está em outro tom): B   B   E   D#   D#   E   Gb   Gb   Gb   G#   B   E   A#   B Sua vizinha é uma famosa compositora que suspeita que tenham plagiado uma de suas músicas. Ela pediu a sua ajuda para escrever um programa que, dada a sequência de notas da melodia de sua música, e a sequência de notas de um trecho de melodia suspeito, verifique se o trecho supeito ocorre, em algum tom, na música dada.",
        "titulo": "Plágio Musical",
        "entrada": "A entrada é composta por vários casos de teste. A primeira linha de um caso de teste contém dois inteiros M e T (1 ≤ M ≤ 100000, 1 ≤ T ≤ 10000, T ≤ M ), indicando respectivamente o número de notas da música e do trecho suspeito de ter sido plagiado. As duas linhas seguintes contém M e T notas, respectivamente, indicando as notas da música e do trecho suspeito. As notas em cada linha são separadas por espaço; cada nota é uma dentre ‘A’, ‘B’, ‘C’, ‘D’, ‘E’, ‘F’ ou ‘G’, possivelmente seguida de um modificador: ‘#’ para um sustenido ou ‘b’ para um bemol. O último caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1426",
        "saida": "Para cada caso de teste, a saída deve ser formada por 9 linhas descrevendo os números de todos os tijolos da parede. Assim, a i-ésima linha deve conter os números correspondentes aos i tijolos da i-ésima linha da parede, da esquerda para a direita, separados por um espaço.",
        "descricao": "Não, não é \"mais um tijolo na parede\", é apenas um problema sobre somar números. Suponha que você tem uma parede com o formato de um triângulo, como a mostrada abaixo. A parede tem 9 linhas, e a i-ésima linha tem exatamente i tijolos, considerando que a linha mais acima é a 1ª e que a mais abaixo é a 9ª. Alguns tijolos são rotulados com um número, enquanto os demais estão em branco. Os tijolos rotulados aparecem apenas em linhas ímpares, e ocupam posições ímpares dentro das suas linhas. ​ O problema que você deve resolver consiste em rotular os tijolos em branco com números, de tal forma que a seguinte regra seja satisfeita: O número de um tijolo é igual à soma dos números dos dois tijolos abaixo dele. Obviamente, esta regra não é aplicada à 9ª linha. Todos os números devem ser inteiros. Nota: O exemplo de entrada contém dois casos de teste. O primeiro dele corresponde à parede mostrada acima.",
        "titulo": "Coloque Tijolos na Parede",
        "entrada": "A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste. Esta linha é seguida pelos casos de teste. Cada caso é descrito por 5 linhas. Essas linhas correspondem às linhas ímpares da parede, de cima para baixo, como descrito acima. Cada linha contém os números nos tijolos já rotulados da linha correspondente na parede, da esquerda para a direita, separados por um espaço em branco. Você pode assumir que todo caso de teste é correto, isto é, existe uma solução para o problema descrito."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1574",
        "saida": "Para cada caso de teste, imprima a posição final do robô. Note que após processar cada caso de teste, o robô deve ter sua posição inicial resetada para a origem.",
        "descricao": "Você possui um robô na origem do eixo x. O robô receberá algumas instruções. Sua tarefa é predizer sua posição depois de executar todas as instruções. LEFT: move uma unidade para a esquerda (diminui p em 1, onde p é a posição do robô antes de mover) RIGHT: move uma unidade para a direita (incrementa p em 1) SAME AS i: executa a mesma ação que na i-ésima instrução. É garantido que i é um inteiro positivo não maior que o número de instruções já executadas.",
        "titulo": "Instruções do Robô",
        "entrada": "A primeira linha contém o número de casos de testes T (T <= 100). Cada caso de teste inicia com um inteiro n ( 1 <= n <= 100), o número de instruções. Cada uma das n linhas seguintes contém uma instrução."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1091",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma linha contendo: a palavra divisa se a residência encontra-se em cima de uma das linhas divisórias (norte-sul ou leste-oeste); NO se a residência encontra-se na Nlogônia do Noroeste; NE se a residência encontra-se na Nlogônia do Nordeste; SE se a residência encontra-se na Nlogônia do Sudeste; SO se a residência encontra-se na Nlogônia do Sudoeste.",
        "descricao": "Depois de séculos de escaramuças entre os quatro povos habitantes da Nlogônia, e de dezenas de anos de negociações envolvendo diplomatas, políticos e as forças armadas de todas as partes interessadas, com a intermediação da ONU, OTAN, G7 e SBC, foi finalmente decidida e aceita por todos a maneira de dividir o país em quatro territórios independentes. Ficou decidido que um ponto, denominado ponto divisor, cujas coordenadas foram estabelecidas nas negociações, definiria a divisão do país, da seguinte maneira. Duas linhas, ambas contendo o ponto divisor, uma na direção norte-sul e uma na direção leste-oeste, seriam traçadas no mapa, dividindo o país em quatro novos países. Iniciando no quadrante mais ao norte e mais ao oeste, em sentido horário, os novos países seriam chamados de Nlogônia do Noroeste, Nlogônia do Nordeste, Nlogônia do Sudeste e Nlogônia do Sudoeste. A ONU determinou que fosse disponibilizada uma página na Internet para que os habitantes pudessem consultar em qual dos novos países suas residências estão, e você foi contratado para ajudar a implementar o sistema.",
        "titulo": "Divisão da Nlogônia",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro K indicando o número de consultas que serão realizadas (0 < K ≤ 103). A segunda linha de um caso de teste contém dois números inteiros N e M representando as coordenadas do ponto divisor (-104 < N, M < 104). Cada uma das K linhas seguintes contém dois inteiros X e Y representando as coordenadas de uma residência (-104 ≤ X, Y ≤ 104).Em todas as coordenadas dadas, o primeiro valor  corresponde à direção leste-oeste, e o segundo valor corresponde à direção norte-sul. O final da entrada é indicado por uma linha que contém apenas o número zero."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2058",
        "saida": "A saída é o número mínimo de triângulos necessários para compor um polígono regular de N lados.",
        "descricao": "O professor Rafael adora computação gráfica. Ele gosta muito de renderizar objetos, especialmente bonecas. Mas ele não gosta de desenhar polígonos regulares usando triângulos. Fazer isso consiste em compor um polígono regular usando apenas triângulos, de forma que os triângulos não se interceptem e se utilize o menor número possível de triângulos na composição. Veja um quadrado e um pentágono com os triângulos na figura. O professor Rafael pediu para você calcular qual o número mínimo de triângulos necessários para compor um polígono regular de N lados.",
        "titulo": "Triângulos e Polígonos Regulares",
        "entrada": "A entrada é composta por um número N (3 ≤ N ≤ 109), que indica o número de lados de um polígono regular."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1817",
        "saida": "Para cada par de sequências, doravante denominadas instância, você deverá imprimir um identificador \"Instância h\", em que h é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir o número de vezes que a sequência menor ocorre como subsequência da maior. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "A região de Tsing Ling é internacionalmente famosa por grandes achados arqueológicos. Alguns desses achados, como as ruínas de Tsé Lung Zhao, desafiam os melhores cientistas do mundo. Encravados nessas ruínas foram encontrados vários pares de sequências de caracteres de significados desconhecidos, e tal fato tornou-se o maior enigma de Tsing Ling. Cada par tem uma sequência menor e uma maior. Acima do portal do mosteiro de Tsing Ling está escrito que aquele que descobrir o significado das sequências terá a resposta para todas as perguntas do universo. O arqueólogo alemão Harry Thanan Gruber acha que descobriu o enigma, mas para isso precisa da ajuda de vocês neste problema. Ele acha que a solução do enigma dos caracteres de Tsé Lung Zhao fornecerão os números para decifrar o livro de Tsin Wu, achado na mesma região pelo seu orientador, Dr. Cauchy-Schwartz, no fim do século XIX. Segundo a conjectura de Herr Gruber, a sequência de números que deve ser usada para decifrar o enigma é dada pelo número de vezes em que cada sequência menor ocorre na maior como subsequência.",
        "titulo": "Arqueólogos de Tsing Ling",
        "entrada": "São dados vários pares de sequências. Para cada par é dado o número 0 ≤ m ≤ 100 de caracteres na sequência menor ou igual e o número 0 ≤ n ≤ 1000 de caracteres na sequência maior. Nas linhas seguintes são dadas as duas sequências, uma por linha, primeiro a menor e depois a maior. Valores m = n = 0 indicam o final dos dados."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1652",
        "saida": "Imprima N linhas na saída, onde a i-ésima linha é a forma plural da i-ésima palavra de entrada.",
        "descricao": "Sra. Deli está trabalhando em uma casa de mercearias finas \"Deli Deli\". No ano passado, a Sra. Deli decidiu expandir seu negócio e construir uma loja online. Ela contratou um programador que implementou a loja online. Recentemente alguns de seus novos clientes online reclamaram das notas fiscais eletrônicas. O programador esqueceu-se de usar o plural, no caso em que um item é comprado várias vezes. Infelizmente o programador da Sra. Deli está de férias e agora é sua tarefa de implementar esse recurso para a Sra. Deli. Aqui está uma descrição de como fazer o plural: Se a palavra está na lista de palavras irregulares substitua-a com o plural dado. Senão se a palavra termina em uma consoante seguida por \"y\", substitua \"y\" por \"ies\". Senão se a palavra termina em \"o\", \"s\", \"ch\", \"sh\" ou \"x\", acrescente \"es\" à palavra. Senão acrescente \"s\" à palavra.",
        "titulo": "Deli Deli",
        "entrada": "A primeira linha do arquivo de entrada consiste de dois inteiros L e N (0 ≤ L ≤ 20, 1 ≤ N ≤ 100). As seguintes L linhas contém a descrição das palavras irregulares e sua forma plural. Cada linha é composta de duas palavras separadas por um caractere de espaço, onde a primeira palavra é o singular, a segunda palavra é a forma plural de uma palavra irregular. Depois da lista de palavras irregulares, as N linhas seguintes contém uma palavra cada, que você tem que transformar para o plural. Você pode assumir que cada palavra é composta de no máximo 20 letras minúsculas do alfabeto Inglês ('a' a 'z')."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1639",
        "saida": "Para cada caso de teste, imprimir uma linha contendo o número de diferentes valores ai gerados por este gerador de números aleatórios quando inicializado com um valor a0. Note que a0 também deve ser contabilizado.",
        "descricao": "John von Neumann propôs em 1946 um método de criação de sequências de números pseudo-aleatórios. Sua ideia é conhecida como o método do meio do quadrado e funciona da seguinte forma: Escolhe-se um valor inicial a0 que possui um comprimento de no máximo n em sua representação decimal. Multiplica-se o valor de a0 por ele mesmo, adiciona-se zeros a esquerda para obter uma representação decimal de comprimento 2 × n e toma-se os n dígitos centrais para formar ai. Repete-se o processo para cada ai com i > 0. Para este problema será utilizado n = 4. Exemplo 1: a0=5555, a02=30858025, a1=8580,... Examplo 2: a0=1111, a02=01234321, a1=2343,... Infelizmente, este gerador de números aleatórios não é muito bom. Dado um valor inicial, ele não produz todos os outros números com a mesma quantidade de dígitos. Sua tarefa é checar quantos números diferentes são produzidos para um valor inicial a0.",
        "titulo": "Gerando Números Aleatórios",
        "entrada": "A entrada contém vários casos de teste. Cada teste consite de uma linha contendo a0 (0 < a0 < 10000). Possivelmente, os números podem ter zeros à esquerda de forma a deixar cada número com exatamente 4 dígitos. A entrada é finalizada com uma linha contendo o valor 0. Obs.: Note que o terceiro caso de teste possui a maior quantidade de números diferentes gerados entre as entradas possíveis."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1743",
        "saida": "Apresente uma linha com um caractere que representa se os conectores são compatíveis ou não. Se eles são compatíveis escrever a letra maiúscula \"Y\"; caso contrário, escrever a letra maiúscula \"N\".",
        "descricao": "A Internet Computer Parts Company (ICPC) é uma loja on-line que vende peças de computador. Pares de conectores elétricos em linha estão entre as peças mais populares que ICPC vende. No entanto, elas também são uma das peças que são devolvidos com mais freqüência por clientes insatisfeitos, porque devido a erros na embalagem os conectores enviados para os clientes podem não ser compatíveis.. Um conector em-linha é constituído por cinco pontos de ligação, marcadas de 1 a 5. Cada ponto de ligação de um conector pode ser ou um plugue ou uma tomada. Dizemos dois conectores são compatíveis se, para cada rótulo, um ponto de conexão é um plugue e outro ponto de ligação é uma tomada (em outras palavras, dois conectores são compatíveis se, para cada ponto de conexão com o mesmo rótulo, um plugue e uma tomada se encontram quando os dois conectores estão conectados). A figura abaixo mostra exemplos de dois conectores que são compatíveis e dois conectores que não são compatíveis. ICPC está introduzindo uma Máquina de Verificação Automártica (ACM) de última geração, com um verificador óptico, que vai verificar se os dois conectores embalados para um cliente são realmente compatíveis. O complexo e caro hardware do ACM está pronto, mas eles precisam de sua ajuda para terminar o software. Dadas as descrições de um par de conectores em linha, sua tarefa é determinar se os conectores são compatíveis.",
        "titulo": "Máquina de Verificação Automatizada",
        "entrada": "A primeira linha contém cinco números inteiros Xi (0 ≤ Xi≤ 1 para i = 1, 2,..., 5), que representa os pontos de conexão do primeiro conector do par. A segunda linha contém cinco números inteiros Yi (0 ≤ Yi ≤ 1 para i = 1, 2,..., 5), que representa os pontos de conexão do segundo conector. Na entrada, um 0 representa uma tomada e um 1 representa um plugue."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2041",
        "saida": "A saída de cada caso de teste é apenas uma linha contendo o enésimo número da sequência.",
        "descricao": "Gödelito é fascinado por questões lógicas e matemáticas e passa muito tempo brincando em tentar descobrir a semântica por traz das sequencias matemáticas. O mais divertido para Gödelito não é tanto encontrar o próximo número da sequência, mas entender os axiomas que determinam o formato das sequencias. Muitas sequencias são ditadas por regras matemáticas, por exemplo a sequência de Fibonacci cujo axioma é que cada número é a soma dos dois anteriores. Outras sequencias envolvem axiomas mais semânticos, por exemplo a sequência: 2, 10, 12, 16, 17, 18, 19, 200..., no qual axioma é: números cujo nome começa com a letra D. Gödelito se deparou atualmente com uma sequência bem interessante. Depois de algum tempo ele descobriu que o axioma da sequência é semântico (ele tentou muitas contas matemáticas primeiro, o que só o deixou mais feliz quando descobriu o significado da sequência). A sequência é a mostrada abaixo: 3 13 1113 3113 132113 1113122113 311311222113 ... Gödelito ficou impressionado com o quanto essa sequência cresce rapidamente. E como não quer gastar as folhas do seu caderno para calcular todos os números que quer, pediu a sua ajuda para criar um algoritmo para encontrar os outros números da sequência. Mas ele te explicou o significado da sequência primeiro para facilitar a sua vida: Cada número da sequência é gerado através da leitura do número anterior, por exemplo, o segundo número é 13 porque a linha de cima contém um (1) número três (3). O terceiro número é 1113, porque a linha de cima contém um (1) número um (1) e um (1) número três (3). O quarto número da sequência é 3113, pois a linha de cima contém três (3) números um (1) e um (1) número três (3). Acho que deu para entender a ideia, não é?",
        "titulo": "Sequência de Gödelito",
        "entrada": "A entrada é composta de vários casos de teste. Cada caso de teste é composto de uma linha contendo um número inteiro N, que representa o enésimo número da sequência que deve ser calculado, com 0<N< = 40."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2188",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter as coordenadas do retângulo de interseção encontrado pelo seu programa, no mesmo formato utilizado na entrada. Caso a interseção seja vazia, a segunda linha deve conter a expressão “nenhum”. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "descricao": "O macaco-prego é um animal irrequieto e barulhento, merecedor também dos adjetivos desordeiro e despudorado. A sua cabeça, encimada por uma densa pelagem negra ou marrom-escura, semelhante a um gorro, torna seu aspecto inconfundível. Apesar de ser o macaco mais comum nas matas do país, uma de suas sub-espécies encontra-se seriamente ameaçada de extinção: o macacoprego-do-peito-amarelo, que se distingue das demais pela coloração amarelada do peito e da parte anterior dos braços. Um grande esforço foi feito pelos primatologistas para aumentar a população dos macacos-pregodo-peito-amarelo. Sabe-se que eles se alimentam de plantas, das quais consomem preferencialmente frutos e brotos. Alimentam-se também de muitos animais, preferencialmente lesmas, lagartas e rãs, e preferem as florestas mais densas. Para determinar o melhor local do país para criar uma nova reserva ambiental para os macacos-prego-do-peito-amarelo, o governo fez um levantamento das regiões no país onde as condições preferidas desses animais ocorrem: regiões de floresta densa, regiões com frutos, regiões com muitos brotos, etc. Ajude a salvar os macacos-pregodo-peito-amarelo. As regiões propícias para o macaco-prego-do-peito-amarelo foram determinadas como retângulos cujos lados são todos verticais ou horizontais. Sua tarefa é encontrar o local ideal para a reserva ambiental, definida como a interseção de todas as regiões dadas. As regiões foram divididas de tal forma que uma região não tangencia qualquer outra região. Assim, a interseção entre quaisquer duas regiões ou é um retângulo ou é vazia.",
        "titulo": "Macaco-prego",
        "entrada": "Seu programa deve ler vários conjuntos de teste. A primeira linha de um conjunto de teste contém um inteiro não negativo, N (0 ≤ N ≤ 10000), que indica o número de regiões (o valor N = 0 indica o final da entrada). Seguem-se N linhas, cada uma contendo quatro números inteiros X, Y, U e V (-10000 ≤ X,Y,U,V ≤ 10000)que descrevem uma região: o par X, Y representa a coordenada do canto superior esquerdo e o par U, V representa a coordenada do canto inferior direito de um retângulo."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1619",
        "saida": "Para cada caso de teste, imprima uma linha contendo apenas o valor absoluto do número de dias entre as duas datas.",
        "descricao": "Joana está trabalhando na nova versão do blog de sua empresa. Uma das coisas que ela quer mudar é a forma como as datas são mostradas no blog. Na versão atual, as datas são mostradas como ano-mês-dia (por exemplo, 2014-05-23). Ela deseja que, em vez disso, seja mostrado o número de dias que se passaram desde a publicação do post até hoje (por exemplo, se hoje é 9 de agosto de 2014, então a data 2014-05-23 seria mostrada como \"78 dias atrás\" e a data 2014-08-07 seria \"2 dias atrás\"). Joana está ocupada com alguns problemas mais complexos relacionados ao blog e pediu que você a ajudasse com essa parte. Dadas duas datas, calcule o número de dias que se passaram entre elas. Observações Tome cuidado com anos bissextos (que possuem o dia 29 de fevereiro, e, portanto, 366 dias no total). Um ano é bissexto se seu número é um múltiplo de 400 ou se é um múltiplo de 4, mas não de 100.",
        "titulo": "Diferença entre Datas",
        "entrada": "A entrada começa com uma linha contendo um único inteiro N, que representa o número de casos de teste (0 < N ≤ 10000). Em seguida, há N linhas, cada uma descrevendo um caso de teste. Cada uma dessas linhas possui duas datas separadas por um espaço. As datas estão no formado AAAA-MM-DD, onde AAAA é o ano, MM é o mês, e DD é o dia. Você pode supor que todas as datas são válidas (i.e., nãoo existem datas como 2013-02-31 na entrada). Todas as datas estãoo entre 1970 e 2014 (inclusive). Mês e dia são sempre dados com dois dí­gitos; 3 de fevereiro de 2014 é representado como 2014-02-03."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1935",
        "saida": "Seu programa deve produzir uma única linha com dois inteiros L e C representando as coordenadas do último grão de feijão.",
        "descricao": "Dado um tabuleiro de dimensões N × N, gostaríamos de colocar feijões, um grão em cada quadrado, seguindo uma espiral como mostrado na figura. Começando do canto superior esquerdo, com coordenadas (1, 1), e depois indo para a direita enquanto possível, depois para baixo enquanto possível, depois para esquerda enquanto possível e depois para cima enquanto possível. Repetimos esse padrão, direita-baixo-esquerda-cima, até que B grãos de feijão sejam colocados no tabuleiro. O problema é: dados N e B, em que coordenadas será colocado o último grão de feijão? Na figura, para N = 8 e B = 53, o último grão foi colocado no quadrado de coordenadas (4, 6).",
        "titulo": "Espiral",
        "entrada": "A entrada contém apenas uma linha com dois inteiros, N e B, onde 1 ≤ N ≤ 230 e 1 ≤ B ≤ N2 ."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1104",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um numero inteiro, indicando o número máximo de cartas que Alice e Beatriz podem trocar entre si.",
        "descricao": "Alice e Beatriz colecionam cartas de Pokémon. As cartas são produzidas para um jogo que reproduz a batalha introduzida em um dos mais bem sucedidos jogos de videogame da história, mas Alice e Beatriz são muito pequenas para jogar, e estão interessadas apenas nas cartas propriamente ditas. Para facilitar, vamos considerar que cada carta possui um identificador único, que é um número inteiro. Cada uma das duas meninas possui um conjunto de cartas e, como a maioria das garotas de sua idade, gostam de trocar entre si as cartas que têm. Elas obviamente não têm interesse emtrocar cartas idênticas, que ambas possuem, e não querem receber cartas repetidas na troca.Além disso, as cartas serão trocadas em uma única operação de troca: Alice dá para Beatriz um sub-conjunto com N cartas distintas e recebe de volta um outro sub-conjunto com N cartas distintas. As meninas querem saber qual é o número máximo de cartas que podem ser trocadas. Por exemplo, se Alice tem o conjunto de cartas {1, 1, 2, 3, 5, 7, 8, 8, 9, 15} e Beatriz o conjunto {2, 2, 2, 3, 4, 6, 10, 11, 11}, elas podem trocar entre si no máximo quatro cartas. Escreva um programa que, dados os conjuntos de cartas que Alice e Beatriz possuem, determine o número máximo de cartas que podem ser trocadas.",
        "titulo": "Troca de Cartas",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros A e B, separados por um espaço em branco, indicando respectivamente o número de cartas que Alice e Beatriz possuem (1 ≤ A ≤ 104 e 1 ≤ B ≤ 104). A segunda linha contém A números inteiros Xi, separados entre si por um espaço em branco, cada número indicando uma carta do conjunto de Alice (1 ≤ Xi ≤ 105). A terceira linha contém B números inteiros Yi, separados entre si por um espaço em branco, cada número indicando uma carta do conjunto de Beatriz (1 ≤ Yi ≤ 105). As cartas de Alice e Beatriz são apresentadas em ordem não decrescente. O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1786",
        "saida": "Para cada sequência informada, você deverá exibir a sequência informada mais os dígitos verificadores, formatados na forma padrão do CPF, ou seja a1a2a3.a4a5a6.a7a8a9-b1b2",
        "descricao": "As Indústrias Udilandenses (INUDIL) precisam outra vez de sua ajuda! Depois de criar um programa que verifica se um CPF é válido ou não, agora querem que você crie um programa que exiba o CPF do cliente conhecendo apenas os 9 primeiros dígitos. O setor de Recursos Humanos gentilmente te informou como funciona um CPF: Dos 11 dígitos do CPF, os dois últimos são verificadores e dependem dos 9 dígitos anteriores. Vamos introduzir alguma notação. Considere um CPF com os seguintes dígitos a1 a2 a3 . a4 a5 a6 . a7 a8 a9 - b1 b2 Para descobrirmos o dígito b1, procedemos da seguinte maneira: MUltiplicamos o primeiro por 1, o segundo por 2, o terceiro por 3, o quarto por 4 e vamos assim até multiplicarmos o nono por 9. Então, somamos tudo isto. Após termos somado tudo, dividimos por 11. O dígito b1 será o resto da divisão (ou 0, caso o resto seja 10). Para o segundo dígito verificador, temos o seguinte: Multiplicamos o primeiro por 9, o segundo por 8, o terceiro por 7, o quarto por 6 e vamos assim até multiplicarmos o nono por 1. Então, somamos tudo isto e dividimos por 11. O dígito b2 será o resto da divisão (ou 0, caso o resto seja 10).",
        "titulo": "CPF 2",
        "entrada": "A entrada contém um número desconhecido de sequências na forma: a1a2a3a4a5a6a7a8a9 Cada sequência representa os 9 primeiros dígitos de algum CPF."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1879",
        "saida": "Para cada instância, imprima uma linha contendo um único inteiro, correspondente ao número máximo de vazas que a dupla NS pode ganhar.",
        "descricao": "Bridge é um grande jogo de cartas! O mundial juvenil de bridge foi realizado na Tailândia em 2006, mesmo país da final mundial da ICPC em 2016! Vamos falar sobre as regras do jogo. Ele é jogado com um baralho de 52 cartas, 13 de cada naipe (copas, espadas, paus e ouros). As cartas têm uma ordenação (A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2), onde ás é a maior carta e 2 a menor. Existe também um trunfo pré definido (H = copas, S = espadas, C = paus, D = ouros, NT = não há trunfo). Um naipe definido como trunfo vale mais que os outros. O jogo é jogado por 4 jogadores (N, E, S, W), como mostrado na figura, e consiste de várias rodadas, chamadas de vazas. Um jogador começa a rodada/vaza jogando uma carta. Em seguida, cada jogador, em sentido horário, joga uma carta até que todos os jogadores tenham jogado. Nesse momento, acaba a vaza. O jogador que começa a vaza pode jogar a carta que quiser; o naipe dessa carta é definido como o naipe da vaza. Todo jogador que não for o jogador que começou a vaza é obrigado a jogar uma carta com o mesmo naipe da vaza atual, a não ser que ele não tenha nenhuma tal carta. Nesse caso, pode jogar qualquer carta. O vencedor de uma vaza é definido da seguinte forma: se uma carta de trunfo tiver sido jogada na vaza, ganha o jogador que jogou a maior carta de trunfo. Caso contrário, ganha a maior carta do naipe da vaza. O jogador que ganhou a vaza começa a seguinte. O jogador N inicia a primeira vaza. Os jogadores N e S formam uma dupla, enquanto E e W formam outra. O objetivo do jogo é ganhar o maior número possível de vazas. Nesse problema, cada jogador tem R cartas e queremos saber quantas vazas a dupla NS consegue ganhar se todos jogarem de forma ótima.",
        "titulo": "Bridge",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância inicia com uma linha contendo uma string (dentre H,S, C, D, NT) indicando o trunfo da partida e um inteiro R (1 ≤ R ≤ 4) indicando o número de cartas que os jogadores têm. Cada uma das próximas 4 linhas contém uma lista de R cartas separadas por espaços. Uma carta é representada como uma cadeia XY, onde X está dentre A, K, Q, J, T (representando 10), 9, 8, 7, 6, 5, 4, 3, 2, e Y representa o naipe (dentre H, S, C, D). As 4 linhas contêm as cartas dos jogadores N, E, S e W, nessa ordem. Note que não existe carta repetida!"
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1122",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha com N caracteres. O i-ésimo caractere deve ser ‘+’, se for possível afirmar com certeza que a i-ésima operação foi uma entrada, ‘-’, se for possível afirmar com certeza que a i-ésima operação foi uma saída, e ‘?’, se não for possível determinar com certeza qual o tipo da operação. Caso não exista uma sequência de entradas e saídas que totalize o fluxo de caixa indicado, imprima uma única linha contendo o caractere ‘*’.",
        "descricao": "A FCC (Fundação de Combate à Corrupção) desmontou um grande esquema de corrupção na Nlogônia. Durante a operação, foram apreendidos diversos cadernos e livros com anotações documentando as transações ilícitas realizadas pelo esquema. Vários desses livros contém páginas com os valores de várias transações em nilogos (a moeda local da Nlogônia, cujo símbolo é N$) e o fluxo de caixa resultante dessas transações. Por exemplo, se em uma página foi registrada uma entrada de N$ 7, uma entrada de N$ 2, uma saída de N$ 3, uma entrada de N$ 1 e outra saída de N$ 11, o fluxo de caixa nesta página é 7 + 2 − 3 + 1 − 11 = −4. No entanto, para dificultar o trabalho da polícia, os contraventores não anotaram em seus livros qual o tipo de cada transação. No exemplo acima, as anotaçõs na página seriam apenas 7, 2, 3, 1 e 11 (sem indicação se elas são entradas ou saídas). O fluxo de caixa de cada página sempre é anotado normalmente, com o sinal (no caso, -4). Para obter a condenação dos contraventores, os promotores precisam poder afirmar com certeza se cada operação foi uma entrada ou uma saída. No exemplo acima, a transação de N$ 7 certamente foi uma entrada, e a transação de N$ 11 certamente foi uma saída. Mas, não se pode afirmar nada sobre as transações de N$ 2, N$ 3, e N$ 1. As transações de N$ 2 e N$ 1 poderiam ter sido entradas e a transação de N$ 3 uma saída, ou N$ 2 e N$ 1 poderiam ter sido saídas e a transação de N$ 3 uma entrada. Muitos cadernos possuem números relativamente grandes, com muitas transações, então é difícil para a polícia reconstruir o histórico de operações. Por isso, eles precisam de um programa que o faça de forma eficiente.",
        "titulo": "Livro-Caixa",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha da entrada contém dois inteiros N e F, indicando respectivamente o número de operações na página (2 ≤ N ≤ 40) e o fluxo de caixa para esta página (−16000 ≤ F ≤ 16000). Cada uma das N linhas seguintes contém um inteiro Ti indicando o valor da i-ésima transação (1 ≤ Ti ≤ 1000). O ultimo caso de teste é seguido por uma linha que contém apenas dois zeros separados por espaços em branco."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1714",
        "saida": "Seu programa deve imprimir uma linha contendo um inteiro, o comprimento de um caminho consistente mínimo. Se não houver um caminho consistente, imprima -1.",
        "descricao": "Os parques na Cidade da Lógica são reticulados de N × N quadrados (2 ≤ N ≤ 100), onde cada quadrado contém uma das 10 primeiras letras ASCII, abcdefghijABCDEFGHIJ, em caixa minúscula ou maiúscula. As pessoas na Cidade da Lógica têm orgulho de seguir apenas caminhos consistentes quando cruzam os parques. Por exemplo, se eles passam por um c minúsculo, eles não vão se permitir, mais adiante, passar por um C maiúsculo. Para definir isso mais precisamente, um caminho consistente é uma sequência de quadrados satisfazendo: quadrados consecutivos na sequência são adjacentes ortogonalmente; nenhuma letra ocorre na sequência tanto minúscula quanto maiúscula. Quer dizer, ou a letra não está na sequência, ou ela ocorre apenas em caixa minúscula, ou somente em caixa maiúscula. Você deve escrever um programa para ajudar as pessoas da Cidade da Lógica a computar o comprimento do menor caminho consistente entre o quadrado de coordenadas (1, 1), no canto superior esquerdo, e o quadrado de coordenadas (N, N ), no canto inferior direito. Por exemplo, para o parque acima, o menor caminho consistente tem comprimento 13.",
        "titulo": "Letras",
        "entrada": "A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100), o tamanho do parque. As N linhas seguintes contêm, cada uma, uma sequência de N letras, definindo o parque."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1811",
        "saida": "Você devera imprimir um cabeçalho indicando o número da instância que está tratando (Instancia #i) e na linha seguinte o numero de ator/atriz que está com maior risco de sofrer um infarto. O risco para o infarto cresce com o número de observações consecutivas em que o numero de batimentos cresceu. Caso haja empate neste critério, devolva o ator que apresenta a maior diferença entre a primeira e a última medição do intervalo em que os batimentos foram aumentando. Se persistir o empate, o risco será maior para aquele com o maior batimento no fim do intervalo. Se ainda não houver decisão, retorne o de menor índice. Obs: deve ser impressa uma linha em branco após cada instância.",
        "descricao": "Não há momento de maior angústia entre as estrelas do cinema que a cerimônia de entrega das estatuetas no Kodak Theatre. Não são raros os atores e atrizes que veem suas pulsações atingirem níveis alarmantes. Os riscos de um enfarto crescem muito quando os batimentos se tornam mais e mais rápidos em períodos consecutivos, caracterizando um período de grande ansiedade. Preocupada com este fato, a Academia de Artes e Ciências de Hollywood resolveu monitorar em intervalos regulares os batimento cardíacos dos vários candidatos a receber a estatueta. Com estes dados pretende-se fazer um programa que alerte os médicos de plantão caso um dos famosos esteja à beira de um ataque cardíaco. Sua tarefa neste problema é auxiliar a Academia nesta nobre missão.",
        "titulo": "O Óscar Vai Para...",
        "entrada": "São dadas várias instâncias. A primeira linha de cada instância contem o número 0 ≤ n ≤ 1000 de atores/atrizes monitorados (que serão identificados pelos números 1, 2, ..., n) e o numero 0 ≤ m ≤ 100 de batimentos observados nestes atores. A seguir, em cada um das próximas n linhas são dadas as m medições (o batimento cardíaco é um inteiro entre 0 e 200). O caso em que n = 0 representa o final do arquivo e não deve ser processado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1379",
        "saida": "Para cada caso de teste, imprima uma linha que contenha o mínimo inteiro possível C, de forma que a média e a mediana de A, B e C sejam iguais.",
        "descricao": "A média de três inteiros A, B e C é (A + B + C)/3. A mediana de três números inteiros seria então aquela que estaria no meio, se forem ordenados em ordem não decrescente. Dados dois números inteiros A e B, retornar o mínimo inteiro possível C, tal que a média e a mediana de A, B e C, sejam iguais.",
        "titulo": "Problema com Mediana e Média",
        "entrada": "Cada caso de teste é dado em uma única linha que contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109). O último caso de teste é seguido por uma linha contendo dois zeros."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1609",
        "saida": "Imprima o número de carneirinhos distintos para cada caso.",
        "descricao": "Para dormir você resolveu contar carneirinhos. O sono está demorando muito para vir e você percebeu que alguns carneirinhos estão se repetindo! Cada um deles é identificado por um número inteiro único, desta forma você vai evitar contar os repetidos. Dado a sequência dos carneirinhos, imprima quantos de verdade você contou, ou seja, imprima o número de carneirinhos distintos.",
        "titulo": "Contando Carneirinhos",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100*) indicando o número de casos de teste. Na primeira linha de cada caso teremos o número inteiro N (1 ≤ N ≤ 100* ou 1 ≤ N ≤ 104​**), indicando o número de carneirinhos. Na próxima linha teremos N inteiros separados por espaço indicando a sequência de carneirinhos. Os identificadores dos carneiros irão de 0 até 109, inclusive. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1343",
        "saida": "Para cada instancia do problema da entrada, seu programa deve imprimir uma única linha, contendo a resposta para o problema. Se houver uma sequencia de movimentos para o cavalo que capture todos os peões (e sem que o cavalo seja capturado por um peão), o programa deve imprimir o comprimento da menor sequencia de movimentos possível. Caso contrário, seu programa deve imprimir a palavra 'impossivel'.",
        "descricao": "O jogo \"Runner Pawns\" é uma variante do clássico Xadrez que é jogado por apenas uma pessoa. O tabuleiro usado nesse jogo é semelhante ao tabuleiro do Xadrez, dividido em 8x8 quadrados. Como no Xadrez, cada quadrado pode conter apenas uma peça por vez. As peças do jogo são uma série de peões (os \"Runner Pawns\"), e um único cavalo, que é a única peça que o jogador comanda. O objetivo é capturar todos os peões antes de chegarem a ultima linha e se tornarem reis. Possíveis movimentos do cavalo Os movimentos do cavalo são ditos em forma de 'L', uma vez que o cavalo sempre anda dois quadrados em uma direção e mais um quadrado perpendicular a essa direção. A figura acima ilustra os movimentos do cavalo, onde o caractere 'H' indica a posição atual do cavalo e o caractere '•' indica um possível movimento do cavalo. Nota-se que a representação usando quadrados pretos e brancos do tabuleiro de Xadrez não é distinguida.          01 02 03 04 05 06 07 08          09 10 11 12 13 14 15 16          17 18 19 20 21 22 23 24          25 26 27 28 29 30 31 32                   Da posição 22, o cavalo pode se mover para as posições 05,          33 34 35 36 37 38 39 40                   07, 12, 16, 28, 32, 37 ou 39. Da posição 57, o cavalo pode se          41 42 43 44 45 46 47 48                   mover para as posições 42 ou 51.          49 50 51 52 53 54 55 56          57 58 59 60 61 62 63 64 O tabuleiro com as células numeradas Os movimentos dos peões são um pouco diferentes do Xadrez, uma vez que o peão só pode se mover um quadrado para frente e todos os outros peões se movem ao mesmo tempo. Eles nunca se movem em diagonal. As casas do tabuleiro são numeradas de 1 a 64, como mostrado acima. Os peões se movem na direção vertical de cima para baixo, de modo que os quadrados numerados 57-64 são os objetivos dos peões. Cada rodada do jogo é composta por um movimento do cavalo seguido por um movimento simultâneo de todos os peões ainda não capturados. A fim de capturar um peão, o jogador deve mover o cavalo para o quadrado onde está o peão. O peão capturado deixa o tabuleiro e somente os peões restantes avançam para a próxima rodada. Para vencer o jogo, o jogador deve capturar todos os peões. Se um peão conseguir chegar a última linha, torna-se um rei. Com isso o cavalo tem apenas mais um movimento para captura-lo. Se isso não acontecer, o rei se move e isso significa que o jogo acaba e o jogador perde. Além disso, se o cavalo se mover para um quadrado que vai ser ocupado por um peão, no próximo movimento dos peões o cavalo é capturado pelo peão e o jogador perde. Sua tarefa é escrever um programa que analise um tabuleiro de \"Runner Pawns\" e responda se existe uma sequencia de movimentos para o cavalo vencer. Se for possível, o programa deve determinar o número mínimo de movimentos necessários para o cavalo capturar todos os peões.",
        "titulo": "Runner Pawns",
        "entrada": "A entrada contém várias instâncias do problema, uma por linha. Cada exemplo começa com um inteiro P que representa o número de peões (0 ≤ P ≤ 8), seguido por P inteiros (1 ≤ A1, A2, ..., Ap ≤ 64) que descrevem a posição inicial de cada peão seguido de um inteiro H (1 ≤ H ≤ 64) que representa a posição inicial do cavalo. O fim da entrada é indicado quando P = 0."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1575",
        "saida": "Para cada caso de teste, a saída deve seguir a descrição abaixo. A saída de dois casos de teste consecutivos deverá ser separada por uma linha em branco. A saída consiste de uma linha dizendo \"Yes\", caso a rota que Giovanni está dizendo aos aldeões é uma rota segura, e \"No\" caso contrário. Lembre-se que a rota não é segura somente se os aldeões puderem encontrar Leporello no mesmo lugar ao mesmo tempo; a rota é segura mesmo se os aldeões encontrarem Leporello no destino (porque a missão dele foi realizada).",
        "descricao": "No Ato II, Masetto está liderando um grupo de aldeões para perseguir Don Giovanni. Giovanni, que acaba de trocar suas roupas com Leporello e está disfarçado como ele, é questionado por Masetto sobre aonde \"seu mestre\" foi. Para evitar problemas, \"Leporello\" (disfarçado por Giovanni) quer enganar os aldeões para que eles não consigam encontrar \"Don Giovanni\" (disfarçado por Leporello). Giovanni sabe a rota que Leporello está tomando, e ele tem uma rota segura (uma rota que os aldeões não encontrariam Leporello) em mente. Ele quer ter certeza de que a rota que ele tomou é de fato segura.",
        "titulo": "Perseguindo Don Giovanni",
        "entrada": "A entrada inicia com um simples inteiro positivo em apenas uma linha, indicando o número de casos de teste que seguem, cada um deles como descrito abaixo. Esta linha é seguida por uma linha em branco, e também haverá uma linha em branco entre duas entradas consecutivas. É dado a você a atual posição de Don Giovanni (que também é a posição de Masetto e dos aldeões), e a posição atual de Leporello, em duas linhas separadas. Cada linha tem dois números: o número da rua e o número da avenida. Você pode assumir que as ruas são grids quadrados regulares, com linhas sendo ruas numeradas a partir de um, iniciando no norte, e as colunas sendo avenidas numeradas a partir de um, iniciando no oeste. Portanto, a distância entre ruas e avenidas adjacentes é sempre a mesma. O resto da entrada possui dois conjuntos de rotas, com o primeiro conjunto sendo de Leporello e o segundo conjunto sendo a rota que Giovanni irá contar para os outros. Cada conjunto inicia com um número indicando a quantidade de paradas na rota, seguido pela lista de paradas. Cada parada é especificada como uma localização, onde Leporello pode mudar a direção. Entre paradas há sempre uma linha reta na direção paralela tanto para ruas quanto para avenidas, que Leporello e os aldeões irão viajar. Leporello viaja na mesma velocidade que os aldeões. Você pode assumir que o número máximo da rua/avenida é 1000000, e não haverá mais do que 100 paradas."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2078",
        "saida": "Para cada instância imprima uma linha contendo N inteiros que indicam quantos fornos estão à distância no máximo D dos fornos 1, 2, ..., N.",
        "descricao": "Albert Arnold Gore Jr é o nome completo do ex-vice-presidente dos Estados Unidos, Al Gore, ganhador do prêmio Nobel da Paz de 2007 pelo seu trabalho incessante de conscientizar a população mundial para as mudanças climáticas causadas pelo homem. O documentário “An Inconvenient Truth” vencedor do Oscar, mostra os efeitos causados pelo aquecimento global na paisagem do planeta e prevê um futuro catastrófico para a humanidade se a tendência de usurpar os recursos do planeta não for mudada. Al Gore cresceu em Washington DC uma vez que seu pai foi deputado e depois senador pelo Tenessee. Graduou-se em Harvard em 1969 e foi um ativista contra a guerra do Vietnam e chegou a apoiar o líder Martin Luther King na sua luta contra a segregação racial. Sua atuação como vice-presidente dos Estados Unidos na administração de Bill Clinton também foi excepcional. Apesar de ter tido mais votos que o concorrente do partido republicano, perdeu as eleições presidenciais e afastou-se da disputa da presidência. Um dos seus trabalhos mais importantes diz respeito ao posicionamento ótimo de fornos em produção de tijolos. O processo de fabricação de tijolos é bastante poluente, e exige a queima em alta temperatura do barro a fim de que o tijolo atinja a consistência desejada. A queima consome grandes quantidades de madeira, produzida em fazendas para este fim. Estudos da Universidade de Harvard mostram que há uma distância máxima para o posicionamento nesses fornos: se estiverem muito distantes, a dispersão do calor não permite que a queima seja feita por igual, trazendo prejuízos à produção de tijolos e também ao meio ambiente. Uma vez que os fornos são posicionados no meio da floresta (que é cortada para a queima), as distâncias são medidas usando a métrica de Manhattan, ou seja, a distância entre dois pontos é dada pela soma dos valores absolutos das diferenças das coordenadas. Sua tarefa é, dada a localização de vários fornos numa fazenda, e uma distância D, determinar, para cada um dos fornos, quantos fornos estão à distância no máximo D. Com estes dados será possível determinar quais fornos precisam ser acesos simultaneamente sem prejuízos econômico ou ambiental.",
        "titulo": "Paz Verde! Hipocrisia Mundial!",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância possui dois inteiros N e D (1 ≤ N, D ≤ 100000) representando o número de fornos e uma distância, respectivamente. Cada uma das próximas N linhas possui dois inteiros x e y (0 ≤ x, y ≤ 100000) que indicam a posição de um forno."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1583",
        "saida": "Para cada mapa, imprima uma estimação da contaminação futura. Esta estimação deverá corresponder ao mapa original (como visto na entrada), porém trocando as células com água que foram contaminadas pelo caractere T. Deixe uma linha em branco após cada mapa (incluindo o último mapa).",
        "descricao": "Estamos no ano 2241, e a colonização de outros planetas já é uma realidade. Você trabalha no centro de controle de recursos, no planeta URI-942, controlando principalmente os estoques de água. A água é armazenada em tanques subterrâneos, protegida das altas temperaturas da superfície. Porém, seus colegas Márcio e Ana descobriram falhas nas paredes de alguns tanques, o que pode levar a contaminação do estoque de água. Seus colegas conseguiram identificar os pontos com falhas onde pode haver a infiltração de contaminantes. Sabendo que os agentes contaminantes se espalham por todo o tanque de água afetado, sua tarefa é estimar a contaminação da água de acordo com os mapas fornecidos por seus colegas. Os mapas foram discretizados em células, sendo que as células podem corresponder a uma região com rocha, água (tanque) ou agente contaminante. Devido as rachaduras, uma célula com agente contaminante contamina as células adjacentes (esquerda, direita, acima e abaixo) contendo água, porém a contaminação é barrada por células de rocha.",
        "titulo": "Contaminação",
        "entrada": "A entrada é composta por vários mapas, sendo que a descrição de cada mapa começa com uma linha contendo dois inteiros N e M, correspondente ao número de linhas e de colunas do mapa. As N linhas a seguir descrevem o mapa, cada linha contendo M caracteres, além do pulo de linha. Os caracteres possíveis são: A, que representa uma célula contendo água, X, que representa uma célula com rocha e T que representa uma célula com agente contaminante. A entrada termina quando N = M = 0, caso que não deve ser processado. Em todos os mapas, N e M são menores ou iguais a 50."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1536",
        "saida": "Para cada caso de teste, imprima uma linha contendo \"Time 1\" (sem aspas) caso o Time 1 seja o vencedor do mata-mata, \"Time 2\" (sem aspas) caso o Time 2 seja o vencedor do mata-mata e \"Penaltis\" (sem aspas) caso não seja possível identificar o vencedor no tempo convencional.",
        "descricao": "A Copa Libertadores da América é a principal competição de futebol entre clubes profissionais da América do Sul, organizada pela Confederação Sul-Americana de Futebol (CONMEBOL). Ela é conhecida por ter um regulamento muito complicado, principalmente nas fases das oitavas, quartas e semi-final. Nessas fases são jogadas partidas de ida e volta no sistema mata-mata. Ganha quem fizer a maior pontuação no acumulado das duas partidas, sendo 3 pontos para vitória e 1 ponto em caso de empate, ambos por partida. Em caso de igualdade na pontuação, são critérios de desempate: 1) saldo de gols (número de gols a favor menos o número de gols contra). 2) mais gols marcados na casa do adversário. 3) disputa por pênaltis. Todos os critérios devem ser aplicados considerando o acumulado das duas partidas. Será que você consegue elaborar um algoritmo que, dados os resultados das partidas de ida e de volta, ele identifica o time vencedor?",
        "titulo": "Libertadores",
        "entrada": "A primeira linha de entrada indica o número de casos de teste N (1 ≤ N ≤ 100). Cada caso de teste é composto por dois placares: o resultado da partida 1 e o resultado da partida 2. O placar é representado pelo formato M x V, onde M (1 ≤ M ≤ 100) é o número de gols do time mandante da partida e V (1 ≤ V ≤ 100) é o número de gols do time visitante. Como em cada caso de teste existem 2 partidas, considere que o Time 1 é sempre o mandante da primeira e o visitante da segunda e vice-versa para o Time 2."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1351",
        "saida": "Para cada sessão de compra da entrada, seu programa deve produzir uma linha de saída,  contendo o menor custo que Sr. Jones pode conseguir. Se não é possível comprar todos os itens da sessão, imprima “Impossible”. O custo deve ser impresso como um número real com precisão de duas casas decimais, e o último dígito decimal deve ser arredondado. A entrada não vai conter casos de teste onde diferenças de arredondamento são significantes.",
        "descricao": "Sr. Jones é um marido exemplar. Todo sábado de manhã a Sra. Jones lhe dá uma lista de itens a serem comprados no supermercado e ele compra exatamente o que lhe foi pedido, sempre escolhendo as marcas com os menores preços. Mas Sr. Jones odeia ir ao mercado nos sábados, visto que seus corredores estão lotados de carregadores. Ele deseja mudar o jeito com que ele faz compras. Ao invés de ir para lá e para cá para comprar os produtos na lista de sua esposa, ele vai tentar comprar os itens passando apenas uma vez por cada corredor, pegando os produtos na ordem exata dada na lista. Então ele pediu a você para escrever um programa que o ajude com seu novo estilo de fazer compras. Dada as informações sobre os produtos disponíveis no supermercado junto com seus preços na ordem em que aparecem na lista de Sr. Jones e a lista de produtos dada pela sua mulher, seu programa deve determinar o menor preço que ele pagaria. Sr. Jones compra os produtos na ordem em que eles aparecem em sua lista e ele nunca volta atrás enquanto anda pelos corredores. Portanto, se ele compra o i-ésimo produto no seu caminho para o j-ésimo item da lista, o próximo produto a ser comprado é o (j+1)-ésimo item da lista – e deve ser comprado dos produtos que vem depois de i em seu caminho. A figura abaixo mostra um exemplo onde produtos são identificados por inteiros. Note que diferentes marcas do mesmo produto poder aparecer separadamente. No exemplo Sr. Jones deve comprar os produtos 1, 1, 2, 20 (note que o produto 1 aparece duas vezes na lista). Para o exemplo, o custo mínimo que Sr. Jones pode conseguir, seguindo suas limitações, é 21.30. Note também que com esse novo estilo de fazer comprar pode ser impossível para Sr. Jones comprar todos os itens da sua lista; neste caso, seu programa deve alertar Sr. Jones. (a) Lista da Sra. Jones   (b) Lista de produtos com seus respectivos preços e ordem em que aparecem na direção de Sr. Jones pelos corredores.",
        "titulo": "Supermercado",
        "entrada": "Seu programa deverá processar dados para diversos casos de teste (sessões de compra). A primeira linha na descrição de uma sessão de compra contém dois inteiros M e N; M indica o número de itens na lista da Sra. Jones (1 ≤ M ≤ 100) e N representa o número total de produtos disponíveis no supermercado (1 ≤ N ≤ 100,000). A próxima linha contém M inteiros Xi, representando a lista de produtos da lista da Sra. Jones (1 < Xi ≤ 100000, 1 ≤ i ≤ M). Seguem N linhas, representando os produtos do supermercado na ordem em que eles aparecem no caminho do Sr. Jones. Cada uma destas linhas contém um inteiro K e um número real P, que representam, respectivamente, um identificador de produto e seu preço (1 ≤ K ≤ 100,000). O fim da entrada é indicado por M = N = 0."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1787",
        "saida": "Para cada caso de teste imprima uma única linha contendo o nome do jogador que tenha a maior quantidade de pontos. Caso haja empate no primeiro lugar, imprima o nome do jogo \"URI\" (sem aspas).",
        "descricao": "Uilton, Rita e Ingred criaram um novo jogo para decidir quem não pagará sua parte da pizza do próximo final de semana e deram o nome de \"URI\" para o jogo (talvez eles decidiram unir as iniciais de seus nomes para formar o nome do jogo). O URI consiste de N rodadas, a cada rodada, cada um dos três jogadores falam um número, não é permitido números iguais em uma rodada. Se o número que o jogador falar for uma potência de 2, o mesmo ganha 1 ponto, e se além de ser uma potência de 2, for o maior número da rodada, o jogador ganha mais 1 ponto, se o número não for potência de 2 o jogador não ganha nenhum ponto. Sua tarefa é criar um programa que os ajude a contabilizar a pontuação e informar o vencedor, dado a quantidade de rodadas, e os números de cada rodada. Considere que as 4 primeiras potências de 2 são: 2, 4, 8, 16.",
        "titulo": "URI",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um único inteiro N indicando o número de rodadas (1 ≤ 10⁵), cada uma das N linhas seguintes contem 3 números inteiros Ui, Ri, Ii (1 < Ui, Ri, Ii ≤ 10⁹), representando respectivamente o número de Uilton, Rita e Ingred na i-ésima rodada. O final da entrada é indicado quando N = 0."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1363",
        "saida": "Para cada caso de teste, a saída será uma única linha com um “Y” maiúsculo se de acordo com Martin, Isa for a vencedora, ou um “N” se Martin for o vencedor. A saída deve ser impressa na saída padrão.",
        "descricao": "Martin e Isa são muito competitivos. A nova competição que eles criaram é sobre observar placas de carros. Cada vez que um deles vê uma placa de carro na rua, ele ou ela manda uma mensagem SMS para o outro com o conteúdo da placa; Quem ver a placa mais nova é o líder da competição. Como o Departamento De Transito (DDT) registra seqüencialmente as placas em ordem crescente, eles conseguem comparar as placas e descobrir quem é o vencedor. Martin tem uma percepção muito boa, e ele esteve na liderança por várias semanas. Talvez ele fique olhando para a rua ao invés de trabalhar, ou talvez ele fique o dia todo em frente á uma revendedora de carros, esperando os carros novos saírem com as placas novas. Isa, cansada de ficar sempre atrás, escreveu um programa que gera uma placa aleatória, então a próxima vez que Martin mandar mensagem para ela, ela irá responder com essa placa que foi gerada. Dessa forma ela espera deixar Martin um bom tempo tentando ganhar dela. No entanto, Martin ficou desconfiado, e ele quer determinar se Isa está mesmo vendo o carro com a placa que ela mandou. Dessa forma ele irá saber se Isa está na liderança da competição. Ele sabe alguns fatos sobre como as placas são registradas pelo DDT. Cada placa é uma combinação de 7 caracteres, onde pode ser letras maiúsculas (A–Z), ou números (0–9). Existem dois tipos de placas: a antiga, usada por muitos anos, e a nova, que está em uso há alguns meses, quando as combinações da antiga acabaram. Nas placas antigas, os primeiros três caracteres eram letras, e os últimos quatro eram números, então as placas iam de AAA0000 até ZZZ9999. Nas placas novas, os primeiros cinco caracteres são letras, e os dois últimos são números. Infelizmente o chefe do DDT estragou o sistema da impressora enquanto estava tentando criar o pôster da sua próxima campanha para presidente, e a impressora não imprimi mais as letras A, C, M, I, e P. Então agora a primeira placa é BBBBB00 ao invés de AAAAA00. As placas são registradas em ordem seqüencial. Em um caso particular, a última placa do esquema antigo é seguido pela primeira placa do esquema novo. Como Isa não está ciente disso, ela apenas se certificou que a placa gerada pelo seu programa, é consistente com os sete caracteres, onde os três primeiros são letras maiúsculas, e os dois últimos caracteres são números, e que cada um do quarto ou quinto caractere pode ser uma letra maiúscula ou um número (possivelmente pode gerando uma combinação ilegal, mas ela não está preocupada com isso). É claro que Martin não irá considerar Isa a vencedora se ele receber uma combinação ilegal, ou se ele receber uma placa válida, mas que é igual ou mais velha que a dele. Mas isso não é tudo. Desde que Martin sabe que uma placa nova não é gerada tão rápida, ele não irá acreditar que Isa viu um carro com uma placa mais nova que a que ele mandou, mas muito maior sequencialmente. Por exemplo, se Martin mandar DDDDD45, e receber ZZZZZ45, ele não irá acreditar que Isa viu um carro com essa placa, porque ele sabe que o DDT ao consegue imprimir tantas placas para chegar no ZZZZZ45 no tempo de ele receber a resposta. Então Martin decidiu considerar Isa vencedora apenas se ele receber uma placa válida, nova que a dele, e mais velha ou igual a C placa consecutiva após a que ele enviou. Ele chama C seu número de confiança. Por exemplo, se Martin mandar ABC1234, e seu número de confiança for 6, ele irá declarar Isa vencedora apenas se ele receber alguma placa mais nova que ABC1234, mas mais velha ou igual a ABC1240.",
        "titulo": "Competição de Placas de Carros",
        "entrada": "A entrada contém vários casos de teste. Cada caso contém uma única linha que contém duas Strings SM, e SI, e um inteiro C, separados por um único espaço. SM é a String de 7 caracteres enviada pelo Martin, SI é a String de 7 caracteres respondida pela Isa, que é gerada pelo seu gerador de números randômicos. C é o número de confiança do Martin (1 ≤ C ≤ 109). O fim da entrada é indicado por SM = SI = \"*\" e C = 0. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "2102",
        "saida": "Para cada instância imprima as entradas não nulas da matriz soma. Para cada entrada não nula da matriz, imprima a linha, coluna e valor correspondente, separados por espaço. A saída não precisa estar ordenada. Entre duas instâncias imprima uma linha em branco.",
        "descricao": "A China é um dos maiores países do mundo e o mais populoso. Realizar um censo no país é quase uma operação de guerra. O governo envia para cada um dos pequenos distritos imensas matrizes, que devem ser preenchidas com as características de todos os cidadãos. Cada uma dessas matrizes tem o mesmo tamanho: nas linhas estão as várias etnias (são milhares) e nas colunas as características que se deseja medir (pode chegar a milhões). Sabemos que poucos elementos de cada uma dessas matrizes são de fato preenchidos com valores diferentes de zero. O trabalho da empresa governamental que faz o censo é, então, receber as P matrizes M × N (1 ≤ N ≤ 100), cada uma dada através de seus elementos não nulos e calcular a matriz soma das várias matrizes.",
        "titulo": "Contando em Chinês",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros, N e L representando respectivamente a dimensão das matrizes e o número total de entradas não nulas. As L linhas seguintes contêm quatro inteiros Pk, lk, ck e vk indicando que a matriz Pk tem valor vk na posição de linha lk e coluna ck."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1337",
        "saida": "Para cada caso de teste imprima uma única linha. Se existe um set ou um par que derrota a mão dada, escreva a menor mão que o faz. A mão vencedora deve ser escrita especificando as categorias de suas cartas, em ordem não-descrescente. Se nenhum set ou par derrota a mão dada, escreva o caractere '*' (asterisco).",
        "descricao": "Poker é um dos jogos de cartas mais jogados, e o Poker do Rei é uma das suas variações. O jogo é jogado com um baralho normal de 52 cartas. Cada carta tem um dos quatro naipes e uma das 13 categorias. Entretanto, no Poker do Rei os naipes das cartas não são relevantes, enquanto as categorias são Ás (categoria 1), 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete (categoria 11), Rainha (categoria 12) e Rei (categoria 13). O nome do jogo vem do fato de que no Poker do Rei, o Rei é a carta com a categoria mais alta. Mas esta não é a única diferença entre o Poker regular e o Poker do Rei. Aos jogadores do Poker do Rei são distribuídos uma mão de apenas três cartas. Existem três tipos de mãos: Um set, feito de três cartas da mesma categoria. Um par, que contém duas cartas da mesma categoria, com a outra carta sem correspondente. Um não-par, onde não tem-se duas cartas da mesma categoria. As mão são classificadas usando as seguintes regras: Qualquer set derrota qualquer par e não-par. Qualquer par derrota qualquer não-par. Um set formado com cartas de categoria maior derrota qualquer set formado com cartas de categoria menor. Se as cartas emparelhadas de dois pares têm categorias diferentes, então o par com as cartas emparelhadas de maior categoria derrota o par com as cartas emparelhadas de menor categoria. Se as cartas emparelhadas de dois pares têm a mesma categoria, então a cartas não emparelhadas de ambos os pares são comparadas; o par com carta não emparelhada de maior categoria derrota o par com carta não emparelhada de menor categoria, a menos que ambas as cartas não emparelhadas sejam da mesma categoria, caso no qual temos um empate. Uma nova empresa de software quer oferecer jogos de Poker do Rei no seu site de jogos, e precisa de um software que, dada uma mão de Poker do Rei, determine o set ou o par com menor categoria que derrota a mão dada. Você pode codificá-lo?",
        "titulo": "Poker do Rei",
        "entrada": "Cada caso de teste é descrito usando uma única linha. A linha contém três inteiros A, B e C representando as categorias das cartas entregues na mão (1 ≤ A, B, C ≤ 13). O último caso de teste é seguido por uma linha contendo três zeros."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1518",
        "saida": "Para cada caso de teste imprima um inteiro, representando a quantidade mínima de tempo necessária para capturar todas as tartarugas, na ordem desejada por Rafael.",
        "descricao": "Rafael, em seu primeiro dia de trabalho no zoológico da cidade, foi incubido da tarefa aplicada a todos os novatos: cuidar das tartarugas. Rafael achou aquilo tão fácil que resolveu tirar um cochilo em seu turno, porém quando acordou se viu em uma situação complicada, uma vez que as tartarugas estavam fugindo. Como está em seu primeiro dia de trabalho, Rafael não quer decepcionar o chefe do zoológico, portanto está decidido a parar todas as tartarugas na menor quantidade de tempo possível. O terreno em que eles estão pode ser visto como um plano, e Rafael está na posição [x, y]. A cada segundo, Rafael consegue se mover no máximo duas posições no sentido horizontal ou vertical, ou no máximo uma posição no sentido diagonal. Rafael tem que parar três tartarugas, as quais estão nas posições [x1, y1], [x2, y2] e [x3, y3], respectivamente. As tartarugas, por sua vez, podem se mover apenas uma posição por segundo, e em apenas uma direção predeterminada: Cima ([xi, yi+1]) ou Direita ([xi+1, yi]). Elas estão sempre se movendo. Para parar uma tartaruga Rafael precisa estar na mesma posição que tal tartaruga. Rafael pode escolher parar as tartarugas na ordem que ele desejar. Descubra a menor quantidade de tempo necessário para que ele pare as três tartarugas.",
        "titulo": "Tartarugas",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste é iniciado com dois inteiros x e y (1 ≤ x, y ≤ 1000), indicando que Rafael está na posição [x, y] do plano. A seguir haverá três linhas, cada uma contendo dois inteiros xi e yi (1 ≤ xi, yi ≤ 1000), indicando que a i-ésima tartaruga está na posição [xi, yi], e um caractere ci, indicando a direção que a i-ésima tartaruga está correndo: 'D' – Direita, ou 'C' – Cima. O plano em que Rafael e as tarturugas estão se estende da posição [1, 1] (canto inferior esquerdo) até a posição [10⁵, 10⁵] (canto superior direito), portanto há bastante espaço para a perseguição. Duas tartarugas nunca estarão no mesmo lugar ao mesmo tempo. O último caso de teste é indicado por x = y = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1129",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir N linhas, cada linha correspondendo a uma questão. Se a resposta à questão foi corretamente preenchida na folha de resposta, a linha deve conter a alternativa marcada (‘A’, ‘B’, ‘C’, ‘D’ ou ‘E’). Caso contrário, a linha deve conter o caractere ‘*’ (asterisco).",
        "descricao": "O professor João decidiu aplicar somente provas de múltipla escolha, para facilitar a correção. Em cada prova, cada questão terá cinco alternativas (A, B, C, D e E), e o professor vai distribuir uma folha de resposta para cada aluno. Ao final da prova, as folhas de resposta serão escaneadas e processadas digitalmente para se obter a nota de cada aluno. Inicialmente, ele pediu ajuda a um sobrinho, que sabe programar muito bem, para escrever um programa para extrair as alternativas marcadas pelos alunos nas folhas de resposta. O sobrinho escreveu uma boa parte do software, mas não pode terminá-lo, pois precisava treinar para a Maratona de Programação. Durante o processamento, a prova é escaneada usando tons de cinza entre 0 (preto total) e 255 (branco total). Após detectar os cinco retângulos correspondentes a cada uma das alternativas, ele calcula a média dos tons de cinza de cada pixel, retornando um valor inteiro correspondente àquela alternativa. Se o quadrado foi preenchido corretamente o valor da média é zero (preto total). Se o quadrado foi deixado em branco o valor da média é 255 (branco total). Assim, idealmente, se os valores de cada quadrado de uma questão são (255, 0, 255, 255, 255), sabemos que o aluno marcou a alternativa B para essa questão. No entanto, como as folhas são processadas individualmente, o valor médio de nível de cinza para o quadrado totalmente preenchido não é necessariamente 0 (pode ser maior); da mesma forma, o valor para o quadrado não preenchido não é necessariamente 255 (pode ser menor). O prof. João determinou que os quadrados seriam divididos em duas classes: aqueles com média menor ou igual a 127 serão considerados pretos e aqueles com média maior a 127 serão considerados brancos. Obviamente, nem todas as questões das folhas de resposta são marcadas de maneira correta. Pode acontecer de um aluno se enganar e marcar mais de uma alternativa na mesma questão, ou não marcar nenhuma alternativa. Nesses casos, a resposta deve ser desconsiderada. O professor João necessita agora de um voluntário para escrever um programa que, dados os valores dos cinco retângulos correspondentes às alternativas de uma questão determine qual a alternativa corretamente marcada, ou se a resposta à questão deve ser desconsiderada.",
        "titulo": "Leitura Ótica",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um número inteiro N indicando o número de questões da folha de respostas (1 ≤ N ≤ 255). Cada uma das N linhas seguintes descreve a resposta a uma questão e contém cinco números inteiros A, B, C, D e E, indicando os valores de nível de cinza médio para cada uma das alternativas da resposta (0 ≤ A, B, C, D, E ≤ 255). O ultimo caso de teste é seguido por uma linha que contém apenas um número zero."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1138",
        "saida": "Para cada caso de teste, imprima uma única linha com 10 inteiros representando o número de vezes que cada dígito é usado ao escrever todos os inteiros entre A e B, inclusive, na base decimal e sem zeros à esquerda. Escreva a contagem de cada dígito em ordem crescente do 0 até o 9.",
        "descricao": "Diana escreverá uma lista com todos os inteiros positivos entre A e B, inclusive, na base decimal e sem zeros à esquerda. Ela quer saber quantas vezes cada um dos dígitos irá ser usado.",
        "titulo": "Contagem de Dígitos",
        "entrada": "Cada caso de teste é dado em uma única linha que contém dois inteiros A e B (1 ≤ A ≤ B ≤ 108). O último caso de teste é seguido por uma linha contendo dois zeros."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1192",
        "saida": "Para cada caso de teste, deve ser impressa uma linha com um valor inteiro que representa a solução da sequência proposta por Paula.",
        "descricao": "Paula simplesmente adora matemática. Seu maior passatempo é ficar inventando jogos ou atividades que a envolvam para brincar com seus amiguinhos. Obviamente, nem todos eles não são tão apaixonados assim por matemática e têm muita dificuldade para resolver as brincadeiras propostas por ela. Agora Paula inventou um pequeno passatempo que envolve 3 caracteres: um dígito numérico, uma letra e outro dígito numérico. Se a letra for maiúscula, deve-se subtrair o primeiro dígito do segundo. Se a letra for minúscula, deve-se somar ambos os dígitos e se os DÍGITOS forem iguais, deve-se desconsiderar a letra e mostrar o produto entre os dois dígitos. Ela pediu para seu amigo Marcelo, que é bom em programação, para criar um programa para que encontre a solução para cada uma das sequências que Paula lhe apresentar.",
        "titulo": "O jogo Matemático de Paula",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste que virão a seguir. Cada caso de teste é uma sequência de três caracteres criada por Paula. Esta sequência contém na primeira posição um caractere de '0' a '9', na segunda posição uma letra maiúscula ou minúscula do alfabeto e na terceira posição outro caractere de '0' a '9'."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1470",
        "saida": "A saída de cada caso de teste conterá uma única linha contendo a letra “S” caso exista uma sequência de dobraduras que transforme a fita de entrada na fita de saída e “N” em caso contrário.",
        "descricao": "Uma das principais ferramentas de uma Máquina de Turing, que possibilita que seu poder de computação seja maior do que de outros modelos mais simples, é uma fita infinita, dividida em células, onde informações de um alfabeto ficam armazenadas. Uma Máquina Dobradora é uma máquina inspirada na Máquina de Turing, onde a fita é finita, os dados armazenados são números inteiros e, ao invés do mecanismo de funcionamento tradicional de Turing, a máquina utiliza operações de dobras da fita para fazer computações. Para efetuar uma dobra, a máquina escolhe uma posição entre células adjacentes e, ao realizar a dobra, ela soma os valores das células que se sobrepuseram, como pode ser visto na figura abaixo. Observe também que a dobra pode ser feita em uma posição anterior ao centro da fita, como ilustrado a seguir. Note também que, com isso, podem ser feitas dobras também no início e no final da fita, invertendo a ordem desta. A empresa Science of Bends Company vem desenvolvendo versões comerciais da Máquina Dobradora e a produção tem aumentado recentemente. Infelizmente o último lote de Máquinas Dobradoras produzidas está com problemas e algumas máquinas não estão funcionando corretamente. Assim, testes são necessários para evitar a venda de produtos com defeito, o que poderia denegrir a imagem da empresa. Para testar as máquinas, um conjunto de testes é dado e, para cada fita, a máquina devolve o resultado da computação. Assim os engenheiros responsáveis pelos testes tomam nota do resultado e podem verificar se este está correto. Mas os engenheiros esqueceram-se de tomar nota de qual computa ção foi feita em cada conjunto de teste. Para evitar a necessidade de testar todas as máquinas novamente, os engenheiros estariam satisfeitos em descobrir se pelo menos existe uma sequência de dobras coerente para um par de fitas de entrada e saída. Para isso, eles contrataram você para desenvolver um programa que verifique, para cada fita de entrada, se existe uma sequência de dobraduras que leve a uma fita de saída.",
        "titulo": "Máquina Dobradora",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por 4 linhas. As primeiras duas linhas referem-se à entrada fornecida à Máquina Dobradora e as duas seguintes referem-se à saída fornecida pela Máquina. A primeira linha da entrada contém um único inteiro N (M ≤ N ≤ 15), descrevendo o tamanho da fita de entrada. A linha seguinte conterá N inteiros v1, . . . , vN, correspondentes ao conteúdo da fita de entrada. A terceira linha contém um inteiro M (1 ≤ M ≤ N), o tamanho da fita de saída e a última linha conterá inteiros w1, . . . ,wM, correspondentes ao conteúdo da fita de saída. O final da entrada é indicado por EOF (fim de arquivo). Nota: 0 ≤ vi, wj ≤ 108 para 1 ≤ i ≤ N e 1 ≤ j ≤ M."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1739",
        "saida": "Para cada caso de teste imprima uma linha contendo o N-ésimo termo da série de Threebonacci.",
        "descricao": "Um número pertence à sequência de Threebonacci caso pertença à sequência de Fibonacci (assuma que o primeiro termo da série é o 1) e atenda pelo menos um dos últimos critérios abaixo: 1 – A representação do número possui pelo menos um dígito 3. 2 – O número é múltiplo de 3.",
        "titulo": "Sequência de Threebonacci",
        "entrada": "Cada caso de teste contém um inteiro N (1 ≤ N ≤ 60 ). A entrada termina com o fim de arquivo (EOF)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1026",
        "saida": "Para cada linha de entrada, o programa deverá fornecer uma linha de saída, que é o valor após somar dois números no modo “Mofiz”.",
        "descricao": "6+9=15 parece ok. Mas como pode estar certo 4+6=2? Veja só. Mofiz trabalhou duro durante seu curso de Eletrônica Digital, mas quando lhe foi solicitado que implementasse um somador de 32 bits como exame no laboratório, ele acabou fazendo algum erro na parte de projeto. Depois de vasculhar seu projeto por uma hora e meia, ele encontrou seu erro. Ele estava fazendo soma de bits, mas seu carregador de bit (carry) sempre apresentava como saída o valor zero. Portanto, 4  = 00000000 00000000 00000000 00000100 +6 = 00000000 00000000 00000000 00000110 ---------------------------------------- 2  = 00000000 00000000 00000000 00000010 Claro que já é uma boa coisa ele finalmente ter encontrado o seu erro, mas isso foi muito tarde. Considerando seu esforço durante o curso, o instrutor deu a ele mais uma chance: Mofiz teria que escrever um programa eficiente que pegaria 2 valores decimais de 32 bits sem sinal como entrada e deveria produzir um número de 32 bits sem sinal como saída, ou seja, somando do mesmo modo como o circuito faz.",
        "titulo": "Carrega ou não Carrega?",
        "entrada": "Em cada linha de entrada haverá um par de inteiros separado por um único espaço. A entrada termina com EOF."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1420",
        "saida": "Seu programa deverá identificar na saída cada previsão por um número sequencial na primeira linha, e nas cinco seguintes deverá escrever os cinco horários completos referentes à previsão efetuada, no mesmo formato utilizado na entrada para o horário de processamento da previsão. Você deve também pular uma linha ao final de cada previsão.",
        "descricao": "Através da pesquisa e do desenvolvimento espetacular de técnicas revolucionárias de computação, estatística e intuição, um grupo de mulheres da Universidade de Torrinha desenvolveram um software capaz de prever o futuro. Na verdade, o programa não consegue descrever exatamente o que vai acontecer, mas através da análise da resposta a uma série de perguntas sobre a pessoa, ele consegue identificar quando acontecerão os próximos cinco eventos mais importantes na vida dela. O programa apresenta dois pequenos problemas. O primeiro é que a pessoa sobre a qual se quer adivinhar o futuro precisa passar centenas de horas ininterruptas na frente do computador, respondendo às perguntas feitas pelo software, para que ele consiga fazer a previsão. O segundo é que as previsões são feitas em número de segundos, a contar do término do processamento da precisão. As moças de Torrinha estão empenhadas na solução do primeiro problema, e pediram aos concorrentes da Maratona de Programação uma ajuda para resolver o segundo.",
        "titulo": "Contando os Segundos",
        "entrada": "A entrada consiste de várias previsões referentes a diferentes pessoas. A primeira linha de cada previsão contém o momento exato em que os 5 números (que correspondem aos 5 momentos importantes) foram impressos pelo programa. Este momento segue o formato: ,::: onde é a abreviação do dia da semana correspondente, composto pela sequencia de 3 caracteres maiúsculos correspondentes aos dias da semana de domingo a sábado, respectivamente, tais sejam: DOM, SEG, TER, QUA, QUI, SEX ou SAB. é o dia do mês, escrito com 2 dígitos, zero à esquerda se for o caso. é a abreviação do mês correspondente, composto pela sequencia de 3 caracteres maiúsculos correspondentes aos meses de Janeiro a Dezembro, respectivamente, tais sejam: JAN, FEV, MAR, ABR, MAI, JUN, JUL, AGO, SET, OUT, NOV ou DEZ. é o ano, escrito com 4 dígitos. , e escrito com 2 dígitos, zero à esquerda se for o caso. Nas linhas seguintes vem os 5 momentos previstos, um por linha, 5 linhas por previsão. Cada momento consiste no número d de segundos (0 < d < 2.000.000.000) a contar do momento do processamento. Após o último caso de teste, uma linha iniciada por 'FIM' indica o final do arquivo de entrada. Você pode assumir que o programa desenvolvido em 01 de Março de 2002, de modo que nenhuma data de previsão será anterior a esta. Outro fato importante é que as moças de Torrinha só vão usar o programa até as 23:59:59 de 31/12/2099 quando uma delas acha que vai morrer, pois, isso foi previsto por outro programa elaborado pelo departamento de intuição feminina da Unitor (Universidade de Torrinha)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1691",
        "saida": "Para cada caso teste imprima uma única linha com \"Case #A: B\" onde A é o número do caso teste (começando de 1) e B é o menor P possível de forma que o nível ainda seja possível de ser completado. B deve ser arredondado para 4 dígitos após o ponto decimal. A entrada será de tal forma que erros até 10-5 ainda darão a resposta correta.",
        "descricao": "Skyrk desenvolveu um jogo chamado Super Circunferência. Sua simplicidade é contrastada por sua grande dificuldade. O objetivo de Super Circunferência é controlar um ponto que se desloca ao redor uma circunferência central tentando evitar contato com as paredes circulares que se aproximam. O ponto preto circula ao redor da circunferência vermelha a uma velocidade de uma revolução completa por segundo. Um nível tem vários conjuntos de paredes circulares que se aproximam, com as quais o ponto deve evitar o contato. Uma parede se aproximando pode ser interpretada como um setor de uma circunferência. O conjunto de paredes se aproxima do centro na velocidade de um conjunto a cada P segundos. O jogador consegue vencer se ele desviar de todas as paredes com sucesso. Um novo nível foi criado com N conjuntos de paredes. Para ajustar a sua dificuldade corretamente, você deve encontrar o menor valor de P que ainda torne o nível possível de ser completado.",
        "titulo": "Super Circunferência",
        "entrada": "A primeira linha contém T (T ≤ 100) – o número de casos teste. Após essa linha, haverá T casos teste. A primeira linha de um caso teste contém um inteiro N (1 ≤ N ≤ 104) – o número de conjuntos de paredes. As próximas N linhas contém a descrição de um conjunto de paredes da seguinte forma: Primeiro o número K (0 ≤ K ≤ 10) – o número de paredes que esse conjunto possui. Após isso, K tuplas de números de ponto flutuante da seguinte forma: X,Y (0 ≤ X, Y < 2π) – A parede começa no ângulo X e estende ao longo da circunferência em sentido horário até o ângulo Y. Paredes do mesmo conjunto nunca se intersectam. Nenhum dos conjuntos será uma circunferência completa. Quando o jogo começa, o primeiro conjunto atinge o centro após P segundos e o ponto preto pode começar em qualquer posição. A figura acima ilustra o primeiro teste de exemplo."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1403",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo o identificador do jogador que é o segundo melhor, em número de aparições nos rankings. Se há um empate para segundo lugar, imprima os identificadores de todos os segundo colocados, em ordem crescente. Cada identificador produzido deve ser seguido por um espaço em branco.",
        "descricao": "A família toda ficou excitada pela novidade. Todos sabiam que o meu avô tinha sido um excelente jogador de bridge por décadas, mas quando foi anunciado que ele estaria no Guinness Book, o livro dos recordes, como o jogador de bridge de maior sucesso de todos os tempos, wow, aquilo foi surpreendente. A Associação Internacional de Bridge (AIB) tem mantido, por diversos anos, um ranking semanal dos melhores jogadores do mundo. Considerando que cada aparição em um ranking semanal constitui um ponto para o jogador, meu avô foi nominado o melhor jogador de todos os tempos porque ele conseguiu o maior número de pontos. Tendo muitos amigos que também estavam competindo com ele, meu avô está extremamente curioso para saber que jogador(es) ficou(aram) com o segundo lugar. Ele precisa de um programa, o qual, dada uma lista com os ranking semanais, descubra que jogador(es) ficou(aram) com o segundo lugar, de acordo com o número de pontos.",
        "titulo": "Meu Avô é Famoso",
        "entrada": "A entrada contém diversos casos de teste. Jogadores são identificados por inteiros de 1 a 10000. A primeira linha de um caso de teste contém dois inteiros N e M, indicando, respectivamente, o número de rankings disponíveis (2 ≤ N ≤ 500) e o número de jogadores em cada ranking (2 ≤ M ≤ 500). Cada uma das próximas N linhas contém a descrição de um ranking semanal. Cada descrição é composta por uma sequência de M inteiros, separados por um espaço em branco, identificando os jogadores que apareceram naquele ranking semanal. Você pode assumir que: em cada caso de teste há exatamente um melhor jogador e ao menos um segundo melhor jogador, cada ranking semanal consiste de M jogadores distintos. O final da entrada é indicado por N = M = 0."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1547",
        "saida": "Para cada caso de teste, seu programa deve imprimir um número inteiro que indica a posição do ganhador da camiseta, conforme as regras descritas acima.",
        "descricao": "O professor Genesio recebeu várias camisetas da OBI (Organização dos Bacharéis Intelectuais) para doar a seus alunos de Ciência da Computação. Para fazer a distribuição destas camisetas ele organizou os alunos de cada turma do curso em pequenos grupos (de no máximo 10 pessoas) e definiu que faria o sorteio de uma camiseta para cada um dos grupos. Como Genesio não quer perder muito tempo com este sorteio, ele pediu que você o ajudasse com um programa que determinasse quem foi o aluno ganhador de acordo com a seguinte regra: O primeiro de cada grupo a acertar um número escolhido pelo professor obviamente ganha a camiseta, mas se ninguém acertar este número, ganha a camiseta o primeiro que chegar o mais próximo deste número. Não faz diferença quem do grupo o professor escolhe para tentar iniciar a adivinhação. Este sempre será o aluno número 1, e assim sucessivamente.",
        "titulo": "Adivinha",
        "entrada": "A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste, ou de camisetas que serão sorteadas. Cada caso de teste é composto por duas linhas. A primeira linha contém dois valores inteiros QT (4 ≤ QT ≤ 10) e S (1 ≤ S ≤ 100) separados por um espaço, que indicam respectivamente a quantidade de alunos do grupo e o número secreto que deve ser adivinhado. A segunda linha contém cada um dos QT valores, separados por um espaço."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1622",
        "saida": "Para cada consulta imprima uma linha, contendo N caracteres cada, onde o i-ésimo caractere indica o estado da i-ésima lâmpada, estado ela ligada (caractere \"o\") ou desligada (caractere \"x\").",
        "descricao": "No último trabalho da escola, você desenvolveu um projeto um tanto quanto curioso. Trata-se de N lâmpadas dispostas uma ao lado da outra, enumeradas de 1 até N, da esquerda para a direita, e de um único interruptor. Quando este interruptor é pressionado, ele troca o estado de uma das lâmpadas (se está ligada, ela desliga, e vice-versa). O diferencial do seu projeto está no comportamento desse interruptor. Em vez de trocar o estado de apenas uma lâmpada em particular, ele intercala entre as lâmpadas em que ele vai agir, funcionando da seguinte maneira: na primeira vez ele troca o estado da lâmpada número 1; na segunda, e nas próximas vezes, ele troca o estado da lâmpada que está K posições à direita da anterior. Se ele chegar no final da sequência, ele continua a contar da posição 1. Ou seja, seja N = 8 e K = 3, se pressionarmos o interruptor 4 vezes ele vai agir nas lâmpadas 1, 4, 7 e 2, respectivamente. Você ficou um pouco intrigado com sua própria invenção, e resolveu fazer alguns testes. Dado o estado inicial de cada uma das N lâmpadas (ligado ou desligado), o valor de K e um número M de vezes que o interruptor foi pressionado, diga o estado final das N lâmpadas.",
        "titulo": "Lâmpadas",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e Q (3 ≤ N ≤ 100, 1 ≤ Q ≤ 1000), representando o número de lâmpadas e o número de consultas, respectivamente. Em seguida haverá uma linha com N caracteres, representando o estado das N lâmpadas. O i-ésimo caractere indica o estado da i-ésima lâmpada, estando ela ligada (caractere \"o\") ou desligada (caractere \"x\"), para todo 1 ≤ i ≤ N. Em seguida haverá Q linhas, cada uma com dois inteiros K e M (1 ≤ K < N, 1 ≤ M ≤ 10⁶), indicando o tamanho do “salto” que seu interruptor dá (conforme o enunciado), e o número de vezes que o mesmo foi pressionado, respectivamente. A cada consulta o interruptor inicia na posição 1. O último caso de teste é indicado quando N = Q = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2192",
        "saida": "For each test case, display its case number followed by the best program as described above. Display the word “empty” if the best program uses no operations. Display the word “impossible” if there is no program meeting the specifications. Display the program as a sequence of space-separated strings, alternating between strings of the form “nA” and strings of the form “nM”, where n > 0. Strings of the former type indicate n consecutive A operations, and strings of the latter type indicate n consecutive M operations. Follow the format of the sample output.",
        "descricao": "The Industrial Computer Processor Company offers very fast, special purpose processing units tailored to customer needs. Processors of the a-C-m family (such as the 1-C-2 and the 5-C-3) have an instruction set with only two different operations: A add a M multiply by m The processor receives an integer, executes a sequence of A and M operations (the program) that modifies the input, and outputs the result. For example, the 1-C-2 processor executing the program AAAM with the input 2 yields the output 10 (the computation is 2 → 3 → 4 → 5 → 10), while the 5-C-3 processor yields 51 with the same program and input (2 → 7 → 12 → 17 → 51). You are an a-C-m programmer assigned to a top secret project. This means that you have not been told the precise computation your program should perform. But you are given particular values p, q, r, and s and the following conditions: The input is guaranteed to be a number between p and q. The output must be some number between r and s. Given an a-C-m processor and the numbers p, q, r, and s, your job is to construct the shortest a-C-m program which, for every input x such that p ≤ x ≤ q, yields some output y such that r ≤ y ≤ s. If there is more than one program of minimum length, choose the one that come first lexicographically, treating each program as a string of As and Ms.",
        "titulo": "To Add or to Multiply",
        "entrada": "The input contains several test cases. Each test case is given by a line with the six integers a, m, p, q, r, and s as described above (1 ≤ a, m, p, q, r, s ≤ 109 , p ≤ q and r ≤ s). The last test case is followed by a line with six zeros."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1410",
        "saida": "Para cada caso de teste na entrada imprima uma linha contendo um único caractere: \"Y\" (maiúsculo) se existe um jogador atacante impedido, e \"N\" (maiúsculo) caso contrário.",
        "descricao": "A Rede do Hemisfério é a maior rede de televisão de Tumbolia, um pequeno país situado a leste da América do Sul (ou sul da América do Leste). O esporte mais popular em Tumbolia, obviamente, é o futebol; muitos jogos são transmitidos toda semana em Tumbolia. A Rede do Hemisfério recebe muitos pedidos para repassar lances polêmicos; normalmente esses acontecem quando um jogador é dito impedido pelo juíz. Um jogador atacante está impedido se ele está mais próximo da linha do gol do oponente do que o penúltimo adversário. Um jogador não está impedido se ele está na mesma linha que o penúltimo adversário ou ele está na mesma linha que os dois últimos adversários. Através do uso de tecnologia de computação gráfica, a Rede do Hemisfério consegue tirar uma foto do campo e determinar as distâncias dos jogadores até a linha do gol do time defensor, mas eles ainda precisam de um programa que, dadas essas distâncias, decida se um jogador está impedido.",
        "titulo": "Ele Está Impedido!",
        "entrada": "O arquivo de entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros A e D separados por um espaço indicando, respectivamente, o número de jogadores atacantes e defensores envolvidos na jogada (2 ≤ A, D ≤ 11). A próxima linha contém A inteiros Bi separados por um espaço, indicando as distâncias dos jogadores atacantes até a linha do gol (1 ≤ Bi ≤ 104). A próxima linha contém D inteiros Cj separados por um espaço, indicando as distâncias dos defensores até a linha do gol (1 ≤ Cj ≤ 104). O final da entrada é dado por A = D = 0."
    },
    {
        "nivel": "9",
        "assunto": "2",
        "numero": "1139",
        "saida": "Para cada caso de teste, imprima Q+1 linhas. A linha i das primeiras Q linhas devem conter dois inteiros representando a linha e a coluna da localização que foi atribuída ao número pi. A última linha de cada caso deve conter um único caractere '-' (hífen).",
        "descricao": "Você irá construir uma nova fábrica na sua cidade. Já que você necessida de muita energia elétrica, ter a fábrica posicionada perto de uma estação de força é importante. Você quer construir uma lista priorizada das possíveis localizações.   A área onde a fábrica precisa ser construída pode ser representada como uma grade retangular de N linhas e M colunas de células. Algumas dessas células contem uma estação de força. A nova fábrica ocupa exatamente uma célula, e pode ser construída em qualquer célula livre (ou seja, qualquer célula que não contém uma estação de força).   Numerando as linhas de 1 até N e as colunas de 1 até M, a localização de uma célula pode ser descrita por dois inteiros. A célula ( i , j ) é a célula na linha i e coluna j. A distância entre as células (i0 , j0) e (i1 , j1) é max( |i0 - i1| , |j0 - j1| ) onde | x | representa o valor absoluto de x. A prioridade elétrica de uma localização é a menor distância até qualquer estação de força.   Com isso em mente, você vai numerar todas as possíveis localizações com inteiros consecutivos começando de 1. Você fará isso em ordem crescente de prioridade elétrica. Dentre locais com a mesma prioridade elétrica, você vai numerá-los em ordem crescente de seu índices de linha. Dentre locais com mesmas prioridade elétrica e índice de linha, você vai listá-los em ordem crescente de seu índices de coluna.   Na figura abaixo você pode ver uma grade 4 x 7. Células pretas são as células onde há uma estação de força. Células cinza escuras possuem prioridade elétrica 1, cinza claras prioridade elétrica 2 e células brancas prioridade elétrica 3. O número dentro de cada célula é o número atribuído por você à célula.     Você receberá inúmeras consultas sobre a lista construída. Em cada consulta será dado um número representando a posição na lista final e você deverá dizer a qual célula foi atribuída a posição dada.",
        "titulo": "Necessidades Elétricas",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém três inteiros N, M e P, representando o número de linhas e colunas da grade (1 ≤ N,M  ≤ 109) e o número de estações de força (1 ≤ P ≤ 20). Cada uma das P linhas seguintes contém dois inteiros R e C representando a linha e a coluna de uma estação de força (1 ≤ R ≤ N e 1 ≤ C  ≤ M). Em cada caso de teste, todas as estações de força estão em células distintas. A próxima linha contém um único inteiro Q representando o número de consultas (1 ≤ Q ≤ 50). Então segue uma linha com Q inteiros p1, ... , pQ representando as posições da lista priorizada (1 ≤ pi ≤ N x M - P).   O último caso de teste é seguido de uma linha contendo três zeros."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1540",
        "saida": "Para cada caso de teste deverá ser impresso a taxa de crescimento anual com apenas duas casas decimais, separadas por vírgula e truncadas, ou seja, sem arredondamentos.",
        "descricao": "Você está participando de um comitê que irá ajudar a planejar o crescimento da energia elétrica no Brasil, garantindo assim que as usinas consigam fornecer a energia necessária no futuro. Para isso você tem as seguintes informações: durante o ano de 2010 o consumo médio do brasileiro foi de 104.326 GWh. em 2013 o consumo foi de 127.755 GWh. Você deve determinar a taxa de crescimento anual para diferentes situações e previsões futuras, considerando o fato deste crescimento ser linear. Nesse caso, a taxa foi de 7.809,66 GWh/ano.",
        "titulo": "Planejando a Energia",
        "entrada": "A primeira linha da entrada contém um número inteiro N (1 ≤ N ≤ 1000) representando o total de casos de testes. As N linhas seguintes são compostas de 4 números inteiros A, B (B > 0), C, D (D > 0) separados por espaço. O número A representa o ano, o número B representa o consumo do ano A. O número C representa um outro ano e o número D representa o consumo de C."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1732",
        "saida": "Você deverá imprimir a coordenada de Maja para os números de Willi, cada uma em uma linha separada.",
        "descricao": "Maja é uma abelha. Ela mora em uma colméia de abelhas, com milhares de outras abelhas. Esta colméia é composta de muitos favos hexagonais, onde o mel é armazenado dentro destes. Mas abelha Maja tem um problema. Willi disse a ela onde pode encontrá-lo, mas pelo fato de Willi ser um drone masculino e Maja uma trabalhadora, eles têm diferentes sistemas de coordenadas. Sistema de Coordenadas de Maja Maja, que muitas vezes precisa voar diretamente a um hexágono especial de mel, usa um sistema avançado, bidimensional, ao longo de toda a colméia. Sistema de Coordenadas de Willi Willi que é mais preguiçoso, anda apenas em torno de células numeradas no sentido horário a partir de 1, no meio da colméia. Ajude Maja a converter o sistema de Willi para o dela. Escreva um programa que dado um número de favo (hexágono) de mel localizado na colméia de Willi, determine suas coordenadas no sistema de Maja.",
        "titulo": "Abelha Maja",
        "entrada": "A entrada é composta por um ou mais inteiros que representam os números de Willi. Cada linha contém apenas um número, seguido por nova linha. Os números dos favos são todos menos que 100 000."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1561",
        "saida": "Para cada teste, a saída é composta por um desenho do relógio no horário dado na entrada (o desenho deve seguir o mesmo formato dos desenho dos exemplos). Imprima uma linha em branco após cada desenho.",
        "descricao": "Alguns programadores gostam de ser estranhos e usam relógios binários como o relógio da imagem abaixo: Há também programadores que gostam de inventar questões para competições online, porém não gostam de escrever textos detalhados e longos para as questões. Sua tarefa nesse problema é desenhar o relógio da imagem em um dado horário.",
        "titulo": "Relógio Binário",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha conténdo um horário no formato HH:MM (0 ≤ HH < 12 e 0 ≤ MM < 60). A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1342",
        "saida": "Para cada teste em sua entrada, seu programa deve apresentar um único inteiro: o número representando o jogador. A saída deve ser escrita de uma forma padrão.",
        "descricao": "Um simples jogo de tabuleiro que gerações de crianças jogaram consiste em um tabuleiro contendo uma trilha de quadrados e um conjunto de peças coloridas. No começo do jogo cada peça é atribuída a um jogador; todas as peças são inicialmente posicionadas antes do primeiro quadrado da trilha. O jogo procede em rodadas. A cada rodada, jogadores lançam um par de dados e movem suas peças um número de quadrados para frente igual ao resultado rolado. Os jogadores jogam os dados sempre na mesma ordem (jogador A, depois jogador B, etc.) em cada rodada. Maioria dos quadrados no tabuleiro são quadrados planos (ou quadrados vazios), mas alguns são “armadilhas”. Se a peça de um jogador cair em um quadrado armadilha no fim de seu movimento, o jogador perde sua próxima jogada. Ou seja ele/ela não pode jogar os dados, e seu/sua peça fica uma rodada sem se movimentar. Haverá exatamente três armadilhas na trilha: O vencedor do jogo é o jogador que sua peça chega no fim da trilha primeiro. O fim da trilha é depois do último quadrado do tabuleiro. Considere, por exemplo, o tabuleiro da imagem acima, que tem quadrados numerados de 1 à 48. No começo, as peças são posicionadas no local marcado “Begin (início)” na figura, ou seja, antes do quadrado de número 1. Portanto, se um jogador rola um 7 (dados mostrando 2 e 5 por exemplo) seu/sua peça estará posicionada no quadrado de número 7 no fim da primeira rodada do jogo. Além disso, se a peça de um jogador está posicionada no quadrado de número 41, o jogador precisa de um resultado de no mínimo 8 para chegar ao fim da trilha e ganhar o jogo. Note também que não haverá empate no jogo. Será dado a você um número de jogadores, o número de quadrados na trilha, o local das armadilhas e uma lista de resultados jogados nos dados. Você deve escrever um programa que determina o ganhador.",
        "titulo": "Dado",
        "entrada": "Seu programa deve processar vários casos de teste. A primeira linha de um teste contém dois inteiros P e S representando respectivamente o número de jogadores e o número de quadrados na trilha (1 <= P <= 10 e 3 <= S <= 10000). A segunda linha descreve as armadilhas, representadas por três inteiros diferentes T1, T2 e T3, mostrando suas posições na trilha (1 <= T1, T2, T3 <= S). A terceira linha contém um único inteiro N indicando o número de rolagem de dados no teste. Cada uma das N linhas seguintes contém dois inteiros D1 e D2 (1 <= D1, D2, <= 6), representando os resultados da rolagem dos dados. O fim da entrada é indicado por P = S = 0. O conjunto de rolagem dos dados em um teste será sempre um número exato necessário para que um jogador ganhe o jogo. Um jogador é identificado por um número de 1 até P. Os jogadores jogam em uma rodada de uma forma sequencial de 1 para P. A entrada deve ser lida de uma forma padrão."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2205",
        "saida": "For each test case, display a single line containing the case number and the number of times that the relay system needs to be set up or modified.",
        "descricao": "The year is 2112 and humankind has conquered the solar system. The Space Ranger Corps have set up bases on any hunk of rock that is even remotely inhabitable. Your job as a member of the Asteroid Communications Ministry is to make sure that all of the Space Ranger asteroid bases can communicate with one another as cheaply as possible. You could set up direct communication links from each base to every other base, but that would be prohibitively expensive. Instead, you want to set up the minimum number of links so that everyone can send messages to everyone else, potentially relayed by one or more bases. The cost of any link is directly proportional to the distance between the two bases it connects, so this doesn’t seem that hard of a problem. There is one small difficulty, however. Asteroids have a tendency to move about, so two bases that are currently very close may not be so in the future. Therefore as time goes on, you must be willing to switch your communication links so that you always have the cheapest relay system in place. Switching these links takes time and money, so you are interested in knowing how many times you will have to perform such a switch. A few assumptions make your task easier. Each asteroid is considered a single point. Asteroids always move linearly with a fixed velocity. No asteroids ever collide with other asteroids. Also, any relay system that becomes optimal at a time t ≥ 0 will be uniquely optimal for any time s satisfying t < s < t+10−6 . The initial optimal relay system will be unique.",
        "titulo": "Asteroid Rangers",
        "entrada": "Each test case starts with a line containing an integer n (2 ≤ n ≤ 50) indicating the number of asteroid bases. Following this are n lines, each containing six integers x, y, z, vx, vy, vz. The first three specify the initial location of an asteroid (−150 ≤ x, y, z ≤ 150), and the last three specify the x, y, and z components of that asteroid’s velocity in space units per time unit (−100 ≤ vx, vy, vz ≤ 100)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1209",
        "saida": "Para cada instância imprima uma única linha contendo a lista das pessoas a serem convidadas separadas por um espaço em branco. A lista deve estar ordenada em ordem crescente. Caso ninguém possa ser convidado, imprima o número 0.",
        "descricao": "São Petersburgo tornou-se após o fim da cortina de ferro, no início dos anos 90, uma das principais cidades da cena alternativa em todo o mundo. Grupos de punks, diversas bandas de hardcore e outros representantes da cena alternativa mudaram-se para a cidade, atraídas pela grande quantidade de jovens. Com o surgimento das comunidades virtuais, alguns anos mais tarde, notou-se o enorme potencial do uso destas comunidades para combinar encontros, festas, raves, etc. Nestas festas de São Petersburgo é sempre muito importante que cada um dos participantes tenha pelo menos um certo número de amigos na rede social. E, ao mesmo tempo, desejamos convidar o maior número possível de pessoas de São Petersburgo desde que a restrição com relação ao número de amigos seja satisfeita. Tal restrição diz que, para ser convidada a festa, a pessoa precisa ter pelo menos um número K de amigos na lista de convidados. Sua tarefa neste problema é, dado o conjunto de pessoas da comunidade e a lista de suas relações, determinar quais devem ser chamadas para que a festa tenha a maior quantidade possível de participantes satisfazendo a restrição.",
        "titulo": "Festas de São Petersburgo",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém três inteiros N (1 ≤ N ≤ 1000), M e K (O ≤ K ≤ N) representando respectivamente o número de pessoas na comunidade, o número de relações de amizade nessa comunidade e o número mínimo de amigos convidados uma pessoa precisa ter para ser convidada. Cada pessoa da comunidade é identificada por números de 1 a N. Cada uma das próximas M linhas contém um par de pessoas indicando que elas são amigas na rede social."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2210",
        "saida": "For each test case, display the case number followed by the minimal number of key attach/detach operations and the minimal number of ring connect/disconnect operations. If there is no way to split the keys as requested, display the case number and the word 'impossible' instead of the two integers.",
        "descricao": "Adam carries a bunch of keys attached to key rings, some of which may be connected to each other. The rings are common key rings, so a key can be attached to or detached from a ring by sliding along the spiral. In the same way, two rings can be connected or disconnected. Adam wants to give some of the keys to Brenda. Since manipulating the keys and rings is often an annoying task (and also dangerous to one’s fingernails), Adam is looking for a way to minimize the number of key and ring operations. Every key attachment, key detachment, ring connection, or ring disconnection is considered one operation. Since manipulating two rings is significantly easier than sliding a key, we first want to minimize the number of keys being detached and attached. Among solutions with the same minimal number of key operations, you need to find the one with the minimal number of ring connections and disconnections. When all the operations are complete, Adam and Brenda must each carry one connected group of rings and keys. The only exception is when either of them would have no keys at all—in such a case, no ring is needed. Each key must be attached to exactly one ring. Some rings (but not keys) may be considered leftovers and may remain disconnected from the two groups. The left side of the following figure shows an initial configuration consisting of four keys on three rings. Adam wishes to give Brenda the two keys labeled N and R. This can be accomplished by two key operations and one ring operation, resulting in the configuration shown on the right side of the figure.",
        "titulo": "Keys",
        "entrada": "Each test case contains one or more lines, each containing a two letter string. Lowercase letters (a - z) represent key rings and uppercase letters (A - Z) represent keys. The two letters on a line specify either a key attached to a ring or two rings connected together. The end of each test case is denoted by a line containing the digit zero. Keys denoted by letters A through M remain with Adam, and keys denoted by letters N through Z are given to Brenda. No line contains two uppercase letters. No pair of letters are specified more than once in the same test case. Each key is connected to exactly one ring. There are no “circles” in the ring configurations (disconnecting any two rings will increase the number of connected groups). All existing keys and rings are mentioned at least once."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2151",
        "saida": "Para cada caso de teste, a saída deve aparecer a palavra Parede, seguida por um espaço, pelo número do caso e por dois pontos. A partir da linha seguinte deve mostrar a parede, formada por M linhas e N colunas, separadas por um espaço, descrevendo como ficou a parede após o soco.",
        "descricao": "Certo dia, um grupo de cientistas resolveu calcular o poder de destruição do soco do super-herói Rulk, dos Programadores. Constataram que o soco em si afetaria qualquer parede, desde as menores até as gigantes. Assim, conseguiram sintetizar este efeito da seguinte forma: Converteram as paredes em uma matriz MxN, no seu estado de destruição atual, definindo valores inteiros a cada coordenada da parede, sendo 0 para menos destruída, indo até para 100, mais destruída. Além disso, determinaram qual seria a coordenada exata do soco. Constataram que o valor da coordenada do soco aumentaria em 10 pontos em seu estado de destruição, ficando mais frágil; e as coordenadas adjacentes a este ponto aumentariam em 9 pontos; as coordenadas adjacentes a estes aumentariam em 8 pontos; e assim sucessivamente. E quando chegasse a 1 ponto, todo o restante da parede também aumentaria em um ponto, afetando toda a parede.",
        "titulo": "Soco do Rulk",
        "entrada": "A primeira linha da entrada contém um inteiro C (1 ≤ C ≤ 100), indicando o número de casos de teste. Esta linha é seguida pelos casos de teste. Cada caso é descrito por quatro números inteiros M, N, X e Y (1 ≤ X ≤ M ≤ 100 e 1 ≤ Y ≤ N ≤ 100), representando a quantidade de linhas e colunas da parede, e as coordenadas onde o soco foi dado. Em seguida, seguem M linhas, com N números inteiros Z (1 ≤ Z ≤ 90), separados por um espaço, representando os valores originais de cada bloco da parede."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2212",
        "saida": "For each test case, display the case number and the length of the desired route, accurate to two decimal places.",
        "descricao": "You are working for a company designing cute, funny robot vacuum cleaners. At a high level, the robots’ behavior is divided into three modes: Exploration Vacuuming Rampant Killing Unfortunately, while consumer testing shows that the last two modes are working perfectly, the exploration mode still has bugs. You’ve been put in charge of debugging. At the beginning of the exploration mode, the robot is placed into a convex polygonal room. It has sensors that should tell it where all the walls are. Your job is to write a program that verifies that these readings are correct. To do this, the robot needs to physically touch every wall in the room. Your problem is this: given the shape of a convex polygonal room with N walls and a starting point P inside it, determine the shortest route that touches each wall and then returns to P. Touching a corner counts as touching both incident walls.",
        "titulo": "Room Service",
        "entrada": "Each test case starts with a line containing the number of vertices N of the polygon (3 ≤ N ≤ 100) and the integer coordinates Px and Py of the robot’s starting point (−10 000 ≤ Px, Py ≤ 10 000). This is followed by N lines, each containing two integers x, y (−10 000 ≤ x, y ≤ 10 000) defining a vertex of the polygon. Vertices are given in counterclockwise order, all interior angles are less than 180 degrees, the polygon does not self-intersect, and the robot’s starting point is strictly inside the polygon"
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "2011",
        "saida": "Saída de uma linha com um número racional, que representa o imposto total máximo que ACM pode coletar. O resultado deve ser saída como um número racional com exatamente cinco dígitos após o ponto decimal, arredondado, se necessário.",
        "descricao": "O ano é 2115. O Centro Interplanetário de Planejamento Comercial (da sigla em inglês, ICPC) é suportado pelo Ministério de Comunicação Autônoma (ACM). Uma operação comercial é realizada executando transações entre escritórios ACM conectados ao longo da galáxia. A execução de uma transação entre dois escritórios conectados à ACM envolve um fiscal não-negativo, cujo valor aumenta ou diminui, continuamente como uma função linear A × t + B de tempo t, onde t é um número real medido em minutos durante o dia (0 ≤ t ≤ 24 × 60). O imposto total de uma operação comercial realizada entre um escritório fonte ACM e um escritório destino ACM em algum momento t, é calculada como a mínima soma possível dos impostos das transações executadas entre os escritórios ACM visitados ao longo de algum caminho a partir do escritório fonte ACM para o escritório destino ACM. O imposto de cada transação é calculado ao mesmo tempo t. Desde que o imposto das transações entre escritórios ACM conectados está mudando continuamente durante a dia, seria melhor executar a operação comercial em algum horário específico do dia, em ordem para maximizar o imposto recolhido. Naquela época, ACM decidiu realizar a operação comercial, e não antes ou depois. Sua tarefa é escrever um programa que recebe como entrada a descrição da rede de escritório ACM e retorna como saída o imposto total máximo da operação comercial que pode ser alcançado durante o dia, ou seja, o imposto total máximo que ACM pode coletar.",
        "titulo": "Impostos Galácticos",
        "entrada": "A primeira linha contém dois inteiros N e M, representando, respectivamente, o número de escritórios ACM na rede e o número de conexões (2 ≤ N ≤ 1000 e 1 ≤ M ≤ 102). São escritórios ACM os identificados com inteiros distintos de 1 a N, sendo 1 o escritório fonte ACM e N o escritório destino ACM. Cada uma das próximas linhas M descreve uma conexão com quatro inteiros I, J, A e B, indicando que há uma conexão bidirecional entre escritório I e o escritório J (1 ≤ I < J ≤ N), de tal forma que o fiscal de uma transação executada entre escritório I e escritório J no tempo t é definido pelo fórmula A × t + B (−100 ≤ A ≤ 100 e 0 ≤ B ≤ 10^6). Os impostos são não-negativo, então um A × t + B ≥ 0, para 0 ≤ t ≤ 24 × 60. E no máximo uma conexão entre cada par de escritórios ACM, e há pelo menos um caminho entre o fonte de gabinete ACM e o escritório ACM de destino."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1769",
        "saida": "Se o CPF informado for válido, escreva \"CPF valido\". Caso contrário, escreva \"CPF invalido\".",
        "descricao": "Você foi contratado pelas Indústrias Udilandenses (INUDIL) para desenvolver uma maneira de verificar se o Cadastro de Pessoa Física (CPF) indicado por um cliente era válido ou não. Conversando com amigos, você chegou à conclusão de que um CPF seria válido se a soma de todos os seus dígitos resultasse em número múltiplo de 11. Após verificação minuciosa, você descobriu que essa maneira só funciona em cerca de 80% dos casos, e você precisa de mais do que isso para garantir a qualidade do seu trabalho. Após pesquisar mais, você descobriu que dos 11 dígitos do CPF, os dois últimos são verificadores e dependem dos 9 dígitos anteriores. Vamos introduzir alguma notação. Considere um CPF com os seguintes dígitos a1a2a3.a4a5a6.a7a8a9-b1b2 Para descobrirmos o dígito b1, procedemos da seguinte maneira: multiplicamos o primeiro por 1, o segundo por 2, o terceiro por 3, o quarto por 4 e vamos assim até multiplicarmos o nono por 9. Então, somamos tudo isto. Após termos somado tudo, dividimos por 11. O dígito b1 será o resto da divisão (ou 0, caso o resto seja 10). Para o segundo dígito verificador, temos o seguinte: multiplicamos o primeiro por 9, o segundo por 8, o terceiro por 7, o quarto por 6 e vamos assim até multiplicarmos o nono por 1. Então, somamos tudo isto e dividimos por 11. O dígito b2 será o resto da divisão (ou 0, caso o resto seja 10). Sabendo que isso vale para 100% dos CPFs, sua missão é implementar um programa que, dado um CPF, diga se ele é válido ou não.",
        "titulo": "CPF 1",
        "entrada": "A entrada contém um número desconhecido de CPFs, que não excede 10000 casos. Em cada linha, um CPF na forma d1d2d3.d4d5d6.d7d8d9-d10d11"
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2123",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima o número máximo de policiais que podem ter um cavalo para montar em uma atribuição. Após cada instância imprima uma linha em branco.",
        "descricao": "A Polícia Montada Real Canadense (Royal Canadian Mounted Police) é uma instituição muito famosa, cujas origens remontam ao século XIX. Sua tarefa é levar a lei aos locais mais longínquos do país continental. Hoje a polícia montada tem um efetivo de 25000 homens e cerca de 5000 cavalos. Cada sede da RCMP tem uma fazenda de cavalos em que os animais são muito bem cuidados, e designados aos policiais com quem têm mais afinidade. Esta afinidade é inferida em observações dos oficiais com vários anos de experiência, observando os policiais montando os animais disponíveis. No Fairmont Banff Springs Stables, onde ficam os cavalos montados pelos policiais da região de Banff Springs, é necessário resolver o problema de decidir quais soldados montarão quais cavalos. Note que um cavalo pode ser montado por vários policiais, mas um policial só monta um determinado cavalo. Cada cavalo tem um limite de policiais que podem montá-lo. Ou seja, de posse da afinidade dos vários policiais com os animais que montou nos últimos tempos, deseja-se encontrar uma atribuição dos cavalos aos vários policiais, de tal forma que o maior número possível de policiais tenham um cavalo para montar.",
        "titulo": "A Lei Vai a Cavalo!",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em três inteiros n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 100) e k (1 ≤ k ≤ 1000) indicando o número de cavalos, o número de soldados e o número de afinidades. A linha seguinte contêm n inteiros c1, c2, .., cn indicando que no i-ésimo cavalo pode montar ci (1 ≤ ci ≤ 100) soldados. Nas k linhas seguintes temos dois inteiros u (1 ≤ u ≤ n) e v (1 ≤ v ≤ m) indicando que existe afinidade entre o cavalo u e o soldado v. A entrada termina com final de arquivo."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1107",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número inteiro, indicando o número de vezes que o laser deve ser ligado para esculpir o bloco na forma indicada.",
        "descricao": "Desde a sua invenção, em 1958, os raios laser têm sido utilizados em uma imensa variedade de aplicações, como equipamentos eletrônicos, instrumentos cirúrgicos, armamentos, e muito mais. A figura acima mostra um diagrama esquemático de um equipamento para esculpir, com laser, um bloco de material maciço. Na figura vemos um emissor laser que se desloca horizontalmente para a direita e para a esquerda com velocidade constante. Quando o emissor é ligado durante o deslocamento, uma camada de espessura constante é removida do bloco, sendo vaporizada pelo laser. A figura abaixo ilustra o processo de escultura a laser, mostrando um exemplo de (a) um bloco, com 5 mm de altura por 8 mm de comprimento, no início do processo, (b) o formato que se deseja que o bloco esculpido tenha, e (c) a sequência de remoção das camadas do bloco durante o processo, considerando que a cada varredura uma camada de espessura de 1 mm é removida. Na primeira varredura, o pedaço numerado como 1 é removido; na segunda varredura, o pedaço numerado como 2 é removido, e assim por diante. Durante o processo de remoção, o laser foi ligado um total de 7 vezes, uma vez para cada pedaço de bloco removido. Escreva um programa que, dados a altura do bloco, o comprimento do bloco, e a forma final que o bloco deve ter, determine o número total vezes de que o laser deve ser ligado para esculpir o bloco.",
        "titulo": "Escultura à Laser",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha de um caso de teste contém dois números inteiros A e C, separados por um espaço em branco, indicando respectivamente a altura (1 ≤ A ≤ 104) e o comprimento (1 ≤ C ≤ 104) do bloco a ser esculpido, em milímetros. A segunda linha contém C números inteiros Xi, cada um indicando a altura final, em milímetros, do bloco entre as posições i e i + 1 ao longo do comprimento (0 ≤ Xi ≤ A, para 0 ≤ i ≤ C - 1). Considere que a cada varredura uma camada de espessura 1 milímetro é removida do bloco ao longo dos pontos onde o laser está ligado. O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1945",
        "saida": "A saída consiste de apenas 1 linha, contendo apenas um número inteiro, referente ao valor a última variável atribuída, seja por uma atribuição direta ou por uma soma.",
        "descricao": "Séculos após a invasão alienígena, quando a humanidade já está completamente reconstruída, foram encontrados um conjunto de programas escritos em uma linguagem obsoleta, chamada Java++. Por curiosidade histórica, você foi designado a tentar entender oque estes programas faziam. Sua tarefa é escrever um simulador para estes programas, e como teste inicial, o simulador deve ser capaz de calcular o resultado da última variável atribuída de cada programa.",
        "titulo": "Simulador",
        "entrada": "Cada entrada consiste de um programa. O programa só contem 2 tipos de instruções. Uma para atribuir uma variável e outra para executar uma soma. As instruções de declaração são no formato: A := B Onde A é um nome de variável válido e B é um inteiro positivo. As instruções de soma são no formato: A := B + C Onde A é um nome de variável válido e B ou C são ou um nome de variável válido ou um inteiro positivo. Os tokens deste programa são sempre separados por espaço e as instruções são separadas por uma quebra de linha. São nomes de variáveis válidos todas as combinações de até 8 letras minúsculas. Os programas tem, no máximo, 2000 instruções. Variáveis são atribuídas, no máximo, 1 vez."
    },
    {
        "nivel": "9",
        "assunto": "2",
        "numero": "1109",
        "saida": "Para cada questão descrita anteriormente, responda “Y” (sem aspas) se a resposta é “sim” ou “N” (sem aspas) se a resposta é “não”. Imprima uma linha em branco após cada caso de teste, inclusive após o último.",
        "descricao": "Pela primeira vez a Escola Livre de Matemática, Filosofia e Lingüística de Skyrim vai receber a Maratona de Expressões Regulares (regex) (RegExCon). A maratona acontece da seguinte forma: os participantes competem sempre contra 1 oponente. Um ganha um perde. No final, só o campeão restará. Em uma disputa os participantes recebem uma lista com várias expressões regulares e para cada uma os participantes devem calcular se várias palavras dadas são reconhecidas ou não por tal regex. Como membro da Escola Livre você está participando, e quer ganhar. Para garantir sua vitória, você deve escrever um programa para resolver o problema e deixá-lo rodando na sua Máquina Calculadora de Coisas Legais em casa. Como um mago, especialista em Alteração e Ilusão, você pode facilmente controlar sua máquina com a mente, então você consegue usar o programa durante a maratona. É proibido utilizar magia na maratona, mas coincidentemente a Escola de Winterhold vai sediar um Congresso de Magos, então você não precisa se preocupar, use sua magia. Uma expressão regular é utilizada para descrever uma linguagem (um conjunto de palavras). Considere que o alfabeto de todas linguagens neste problema é {a, b}. Uma regex R é válida se: 1) R é “a” ou “b”; 2) R é “(P.S)” onde P e S são expressões regulares; 3) R é “(P|S)” onde P e S são expressões regulares; 4) R é “(P*)” onde P é uma expressão regular. Expressões regulares podem ser aninhadas. Não há operação ternária com os operadores “.” e “|”, nem operação binária com o operator “*”. Palavras sempre comçam com “(“ e terminam com “)”. O conjunto L de palavras reconhecidas por R é formado seguindo estas regras: 1) Se R é “(a)”, L = {a}; 2) Se R é “(b)”, L = {b}; 3) Se R é “(P.S)”, L = todas palavras que podem ser obtidas a partir da concatenação das palavras p e s, onde p é reconhecida por P e s por S; 4) Se R é “(P|S)”, L = união dos conjuntos de palavras reconhecidas por P e S; 5) Se R é “(P*)”, R reconhece a concatenação de 0 ou mais palavras reconhecidas por P.",
        "titulo": "Burlando a Maratona",
        "entrada": "A entrada é formada por vários casos de teste. A primira linha de um caso de teste contém uma regex (0 < tamanho da regex < 150). A próxima linha contém um inteiro P (1 ≤ P ≤ 100). Cada uma das próximas P linhas contém uma palavra (tamanho < 50) formada por 'a's e 'b's que representa a seguinte questão: “Esta palavra é reconhecida pela regex dada?”."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2201",
        "saida": "For each test case, display its case number followed by the pyramids to be built. The pyramids should be ordered with the largest first. Pyramids are specified by the length of their base followed by an L for low pyramids or an H for high pyramids. If two differenct pyramids have the same number of cubes, list the high pyramid first. Print “impossible” if it is not possible to meet the requirements of the pharaoh.",
        "descricao": "It is not too hard to build a pyramid if you have a lot of identical cubes. On a flat foundation you lay, say, 10 × 10 cubes in a square. Centered on top of that square you lay a 9 × 9 square of cubes. Continuing this way you end up with a single cube, which is the top of the pyramid. The height of such a pyramid equals the length of its base, which in this case is 10. We call this a high pyramid. If you think that a high pyramid is too steep, you can proceed as follows. On the 10 × 10 base square, lay an 8 × 8 square, then a 6 × 6 square, and so on, ending with a 2 × 2 top square (if you start with a base of odd length, you end up with a single cube on top, of course). The height of this pyramid is about half the length of its base. We call this a low pyramid. Once upon a time (quite a long time ago, actually) there was a pharaoh who inherited a large number of stone cubes from his father. He ordered his architect to use all of these cubes to build a pyramid, not leaving a single one unused. The architect kindly explained that not every number of cubes can form a pyramid. With 10 cubes you can build a low pyramid with base 3. With 5 cubes you can build a high pyramid of base 2. But no pyramid can be built using exactly 7 cubes. The pharaoh was not amused, but after some thinking he came up with new restrictions. All cubes must be used. You may build more than one pyramid, but you must build as few pyramids as possible. All pyramids must be different. Each pyramid must have a height of at least 2. Satisfying the above, the largest of the pyramids must be as large as possible (i.e., containing the most cubes). Satisfying the above, the next-to-largest pyramid must be as large as possible. And so on... Drawing figures and pictures in the sand, it took the architect quite some time to come up with the best solution. Write a program that determines how to meet the restrictions of the pharaoh, given the number of cubes.",
        "titulo": "Pyramids",
        "entrada": "The input consists of several test cases, each one on a single line. A test case is an integer c, where 1 ≤ c ≤ 106 , giving the number of cubes available. The last test case is followed by a line containing a single zero."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1285",
        "saida": "Para cada caso de teste imprima um valor inteiro que representa a quantidade máxima possível de números de casa entre N e M inclusive, sem dígitos repetidos.",
        "descricao": "Os habitantes de Nlogônia são muito supersticiosos. Uma de suas crenças é que os números das casas de rua que têm um dígito repetido traz sorte ruim para os moradores. Portanto, eles nunca iriam viver em uma casa que tem o número 838 ou 1004, por exemplo. A rainha de Nlogônia ordenou a construção de uma nova avenida à beira-mar e quer atribuir para as novas casas apenas números sem dígitos repetidos, para evitar desconforto entre os seus súditos. Você foi nomeado por Sua Majestade para escrever um programa que, dado dois inteiros N e M, determine a quantidade máxima possível de casas que podem assumir um número entre N e M inclusive, sem que ocorram dígitos repetidos nestes números.",
        "titulo": "Dígitos Diferentes",
        "entrada": "Cada teste é descrito usando uma linha. A linha contém dois inteiros N e M, conforme descrito acima (1 ≤ N ≤ M ≤ 5000)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1986",
        "saida": "Somente a mensagem traduzida",
        "descricao": "No filme \"Perdido em Marte\", o astronauta Mark Watney está presumidamente morto depois de ter sido apanhado numa tempestade, onde é deixado para trás enquanto o resto da equipe planejam evacuar o planeta e regressar à Terra. Watney encontra-se assim sozinho e abandonado, com algumas provisões e a sua sagacidade, destreza e espírito para sobreviver e encontrar uma maneira de enviar um sinal para casa, sabendo que mesmo que saibam que ele está vivo, é muito vaga a hipótese de um salvamento. Watner, ainda vivo, necessitava entrar em contato com a NASA para informar que ainda estava vido, porém no lugar onde estava não tinha um meio de comunicação com a Terra, foi então que ele lembrou da missão da Pathfinder. que a nave aterrou no Planeta Vermelho a 4 de Julho de 1997 e libertou um pequeno rover com seis rodas, chamado Sojourner, para estudar o terreno vizinho. A missão tinha a duração de umas poucas semanas mas acabou por durar quase três meses. A nave comunicou pela última vez com as equipas na Terra a 27 de Setembro. Ele analisando no mapa percebeu que o Pathfinder ficou próximo de sua \"estação\", então o mesmo pensou em usá-lo como comunicação. Porém a única comunicação que existia era uma câmera que rotacionava 360 graus em seu próprio eixo, para registrar fotos em Marte e mandar para a NASA, como a distância da Terra para Marte são de 55,76 milhões de km (Não é exato, pois depende da posição da rotação com a terra, como referência o SOL), uma mensagem que é enviado da terra para Marte dura um tempo de 30 minutos (tecnologia da época), hoje é menor, e acredite, a mensagem andava na velocidade da luz, quando se criar a Dobra(Star Trek) isso será tranquilo. Watner Teve uma ideia, como a Câmera gira 360 Graus, ele estabeleceu em cada ponto, equidistante, no círculo, um valor Hexadecimal, na qual a Câmera iria apontar o código desejado, numa fração de segundos, E Watner iria anotar e verificar a lestra correspondente na sua tabela ASCII, conforme a figura abaixo. Você foi selecionado para trabalhar na NASA e terá que ajudar Watner a sobreviver, faça um programa que converta em hexadecimal para caracter para traduzir a msensagem, as letras só serão de \"a-z\" 26 caracteres. Exemplo: n=3, depois teremos três duplas de hexadecimais \"6F 6C 61\", e se verificar na tabela as letras correspondentes a 6F =o, 6C=l e 61=a, transformando em \"ola\".",
        "titulo": "Perdido em Marte",
        "entrada": "Ele terá um número n (1<=n<=100) indicando o tamanho da palavra, e \"n\" vezes de duas casas hexadecimais, na qual significa uma letra. Veja o exemplo abaixo:"
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1758",
        "saida": "Para cada aluno imprima uma única linha contendo a média obtida pelo aluno após o arredondamento do professor. A média deve ter exatamente dois dígitos após o ponto decimal.",
        "descricao": "A instituição em que o professor Charles ensina possui o seguinte critério para decidir a aprovação de um aluno: média ≥ 7.0 = APROVADO 4.0 ≤ média < 7.0 = PROVA FINAL média < 4.0 = REPROVADO O professor Charles resolveu dar uma bonificação aos seus alunos com base no seu desempenho e estabeleceu os seguintes critérios: 1 - Arredondamentos que prejudiquem o aluno serão desconsiderados, permanecendo a nota original. 2 - Nenhum arredondamento deve modificar a situação do aluno (APROVADO, FINAL, REPROVADO). 3 - Se o aluno foi aprovado ou se tem nota suficiente para realizar a prova final, a média desse aluno será substituida pela maior nota obtida nas provas. 4 - Os alunos reprovados foram preguiçosos e não devem receber nenhuma pontuação extra. A aplicação da regra 3 deve ocorrer sempre que possível, desde que não viole as regras 1 ou 2. Escreva um programa que recebe as notas que os alunos obtiveram em cada prova e calcule a sua média conforme os critérios do professor.",
        "titulo": "Pontos Extras",
        "entrada": "A primeira linha da entrada contém o inteiro T ( 1 ≤ T ≤ 5000) que indica a quantidade de casos de teste. A primeira linha de um caso de teste contém os inteiros P (2 ≤ P ≤ 5) e N (2 ≤ N ≤ 50), indicando a quantidade de provas que o professor realizou e a quantidade de alunos matriculados na turma, respectivamente. As N linhas seguintes conterão P números de ponto flutuante com um dígito após o ponto decimal, indicando as notas (0.0 ≤ nota ≤ 10.0) obtidas pelo i-ésimo aluno em cada uma das provas aplicadas pelo professor."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1331",
        "saida": "Para cada caso de teste, imprima o número do caso de teste e a maior pontuação possível.",
        "descricao": "Alguns de vocês já podem ter jogado um jogo chamado \"blocos\". Há n blocos em uma linha, cada caixa tem uma cor. Aqui está um exemplo: Ouro, Prata, Prata, Prata, Bronze, Prata, Bronze, Ouro, Bronze. Veja a imagem correspondente abaixo: Se algumas caixas adjacentes são da mesma cor, e tanto a caixa para sua esquerda (se existir) e para sua direita (se existir), são de alguma outra cor, nós a chamamos de \"segmento de caixa\". Há quatro segmentos de caixa. Ou seja: ouro, prata, bronze, ouro. Existem 1, 4, 3, 1 caixa(s), no segmento, respectivamente. Todo o tempo, você pode clicar em uma caixa, então todo o segmento que contém essa caixa DESAPARECE. Se esse segmento é composto de k caixas, você vai ganhar k * k pontos. Por exemplo, se você clicar em uma caixa prata, o segmento prata desaparece e você ganha 4 * 4 = 16 pontos. Agora vejamos a figura abaixo: A primeira opção é a ideal. Encontre a maior pontuação que você pode obter, dado um estado inicial do jogo.",
        "titulo": "Blocos",
        "entrada": "A primeira linha contém o número de casos de teste t (1 ≤ t ≤ 15). Cada caso contém duas linhas. A primeira linha contém um inteiro n (1 ≤ n ≤ 200), o número de caixas. A segunda linha contém n inteiros, representando as cores de cada caixa. Os inteiros estão no intervalo 1~n."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2171",
        "saida": "Para cada linha de entrada, você deverá imprimir quanta comida ficou com Fink e Pica-Pau ao final da divisão, separadas por um espaço.",
        "descricao": "A raposa Fink, muito esperta, precisa dividir meio a meio algumas comidas entre ele e Pica-Pau, mas ele está com muita fome e pensou em algo muito sagaz para sair ganhando nessa, a divisão vai ser da seguinte forma: Primeiro ele coloca tudo sobre a mesa e começa a dividir: Um pra você. Um pra mim. Dois pra você. Um, dois pra mim. Três pra você. Um, dois, três pra mim... Dessa forma, se a quantidade inicial de comida fosse 12, ele terminaria com 10 e Pica-Pau com 2. Obs: Caso Fink não consiga terminar a última divisão, ele pode roubar do Pica-Pau.",
        "titulo": "Dividindo com Fink",
        "entrada": "A entrada consistirá de uma série de linhas, cada uma contendo o número de comidas N (1 ≤ N ≤ 100000). O fim da entrada é indicado pelo número zero (0)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1895",
        "saida": "Imprima uma linha com dois inteiros A e B separados por um espaço, onde A é a pontuação final de Alice, e B é a pontuação final de Bob.",
        "descricao": "Alice e Bob decidiram jogar um jogo simples para passar o tempo. Este jogo é jogado com um baralho contendo N cartas, numeradas de 1 a N. Uma carta está inicialmente na mesa. Além disso, há uma pilha contendo todas as outras cartas do baralho. Alice começa retirando uma carta do topo da pilha. Ela então verifica se a diferença absoluta entre a carta que está atualmente na mesa e a carta retirada da pilha é no máximo um limite L. Em outras palavras, se a carta atualmente na mesa for T e a carta retirada da pilha for S, então ela verifica se |T-S| ≤ L. Se isto for verdade, ela substitui a carta na mesa pela carta removida, e marca |T-S| pontos. Se isto não for verdade, ela não faz nada -- a carta na mesa não é alterada, e ela não marca nenhum ponto. Bob então joga fazendo a mesma coisa. Ele remove uma carta da pilha, a compara com a carta atualmente na mesa e age de acordo. Alice então joga novamente, seguida de Bob, seguido novamente de Alice, e assim por diante. Eles continuam jogando até que a pilha de cartas esteja vazia. Sua tarefa é determinar a pontuação final de ambos os jogadores.",
        "titulo": "Jogo do Limite",
        "entrada": "A primeira linha contém três inteiros N, T0 e L (1 ≤ N < 60, N é impar, 1 ≤ T0 ≤ N, 1 ≤ L ≤ 10), o número de cartas, a carta inicialmente na mesa, e o limite L. As próximas N-1 linhas contém um inteiro Si cada (1 ≤ Si ≤ N). Estes inteiros descrevem as cartas na pilha, em ordem. A primeira carta dada na entrada é a carta no topo da pilha. Todas as cartas usadas no jogo são distintas."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1936",
        "saida": "Seu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.",
        "descricao": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24. Dado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo. Por exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3! + 2! + 2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!.",
        "titulo": "Fatorial",
        "entrada": "A entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105)."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1939",
        "saida": "Para cada desafio, imprima uma linha contendo X, onde X é a solução do Ominobox.",
        "descricao": "O planeta de Skyrk nunca vai conhecer a paz enquanto o malvado Mago estiver livre. Dessa vez, o malicioso plano do Mago foi armar uma bomba no meio da maior cidade do planeta. Mago aprecia observar o caos, então, ao invés de explodir a bomba imediatamente, ele colocou um temporizador na bomba e a deixou junto com um desafio. A bomba tem um teclado, e a solução do desafio desarma a bomba. O desafio se chama Omnibox; ele consiste de uma caixa retangular com alguns cubos unitários dentro e de uma coleção de todos os possíveis N-ominos. Skyrk deve soltar todo omino em algum lugar da caixa para ganhar pontos. A pontuação máxima é a solução do Ominobox. Um N-omino é uma coleção de N quadrados unitários arranjados com lados coincidentes. Um 1-omino é um quadrado unitário, e um N-omino é um (N − 1)-omino com pelo menos um dos seus lados ligados a um quadrado unitário. Os seis possíveis 3-ominos. Some of the 19 possible 4-omnis. A caixa tem uma superfície retangular e paredes verticais; cada um dos quadrados de um sistema Cartesiano de coordenadas em grade colocado na superfície da caixa possui uma pilha não negativa de cubos unitários. Os cubos não podem ser movidos. Skyrk irá alinhar cada omino com os quadrados da grade, e soltá-lo na caixa. O omino irá cair até tocar um cubo ou o fundo. Não é permitido que Skyrk reflita ou rotacione o omino, e ele deve situar-se completamente dentro dos limites da caixa. O número de pontos obtidos após soltá-lo é a distância entre o omino e o topo da caixa. Após soltá-lo, Skyrk anota o número de pontos, remove o omino, e solta o próximo. A pontuação final é a soma de todos os pontos. O tempo está passando e a contagem regressiva na bomba diz 5:00 (cinco horas!). Você consegue descobrir a pontuação máxima que Skyrk pode obter para desarmar a bomba e salvar o destino do planeta das mãos do vil Mago?",
        "titulo": "Ominobox",
        "entrada": "A primeira linha contém T (T ≤ 200) — o número de desafios, após essa linha haverá T desafios. Cada desafio começa com uma linha com quatro inteiros R, C, H e N (1 ≤ R, C, H ≤ 30; 1 ≤ N ≤ 10) — as dimensões da superfície da caixa são R × C, a altura é H, e a ordem dos ominos é N. Cada uma das próximas R linhas contém C inteiros Hij (0 ≤ Hij ≤ H) — o número de cubos no quadrado (i, j) da grade."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1437",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma única linha da saída, indicando a direção para a qual o recruta deve ter sua face voltada após executar a série de comandos, considerando que no início o recruta tem a face voltada para o norte. A linha deve conter uma letra entre 'N', 'L', 'S' e 'O', representando respectivamente as direções norte, leste, sul e oeste. A saída deve ser escrita na saída padrão.",
        "descricao": "Este ano o sargento está tendo mais trabalho do que de costume para treinar os recrutas. Um deles é muito atrapalhado, e de vez em quando faz tudo errado – por exemplo, ao invés de virar à direita quando comandado, vira à esquerda, causando grande confusão no batalhão. O sargento tem fama de durão e não vai deixar o recruta em paz enquanto este não aprender a executar corretamente os comandos. No sábado à tarde, enquanto todos os outros recrutas estão de folga, ele obrigou o recruta a fazer um treinamento extra. Com o recruta marchando parado no mesmo lugar, o sargento emitiu uma série de comandos \"Esquerda, Volver!\" e \"Direita, Volver!\". A cada comando, o recruta deve girar sobre o mesmo ponto e dar um quarto de volta na direção correspondente ao comando. Por exemplo, se o recruta está inicialmente com o rosto voltado para a direção norte, após um comando de \"esquerda volver!\" ele deve ficar com o rosto voltado para a direção oeste. Se o recruta está inicialmente com o rosto voltado para o leste, após um comando \"Direita, volver!\" ele deve ter o rosto voltado para o sul. No entanto, durante o treinamento, em que o recruta tinha inicialmente o rosto voltado para o norte, o sargento emitiu uma série tão extensa de comandos, e tão rapidamente, que até ele ficou confuso, e não sabe mais para qual direção o recruta deve ter seu rosto voltado após executar todos os comandos. Você pode ajudar o sargento?",
        "titulo": "Esquerda, Volver!",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N que indica o número de comandos emitidos pelo sargento (1 ≤ N ≤ 1000)). A segunda linha contém N caracteres, descrevendo a série de comandos emitidos pelo sargento. Cada comando é representado por uma letra: 'E' (para \"Esquerda, volver!\") e 'D' (para \"direita, volver!\"). O final da entrada é indicado por N = 0. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1953",
        "saida": "Seu programa deve imprimir 3 linhas contendo o numero de alunos que são de EPR, EHD, e INTRUSOS no formato: “sigla: quantidade”. ( Ver exemplo de saída ).",
        "descricao": "Roberto precisava coletar o numero de matricula dos alunos da sua turma de engenharia de produção e engenharia hídrica para a chamada. Logo, ele teve a excelente ideia de falar para todos os seus alunos gritarem os números de chamada para seus assistentes anotarem. Obviamente, isso não deu certo, e logo a sala entrou em colapso. Todos queriam falar ao mesmo tempo, e com a competição para ver quem conseguia ir embora mais rápido, houve um principio de tumulto, com cadeiras sendo jogadas nos colegas, puxões de cabelo, e socos na cara. Júnior como é um cara pacífico, está tentando atender todos rapidamente. Porem, como são muitas requisições, está ficando sobrecarregado. Ele então, lembrou que você sabe programar e decidiu dar uma ideia. Todos os alunos da sala deverão dar os nomes de matricula e a sigla do curso em uma folha, e a chamada sera computada posteriormente. Ele precisa saber quantos alunos de cada curso compareceram. Ele tem os dados, mas infelizmente, não tem a proeficiencia necessária em programação para “codar” isso. Você poderia ajuda-lo a saber, dada uma lista de alunos, quantos são de EPR, quantos são de EHD e quantos são intrusos?",
        "titulo": "Roberto e a Sala Desenfreada",
        "entrada": "A primeira linha da entrada um inteiro n ( 1<=n<=100000 ) que indicam o numero de alunos na sala. As n linhas seguintes contem o numero de matricula e a sigla do curso. A leitura do programa deve acabar com fim de arquivo."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1508",
        "saida": "Para cada caso de teste imprima uma linha com o número de diferentes subconjuntos não vazios de pontos que podem ser mortos.",
        "descricao": "Certa vez haviam N pontos em um plano com coordenadas inteiras distintas. Eles costumavam viver em perfeita paz, até que, um dispositivo a laser selvagem e sobrenatural apareceu. Esta enorme máquina emite um poderoso raio laser que irá matar todos os pontos em seu alcance. Mais especificamente, o alcance do raio é um retângulo com altura infinita mas de largura limitada, que pode assumir qualquer valor positivo inferior ou igual a W. Felizmente, o feixe pode ser disparado apenas verticalmente ou horizontalmente (isto é, paralelo ao eixo Ox ou Oy). Qualquer ponto localizado dentro da área do feixe (incluindo suas bordas) é imediatamente queimado. Os pobres pontos estão preocupados com quais deles serão mortos. Calcule o número de diferentes subconjuntos não vazios de pontos que o laser pode queimar ao disparar um único feixe. Dois subconjuntos são consideradas diferentes se houver um ponto pertencente a um deles, mas não a outro.",
        "titulo": "Raio Laser",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é descrito utilizando várias linhas. A primeira linha contém dois inteiros N e W (1 <= N <= 103, 1 <= W <= 109) que representam respectivamente o número de pontos e a langura máxima do raio laser. Cada uma das próximas N linhas descreve as coordenadas xi, yi do n-ésimo ponto (0 <= xi, yi <= 109). O último caso de teste é seguido por uma linha contendo dois zeros."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1578",
        "saida": "Imprima o “quadrado” de cada matriz da entrada, conforme o que Atrapalhilton entende pelo “quadrado” de uma matriz. Antes de imprimir cada “quadrado”, imprima a linha “Quadrado da matriz #x:” (sem as aspas), para ajudar Atrapalhilton a não se perder na hora de passar a limpo os resultados para o caderno. Comece a contagem em x = 4, afinal, Atrapalhilton já calculou os “quadrados” das 3 primeiras matrizes. Adicione tantos espaços em branco à esquerda de cada valor quanto necessários para que os valores de uma mesma coluna fiquem todos alinhados à direita, de modo que haja ao menos um valor em cada coluna não precedido por espaços em branco além do espaço em branco obrigatório que separa colunas consecutivas. Imprima também uma linha em branco entre “quadrados” de matrizes consecutivas.",
        "descricao": "Atrapalhilton é um estudante muito dedicado, embora muito, muito atrapalhado. Na semana passada, seu professor de Matemática, o Sr. Sabetudilton, recomendou à classe uma lista de exercícios sobre matrizes. Atrapalhilton, aplicado como é, dediciu fazer os exercícios no mesmo dia, tão logo chegou em casa, embora apenas após assistir o episódio vespertino de A Galinha Listradinha, seu programa de TV favorito. O enunciado de um dos exercícios dizia: Calcule o quadrado de cada uma das matrizes abaixo… No entanto, Atrapalhilton fez uma baita duma confusão. Para ele, o quadrado de uma matriz quadrada A é a matriz dos quadrados dos valores da matriz A. Por exemplo, o quadrado da matriz 1 3 5 7 para ele não é 16 24 40 64 mas 1 9 25 49 Atrapalhilton conseguiu calcular o “quadrado” da primeira matriz, da segunda, da terceira e percebeu que já estava muito tarde, que não ia conseguir terminar de calcular os “quadrados” de todas as N matrizes da lista. Então, decidiu escrever um programa que fizesse o serviço para ele.",
        "titulo": "Matriz de Quadrados",
        "entrada": "A primeira linha da entrada é constituída por um único inteiro positivo N (N ≤ 100), o qual designa o número de matrizes cujos “quadrados” ainda não foram calculados. Em seguida ocorre a descrição de cada uma das N matrizes. A primeira linha da descrição de uma matriz consiste de um único inteiro M (1 ≤ M ≤ 20), o qual representa o número de linhas e o número de colunas da matriz. Seguem, então, M linhas, cada uma com M inteiros aij (0 ≤ aij ≤ 232-1, 1 ≤ i,j ≤ M), os quais correspondem às células da matriz, de modo que valores consecutivos numa mesma linha são separados por um espaço em branco."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1089",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo apenas um inteiro, o número de picos existentes no loop musical de Fernandinha.",
        "descricao": "Um loop musical é um trecho de música que foi composto para repetir continuamente (ou seja, o trecho inicia novamente toda vez que chega ao final), sem que se note descontinuidade. Loops são muito usados na sonorização de jogos, especialmente jogos casuais pela internet. Loops podem ser digitalizados por exemplo utilizando PCM. PCM, do inglês Pulse Code Modulation, é uma técnica para representação de sinais analógicos, muito utilizada em áudio digital. Nessa técnica, a magnitude do sinal é amostrada a intervalos regulares de tempo, e os valores amostrados são armazenados em sequência. Para reproduzir a forma de onda amostrada, o processo é invertido (demodulação). Fernandinha trabalha para uma empresa que desenvolve jogos e compôs um bonito loopmusical, codificando-o em PCM. Analisando a forma de onda do seu loop em um software de edição de áudio, Fernandinha ficou curiosa ao notar a quantidade de “picos” existentes. Um pico em uma forma de onda é um valor de uma amostra que representa um máximo ou mínimo local, ou seja, um ponto de inflexão da forma de onda. A figura abaixo ilustra (a) um exemplo de forma de onda e (b) o loop formado com essa forma de onda, contendo 48 picos. Fernandinha é uma amiga muito querida e pediu sua ajuda para determinar quantos picos existem no seu loop musical.",
        "titulo": "Loop Musical",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N, representando o número de amostras no loop musical de Fernandinha (2 ≤ N ≤ 104). A segunda linha contém N inteiros Hi, separados por espaços, representando a sequência de magnitudes das amostras(-104 ≤ Hi ≤ 104 para 1 ≤ i ≤ N, H1 ≠ HN e Hi ≠ Hi+1 para 1 ≤ i < N). Note que H1 segue HN quando o loop é reproduzido. O final da entrada é indicado por uma linha que contém apenas o número zero."
    },
    {
        "nivel": "9",
        "assunto": "2",
        "numero": "1130",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha contendo um único caractere: ‘S’ caso Maria possua uma estratégia vencedora e ‘N’ caso contrário.",
        "descricao": "O jogo da velha é um dos jogos mais antigos da humanidade; os primeiros registros dele são do século I antes de Cristo, no Império Romano. João e Maria jogam bastante jogo da velha, mas depois de algum tempo eles decidiram jogar uma variante do jogo da velha tradicional, o jogo da velha 1-D. O jogo da velha 1-D é um jogo disputado por dois jogadores em um tabuleiro 1 × N; inicialmente, todas as casas do tabuleiro estão vazias. Os jogadores alternam-se desenhando uma cruz sobre uma casa vazia. O primeiro jogador a completar uma sequência de três ou mais cruzes em casas consecutivas ganha o jogo. Maria logo percebeu que, dependendo da situação do jogo, sendo sua vez de jogar, ela pode sempre garantir a vitória, independente das jogadas de João. Isto é relativamente fácil para tabuleiros menores, mas para tabuleiros maiores, mesmo após várias jogadas, esta tarefa é mais difícil; por isso, ela pediu que você escrevesse um programa que, dada a situação do tabuleiro, decide se ela tem uma estratégia vencedora.",
        "titulo": "Jogo da Velha",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de caso de teste contém um inteiro N, indicando o tamanho do tabuleiro (3 ≤ N ≤ 104). A linha seguinte contém uma sequência de N caracteres indicando quais casas do tabuleiro já foram ocupadas: um ‘.’ indica que a casa correspondente está vazia, enquanto um ‘X’ indica que a casa já teve uma cruz desenhada sobre ela. A entrada nunca contém três ‘X’ consecutivos. O ultimo caso de teste é seguido por uma linha que contém um único número zero."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1383",
        "saida": "Para cada instância seu programa deverá imprimir uma linha dizendo \"Instancia k\", onde k é o número da instância atual. Na segunda linha, seu programa deverá imprimir \"SIM\" se a matriz for a solução de um problema de Sudoku, e \"NAO\" caso contrário. Imprima uma linha em branco após cada instância.",
        "descricao": "O jogo de Sudoku espalhou-se rapidamente por todo o mundo, tornando-se hoje o passatempo mais popular em todo o planeta. Muitas pessoas, entretanto, preenchem a matriz de forma incorreta, desrespeitando as restrições do jogo. Sua tarefa neste problema é escrever um programa que verifica se uma matriz preenchida é ou não uma solução para o problema. A matriz do jogo é uma matriz de inteiros 9 x 9 . Para ser uma solução do problema, cada linha e coluna deve conter todos os números de 1 a 9. Além disso, se dividirmos a matriz em 9 regiões 3 x 3, cada uma destas regiões também deve conter os números de 1 a 9. O exemplo abaixo mostra uma matriz que é uma solução do problema.",
        "titulo": "Sudoku",
        "entrada": "São dadas várias instâncias. O primeiro dado é o número n > 0 de matrizes na entrada. Nas linhas seguintes são dadas as n matrizes. Cada matriz é dada em 9 linhas, em que cada linha contém 9 números inteiros."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "2009",
        "saida": "A saída deve conter uma linha com Q números inteiros, de tal modo que o número inteiro de i-th representa o número de diferentes listas apenas um pouco ordenadas classificadas de n inteiros positivos não superiores a Ki (para i = 1, 2,..., Q). Uma vez que este número pode ser muito grande, o restante de saída dividindo-o por 109 + 7.",
        "descricao": "Jurgen Guntherswarchzhaffenstrassen é conhecido por sua forma virtuosa de tocar guitarra e os métodos crueis de ensino que emprega com seus alunos. O que a maioria das pessoas ignora sobre ele é que ele também é um fã de números. Ultimamente Jurgen vem estudando listas ordenadas, mas ele está ficando entediado. Ele acha que estas listas são muito previsível e não muito abundantes, então ele decidiu apimentar as coisas um pouco. Jurgen diz que uma lista l de N não necessariamente de diferentes inteiros positivos é apenas um pouco sortido se, e somente se, para cada inteiro positivo x > 1 que ocorrido em l, o número x - 1 aparece pelo menos uma vez antes da última ocorrência de x em l. Por exemplo: • [2, 3, 1, 2] é um pouco sortida porque um 1 aparece antes do último 2 e um 2 aparece antes do último 3; • [2, 3, 4, 3, 2, 1, 3, 4] não é apenas um pouco ordenada porque cada 1 aparece depois do último 2; • [1, 1, 3, 1, 3, 3, 1, 3] não é apenas um pouco classificadas porque nenhum 2 aparece antes do último 3 (e o 2 não aparece em nenhum momento nesta lista). Jurgen está tentando descobrir quantas listas um poucos ordenadas, diferentes de N inteiros positivos e não superiores a K, existem. Duas listas são diferentes se, e apenas se, houver pelo menos uma posição em que as listas têm elementos distintos. Você pode ajudar Jurgen na contagem do número de listas diferentes?",
        "titulo": "Apenas um Pouco Classificadas",
        "entrada": "A primeira linha contém dois inteiros N e Q, representando respectivamente o número de elementos nas listas apenas um pouco ordenadas e o número de consultas para responder (1 ≤ N ≤ 5000 e 1 ≤ Q ≤ 1000). A segunda linha contém Q inteiros K1, K2,. . . , KQ, indicando que as listas que você deve contar na consulta i-th não pode conter valores maiores do que Ki i (1 ≤ Ki ≤ 109 for i = 1, 2, . . . , Q)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1593",
        "saida": "Imprima o número de 1’s na representação binária para cada caso em uma única linha.",
        "descricao": "Definimos a paridade de um inteiro como a soma dos seus bits em sua representação binária computada módulo dois. Como exemplo, o número 2110 = 101012 possui três 1’s na sua representação binária e portanto ele teria paridade ímpar. Neste problema, você deverá calcular o número de bits 1 em um inteiro I dado, ou seja, calcular a quantidade de 1’s na representação binária dele.",
        "titulo": "Função Binária",
        "entrada": "Na primeira linha terá um inteiro T (T = 100) indicando o número de casos de teste. Para cada caso, haverá apenas uma linha com o número I (1 ≤ I < 1018* ou 1 ≤ I < 101000**).O número da entrada não começará com um ou mais zeros. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1845",
        "saida": "Imfrima o tefto da entrada confertido fara a Língua do Dinofauro.",
        "descricao": "E aí, goftou da nofa tarde funtof? Fem melhor que ir ao foológico, não é mefmo? A 4ạ Maratona de Frogramação da UF eftá infelifmente acafando, maf eferamof que efte fim fignifique fara focê, quem fafe, um nofo começo: um começo de uma carreira de muito fucefo! E a fórmula do fucefo não é muito difícil: faça aquilo que focê realmente gofta de fafer, algo com que focê fe difirta e fe mantenha motifado. Afinal, o que é fucefo fenão fentir-fe realifado e felif configo mefmo? Fara encerrar a comfetição, efcrefa maif um frograminha, uma faideira. Efcrefa um frograma que conferte teftof fara a Língua do Dinofauro. Na Língua do Dinofauro, frimeiramente trocamof algumaf confoantef fela letra F (minúfcula ou maiúfcula quando for o cafo) e defoif eliminamof qualquer ocorrência de refetiçõef confecutifaf da letra F. Não famof difer quaif fão efaf confoantef. Focê defe adifinhá-laf (ou dedufi-laf).",
        "titulo": "Efílogo",
        "entrada": "A entrada é comfofta for fáriaf linhaf de tefto. Não famof refelar o número fofitifo de linhaf nem tamfouco o limite de caracteref for linha de tefto."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1542",
        "saida": "Para cada caso de teste deverá ser impresso a quantidade de páginas do livro. (Utilize o plural corretamente e não use acentos). Este número deverá ser um inteiro, o qual representa a quantidade de página. Este valor deverá ser truncado caso necessário.",
        "descricao": "Você começou a competir com seu amigo para ver quem consegue ler mais livros em menos tempo. Seu amigo lia muito mais que você, até o dia que você percebeu que ele lia somente livros muito finos. Então você resolveu contar as páginas dos livros, aumentando também a quantidade de páginas lidas por dia. Agora você lê 5 páginas por dia e termina 16 dias antes do que se estivesse lendo 3 páginas por dia. Neste cenário, quantas páginas tem o livro?",
        "titulo": "Lendo Livros",
        "entrada": "A entrada é composta de vários casos de testes. Cada caso de teste é composto de três números Q (0 < Q < 20), D (0 < D < 20) e P (0 < P < 20) separados por um espaço. Sendo que Q é a quantidade de páginas lidas por dia. D é o número de dias que você adiantaria a leitura caso estivesse lendo a quantidade de páginas informada pelo número P. Um único valor zero indica o fim da entrada."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1710",
        "saida": "Seu programa deve produzir uma única linha contendo apenas um número inteiro, o número de planetas na região que contém o maior número de planetas.",
        "descricao": "A Confederação Galática resolveu fazer uma reforma administrativa, para melhor distribuir os recursos de sua frota. Para isso, ela dividiu todo o espaço em regiões. Para definir as regiões, inicialmente um conjunto de planos infinitos foi especificado, e as regiões foram definidas pelos cortes desses planos. Note que algumas regiões são ilimitadas, mas que também podem existir regiões limitadas. O conjunto de planos foi escolhido de tal maneira que nenhum dos planos intercepta a órbita de um planeta, e portanto cada planeta transita por apenas uma região durante sua órbita (ou seja, um planeta dentro de uma região nunca cruzará um plano para outra região). Sua tarefa consiste em determinar, dadas as equações dos planos e as posições dos planetas, quantos planetas existem na região com o maior número de planetas (em outras palavras, qual o número máximo de planetas dentro de uma região).",
        "titulo": "Confederação",
        "entrada": "A primeira linha da entrada contém dois inteiros M (1 ≤ M ≤ 500) e N (1 ≤ N ≤ 10000), indicando respectivamente o número de planos e número de planetas. As M linhas seguintes contêm cada uma quatro inteiros A, B, C e D (−10000 ≤ A, B, C, D ≤ 10000), os coeficientes e o termo livre da equação Ax + By + Cz = D que define cada um dos planos. A seguir, cada uma das N linhas seguintes contém três inteiros X, Y e Z (−10000 ≤ X, Y, Z ≤ 10000), indicando a posição (X, Y, Z) de um planeta."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1217",
        "saida": "Para cada caso de teste, imprima quantos kg de frutas dona Parcinova comprou em cada dia, com mensagem correspondente em inglês, conforme exemplo abaixo. No final, apresente o consumo médio em kg por dia com 2 casas decimais seguido da mensagem correspondente e a média de gasto por dia com as frutas, também em inglês e com mensagem correspondente, conforme o exemplo abaixo. Obs.: Todas as letras da saída devem ser impressas em minúsculas, com exceção do \"R\" de \"R$\"",
        "descricao": "Dona Parcinova, mãe de Mangojata, pediu a ela que ajudasse a calcular o consumo de frutas da casa e a quantidade gasta por dia nestas frutas. Mangojata agora deve então fazer um programa a partir de uma tabela que sua mãe estava utilizando para anotações há quase um ano. Nesta tabela, dona Parcinova anotou a quantidade de dias e depois o valor gasto cada dia e as frutas compradas naquele dia, sempre na quantidade de um KG por tipo de fruta.",
        "titulo": "Getline Two - Frutas",
        "entrada": "A primeira linha de entrada contém um inteiro N (1 ≤ N ≤ 365) que indica o número de casos de teste que vem a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um valor de ponto flutuante V (0.10 ≤ V ≤ 20.00) indicando o valor gasto no dia e a segunda linha contém o nome de cada uma das frutas que dona Parcinova comprou."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2051",
        "saida": "Para cada caso, você deverá apresentar a mensagem “Mapa de Karnaugh”, seguido pelo mesmo conforme o exemplo abaixo, após apresentar o mapa você deverá identificar se é \"Tautologia\",\"Contradicao\" ou \"Contingencia\", uma linha em branco deverá separar os casos de teste, cuidado com os espaços, os valores no mapa deverão ser alinhados com o primeiro dígito da coluna.",
        "descricao": "Mapa de Karnaugh é uma tabela montada para facilitar o processo de minimização das expressões lógicas. Eles permitem simplificações com 2, 3, 4 ou mais variáveis, nesse problema utilizaremos no máximo expressões com 4 variáveis. Sua tarefa é simples, dado a tabela verdade você deverá  imprimir o respectivo Mapa de Karnaugh e dizer se a expressão é uma \"Tautologia\", uma \"Contradicao\" ou uma \"Contingencia\".",
        "titulo": "Mapas de Karnaugh I",
        "entrada": "A primeira linha do arquivo de entrada contém um inteiro N (0 <= N <= 50) que indica o número de casos de testes, na primeira linha do caso de teste contém um inteiro V [2, 3, 4] que indica a quantidade de variáveis que serão utilizadas, as próximas 2^V linhas conterão a tabela verdade."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1573",
        "saida": "Para cada entrada, você deve imprimir um único inteiro que deve ser truncado,representando o tamanho da aresta do chocolate em forma de cubo.",
        "descricao": "Uma fábrica produz barras de chocolates no formato de paralelepípedos e de cubos, com o mesmo volume. Porém, como a máquina que produz os chocolates em formato de cubo está apresentando alguns problemas, os donos da fábrica pediram a sua ajuda para resolver este problema. Sua tarefa é, dadas as dimensões das arestas do chocolate em formato de paralelepípedo, dizer qual é o tamanho que a aresta em formato de cubo deve ter.",
        "titulo": "Fábrica de Chocolate",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiros A, B e C (1 ≤ A, B, C ≤ 103), indicando os tamanhos das arestas do chocolate em formato de paralelepípedo. A entrada termina quando A = B = C = 0, e não deve ser processado."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2008",
        "saida": "Para cada caso de teste na entrada, a saída deve conter dois números inteiros representando o número máximo de congressistas que podem pertencer a DSP usando o orçamento dado e, da mesma forma, o número máximo dos congressistas que pode pertencer a PPP usando o orçamento dado.",
        "descricao": "O Comitê Central em Nlogônia é formado por muitos membros do congresso. Como o sistema político é dicotômico, cada membro do congresso pertence a um dos dois partidos: o Partido Sério Mortal e o Partido Festa! Festa!. Por tradição, chamam-os de DSP e PPP, respectivamente. Edward é um jornalista investigativo. Ele descobriu que os congressistas são corruptos e vai mudar de partido, se for oferecido à ele uma determinada quantidade de Nlogmoney. Cada membro do Congresso tem o seu preço específico, mas todos eles têm um preço. Como de costume na política, existem rivalidades entre alguns pares de congressistas. Rivais nunca aceitariam estar no mesmo partido. Edward tem um orçamento e quer usá-lo para fazer alguns congressistas mudarem de partido e assim coletar provas irrefutáveis ​​para sua investigação. Ao fazer isso, ele tem que respeitar rivalidades: depois que todos os políticos envolvidos aceitarem sua proposta, os rivais devem ser colocados em diferentes partidos. Edward quer causar o máximo impacto. Você pode ajudá-lo a descobrir o número máximo de congressistas que podem pertencer a DSP se ele usar no máximo todo o seu orçamento para esse objetivo? Da mesma forma, o que é o número máximo de membros do Congresso que pode pertencer a PPP sob o mesmo restrições?",
        "titulo": "Expondo a Corrupção",
        "entrada": "A entrada contém vários casos de teste; cada caso de teste é formatado como segue. A primeira linha contém quatro inteiros D, P, R e B, que representam, respectivamente, o número de congressistas que, inicialmente, pertencem a DSP (1 ≤ D ≤ 100), o número de congressistas que, inicialmente, pertencem a PPP (1 ≤ P ≤ 100), o número de rivalidades entre os membros do congresso (1 ≤ R ≤ 2,000), e o orçamento do jornalista expresso em Nlogmoney (1 ≤ B ≤ 104). Os membros do DSP são identificados com números inteiros de 1 a distintas D, enquanto os membros do PPP são identificados com inteiros distintos de 1 a P. A segunda linha contém D inteiros S1, S2, ..., SD, indicando que i membro de DSP mudará de partido se oferecido Si Nlogmoney (1 ≤ Si ≤ 100 para i = 1, 2, ..., D). A terceira linha contém inteiros P T1, T2, ..., TP, indicando que j membros de PPP vão mudar de partido, se for oferecido Tj Nlogmoney (1 ≤ Tj ≤ 100 para j = 1, 2, ..., P). Cada uma das próximas R linhas descreve uma rivalidade com dois inteiros X e Y, onde X representa o membro de DSP e Y o de PPP que são rivais (1 ≤ X ≤ D e 1 ≤ Y ≤ P)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1533",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, representando o indice do assassino, de acordo com o método citado.",
        "descricao": "John Watson, mesmo após anos trabalhando ao lado de Sherlock Holmes, nunca conseguiu entender como ele consegue descobrir quem é o assassino com tanta facilidade. Em uma certa noite, porém, Sherlock bebeu mais do que devia e acabou contando o segredo a John. “Elementar, meu caro Watson”, disse Sherlock Holmes. “Nunca é o mais suspeito, mas sim o segundo mais suspeito”. Após descobrir o segredo, John decidiu resolver um crime por conta própria, só para testar se aquilo fazia sentido ou se era apenas conversa de bêbado. Dada uma lista com N inteiros, representando o quanto cada pessoa é suspeita, ajude John Watson a decidir quem é o assassino, de acordo com o método citado.",
        "titulo": "Detetive Watson",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (2 ≤ N ≤ 1000), representando o número de suspeitos. Em seguida haverá N inteiros distintos, onde o i-ésimo inteiro, para todo 1 ≤ i ≤ N, representa o quão suspeita a i-ésima pessoa é, de acordo com a classificação dada por John Watson. Seja V o valor do i-ésimo inteiro, 1 ≤ V ≤ 10000. O último caso de teste é indicado quando N = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1267",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo ou a palavra ‘yes’, no caso de existir existe pelo menos um alumnus/alumna que participou de todas as jantares, ou a palavra ‘no’ caso contrário. A saída deve ser escrita na saída padrão. Alumna: um ex-aluno do sexo feminino de uma escola particular, faculdade ou universidade. Alumnus: um ex-aluno do sexo masculino de uma escola particular, faculdade ou universidade. Alumni: os ex-alunos de ambos os sexos de uma determinada escola, faculdade ou universidade.",
        "descricao": "A Universidade Pascal é uma das mais antigas do país e precisa renovar seu edifício da biblioteca, porque depois de todos esses séculos o edifício começou a mostrar os efeitos de suportar o peso da enorme quantidade de livros que abriga. Para ajudar na renovação, a Associação de Antigos Alunos da Universidade decidiu organizar uma série de jantares para angariação de fundos, para os quais todos os alunos foram convidados. Estes eventos provaram ser um enorme sucesso e vários foram organizados durante o ano passado. (Uma das razões para o sucesso desta iniciativa parece ser o fato de que os alunos que passaram pelo sistema de ensino Pascal tem boas lembranças daquele tempo e gostariam de ver a Biblioteca da Universidade renovada.) Os organizadores mantiveram uma planilha indicando quais alunos participaram de cada jantar. Agora eles querem sua ajuda para determinar se algum aluno ou aluna participou de todos os jantares.",
        "titulo": "Biblioteca Pascal",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e D, respectivamente, indicando o número de Alumni e o número de jantares (dinners em inglês) organizados (1 ≤ N ≤ 100 e 1 ≤ D ≤ 500). Alumni são identificados por inteiros de 1 a N. Cada uma das próximas D linhas descreve os participantes de um jantar, e contém N inteiros Xi indicando se o alumnus/alumna participará (Xi = 1) ou não (Xi = 0) daquele jantar. O fim da entrada é determinado por N = D = 0."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1092",
        "saida": "Para cada um dos casos de teste da entrada seu programa deve imprimir uma única linha, contendo o número de elementos da maior submatriz que, quando linearizada, resulta em uma seqüência crescente.",
        "descricao": "Determinar a subseqüência (contígua) crescente de maior comprimento em uma lista de números é um problema já clássico em competições de programação. Este é o problema que você deve resolver aqui, mas para não deixar você bocejando de tédio enquanto o soluciona, introduzimos uma pequena modificação: a lista de números é dada na forma de uma matriz bidimensional e a seqüência de comprimento máximo está “embutida” em uma submatriz da matriz original. Vamos definir mais precisamente o problema. A linearização de uma matriz bidimensional é a justaposição de suas linhas, da primeira à última. Uma submatriz é uma região retangular (de lados paralelos aos da matriz) de uma matriz. O tamanho de uma submatriz é seu número de elementos. Você deve escrever um programa que, dada uma matriz de números inteiros, determine a maior submatriz que, quando linearizada, resulta em uma seqüência crescente. A figura abaixo mostra alguns exemplos de submatrizes de tamanho máximo que contêm subseqüências crescentes. Note que mais de uma submatriz que contém uma subseqüência de comprimento máximo pode estar presente em uma mesma matriz. Note ainda que numa seqüência crescente não pode haver elementos repetidos: 22, 31, 33 é uma seqüência crescente, ao passo que 22, 31, 31, 33 não é.",
        "titulo": "Maior Subseqüência Crescente",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M indicando as dimensões da matriz (1 ≤ N, M ≤ 600). Cada uma das N linhas seguintes contém M inteiros, separados por um espaço, descrevendo os elementos da matriz. O elemento Xi,j da matriz é o j-ésimo inteiro da i-ésima linha da entrada(-106 ≤ Xi,j ≤ 106). O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1407",
        "saida": "Para cada caso de teste, seu programa deve escrever uma linha de saída, contendo o conjunto de números que foram sorteados o menor número de vezes. Este conjunto deve ser impresso como uma lista em ordem crescente. Deixe um espaço em branco entre dois números consecutivos na lista.",
        "descricao": "Algumas pessoas são contra loterias por motivos morais, alguns governos as proíbem, mas com a criação da internet essa popular forma de aposta, que teve início na China e ajudou a financiar a Grande Muralha, está prosperando. Mas as chances de se ganhar em uma loteria nacional são pequenas, por conta disso seus colegas de classe decidiram organizar uma loteria particular, cujo sorteio se realiza toda sexta-feira. A loteria é baseada em um estilo popular: um estudante que quer apostar escolhe C números distintos entre 1 e K e paga US$ 1.00 (note que as loterias tradicionais como a US National Lotto usam C=6 e K=49). Na sexta-feira durante o almoço, C números (também de 1 a K) são sorteados. O estudante que acertar a maior quantidade de números sorteados recebe o montante coletado nas apostas. O montante é dividido no caso de empates e acumulado para a próxima semana se ninguém acertar qualquer um dos números sorteados. Alguns de seus colegas não acreditam nas leis da probabilidade e pediram para você para escrever um programa que determine os números que foram sorteados o menor número de vezes considerando todos os sorteios prévios, para que eles possam apostar nesses números.",
        "titulo": "Loteria de Fim de Semana",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém três inteiros N, C e K que indicam, respectivamente, o número de sorteios que já aconteceram (1 ≤ N ≤ 10000), quantos números compõem uma aposta (1 ≤ C ≤ 10) e o valor máximo que pode ser escolhido numa aposta (C < K ≤ 100). Cada uma das próximas N linhas contém C inteiros distintos Xi indicando os números sorteados em cada concurso prévio (1 ≤ Xi ≤ K, para 1 ≤ i ≤ C). O fim da entrada é indicado por N = C = K = 0."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2004",
        "saida": "Imprima a maior quantidade de gramas de alimentos que Enisvaldo deve consumir.",
        "descricao": "Enisvaldo sempre foi um menino muito magrinho. Ele sempre comia pouco, e só comia pão com ovo. Certo dia, ele foi ao médico e descobriu que possuía uma pedra no rim que precisou ser removida cirurgicamente. Ele decidiu que era hora de mudar sua alimentação, e comer corretamente. Ele foi ao nutricionista, que lhe deu várias dicas. É prejudicial a saúde consumir mais de 100g ou menos de 10g de um mesmo tipo de alimento por dia. Mas se não puder consumir a quantidade ideal, ele deve preferencialmente comer o máximo possível do tipo de alimento. O nutricionista também falou que é muito importante comer o máximo possível de tipos diferentes de alimentos. A mãe de Enisvaldo sempre fazia as compras pra ele, mas dessa vez ele quis fazer as compras para escolher os alimentos que ele vai comer nesse dia. Enisvaldo foi fazer as compras mas percebeu que possuía pouco dinheiro, então ele só poderia comprar um alimento de cada tipo, mas ele queria consumir a maior quantidade de alimentos possíveis. Como Enisvaldo não está conseguindo descobrir a quantidade em gramas de alimentos que ele conseguirá consumir, ajude-o. Dada uma lista de alimentos, cada alimento com seu respectivo tipo e peso, diga a quantidade máxima em gramas que Enisvaldo deve consumir. Lembrem-se, Enisvaldo pode comer apenas um alimento de cada tipo.",
        "titulo": "Enisvaldo Com Fome",
        "entrada": "A primeira linha da entrada contém um valor Q, que representa a quantidade de casos teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1000) que representa a quantidade de alimentos diferentes no supermercado. Cada uma das próximas N contém dois inteiros T (1 ≤ T ≤ 100) e P ( 1 ≤ P ≤ 1000 ), representando o tipo e o peso do alimento respectivamente."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1802",
        "saida": "Imprima o valor da soma dos valores dos K conjuntos distintos de livros mais caros.",
        "descricao": "Bino está elaborando um catálogo de livros escolares. Ele está organizando um catálogo com conjuntos distintos de livros para vender em sua loja online. Cada conjunto de livros é formado por 5 livros, sendo um de cada matéria (português, matemática, física, química e biologia). Dois conjuntos de livros são considerados distintos se existe pelo menos um livro que está em um e não está no outro. Bino quer expor no site apenas os conjuntos distintos mais caros, e pediu sua ajuda. O valor de um conjunto é a soma dos valores de cada livro que está nele. Sua tarefa é informar qual a soma dos valores dos K conjuntos distintos de livros mais caros. Em caso de empate entre conjuntos mais caros, Bino escolhe qualquer um dos conjuntos empatados.",
        "titulo": "Catálogo de Livros",
        "entrada": "A entrada consiste em 6 linhas: A primeira linha contém um inteiro P (5 ≤ P ≤ 10), representando que Bino tem P tipos diferentes de livros de português, seguido por P inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de português.  A segunda linha contém um inteiro M (5 ≤ M ≤ 10), representando que Bino tem M tipos diferentes de livros de matemática, seguido por M inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de matemática. A terceira linha contém um inteiro F (5 ≤ F ≤ 10), representando que Bino tem F tipos diferentes de livros de física, seguido por F inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de física. A quarta linha contém um inteiro Q (5 ≤ Q ≤ 10), representando que Bino tem Q tipos diferentes de livros de química, seguido por Q inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de química. A quinta linha contém um inteiro B (5 ≤ B ≤ 10), representando que Bino tem B tipos diferentes de livros de biologia, seguido por B inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de biologia. A sexta linha contém um inteiro K (1 ≤ K ≤ P*M*Q*F*B), representando a quantidade de conjuntos distintos de livros que o catálago de livros terá."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1715",
        "saida": "Seu programa deve produzir uma única linha, contendo um único inteiro, o número de jogadores que fizeram gols em todas as partidas.",
        "descricao": "Frustrado e desanimado com os resultados de sua equipe de futebol, o Super Brasileiro Clube (SBC) resolveu investir na equipe de handebol. Para melhor avaliar os atletas, os técnicos identificaram que seria útil analisar a regularidade dos jogadores. Especificamente, eles estão interessados em saber quantos jogadores fizeram gols em todas as partidas. Como o volume de dados é muito grande, eles gostariam de ter um programa de computador para realizar essa contagem.",
        "titulo": "Handebol",
        "entrada": "A primeira linha da entrada contém dois inteiros N e M (1 ≤ N ≤ 100 e 1 ≤ M ≤ 100), indicando respectivamente o número de jogadores e o número de partidas. Cada uma das N linhas seguintes descreve o desempenho de um jogador: a i-ésima linha contém M inteiros Xj (0 ≤ X j ≤ 100, para 1 ≤ j ≤ M ), informando o número de gols do i-ésimo jogador em cada partida."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1569",
        "saida": "Para cada jogador, imprima uma linha contendo um texto na forma: Position of player N is P., onde N será substituído pelo número do jogador e P será substituído pela posição final de cada jogador.",
        "descricao": "Sobe e Desce é um jogo de tabuleiro jogado em um grid de 10 por 10. As posições do grid são numerados de 1 a 100. Cada jogador possui uma peça colorida que o representa. No começo do jogo, cada jogador coloca sua peça na posíção 1 do tabuleiro. No turno de cada jogador, ele deve jogar um dado que lhe dará um número randômico entre 1 e 6. Depois de jogar o dado, o jogador deve avançar sua peça a quantidade de posições exibidas no dado. Se isso fizer com que sua peça ultrapasse a posição 100, o jogador deve deixá-la exatamente na posição 100 do tabuleiro. Depois de avançar, se a peça estiver em uma posição contendo o início de uma escada, a peça deve avançar para a posição contendo o topo da escada. Da mesma forma, se a peça estiver em uma posição contendo o topo de um escorregador, a peça deve ser movida para a posição contendo o fim do escorregador. Nenhuma posição contém mais de um final de qualquer escorregador ou escada. A posição 100 não contém o topo de um escorregador ou o início de uma escada. Um jogador vence quando sua peça alcança a posição 100. Nesse ponto, o jogo termina. Dada uma configuração de escorregadores e escadas sobre o tabuleiro e uma sequência de jogadas do dado, você precisa determinar as posições de todas as peças no tabuleiro. A sequência de jogadas do dado não precisa ser completa, ou seja, nenhum jogador precisa sair vitorioso (chegar até a posição 100). A sequência de jogadas do dado também pode continuar após o fim do jogo; neste caso, as jogadas após o jogo terminar devem ser ignoradas.",
        "titulo": "Sobe e Desce",
        "entrada": "A primeira linha contém o número de casos de teste. O formato de cada caso de teste é o seguinte: A primeira linha de cada caso contém três inteiros positivos: o número a de jogadores, o número b de escorregadores e escadas, e o número c de jogadas do dado. Não haverão mais do que 1000000 jogadores e não mais do que 1000000 jogadas do dado. Cada uma das b linhas seguintes contêm dois inteiros especificando um escorregador ou uma escada. O primeiro inteiro indica a posição contendo o topo de um escorregador ou o início de uma escada. O segundo inteiro indica a posição contendo o fim do escorregador ou o topo da escada. As próximas c linhas contêm cada uma um inteiro dando o número exibido em cada jogada do dado."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2012",
        "saida": "Saída de uma linha com um inteiro representando o número de faces do poliedro representados por o Height Map de entrada.",
        "descricao": "Um Height Map é uma matriz bidimensional de inteiros positivos que representa um poliedro. Cada célula da matriz com o valor V representa uma coluna em forma de paralelepípedo 1 × 1 × V que é colocada sobre um dos seus 1 × 1 virado para a célula. Isso cria um poliedro com um único rosto no fundo compo de todas as para baixo de frente para 1 × 1 rostos combinados, e possivelmente várias faces no topo e nos lados. Por exemplo, uma matriz de 2 x 2 com todos os valores iguais a 2 representa um cubo do lado 2. No entanto, se a pessoa dos valores é 1, o poliedro representado é o mesmo cubo com um canto cortado. Os seguintes imagem representa ambas as alternativas. Embora nem todos os poliedro pode ser representado desta forma, há vários que pode. Aqui estão um par de outros exemplos. Dado um Mapa, você está convidado a contar o número de faces do poliedro representados. Note-se que uma face é definido como um polígono simples que descreve um limite máximo de contígua e poliedro. Como você pode ver nos dois últimos exemplos, é possível que duas faces coplanares diferentes compartilhar um vértice comum, ou mesmo um lado, ou porções de um lado.",
        "titulo": "Altura do Mapa",
        "entrada": "A primeira linha contém dois inteiros R e C, representando, respectivamente, o número de linhas e colunas do Height Map (1 ≤ R, C ≤ 100). Cada uma das linhas próximas R contém inteiros C; o número inteiro de ordem j na linha de ordem i é o valor Vi, J localizado na linha i-ésimo e j-ésimo coluna da matriz (1 ≤ Vi, J ≤ 109 para i = 1, 2,... , R e j = 1, 2,..., C)."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1780",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #X: Y\", onde X é o número do caso atual, iniciando em 1, e Y é a string “Challenge Accepted!”, se for possível organizar os robôs do jeito que Heitor quer, ou “Run for your life!”, caso contrário.",
        "descricao": "A inventora de Heitor Ado, a doutora Ruína Balística, terminou a construção de um novo exército de robôs, e ele está pronto para ser enviado para conquistar o mundo. Os robôs possuem N cores diferentes, cada uma demonstrando o tipo de armamento que ele usa. Heitor mandou você, um de seus lacaios, organizá-los em formação, ou seja, em várias fileiras lado a lado, formando uma matriz. Heitor lhe deu certas regras para isso: Deve haver no mínimo duas fileiras Todas as fileiras devem ter a mesma quantidade de robôs Considerando as cores dos robôs, toda a formação deve ser simétrica em relação a um eixo central paralelo às fileiras As imagens acima mostram duas possíveis organizações dos robôs para diferentes quantidades de cores. As fileiras são dispostas verticalmente, e na primeira imagem o eixo simétrico paralelo às fileiras passa entre as duas fileiras do centro; já na segunda imagem, o eixo simétrico passa pelo centro da fileira central. Se você não for capaz de organizar os robôs da forma como Heitor pediu, a doutora Ruína irá dissecá-lo e transformá-lo em um deles. Dadas as quantidades de robôs de cada cor, decida se você pode cumprir a ordem dele ou se deve fugir enquanto ainda há tempo.",
        "titulo": "Formação de Robôs",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 1000), o número de casos de teste. Cada caso começa com uma linha com um número N (1 ≤ N ≤ 100), o número de cores diferentes. Em seguida, há uma linha com N inteiros Ai (1 ≤ Ai ≤ 1000), o número de robôs com a i-ésima cor."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2178",
        "saida": "Imprima uma única linha contendo a quantidade mínima de voltas completas na lagoa que Bino deve realizar para capturar todas as aves.",
        "descricao": "A Lagoa Azul é uma lagoa redonda, onde várias aves vivem tranquilamente (ou nem tanto). Bino, um garoto malino, quer capturar todas as aves que vivem na Lagoa Azul. Existem P locais na lagoa onde alguma ave pode ficar, como ilustrado na figura abaixo para P = 8. Bino sabe que as aves se cansam, e não querem sair da lagoa em nenhum momento. Cada ave pode realizar um determinado número de voos, após isso ficara cansada demais para voar novamente. Bino vai iniciar na posição 0, e seguir sempre na direção horária, até conseguir capturar todas as aves. Cada ave tem uma lista ordenada de locais para onde ela prefere fugir caso Bino chegue ao local onde ela está. Por exemplo, para o primeiro caso de teste, existe apenas uma ave que começa no local 1, quando Bino chega em 1, ela foge para 2, quando Bino chega em 2, ela foge para 3, e quando Bino chega em 3, ela já está cansada e é capturada. Sua tarefa é descobrir qual a quantidade mínima de voltas completas na lagoa que Bino deve realizar para capturar todas as aves. Em uma volta completa, Bino visita todos os locais, e retorna para a posição 0 (revisitando a posição 0). É garantido que nenhuma ave comece na posição 0, e também que nenhuma ave tente fugir para o mesmo local onde ela está.",
        "titulo": "Lagoa Azul",
        "entrada": "A primeira linha contém dois inteiros A (1 < A ≤ 103) e P (1 < P ≤ 109), representando respectivamente o número de aves e o número de locais. Em seguida serão apresentadas A linhas. Cada linha iniciará com um inteiro Ni (1 ≤ Ni ≤ 103), representando a quantidade de locais que a ave i vai tentar fugir, em seguida, serão apresentados Ni inteiros, representando a lista de locais par onde a ave vai fugir."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1359",
        "saida": "Para cada caso de teste seu programa deverá produzir apenas uma linha, contendo o valor total mínimo de taxas de divisão, como um número real com precisão de dois dígitos.",
        "descricao": "Companhia Internacional de Projetos Concretos (CIPC) é uma companhia especializada in construção de casas para o mercado de alta qualidade. CIPC está planejando um desenvolvimento habitacional para casas ao redor de um lago. As casas serão construídas em terrenos de diferentes tamanhos, mas todos os terrenos estão na costa do lago. Adicionalmente, cada terreno terá exatamente dois vizinhos no desenvolvimento habitacional: um à esquerda e um à direita. Figura 1: Plano de desenvolvimento indicando os tamanhos dos terrenos (em unidades de área) do novo desenvolvimento habitacional. CIPC possui os direitos do terreno em volta do lago e precisa dividir ele em terrenos de acordo com o plano do desenvolvimento habitacional. Porém, o Conselho do Condado tem curiosas regulamentações no que diz respeito a taxas de terrenos, pretendendo a desencorajar a criação de pequenos terrenos: um terreno pode apenas ser dividido usando uma sequência de divisões de terreno; a divisão de um terreno é uma operação que divide um pedaço de terreno em dois pedaços de terreno; e para cada divisão de terreno, uma taxa de divisão de terreno deve ser paga. Seja A a área do maior terreno resultante da divisão, o valor da taxa da divisão do terreno é A x F, onde F é o fator da taxa de divisão definido anualmente pelo Conselho do Condado. Note que graças a (2), para dividir um pedaço de terreno em N terrenos, N – 1 divisões de terreno deverão ser feitas e, portanto, N – 1 pagamentos deverão ser realizados ao Conselho do Condado. Por exemplo, considere a figura acima, se o fator da taxa de divisão for 2.5 e a primeira divisão do terreno separa o terreno de 500 unidades de área de outros terrenos, a taxa de divisão de terreno a ser paga por essa divisão será 2.5 x (300 + 200 + 100 + 100 + 100). Se a próxima divisão de terreno separar o terreno de 300 unidades junto com o terreno de 100 unidades, do conjunto de terrenos restantes, um adicional 2.5 x (300 + 100) deverá ser pago em taxa, e por ai vai. Note também que algumas divisões de terrenos não são possíveis, graças a (2). Por exemplo, após a primeira divisão de terreno mencionada acima, não é possível realizar uma divisão de terreno para separar o terreno de 300 unidades com o terreno de 200 unidades dos três terrenos restantes, porque mais de duas partes resultariam de tal operação. Dada a área de todos os terrenos em volta ao lago e o valor atual do fator de taxa de divisão, você deverá escrever um programa que determine a menor taxa de divisão que deveria ser paga para dividir o terreno de acordo com o plano de desenvolvimento habitacional.",
        "titulo": "Taxa de Divisão de Terreno",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém um inteiro N e um número real F, indicando respectivamente, o número de terrenos (1 ≤ N ≤ 200) e o fator da taxa de divisão (com precisão de dois dígitos decimais, 0 < F ≤ 5.00). A segunda linha de um caso de teste contém N inteiros Xi, representando as áreas dos contínuos terrenos do desenvolvimento habitacional (0 < Xi ≤ 500, para 1 ≤ i ≤ N); além disso, Xk é vizinho de Xk+1 para 1 ≤ k ≤ N-1, e Xn é vizinho de X1. O final da entrada é indicado por N = F = 0."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1932",
        "saida": "Seu programa deve produzir uma única linha com um inteiro representando o lucro máximo do investidor, em reais.",
        "descricao": "Um investidor principiante deseja aprender a investir na bolsa de valores. Como ele não tem experiência, selecionou uma única empresa, e acompanhou os valores diários das ações dessa empresa, durante N dias. Ficou curioso quanto teria ganhado se tivesse investido nesse período em que acompanhou os valores. Na verdade, o investidor é milionário e tem muito dinheiro, suficiente para comprar qualquer quantidade de ações da empresa. Entretanto, como é um investidor cuidadoso, decidiu que nunca teria mais do que uma ação da empresa. Como sempre há intermediários, a corretora de valores cobra uma taxa fixa de C reais a cada compra de uma ação da empresa. Você deve calcular qual o lucro máximo que o investidor poderia ter auferido, investindo durante alguns dos N dias, podendo inclusive decidir não investir.",
        "titulo": "Bolsa de Valores",
        "entrada": "A primeira linha contém dois inteiros, N e C (1 ≤ N ≤ 2 × 105 e 0 ≤ C ≤ 30). A segunda linha contém as N cotações P1, P2, . . . , PN , dos dias 1, 2, . . . , N, respectivamente. Cada cotação Pi satisfaz as desigualdades 1 ≤ Pi ≤ 1000."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1087",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo um número inteiro, indicando o menor número de movimentos necessários para a dama chegar em sua casa de destino.",
        "descricao": "O jogo de xadrez possui várias peças com movimentos curiosos: uma delas é a dama, que pode se mover qualquer quantidade de casas na mesma linha, na mesma coluna, ou em uma das duas diagonais, conforme exemplifica a figura abaixo: O grande mestre de xadrez Kary Gasparov inventou um novo tipo de problema de xadrez: dada a posição de uma dama em um tabuleiro de xadrez vazio (ou seja, um tabuleiro 8 × 8, com 64 casas), de quantos movimentos, no mínimo, ela precisa para chegar em outra casa do tabuleiro? Kary achou a solução para alguns desses problemas, mas teve dificuldade com outros, e por isso pediu que você escrevesse um programa que resolve esse tipo de problema.",
        "titulo": "Dama",
        "entrada": "A entrada contém vários casos de teste. A primeira e única linha de cada caso de teste contém quatro inteiros X1, Y1, X2 e Y2 (1 ≤ X1, Y1, X2, Y2 ≤ 8). A dama começa na casa de coordenadas (X1, Y1), e a casa de destino é a casa de coordenadas(X2, Y2). No tabuleiro, as colunas são numeradas da esquerda para a direita de 1 a 8 e as linhas de cima para baixo também de 1 a 8. As coordenadas de uma casa na linha X e coluna Y são (X, Y ). O final da entrada é indicado por uma linha contendo quatro zeros."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1836",
        "saida": "Para cada caso de teste, a saída deve ser composta de cinco mensagens, uma por linha: Caso #t: P nível LHP: HPCAT: ATCDF: DFCSP: SPC onde P é o nome do pokémon, L o nível e SC o atributo calculado para o nível L, conforme as expressões apresentadas, e t é o número do caso de teste, cuja contagem tem início no número um.",
        "descricao": "Na primeira geração, as criaturas do jogo Pokémon tinham quatro atributos básicos: vitalidade (HP), ataque (AT), defesa (DF) e velocidade (SP), que aumentavam de valor a medida que o pokémon evoluía (ganhava níveis de experiência) através de batalhas e itens especiais. O valor de cada um destes atributos, para um determinado nível (o qual varia entre 1 e 99), pode ser computado através das expressões: e onde BS é o valor base do atributo (vitalidade, ataque, defesa e velocidade), EV é o valor dos esforços do pokémon (que depende de quantas e quais batalhas ele participou), IV é o valor individual do pokémon no referido atributo (equivalente ao \"gene\" do pokémon) e L é o nível. Os atributos EV e IV faz com que dois pokémons de mesmo tipo evoluam de forma diferente. Como o atributo deve ter um valor inteiro, a parte decimal deve ser descarada ao final do cálculo da fração. Dado um determinado pokémon, os valores base de seus atributos e seu nível, determine seus respectivos atributos.",
        "titulo": "Pokémon!",
        "entrada": "A entrada consiste em uma série de casos de teste. A quantidade de casos de teste T (T ≤ 1.000) é indicada na primeira linha da entrada. Cada caso de teste consiste em cinco linhas. A primeira linha contém o nome do pokémon P e o seu nível L (1 ≤ L ≤ 99), separados por um espaço em branco. O nome do pokémon contém apenas caracteres alfanuméricos. As quatro linhas seguintes contém três inteiros cada uma: BS (1 ≤ BS ≤ 255), IV (1 ≤ IV ≤ 15) e EV (1 ≤ EV ≤ 262.140), separados por um espaço em branco, para cada um dos quatro atributos: HP, AT, DF e SP."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1765",
        "saida": "Para cada caso de teste apresente o valor de sorvete usado, em cm2, para cada um dos tamanhos. Após cada caso de teste, imprima uma linha em branco.",
        "descricao": "Jorge era um cara muito determinado a criar trapézios doces de Natal. Os trapézios são feitos de fios de balas puxa-puxa e recheados com sorvete. Após assados eles assumem uma perfeita forma bidimensional de um trapézio. Por padrão, todos os trapézios possuem a mesma altura, 5cm, mas as suas bases podem alterar de tamanho dependendo da disponibilidade de balas puxa-puxa que Jorge possui. Um dia Jorge estava curioso para saber quanto de sorvete ele estava ocupando para cada tamanho de trapézio que fazia, então ele chamou você para ajudá-lo. Você deve fazer um programa que dados quantos tamanhos diferentes de trapézios vão ser feitos, quantos trapézios daquele tamanho serão produzidos e as medidas das bases de puxa-puxa, você diga quantos cm2 de soverte serão ocupados por cada tamanho.",
        "titulo": "Trapézios de Natal",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste começa com um inteiro T (0 ≤ T ≤ 50) indicando quantos tamanhos diferentes haverá nessa fornada. As T linhas seguintes contém 3 valores, um inteiro Q (0 ≤ Q ≤ 50) indicando a quantidade de trapézios feitos com as medidas A e B (0 ≤ A,B ≤ 50) ambos de dupla precisão antecedidos por Q. A entrada termina quando T for zero."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1271",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir Q + 1 linhas de saída. A primeira linha deve conter a string \"Genome\", seguido do número do caso de teste. As seguintes Q linhas devem conter um número inteiro, cada um representando as respostas das consultas.",
        "descricao": "Uma maneira que os cientistas tem para tentar medir como uma espécie evoluiu para outra é investigando como o genoma do ancestral se modificou para se transformar nesta outra espécie. Espécies intimamente relacionadas têm vários genes em comum e verifica-se que uma boa maneira de compará-las é através da comparação de como os genes comuns mudaram de lugar. Uma das mutações mais comuns que alteram a ordem dos genes de genomas é a inversão. Se modelarmos um genoma como uma sequência de N genes sendo cada gene um número inteiro de 1 a N,então uma inversão é uma mutação que altera o genoma revertendo a ordem de um bloco de genes consecutivos. A inversão pode ser descrita por dois índices (i, j), (1 ≤ i ≤ j ≤ N), indicando que ela inverte a ordem dos genes dentro de índices de i até j. Assim, quando isto é aplicado para um genoma [g1,. . . , gi-1, gi , gi+1,. . . , gj-1, gj , gj+1,. . . , gN], obtém-se o genoma [g1,. . . , gi-1, gj , gj-1,. . . , gi+1, gi , gj+1,. . . , gN]. Como um exemplo, a inversão de (3, 6), aplicado à genoma [1, 2, 3, 4, 5, 6, 7] dá [1, 2, 6, 5, 4, 3, 7]. Se depois que a inversão (1, 3) é aplicada, obtém-se o genoma [6, 2, 1, 5, 4, 3, 7]. Um cientista que está estudando a evolução de uma espécie deseja tentar uma série de inversões no genoma desta espécie. Em seguida, ele quer consultar a posição final de vários genes. Será que você aceita o desafio de ajudá-lo?",
        "titulo": "Onde estão meus Genes",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de genes no genoma (1 ≤ N ≤ 50000). Você pode supor que o ordem inicial dos genes é a sequência de números inteiros de 1 a N em ordem crescente. A segunda linha de um caso de teste contém um inteiro R (0 ≤ R ≤ 1000) que indica o número de inversões a serem aplicadas ao genoma. Então, R linhas seguem, cada uma contendo dois inteiros i, j (1 ≤ i ≤ j ≤ N), separados por um único espaço, o qual indicam os dois índices que definem a inversão correspondente. Após a descrição das inversões há uma linha contendo um inteiro Q (0 ≤ Q ≤ 100), que indica o número de consultas para os genes, seguido de Q linhas, onde cada linha contém um inteiro representando um gene cuja posição final você deve determinar. O final da entrada é indicada por N = 0."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1882",
        "saida": "Para cada instância, imprima um número real arredondado para 3 casas decimais com o valor mínimo esperado. O número deve sempre ser impresso com as 3 casas decimais.",
        "descricao": "A Tailândia tem algumas centenas de ilhas. Todas as ilhas de tamanho razoável têm pequenas pistas de voo, onde aviões de pequeno porte operam. O sistema de transporte, no entanto, é bastante estranho às vistas de um estrangeiro... Os barqueiros são muito confiáveis. Partindo, por exemplo, de Ko Khang Khao (เกาะค้างคาว), você consegue um barco para as ilhas vizinhas a preços razoáveis: Ko Sichang (เกาะสีชัง), Ko Kham Yai (เกาะขามใหญ่), Ko Kham Noi (เกาะขามน้อย), Ko Ram Dok Mai (เกาะร้ามดอกไม้), Ko Prong (เกาะปรง), ou Ko Yai Thao (เกาะใหญ่ท้าว) (sim, Ko significa ilha em tailandês). Os pilotos de avião, por sua vez, são muito temperamentais. Você pega o avião e ele deixa você em uma ilha aleatória, que ele decide de acordo com sua própria vontade. Toda ilha tem a mesma probabilidade de ser escolhida pelo piloto, inclusive a ilha de origem. Apesar de o destino ser incerto, toda viagem de avião tem o mesmo preço fixo. Assim, quando você quer ir de uma ilha a outra tem sempre duas opções. Pegar um barco para uma ilha vizinha, cujo preço varia de acordo com o trecho percorrido, ou arriscar e pegar um avião, pagando o preço fixo de K baht. Considere que as ilhas são numeradas de 1 a N. Sua tarefa neste problema é determinar o valor mínimo esperado de uma viagem a ser feita da ilha 1 para a ilha N.",
        "titulo": "Passeios Aleatórios pela Tailândia",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância inicia com 3 inteiros, N, M (1 ≤ N, M ≤ 100.000) e K (1 ≤ K ≤ 1000), representando o número de ilhas, a quantidade de barqueiros e o custo da viagem de avião. As próximas M linhas contêm 3 inteiros cada, A, B, C (1 ≤ C ≤ 1.000), indicando que existe um barqueiro cobrando C baht para ir da ilha A para a B, ou da ilha B para a A. Entre cada par de ilhas existe no máximo um barqueiro."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1472",
        "saida": "Seu programa deve produzir uma única linha para cada caso de teste, contendo um único inteiro, o número de triângulos equiláteros distintos que podem ser construídos utilizando os pontos dados como vértices.",
        "descricao": "São dados N pontos em uma circunferência. Você deve escrever um programa que determine quantos triângulos equiláteros distintos podem ser construídos usando esses pontos como vértices. A figura abaixo ilustra um exemplo; (a) mostra um conjunto de pontos, determinados pelos comprimentos dos arcos de circunferência que têm pontos adjacentes como extremos, e (b) mostra os dois triângulos que podem ser construídos com esses pontos.",
        "titulo": "Triângulos",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um número inteiro N ( 3 ≤ N ≤ 105), o número de pontos dados. A segunda linha contém N inteiros Xi (1 ≤ Xi ≤ 103) para 1 ≤ i ≤ N, representando os comprimentos dos arcos entre dois pontos consecutivos na circunferˆencia: para 1 ≤ i ≤ (N − 1), Xi representa o comprimento do arco entre os pontos i e i + 1; XN representa o comprimento do arco entre os pontos N e 1. O final da entrada é determinado por EOF (fim de arquivo)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1750",
        "saida": "Apresente uma linha com um inteiro que representa o mínimo da diferença total de tempo entre todas as partições possíveis do conjunto de candidatos em casais.",
        "descricao": "O trabalho de Cupido está ficando mais difícil, por isso ele está adotando novas tecnologias para ajuda-lo com sua difícil tarefa de combinar pessoas em casais felizes. Ele nomeou os melhores programadores em sua equipe para um novo projeto chamado Advanced Couples Matching (ACM). Para este projeto, os programadores precisam produzir um algoritmo que leva um conjunto de um número par de N pessoas solitárias e combina-los em N/2 casais, de modo que cada pessoa esteja exatamente em um casal. Infelizmente, os dados disponíveis sobre cada pessoa são limitados. Neste mundo moderno, usando de gênero, etnia, idade ou nacionalidade como critério para formar casais não é uma opção sensata, de modo que os programadores só podem utilizar os dados sobre a conexão à internet de cada candidato. Eles decidiram concentrar-se em fusos horários nesta fase. As pessoas que vivem em zonas de tempo mais próximas são mais propensos a encontrar tempo para interagir uns com os outros. Assim, os programadores decidiram criar casais de modo a minimizar a diferença de tempo total. Cada fuso horário é identificado por um número inteiro entre -11 e 12, inclusive, representando a sua diferença em horas de um fuso horário especial chamado Tempo Universal Coordenado (ou UTC). A diferença de tempo de duas pessoas que vivem em zonas de tempo representados por números inteiros i e j é o mínimo entre | i - j | e 24 - | i - j |. Dada uma partição de um conjunto de um mesmo número N de candidatos em N/2 casais, a sua diferença de tempo total é a soma da diferença de tempo de cada casal. Você está convidado a escrever um programa que recebe como entrada os fusos horários de um conjunto de N candidatos. A saída do programa deve ser o mínimo da diferença total de tempo entre todas as partições possíveis do conjunto para casais.",
        "titulo": "Ajude o Cupido",
        "entrada": "A primeira linha contém um inteiro par N (2 ≤ N ≤ 1000) representando o número de candidatos que serão acoplados. A segunda linha contém N inteiros T1, T2,. . . , TN (-11 ≤ Ti ≤ 12 para i = 1, 2,..., N), indicando os fusos horários dos candidatos."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1716",
        "saida": "Seu programa deve produzir uma única linha, contendo um único inteiro M, 1 ≤ M < N , a mensagem original.",
        "descricao": "O algoritmo RSA é um dos algoritmos de criptografia mais utilizados e é considerado uma das alternativas mais seguras existentes. Seu funcionamento básico é descrito a seguir. Dois números primos ímpares P e Q são escolhidos e calcula-se N = PQ. A seguir é calculada a função totiente φ(N) = (P − 1)(Q − 1) e um inteiro e satisfazendo 1 < E < φ(N) é escolhido de forma que mdc(φ(N), e) = 1. Finalmente é calculado o inteiro D, o inverso multiplicativo de e módulo φ(N), ou seja, o inteiro D satisfazendo DE = 1 (mod φ(N)). Assim obtemos a chave pública, formada pelo par de inteiros N e E, e a chave secreta, formada pelos inteiros N e D. Para criptografar uma mensagem M, com 0 < M < N, calcula-se C = Me (mod N), e C é a mensagem criptografada. Para descriptografá-la, ou seja, para recuperar a mensagem original, basta calcular M = Cd (mod n). Note que, para isso, a chave secreta deve ser conhecida, não sendo suficiente o conhecimento da chave pública. Note ainda que a expressão x = 1 (mod y) usada acima equivale a dizer que y é o menor natural tal que o resto da divisão de x por y é 1. Neste problema você deve escrever um programa para quebrar a criptografia RSA.",
        "titulo": "RSA",
        "entrada": "A única linha da entrada contém três inteiros N, E, e C, onde 15 ≤ N ≤ 109 , 1 ≤ E < N e 1 ≤ C < N, de forma que N e E constituem a chave pública do algoritmo RSA descrita acima e C é uma mensagem criptografada com essa chave pública."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1699",
        "saida": "Para cada caso de teste imprima, em uma única linha, Annie ou Garen, o vencedor do jogo.",
        "descricao": "Annie e Garen adoram jogos de computador mas eles não são muito bons em contar. Por isso, eles precisam da sua ajuda nesse jogo. O jogo consiste de n caixas, cada uma com um rótulo x. Em cada caixa são colocadas d bolas, onde d é o número de divisores positivos de x, o rótulo da caixa. Em cada turno, um jogador escolhe uma bola de qualquer caixa e a remove do jogo. O jogador que fizer o último movimento é o vencedor. Dados n e x para todas as caixas, eles querem saber quem vai vencer. Annie sempre é a primeira a jogar.",
        "titulo": "Jogo Entediante",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste é descrito em duas linhas. A primeira linha contém o inteiro n (1 ≤ n ≤ 105), representando o número de caixas. A segunda linha contém n inteiros, onde o i-ésimo número representa o rótulo x (1 ≤ x ≤ 1012) da i-ésima caixa. O último caso de teste é seguido por uma linha contendo um zero."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1218",
        "saida": "Para cada caso de teste imprima quatro linhas, conforme exemplo abaixo. A primeira linha deve apresentar a mensagem “Caso n:”, onde n é o número do caso de teste. A segunda linha deve informar quantos pares da caixa de calçados são iguais ao número que Overlaine quer encontrar, com mensagem correspondente. Seguem duas linhas com a quantidade respectiva de calçados Femininos (F) e Masculinos (M), com mensagem correspondente. Imprima uma linha em branco entre as saídas de dois casos de teste consecutivos.",
        "descricao": "Agora que Mangojata resolveu alguns problemas que utilizavam getline, acha que está apta a dar um passo adiante. Ela está prestes a fazer um novo programa para auxiliar a sua irmã, Overlaine. Overlaine é vendedora de calçados e por um acidente, misturou todos os pares de calçados que tinha para vender. Ela quer informar um número qualquer N e contar quantos calçados de uma determinada caixa são deste tamanho (N). O problema é que Overlaine não tem a menor idéia de quantos calçados existem em cada caixa. A única coisa que sabe é que cada calçado pode ter numeração de 20 a 44, podendo ser masculino ou feminino.",
        "titulo": "Getline Three -  Calçados",
        "entrada": "A entrada contém vários casos de teste e termina com EOF (Fim de Arquivo). Cada caso de teste consiste de duas linhas de entrada. A primeira linha contém uma numeração N (20 ≤ N ≤ 44) de calçado que Overlaine informa e a segunda linha contém o número de cada par que está dentro da caixa seguido de M ou F indicando se o par é de calçado Masculino ou Feminino."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1881",
        "saida": "Para cada instância, imprima uma única linha contendo as coordenadas (x, y), em metros, da posição final do robô, após executar N vezes a instrução I(α, l). As coordenadas x e y devem ser arredondadas e impressas com 2 casas decimais.",
        "descricao": "Malai participará da final tailandesa de robótica na próxima semana. Nessa competição, cada competidor dará ao seu respectivo robô uma instrução e o número de vezes que essa instrução deverá ser executada. No final da competição, o robô que se aproximar mais do alvo final será o campeão. Cada robô pode ser representado como um ponto (x, y) no plano cartesiano e sua posição inicial será a origem do plano. Cada instrução é definida por I(α, l), onde α representa um ângulo em graus e l uma distância em metros. Para executar a instrução I(α, l), o robô deve rotacionar α graus no sentido anti-horário em torno da origem e depois somar l metros na coordenada x da sua posição. Malai é iniciante nessa competição e precisa da sua ajudar para descobrir a posição final do robô.",
        "titulo": "Competição de Robótica",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de uma única linha contendo o ângulo α (0 ≤ α ≤ 365), a distância l (0 ≤ l ≤ 10) racional e o número inteiro N (1 ≤ N ≤ 1.000.000.000) de vezes que a instrução I(α, l) deverá ser executada. Considere que α N são inteiros e l é racional."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1676",
        "saida": "Para cada caso de teste n, imprima uma única linha contendo o enésimo número da sorte.",
        "descricao": "Após uma competição europeia de programação em 1998, que ocorreu em Ulm, na Alemanha, foi dada uma grande festa. Os organizadores da festa inventaram uma forma especial para escolher quais participantes iriam ajudar lavando as louças. Os competidores deveriam se organizar em uma fila, um atrás do outro. Cada um deles recebeu um número, começando com 2 para o primeiro, 3 para o segundo, 4 para o terceiro, etc. Então, o primeiro competidor na fila mostra o seu número (no caso, 2). Ele é liberado de ter que lavar as louças e pode curtir a festa, porém, cada segundo participante atrás dele deveria ir para a cozinha (aqueles com os números 4, 6, 8, etc). Depois, o próximo competidor na fila restante mostra seu número. Ele mostra o 3 e também é liberado de ter que lavar louças, mas todos os terceiros competidores atrás dele deveriam ajudar (aqueles com os números 9, 15, 21, etc). O próximo na fila mostra seu número (5) e é liberado, mas cada quinto participante atrás dele é selecionado para ajudar (números 19, 35, 49, etc). O próximo mostra o número 7 e é liberado, e então cada sétimo atrás dele é enviado para a cozinha, e assim sucessivamente. Vamos chamar o número dos competidores que não precisaram ajudar com as louças de um número da sorte. Continuando a seleção preparada pela organização, vemos que os números da sorte são 2, 3, 5, 7, 11, 13, 17, etc. Encontre os números da sorte para se dar bem na próxima festa.",
        "titulo": "Precisa-se de Ajuda",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de um inteiro n (0 ≤ n ≤ 3000). Um zero indica o fim da entrada."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1228",
        "saida": "Para cada caso de teste imprima uma linha contendo um único número inteiro, que indica o número mínimo de ultrapassagens necessárias para se chegar do grid de largada ao grid de chegada.",
        "descricao": "Na Nlogônia, vai ser realizada a sensacional final mundial da fórmula 17. Os competidores se alinham na largada e disputam a corrida. Você vai ter acesso aos grids de largada e de chegada. A questão é determinar o número mínimo de ultrapassagens que foram efetuadas durante a competição.",
        "titulo": "Grid de Largada",
        "entrada": "Cada caso de teste utiliza três linhas. A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 24) indicando o número de competidores. Cada competidor é identificado com um número de 1 a N. A segunda linha de cada caso tem os N competidores, em ordem do grid de largada. A terceira linha de cada caso tem os mesmos competidores, porém agora na ordem de chegada."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1321",
        "saida": "Para cada caso de teste, imprima uma única linha. Se existe uma carta que fará o Príncipe ganhar independente do modo como jogar, você deve imprimir a menor carta possível. Caso contrário, imprima -1.",
        "descricao": "Jollo é um simples jogo de cartas que as crianças da Logônia adoram jogar. É um jogo entre dois jogadores usando um baralho normal de 52 cartas. No jogo, as cartas são ordenadas de acordo com seu valor e naipe, produzindo uma sequência de 52 valores distintos. ​O jogo é composto de três turnos, jogados em uma série melhor de três (um jogador deve ganhar dois turnos para ganhar o jogo). No início do jogo, o baralho é embaralhado e cada jogador recebe três cartas. Em cada turno, os jogadores mostram uma carta ao adversário e o jogador com a carta mais alta ganha o turno. As cartas usadas no turno são descartadas (ou seja, não podem ser usadas novamente). O filho do Rei adora jogar este jogo, mas ele não é muito esperto, perdendo frequentemente para sua irmã mais nova. E quando perde, ele chora tão alto que ninguém aguenta escutar. O criado que embaralha as cartas para o Príncipe e sua irmã tem medo de ser mandado para a prisão caso o Príncipe continue perdendo. O criado pode ver as cartas que ele entrega, e após distribuir cinco cartas (três à Princesa e duas ao Príncipe) quer saber qual a carta mais baixa que ele deve entregar ao Príncipe tal que não exista nenhuma possibilidade de ele perder o jogo, não importando a maneira como jogue.",
        "titulo": "Jollo",
        "entrada": "Cada caso de teste é dado em uma única linha que contém cinco inteiros distintos A, B, C, X e Y, descrevendo as cartas já distribuídas aos jogadores. As primeiras três cartas são dadas à Princesa (1 ≤ A,B,C ≤ 52) e as últimas duas cartas são dadas ao Príncipe (1 ≤ X,Y ≤ 52). ​O último caso de teste é seguido de uma linha contendo cinco zeros."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2209",
        "saida": "For each test case, display its case number followed by the minimum number m of cells that must be infiltrated to obtain complete control of the ACM. Then display m numbers c1, . . . , cm in any order, indicating the list of cells to infiltrate (cells are numbered from 1 to n). If more than one set of m cells gives complete control, any one will be accepted.",
        "descricao": "Good morning, agent W-12. Your mission, should you choose to accept it, is as follows. We are infiltrating the ever so insidious Association of Chaos and Mischief (ACM) in order to take down their command structure. Unfortunately, they appear to be prepared for such an eventuality, and have given their command structure an annoyingly complex design which makes our infiltration quite difficult. The ACM command structure is divided into several cells. For each pair of cells A and B, either A controls B or B controls A. But this “control” relation can be cyclic, so it could happen that A controls B and B controls C and C controls A. We can send in agents to infiltrate any particular cell, which gives us control over that cell and the cells that it controls, but not any other cells. So in the example above, infiltrating A would give us control over A and B, but not C. For a successful infiltration of the ACM, we must obtain control over all of its cells, otherwise the cells that are out of our control will discover us and start causing some of their trademark chaos and mischief. As you know, we’re on a tight spending leash from higher authority these days, so we need to execute this mission as efficiently as possible. Your mission is to figure out the minimum number of cells we need to infiltrate in order to succeed. This mission briefing will self-destruct in five hours. Good luck!",
        "titulo": "Infiltration",
        "entrada": "The first line of a test case contains the number n of cells the ACM has (1 ≤ n ≤ 75). Each of the next n lines contains a binary string of length n where the ith character of the jth line is 1 if cell j controls cell i, and 0 otherwise (1 ≤ i, j ≤ n). The ith character of the ith line is 0 and for i != j, either the ith character of the jth line is 1 or the jth character of the ith line is 1, but not both."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1418",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um único inteiro, a menor quantidade de trabalhadores que deve enviar uma petição de modo a fazer com que o dono da empresa receba uma petição.",
        "descricao": "Há dois anos atrás, uma nova crise mundial teve início, deixando muitas pessoas com problemas econômicos. Alguns trabalhadores de uma empresa estão tentando pedir um aumento de salário. A empresa possui uma hierarquia restrita, onde cada empregado tem exatamente um chefe, com a excessão do dono da companhia que não tem chefe. Empregados que não são chefes de nenhum outro empregado são chamados trabalhadores. O resto dos empregadoe e o dono são chamados de chefes. Para pedir aumento, um trabalhador deve enviar uma petição ao seu chefe direto. Evidentemente, cada chefe é encorajado a tentar manter seus subordinados felizes com seu salário atual, tornando o lucro da empresa o maior possível. No entanto, quando ao menos T porcento de seus subordinados diretos fazem uma petição, o chefe será pressionado e não terá escolha a não ser enviar uma petição ele mesmo ao seu superior direto. Cada chefe envia no máximo uma petição para seu próprio chefe, independente do seu número de subordinatos que o enviaram. Um chefe somente considera seus subordinados diretos (os que fizeram a petição e os que não a fizeram) para calcular o a porcentagem da pressão. Note que um chefe pode ter trabalhadores e chefes como seus subordinados diretos ao mesmo tempo, e ele pode receber petições de ambos os tipos de empregados. Cada subordinado direto, independente de seu cargo, terá peso 1 ao realizar o balanço total. Quando uma petição chega ao dono da empresa, todos os salários são aumentados. O sindicato dos trabalhadores está desesperado tentando fazer isso acontecer, então eles precisam convencer alguns trabalhadores a enviar uma petição aos seus chefes. Dados a hierarquia da empresa e o parâmetro T, você deve encontrar o menor número de trabalhadores que deve enviar uma petição de forma a fazer com que o dono da empresa aumente os salários.",
        "titulo": "Outra Crise",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é dado em exatamente duas linhas. A primeira linha contém dois inteiros N e T (1 ≤ N ≤ 105 e 1 ≤ T ≤ 100), separados por um espaço em branco. N indica o número de empregados da empresa (sem considerar o dono) e T é o parâmetro descrito acima. Cada um dos empregados é identificado por um inteiro entre 1 e N, inclusive. O dono é identificado pelo número 0. A segunda linha contém uma lista de inteiros separados por um espaço em branco. O inteiro Bi, na posição i dessa lista (começando de 1), indica o identificador do chefe direto do empregado i (0 ≤ Bi ≤ i - 1). O último caso de teste é seguido de uma linha contendo dois zeros separados por um espaço em branco."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1684",
        "saida": "Imprima Yes, se a tarefa é possível, e No caso contrário.",
        "descricao": "É hora das maratonas de corrida na Terra de Ooo novamente. Princesa Jujaba tem um mapa do reino doce, e agora ela tem que preparar as ruas para receber as competições. Sua tarefa é a seguinte: ela precisa separar as ruas do reino em circuitos disjuntos, ou seja, vários caminhos disjuntos que começam e terminam no mesmo local. Cada rua deve ser utilizada em exatamente um circuito, ou então uma grande fúria cairá sobre o reino. Ela não importa o número de circuitos gerados, contanto que exista pelo menos um, uma vez que a maratona pode ser ajustada de acordo com os recursos disponíveis. Jujuba acredita que, se qualquer tarefa é possível, ela pode fazê-lo. Assim, a pergunta é: podem ruas do reino se dividir em circuitos disjuntos?",
        "titulo": "Maratona Doce",
        "entrada": "A primeira linha contém um número T (1 ≤ T ≤ 100), indicando que se seguirão muitos casos de teste. Cada teste começa com um número, N (0 ≤ N ≤ 104), indicando o número de locais no reino, e M (0 ≤ M ≤ 105), o número de ruas. As seguintes linhas M contém dois números inteiros, a e b (0 ≤ a, b ​​≤ N-1), indicando que existe uma rua entre o local a e b. Pode haver ruas que ligam um local a si mesmo, e pode haver mais de uma rua que liga dois locais."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1889",
        "saida": "Para cada instância, imprima uma única linha contendo a área mínima para os dados da instância, arredondado para 2 casas decimais; se não for possível formar um triângulo com as larvas, imprima -1. .",
        "descricao": "A culinária tailandesa é conhecida mundialmente por tentar combinar especiarias de forma a sempre ter presente num prato os elementos doce (açúcar, frutas, pimentões), apimentado, azedo (vinagre, tamarindo, lima) e salgado (shoyu, molho de peixe). O prato mais exótico, que sempre é oferecido aos turistas, é o que contém larvas de inseto fritas. O paladar ocidental costuma rejeitar a ideia de comer larvas, mas elas são muito apreciadas na Tailândia e disputadas em festas e encontros. As crianças tailandesas costumam brincar com a comida e, em particular, adoram construir triângulos usando as larvas fritas como arestas. Marcos \"o resolvedor\" de Rubik ajuda no treinamento de alunos de sua universidade para uma famosa competição de programação de computadores. No ano que vem, a final mundial dessa competição será em Phuket, na Tailândia. De conhecimento desse costume das crianças tailandesas, Marcos teve uma ideia para um treino especial. A ideia é preparar uma grande quantidade de larvas fritas de diversos comprimentos. Cada um de seus amigos, em sequência, deve selecionar 3 delas para formar um triângulo e precisará comer uma quantidade de larvas fritas proporcional à área do triângulo formado. Marcos espera que, para comer menos larvas fritas possível, você escreva um programa para escolher as larvas que formam um triângulo de área mínima. Dessa forma, além de treinar suas habilidades de programação, você também estará treinando para enfrentar a culinária tailandesa. Caso goste dessa iguaria, você pode usar esse programa para ajudar seus amigos, fazendo com que mais larvas fritas sobrem na sua vez.",
        "titulo": "Treinando com as Larvas de Phuket",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de um inteiro N (1 ≤ N ≤ 2*103), representando o número de larvas, seguido de N números reais, representando seus comprimentos. O comprimento de cada larva é um número real entre 1 e 500."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1947",
        "saida": "Para cada caso de teste imprima uma linha contendo um inteiro, indicando a menor distância possível de ser percorrida se o taxista iniciar no ponto 1, atender a todos os pedidos (um por vez), e voltar ao ponto 1.",
        "descricao": "Um evento importante acontecerá hoje na sua cidade, e com isso há muitos turistas perdidos. Para que todos consigam chegar a seus destinos nessa cidade desconhecida eles costumam chamar táxis. Você foi contratado para ajudar os taxistas, que estão sobrecarregados com tantas chamadas. A cidade pode ser representada por N pontos de referências, e M ruas que interligam estes pontos. Cada rua tem um determinado comprimento, e sempre haverá um caminho entre quaisquer dois pontos distintos da cidade. O objetivo do taxista o qual você vai ajudar é atender a K pedidos. Cada pedido consiste de dois pontos no mapa, O e D (origem e destino), sendo que o turista atualmente está no ponto O e deseja chegar no ponto D. O taxista está inicialmente no ponto 1, pretende atender a apenas um pedido por vez (na ordem em que desejar), e após o último pedido deve voltar ao ponto 1. Por exemplo, considere uma cidade com N = 5 pontos de referência e K = 2 turistas, onde o primeiro turista deseja ir do ponto 4 ao ponto 3, e o segundo deseja ir do ponto 2 ao ponto 4. O taxista então tem duas opções de trajeto: 1 -> 4 -> 3 -> 2 -> 4 -> 1; ou 1 -> 2 -> 4 -> 3 -> 1. Note que A -> B representa um caminho entre os pontos A e B, contendo uma ou mais ruas. Confuso com tantas opções de trajeto e querendo economizar combustível, o taxista pediu que você calculasse qual trajeto teria a menor distância percorrida.",
        "titulo": "Rota do Taxista",
        "entrada": "Cada caso de teste inicia com três inteiros N, M e K (2 ≤ N ≤ 104, N-1 ≤ M ≤ 105, 1 ≤ K ≤ 15). Em seguida haverá M linhas, cada uma com três inteiros A, B e C, indicando que há uma rua que interliga os pontos A e B, a qual pode ser percorrida em ambas as direções, de comprimento C (1 ≤ A, B ≤ N, 1 ≤ C ≤ 100, A B). Em seguida haverá K linhas, cada uma com dois inteiros O e D, indicando que há um turista no ponto O que deseja chegar no ponto D (1 ≤ O, D ≤ N, O D)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1779",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #X: Y\", onde X é o número do caso atual, iniciando em 1, e Y é o tamanho da maior sequência de provas que contém a maior média obtida por Guga.",
        "descricao": "Guga fez N provas em toda sua vida acadêmica. Agora, perto de se formar, ele quer saber qual foi o maior período de tempo contíguo em que ele possuiu a maior média aritmética.",
        "titulo": "Estimando a Média",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso começa com uma linha com um número N (1 ≤ N ≤ 10⁵), o número de provas que Guga realizou em toda sua vida acadêmica. Em seguida, há uma linha com N inteiros Pi (0 ≤ Pi ≤ 10000), o i-ésimo inteiro representa a nota da i-ésima prova."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1032",
        "saida": "A saída consistirá em linhas separadas relativos à posição da pessoa que a vida será salva.",
        "descricao": "O problema de Josephus é notoriamente conhecido. Para aqueles que não estão familiarizados com o problema, entre n pessoas numeradas 1,2 ... n, de pé em círculo cada um deve ser executado e só a vida do último que sobrar será preservada. Josephus foi esperto o suficiente para escolher a posição da última pessoa restante, poupando a sua vida. Apesar de muitos bons programadores poderem se salvar desde que Josephus espalhou essa informação (o lugar onde ficar para não ser executado), o primo de Josephus introduziu uma nova variante do jogo maligno. Este personagem insano é conhecido por suas idéias bárbaras e desejos para limpar o mundo de programadores. Tivemos de infiltrar alguns agentes os da ACM, a fim de conhecer o processo neste novo jogo mortal. A fim de salvar-se de esta prática mal, você deve desenvolver uma ferramenta capaz de prever qual será a pessoa salva. O processo destrutivo As pessoas são eliminados em uma ordem muito peculiar: m é uma variável dinâmica, que cada vez tem um valor diferente correspondente a sucessão dos números primos de (2,3,5,7 ...). Então, para matar a pessoa i, o primo de Josephus conta até o próximo m primo.",
        "titulo": "O Primo de Josephus",
        "entrada": "Consiste em linhas separadas, contendo n [1 .. 3501], e termina com um 0."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1441",
        "saida": "Para cada caso de teste, imprima uma linha com um inteiro representando o maior número na Sequência de Granizo que inicia com o número da entrada.",
        "descricao": "Considere a sequência formada iniciando-se por um inteiro positivo h0 e iterando com n = 1, 2, . . . com a seguinte definição, até que hn = 1: hn​ = { ½ × hn-1 se hn-1 é par; hn​ = { 3 × hn-1 + 1 se hn-1 é ímpar. Por exemplo, se iniciarmos com h0 = 5 a seguinte sequência é gerada: 5, 16, 8, 4, 2, 1. Se começarmos com h0 = 11, a sequência gerada é 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1. Como você pode ver nos exemplos, os números aumentam e diminuem, mas eventualmente terminam em 1 (isto é verdade para pelo menos para todos os números que já foram testados). Estas sequências são chamadas de Sequências de Granizo porque são similares à formação do granizo, pois são carregados para cima pelos ventos várias vezes, até que finalmente caem no chão. Neste problema, dado um inteiro positivo, sua tarefa é computar o maior número na Sequência de Granizo que inicie com este o número dado.",
        "titulo": "Sequências de Granizo",
        "entrada": "Cada caso de teste é descrito por uma única linha. A linha contém um inteiro H que representa o valor inicial para construir a sequência (1 ≤ H ≤ 500). O último caso de teste é composto por uma linha contendo um único zero."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1495",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro representando o número máximo total de pontos que o seu time pode obter após comprar os gols.",
        "descricao": "O seu time de futebol favorito está jogando em um campeonato para caridade, que é parte de um esforço mundial para levantar fundos para ajudar crianças com dificuldades. Como em um campeonato normal, três pontos são dados ao time que vence um partida, e nenhum para o time que perdeu. Se o jogo termina em empate, cada time recebe um ponto. O seu time jogou N partidas durante a primeira fase do campeonato, que já terminou. Somente alguns times, os com mais pontos acumulados, irão avançar para a segunda fase do campeonato. Porém como o objetivo principal do campeonato é arrecadar dinheiro, antes de definir os times que passaram para a segunda fase, cada time pode comprar gols adicionais. Estes gols contam como gols marcados, e podem ser usados para alterar o resultado de qualquer partida que o time jogou. O orçamento do seu time é suficiente para comprar até G gols. Você pode informar o número máximo de pontos que o seu time pode obter após comprar os gols, supondo que os outros times não irão comprar nenhum gol?",
        "titulo": "Futebol",
        "entrada": "A entrada contém diversos casos de teste e termina com EOF. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 105) e G (0 ≤ G ≤ 106) representando respectivamente o número de partidas que o seu time jogou e o número de gols que o seu time pode comprar. Cada uma das próximas N linhas descrevem o resutado de uma partida com dois inteiros S e R (0 ≤ S, R, ≤ 100), indicando respectivamente os gols que o seu time marcou e sofreu na partida antes da compra de gols."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2005",
        "saida": "Para cada caso de teste, imprima a quantidade de ratos saciados.",
        "descricao": "Fracil tem uma criação de N ratos e possui M alimentos para alimenta-los. Cada rato possui um nível de fome. Cada alimento possui um nível de sustento. Quando um rato com nível de fome f é alimentado com um alimento com nível sustento maior ou igual a f, o rato fica saciado e seu nível de fome é zerado. Quando um rato com nível de fome f é alimentado com um alimento com nível sustento menor que f, o novo nível de fome do rato é f-s. Para alimentar seus ratos, Fracil segue uma estratégia: Os alimentos serão fornecidos aos ratos de forma sequencial, primeiro é fornecido o alimento com índice 1, depois o de índice 2 e assim sucessivamente. Fracil tem preferência em alimentar os ratos que tenham o maior nível de fome e que possam ser saciados com a comida da vez. Caso não tenha nem um rato que possa ser saciado, Fracil tem preferência em alimentar os ratos com maior nível de fome. Cada alimento só poderá ser fornecido uma vez e sem divisão (não se pode fornecer partes de um alimento para ratos diferentes). Fracil quer saber quantos ratos vão estar saciados quando acabarem os alimentos.",
        "titulo": "Fracil Bolado",
        "entrada": "A entrada consiste em vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 1000), representando a quantidade de ratos e a quantidade de alimentos. A segunda linha de cada caso de teste contém N inteiros, representando os níveis de fome dos ratos (1 ≤ fi ≤ 1000). A terceira linha de cada caso de teste contém M inteiros, representando os níveis de sustento dos alimentos (1 ≤ si ≤ 1000). A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1719",
        "saida": "Para cada caso de teste, dê como saída o valor final do acumulador em representação binária, novamente: bits mais significativos primeiro.",
        "descricao": "Você escreverá um interpretador para um computador simples. Este computador usa um processador com um pequeno número de instruções de máquina. Além disso, é equipado com 32 bytes de memória, um acumulador de 8 bits (accu) e um contador de programa de 5 bits (pc). A memória contém dados, bem como código, que é a arquitetura habitual de von Neumann. O contador de programa contém o endereço da instrução a ser executada em seguida. Cada instrução tem um comprimento de 1 byte - os 3 bits mais significativos (bits mais a esquerda) definem o tipo de instrução e os 5 bits menos significativos definem um operando opcional que é sempre um endereço de memória (xxxxx). Para instruções que não precisam de um operando, os 5 bits menos significativos não têm significado (-----). Aqui está uma lista de instruções da máquina e a sua semântica: 000xxxxx   STA x   armazena o valor do acumulador no byte x da memória 001xxxxx   LDA x   carrega o valor do byte x da memória para o acumulador 010xxxxx   BEQ x   se o valor do acumulador for 0, carregue o valor x para o contador de programa 011-----   NOP     nenhuma operação 100-----   DEC     subtraia 1 do acumulador 101-----   INC     adicione 1 ao acumulador 110xxxxx   JMP x   carregue o valor de x para o contador de programa 111-----   HLT     finaliza o programa No início, o acumulador e o contador do programa são definidos como 0. Depois de buscar uma instrução, mas antes de sua execução, o contador de programa é incrementado. Você pode assumir que os programas serão encerrados.",
        "titulo": "Computadores Simples",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste especifica o conteúdo da memória antes da execução do programa. Byte 0 a 31 são dadas em linhas separadas em representação binária. Um byte é indicado por seus bits mais e menos significativos. A entrada é terminada por EOF."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1901",
        "saida": "Imprima uma linha contendo a quantidade de espécies diferentes que Bino coletou.",
        "descricao": "As florestas do planeta Binox possuem várias espécies raras de borboletas. Bino também é um caçador de borboletas, e quer coletar o máximo de espécies diferentes de borboletas. A floresta de Binox é representada por um grid quadrado de tamanho NxN, e cada célula 1x1 do grid pode conter uma borboleta. A imagem a seguir representa o primeiro exemplo de entrada. As espécies coletadas foram: 1, 2, 3, 4 e 8. Sua tarefa é determinar a quantidade de espécies de borboletas que Bino conseguirá coletar, conhecendo o mapa da floresta e todos os locais que Bino procurou por borboletas. Por algum motivo desconhecido, Bino sempre procura em 2*N posições da floresta.",
        "titulo": "Borboletas",
        "entrada": "A entrada é contituida por multiplas linhas. A primeira linha contém um inteiro N (0 < N ≤ 200) representando o tamanho da floresta. As próximas N linhas contém N inteiros Kij (0 < Kij ≤ 1000) cada, representando qual espécie de borboleta presente em cada célula. As próximas N*2 linhas contém 2 inteiros cada, representando as células visitadas por Bino."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1943",
        "saida": "Para cada caso de teste imprima uma linha contendo a frase “Top N”, e substitua a letra N pelo número da menor categoria que a colocação K pertence.",
        "descricao": "Recentemente aconteceu a fase regional da Maratona de Programação da SBC, onde mais de 600 times participaram em mais de 40 sedes diferentes pelo Brasil. Seu amigo participou da competição, e quando questionado sobre sua colocação lhe disse: “Ficamos no top 10”. Você ficou feliz pelo seu amigo, mas não pode deixar de ficar curioso sobre qual foi sua real colocação. “Top 10” poderia indicar qualquer posição entre primeiro e décimo colocado, porém se ele estivesse em primeiro provavelmente teria dito “Top 1”, se estivesse em segundo ou terceiro provavelmente teria dito “Top 3”, e se estivesse em quarto ou quinto provavelmente teria dito “Top 5”. Logo, sua real colocação foi entre sexto e décimo, pois as pessoas geralmente se colocam na menor categoria a qual pertencem. Você reuniu então todas as categorias de colocações que as pessoas mais usam: 1, 3, 5, 10, 25, 50 e 100. Dada uma colocação K, diga o número da menor categoria que esta colocação pertence.",
        "titulo": "Top N",
        "entrada": "Cada caso de teste contém um inteiro K, representando uma colocação (1 ≤ K ≤ 100)."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1361",
        "saida": "Para cada caso, a saída será constituída por uma linha com o número de andares do edifício mais alto com as condições mencionadas.",
        "descricao": "Um arquiteto quer projetar um edifício muito alto. A construção será composta por alguns andares, e cada andar terá um certo tamanho. O tamanho de um pavimento tem que ser maior do que o tamanho do piso imediatamente acima dele. Além disso, o designer (que é um fã de um famoso time de futebol espanhol) quer pintar o prédio em azul e vermelho, cada andar uma cor, e de tal forma que as cores dos dois andares consecutivos sejam diferentes. Para projetar o edifício o arquiteto tem n pisos disponíveis, com seus tamanhos e cores associadas. Todos os andares estão disponíveis em diferentes tamanhos. O arquiteto quer projetar o edifício mais alto possível, com estas restrições, usando os andares disponíveis.",
        "titulo": "Desenhando o Edifício",
        "entrada": "O arquivo de entrada é constituído por uma primeira linha com p número de casos de teste para resolver. A primeira linha de cada caso de teste contém o número de pisos disponíveis. Então, o tamanho e a cor de cada andar aparece numa linha. Cada andar é representado por um número inteiro entre -999999 e 999999. Não há andar com o tamanho 0. Os números negativos representam pisos vermelhos e números positivos pisos azuis. O tamanho do andar é o valor absoluto do número. Não existem dois pisos, com o mesmo tamanho. O número máximo de andares para um problema é 500000."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1728",
        "saida": "Para cada caso de teste gere uma linha contendo a palavra \"True\" ou a palavra \"False\", se a equação é verdadeira ou falsa, respectivamente, na interpretação de Turing, ou seja, com os números escritos de trás para frente.",
        "descricao": "A briga continua para decidir se é melhor armazenar números começando pelos seus dígitos mais significativos ou pelos seus dígitos menos significativos. Às vezes ela é chamada de \"Endian War\". Essa batalha teve início há muito tempo atrás, nos primórdios da Ciência da Computação. Joe Stoy, em seu (a propósito, excelente) livro \"Denotational Semantics\" (\"Semântica Denotacional\"), conta a história a seguir: \"A decisão sobre para que lado escrevermos os dígitos é, claro, matematicamente trivial. Entretanto, um dos primeiros computadores britânicos tinha números escritos da direita para a esquerda (porque o feixe de luz de um tubo de osciloscópio vai da direita para a esquerda, mas na lógica serial trata-se primeiro dos dígitos menos significativos). Turing costumava confundir seu público em palestras públicas quando, por acaso, ele entrava neste modo mesmo para aritmética decimal, e escrevia coisas como 73+42=16. A versão seguinte da máquina foi tornada mais convencional simplesmente invertendo os fios da deflexão no eixo X: isso, porém, preocupou os engenheiros, já que suas formas de onda ficaram todas ao contrário. Esse problema, por sua vez, foi resolvido criando uma pequena janela para que os engenheiros (que tendiam a ficar atrás do computador mesmo) pudessem ver a tela do osciloscópio de trás. [C.Strachey - comunicação privada.]\" Você vai fazer o papel do público e julgar se as equações de Turing são verdadeiras.",
        "titulo": "Difícil de Acreditar, Mas é Verdade!",
        "entrada": "A entrada contém vários casos de teste. Cada caso especifica em uma única linha uma equação de Turing. Uma equação de Turing tem a forma \"a+b=c\", onde a, b, c são números compostos de dígitos 0,...,9. Cada número consiste de, no máximo, 7 dígitos. Isso inclui possíveis zeros à esquerda ou à direita. A equação \"0+0=0\" terminará a entrada e deve ser processada também. As equações não contêm espaços."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1876",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único inteiro N, que é o tamanho do maior filete de rabiola formado por este cipó.",
        "descricao": "Todo ano, os moradores da cidade de Pipacicaba organizam o campeonato municipal de pipas. Neste lugar, eles utilizam um tipo especial de cipó para usar como rabiola da pipa. Este cipó é formado por uma fita única, formado por folhas normais e folhas aderentes. Nos exemplos, as folhas normais serão representadas por uma letra ‘o’ e as folhas aderentes, formadas por uma letra ‘x’. Para aproveitar as diversas cores dos cipós, cada pipa do campeonato pode apenas colocar uma única fita. Cada folha aderente deverá ser colada em um ponto único na base da pipa. Com isto, filetes de folhas normais são formados. Os dois filetes mais externos ficam, normalmente, sem dobras. Os filetes internos, sempre formados por uma quantidade par de folhas, são dobrados: Abaixo, temos um exemplo de cipó, e sua colocação na pipa: Cipó: ooxooooooxo Após colar as folhas aderentes, a rabiola ficará assim: Os filetes aparecem separados na imagem para melhor visualização. Na verdade, os filetes ficam sobrepostos. Sua missão é fazer um algoritmo que, dado um cipó, informe o tamanho do maior filete de rabiola feito com o mesmo.",
        "titulo": "Rabiola",
        "entrada": "A entrada possui múltiplos casos de teste. Cada caso de teste é dado em uma linha, que contém uma única palavra P composta apenas pelas letras ‘o’ ou ‘x’, representando um cipó. Essa palavra possui no máximo 100 caracteres. A entrada termina com o fim do arquivo."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2134",
        "saida": "Para cada instância, você deverá imprimir um identificador \"Instancia K\", onde K é o número da instância atual. Na linha seguinte imprima o nome do infeliz reprovado. Após cada instância imprima uma linha em branco.",
        "descricao": "Prof. Wallywow da Universidade da Columbia Britânica está muito preocupado com a queda do nível de atenção de seus estudantes. Ele já tentou várias técnicas mundialmente conhecidas para incentivar os alunos a prestar atenção nas suas aulas e fazer as tarefas que ele passa para a turma: deu nota para os alunos mais participativos, ofereceu chocolates aos alunos, levou seu karaokê e cantava nas aulas etc. Como tais medidas não levaram a uma melhora no comparecimento às aulas (a ideia do karaokê, inclusive, mostrou-se bastante infeliz. . . na segunda aula com karaokê a turma reduziu-se a um aluno – que tinha problemas auditivos) ele teve uma brilhante ideia: faria uma competição entre os alunos. Prof. Wallywow passou um conjunto de problemas aos alunos, e deu um mês para que eles os resolvessem. No final do mês os alunos mandaram o número de problemas resolvidos corretamente. A promessa do brilhante didata era reprovar sumariamente o último colocado da competição. Os alunos seriam ordenados conforme o número de problemas resolvidos, com empates resolvidos de acordo com a ordem alfabética dos nomes (não há homônimos na turma). Isso fez com que alunos com nomes iniciados nas últimas letras do alfabeto se esforçassem muito nas tarefas, e não compartilhassem suas soluções com colegas (especialmente aqueles cujos nomes começassem com letras anteriores). Sua tarefa neste problema é escrever um programa que lê os resultados dos alunos do Prof. Wallywow e imprime o nome do infeliz reprovado. Qualquer semelhança entre o Prof. Wallywow e o Prof. Carlinhos é mera coincidência.",
        "titulo": "Quem Vai Ser Reprovado?",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em um inteiro N (1 ≤ N ≤ 100) indicando o número de alunos na competição. Cada uma das N linhas seguintes contém o nome do aluno e o número de problemas resolvidos por ele. O nome consiste em uma sequência de letras [a-z] com no máximo 20 letras e cada time resolve entre 0 à 10 problemas. A entrada termina com final de arquivo."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2208",
        "saida": "For each test case, display its case number followed by the number of occurrences of the bit pattern p in F(n). Occurrences may overlap. The number of occurrences will be less than 263 .",
        "descricao": "The Fibonacci word sequence of bit strings is defined as: $$F(n) =\\begin{cases} & \\text 0 \\\\ & \\text 1 \\\\ & \\text F(n-1)+F(n-2)\\\\ \\end{cases} \\begin{matrix} \\mathbf{if} n = 0 \\\\ \\mathbf{if} n = 1\\\\ \\mathbf{if} n \\geqslant 2 \\end{matrix}$$ Here + denotes concatenation of strings. The first few elements are: Given a bit pattern p and a number n, how often does p occur in F(n)?",
        "titulo": "Fibonacci Words",
        "entrada": "The first line of each test case contains the integer n (0 ≤ n ≤ 100). The second line contains the bit pattern p. The pattern p is nonempty and has a length of at most 100 000 characters."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1031",
        "saida": "A saída consistirá de uma série de linhas, uma linha para cada linha de entrada. Cada linha consistirá de um m de acordo com o esquema acima apresentado.",
        "descricao": "Durante uma crise de energia na Nova Zelândia no inverno passado (causada por uma escassez de chuva e, consequentemente, por causa dos níveis baixos nas barragens hidrográficas), um esquema de contingência foi desenvolvido para desligar a energia para as áreas do país de forma sistemática, de uma forma totalmente justa. O país foi dividido em N regiões (Auckland seria a região número 1 e Wellington a número 13). Um número, m, seria escolhido randomicamente e a energia deveria ser desligada primeiro na região 1 (claramente o ponto de início mais justo) e então em cada m região após esta, indo de uma a outra região e ignorando as regiões já desligadas. Por exemplo, se N = 17 e m = 5, a energia deverá ser desligada em todas as regiões seguindo a seguinte ordem: 1,6,11,16,5,12,2,9,17,10,4,15,14,3,8,13,7. O problema é que, claramente seria mais justo desligar a região de Wellington por último (Isso porque é onde a sede da empresa se encontra). Portanto, para um dado N (regiões), o número aleatório m (salto) precisa ser cuidadosamente escolhido de forma que a região 13 seja a última região a ser escolhida. Escreva um programa que leia o número de regiões e determine o menor número m que assegure que Wellington (região 13) possa continuar funcionando enquanto o resto do país esteja desligado.",
        "titulo": "Crise de Energia",
        "entrada": "A entrada consistirá de uma série de linhas, cada uma contendo o número de regiões N (13 ≤ N ≤ 100 ). O fim da entrada é indicado por uma linha consistindo de um valor zero (0)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1121",
        "saida": "Para cada rali descrito na entrada seu programa deve imprimir uma única linha contendo um único inteiro, indicando o número de figurinhas que o robô colecionou durante o rali.",
        "descricao": "Um dos esportes favoritos na Robolândia é o Rali dos Robôs. Este rali é praticado em uma arena retangular gigante de N linhas por M colunas de células quadradas. Algumas das células estão vazias, algumas contêm figurinhas da Copa (muito apreciadas pelas inteligências artificiais da Robolândia) e algumas são ocupadas por pilastras que sustentam o teto da arena. Em seu percurso os robôs podem ocupar qualquer célula da arena, exceto as que contém pilastras, que bloqueiam o seu movimento. O percurso do robô na arena durante o rali é determinado por uma sequência de instruções. Cada instrução é representada por um dos seguintes caracteres: ‘D’, ‘E’ e ‘F’, significando, respectivamente, “gire 90 graus para a direita”, “gire 90 graus para a esquerda” e “ande uma célula para a frente”. O robô começa o rali em uma posição inicial na arena e segue fielmente a sequência de instruções dada (afinal, eles são robôs!). Sempre que o robô ocupa uma célula que contém uma figurinha da Copa ele a coleta. As figurinhas da Copa não são repostas, ou seja, cada figurinha pode ser coletada uma unica vez. Quando um robô tenta andar para uma célula onde existe uma pilastra ele patina, permanecendo na célula onde estava, com a mesma orientação. O mesmo também acontece quando um robô tenta sair da arena. Dados o mapa da arena, descrevendo a posição de pilastras e figurinhas, e a sequência de instruções de um robô, você deve escrever um programa para determinar o número de figurinhas coletadas pelo robô.",
        "titulo": "Robô Colecionador",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três números inteiros N, M e S (1 ≤ N, M ≤ 100, 1 ≤ S ≤ 5 × 104 ), separados por espaços em branco, indicando respectivamente o número de linhas e o número de colunas da arena e o número de instruções para o robô. Cada uma das N linhas seguintes da entrada descreve uma linha de células da arena e contém uma cadeia com M caracteres. A primeira linha que aparece na descrição da arena é a que está mais ao Norte; a primeira coluna que aparece na descrição de uma linha de células da arena é a que está mais a Oeste. Cada célula da arena pode conter um dos seguintes caracteres: ‘.’ — célula normal; ‘*’ — célula que contém uma figurinha da Copa; ‘#’ — célula que contém uma pilastra; ‘N’, ‘S’, ‘L’, ‘O’ — célula onde o robô inicia o percurso (única na arena). A letra representa a orientação inicial do robô (Norte, Sul, Leste e Oeste, respectivamente). A ultima linha da entrada contém uma sequência de S caracteres dentre ‘D’, ‘E’ e ‘F’, representando as instruções do robô. O último caso de teste é seguido por uma linha que contém apenas três números zero separados por um espaço em branco."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1368",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha contendo um único inteiro, correspondente ao numero de tipos de cubos no conjunto dado.",
        "descricao": "Crianças adoram brincar com pequenos cubos. Elas passam horas criando ‘casas’, ‘prédios’, etc. O irmãozinho de Tomaz acabou de ganhar um conjunto de blocos coloridos no seu aniversário. Cada face de cada cubo é de uma cor. Como Tomaz é uma criança muito analítica, ele decidiu descobrir quantos “tipos” diferentes de cubos o seu irmãozinho ganhou. Você pode ajuda-lo? Dois cubos são considerados do mesmo tipo se for possível rotacionar um deles de forma que as cores nas faces respectivas dos dois blocos sejam iguais.",
        "titulo": "Cubos Coloridos",
        "entrada": "A entrada contém vários casos de teste. A primeira linha do caso de teste contém um inteiro N especificando o número de cubos no conjunto (1 ≤ N ≤ 1000). As próximas 3 x N linhas descrevem os cubos do conjunto. Na descrição as cores serão identificadas pelos números de 0 a 9. A descrição de cada cubo será dada em três linhas mostrando as cores das seis faces do cubo “aberto”, no formato dado no exemplo abaixo. No exemplo abaixo, as faces do cubo tem cores de 1 a 6, a face com cor 1 está no lado oposto da face com a cor 3, e a face com cor 2 é vizinha das faces 1, 3, 4 e 6, e está no lado oposto da face com cor 5. 1 2 4 5 6 3 O final da entrada é indicado por N = 0."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1906",
        "saida": "A única linha da saída deve consistir de apenas um único inteiro, representando o número de possibilidades para a nova senha do Prof. Antônio Neri, considerando que o teclado contém uma tecla para cada inteiro de 1 a N e que a nova senha é uma sequência de K números que aparecem consecutivamente numa sequência de Collatz.",
        "descricao": "Quando o Prof. Antônio Neri, mais jovem, conheceu a Conjectura de Collatz, ficou muito fascinado. Caso você ainda não conheça a Conjectura de Collatz, ela enuncia que, para qualquer inteiro positivo X, a sequência de Collatz para X eventualmente atinge 1. A propósito, a sequência de Collatz para um inteiro positivo X é definida como a sequência infinita a0, a1, a2… tal que a0 = X e, para todo i > 0, ai = ai-1 / 2 se ai-1 é par ou ai = 3 × ai-1 + 1 se ai-1 é ímpar. Por exemplo, para X = 7, os primeiros 20 termos da sequência de Collatz são: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1, 4, 2, 1… A Conjectura de Collatz ainda não foi provada, apesar de existirem vários matemáticos brilhantes neste mundo, como o Prof. Antônio Neri. Ele continua tão fascinado pelo assunto que, noutro dia, ao olhar para o teclado do sistema de alarme da sua casa, o qual contém uma tecla para cada inteiro de 1 a N, ele resolveu trocar sua senha para que a nova senha seja uma sequência de K números que apareçam consecutivamente numa sequência de Collatz. Por exemplo, se N = 20 e K = 5, há 11 possibilidades para a nova senha do Prof. Antônio Neri: 1, 4, 2, 1, 4 2, 1, 4, 2, 1 3, 10, 5, 16, 8 4, 2, 1, 4, 2 5, 16, 8, 4, 2 6, 3, 10, 5, 16 8, 4, 2, 1, 4 10, 5, 16, 8, 4 12, 6, 3, 10, 5 16, 8, 4, 2, 1 20, 10, 5, 16, 8",
        "titulo": "Senhas de Collatz",
        "entrada": "A única linha da entrada consiste de dois inteiros positivos N e K (N, K ≤ 107)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1887",
        "saida": "Para cada instância, imprima Q linhas. A i-ésima linha desse grupo de Q linhas deve conter um único inteiro que representa o custo mínimo de manutenção do sistema após a adição da i-ésima via.",
        "descricao": "A via férrea Kunming-Cingapura é um conjunto de vias (já construídas e em plano de construção) que têm como objetivo ligar diferentes cidades da Ásia. Esse projeto começou em 1900 com a proposta de construir uma via férrea que ligasse a cidade de Kunming (China) a Cingapura, por parte do império britânico. Depois, em 1918, essa via férrea foi conectada ao conjunto de vias de Tailândia mediante uma via férrea que ligava Bangkok e Cingapura. No ano 2000, a ASEAN (Associação de Nações do Sudeste Asiático) propôs completar esse sistema de vias férreas. O término desse projeto está previsto para o ano 2020. Devido à importância desse sistema para a integração do sudeste asiático, as empreiteiras responsáveis têm contactado você para calcular o custo mínimo para manter este sistema ao longo do tempo. Cada via (já construída e por construir) tem um custo de manutenção. O que se deseja é, dadas as N cidades que o sistema Kumming-Cingapura liga, as M vias iniciais do sistema e as Q vias que serão adicionadas ao longo do tempo, calcular o custo mínimo para manter o sistema conectado após construir cada uma dessas Q vias. Consideramos que o sistema está conectado se, para cada par de cidades existe um conjunto de vias que as ligam.",
        "titulo": "As Vias Férreas Kunming-Cingapura",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por diversas linhas. A primeira linha de cada instância contém três inteiros, N, M e Q (descritos no enunciado, 1 ≤ N, M, Q ≤ 3*104) separados por um espaço. As seguintes M linhas descrevem as vias iniciais do sistema. Cada via é representada por três inteiros a, b e c (1 ≤ a, b ≤ N e 1 ≤ c ≤ 3*104), onde a e b representam as cidades que são ligadas por essa via, e c é o custo de manutenção. As Q linhas seguintes representam as vias adicionadas ao sistema. A i-ésima linha desse grupo de Q linhas descreve a i-ésima via adicionada ao sistema através de três inteiros, como no caso anterior."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1440",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha contendo um único inteiro, o número máximo de clientes que poderiam ter estado dentro dos refeitórios a qualquer momento.",
        "descricao": "A administração da Universidade planeja construir uma nova praça de alimentação para substituir os vários pequenos e inadequados refeitórios espalhados pelo campus. Para estimar o número de lugares necessários na nova praça de alimentação, foi realizado um experimento para medir o número máximo de clientes dentro dos refeitórios a qualquer instante. Eles contrataram vários estudantes como porteiros, e os posicionaram em cada entrada e saída de todos os refeitórios. A tarefa dos porteiros era anotar em pequenos cartões a hora que cada cliente entrou ou saiu do refeitório (um cartão para cada evento). Em cada carta, eles escreveram a hora, no formato HH:MM:SS, e o evento associado ('E' para entrada, 'X' para saída). O experimento teve início na manhã, antes do café-da-manhã, e terminou à noite, após do jantar. Os porteiros tinham seus relógios sincronizados, e os refeitórios estavam vazios tanto antes quanto depois do experimento (ou seja, não havia nenhum cliente antes do café-da-manhã e nenhum cliente permaneceu depois do jantar). Os porteiros escreveram exatamente um cartão para cada cliente que entrou e para cada cliente que saiu. Após o experimento, os cartões foram coletadas e enviadas à administração para serem processadas. A tarefa, no entanto, não foi tão fácil como planejada, pois dois problemas ocorreram. Primeiramente, os cartões foram amontoados de forma aleatória e portanto necessitavam ser ordenados; isso é bastante fácil mas demorado para ser feito à mão. Mas o pior é que, apesar dos cartões possuirem as horas corretas, alguns porteiros esqueceram de escrever a letra correspondente ao evento. A administração da Universidade decidiu que necessitava da ajuda de um expert! Dado um conjunto de cartões com horas e eventos (o evento pode estar faltando), escreva um programa que determine o número máximo de clientes que poderiam ter estado dentro dos refeitórios a qualquer momento.",
        "titulo": "Praça de Alimentação",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de cartões coletados no experimento (2 ≤ N ≤ 64800). Cada uma das próximas N linhas contém a informação escrita em um cartão, que consiste da especificação da hora, seguida por um espaço em branco, seguida pela especificação do evento. A especificação da hora é dada no formato HH:MM:SS, onde HH representa horas (06 ≤ HH ≤ 23), MM representa minutos (00 ≤ MM ≤ 59) e SS representa segundos (00 ≤ SS ≤ 59). Em cada caso de teste, nenhum par de cartões representa o mesmo instante de tempo. A especificação de evento é um único caractere: 'E' para entrada, 'X' para saída e '?' para incerto. Informações podem estar faltando, mas as informações dadas sempre estão corretas (ou seja, o instante de tempo anotado no cartão é válido). Além disso, se um cartão descreve uma entrada, então um cliente realmente entrou no refeitório naquele momento; se um cartão descreve uma saída, então um cliente realmente saiu do refeitório naquele momento; se um cartão descreve um evento incerto, então um cliente realmente entrou ou saiu de um refeitório naquele momento. O último caso de teste é seguido de uma linha contendo um único zero."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2175",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma única linha, contendo o nome do competidor vencedor, ou seja, o mais rápido. Caso haja empate e não for possível determinar um único vencedor, deverá imprimir a palavra “Empate”, sem aspas.",
        "descricao": "Otavio, Bruno e Ian são amigos de infância, apaixonados por desafios e esportes aquáticos. Em época de olimpíadas eles desafiam uns aos outros, simulando algumas competições, como a natação. O problema é que na natação, por exemplo, eles treinam bastante juntos e algumas vezes a diferença de tempo entre eles é muito curta, devido a isso, na maioria dos casos eles ficam horas e horas discutindo quem venceu. Agora eles resolveram investir no desenvolvimento de um equipamento eletrônico a ser utilizado especificamente na natação, que identifica o tempo que cada um nadou e exibe quem foi o mais rápido. Você faz parte da equipe que desenvolverá o equipamento e sua tarefa no projeto é criar um programa para receber o tempo dos 3 amigos e informar quem foi o vencedor.",
        "titulo": "Qual o Mais Rápido?",
        "entrada": "Cada caso de teste consiste em uma única linha contendo três números, separados por um espaço em branco, O (0 ≤ O ≤ 100), B (0 ≤ B ≤ 100) e I (0 ≤ I ≤ 100), representando respectivamente os tempos em segundos de Otavio, Bruno e Ian. Os tempos terão no máximo 3 casas decimais."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1937",
        "saida": "Seu programa deve produzir uma única linha, contendo um único número inteiro, a resposta do problema. Como essa resposta pode ser muito grande, imprima-a módulo 109 + 7.",
        "descricao": "Oa é um dos mundos mais antigos do universo DC, é lá que habitam os guardiões do universo. Eles administram a tropa dos lanternas verdes, uma das maiores forças do universo! Todos sabem que os lanternas verdes sabem voar devido ao poder do anel, porém nem todos os habitantes de Oa fazem parte da tropa. Para esses habitantes está difícil se locomover entre as cidades, pois não há estradas! Os guardiões desejam conectar as cidades de Oa construindo algumas estradas. Existem N cidades em Oa, e eles desejam construir N−1 estradas de duas mãos, de tal forma que seja possível chegar de uma cidade até qualquer outra, direta ou indiretamente. Os guardiões também não desejam privilegiar demais nenhuma cidade, por isso eles estabeleceram que nenhuma cidade pode ter mais de K estradas. Por exemplo, se temos três cidades e K vale 2, temos as três opções: Os guardiões, porém, são muito curiosos, e perguntaram aos lanternas verdes se eles eram capazes de dizer de quantas formas é possível construir N−1 estradas obedecendo estas restrições. Sua tarefa, como membro da tropa dos lanternas verdes é, dados N e K, satisfazer a curiosidade dos guardiões.",
        "titulo": "Guardiões Curiosos",
        "entrada": "A entrada consiste de uma única linha que contém dois números inteiros N (1 ≤ N ≤ 102) e K (1 ≤ K ≤ N)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1832",
        "saida": "Para cada linha da entrada a saída deve ser a mensagem decodificada para o padrão ASCII, seguida de uma quebra de linha.",
        "descricao": "O EBCDIC (Extended Binary Coded Decimal Interchange Code) é um esquema de codificação de caracteres de 8 bits desenvolvido pela IBM nos anos 60. O EBCDIC tem origem nos esquemas de codificação dos cartões perfurados, e era utilizado nos mainframes da empresa. Apesar de utilizar um intervalo maior de codificação, o esquema é menos amigável ao programador do que o esquema ASCII de 7 bits, uma vez que as letras do alfabeto não ficam em posições contíguas. A tabela a seguir apresenta a codificação EBCDIC. Células em branco representam valores que não estão associados a um caractere em particular, e dois ou mais caracteres maiúsculos indicam caracteres não imprimíveis. O caractere BLANK é o espaço em branco. Escreva um programa que receba um texto em codificação EBCDIC e o traduza para a codificação ASCII.",
        "titulo": "EBCDIC",
        "entrada": "A entrada consiste em vários casos de teste. Cada caso de teste é representado por uma única linha, que contém os valores de cada caractere EBCDIC, em números octais de três dígitos, separados por um espaço em branco. Pode-se considerar os códigos que aparecem nas mensagens correspondem apenas à caracteres alfanuméricos e espaços em branco."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1514",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro, representando quantas das características citadas foram alcançadas na competição.",
        "descricao": "A maioria dos programadores que chegam a escrever competições com exercícios de programação concordam em quatro características que toda competição deve alcançar. Embora nem todas sejam sempre alcançadas, quanto mais melhor. As características são as seguintes: Ninguém resolveu todos os problemas. Todo problema foi resolvido por pelo menos uma pessoa (não necessariamente a mesma). Não há nenhum problema resolvido por todos. Todos resolveram ao menos um problema (não necessariamente o mesmo). Rafael organizou uma competição alguns dias atrás, e está preocupado com quantas dessas características ele conseguiu alcançar com a competição. Dadas as informações sobre a competição, com o número de participantes, número de problemas, e qual participante resolveu quais problemas, descubra o número de características que foram alcançadas nesta competição.",
        "titulo": "Competição",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (3 ≤ N, M ≤ 100), indicando, respectivamente, o número de participantes e o número de problemas. Em seguida, haverá N linhas com M inteiros cada, onde o inteiro da linha i e coluna j é 1 caso o competidor i resolveu o problema j, ou 0 caso contrário. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2138",
        "saida": "Mostre o dígito mais frequente do número informado. Em caso de empate, mostre o maior dígito.",
        "descricao": "Na Nlogônia, diversos programadores participam de uma competição de criptografia denominada \"Decrypt it!\", em que aquele que decifrar o maior número de mensagens vence. No meio da competição, você percebe que, para prosseguir e decifrar uma mensagem, deverá vencer o seguinte desafio: encontrar o dígito mais frequente de um número de até 1001 dígitos.",
        "titulo": "Dígito Mais Frequente",
        "entrada": "A entrada é composta por várias linhas, contendo um inteiro N (1 ≤ N ≤ 101000). A entrada termina com fim de arquivo."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2040",
        "saida": "Para cada caso de teste na entrada, seu programa deve produzir uma linha de saída, contendo caso o Sport seja o campeão: \"O Sport foi o campeao com X pontos :D\", sendo X a quantidade total de pontos. Caso contrário, o seu programa deve produzir a seguinte linha: \"O Sport nao foi o campeao. O time campeao foi o S com X pontos :(\", sendo S o nome do time vencedor e X a quantidade total de pontos. Deixe uma linha em branco depois de cada caso de teste.",
        "descricao": "Thyago é um torcedor fanático do Sport Clube de Recife e sempre acompanha as finais dos campeonatos em que seu time está jogando. Como os jogos são geralmente à noite e Thyago está ocupado nesse horário trabalhando ou ministrando aula, ele não está com tempo de ver os jogos do seu time de coração e nem acompanhar a pontuação total do campeonato ao longo do dia, no qual está na rodada final. Deoclécio, que é amigo de Thyago e também gosta muito de futebol, está assistindo o campeonato e anotou a pontuação de todos os times até então e também o placar dos jogos da rodada final. Sua tarefa é ajudar Deoclécio fazendo um programa que, dado o nome dos times participantes do campeonato, a sua pontuação até então e o placar dos últimos jogos, determine qual foi o time campeão e a pontuação final desse time. Regras desse campeonato: Cada gol marcado valerá 3 pontos; Caso os times empatem, será adicionado +1 ponto para cada time da partida; O time vencedor de uma partida ganhará +5 pontos. Observações: É garantido que sempre haverá um time vencedor do campeonato; O time Sport sempre aparece nas entradas do problema; Não haverá empates de pontuação final entre dois ou mais times após os placares dados; O nome do time da entrada sempre terá apenas uma palavra; Os nomes dos times não se repetem e não contém caracteres especiais; Nenhum dos times joga mais de uma vez (mais de uma partida no mesmo caso de teste).",
        "titulo": "O Campeão",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém um inteiro N (2 ≤ N ≤ 100) representando a quantidade de times a seguir que estão participando do campeonato. Seguem Ni linhas contendo o nome do time S e a pontuação do time P até então (0 ≤ P ≤ 100). Logo após, seguem N/2 linhas contendo o placar de cada jogo da última rodada, no formato \"TimeA golsA-golsB TimeB\", conforme ilustrado no exemplo abaixo. A entrada termina com N = 0, na qual não deve ser processada."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2141",
        "saida": "Assim que o HP do combatente X chegar a 0 ou ficar abaixo de 0, imprima \"X is dead.\" e na linha seguinte, o HP, MP, ATK, MAG e DEF do sobrevivente.",
        "descricao": "Você, fã da franquia de jogos eletrônicos \"A Verdadeira Reencarnação da Deusa\", foi contratado pela empresa desenvolvedora ATULS para ajudar na criação de uma versão simplificada do jogo Personalidade 4, um spin-off dessa franquia. Você será responsável pela implementação do sistema de batalha. A tabela a seguir contém as habilidades possíveis e suas respectivas características: .p4s { border:1px solid #C0C0C0; border-collapse:collapse; padding:5px; width: 100%; } .p4s th { border:1px solid #C0C0C0; padding:5px; background:#F0F0F0; } .p4s td { border:1px solid #C0C0C0; text-align:center; padding:5px; } Habilidade Tipo Poder Custo HP Custo MP Efeito MightySwing Físico 270 14% - - GiganticFist Físico 560 16% - - RainyDeath Físico 350 20% - - Agilao Mágico - Fogo 200 - 8 - Agidyne Mágico - Fogo 320 - 12 - Bufula Mágico - Gelo 200 - 8 - Bufudyne Mágico - Gelo 320 - 12 - Megidola Mágico 360 - 32 - Megidolaon Mágico 420 - 60 - BlackViper Mágico 440 - 64 - Tarukaja Suporte - - 12 Ataque Físico atual do atacante aumenta em 25% e fica ativo até que ele use um atk físico Rakukaja Suporte - - 12 Defesa atual do atacante aumenta em 25% e fica ativo até que ele sofra um atk qualquer Tarunda Suporte - - 12 Ataque Físico atual do defensor diminui em 25% e fica ativo até que ele use um atk físico Rakunda Suporte - - 12 Defesa atual do defensor diminui em 25% e fica ativo até que ele sofra um atk qualquer OBS.: As habilidades do tipo Suporte não acumulam e sempre consomem MP, mesmo não tendo mais efeito. Por exemplo, se o jogador usa a habilidade Rakunda 5 vezes seguida, a DEF do defensor ainda será 25% menor e o consumo de MP terá sido 60. Para testar a funcionalidade desse sistema, você deverá considerar uma batalha 1 vs. 1. Cada combatente terá nível, HP (pontos de vida), MP (pontos de magia) e os atributos ATK (ataque físico), MAG (ataque mágico) e DEF (defesa geral). A fórmula de dano é a seguinte: AT = Ataque do atacante atual. Se ataque físico, substitua por ATK, se ataque mágico, substitua por MAG. DF = Defesa geral do defensor atual, isto é, o atributo DEF. P = Poder do ataque. DIFF = Diferença entre o nível do atacante atual e o nível do defensor atual. Este valor não será menor do que -10 e nem maior do que 10.",
        "titulo": "P4 Simplificado",
        "entrada": "Haverá somente um caso de teste. A primeira linha deve conter o nome do combatente 1 e a segunda linha, seu respectivo nível (inteiro: 1 ≤ N ≤ 99), HP, MP (ponto flutuante: 1 ≤ HP, MP ≤ 999), ATK, MAG e DEF (ponto flutuante: 1 ≤ ATK, MAG, DEF ≤ 40). A terceira e a quarta linha deverá conter o mesmo que a primeira e a segunda, mas para o combatente 2. O primeiro a atacar é o combatente 1, ou seja, no primeiro turno, o combatente 1 é o atacante atual e o combatente 2 é o defensor atual. No segundo turno, o atacante é o combatente 2 e o defensor é o combatente 1. A mesma lógica se aplica nos turnos seguintes."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1375",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir apenas uma linha, contendo o grid de largada reconstruído, com o número dos carros separados por um espaço. Se não foi possível reconstruir um grid de largada válido, a linha deve conter -1.",
        "descricao": "Em corridas de carro, sempre há um painel perto da linha de chegada da pista. Antes da corrida começar, o painel é usado para mostrar o grid de largada. O número do primeiro carro do grid é mostrado no topo do painel, o número do segundo carro é mostrado em baixo dele e assim por diante. Durante a corrida o painel é usado para mostrar as posições atuais de cada carro: o carro que está ganhando tem seu número a mostra no topo do painel, seguido do carro que está em segundo e assim por diante. Além de mostrar a posição atual do carro, o painel  também é usado para mostrar o número de posições que o carro ganhou ou perdeu relativo ao grid de largada. Isso é feito, mostrando do lado do número do carro, um número inteiro. Um valor positivo v do lado do número do carro no painel, que significa que o carro ganhou v posições relativo a sua posição inicial no grid. Um zero do lado do número do carro no painel, significa que ele não ganhou nem perdeu posições no grid (o carro está na mesma posição que iniciou a corrida). Nós estamos no meio do Grand Prix da Suécia, a última corrida do Campeonato Mundial. O diretor de prova, Dr. Shoo Makra, está ficando preocupado: houve algumas reclamações que o Software que controla o painel de posições é defeituoso, mostrando informações que não refletem a ordem correta de posições da corrida. Dr. Shoo Makra desenvolveu um jeito de checar se o sistema do painel de posições está funcionando corretamente. Dada a informação exibida no painel de posições, ele quer reconstruir o grid de largada da corrida. Se for possível reconstruir um grid de largada válido, ele planeja checar ele contra o grid de largada real. No entanto, se não for possível reconstruir um grid de largada valido, o sistema do painel de posições está mesmo defeituoso. Você pode ajudar o Dr. Shoo Makra?",
        "titulo": "Painel de Posições",
        "entrada": "O arquivo de entrada contém vários casos de teste. A primeira linha do teste contém um valor inteiro N indicando o número de carros na corrida (2 ≤ N ≤ 10³). As próximas N linhas contém dois inteiros C e P, separados por um espaço, representando o número do carro (1 ≤ C ≤ 104) e o número de posições que o carro ganhou ou perdeu relativo ao grid de largada (-106 ≤ P ≤ 106), de acordo com o painel de posições. Todos os carros na corrida tem números diferentes. O último caso de teste é seguido por uma linha que contém apenas um número zero."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2202",
        "saida": "For each test case, display its case number followed by the width of the smallest trash chute through which it can be dropped. Display the minimum width with exactly two digits to the right of the decimal point, rounding up to the nearest multiple of 1/100. Answers within 1/100 of the correct rounded answer will be accepted. Follow the format of the sample output.",
        "descricao": "Allied Chute Manufacturers is a company that builds trash chutes. A trash chute is a hollow tube installed in buildings so that trash dropped in at the top will fall down and be collected in the basement. Designing trash chutes is actually highly nontrivial. Depending on what kind of trash people are expected to drop into them, the trash chute needs to have an appropriate size. And since the cost of manufacturing a trash chute is proportional to its size, the company always would like to build a chute that is as small as possible. Choosing the right size can be tough though. We will consider a 2-dimensional simplification of the chute design problem. A trash chute points straight down and has a constant width. Objects that will be dropped into the trash chute are modeled as polygons. Before an object is dropped into the chute it can be rotated so as to provide an optimal fit. Once dropped, it will travel on a straight path downwards and will not rotate in flight. The following figure shows how an object is first rotated so it fits into the trash chute. Your task is to compute the smallest chute width that will allow a given polygon to pass through.",
        "titulo": "Trash Removal",
        "entrada": "The input contains several test cases. Each test case starts with a line containing an integer n (3 ≤ n ≤ 100), the number of points in the polygon that models the trash item. The next n lines then contain pairs of integers xi and yi (0 ≤ xi , yi ≤ 104 ), giving the coordinates of the polygon vertices in order. All points in one test case are guaranteed to be mutually distinct and the polygon sides will never intersect. (Technically, there is one inevitable exception of two neighboring sides sharing their common vertex. Of course, this is not considered an intersection.) The last test case is followed by a line containing a single zero."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1877",
        "saida": "Imprima uma linha contendo a palavra beautiful se o castelo dado é bonito, ou a palavra ugly caso contrário.",
        "descricao": "Robin: \"O que você está fazendo?\" Sansa: \"Estou construindo minha casa, Winterfell.\" Sansa está construindo um castelo de neve no jardim do Ninho da Águia. O castelo de neve é feito para parecer com o verdadeiro castelo de Winterfell. O castelo de neve pode ser descrito como uma sequência de N torres de neve, numeradas de 1 a N da esquerda para a direita. A altura da torre i (1 ≤ i ≤ N) é igual a hi centímetros. Sansa diz que o castelo é bonito se ele consiste em uma sequência de K \"picos\" alterados com K-1 \"vales\", como o castelo de Winterfell. Em outras palavras, o castelo é bonito se existe uma sequência de K torres T1 < T2 < ... < TK tal que: As alturas das torres no intervalo [1, T1] estão em ordem crescente; Existe um \"vale\" no intervalo [Ti, Ti+1], para todo 1 ≤ i < K; As alturas das torres no intervalo [TK, N] estão em ordem decrescente. Existe um \"vale\" em um intervalo [A, B] se B ≥ A+2 e existe alguma torre J, A ≤ J ≤ B, tal que as alturas das torres no intervalo [A,J] estão em ordem decrescente, e as alturas das torres no intervalo [J,B] estão em ordem crescente. Ajude Sansa a determinar se seu castelo é bonito ou não!",
        "titulo": "O Castelo de Neve de Sansa",
        "entrada": "A primeira linha contém dois inteiros N e K (1 ≤ N ≤ 1000, 1 ≤ K ≤ N). A segunda linha contém N inteiros h1, h2, ..., hN (1 ≤ hi ≤ 100), as alturas das torres, em centímetros. A primeira e a última torre sempre terão 1 centímetro de altura. Duas torres consecutivas nunca terão a mesma altura."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1627",
        "saida": "Para cada caso de teste imprima uma linha contendo um nome, sendo ele “Andre” caso este seja o último a atacar o monstro, ou “Beto” caso contrário.",
        "descricao": "André e Beto estão jogando um jogo de computador que recompensa os jogadores de uma maneira bem particular: apenas aquele que der o último dano para derrotar um monstro leva todo o ouro que o mesmo deixar para trás. Isso implica que, mesmo que outros jogadores tenham ajudado a derrotar o monstro, apenas aquele que atacar por último será recompensado. André está intrigado com este sistema, e pediu sua ajuda. Dado o número de pontos de vida do monstro, o dano dado por André e Beto, e o tempo de espera necessário para que dois ataques sucessivos sejam realizados, descubra quem dará o último dano ao monstro, o derrotando e recebendo o ouro. No início ambos André e Beto irão atacar, infringindo At e Bt pontos de dano ao monstro, respectivamente. Após cada ataque, tanto André quanto Beto tem que esperar exatos Ad e Bd segundos, respectivamente, antes de atacar novamente. Sempre que André e Beto puderem atacar ao mesmo no tempo (como no início), André tem a prioridade e ataca primeiro. Um monstro é derrotado quando seus pontos de vida chegam a menor ou igual a zero.",
        "titulo": "Último Dano",
        "entrada": "A primeira linha contém um inteiro T, indicando o número de casos de teste a seguir. Cada caso de teste inicia com quatro inteiros At, Ad, Bt e Bd (1 ≤ At, Ad, Bt, Bd ≤ 100), indicando o dano de ataque e o tempo de espera entre dois ataques consecutivos de André e Beto, respectivamente. Em seguida haverá um inteiro H (1 ≤ H ≤ 10000), indicando o número de pontos de vida do monstro."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1940",
        "saida": "Seu programa deve produzir uma única linha, contendo o inteiro correspondente ao jogador vencedor.",
        "descricao": "Um jogo de estratégia, com J jogadores, é jogado em volta de uma mesa. O primeiro a jogar é o jogador 1, o segundo a jogar é o jogador 2 e assim por diante. Uma vez completada uma rodada, novamente o jogador 1 faz sua jogada e a ordem dos jogadores se repete novamente. A cada jogada, um jogador garante uma certa quantidade de Pontos de Vitória. A pontuação de cada jogador consiste na soma dos Pontos de Vitória de cada uma das suas jogadas. Dado o número de jogadores, o número de rodadas e uma lista representando os Pontos de Vitória na ordem em que foram obtidos, você deve determinar qual é o jogador vencedor. Caso mais de um jogador obtenha a pontuação máxima, o jogador com pontuação máxima que tiver jogado por último é o vencedor.",
        "titulo": "Jogo da Estratégia",
        "entrada": "A entrada consiste de duas linhas. A primeira linha contém dois inteiros J e R, o número de jogadores e de rodadas respectivamente (1 ≤ J, R ≤ 500). A segunda linha contém J × R inteiros, correspondentes aos Pontos de Vitória em cada uma das jogadas feitas, na ordem em que aconteceram. Os Pontos de Vitória obtidos em cada jogada serão sempre inteiros entre 0 e 100, inclusive."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1998",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um único caractere. Este caractere deve ser a letra maiúscula 'S' se é possível ganhar o jogo; Caso contrário, deve-se a letra maiúscula 'N'.",
        "descricao": "Awari é um jogo de um jogador das Antilhas, que é jogado com caixas e pedras em vez de cartões. Outra versão de Awari é jogado com N caixas numeradas de 1 a N, cada uma contendo, no início do jogo, zero ou mais pedras. As regras deste jogo são muito simples, porque há apenas um tipo de movimento válido, que consiste em escolher uma caixa numerada i que contém exatamente i pedras, e em seguida, pegar essas pedras da caixa, a fim de usá-las para adicionar uma única pedra para cada caixa numerada de 1 a i-1; a pedra restante é mantida pelo jogador. Estes movimentos são aplicados em sucessão, desde que exista uma caixa i que contém exatamente i pedras. Quando isso não é mais verdade, o jogo termina. O jogador ganha se, nesta fase, cada caixa está vazia, e perde caso contrário. Na figura a seguir, no lado esquerdo há um possível estado inicial de um jogo com n = 5 caixas (os círculos) contendo P1 = 0, P2 = 1 , P3= 3, P4 = 0 e P5 = 2 pedras (os pontos pretos). Se a caixa de número 3, que contém P3 = 3 pedras, foi escolhida para dar o próximo passo, a configuração resultante seria a do mostrado no lado direito da figura. Além disso, para o jogador teria agora uma pedra em seu poder. Dado o estado inicial das caixas, você deve determinar se é possível ganhar o jogo, ou seja, se houver uma sequência de movimentos válidos que depois de todas as caixas são deixadas vazias.",
        "titulo": "Awari 2.0",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém um inteiro N, indicando o número de caixas (1 ≤ N ≤ 500). A segunda linha contém N números inteiros Pi, que representa o número de pedras nas caixas no início do jogo, a partir da caixa 1 para a caixa N, respectivamente (0 ≤ P_i ≤ 500 para i = 1, ..., N) . Em cada caso de teste que haja pelo menos uma caixa não vazia, isto é, existe i de 1 a N tal que Pi ≠ 0. O fim da linha de entrada é uma linha que contém o número -1."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1419",
        "saida": "Para cada caso de teste imprima uma linha com um caractere representando o resultado do jogo: \"M\" caso o vencedor seja Mark, \"L\" caso o vencedor seja Leti, ou \"T\" caso haja um empate (tie).",
        "descricao": "Mark e Leti adoram brincar com suas bolas Bakugan. Essas bolas são pequenas esferas de plástico com um pequeno brinquedo-monstro dentro. Quando jogada ao chão, a bola Bakugan se abre, fazendo um som incrível e liberando um monstro Bakugan assustador. Mark e Leti adoram brincar com seus monstros, mas abrir as bolas Bakugan também é bem divertido. Cada um deles recebeu uma bolsa com bolas Bakugan e eles inventaram um jogo para abrir as bolas. Existem 10 monstros diferentes, e para o jogo Mark e Leti associaram cada monstro a um inteiro diferente de 1 a 10, de acordo com o nível de feiura do monstro. O jogo é composto de R rodadas. A cada rodada: Os dois jogadores jogam suas bolas ao chão simultaneamente; Cada jogador acumula um número de pontos coincidente com o número associado ao monstro liberado por sua bola; O primeiro (e apenas o primeiro) jogador que liberar o mesmo monstro em três rodadas consecutivas ganha 30 pontos adicionais; se essa condição acontecer na mesma rodada para ambos os jogadores então ninguém ganha pontos extras. O vencedor do jogo é o jogador que acumular mais pontos. Por favor ajude Mark e Leti anunciar o vencedor do jogo!",
        "titulo": "Bakugan",
        "entrada": "Cada caso de testo é descrito por três linhas. A primeira linha contém um inteiro R indicando o número de rodadas do jogo (1 ≤ R ≤ 10). A segunda linha contém R inteiros Mi indicando os monstros liberados por Mark a cada rodada (1 ≤ Mi ≤ 10, para 1 ≤ i ≤ R). A terceira linha contém R inteiros Li indicando os monstros liberados por Leti a cada rodada (1 ≤ Li ≤ 10, para 1 ≤ i ≤ R). O último caso de teste é composto por uma linha contendo zero."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1888",
        "saida": "Para cada instância, imprima um número real arredondado para 3 casas decimais com a diferença mínima esperada entre as duas inscrições. Imprima a resposta com exatamente 3 casas decimais.",
        "descricao": "Um chedi (conhecido também como estupa, pagode ou dágaba) é um monumento geralmente em formato de torre cônica construído sobre os restos mortais de uma pessoa importante da religião budista. Alguns sítios históricos tailandeses contêm dezenas desses monumentos, muitos deles dedicados a monges ou líderes religiosos antigos (bhikkhu - ภิกษุณี, como são chamados na Tailândia). Vários desses monges dedicaram suas vidas à contemplação e oração a diferentes entidades. Para citar um exemplo, no sítio de Kamphaeng Phet encontram-se vários chedi em que as inscrições fazem referência a Garuda (ครุฑ) (não confunda com o personagem homônimo do Street Fighter). O mesmo se repete no sítio de Si Satchanalai e de Sukhothai. A língua tai tem diferenças muito sutis entre as diferentes letras, que torna a análise dos especialistas extremamente difícil. Por exemplo, quando qualquer símbolo da palavra correspondente ao deus Ramakien (รามเกียรติ์) é mudado, seu significado é completamente alterado. Lembrando que algumas dessas ruínas têm mais de 700 anos, estes escritos já sofrem a ação do tempo e de vândalos há séculos. Assim, o trabalho desses pesquisadores é muito complicado. Um outro exemplo é o par de inscrições abaixo encontrada em chedis diferentes. จัดษุตังขึ้นโดยพรภิะบมพุธานุญาษุ จัดตั้งขึ้โกดยพระบรมษุพุทธานญาต Os especialistas acreditam que se refiram à mesma entidade. Para chegar a essa conclusão, eles desenvolveram um método que chamam de análise da diferença probabilística mínima. Essa análise funciona da seguinte maneira. Sejam a = a1a2...aN e b = b1b2...bM duas inscrições com N e M caracteres, respectivamente. O valor do parâmetro chamado diferença é inicializado com zero. A cada passo, analisa-se um par de caracteres (ai, bj), com 1 ≤ i ≤ N + 1 e 1 ≤ j ≤ M + 1, começando por (a1,b1). Note que quando i = N + 1, ai é o caracter vazio e o mesmo vale para bj quando j = M + 1. Se ai = bj, pode-se considerar que existe uma correspondência entre tais caracteres nas inscrições e trocar o par atual por (ai+1, bj+1). Tal correspondência nunca existe se ai ≠ bj e um caracter de uma inscrição nunca pode corresponder a dois caracteres da outra inscrição. Se for considerado que não existe correspondência entre os caracteres do par, então o valor da diferença deve ser aumentada por uma das seguintes formas: adicionando 1 à diferença e trocando o par atual por (ai+1, bj) ou por (ai, bj+1); adicionado K à diferença e trocando o par atual por (ai+x, bj+y), onde x e y são escolhidos aleatoriamente com distribuição uniforme nos intervalos [1, N-i+1] e [1, M-j+1], respectivamente. Se i > N, apenas y varia aleatoriamente. Se j > M, apenas x varia aleatoriamente. A análise termina quando os caracteres ai e bj são ambos o caracter vazio. Note que o valor da diferença pode variar de acordo com as escolhas tomadas. Os especialistas consideram que quanto menor for a diferença obtida, maior será a correspondência entre as inscrições. Assim, eles pedem que você escreva um programa para encontrar a diferença mínima esperada entre duas inscrições.",
        "titulo": "Os chedis de Kamphaeng Phet",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância inicia com 3 inteiros, N, M (1 ≤ N, M ≤ 3.000), e K (0 ≤ K ≤ 100.000), onde N é o tamanho da primeira inscrição e M é o tamanho da segunda inscrição. As próximas duas linhas contém, respectivamente, a primeira e a segunda inscrição. Uma inscrição consiste de uma cadeia de caracteres de 'a' a 'z'."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1246",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha contendo um número inteiro representando o faturamento do estacionamento, em reais.",
        "descricao": "Um estacionamento utiliza um terreno em que os veículos têm que ser guardados em fila única, um atrás do outro. A tarifa tem o valor fixo de R$ 10,00 por veiculo estacionado, cobrada na entrada, independente de seu porte e tempo de permanência. Como o estacionamento é muito concorrido, nem todos os veículos que chegam ao estacionamento conseguem lugar para estacionar. Quando um veículo chega ao estacionamento, o atendente primeiro determina se há vaga para esse veículo. Para isso, ele percorre a pé o estacionamento, do início ao fim, procurando um espaço que esteja vago e tenha comprimento maior ou igual ao comprimento do veículo. Para economizar seu tempo e energia, o atendente escolhe o primeiro espaço adequado que encontrar; isto é, o espaço mais próximo do início. Uma vez encontrada a vaga para o veículo, o atendente volta para a entrada do estacionamento, pega o veículo e o estaciona no começo do espaço encontrado. Se o atendente não encontrar um espaço adequado, o veículo não entra no estacionamento e a tarifa não é cobrada. Depois de estacionado, o veículo não é movido até o momento em que sai do estacionamento. O dono do estacionamento está preocupado em saber se os atendentes têm cobrado corretamente a tarifa dos veículos estacionados e pediu para você escrever um programa que, dada a lista de chegadas e saídas de veículos no estacionamento, determina o faturamento total esperado.",
        "titulo": "Estacionamento",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de um caso de teste contém dois números inteiros C (1 ≤ C ≤ 1000) e N (1 ≤ N ≤ 10000) que indicam respectivamente o comprimento em metros do estacionamento e o número total de eventos ocorridos (chegadas e saídas de veículos). Cada uma das N linhas seguintes descreve uma chegada ou saída. Para uma chegada de veículo, a linha contém a letra 'C', seguida de dois inteiros P (1000 ≤ P ≤ 9999) e Q (1 ≤ Q ≤ 1000), todos separados por um espaço em branco. P indica a placa do veículo e Q o seu comprimento. Para uma saída de veículo, a linha contém a letra 'S' seguida de um inteiro P , separados por um espaço em branco, onde P indica a placa do veículo. As ações são dadas na ordem cronológica, ou seja, na ordem em que acontecem. No início de cada caso de teste o estacionamento está vazio. No arquivo de entrada, um veículo sai do estacionamento somente se está realmente estacionado, e a placa de um veículo que chega ao estacionamento nunca é igual a placa de um veículo já estacionado."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1357",
        "saida": "Para cada caso de teste imprima apenas os dígitos da tradução correspondente, no mesmo formato que a entrada (veja os exemplos para maiores explicações).",
        "descricao": "O sistema Braille, desenvolvido por Louis Braille em 1825, revolucionou a comunicação escrita para as pessoas cegas e visualmente debilitadas. Braille, um francês cego, desenvolveu uma linguagem tátil onde cada elemento é representado por uma célula com seis posições, arranjadas em três fileiras e duas colunas. Cada posição pode ser relevada ou não, permitindo 64 configurações diferentes que podem ser sentidas por dedos treinados. A figura abaixo mostra a representação Braille para os dígitos decimais (um ponto preto indica uma posição relevada). ​ De modo a desenvolver um novo sistema de software para ajudar professores a lidar com estudantes cegos ou visualmente debilitados, um módulo de dicionário Braille é necessário. Dada uma mensagem, composta apenas por dígitos, seu trabalho é traduzi-la para ou do Braille. Você pode ajudar?",
        "titulo": "Em Braille",
        "entrada": "Cada caso de teste é descrito usando três ou cinco linhas. A primeira linha contém um inteiro D representando o número de dígitos em uma mensagem (1 ≤ D ≤ 100). A segunda linha contém uma única letra maiúscula 'S' ou 'B'. Se a letra é 'S', a próxima linha contém uma mensagem composta de D dígitos decimais que seu programa deve traduzir para o Braille. Se a letra é 'B', as próxima três linhas contém uma mensagem composta de D células Braille que seu programa deve traduzir do Braille. As células Braille são separadas por espaços simples. Em cada célula Braille uma posição relevada é denotada pelo caractere '*' (asterisco), enquanto uma não relevada é denotada por um caractere '.' (ponto). O último caso de teste é seguido por uma linha contendo um zero."
    }
]