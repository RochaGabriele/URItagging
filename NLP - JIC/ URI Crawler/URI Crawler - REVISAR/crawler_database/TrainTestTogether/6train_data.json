[
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1229",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único caractere: S se as moléculas são equivalentes ou N caso contrário.",
        "descricao": "Pesquisadores da Fundação Contra o Câncer (FCC) anunciaram uma descoberta revolucionária na Química: eles descobriram como fazer átomos de carbono ligarem-se a qualquer quantidade de outros átomos de carbono, possibilitando a criação de moléculas muito mais complexas do que as formadas pelo carbono tetravalente. Segundo a FCC, isso permitirá o desenvolvimento de novas drogas que poderão ser cruciais no combate ao câncer. Atualmente, a FCC só consegue sintetizar moléculas com ligações simples entre os átomos de carbono e que não contêm ciclos em suas estruturas: por exemplo, a FCC consegue sintetizar as moléculas (a), (b) e (c) abaixo, mas não a molécula (d). Devido à agitação térmica, uma mesma molécula pode assumir vários formatos. Duas moléculas são equivalentes se for possível mover os átomos de uma das moléculas, sem romper nenhuma das ligações existentes nem criar novas ligações químicas, de forma que ela fique exatamente igual à outra molécula. Por exemplo, na figura acima, a molécula (a) não é equivalente à molécula (b), mas é equivalente à molécula (c). Você deve escrever um programa que, dadas as estruturas de duas moléculas, determina se elas são equivalentes.",
        "titulo": "Combate ao Câncer",
        "entrada": "A primeira linha de um caso de teste contém um inteiro N indicando o número de átomos nas duas moléculas. Os átomos são identificados por números inteiros de 1 a N (2 ≤ N ≤ 104). Cada uma das 2N − 2 linhas seguintes descreve uma ligação química entre dois átomos: as primeiras N − 1 linhas descrevem as ligações da primeira molécula; as N − 1 últimas descrevem as ligações químicas da segunda molécula. Cada linha contém dois inteiros A (1 ≤ A ) e B (B ≤ N) indicando que existe uma ligação química entre os átomos A e B."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1822",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador “Instancia h” em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir o menor valor possível que a empreiteira deve gastar com funcionários ao longo dessa obra. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "Devido à abertura econômica ocorrida na China nos últimos anos, boa parte do país foi transformada em canteiro de obras. Algumas construções em curso são tão monumentais que, juntamente com a já famosa Muralha da China, poderão ser vistas da lua a olho nu. Uma empreiteira radicada em Shangai é responsável pela execução de várias obras no país. Após algum tempo, os engenheiros da empreiteira perceberam que, a cada nova obra, tinham de resolver um problema semelhante ao que já tinham resolvido no início das obras anteriores. Cansados de realizar sempre os mesmos tipos de cálculos, pediram a sua ajuda na construção de um programa que resolvesse o problema deles, descrito a seguir. Considere uma obra que tem duração de n semanas. Na i-ésima semana da obra, para i ≤ 1 ≤ n, são necessários fi funcionários para executá-la. Os custos com recrutamento e instrução de um funcionário são de x yuan. Gasta-se y yuan para demitir um funcionário. Um funcionário necessário custa z yuan por semana e cada funcionário excedente, isto é, cada funcionário contratado que não é necessário em uma semana da obra, custa w yuan por semana para a empreiteira. (yuan é a moeda chinesa.) Funcionários podem ser contratados e demitidos a cada semana. Inicialmente, a obra não possui nenhum funcionário. Ao final da mesma, todos os funcionários devem ser demitidos. O problema consiste em determinar o menor valor possível que a empreiteira deve gastar com funcionários ao longo da obra, satisfazendo sempre as restrições semanais. Ou seja, não pode haver menos de fi funcionários trabalhando na obra na i-ésima semana.",
        "titulo": "Obras da China",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversas obras, doravante denominadas instâncias. Cada instância tem a estrutura que segue. Na primeira linha é fornecido um inteiro n (0 ≤ n ≤ 200) que representa o número de semanas de duração da obra. Na próxima linha são dados, separados por espaços em branco, n valores inteiros não negativos e menores ou iguais a 50, em que o i-ésimo valor (1 ≤ i ≤ n) representa o número fi de funcionários necessários na i-ésima semana. Na linha seguinte, também separados por espaços em branco, são fornecidos quatro inteiros x, y, z e w (0 ≤ x, y, z, w ≤ 1000), em que x é o custo de recrutamento e instrução de um funcionário novo, y é o custo de demitir um funcionário empregado, z é o custo semanal de um funcionário necessário e w é o custo para manter um funcionário excedente, por uma semana, na obra. Um valor n = 0 indica o final das instâncias e não deve ser processado."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1852",
        "saida": "Imprima N linhas. Cada linha deve conter duas strings Ci e Dj, indicando que a criança Ci deve ficar com o filhote Dj. Imprima os filhos na mesma ordem em que são descritos na entrada.",
        "descricao": "Jon: \"Lorde Stark? Há cinco filhotes, um para cada criança Stark. O lobo é o brasão de sua Casa. Elas devem tê-los.\" Durante uma viagem, Ned Stark encontrou N filhotes de lobo e decidiu dar um filhote para cada um de seus N filhos. Ned quer fazer tanto as crianças quanto os lobos felizes, e, por isso, deseja encontrar a combinação ideal de lobos e crianças. Depois de brincar um pouco com os filhotes, cada filho deu a Ned uma lista de lobos em ordem de preferência. Desta forma, cada criança quer ficar com o filhote que está no topo de sua lista; se isto não for possível, a criança quer ficar com o filhote que aparece em segundo na lista, e assim por diante. Depois de observar como cada lobo reage a cada filho, Ned também deduziu, para cada lobo, a lista de crianças que ele quer que sejam seus donos, também em ordem de preferência. Ned precisa encontrar uma combinação tal que, para toda criança Ci e todo lobo Dj, não ocorre que Ci prefere Dj ao filhote combinado a ela e Dj prefere Ci à criança combinada a ele. Se existe mais de uma combinação possível, Ned deseja aquela em que cada filho tem o melhor lobo (mais preferido) que pode ter.",
        "titulo": "Lobos Stark",
        "entrada": "A primeira linha contém o inteiro N (1 ≤ N ≤ 200). As próximas N linhas descrevem os filhos de Ned. Cada linha contém N+1 strings. A primeira é o nome da criança. As próximas N strings são os nomes dos lobos em sua ordem de preferência. O primeiro lobo dado na linha é o preferido da criança.  As próximas N linhas descrevem os filhotes de lobo. Cada linha contém o nome do filhote e sua lista de crianças, também em ordem de preferência. Cada string contém no máximo 10 letras maiúsculas e/ou minúsculas."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1643",
        "saida": "Para cada x distância em quilômetros imprima a distância em milhas y calculadas de acordo com o algoritmo de Bruce.",
        "descricao": "Este ano, Bruce Force passa suas férias em Flagstaff, Arizona, onde ele quer treinar para a próxima meia maratona (uma corrida de mais de 21 km). Em seu primeiro treino, ele correu até a casa de seu amigo Greedy Gonzales, que fica a 21 milhas de distância de Flagstaff. Chegando lá, ele já muito cansado, percebe que 21 milhas são muito mais de 21 km. Greedy Gonzales diz que 21 km é igual a 13 milhas. 21, 13? Bruce percebe imediatamente que deve haver uma relação mais profunda! Ambos, 13 e 21 são números de Fibonacci! Números Fibonacci podem ser definidos da seguinte forma: F1 = 1 F2 = 2 Fn+1 = Fn+Fn-1 para n > 1 Bruce está aprendendo sobre o sistema numérico Fibonacci em sua universidade. Cada inteiro positivo X pode ser escrito como a soma de diferentes números Fibonacci, isso significa que dado um numero k e b1, b2, ..., bk tal que x = ∑i=1..k bi * Fi, onde bk = 1 e bi (1 ≤ i 1. Por exemplo 21 pode ser representado por (1,0,0,0,0,0,0) e 13 como (1,0,0,0,0,0) no sistema Fibonacci. Bruce percebe que se pode converter uma x distância em quilômetros em uma distância y correspondente a milhas da seguinte forma: Primeiro, anote x em seu Fibonacci representação do sistema b(x). Em segundo lugar, mudar os bits de b (x) uma posição para a direita (o último bit é excluído) e obter b(y). Em terceiro lugar, calcular y de b(y) através da avaliação da soma dada acima. Por exemplo, o número 42 escrito no sistema de Fibonacci é (1,0,0,1,0,0,0,0). Na etapa dois iríamos mudar os bits uma posição para a direita e termos (1,0,0,1,0,0,0). No terceiro passo, calcular 0*1 + 0*2 + 0*3 + 1*5 + 0*8 + 0*13 + 1*21 = 26. Agora é a sua vez de escrever um programa para Bruce que converte quilômetros em milhas de acordo com o algoritmo de Bruce.",
        "titulo": "Converter Quilômetros para Milhas",
        "entrada": "A primeira linha de entrada contém t, o número de distâncias que Bruce quer converter de quilômetros em milhas (0 < t <25000). Cada uma das t linhas contem um inteiro, correspondente a distância x (2 < x < 25000) em quilômetros."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2106",
        "saida": "Para cada instância na entrada, imprima uma linha com um inteiro representando a quantidade mínima de dinheiro que deverá ser gasto para a contratação dos N jogadores.",
        "descricao": "Estamos no ano de 2931. Cientistas detectaram um meteoro que, em 15 meses, irá colidir com a Terra e extinguir a vida no planeta. Não há mais tempo para preparar ofensivas contra o meteoro, então só nos resta realizar nossos últimos desejos e esperar a colisão. Um grupo de pessoas resolve se unir e realizar o último sonho de centenas de milhares de pessoas: ver a Portuguesa campeã da Copa Libertadores da América. Para tal, será necessário a contratação de jogadores de grande habilidade, que também são muito caros. Para conseguir fazer isso, eles estudaram a personalidade dos melhores jogadores do mundo, e chegaram à conclusão que alguns aceitariam jogar na Portuguesa mais facilmente (isto é, seria contratado por um preço menor) se percebessem que seriam as únicas \"estrelas\"do time. Já outros, viriam mais facilmente caso percebessem que na Portuguesa já existem outras estrelas. Assim, através de um estudo mais detalhado das personalidades, conseguiram definir, para cada jogador, qual seria o preço para contratá-los em vários cenários. Por exemplo, o jogador X poderia ser contratado por $3 se fosse a única estrela do time ou por $5 se já houvesse 1 estrela no time antes dele entrar. Já o jogador Y seria contratado por $4 se fosse a única estrela do time, ou $2 se já houvesse uma estrela no time. Nesse cenário, a melhor maneira de contratar X e Y seria contratar primeiro o jogador X por $3 e depois Y por $2, gastando $5 no total. Você receberá os dados dos custos de contratação dos jogadores em cada cenário, e deverá dizer quanto os torcedores da Lusa deverão economizar para montar o time dos sonhos e conquistar a tão sonhada Libertadores.",
        "titulo": "Montagem",
        "entrada": "A entrada contém várias instâncias. A primeira linha contém um número inteiro N (2 ≤ N ≤ 18), representando a quantidade de jogadores a serem contratados. Cada uma das próximas N linhas representa um jogador. Cada uma possui N inteiros c0 , c1 , c2 , ... cN−1 (1 ≤ ci ≤ 1000, para todo 0 ≤ i < N) separados por espaços, onde c k representa o custo para se contratar o jogador c se já tiverem sido contratados k jogadores. A entrada termina quando N = 0."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2080",
        "saida": "Para cada instância, imprima a seqüência dada na entrada seguida de K linhas contendo as seqüências na ordem que foram geradas. As seqüências geradas não terão mais do que 2000000 caracteres. Após cada instância imprima uma linha em branco.",
        "descricao": "Wilhelm Conrad Röntgen foi um físico alemão que viveu no final do século XIX e início do século XX. Suas experiências em radiação eletromagnéticas renderam a ele o primeiro prêmio Nobel em Física, outorgado em 1901. Sua principal descoberta foi a existência do “raio X” e seu uso em aplicações médicas. Em 22 de dezembro de 1895, Röntgen fez um raio X da mão de sua esposa (com um anel em um dos dedos). A descoberta do raio X causou grande alvoroço na época e já em 1896 jornais europeus noticiavam a invenção e as grandes possibilidades de enxergar por dentro dos corpos sem a necessidade de cortá-los. A morte de Röntgen, causada por um certo tipo de câncer, é atribuída às radiações constantes a que esteve exposto durante suas pesquisas científicas. Röntgen começou a desconfiar da existência de radiações invisíveis quando, nas suas pesquisas, era capaz de medir alterações consideráveis na fluorescência dos objetos quando colocados num tubo de Lenard que era submetido a uma corrente elétrica. Os estudos de Röntgen foram tão precisos que ele pôde inclusive gerar a seqüência que era observada no tubo de Lenard em cada instante de tempo. A fluorescência observada dependia da intensidade da corrente (X) e do tempo em que o tubo era submetido à corrente (Y). Röntgen percebeu que dada a primeira seqüência, a próxima podia ser obtida descrevendo os números da seqüência anterior. Por exemplo: se a primeira seqüência for 2 então a próxima é 12 (ou seja, a seqüência anterior é formada por “um 2”), a seguinte 1112 (ou seja, a seqüência anterior é formada por um 1 e um 2), 3112 (ou seja, a seqüência anterior é formada por três 1 e um 2), e assim por diante. Além de um cientista brilhante, Röntgen era extremamente organizado. Ele guardava todos os registros de seus experimentos. Infelizmente, com o tempo algumas seqüências foram danificadas e outras perdidas. Sua tarefa é dada uma seqüência, determinar as próximas K seqüências do experimento.",
        "titulo": "Seqüências de Röntgen",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por uma linha contendo a primeira seqüência do experimento, formada por não mais de 1000 caracteres de 0 a 9, e o número K de seqüências que desejamos gerar (1 ≤ K ≤ 50), respectivamente."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1600",
        "saida": "Para cada instância imprima uma única linha. Caso seja possível empurrar o bloco para a sua posição final essa linha deverá consistir de 2 inteiros, que são o número mínimo de portas que precisam ser abertas para realizar tal ação e o número mínimo de movimentos que são necessários com esse número de caixas abertas. Imprima ‘-1’ caso não seja possível empurrar o bloco para a sua posição final.",
        "descricao": "Sokoban é um jogo muito conhecido. O que poucas pessoas sabem é que o jogo foi inventado pelos bérberes, povos árabes que habitavam o norte da África, mais especificamente onde hoje existe o Marrocos. Para estes povos os gatos são considerados um animal que traz mau agouro, principalmente por conta de seu comportamento egoísta (como atesta o provérbio destacado acima). Nessa versão original do sokoban o personagem é um gato que fica empurrando os blocos de terra ao seu redor. Há um tabuleiro que consiste de N linhas e M colunas. Você controla o gato que pode se movimentar em qualquer uma das 4 casas adjacentes, desde que essa esteja livre, ou pode empurrar um bloco em qualquer uma dessas 4 direções. Como na versão mais conhecida, seu objetivo é empurrar o bloco até uma posição final especificada. Note que você pode apenas empurrar o bloco e nunca puxar. A versão bérbere do jogo tem uma particularidade. Há algumas casas especiais que são portas. Sempre que o gato ocupa uma posição com porta pela primeira vez, a porta é aberta. O bloco não pode ser empurrado para a posição de uma porta se ela estiver fechada. Após aberta, uma porta se comporta como uma posição livre. Você quer empurrar o bloco para a posição final abrindo o menor número de portas possível. Considere toda posição fora do tabuleiro como uma parede.",
        "titulo": "O Gato do Zelador do Armazém",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância inicia com uma linha contendo 2 inteiros separados por um espaço, N e M (1 ≤ N, M ≤ 25). Seguem-se N linhas, cada uma com M caracteres pertencentes ao conjunto {∗, ., j, b, x, #}, onde: ‘*’ representa uma parede; ‘.’ representa uma posição vazia; ‘j’ representa a posição inicial do gato (Cada instância contêm exatamente um caractere ‘j’); ‘b’ representa a posição inicial do bloco (Cada instancia contêm exatamente um caractere ‘b’); ‘x’ representa a posição final desejada para o bloco (Cada instância contêm exatamente um caractere ‘x’); ‘#’ representa uma porta (Cada instância contêm no máximo 5 caracteres ‘#’);"
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "2027",
        "saida": "Para cada caso de teste você deverá Imprimir uma linha de saída contendo Noel ou Gnomos, conforme explicação acima. No final, você deve imprimir os valores calculados para as 100 apostas entre os gnomos e Noel. Cada um dos valores é seguido por um espaço em branco, inclusive o último.",
        "descricao": "Como é época de Natal, os gnomos Rolien e Naej fizeram uma aposta com o Papai Noel. Rolien e Noel tem 10 segundos para contar a quantidade de enfeites em uma árvore de natal. Após isso, se o máximo divisor comum entre os dois valores contados der um valor maior do que 5, Noel ganha, caso contrario, os gnomos ganham. Bem, o problema é que alguém mexeu no código de Rolien, que antes funcionava perfeitamente e agora dá uns erros estranhos: dependendo do que for mexido, às vezes dá \"Presentation Error\", às vezes dá \"Compilation Error\" e às vezes dá \"Runtime Error\". Tendo o código abaixo, acerte estes pequenos erros e submeta a versão correta para o Papai Noel. #include using namespace std; int GCDsimp (int num, int den) { cout << num << den; if (den > 0) return GCDsimp (den, num % den); } return num; } int main() { int num, den, apostas [100], cont=-1; while (cin >> num >> den) {  apostas[++cont] = GCDsimp (num,den);  if  ( apostas[cont] ) > 5) cout << \"Noel\" ;  else cout << \"Gnomos\" << endl; } for (int i=cont; i>0; i++) { cout << apostas[cont] << \" \"; } return 0; }",
        "titulo": "Aposta com Noel",
        "entrada": "A entrada pode conter até 100 casos de teste e termina com EOF. Cada caso de teste é composto por uma linha contendo dois números inteiros separados por um espaço, que representam o número de enfeites contados por Rolien e Noel, respectivamente, para uma das árvores de Noel."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1226",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único número inteiro indicando o número atribuído ao N-ésimo andar.",
        "descricao": "A China está construindo um elevador espacial, que permitirá o lançamento de sondas e satélites a um custo muito mais baixo, viabilizando não só projetos de pesquisa científica como o turismo espacial. No entanto, os chineses são muito supersticiosos, e por isso têm um cuidado muito especial com a numeração dos andares do elevador: eles não usam nenhum número que contenha o dígito “4” ou a sequência de dígitos “13”. Assim, eles não usam o andar 4, nem o andar 13, nem o andar 134, nem o andar 113, mas usam o andar 103. Assim, os primeiros andares são numerados 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, . . . Como o elevador espacial tem muitos andares, e eles precisam numerar todos os andares do elevador, os chineses pediram que você escrevesse um programa que, dado o andar, indica o número que deve ser atribuído a ele.",
        "titulo": "Elevador Espacial",
        "entrada": "Cada caso de teste consiste de uma única linha, contendo um inteiro N (1 ≤ N ≤ 1018) que indica o andar cujo número deve ser determinado."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1595",
        "saida": "Imprima para cada caso o menor tempo necessário para se chegar ao fim em segundos, arredondado de duas casas decimais.",
        "descricao": "Você está andando por São Carlos e percebeu que há momentos que anda mais rápido ou mais devagar, tudo depende se você está subindo ou descendo algum morro. O trajeto total feito por você tem S metros. Podemos separar o trajeto em partes de 1 metro, e na i-ésima dessas partes você anda a uma velocidade constante de Vi metros por segundo. Com essas informações e um pouco de Física básica você consegue calcular o tempo que levou até chegar no fim (tempo = distancia/velocidade). Agora, você resolveu correr! Para não cansar muito, você pode escolher correr em apenas C das S partes do trajeto. Ao correr, sua velocidade no trajeto é somada de R metros por segundo! Assuma que sua aceleração seja instantânea. Escolhendo a melhor estratégia de corrida possível, calcule o menor tempo que se leva para chegar ao destino.",
        "titulo": "Humm.. Andar ou Correr.. Eis a Questão",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso teremos os números inteiros S (1 ≤ S ≤ 100* ou 1 ≤ S ≤ 105**), C (0 ≤ C ≤ S) e R (0 ≤ R ≤ 100). Na linha seguinte, S inteiros seguirão separados por espaços em branco indicando a velocidade em cada parte do percurso. Para todos os casos considere 1 ≤ Vi ≤ 100. Sabemos que esta velocidade é grande, mas imagine que você é primo do The Flash. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1524",
        "saida": "Para cada instância, imprima uma única linha contendo o valor mínimo que a soma dos tamanhos dos K grupos pode ter.",
        "descricao": "Um fenômeno muito comum na fila do bandejão (também conhecido como restaurante universitário) é ver uma pessoa recém chegada entrar no interior na fila em vez de no final. Isso ocorre sempre que tal pessoa encontra alguém de seu grupo já na fila. Interessado em estudar esse fenômeno, um amigo pediu para você escrever um programa para estudar os grupos presentes na fila. Podemos supor que existem K grupos diferentes e toda pessoa pertence a exatamente um desses grupos. O tamanho de um grupo é definido pela distância entre as duas pessoas mais distantes dentro do grupo. Se o grupo consiste de apenas uma pessoa, seu tamanho é zero. Considerando que os grupos se organizam de forma que a soma dos tamanhos dos K grupos seja mínima, seu programa deve determinar qual é o valor dessa soma.",
        "titulo": "Fila do Bandejão",
        "entrada": "A entrada é composta por diversas instâncias e termina com o final de arquivo (EOF). A primeira linha de cada instância contém os inteiros N, indicando o número de pessoas na fila, e K, indicando o número de grupos (1 ≤ K < N ≤ 1.000). Na linha seguinte são apresentados N − 1 inteiros, a2, . . ., aN, (0 ≤ a2 ≤ ··· ≤ aN ≤ 1.000.000) indicando as posições de cada pessoa em relação à primeira pessoa da fila A posição da primeira pessoa é omitido, pois é sempre zero."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2124",
        "saida": "Para cada caso, você deverá imprimir um identificador \"Instancia K\", onde K é o número da caso atual. Na linha seguinte você deve imprimir \"sim\" se for possível atender pelo menos um desejo de cada convidado e \"nao\" caso contrário. Após cada caso, seu programa deve imprimir uma linha em branco.",
        "descricao": "Sra. Montagny é uma socialite de Quebec, que passa as férias em Banff, na sua mansão à beira do Lake Louise. Seus jantares são famosos porque ela com antecedência passa um questionário aos convidados onde os mesmos participam da escolha do cardápio. No questionário, a famosa magnata lista todos os pratos que poderá fazer no jantar, oferecendo uma coluna para o convidado selecionar o prato e outra para vetá-lo. É permitido fazer apenas duas escolhas no questionário, ou seja, cada convidado pode selecionar um prato e vetar outro, vetar dois pratos ou selecionar dois pratos. A Sra. Montagny garante que todos os convidados terão pelo menos um de seus desejos atendidos. Antigamente ela mesma dava conta de montar o cardápio e atender o que prometia, mas com o crescimento de suas festas isso tem se tornado impossível. Assim, ela resolveu contratar vocês para fazer um programa que recebe os pedidos dos convidados e responde se é possível montar o cardápio para a festa.",
        "titulo": "Cardápio da Sra. Montagny!",
        "entrada": "A entrada é composta de diversas casos. Cada caso começa com um inteiro N (1 ≤ N ≤ 1000), indicando a quantidade de questionários recebidos pela Sra. Montagny. Cada uma das próximas N linhas contém dois nomes de comida indicando a preferência de cada convidado. Um nome de comida é uma sequencia de letras [a-z] com no máximo 20 letras. Quando o nome de uma comida é iniciado por ‘‘!’’ significa que o convidado deseja vetar a comida, caso contrário ele deseja selecionar."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1312",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro representando o prêmio máximo que um competidor pode fazer a partir da pilha.",
        "descricao": "O canal de TV XYZ está desenvolvendo uma novo game show, onde o competidor tem que fazer algumas escolhas de modo a obter um prêmio. O jogo consiste de uma pilha triangular de bolas, cada uma delas tendo um valor inteiro, como mostrado no exemplo a seguir. ​ O competidor deve escolher quais bolas ele irá levar e seu prêmio é a soma dos valores destas bolas. Entretanto, o competidor pode levar uma bola apenas se ele também levar todas as bolas diretamente acima dela. Isto pode requerer levar bolas adicionais usando a mesma regra. Note que o competidor pode escolher não levar bola alguma, caso no qual o prêmio é zero. O diretor do programa de TV está preocupado a respeito do prêmio máximo que um competidor pode obter dada uma pilha. Como ele é seu chefe e ele não sabe como responder essa questão, ele atribuiu esta tarefa a você.",
        "titulo": "Empilhamento de Bolas",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém um inteiro N representando o número de linhas da pilha (1 = N = 1000). A i-ésima das próximas N linhas contém i inteiros Bij(-105 ​≤ Bij ≤ 105 e 1 ≤ j ≤ i ≤ N); o número Bij é o valor da j-ésima bola na i-ésima linha da pilha (a primeira linha é a mais ao topo, e em cada linha a primeira bola é a mais a esquerda). O último caso de teste é seguido por uma linha contendo um zero."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1775",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #X: Y\", onde X é o número do caso atual, iniciando em 1, e Y é a quantidade mínima de vezes que André precisa parar para pegar mentos.",
        "descricao": "André é um maratonista do CIn-UFPE. Todo sábado, durante os treinos, ele come de tudo: salgadinho, refrigerante, biscoito, água e mentos. Principalmente mentos. Mas o problema, porém, é que toda vez que André vai tirar alguns mentos do tubo, ele tem que parar de codar por alguns instantes, o que atrapalha sua concentração. O mentos vem em um tubo com duas pontas. Cada vez que André quer chupar alguns, ele escolhe um certo sabor, e olha pra cada ponta do mentos. Em cada uma, se houver um mentos do sabor escolhido, ele pega. Se não houver nenhum daquele sabor nas pontas, ele não pega nenhum, e só parou de codar à toa. Para diminuir a perda de tempo durante o contest, André decidiu minimizar suas paradas para pegar mentos. Ele fez um corte fino ao longo do tubo, para poder ver com antecedência quais sabores tem dentro dele. Mas ele não vai pegar do meio, e fez isso apenas para poder decidir melhor quais sabores irá escolher tirar das pontas em cada uma de suas paradas. Agora, André precisa calcular o número mínimo de vezes que ele deve parar para pegar seus mentos, seguindo o método descrito, até eles acabarem. Ele calcularia isso facilmente usando Transformada de Fourier, mas ele está ocupado codando uma questão. Por isso cabe a você, um companheiro de time dele, fazer isso para ajudá-lo.",
        "titulo": "André e os Mentos",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 200), o número de casos de teste. Cada caso de teste começa com uma linha com um inteiro N, o número de mentos do tubo (1 ≤ N ≤ 1000). Na linha seguinte, há N inteiros, o i-ésimo deles é o número do sabor do i-ésimo mentos no tubo. Cada um desses números está entre 1 e 10⁹."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1579",
        "saida": "Para cada caso de teste de entrada, seu programa deverá imprimir uma linha, informando o peso do caminhão mais carregado seguido por um espaço e o valor total do frete cobrado pelo dia de trabalho.",
        "descricao": "Há alguns anos, algumas empresas vem atuando forte na produção de energia baseada em painéis solares. Obviamente o local mais adequado para isso são os desertos. No deserto de Mojave, nos Estados Unidos, já foram instalados várias usinas para geração de energia solar, como por exemplo a usina Solar Nellis, que fica na Base Aérea de Nellis, em Clark County, Nevada. Esta usina gera mais de 30 milhões de quilowatts-hora de eletricidade por ano. O projeto de 100 milhões dólares americanos começou a produção de energia no final de 2007, a planta é alimentada por 72.000 painéis solares de rastreamento do sol cobrindo 140 acres. Além da Nellis, outras usinas como a Sierra Sun Tower, Copper Mountain, Solar One e outras foram construídas neste mesmo deserto. A Espanha já utiliza uma usina solar no deserto do Saara que foi construída pela Solar Millenium. O projeto deu tão certo que agora outras empresas estão iniciando novos projetos nesta região para gerar energia para a Europa. Bem, você possui uma empresa de transportes com muitos caminhões e foi contratado pela empresa Delta Solar fazer o transporte de painéis solares no Saara. Os painéis possuem tamanhos e pesos diferentes relacionados com a estrutura de cada conjunto de painéis, que muda de acordo com o local aonde deverão ser instalados. O transporte deles deverá ser feito na sequência correta, que é exatamente a sequência na qual eles aparecem na entrada. O cálculo do frete é feito de acordo com o peso dos painéis transportados pelos seus caminhões e a distância que os caminhões deverão percorrer. Foi acertado que você informe todo dia a quantidade de caminhões disponíveis (isso muda porque alguns vão para manutenção, outros novos chegam, etc) e um encarregado da Delta Solar vai tentar separar as cargas para minimizar o valor do transporte, uma vez que por um acerto inicial, pagarão o frete utilizando como referência a carga mais pesada transportada no dia, multiplicada pelo número de caminhões utilizados no trasporte.",
        "titulo": "Transporte de Painéis Solares",
        "entrada": "A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste (ou dias de trabalho no deserto). Cada caso de teste é composto por duas linhas. A primeira linha contém três valores inteiros nPaineis (4 ≤ nPaineis ≤ 100), caminhoes (1 ≤ caminhoes ≤ 10) e frete (1 ≤ frete ≤ 50) separados por um espaço, que indicam respectivamente a quantidade de painéis que devem ser transportados, número de caminhões utilizados para o transporte e o frete cobrado por cada caminhào para cada kg transportado. A linha seguinte contém o peso (1 ≤ peso ≤ 1000) de cada um dos painéis, separados por um espaço em branco."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1494",
        "saida": "Para caso de teste, seu programa deve imprimir uma linha de saída. Esta linha contêm um inteiro representando o número de anagramas-múltiplos-de-onze de N. Como essa número pode ser muito grande, você deve imprimir o resto da divisão dele por 10^9 + 7.",
        "descricao": "Neste problema, nos referimos aos dígitos de um inteiro positivo como uma sequência de dígitos necessária para escrevê-lo na base 10 sem zeros precedentes. Por exemplo, os dígitos de N = 2090 são 2, 0, 9 e 0. N é um inteiro positivo. Nós chamamos um inteiro positivo M como um anagrama-multiplo-de-onze de N se e somente se (1) os dígitos de M são um permutação dos dígitos de N, e (2) M é um múltiplo de 11. Você deve escrever um programa que dado N, calcula o número de anagramas-multiplos-de-onze. Como exemplo, considere novamente N = 2090. Os valores que atendem a primeira condição acima são 2009, 2090, 2900, 9002 9020 e 9200. Entre eles, somente 2090 e 9020 satisfazem a segunda condição, por isso a resposta para N = 2090 é 2.",
        "titulo": "Onze",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com um inteiro N (1 <= N <= 10^100)."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1055",
        "saida": "Para cada caso, mostre o número do caso de teste seguido pela soma permutada elegante.",
        "descricao": "São disponibilizados a você n inteiros A1 A2 A3 ... An. Encontre uma permutação destes n inteiros de forma que a soma da diferença absoluta entre os elementos adjacentes seja maximizada. Supondo n = 4 e que os inteiros fornecidos sejam 4 2 1 5. A permutação 2 5 1 4 permite a máxima soma. Para esta permutação, teríamos soma = abs(2-5) + abs(5-1) + abs(1-4) = 3+4+3 = 10. De todas as 24 permutações possíveis, você não vai obter qualquer soma cujo valor exceda 10. Nós iremos chamar este valor 10, de soma permutada elegante.",
        "titulo": "Soma Permutada Elegante",
        "entrada": "A primeira linha de entrada é um valor inteiro T ( T < 100 ) que representa o número de caso de testes. Cada caso de teste consiste de uma linha que inicia com n ( 1 < n < 51 ) seguida por n inteiros não-negativos, separados por um único espaço. Nenhum dos elementos da permutação fornecida irá exceder 1000."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1608",
        "saida": "Para cada caso imprima o número máximo de bolos do mesmo tipo que podem ser confeccionados.",
        "descricao": "Dona Maria é uma senhora que está aposentada e faz doces. Ela começou a fazer bolos para complementar a renda da família. Para fazer um bolo, Dona Maria precisa de certa quantidade de alguns ingredientes diferentes. Cada ingrediente tem um custo fixo por unidade. Ela tem uma quantia de dinheiro D máxima para gastar na compra dos ingredientes. Dentre os tipos de bolos que existem, você deve escolher apenas um tipo, de maneira a maximizar a quantia de bolos. Calcule o número máximo de bolos de um único tipo que podem ser confeccionados.",
        "titulo": "Bolos da Maria",
        "entrada": "Na primeira linha terá um inteiro T (T ≤ 100) indicando o número de casos de teste. Para cada cada caso de teste, na primeira linha haverá três números inteiros D (1 ≤ D ≤ 109), I (1 ≤ I ≤ 100) e B (1 ≤ B ≤ 100) indicando o dinheiro que Dona Maria tem, o número de ingredientes existentes e a quantidade de tipo de bolos existentes, respectivamente. A próxima linha conterá I números inteiros indicando o preço da unidade de cada ingrediente. Seguem B linhas seguirão descrevendo cada bolo. O i-ésimo bolo é descrito da seguinte maneira: inicialmente há um número Qi (1 ≤ Qi ≤ 100) que indicará quantos ingredientes diferentes serão necessários. Logo em seguida teremos Qi pares de números indicando respectivamente o índice do ingrediente e a quantidade necessária, todos na mesma linha separados por espaços. A quantia de cada ingrediente em um bolo poderá variar de 1 até 1000. Cada unidade de um ingrediente custará entre 1 e 1000. Os ingredientes na descrição de cada bolo serão diferentes. Os identificadores de ingrediente vão de 0 até I-1."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2115",
        "saida": "Para cada instância seu programa deverá imprimir o menor instante em que a tarefa que for processada por último terminará seu processamento.",
        "descricao": "Ecaterimburgo é uma cidade russa localizada na fronteira entre a Europa e a Ásia, nos montes Urais. É a quarta maior cidade da Rússia com mais de 1,4 milhões de habitantes. A principal atividade econômica da cidade está relacionada com a produção de máquinas industriais. As fábricas da cidade produzem boa parte de todas as máquinas usadas na Rússia e exportada para diversos países de todo o mundo. Em especial a produção de ferramentas industriais é famosa no país. As ferramentas são produzidas por máquinas altamente especializadas, e, para cada ferramenta a ser produzida as máquinas gastam um tempo pré-estabelecido para sua produção. Uma das fábricas possui apenas uma dessas máquinas e seu gerente precisa da sua ajuda para melhorar sua produtividade. Os pedidos de ferramentas chegam na fábrica de forma contínua, isto é, no início do dia nem todos os pedidos podem ser processados, pois estes estarão disponíveis ao longo do dia. O gerente acha que os funcionários não estão escolhendo bem a ordem na qual os pedidos são atendidos e quer analisar as sequências de pedidos de dias anteriores. Dessa forma, ele pede que você determine, para um dado dia, o menor instante possível em que todos os pedidos estariam finalizados.",
        "titulo": "Produção em Ecaterimburgo",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância começa com o número N (1 ≤ N ≤ 105) de tarefas que serão processadas no dia. As N linhas seguintes têm o tempo di em que a tarefa estará disponível e o tempo pi de processamento da tarefa na máquina (1 ≤ di, pi ≤ 104). O início do processamento se dá no instante 1."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1510",
        "saida": "Para cada caso teste imprima uma única linha com \"Case #R: S\" onde R é o número do caso teste (começando de 1) e S é o lucro máximo que Skyrk consegue obter. Considere o primeiro caso teste, existem 3 pontos turísticos, 4 binóculos e 2 grupos de turistas. O primeiro grupo de turistas é abordado da seguinte forma: O primeiro turista pode pagar no máximo 1 moeda. Não existe nenhum subconjunto que Skyrk possa escolher para satisfazer o turista, logo o turista não faz o passeio e não paga nada. O segundo turista pode pagar até 2 moedas, a única escolha que Skyrk tem é colocar os binóculos 2 e 4 no subconjunto, o turista então escolhe 2 e 4 e paga 2 moedas. O terceiro turista pode pagar até 3 moedas. Skyrk pode colocar os binóculos 1, 2 e 3 no subconjunto, o turista então escolhe binóculos 2 e 3 e paga 3 moedas. O segundo grupo de turistas é abordado da seguinte forma: O primeiro turista pode pagar até 10 moedas. Skyrk pode colocar binóculos 1 e 3 no subconjunto, o turista então escolhe binóculos 1 e 3 e paga 6 moedas. O máximo lucro que Skyrk pode obter é 2+3+6 = 11 moedas..",
        "descricao": "Skyrk agora está vivendo em uma cidade antiga, cheia de velhas histórias e monumentos para conhecer. Não é nenhuma surpresa que essa cidade se transformou em uma das maiores atrações turísticas do mundo. Infelizmente, é muito difícil de se locomover pela cidade, já que ela é muito antiga e cercada por montanhas, suas ruas são apertadas, cheias de curvas e sobes e desces. No entanto isso se mostrou muito interessante para Skyrk, ele acha que muitos turistas vão preferir ver os pontos turísticos olhando do topo das montanhas ao invés de se aventurarem na antiga cidade. Ele decidiu colocar vários binóculos em alguns lugares da maior montanha do lado da cidade, e claro, cobrar pelo seu uso. A cidade tem N pontos turísticos, olhando do topo da montanha, eles parecem se alinhar da esquerda para direta. Skyrk colocou M binóculos, cada um cobrindo a visão do ponto turístico A até o B e custando C moedas para usar. Um grupo de turistas chegou para apreciar a vista, e eles querem ver todos os pontos turísticos pagando o menor preço. Skyrk sabe previamente o preço que cada turista está disposto a pagar pelo passeio. De forma a maximizar seus lucros, ele vai contar ao turista que apenas um subconjunto de binóculos estão funcionando, de forma que quando o turista escolher os que ele quer, ele acabe pagando mais.",
        "titulo": "O Passeio Turístico",
        "entrada": "A primeira linha contém T (T ≤ 100) – o número de casos teste, após essa linha haverão T casos teste. Cada caso teste começa com uma linha com três inteiros N, M, K (1 ≤ N ≤ 109; 1 ≤ M ≤ 30; 1 ≤ K ≤ 104) – O número de pontos turísticos, binóculos e grupos de turistas, respectivamente. Então haverá M linhas com três inteiros A, B, C (1 ≤ A ≤ B ≤ N; 1 ≤ C ≤ 10) – O primeiro e último ponto turśtico que o binóculo pode ver e seu preço, respectivamente. Então haverá K linhas com dois inteiros X, Y (1 ≤ X ≤ Y ≤ 109) – haverá um grupo turístico onde o primeiro está disposto a pagar X, o segundo X+1, o terceiro X+2, até o último que está disposto a pagar Y. Cada ponto turístico pode ser visto por pelo menos um binóculo."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1878",
        "saida": "Para cada caso de teste, imprima a linha \"Lucky Denis!\" se a função pode ser usada por Denis, ou \"Try again later, Denis...\" em caso contrário.",
        "descricao": "Denis é um professor de programação competitiva muito justo. Em sua disciplina, ele faz uma sequência de N torneios de programação para avaliar seus M alunos. A última ideia de Denis foi premiar os três alunos que se saírem melhor nos torneios. Para isto, Denis teve a ideia de criar a seguinte função classificatória. f(T1,T2,...,TN) = c1T1 + c2T2 + ... + cNTN Na função, a N-upla (T1,T2,...,TN) indica as classificações de um aluno nos N torneios. Por exemplo, se há dois torneios, um aluno fica em terceiro lugar no primeiro torneio e em primeiro lugar no segundo torneio, seu par ordenado é (3, 1). Como Denis quer ser o mais justo possível, ele não quer que haja possibilidade de empate. Como ele também está com preguiça de tentar provar que sua função é livre de empates, ele pediu a sua ajuda para fazer um programa que, dados os coeficientes c1, c2, ..., cN, determine se a função pode de fato ser usada para classificação. Ou seja, se a função não irá classificar dois alunos distintos igualmente. Observe que o software utilizado por Denis para classificar seus alunos em um torneio é livre de empates. Ou seja, não é possível que dois alunos fiquem em primeiro lugar em um mesmo torneio, ou em segundo lugar, etc.",
        "titulo": "Torneios em Sequência",
        "entrada": "A entrada é composta por vários casos de teste e termina com fim de arquivo. A primeira linha de um caso de teste é composta por dois inteiros N e M, que são respectivamente o número de torneios realizados por Denis e o número de alunos que irão competir em cada torneio, onde 1 ≤ N ≤ 3 e 1 ≤ M ≤ 10. Em seguida são dados N inteiros c1, c2, ..., cN, os coeficientes da função de Denis, onde ci ≥ 1 para todo i. Em um caso de teste, é garantido que os valores da função de Denis não passam de 109."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1784",
        "saida": "Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é a resposta da questão.",
        "descricao": "Há N jacutingas em uma floresta, cada um em sua respectiva árvore. Há N jaburus cansados voando nesta floresta, e eles desejam pousar em árvores diferentes o mais cedo possível (jaburus são muito briguentos e não conseguem dividir uma mesma árvore). A cada Pi minutos, a jacutinga i sai da árvore para voar um pouco, e pode-se considerar que ela volta instantaneamente. A cada Ci minutos, o jaburu i pode tentar pousar em uma árvore em que a jacutinga não se encontre, e caso não consiga, volta instantaneamente a voar. Pode-se considerar que jaburus voam mais rápido que jacutingas e conseguem ocupar as árvores mais rápido do que elas. Dado uma estratégia ótima entre os jaburus, qual o menor tempo em que todos os jaburus estarão relaxando, cada um em uma árvore diferente?",
        "titulo": "Jacutingas vs Jaburus",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com um inteiro N (1 ≤ N ≤ 9), o número de jacutingas e de jaburus. A segunda linha do caso de teste contém N inteiros Pi (1 ≤ Pi ≤ 10⁴), como descrito na questão. A terceira e última linha do caso de teste contém mais N inteiros Ci (1 ≤ Ci ≤ 10⁴), como também descrito na questão."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1602",
        "saida": "Para cada instância, imprima uma linha com a quantidade de hiperprimos no intervalo [2, N].",
        "descricao": "Várias descobertas matemáticas da idade média são devidas a matemáticos árabes famosos como al-Khwarizmı 1, Omar Khayyám, e Sharaf al-Dın al-Tusı entre outros. Um dos resultados pouco conhecido é sobre os números hiperprimos. Dizemos que um número é hiperprimo se ele tiver um número primo de divisores. Assim, por exemplo, 25 é hiperprimo, pois tem 3 divisores. Já 42 não é hiperprimo, pois tem 8 divisores. Dado um inteiro N, determine o número de hiperprimos no intervalo [2, N].",
        "titulo": "Hiperprimos",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de uma única linha contendo um único inteiro, N (2 ≤ N ≤ 2 × 106)."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1833",
        "saida": "Para cada caso de teste deve ser impressa a mensagem \"Caso #t: R$ C\", onde t é o número do caso de teste (cuja contagem tem início no número um) e C é o valor do serviço, com duas casas decimais, representando os centavos, sem separador de milhar e com a vírgula separando os reais dos centavos. Ao final de cada mensagem deve ser impressa uma quebra de linha.",
        "descricao": "Maria bem que tentou ajustar a decoração natalina de seu comércio, mas o resultado final não a agradou: o jeito foi contratar uma empresa especializada no ramo de decorações natalinas. O serviço que ela precisa é simples até: colocar N luzes de pisca-pisca coloridas em uma dada sequência, mas seus ajudantes conseguiram apenas colocar M lâmpadas em uma sequência que não era a desejada. A empresa conta com profissionais do ramo, que fazem o serviço com rapidez e eficiência, e tarifa seu serviço pelo tempo que o profissional levaria para concluí-lo se trabalhasse de maneira ótima. No caso de montagem de pisca-pisca, o profissional leva 30 segundos para remover uma lâmpada já instalada, um minuto para trocar uma lâmpada já instalada por outra de outra cor e dois minutos e meio para inserir uma nova lâmpada na armação (esta tarefa demanda mais tempo que as demais porque é necessário inserir um novo contato na fiação). Dado o valor cobrado pela empresa para cada minuto de trabalho, em reais, a sequência desejada de N lâmpadas e a sequência de M lâmpadas montadas na ordem não desejada, calcule o valor do serviço da empresa, em reais.",
        "titulo": "Decoração Natalina",
        "entrada": "A entrada consiste em T (T ≤ 1.000) casos de teste, onde o valor de T é informado na primeira linha da entrada. Cada caso de testes é representado por até cinco linhas: a primeira delas contém o valor R (1 ≤ R ≤ 10), em reais, que a empresa cobra por minuto de serviço. A linha seguinte contém o número M (0 ≤ M ≤ 100) de lâmpadas da sequência errada, e as M cores desta sequência são dadas na linha abaixo (caso M seja maior do que zero), separadas por espaços em branco. Estas cores são strings de caracteres de tamanho S (1 ≤ S ≤ 50) e há, no máximo, 20 cores distintas em cada caso de teste. De forma semelhante, as últimas duas linhas do caso de teste contém a quantidade N (0 ≤ N ≤ 100) de lâmpadas da sequência desejada e a relação das N cores que deve compôr a montagem final."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1416",
        "saida": "Para cada caso de teste da entrada imprima dois inteiros positivos separados por um espaço, indicando a menor e a maior penalidade por erro que não alteraria a colocação final. Se não existir um limite superior para a penalidade por erro, imprima um \"*\" ao invés do limite superior.",
        "descricao": "Charles é o diretor de torneio do torneio regional do ICPC de Tumbolia. Sua responsabilidade é garantir que o torneio corra perfeitamente, que as regras sejam seguidas, e, claro, anunciar o placar final da competição. De acordo com as regras do ICPC, um time com mais problemas resolvidos fica acima de um time com menos problemas resolvidos. Se dois times têm o mesmo número de problemas resolvidos, o time com a menor penalidade fica acima (no caso de os dois times terem o mesmo número de problemas resolvidos e a mesma penalidade, Charles considera eles empatados). A penalidade total de um time é a soma da penalidade de todos problemas que o time resolveu. A penalidade de um problema é TP + EP x FA, onde TP é a penalidade de tempo para aquele problema, EP é a penalidade de erro do competidor e FA é o número de tentativas frustradas de resolver o problema antes de submeter uma solução certa. A penalidade de tempo para um problema é o tempo desde o início da competição, em minutos, que time demorou para resolver o problema. A penalidade de erro é um inteiro positivo escolhido pelo diretor do torneio, designada para premiar times que submetam soluções corretas na primeira tentativa. Charles quer mudar a penalidade de erro do valor \"padrão\" de 20 minutos para esquentar as coisas. Para estudar os efeitos dessa mudança no placar final, ele quer saber o limite de penalidades de erro que não mudam as posições finais. Em outras palavras, se o time A está na frente do time B no placar original, então A deve estar na frente de B no placar modificado; se A e B estão empatados no placar original, eles devem estar empatados no placar modificado (o placar original é aquele obtido com uma penalidade de erro de 20 minutos). Charles está muito ocupado organizando a regional Tumboliana, então ele pediu para você fazer um programa que vai calcular o limite para ele.",
        "titulo": "Placar do ICPC",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de cada caso de teste contém dois inteiros T e P separados por um espaço, indicando o número de times e o número de problemas, respectivamente (2 ≤ T ≤ 100, 1 ≤ P ≤ 10). Cada uma das próximas T linhas descreve a performance de um time. A descrição da performance de um time é uma linha contendo P descrições de problemas separados por um espaço em branco. Os times não são necessariamente dados na ordem da colocação final. A descrição de cada problema é uma string \"A/S\", onde A é um inteiro representando o número de tentativas que o time correspondente fez para resolver o problema (0 ≤ A ≤ 100), e S pode ser tanto \"-\", se o time não resolveu o problema, ou um inteiro indicando quantos minutos o time demorou para submeter um solução correta (1 ≤ S ≤ 300). Tentativas feitas depois da primeira correta não são contadas. O final da entrada é dado por T = P = 0."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1473",
        "saida": "Seu programa deve produzir uma única linha para cada caso de teste, contendo um único inteiro, o número mínimo de trocas de linhas e colunas que devem ser realizadas pelo guindaste para recolocar os contêineres na posição original. Se não for possível colocar os contêineres na posção original, utilizando apenas trocas de linhas e colunas, imprima o caractere ‘*’.",
        "descricao": "Um carregamento de Nlogs, principal produto de exportaçãao de Nlogônia, está no porto, em contêineres, pronto para ser embarcado. Todos os contêineres têm as mesmas dimensões e são cubos. Os contêineres estão organizados no pátio do porto em L linhas e C colunas, num total de LC contêineres. Cada contêiner está marcado com um número de identificação distinto, de 1 a LC. Cada uma das L Linhas de Contêiners será embarcada em um navio distinto. Para facilitar o desembarque nos divesos países em que serão entregues, os containeres de uma linha devem estar organizados de forma que os números de identificação estejam ordenados. Mais precisamente, a linha 1 foi organizada no pátio de forma a conter os contêineres identificados de 1 a C ordenados crescentemente, a linha 2 de forma a conter os contêineres de C + 1 a 2C (ordenados crescentemente), e assim por diante, até a linha L, organizada de forma a conter os contêineres de (L − 1)C + 1 a LC (ordenados crescentemente). A figura (a) abaixo mostra a organização de um carregamento com 5 linhas e 4 colunas de contêineres. O guindaste de embarque é capaz de movimentar ou uma linha completa ou uma coluna completa de contêineres, não sendo capaz de movimentar outros tipos de agrupamentos ou contêineres individuais. Na noite anterior ao embarque, um grupo de estivadores operou os guindastes para trocar linhas e colunas do carregamento, como forma de protestar quanto aos baixos salários. A figura (b) acima mostra a configuração dos contêineres após a troca das linhas 1 e 4; a figura (c)mostra a configuração após mais uma troca, entre as colunas 2 e 3. O carregamento precisa ser embarcado ainda hoje, mas antes disso é necessário que os contêineres sejam reorganizados da forma descrita. Você deve escrever um programa que, dada a informação sobre a posição de cada contêiner após o protesto, determine se é possível recolocar os contêineres na forma originalmente prevista utilizando apenas os guindastes, e nesse caso calcular o menor número de trocas de linhas e colunas necessário para esse fim.",
        "titulo": "Linhas de Contêiners",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros L e N (1 ≤ L, N ≤ 300) indicando respectivamente o número de linhas e o número de colunas do carregamento. As L linhas seguintes descrevem a posição dos contêineres depois do protesto dos estivadores. Cada uma dessas L linhas contém C números inteiros Xl,c (1 ≤ Xl,c ≤ LC) indicando a posição de um contêiner. Cada número inteiro entre 1 e LC aparece na entrada, em alguma das L linhas. É garantido que cada número na configuração apareça uma única vez cada e que todos os números entre 1 e LC aparecerão na mesma. O final da entrada é determinado por EOF (fim de arquivo)."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1777",
        "saida": "Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é o número de estrelas que estão cobertas por alguma câmera.",
        "descricao": "Na calçada da fama, há várias estrelas no chão com os nomes dos artistas. Alguns vândalos, talvez por inveja ou talvez pelo simples fato de querer vandalizar, estavam pichando várias dessas estrelas e colocando outros nomes no lugar: O prefeito, afim de tentar minimizar esse problema, instalou várias câmeras nessa calçada. A calçada pode ser vista como um segmento [1..N], onde cada posição possivelmente se encontra uma estrela. Cada câmera protege um segmento [a..b], inclusivos. Deseja-se saber, para cada estrela, se elas estão cobertas por uma câmera ou não. Você foi contratado para fazer esse trabalho.",
        "titulo": "Calçada da Fama",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com dois inteiros N (1 ≤ N ≤ 10⁹) e C (1 ≤ C ≤ 10⁴), o tamanho da calçada e o número de câmeras, respectivamente. A seguir há C linhas, cada uma descrevendo uma câmera i com dois inteiros ai e bi (1 ≤ ai ≤ bi ≤ N), representando o intervalo coberto pela câmera. A seguir, há um número E (1 ≤ E ≤ 10⁴), o número de estrelas. A seguir há uma linha com E inteiros xi, indicando a posição da estrela i na calçada (1 ≤ xi ≤N)."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2099",
        "saida": "Imprima uma linha contendo um inteiro representando o número de diferentes formas de distribuir N pedras nas montanhas para que Jaimito garanta a vitória no jogo contra Jimenez. Como a resposta pode ser um número muito grande, você deve imprimir apenas o resto de sua divisão por 109 + 7.",
        "descricao": "O Jaimito adora brincar com N pedras idênticas que lhe deram para empilhar em seu aniversário para formar montanhas de vários tamanhos. Sua felicidade seria completa se não fosse por sua mãe, Jimenez, que sempre lembra que no final de cada dia vem a Hora de Organizar as Pilhas (HOP). É neste ponto que Jaimito deve destruir as montanhas de pedras, construídas com tanto esforço. Como Jimenez sabe o quanto a HOP incomoda o seu filho, propõe um jogo para a tarefa se torna mais divertida. Jaimito e sua mãe têm turnos para jogar, com Jaimito começando o jogo por ser o mais novo. Inicialmente, há várias montanhas, cada uma composta por um determinado número de pedras. Por sua vez, cada jogador escolhe uma montanha que tem mais do que uma pedra e a divide para formar duas montanhas, não necessariamente do mesmo tamanho. O jogo continua até que um dos dois jogadores não pode fazer um movimento válido, no qual o jogador é declarado o perdedor, e o outro como vencedor. Jaimito é muito inteligente, e se deu conta de que ele pode distribuir N pedras para formar montanhas estrategicamente, de modo que quando você começar a jogar com esta distribuição, você irá garantir a vitória na HOP. Por causa da forma como o jogo funciona, Jaimito não considera que duas distribuições iniciais são diferentes se diferem apenas na ordem em que se encontram as montanhas. Isto significa que para considerar duas distribuições iniciais diferentes, elas devem ter diferentes números de montanhas, ou, se o número de montanhas é o mesmo, devem ser as pedras distribuídas de forma diferente dentro das montanhas. Por exemplo, se Jaimito tem N = 4 pedras, existem cinco distribuições iniciais diferentes: quatro montanhas de uma pedra; duas montanhas de uma pedra e mais uma com duas pedras; uma montanha de uma pedra e uma com três pedras; duas montanhas de duas pedras; e, por último, uma montanha com quatro pedras. Como Jaimito não gostaria que sua mãe percebesse que está sendo enganada, ele pretende alterar a distribuição inicial de N pedras todos os dias. Ele está convencido de que existem muitas distribuições iniciais diferentes que garantem ganhar o jogo, mas ainda não sabe com certeza quantos. Por exemplo, se n = 4 pedras, Lourie tem apenas duas escolhas possíveis: uma única montanha com quatro pedras ou duas montanhas com duas pedras. A tarefa de sua equipe neste problema é ajudar Jaimito na contagem de quantas maneiras diferentes pode distribuir suas N pedras nas montanhas de modo ter garantido a vitória no jogo contra Jimenez. Então Jaimito pode ficar tranquilo sabendo quantos dias pode ganhar o jogo sem a mãe suspeitar de suas boas intenções.",
        "titulo": "Jogando Com Pedras",
        "entrada": "Uma única linha contendo um número inteiro N indicando o número de pedras que possui Jaimito (2 ≤ N ≤ 1000)."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2105",
        "saida": "Para cada instância na entrada, imprima uma linha com N inteiros p1, p2, ... , pN, onde pk é a probabilidade (em porcentagem) de, após infinitas rodadas, o jogador parar na casa k. Os números devem estar separados por espaços e ter 3 casas decimais.",
        "descricao": "A Maratona de Programação é um evento que acontece todos os anos com a ajuda de organizações e pessoas que são entusiastas da idéia de competições científicas. Dentre as motivações para participar dela, estão o aumento dos conhecimentos relacionados a algoritmos (e todas as àreas da matemática em geral), a melhora na estrutura de raciocínio, a melhora na velocidade de digitação e também a rede social criada com pessoas de alto nível na área de computação. Para os competidores da Unicamp, no entanto, a motivação é outra. O que leva essas pessoas a participarem da maratona é a oportunidade de viajar para ficar num hotel jogando jogos de tabuleiro. Na última maratona houve competições acirradas de várias modalidades de jogos, entre eles um chamado Banco Imobiliário. O objetivo desse jogo é garantir o maior acúmulo de capital possível através de especulação imobiliária. André foi um dos participantes do jogo, e acabou perdendo todas as partidas para seu colega de time Felipe, que foi acusado de bruxaria pela magnitude das vitórias obtidas, num jogo que teoricamente depende apenas de sorte e persuasão. Uma das coisas que mais indignou André foi ele não ter conseguido comprar os terrenos mais caros, enquanto Felipe sempre os comprava. Felipe tentou convencer André de que não praticava mais bruxaria há anos, e que ele não caiu nos territorios caros porque a probabilidade era muito pequena. Para ajudar Felipe a convencer André das probabilidades no tabuleiro, você escreverá um programa que, dada a descrição de um tabuleiro, calcule qual é a probabilidade de se cair numa determinada casa do tabuleiro após infinitas rodadas. O tabuleiro é descrito como uma sequencia de N casas. O tabuleiro é circular, ou seja, após a N-ésima casa, você vai para a primeira casa. Algumas casas são especiais, e te mandam imediatamente para outra casa. No início do jogo, todos estão na casa número 1, e a cada rodada os jogadores lançam um dado de D lados, que vai dizer quantas casas o jogador deve avançar. A descrição do tabuleiro é uma sequência de N inteiros, cada inteiro é: -1 se é uma casa normal; K se for uma casa especial, onde K é um inteiro representando o índice da casa para onde o jogador será imediatamente enviado (o índice da primeira casa é 0). A K-ésima casa é uma casa normal. Por exemplo, se o tabuleiro for descrito como -1 -1 0 1 -1 0, temos um tabuleiro com 6 casas, sendo que a primeira, a segunda e a quinta casa são normais. Se o jogador cai na terceira ou sexta casa, é enviado imediatamente (na mesma rodada) para a casa de índice 0 (a primeira). Se cai na quarta casa, é enviado para a casa de índice 1 (a segunda). Além disso, será dada a quantidade de lados do dado usado, que podem ter de 3 a 20 lados.",
        "titulo": "Monopólio",
        "entrada": "A entrada contém várias instâncias. Cada instância é composta por duas linhas. Na primeira linha, serão dados dois números inteiros N (3 ≤ N ≤ 1000) e D (3 ≤ D ≤ 20), separados por um espaço em branco, indicando respectivamente a quantidade de casas no tabuleiro e o número de lados no dado. Na segunda linha serão dados N números inteiros a1, a2, ... aN (-1 ≤ ai ≤ N-1) separados por espaços em branco, que é a descrição do tabuleiro como explicado no enunciado. A entrada termina quando N = D = 0."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1474",
        "saida": "Como o número de formas diferentes de se formar a fila pode ser muito grande, Ricardinho está interessado nos últimos 6 dígitos da quantidade. Assim, para cada caso de teste, seu programa deve produzir uma única linha contendo exatamente 6 dígitos, correspondentes aos últimos dígitos da solução.",
        "descricao": "Competições de programação normalmente exigem infraestrutura e organização por parte dos responsáveis. Um problema que frequentemente deve ser resolvido é em relação ao transporte. Ao participar de uma competição recente, Ricardinho ficou observando os ônibus e micro-ônibus utilizados no transporte dos competidores, todos enfileirados um atrás do outro enquanto os competidores desembarcavam. Os veículos eram todos de uma mesma empresa, embora tivessem pinturas distintas. Ricardinho começou a se perguntar de quantas maneiras aquela fila poderia ser formada, usando ônibus e micro-ônibus daquela empresa. Cada ônibus tem 10 metros de comprimento. Já os micro-ônibus possuem 5 metros de comprimento. A partir de um dado comprimento total a ser alcançado com ônibus e micro-ônibus enfileirados, e das quantidades de cores diferentes para ônibus e micro-ônibus, Ricardinho quer saber de quantas formas uma fila pode ser formada.",
        "titulo": "Ônibus",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por apenas uma linha, contendo três inteiros N(5 ≤ N ≤ 1015 e N é múltiplo de 5), K(1 ≤ K ≤ 1015) and L(1 ≤ L ≤ 1015), separados por espaço. O inteiro N representa o comprimento total, em metros, da fila que Ricardinho está considerando. K e L representam o número de cores distintas disponíveis para micro-ônibus e ônibus, respectivamente. Note que, como os inteiros N,K e L podem ser muito grandes, recomenda-se o uso de inteiros de 64 bits. O final da entrada é determinado por EOF."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1203",
        "saida": "Para cada caso de teste imprima uma linha apenas com \"S\" (aspas apenas para evidenciar), se é possível escolhermos as regiões da maneira descrita anteriormente, ou \"N\" (idem), se não for possível.",
        "descricao": "Todos conhecem o famoso problema das pontes de Königsberg, cidade da Prússia que ficou famosa pelo problema resolvido por Euler ainda no século XVIII. Poucos conhecem, entretanto, o problema das pontes de São Petersburgo. A cidade de São Petersburgo localiza-se às margens do Rio Neva, e é cruzada por dezenas de pontes que ligavam as margens do rio às centenas de pequenas ilhas que o rio possui. Os moradores da cidade, conhecedores do famoso problema das pontes de Königsberg, criaram seu próprio problema. Os moradores sabem que existem K pontes na cidade, que são R regiões distintas na cidade e que cada ponte liga exatamente 2 regiões distintas da cidade. Os moradores querem saber se, para a cidade deles, é possível escolher algumas destas regiões tais que o número de pontes que incide em todas elas é igual a K. Note que, se duas destas regiões escolhidas tiverem uma ponte entre elas, esta ponte será contada duas vezes.",
        "titulo": "Pontes de São Petersburgo",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada caso de teste contém dois números, R (2 ≤ R ≤ 100) e K (1 ≤ K ≤ R * (R-1) / 2), o número de regiões e pontes da cidade, respectivamente. Por efeito de simplificação, as regiões são enumeradas de 1 até R, inclusive. A seguir temos K linhas, cada uma delas contendo dois números A e B, informando que existe uma ponte ligando as regiões A e B da cidade."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2119",
        "saida": "A saída do número de vezes Goão pode utilizar a via desejada módulo 109 + 9.",
        "descricao": "Goão Juilherme é um estudante na Organização Educacional Farias Brito. Uma vez que ele falta muitas aulas, seu supervisor Parcelo Mena pede-lhe constantemente para ir ao seu escritório para repreendê-lo. Farias Brito é uma escola bastante estranha, tendo muito mais escadas do que pisos, e algumas escadas vão diretamente de um andar para outro muitos níveis acima. Goão não gosta de mudanças, então ele decide que quer usar apenas a mesma rota para chegar ao escritório de Parcelo, no entanto, ele não quer fazer a mesma coisa todos os dias. Goão então resolve ele vai subir as escadas de diferentes maneiras, às vezes ele vai saltar dois degrau e em seguida, subir apenas um ou ele pode subir um e saltar dois ou ainda subi um e depois um e assim por diante. Juilherme agora precisa de sua ajuda para determinar a rota que ele pode usar a maior quantidade de vezes antes que ele tenha de repetir a maneira como ele sobe uma escada dela. Uma vez que ele tem uma memória finita, ele só se preocupa com o quantidade modulo 109 + 9. Nota: Para subir uma escada, a soma dos tamanhos de saltos que Goão usa deve ser igual a quantidade de passos na escada.",
        "titulo": "Goão e Escadas",
        "entrada": "A entrada começa com três inteiros N (N ≤ 10000), M (N ≤ 100000) e K (K ≤ 1000), respectivamente, o número de andares, o número de escadas e o número de diferentes tamanhos de salto de Goão. A linha a seguir contêm K numeros, as alturas dos saltos de Juilherme. Os últimos M linhas contêm três inteiros, A, B e C (0 ≤ A ≠ B ≤ N - 1, 1 ≤ C ≤ 1000), descrevendo que uma escada conecta andares A e B e tem etapas C, Juilherme começa sempre piso 0 e o escritório de Mena é no piso N - 1."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2036",
        "saida": "Para cada teste, você deve imprimir uma linha contendo um único número inteiro, que representa o número mínimo de peças que têm de ser deslocadas, de modo a manter a distância entre peças consecutivas sempre inferior ou igual a H. Note que a primeira e a última peça não podem ser movidas, e que a ordem relativa entre as peças não pode ser alterada. Se for impossível alcançar o resultado desejado, imprimir o número -1.",
        "descricao": "O efeito dominó é um fenômeno que ocorre quando, em uma linha de peças de dominó, cada uma sobre o seu menor lado, a primeira peça a partir de uma das extremidades cai em direção à próxima peça. Por sua vez, esta segunda peça cai sobre a terceira na linha, e assim por diante até que a outra extremidade da linha seja atingida, e então todas as peças terão caído. Note que para que isso aconteça, a distância entre as peças consecutivas na linha deve ser menor ou igual à altura das peças. Emma encontrou recentemente sobre o efeito dominó e foi imediatamente surpreendida por ele. Ela passou toda a manhã formando uma linha com N peças de dominó que seu irmão Ezequiel deu a ela, mas pouco antes de fazer a primeira peça cair, sua avó foi a casa dela e levou-a para brincar no parque. Ezequiel sabe que Emma não levou em conta a distancia entre as peças consecutivas quando ela formou sua linha de dominó, e não quer vê-la frustrada se todas as peças não caírem depois que ela derrubar a primeira. Assim, Ezequiel quer mover algumas peças de dentro da linha para que a distância entre peças consecutivas é sempre menor ou igual à sua altura H. Para que Emma não descubra que ele moveu algumas peças, ele irá deixar a primeira e a ultima peça onde elas estão, e ele deseja também mover o mínimo possível de peças de dentro da fila. Qual é o numero mínimo de peças que ele deve mover?",
        "titulo": "Efeito Dominó",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém dois números inteiros N e H, indicando, respectivamente, o número de peças na linha (3 ≤ N ≤ 1000) e sua altura (1 ≤ H ≤ 50). A segunda linha contém N-1 inteiros Di, que representam as distâncias entre pares de peças consecutivas de dominó, na ordem dada pela linha (1 ≤ Di ≤ 100 para i = 1, 2, ..., N-1). O fim da entrada é indicado por uma linha que contém duas vezes o número -1."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1603",
        "saida": "Para cada instância imprima -1, se não é possível transformar o canal fechado no aberto, ou o menor índice do vértice do canal fechado que coincide com primeiro vértice do canal aberto após a transformação.",
        "descricao": "A medina de Marrakech é formada pela cidade fortificada, patrimônio universal da Unesco desde 1995. O início de sua construção remonta à fundação da cidade no século XI e inclui vários monumentos impressionantes, como a mesquita de Koutoubia, madraçal de Ben Youssef, e o Palácio Bahia. Várias histórias cercam os monumentos que formam a medina. A mais interessante diz respeito os jardins Ménara. O parque tem hortas e lagos artificiais construídos na época do sultão. Abd-el-Rhaman, que era um apaixonado por desafios matemáticos. Um dos mais brilhantes é o dos conjuntos de canais de qanat (قناة). Cada conjunto é formado por um canal fechado e um canal aberto. O canal fechado tem o formato de um polígono e o canal aberto consiste de uma sequência de arestas formando um caminho. O desafio é determinar se é possível transformar o canal fechado no canal aberto através de operações mentais sobre o canal fechado, como de remoção de vértices e arestas, translações e rotações (no plano). Os canais são dados através das coordenadas dos seus vértices e a ordem na qual os vértices são dados indica o sentido do fluxo de água. Consideramos que é possível transformar o canal fechado no aberto se após a aplicação das operações, o canal resultante tem as mesmas coordenadas e a água flui no mesmo sentido. Figura 1. Ilustração primeiro (esq.) e segundo (dir.) exemplos de entrada.",
        "titulo": "Canais de Qanat",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros Nf (3 ≤ Nf ≤ 20.000) e Na (2 ≤ Na ≤ 5.000), correspondendo ao número de vértices dos canais fechado e aberto, respectivamente. A linha seguinte contém Nf pares de inteiros (xi , yi) (−10.000 ≤ x, y ≤ 10.000), cada par representando a coordenada de um vértice do canal fechado. No canal fechado a água sempre flui no sentido anti-horário e os vértices são númerados de 1 a Nf . A terceira e última linha contém Na pares de inteiros (xi , yi) correspondendo aos vértices do canal aberto."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1372",
        "saida": "Para cada caso de teste da entrada, seu programa deve imprimir uma única linha, contendo um único valor, o inteiro indicando o número máximo de doces que Charlie pode pegar.",
        "descricao": "Pequeno Charlie é um bom garoto viciado em doces. Ele até assina a Revista Todos Doces (All Candies Magazine) e foi selecionado para participar na Competição Internacional de Coleta de Doces (International Candy Picking Contest). Nessa competição um número aleatório de caixas contendo doces são dispostas em M linhas com N colunas cada (então, existe um total de M x N caixas). Cada caixa tem um número indicando quantos doces ela contém. O competidor pode pegar uma caixa (qualquer uma) e pegar todos os doces dentro dela. Mas existe uma sacada (sempre existe uma sacada): quando uma caixa é escolhida, todas as caixas das linhas logo acima e logo abaixo são esvaziadas, assim como as caixas à direita e à esquerda da caixa escolhida. O competidor continua pegando uma caixa até que não hajam mais doces. A figura abaixo ilustra isso, passo a passo. Cada célula representa uma caixa e o número de doces que ela contém. A cada passo, a caixa escolhida é circulada e as células sombreadas representam as caixas que serão esvaziadas. Após oito etapas o jogo acaba e Charlie pegou 10 + 9 + 8 + 7 + 6 + 10 + 1 = 54 doces. ​ Para pequenos valores de M e N, Charlie consegue achar o número máximo de doces que ele consegue coletar facilmente, mas quando os números são muito grandes ele começa a se perder. Você pode ajudar Charlie a maximizar o número de doces que ele pode pegar?",
        "titulo": "Doces",
        "entrada": "A entrade contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros M e N (1 ≤ M x N ≤ 105), separados por um espaço, indicando o número de linhas e colunas, respectivamente. Cada uma das M linhas seguintes contém N inteiros separados por espaço, cada uma representando o número inicial de doces na caixa correspondente. Cada caixa terá inicialmente pelo menos 1 e no máximo 103 doces. O final da entrade é indicado por uma linha contendo dois zeros separados por um espaço."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1637",
        "saida": "Para cada caso teste imprima uma linha como o tamanho mínimo de uma codifição da determinada sequência da entrada.",
        "descricao": "O código gamma de Elias é um código simples que pode ser usado para codificar uma sequência de inteiros positivos. Iremos utilizar um código modificado que também é capaz de codificar zeros.Para codificar um inteiro n, faça o seguinte: Seja k o numero de bits de n Escreva k-1 zeros seguido por 1 Escreva n em binário Exemplos Número Binário Número de bits Prefixo Código 0 0 1 1 10 1 1 1 1 11 2 10 2 01 0110 3 11 2 01 0111 4 100 3 001 001100 5 101 3 001 001101 6 110 3 001 001110 7 111 3 001 001111 8 1000 4 0001 00011000 Uma sequência de inteiros é codificada escrevendo os códigos dos inteiros individuais da sequência na mesma ordem em que os inteiros aparecem na sequência. O prefixo de k bits a mais, antes da representação binária de cada inteiro, é necessário para poder decodificar os inteiros codificados. Então, quando estiver lendo a codificação de uma sequência de inteiros, se lermos k-1 zeros seguido por um, isso significa que existem k bits seguintes, que são a representação binária do próximo inteiro codificado. Se quisermos diminuir o tamanho da codificação da sequência de inteiros, pode haver ainda algum espaço para melhorias vamos considerar as duas otimizações seguintes: Se houver um prefixo que indica os k bits seguintes, mas se não tiver um inteiro na sequência com k bits, podemos usar este prefixo para indicar que seguem k+1 bits. Se já houver um prefixo que indica que seguem k+1 bits, esse prefixo não será mais necessário e poderá ser usado para indicar que seguem k+2 bits, e assim por diante. Podemos adiciona um zero a esquerda da representação binária de todos os inteiros na sequência com k bits, que então torna-se inteiros com k+1 bits, e então a primeira otimização pode ser usada. A otimização parece especialmente útil se houver alguns inteiros com k bits, mas muitos inteiros com mais de k bits. Quando estivermos diminuindo o tamanho da codificação da sequência de inteiros, nós apenas devemos ter cuidado sobre quantos inteiros na sequência tem um certo número de bits. Seja ci o número de inteiro na sequência com i bits. Vejamos o seguinte exemplo c1 = 2, c2 = 4, c3 = 0, c4 = 1 (que, por exemplo, poderia corresponder a sequência 2, 1, 3, 8, 0, 2, 3). Com o original código gamma de elias, a codificação da sequência deveria ter tamanho 2 × (1 + 1) + 4 × (2 + 2) + 0 × (3 + 3) + 1 × (4 + 4) = 28. Usando a otimização 1 podemos salvar 1 bit usando o prefixo 001 para o inteiro com 4 bits. Então, poderíamos usar a otimização 2 e adicionar zeros a esquerda do inteiro com 1 bit, fazendo-os usar 2 bits. Então, usamos a otimização 1 e o prefixo 1 para inteiros com 2 bits, prefixo 01 para inteiros com 4 bits, e teremos o novo tamanho de 6 × (1 + 2) + 1 × (2 + 4) = 24. Ambas otimizações podem ser usadas várias vezes. O objetivo é combinar essas duas otimizações da melhor maneira possível, o que significa que queremos encontrar uma codificação de uma determinada sequência de inteiros que tem um tamanho minímo entre todas as codificações usando a Codificação Gamma de Elias com qualquer combinação dessas duas otimizações.",
        "titulo": "Codificação Gamma de Elias",
        "entrada": "A entrada contém vários casos teste. Cada casos teste inicia com uma linha contendo um inteiro n, (1 ≤ n ≤ 128). A próxima linha contém os c1, ..., cn (0 ≤ ci ≤ 10000). A entrada termina com n = 0."
    },
    {
        "nivel": "1",
        "assunto": "6",
        "numero": "1682",
        "saida": "Para cada caso de teste especificado por n imprima uma linha com qualquer genoma de comprimento n. Caso nenhum genoma de comprimento n exista, imprima uma linha em branco.",
        "descricao": "As conexões entre Matemática e Biologia são complicadas. Na maioria das vezes, estas conexões não se dão por meio de ligações que alegremente se juntam à primeira vista, mas são abstratas e nem sempre facilmente estabelecidas. O Lago Vostok - com cerca de 14 mil quilômetros quadrados de extensão, mais de 650 metros de profundidade e coberto por 3743 metros de gelo - foi descoberto recentemente no continente Antártico. O lago permanceu sob condições de alta pressão e desprovido de luz solar por milhares de anos. Acredita-se que a vida comum evoluiu para uma forma mais eficiente usando-se de um código genético composto unicamente por três bases (a Ciência atualmente diz haver quatro bases: adenina, citosina, guanina e timina). Até que nomes apropriados sejam encontrados, as três bases em questão serão identificadas por N, O e P. Além disso, o genoma é de fita simples e dirigido, isto é, podemos percebê-lo como uma sequência do alfabeto {N,O,P}. A menos que apresente instabilidade, é necessário que o genoma seja uma sequência Thue, devido aos estudos do matemático norueguês A. Thue (1863 - 1922). Entenda por subsegmento de uma sequência, uma sequência a ser conectada, e entenda que dois subsegmentos são adjacentes, quando um é seguido imediatamente pelo outro em uma determinada sequência. Uma sequência-Thue é uma sequência onde nenhum subsegmento adjacente é igual. Por exemplo, NOPNO (é uma sequência-Thue) e NOPNPNO (não é uma sequência-Thue), logo o primeiro exemplo configura um genoma, enquanto o segundo, não. Para sermos capazes de simular experiências com novos genomas, pedimos que você gere genomas de determinados comprimentos.",
        "titulo": "Código Genético",
        "entrada": "A entrada contém vários casos de testes. Cada caso de teste é composto por um inteiro n. Adimita que 1 ≤ n ≤ 5000. O último caso de teste deve ser zero, isto é, n = 0."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2024",
        "saida": "Para cada caso de teste imprima uma linha contendo um inteiro, representando a altura máxima da pilha caso seja possível empilhar os N presentes, ou -1 caso contrário.",
        "descricao": "Cansado de gerenciar a produção de presentes e calcular o caminho mínimo para entregá-los às crianças durante o natal, Papai Noel resolveu tirar um cochilo. Quando os duendes perceberam a ausência do Noel eles resolveram tirar uma folga do trabalho para jogar um jogo que vieram elaborando por um tempo. O jogo que os duendes inventaram envolve N presentes que eles tinham recentemente fabricado, os quais tem formato de cubo com dimensões AxBxC, ou seja, A centímetros de largura, B centímetros de altura e C centímetros de profundidade. O objetivo é simples: dados os N presentes, ganha o jogo aquele que conseguir colocar os N presentes um em cima do outro formando a pilha de maior altura possível. Os presentes devem ser empilhados em ordem, ou seja, primeiro posiciona-se o presente 1 no chão, em seguida empilha-se o presente 2 em cima do presente 1, e assim por diante. Vale notar que é possível rotacionar o presente em qualquer eixo de forma que qualquer uma de suas 6 faces esteja paralela ao chão, porém o perímetro desta face deve estar completamente contido no perímetro da face superior do presente abaixo. No caso do primeiro presente é possível escolher qualquer face, pois o chão é grande o suficiente. Por exemplo, seja N = 2, onde o primeiro presente tem dimensões 5x2x2, e o segundo presente tem dimensões 1x3x4, é possível posicionar o primeiro presente com a face de dimensões 2x2 para baixo e alcançar uma altura igual a 5, porém desta maneira não será possível posicionar o segundo presente em cima deste. Uma possível solução seria posicionar o primeiro presente com a face de dimensões 5x2 para baixo, e posicionar o segundo presente com a face de dimensões 3x1 logo acima deste, alcançando uma solução válida com altura igual a 6, tal como exemplificado na Figura 1. Após um bom tempo jogando os duendes ficaram curiosos para saber se realmente chegaram ao melhor resultado, e para isso pediram sua ajuda. Dadas as dimensões dos N presentes, verifique se é possível formar uma pilha com os N presentes e qual seria a altura máxima alcançada.",
        "titulo": "Empilhando Presentes",
        "entrada": "Cada caso de teste inicia com um inteiro N, representando a quantidade de presentes (1 ≤ N ≤ 105). Em seguida haverá N linhas, cada uma contendo três inteiros cada, A, B e C, representando as medidas dos presentes, conforme especificado no enunciado (1 ≤ A, B, C ≤ 104)."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1412",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único inteiro, o menor número de movimentos que abre o cadeado.",
        "descricao": "Um cadeado possui um sistema de código para ser aberto ao invés de uma chave. O cadeado contém uma sequência de rodas. Cada roda possui as 26 letras do alfabeto inglês (a..z), em ordem. Se você move uma roda para cima, a letra que ela mostra muda para a próxima letra do alfabeto (se a letra mostrada for 'z', então ela muda para 'a'). Se você move uma roda para baixo, ela muda para a letra anterior do alfabeto (se a letra mostrada for 'a', ela muda para 'z'). Também é possível mover qualquer subsequência contígua de rodas para a mesma direção com apenas um movimento. Isso tem o mesmo efeito que mover todas as rodas da subsequência para aquela direção, mas executando apenas um movimento. O cadeado abre quando a roda mostra uma determinada sequência de letras. Inicialmente, todas as rodas mostram a letra 'a'. Você quer saber qual o menor número de movimentos necessários para abrir o cadeado.",
        "titulo": "Cadeado com Segredo",
        "entrada": "A entrada contém vários casos de teste. Um caso de teste é descrito em exatamente uma linha contendo uma string não-vazia com no máximo 1000 letras minúsculas. A string representa a sequência secreta de letras que abre o cadeado. O último caso de teste é seguido de uma linha contendo um único asterisco."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1601",
        "saida": "Para cada instância, imprima em uma única linha o valor mínimo de S (A, B).",
        "descricao": "A culinária marroquina é muito famosa por suas deliciosas receitas que envolvem vários tipo de carnes assadas, mas especialmente carneiros, que são criados na região desde o século VIII. Uma curiosa tradição bérbere envolve a partilha da criação de um pastor no momento de sua morte. Independentemente do número de filhos que ele tenha, apenas o primogênito e filho mais novo têm direito à herança. Os demais filhos não ganham nada. Então, todos os animais são pesados, e os pesos (arredondados para o inteiro mais próximo) são considerados. O rebanho é então dividido em duas partes, de forma que, em cada uma os animais têm pesos semelhantes. Mais especificamente, o rebanho é particionado em duas partes, A e B, de tal forma que,   seja mínima. Então, o primogênito fica com a parte do rebanho de peso maior, e o último filho, com a parte de peso menor. Não parece muito justo, mas é a tradição por lá.",
        "titulo": "Partição do Rebanho",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 1.000) indicando a quantidade de carneiros no rebanho. A linha seguinte contém N inteiros separados por um espaço, correspondendo aos pesos (0 ≤ peso(·) ≤ 100) dos carneiros."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1509",
        "saida": "Para cada caso de teste imprima U linhas. A i-ésima linha no arquivo de saída deve conter o número de maneiras distintas de se obter a i-ésima palavra que os dois competidores escreveram pela concatenação de palavras que eles conhecem. Este número pode ser muito grande. Por isto, imprima o resto da divisão da resposta por 109+ 7.",
        "descricao": "Enquanto vinham para a Escola de Verão de ônibus, um competidor atento notou uma placa que continha uma propaganda com a seguinte URL:www.programs.healthyfood.ma(ele suspeita que o .ma seja para \"Marte\", mas isto é improvável). Por estarem discutindo as novas features de C++11, o competidor e um amigo pensaram que o \"programs\" na URL fosse relacionado ao resultado da programação de computadores: programas. Porém, acontece que a URL foi infeliz: era, na verdade, a junção de duas palavras: o adjetivo \"pro\", que em inglês significa \"em favor de\", e o substantivo \"grams\", um tipo de legumes usados em pratos de comida. Isto explica o fato de a URL ter levado os dois amigos a uma página Web contendo fotos de mulheres saudáveis, ao invés de tutoriais sobre variadic templates! Depois de rirem do acontecido, os dois amigos estão curiosos sobre essas ambiguidades em URLs. Eles começaram a olhar para todas as placas na estrada e a escrever as URLs que elas contém. Porém, eles rapidamente obtiveram muitas URLs para verificar - muito mais que um programador aceita fazer \"na mão\". Por isto, eles querem escrever um programa que, data a lista de palavras que eles conhecem, conta de quantas formas distintas uma certa palavra pode ser obtida pela concatenação de uma ou mais palavras da lista. Ambos são programadores muito habilidosos e já projetaram o algoritmo perfeito para este problema. O principal problema é que os laptops deles estão sem bateria, e eles não querem programar em seus smartphones (não há acesso à Internet nas estradas para acessar um computador com um compilador remotamente). Porque você está sentado próximo a eles, e seu laptop tem bateria para mais de 10 minutos (suficiente, não?) de programação, eles pediram para que você escrevesse tal programa para eles. É claro que eles não contaram a você o algoritmo que projetaram, porque confiam nas suas próprias habilidades de resolução de problemas. Você pode escrever o programa para eles? Note que um palavra pode ser usada várias vezes no processo de concatenação. Por exemplo, se os amigos conhecem as palavras \"a\" e \"aa\", eles podem formar a palavra \"aaa\" dos seguintes 3 jeitos (aqui, + significa concatenação). \"a\" + \"a\" + \"a\" \"a\" + \"aa\" \"aa\" + \"a\" Assim, a resposta para este caso seria 3. Da mesma forma, há duas maneiras de se obter a palavra \"aa\": \"a\" + \"a\" \"aa\" Note que uma palavra pode ser usada sozinha, se os amigos a conhecem.",
        "titulo": "Contando Ambiguidades",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um inteiro positivo D (no máximo 105), o número de palavras que os amigos conhecem. As próximas D linhas contém essas palavras. Cada linha contém uma palavra distinta. Depois, há uma linha contendo um inteiro positivo U (no máximo 1000), que é o número de palavras que os competidores escreveram. Após esta linha, há U linhas, cada uma contendo uma dessas palavras. Toda palavra no arquivo de entrada é composta por no máximo 100 caracteres alfabéticos."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1978",
        "saida": "Para cada caso de teste você deverá imprimir a quantidade mínima de câmeras necessárias para cobrir todo o corredor. Caso não seja possível você deverá imprimir \"Tera que comprar mais cameras.\".",
        "descricao": "O coordenador do curso de ciência da computação pretende instalar novas câmeras em um corredor da faculdade, no intuito de poder identificar os alunos que costumam ficar ali em horário de aula, assim quando esses alunos forem reclamar que o curso está difícil ele poderá facilmente mostrar para o aluno que está difícil pois o mesmo não tem frequentado muito as aulas. As câmeras que serão instaladas são de uma tecnologia um pouco diferente, elas tem visão de 360 graus sem a necessidade de fazer o giro, o coordenador irá instalar as câmeras no teto do corredor e todas estarão exatamente centrada entre as paredes do corredor. Como essas câmeras são caras e consomem muita energia, o coordenador terá que usar as câmeras já existentes no corredor, que por motivo de economia estavam desligadas, porém nem todas são do mesmo modelo, assim cada uma tem um alcance de visão diferente. Sabendo que você é o melhor programador do curso, o coordenador pediu para que você determinasse a quantidade mínima de câmeras necessárias para cobrir todo o corredor, sem deixar nenhum espaço sem visão, ou dizer se terá que comprar mais câmeras. Assuma o corredor como um plano cartesiano, onde o tamanho das abscissas é L com início em 0, e o tamanho das ordenadas é A. As câmeras estão sempre posicionadas sobre o eixo das abscissas.",
        "titulo": "Câmeras",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiro N, L, A (1 ≤ N ≤ 10000), indicando respectivamente o número de câmeras presentes na faculdade, largura do corredor e a distância entre as duas paredes do corredor. Segue N linhas contendo dois inteiros X e R (R ≥ A), indicando a posição onde a câmera está instalada e o seu alcance de visão. A entrada termina com N = 0 e não deve ser processada"
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1319",
        "saida": "Para cada caso de teste, imprima uma única linha com um único inteiro representando a quantidade de subconjuntos que cobrem o dia. Para tornar sua vida mais fácil, imprima apenas o resto ao dividir a solução por 108.",
        "descricao": "Helen é uma garota hiperativa. Ela quer agendar suas atividades de forma que em qualquer momento do dia haja ao menos uma atividade que ela possa fazer. Ela não se importa se suas atividades se sobrepõem no tempo, desde que cada momento do seu dia tenha uma atividade agendada. Helen dividiu o dia de uma forma particular. O dia começa no tempo 0 e termina no tempo M. Cada momento do dia é representado por um número real entre 0 e M, inclusive. Helen fez uma lista de todas as possíveis atividades, com seus tempos de início e fim. Agora ela precisa escolher qual subconjunto de atividades vai agendar. Se uma atividade começa no instante S e termina no instante F, então dizemos que ela cobre todo o período entre S e F, inclusive. Helen não quer desperdiçar nenhuma atividade, portanto ela vai escolher apenas subconjuntos mínimos de atividades que cobrem o dia a ser agendado. Um subconjunto de atividades é um subconjunto mínimo que cobre o dia se e somente se: 1. Cada instante do dia é coberto por ao menos uma atividade do subconjunto; 2. Remover qualquer uma das atividades do subconjunto deixaria ao menos um instante do dia descoberto. Note que alguns instantes do dia podem ser cobertos por mais de uma atividade. ​Dada a lista de possíveis atividades para um dia, você deve ajudar Helen determinando quantos subconjuntos mínimos distintos de atividades cobrem o dia inteiro.",
        "titulo": "Garota Hiperativa",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros M e N, representando respectivamente o maior valor de tempo do dia (1 ≤ M ≤ 109) e o número de possíveis atividades para o dia (1 ≤ N ≤ 100). Cada uma das próximas N linhas descreve uma possível atividade e contém dois inteiros S e F, representando respectivamente os tempos de início e fim da atividade (0 ≤ S < F ≤ M). ​O último caso de teste é seguido de uma linha contendo dois zeros."
    },
    {
        "nivel": "10",
        "assunto": "6",
        "numero": "1810",
        "saida": "Para cada pesquisa processada, seu programa deve imprimir na primeira linha do texto Instancia #x, onde x é o número da instância do arquivo de entrada. (As instâncias são numeradas sequencialmente a partir de um). Na segunda linha deve ser impresso o custo mínimo do período de n dias. Nesta fase de seu trabalho, não é necessário imprimir o plano de produção. Uma linha em branco deve ser deixada entre cada pesquisa.",
        "descricao": "Beverly Hills e Century City figuram entre os condados mais abastados e sofisticados de grande Los Angeles. Seus habitantes, pessoas de gostos pouco convencionais e atitudes demasiadamente excêntricas, estão sempre procurando novas diversões, novas quinquilharias e novos hobbies para empregar seus dividendos. A grande mania da região, no momento, é a criogenia. Inspirados pelo enredo do filme Vanilla Sky, vários cidadãos e cidadãs têm recorrido à empresa local A.C.M – Agência Criogênica keith-Morris – com o intuito de \"prolongar\" sua existência. Tal movimentação deixou a A.C.M com um problema a ser resolvido: construir um plano de produção de suas células criogênicas num dado período de tempo. De maneira mais precisa a empresa deseja encontrar um plano de produção de custo mínimo num período de n dias, sujeito a: Custo de produção fixos não negativos ft, 1 ≤ t ≤ n; Custos unitários de produção pt; Custos unitários de estocagem ht; Demandas não negativas dt; Sua tarefa é construir um programa para ajudar a A.C.M a resolver seu problema.",
        "titulo": "Beverly Hills, Century City",
        "entrada": "A entrada é constituída por várias instâncias, armazenadas em sequência ao longo do arquivo de entrada. Cada instância possui a estrutura que segue. Na primeira linha é especificado um valor inteiro 0 ≤ n ≤ 180 que indica o número de dias do planejamento. O caso em que n = 0 representa o final do arquivo e não deve ser processado. Nas próximas n são especificados, na ordem que segue, os inteiros ft ≥ 0, pt, ht e dt ≥ 0, em que 1 ≤ t ≤ n."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1027",
        "saida": "Para cada caso de teste, imprima um número – o número máximo de pontos críticos que podem ser incluídos em uma curva desenhada a partir dos pontos dados.",
        "descricao": "A tarefa é simples. Através de alguns pontos críticos em 2D, você deve desenhar uma onda como uma curva. Seu objetivo é incluir tantos pontos quantos forem possível. Haverá uma linha imaginária y = a, a qual chamaremos de eixo principal para a curva. Todos os pontos na curva deverão ter diferentes coordenadas x. Suas coordenadas y devem ser na forma a-1 ou a+1. Dois pontos consecutivos na curva devem ter diferença de 2 na coordenada y.",
        "titulo": "Onda Crítica",
        "entrada": "Haverá no máximo, 222 casos de testes. Cada caso inicia com um inteiro N, que é o número de pontos no caso de teste. Nas próximas N linhas, haverá N pares de inteiros dando as coordenadas x e y de cada ponto. Não haverá mais do que 1000 pontos em cada caso de teste. Todas coordenadas são inteiros – eles devem ficar dentro de um inteiro de 2 bytes com sinal. Os dados devem ser lidos da entrada padrão."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2181",
        "saida": "Imprima uma única linha contendo três valores, os quais representem, nesta ordem, o número de públicos em Valinor, o número máximo de elfos num público em Valinor e a soma máxima das rendas dos elfos de um mesmo público em Valinor. Imprima o último valor com exatamente dois dígitos após o ponto separador decimal.",
        "descricao": "A Uireb Rhom uin Iavas (traduzindo: Eterna Trombeta do Outono), uma importante empresa de Valinor, está fazendo uma pesquisa sobre os diversos públicos do reino abençoado. Para a URI, um público é um conjunto não-vazio maximal de elfos S tal que quaisquer dois elfos tomados de S são da mesma faixa etária. A propósito, a URI considera que dois elfos são da mesma faixa etária se e só se a diferença entre suas idades não excede um determinado parâmetro D. Por exemplo, sob D = 500, se Aegnor, Beleg e Celeborn têm respectivamente 1300, 500 e 1000 anos de idade, Aegnor e Celeborn são considerados da mesma faixa etária, assim como Beleg e Celeborn, mas não Aegnor e Beleg. Ainda, se os únicos elfos em Valinor fossem Aegnor, Beleg, Celeborn e Daeron, este de 700 anos de idade, os dois públicos seriam {Aegnor, Celeborn} e {Beleg, Celeborn, Daeron}. Note que o conjunto {Beleg, Celeborn}, apesar de conter dois elfos de mesma faixa etária, não é considerado um público por não ser maximal. A URI quer saber o que é melhor para o lançamento de um produto: focar num público com o maior número de elfos possível, ou focar num público talvez mais restrito, mas com maior poder aquisitivo? Portanto, as informações que a URI precisa levantar são cruciais para que a empresa faça a escolha certa!",
        "titulo": "URI - Uireb Rhom uin Iavas",
        "entrada": "A entrada consiste de três linhas. A primeira linha consiste de dois inteiros positivos N e D (N ≤ 105, D ≤ 107), os quais representam respectivamente o número de elfos em Valinor e o parâmetro que define o conceito de faixa etária adotado. A segunda linha consiste de N inteiros ai (1 ≤ i ≤ N, 0 ≤ ai ≤ 107), os quais representam as idades de cada um dos elfos. Por fim, a terceira linha consiste de N valores ci (1 ≤ i ≤ N, 0.00 ≤ ci ≤ 10000.00), fornecidos com exatamente dois dígitos após o ponto separador decimal, os quais representam as rendas correspondentes dos elfos, segundo a ordem em que os elfos foram fornecidos na linha anterior."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2095",
        "saida": "Imprima uma linha contendo um único número inteiro que representa o número máximo de batalhas que Noglônia pode ganhar durante a guerra.",
        "descricao": "Guerra, um evento digno apenas de aparecer na literatura, filmes ou talvez programação de concursos, veio a atingir o império Nogloniano, que está enfrentando o império vizinho de Quadradônia. Protocolos de guerra combinado por ambas as partes indicam que a guerra será travada em sucessivas batalhas, em cada uma das quais um soldado diferente de cada império vai enfrentar outro, de modo que cada soldado irá participar em exatamente uma batalha. O império que ganhar mais batalhas ganha a guerra. Cada império tem um exército formado por S soldados, e cada soldado tem uma certa habilidade de combate. Em cada batalha entre dois soldados, aquele com maior habilidade de combate ganha a batalha. Se ambos os soldados têm as mesmas habilidades de combate, a batalha é declarada como empate e tecnicamente nenhum lado é vitorioso. Os espiões de Noglônia tiveram que interceptar informações secretas relativas às habilidades de combate de cada soldado do exército de Quadradônia, por isso a rainha de Noglônia requer a sua assistência, a fim de calcular o número máximo de batalhas que podem ganhar durante a guerra se os seus soldados forem enviados na ordem apropriada.",
        "titulo": "Guerra",
        "entrada": "A primeira linha contém um número inteiro S que representa o número de soldados em cada exército (1 ≤ S ≤ 105). A segunda linha contém S números inteiros, onde Qi representa as habilidades de combate dos diferentes soldados do exército de Quadradônia, na ordem em que as batalhas iram acontecer (1 ≤ Qi ≤ 109 para i = 1, ..., S). A terceira linha contém S números inteiros, onde Ni representando as habilidades de combate dos diferentes soldados do exército de Noglônia, em uma ordem arbitrária (1 ≤ Ni ≤ 109 para i = 1, ..., S)."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1616",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando quantas maneiras é possível que os pares sejam formados de tal modo que todos os garotos dancem exatamente uma vez, e que todas as garotas dancem ao menos uma vez. Como o resultado pode ser muito alto, imprima o resultado com resto de divisão em 1000000007 (10⁹+7).",
        "descricao": "É final de ano, e finalmente Rafael está se formando em seu curso de Computação. O pessoal da sua sala resolveu comemorar a formatura organizando um baile, onde haveria música ao vivo, comida e bebida grátis. Como todo baile, o momento mais esperado é aquele em que todos começam a dançar em pares. Os pares serão formados entre um garoto e uma garota, e como os alunos da sala de Rafael são muito tímidos, decidiram definir com antecedência quais seriam os pares. Há apenas um problema: há mais garot os do que garotas na sala. Isso implica que, para que todos consigam dançar ao menos uma vez, uma ou mais garotas terão que dançar com mais de um garoto. Rafael pediu sua ajuda: de quantas maneiras os pares podem ser formados, de tal forma que todos os garotos dancem exatamente uma vez, e que todas as garotas dancem ao menos uma vez?",
        "titulo": "Baile de Formatura",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste consiste de dois inteiros, B e G (1 ≤ G < B ≤ 10³), indicando o número de garotos e garotas na sala, respectivamente. O último caso de teste é indicado quando B = G = 0."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2183",
        "saida": "Imprima uma única linha, a menor quantidade inicial de pontos de vida para que Bia consiga vencer o desafio. Caso seja impossível chegar a sala final, imprima ‘-1’.",
        "descricao": "Bia está jogando um jogo de Zumbi e está prestes a começar o último desafio. Modelaremos esse desafio como uma matriz NxN, onde o objetivo de Bia é sair da sala situada na posição [1, 1] e chegar na sala da posição [N, N]. Porém, como nada nessa vida é tão simples, existem salas que contêm zumbis, salas que são bloqueadas e salas que contêm itens mágicos para serem pegos que, quando fundidos, dão a Bia um grande poder. A sala [1, 1] contém sempre uma letra ‘I’ e a sala [N, N] a letra ‘F’ significando, respectivamente, o início e fim do desafio. As salas bloqueadas conterão o símbolo ‘#’, sendo assim impossível passar por elas. Salas com um número inteiro D significam que existem zumbis e, ao passar por elas, Bia perderá D pontos de vida. As outras salas conterão uma das seguintes letras: ‘P’, ‘O’, ‘W’, ‘E’ ou ‘R’, significando a inicial de cada um dos cinco itens mágicos. Quando Bia passa por uma sala com algum desses itens, ela pega e guarda em sua mochila, e no exato momento que junta todos eles, Bia se torna imune aos zumbis nas próximas K salas que entrar. É possível ter apenas um item de cada ao mesmo tempo na mochila e, quando usado, todos serão perdidos e poderão ser coletados novamente ao decorrer da batalha. Se Bia juntar todos os itens em um momento que ainda estiver sob o efeito de uma junção anterior, a quantidade de sala imune não será acumulada, e sim voltará ao valor máximo de K. Sua tarefa é descobrir qual a menor quantidade inicial de pontos de vida para que Bia consiga vencer o desafio, dado que ela sempre escolhe o melhor caminho possível. Bia vence o desafio se chegar a sala [N, N] com pelo menos 1 ponto de vida. Se Bia está no momento na sala [X, Y], ela pode andar apenas para as salas [X+1, Y] ou [X, Y+1].",
        "titulo": "Batalha Final",
        "entrada": "A primeira linha contêm dois inteiros N, K, indicando, respectivamente, a dimensão da matriz e a quantidade de salas imunes que Bia fica quando junta todos os itens mágicos. (2 ≤ N ≤ 100, 1 ≤ K ≤ 10). A seguir temos N linhas que descrevem a matriz, cada uma dessas linhas conterá a informação de N salas, sendo os caracteres: ‘I’, ‘F’, ‘#’, ‘P’, ‘O’, ‘W’, ‘E’, ‘R’ ou um número inteiro D, todos descritos acima. (1 ≤ D ≤ 9)."
    },
    {
        "nivel": "9",
        "assunto": "6",
        "numero": "1325",
        "saida": "Para cada caso de teste na entrada seu programa deve produzir uma linha na saída, contendo os nomes das quatro regiões vizinhas da região informada, na seguinte ordem de direção: cima, baixo, esquerda, direita. Para os vizinhos que não estão mapeados, você deve escrever na saída ao invés do nome. Deixe um espaço em branco entre dois nomes consecutivos. A saída deve ser escrita na saída padrão.",
        "descricao": "A Bubble Inc. está desenvolvendo uma nova tecnologia para a navegação em um mapa em diferentes níveis de zoom. Sua nova tecnologia assume que a região a ser mapeada é uma superfície retangular plana, e que divide sua superfície em sub-regiões retangulares, as quais representam níveis de zoom mais profundos. A tecnologia da Bubble Inc. representa um mapa usando uma estrutura conhecida como quad-tree. Em uma quad-tree, uma região retangular chamada x pode ser dividida pela metade, tanto horizontal como verticalmente, resultando em 4 sub-regiões retangulares de tamanhos iguais. Estas sub-regiões são chamadas de regiões filhas de x, e são nomeadas de xp para o canto superior esquerdo, xq para o superior direito, xr para o inferior direito e xs para o inferior esquerdo, onde xc representa a concatenação da string x e o caracter c = 'p', 'q', 'r' e 's'. Por exemplo, se a região base a ser mapeada é chamada de m, então as regiões filhas de m são, à partir do canto superior esquerdo e em sentido horário: mp, mq, mr e ms, como ilustrado abaixo. Qualquer região pode ser subdividida. Por exemplo, a região chamada ms pode ser subdividida em sub-regiões msp, msq, msr e mss, como ilustrado abaixo. Como outro exemplo, a figura abaixo mostra o resultado da subdivisão das sub-regiões filhas da região chamada msr. Sub-regiões com nomes de mesmo comprimento tem o mesmo nível de zoom, uma vez que eles representam regiões de mesmo tamanho. Sub-regiões no mesmo nível de zoom e que compartilham um lado comum são considerados vizinhos. Qualquer coisa que esteja fora da região base m não está mapeada e, para todo nível de zoom, todas as sub-regiões de m são mapeadas. A tecnologia de mapa da Bubble Inc. fornece um meio para o usuário navegar a partir de uma sub-região dada até as sub-regiões vizinhas, nas quatro direções: cima, baixo, esquerda e direita. Sua missão é ajudar a Bubble Inc. na procura pelas sub-regiões vizinhas de uma sub-região dada. Isto é, dado o nome de uma sub-região retangular, você deve determinar os nomes de suas quatro sub-regiões vizinhas.",
        "titulo": "Mapas Bolha",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha contém um inteiro N indicando o número de casos de teste. Cada uma das N linhas representam um caso de teste, contendo o nome da região composta por C caracteres ( 2 ≤ C ≤ 5000 ), sendo que o primeiro sempre será o caractere 'm', e os seguintes serão ou 'p', 'q', 'r' ou 's'. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1666",
        "saida": "A saída para cada caso de teste deve dizerse uma palvra (\"word\") consiste em um conjunto (\"set\") ou não (\"no set\"). Você deve aderir ao formato mostrado na saída de exemplo.",
        "descricao": "Com certeza você conhece alguém que acha que é muito esperto. Você, então, decide o deixar triste com o seguinte problema: \"Você sabe me dizer qual é a sintaxe de um conjunto?\", você o pergunta. \"Claro!\", ele responde, \"um conjunto abriga a possibilidade de uma lista vazia de elementos dentro de duas chaves. Cada elemento pode estar dentro de um outro conjunto ou ser uma letra do alfabeto escolhido. Elementos da lista devem ser separados por uma vírgula\". \"Então, se eu lhe der uma palavra, você consegue me dizer se ela é a representação sintaticamente correta de um conjunto?\" \"Claro, qualquer tolo consegue!\" é a resposta dele. Agora você o pegou! Você o apresenta a seguinte gramática, definindo formalmente a sintaxe para um conjunto (que foi descrita informalmente por ele): Conjunto ::= \"{\" ElementoDaLista \"}\" ElementoDaLista ::= | Lista Lista ::= Elemento | Elemento \",\" Lista Elemento ::= Átomo | Conjunto Átomo ::= \"{\" | \"}\" | \",\" significa uma palavra vazia, i.e., a lista em um conjunto pode ser vazia. Logo ele perceberá que esta tarefa é muito mais difícil do que ele pensou, já que que o alfabeto consiste de caracteres que também são usados para a sintaxe do conjunto. Então, ele diz que não é possível decidir, de forma eficiente, se uma palavra consistindo de \"{\", \"}\" e \",\" é a representação sintaticamente correta de um conjunto ou não. Para prová-lo errado, você precisa escrever um programa eficiente que decidirá este problema.",
        "titulo": "Qualquer Tolo Consegue",
        "entrada": "A primeira linha da entrada contém um número representando o número de linhas que seguem. Cada linha consiste de uma palavra, para qual o seu programa deve decidir se é a representação sintaticamente correta de um conjunto. Você pode assumir que cada palvra contem entre 1 e 200 caracteres de um conjunto { \"{\", \"}\", \",\" }."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1224",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, o maior número de pontos que Alberto consegue obter.",
        "descricao": "Dois jogadores, Alberto e Wanderley, disputam um jogo. Um conjunto com um número par de cartões contendo números inteiros é disposto sobre uma mesa, um ao lado do outro, formando uma sequência. Alberto começa, e pode pegar um dos dois cartões das pontas. Wanderley então pode pegar um dos dois cartões das pontas e novamente Alberto pode pegar um cartão das pontas, e assim por diante, até Wanderley pegar o último cartão. Alberto, o primeiro a jogar, tem como objetivo maximizar o número total de pontos que ele con- segue, somando os valores dos cartões escolhidos. Wanderley, o segundo jogador, quer atrapalhar o Alberto e fazer com que ele consiga o menor número de pontos possível. Em suma, ambos querem fazer o melhor possível, Alberto querendo maximizar sua soma e Wanderley querendo minimizar a soma de Alberto. Você deve escrever um programa que, dada a sequência de cartões, determine o maior número de pontos que Alberto consegue obter.",
        "titulo": "Cartões",
        "entrada": "Cada caso de teste é descrito em duas linhas. A primeira linha contém um inteiro par N (2 ≤ N ≤ 104), que indica o número de cartões sobre a mesa. A segunda contém N inteiros, que descrevem a sequência de cartões. Cada um dos N inteiros cabem em um inteiro de 32 bits."
    },
    {
        "nivel": "1",
        "assunto": "6",
        "numero": "1912",
        "saida": "Para cada caso, exiba uma única linha, a altura H do corte que Seu Madruga deve fazer para que a soma da área das tiras cortadas seja igual a A cm². Use 4 casas decimais após o ponto. Exiba “:D”, caso nenhum corte seja necessário, ou “-.-“ caso seja impossível.",
        "descricao": "Seu Madruga finalmente arrumou um emprego, é sua grande chance de pagar os 14 meses de aluguel que estão atrasados. Seu cargo é o de cortador de papel e o salário é excelente. Madruga irá receber N tiras retangulares de papel com 1 cm de largura e C cm de comprimento. As tiras devem ser colocadas uma ao lado da outra de forma que suas bases estejam alinhadas. A tarefa de seu Madruga será, com apenas um corte em linha reta, paralelo à base, fazer com que a soma das áreas das tiras cortadas seja igual a A cm². Veja a ilustração abaixo com N = 5 e as tiras com 5, 3, 6, 2 e 3 cm de comprimento, respectivamente, para um A = 3 cm². Com um corte feito a uma altura de 4 cm em relação a base, a área resultante, pintada de vermelho, é exatamente igual a A cm². Sua tarefa é descobrir essa altura H e ajudar Seu Madruga a se manter no emprego.",
        "titulo": "Ajude Seu Madruga",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N (1 ≤ N ≤ 105) e A (1 ≤ A ≤ 109) representando, respectivamente, a quantidade de tiras e a área resultante esperada. A próxima linha conterá N inteiros, representando o comprimento Ci (1 <= Ci <= 104) de cada tira. A entrada termina com N = A = 0, a qual não deve ser processada."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1672",
        "saida": "Para cada caso de teste exiba uma linha contendo a posição da pessoa que sobreviverá. Considere que os participantes possuem identificações sequenciais de 1 a N e que a contagem começa com a pessoa 1, i.e., a primeira pessoa a sair do círculo é aquela com o número 2. Por exemplo, se houver 5 pessoas no círculo, a eliminação ocorrerá da seguinte maneira: 2, 4, 1, 5 e a pessoa 3 continuará viva.",
        "descricao": "Flavius Josephus e 40 amigos rebeldes foram encurralados pelos Romanos. Seus companheiros prefiriram o suicídio à rendição, então eles decidiram formar um círculo e matar cada terceira pessoa e continuar até que não sobre ninguém. Josephus não gostou da ideia de se matar então ele calculou a posição para ser o último homem vivo (ele não cometeu suicídio já que ninguém estava olhando). Nós vamos variar esse \"jogo\" de modo que cada segunda pessoa saia do círculo. Claro que haverá mais de 41 pessoas uma vez que agora temos computadores. Você deve calcular a posição segura. Seja cuidadoso pois talvez nós utilizemos o seu programa para calcular o ganhador desta competição!",
        "titulo": "Em Perigo",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por um número N que representa o número de participantes desse jogo. Para dificultar as coisas, o formato dele é XYeZ com a seguinte semântica: quando N é escrito em notação decimal, seu primeiro digito é X e seu segundo digito é Y, seguidos por Z zeros. Onde 0 ≤ X, Y ≤ 9, o número de zeros é 0 ≤ Z ≤ 6. Você pode assumir que N > 0. O último caso de teste é a string 00e0."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1054",
        "saida": "Para cada caso de teste, imprima o número do caso de teste seguido pela distância máxima do salto que Fred deve dar.",
        "descricao": "Com o uso crescente de pesticidas, as águas dos córregos e rios tornaram-se tão contaminadas que se tornou quase impossível para os animais aquáticos sobreviverem. Sapo Fred é na margem esquerda de um rio. N rochas são dispostas em uma linha reta da margem esquerda para a margem direita. A distância entre a margem esquerda e a margem direita é D metros. Há rochas de dois tamanhos. As maiores podem suportar qualquer peso, mas as pedras menores começam a afundar assim que qualquer massa é colocada sobre elas. Fred tem que ir para a margem direita, onde ele tem que coletar algo e voltar para a margem esquerda, onde sua casa está situada. Ele pode pousar em cada pedra pequena no máximo uma vez, mas pode usar as maiores tantas vezes quanto ele quiser. Ele nunca pode tocar a água poluída, pois é extremamente contaminada. Você pode planejar o itinerário de modo que a distância máxima de um único salto seja minimizada?",
        "titulo": "Sapo Dinâmico",
        "entrada": "A primeira linha de entrada é um número inteiro  T  ( T < 100 ) que indica o número de casos de teste. Cad a caso inicia com uma linha contendo dois inteiros N (0 ≤ N ≤ 100 ) e D ( 1 ≤ D ≤ 1000000000 ) que são o número de pedras e a distância entre as margens. As próximas linhas dão a descrição das N pedras. Cada pedra é definida por seu tamanho Big(B) ou Small(S), que significa grande e pequena respectivamente, um traço “-“ e M ( 0 < M < D ) que determina a distância daquela pedra da margem esquerda. As pedras estarão em ordem crescente de M."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1604",
        "saida": "Para cada instância, imprima na primeira linha Y se é possível formar um comitê de pares de conselheiros ou N, caso contrário. Caso seja possível formar um comitê, imprima uma lista de pares de conselheiros, um par por linha. Um par de conselheiros consiste de dois inteiros xi e yi, separados por um espaço, de forma que xi < yi. Além disso, a lista de pares de conselheiros deve estar ordenada de forma crescente por xi. Caso exista mais de uma forma de montar um comitê, imprima a lexicograficamente menor. Note que, quando o representante 1 tem voto sozinho, ele não pertence a nenhum par.",
        "descricao": "O bairro de Gueliz em Marrakech é hoje conhecido por ser a parte moderna da cidade, com diversas opções turísticas, restaurantes e bares. Poucos conhecem a formação do bairro, ainda no século XVI. Originalmente o bairro, também conhecido como “Cidade Nova” foi se formando fora da fortaleza (Medina, cidade antiga). O primeiro novo morador ganhou uma autorização oficial da prefeitura para construir sua casa, e ficou responsável por dar novas autorizações. Quando uma rua foi aberta, um habitante do fim da rua (até a primeira esquina formada) foi designado representante da rua juntamente com o primeiro morador. E assim ocorreu para todas as ruas da cidade: os moradores das esquinas eram representantes das ruas que se encontravam naquela esquina, de forma que cada trecho de rua sem esquinas tem exatamente dois representantes. Há em Gueliz uma lenda que impede a formação de quarteirões (conjunto de casas cercadas por ruas). Os antigos contam que uma vez formaram um quarteirão no bairro, e quando uma pessoa má morreu seu espírito ficou ali preso para sempre, assombrando as pessoas que ali moravam. Desde então nunca mais se formaram quarteirões no bairro. O conselho do bairro de Gueliz é formado pelo primeiro morador e os representantes de cada rua. Estes representantes formam comitês para analisar as diversas questões. Nos comitês os conselheiros são agrupados em pares, e todos os conselheiros devem participar de exatamente um par. Cada par tem um único voto e a moção é aprovada quando atinge maioria dos votos. Cada par deve ser formado por conselheiros representantes de ruas que se encontram em alguma esquina (ou pelo primeiro morador e o representante de sua rua). Claramente, quando o número de conselheiros é ímpar não é possível encontrar uma composição dos comitês de que participem todos os conselheiros. Quando isso ocorria, o primeiro morador tinha um voto sozinho, e os demais deveriam ser divididos em pares. Entretanto, com o passar do tempo houve ocasiões em que não foi possível montar um comitê, o que sempre foi motivo de desconfiança entre os moradores de Gueliz. Sua tarefa neste exercício é dado N o número de representantes de rua (o representante 1 é o primeiro morador) decidir se é possível formar um comitê de pares de conselheiros conforme descrito acima.",
        "titulo": "Pair-voting no Conselho de Gueliz",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro par N (1 ≤ N <105). As próximas N − 1 linhas contêm 2 inteiros cada uma. A i-ésima linha, dessas N − 1 linhas, contém os representantes x e y (1 ≤ x, y ≤ N) de um trecho de rua sem esquinas."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1286",
        "saida": "Para cada caso de teste de entrada deve ser impresso um valor inteiro que determina o tempo que Roberto irá levar para entregar as suas pizzas seguido de um espaço em branco e do texto “min.”, conforme exemplo abaixo.",
        "descricao": "José é um motoboy e trabalha fazendo entregas para uma pizzaria. Seu salário é baseado no número de pizzas entregues. Só que esta pizzaria está com muito movimento e ele pediu auxílio a seu amigo Roberto para que o ajudasse nas entregas. Como Roberto é camarada e está sem trabalho no momento, ele concordou em pegar aqueles pedidos cujas entregas serão mais demoradas. Assim, sempre que chegam à pizzaria, antes de partirem para novas entregas José determina a quantidade de pizzas que Roberto deverá entregar e seleciona para ele os pedidos mais demorados. Por exemplo, se há 22 pizzas para serem entregues e José determinar que Roberto entregue no máximo 10 destas pizzas (pode ser menos), estas devem estar obrigatoriamente entre os pedidos que levarão mais tempo para serem entregues. Isso é ilustrado no primeiro caso de teste, onde Roberto deverá fazer a entrega do segundo, terceiro e sexto pedido, somando 8 pizzas e 62 minutos (23 + 21 + 18). Se Roberto fosse realmente entregar 10 pizzas, ele teria que atender o segundo, terceiro e quarto pedido e isto levaria 59 minutos (23 + 21 + 16), o que não é o objetivo de José, pois levaria menos tempo do que a primeira opção, ou seja, a relação pizzas/tempo não importa muito para José (isso pode ser observado no segundo caso de teste do exemplo abaixo). Para poder fazer a divisão do trabalho, José pediu a um amigo acadêmico em Ciência da Computação que desenvolvesse um programa que determinasse quanto tempo seu amigo Roberto irá levar para entregar estes pedidos mais demorados.",
        "titulo": "Motoboy",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste contém na primeira linha um valor inteiro N (1 ≤ N ≤ 20) que indica o número de pedidos. A linha seguinte contém um valor inteiro P (1 ≤ P ≤ 30) indicando o número máximo de pizzas que podem ser entregues por Roberto. Cada uma das próximas N linhas contém um pedido com o tempo total para ser entregue e a quantidade de pizzas do pedido, respectivamente. A final da entrada é determinado por N = 0, e não deverá ser processado."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1597",
        "saida": "Para cada instância imprima uma única linha na saída, que consiste de: “-1” caso você possa afirmar com certeza que o empregado tenha mentido em algum relatório; “-2” caso você não possa afirmar que o empregado esteja mentindo, mas também não possa encontrar as durações de cada máquina de maneira única; N inteiros, separados por espaço, que representem a duração de cada tarefa se essas durações puderem ser determinadas de formam única.",
        "descricao": "Um sultão estava desconfiado de seu empregado. Ele dizia que trabalhava incessantemente, sem parar, para cumprir suas tarefas de N tipos diferentes. O sultão quer saber exatamente quanto tempo leva cada uma das tarefas, para poder avaliar melhor se o empregado é preguiçoso ou se realmente está sobrecarregado. Para tentar desmascarar o empregado ele passou a solicitar relatórios de suas atividades. O empregado entregou N relatórios distintos, a mesma quantidade que o total de tarefas, o que deixou o sultão ainda mais desconfiado. Este empregado trabalha em jornadas de P horas e cada tarefa demora entre uma e P horas para completar. Todas tarefas demoram uma quantidade inteira de horas para se completar. As jornadas de trabalho acontecem nas P primeiras horas do dia. Cada relatório consistia da hora em que o empregado começou e a hora em que terminou de trabalhar. Se ele diz que começou a trabalhar às 0 horas e terminou as 3 horas, isso significa que ele começou no início daquela hora e terminou no final desta, totalizando 4 horas no período. O empregado não anotou o dia em que começou a trabalhar e o dia em que terminou. Os horários do relatório nem sempre referem-se ao mesmo dia. Nesse caso o empregado afirma que parou de trabalhar no final do expediente e reinicionou a tarefa ao início do próximo dia. No exemplo anterior o empregado poderia ter trabalhado 4 horas, P + 4 horas, 2P + 4 horas, etc. Com isso relatórios que indiquem que o empregado começou a trabalhar às 3 horas e terminou às 2 são perfeitamente válidos. Além dessas informações, cada relatório contém quantas tarefas de cada tipo foram completadas. Durante esse período, o empregado afirma ter trabalhado sem parar. Sua tarefa é, dadas as informações dos relatórios, determinar qual a duração, em horas, de cada tarefa, caso isso seja possível.",
        "titulo": "Desmascarando o Empregado do Sultão",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros, N (1 ≤ N ≤ 100) e P (2 ≤ P ≤ 24, onde P é um número primo) . As próximas N linhas contêm N + 2 inteiros cada uma. A i-ésima linha, dessas N linhas, corresponde ao i-ésimo relatório e consiste de Si , Ti (1 ≤ Si , Ti ≤ P) , Ai,1 , . . . , Ai,N . Onde Si e Ti correspondem, respectivamente, à hora em que o empregado começou e parou de trabalhar. Cada Ai,j(0 ≤ Ai,j ≤ 10 9 e ΣjAi,j > 0) é a quantidade de vezes que a tarefa j foi realizada no período do relatório i."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1798",
        "saida": "Imprima em uma linha o maior valor que pode ser obtido com o corte e a venda o cano original de tamanho T.",
        "descricao": "A OBI (Organização Brasileira de Instalações) é uma empresa que atua na área de produção de tubos e conexões. A técnica de produção utilizada na OBI produz sempre canos longos, que são então cortados para satisfazer a necessidade dos clientes. Os seus clientes tem aplicações variadas, necessitando de diferentes comprimentos de canos. No início, quando a empresa era pequena e os clientes eram poucos, todo o processo de planejamento dos cortes (para maximizar o lucro) era efetuado por um funcionário muito dedicado. Porém, com o aumento dos pedidos, isto se tornou proibitivo. É aí que você entra: contratado pela OBI, sua tarefa é escrever um programa que, dada uma relação de comprimentos de cano e seus respectivos valores de venda, determine o maior valor total que possa ser obtido com o corte de um cano de comprimento inicial determinado. Comprimentos de cano podem ser repetidos, e podem haver sobras de cano.",
        "titulo": "Cortando Canos",
        "entrada": "A entrada é iniciada por um linha contendo o inteiro N (1 &leq; N &leq; 1000) que é o número de tamanhos de canos solicitados e o inteiro T (1 &leq; T &leq; 2000) que é o tamanho do cano produzido pela OBI. A seguir virão N linhas, cada uma contendo dois inteiros Ci e Vi (1 &leq; Ci, Vi &leq; 5000, 1 &leq; i &leq; N), representando, respectivamente, o comprimento do cano i desejado por um cliente e seu valor de venda."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1350",
        "saida": "Para cada entrada seu programa deve gerar uma linha de saída. Se a entrada é consistente, seu programa deve imprimir o número máximo de sentenças verdades da entrada. Caso contrário seu programa deve imprimir a palavra \"Inconsistent\" (Inconsistente).",
        "descricao": "A corte do rei Xeon 2.4 está sofrendo com intrigas e conspirações. Um documento recentemente descoberto pelo Serviço Secreto do Rei revela que talvez faça parte de um esquema malévolo. O documento contém um simples conjunto de sentenças que diz a verdade ou a mentira para cada afirmação. As sentenças tem a forma de \"A sentença X é falsa/verdadeira\" onde X indefine uma sentença do conjunto. O Serviço Secreto do Rei suspeita que as sentenças se referem a outro, ainda não descoberto, documento. Enquanto eles tentam descobrir a origem e propósito do documento, o Rei ordenou-o a descobrir se o conjunto de sentenças que o documento contém é consistente, isto é, se há uma verdadeira afirmação nas sentenças. Se o conjunto é consistente, o Rei quer que você determine o máximo de números de sentenças que podem ser verdadeiras nas afirmações do documento.",
        "titulo": "Esta Sentença é Falsa",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um único inteiro N, que indica o número de sentenças no documento (1 ≤ N ≤ 1000). As N linhas seguintes contém cada uma, uma sentença. Sentenças são numeradas sequencialmente, na ordem em que aparecem na entrada (a primeira sentença é 1, a segunda é 2, e assim vai). Cada sentença tem a forma \"Sentence X is true.\" (A sentença X é verdadeira) ou \"Sentençe X is false.\" (A sentença X é falsa), onde 1 ≤ X ≤ N. O valor N = 0 indica o fim da entrada."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1598",
        "saida": "Para cada instância, imprima em uma única linha o valor mínimo de um circuito do tapete, onde esse valor é a razão entre a quantidade de fio dividida pelo número de nós no circuito. O valor deve ser impresso com 3 casas decimais. Imprima -1, caso não exista circuito no tapete.",
        "descricao": "Os tapetes árabes são muito conhecidos. Sua qualidade é reconhecida em todo o mundo, e as características de um bom tapete são apreciadas por todos. Avaliar os tapetes é uma tarefa muito difícil, e os especialistas analisam suas características minuciosamente para estabelecer um preço adequado. Os tapetes são formados por pontos, onde os fios são amarrados. Apesar de ser muito difícil para uma pessoa comum, os especialistas são capazes de dizer a direção em que o fio foi amarrado entre dois pontos. Estes fios formam circuitos nos nós e padrões complicados têm centenas ou mesmo milhares de circuitos e são muito intrincados. Circuitos grandes (em que a quantidade de fio dividida pelo número de nós é muito grande) desvalorizam o tapete, pois o torna menos resistente. Circuitos pequenos são valorizados, e o avaliador sempre busca encontrar o menor circuito existente no tapete, pois este é um indicador do valor do tapete. Sua tarefa neste exercício é ler os dados de um tapete com N nós e M fios (ligações entre estes nós em que a direção em que foi feita é determinada) e determinar o valor do menor circuito do tapete, ou seja, o circuito em que a razão entre a quantidade de fio dividida pelo número de nós é mínimo.",
        "titulo": "O Verdadeiro Valor dos Tapetes",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros, N (3 ≤ N ≤ 1.000) e M (N ≤ M ≤ N × N − 1), correspondendo aos números de nós e ligações, respectivamente. Os nós são numerados de 1 a N. Seguem M linhas, cada uma com três inteiros u, v e c (0 ≤ c ≤ 1.000) descrevendo uma ligação do nó u para o nó v usando c cm de fio."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1605",
        "saida": "Para cada instância imprima uma linha contendo um número com 2 casas decimais, que é o número esperado de lotes que o comprador precisa comprar para completar sua cáfila.",
        "descricao": "Camelos foram domesticados e são utilizados pelos povos beduínos há vários milênios. Há dois tipos principais, os camelos bactrianos, com 2 corcovas, que são mais raros, e os dromedários, mais comuns, com apenas uma corcova. Para simplificar, os camelos bactrianos são chamados apenas de camelos. Tanto camelos quanto dromedários têm diferentes características interessantes: alguns são líderes natos, outros têm mais força, outros suportam caminhadas mais longas, etc. No entanto, cada animal possui apenas uma dessas características. Uma caravana precisa de animais com várias dessas características. No comércio desses animais são consideradas N1 características diferentes para dromedários e N2 características diferentes para camelos. Os beduínos comercializam esses animais sempre em cáfilas formadas por grupos de três. Essa é uma tradição bérbere que remonta ao século IX, quando os comerciantes de camelos e dromedários só podiam vender seus animais dessa forma. Os compradores não podem escolher os animais. Os lotes de 3 animais são preparados pelo vendedor e o comprador pode apenas dizer o número do lote que deseja comprar, sem mais informações a respeito. Os comerciantes são conhecidos por sua extrema honestidade, e cada lote é formado de forma aleatória. Para cada animal do lote, o comerciante sorteia com probabilidade p1 se será um dromedário e com probabilidade p2 = 1 − p1 se será um camelo, p1 ≥ p2 . Escolhido o tipo i de animal, é escolhida uma característica dentre as Ni, com igual probabilidade, e um animal com essa característica é incluído no lote. Todos os sorteios do comerciante são independentes, podendo um lote conter dois dromedários fortes e um camelo líder, por exemplo, ou mesmo três camelos bons de caminhada. Entretanto, para atestar sua honestidade, sempre que o comerciante produz um lote que tem apenas dromedários ele faz um novo sorteio. Dentre as N1 características para dromedários, há M1 que são desejáveis para o comprador. E dentre as N2 características para camelos, há M2 que são desejáveis para o comprador. Qual o número esperado de lotes que um comprador deve adquirir para montar uma cáfila que tenha dromedários e camelos com todas as M1 e M2 características desejadas?",
        "titulo": "Montando Sua Própria Cáfila",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de 3 linhas, cada uma contendo 2 inteiros. Na primeira linha temos N1 e N2 (1 ≤ Ni ≤ 50). A segunda linha consiste de M1 e M2 (0 ≤ Mi ≤ Ni), enquanto que a terceira linha temos W1 e W2 (1 ≤ W2 ≤ W1 ≤ 100), que dão as probabilidades de cada categoria através da realção:"
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1084",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo o maior prêmio que Juliano pode ganhar.",
        "descricao": "Juliano é fã do programa de auditório Apagando e Ganhando, um programa no qual os participantes são selecionados através de um sorteio e recebem prêmios em dinheiro por participarem. No programa, o apresentador escreve um número de N dígitos em uma lousa. O participante então deve apagar exatamente D dígitos do número que está na lousa; o número formado pelos dígitos que restaram é então o prêmio do participante. Juliano finalmente foi selecionado para participar do programa, e pediu que você escrevesse um programa que, dados o número que o apresentador escreveu na lousa, e quantos dígitos Juliano tem que apagar, determina o valor do maior prêmio que Juliano pode ganhar.",
        "titulo": "Apagando e Ganhando",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros N e D (1 ≤ D < N ≤ 105), indicando a quantidade de dígitos do número que o apresentador escreveu na lousa e quantos dígitos devem ser apagados. A linha seguinte contém o número escrito pelo apresentador, que não contém zeros à esquerda. O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1493",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro que representa o número de pares de cidades distintas que tem abastecimento de água disjunto.",
        "descricao": "Nlogônia é um reino que consiste em várias cidades localizadas em uma grande montanha. A capital é Logville, localizada no pico da montanha. Logville tem um enorme lago com uma forma perfeitamente redonda, apropriadamente chamado \"The Big O\". Este é o único lago com água potável em todo o reino, por isso é usado para abastecer todas as cidades. Algumas cidades em Nlogônia estão conectados com tubos de água que permitem a distribuição da água. Como não há bombas, cada tubo leva a água de uma cidade para outra cidade em uma altitude mais baixa, usando a gravidade. O sistema de água da Nlogônia tem sido uma fonte de preocupações para a Rainha, já que as cidades dependem de outras cidades para o seu abastecimento de água, por isso ocorrem discussões sobre a quantidade de água que uma cidade pode utilizar. Um caminho de abastecimento de água é uma sequência de cidades em ordem decrescente de altitude, a partir de Logville e de tal forma que existe um tubo de ligação entre cada par de cidades consecutivas na sequência. Duas cidades têm abastecimento de água disjunto se e somente se existem dois caminhos de abastecimento de água, um caminho que termina em cada uma das cidades, de modo que Logville é a única cidade que está presente em ambos os caminhos. Observe que Logville tem abastecimento de água disjunto de todas as outras cidades. A rainha considera o abastecimento de água disjunto como uma boa propriedade, já que isso reduz problemas de dependência e também evita que a falta de água se espalhe tão rapidamente através Nlogônia. Portanto, ela ordenou que fosse realizada uma pesquisa para avaliar o estado atual da disjunção do abastecimento de água em todo o reino. Sendo o mais inteligente dos conselheiros na corte da rainha, você foi convocado para ajudar a calcular o número de pares de cidades distintas que têm abastecimento de água separados.",
        "titulo": "Abastecimento de Água Disjunto",
        "entrada": "A entrada é composta por diversos casos de teste e termina em EOF. A primeira linha de cada caso de teste contém dois inteiros C (2 ≤ C ≤ 1000) e P (1 ≤ P ≤ 105),que representam respectivamente, o número de cidades e o número de tubos de água em Nlogônia. Cidades são identificadas com diferentes números inteiros de 1 a C, em ordem decrescente de altitude (duas cidades não têm a mesma altitude); Logville é a cidade 1. Cada uma das P linhas seguintes descreve uma tubulação com dois números inteiros U e V (1 ≤ U <V ≤ C), indicando que o tubo conecta a cidade U com a cidade V. Você pode assumir que não há dois tubos iguais entre um mesmo par de cidades e que, para cada cidade de Nlogônia há pelo menos um caminho de abastecimento de água que termina nela."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1029",
        "saida": "Para cada caso de teste de entrada deverá ser apresentada uma linha de saída, no seguinte formato: fib(n) = num_calls calls = result, aonde num_calls é o número de chamadas recursivas, tendo sempre um espaço antes e depois do sinal de igualdade, conforme o exemplo abaixo.",
        "descricao": "Quase todo estudante de Ciência da Computação recebe em algum momento no início de seu curso de graduação algum problema envolvendo a sequência de Fibonacci. Tal sequência tem como os dois primeiros valores 0 (zero) e 1 (um) e cada próximo valor será sempre a soma dos dois valores imediatamente anteriores. Por definição, podemos apresentar a seguinte fórmula para encontrar qualquer número da sequência de Fibonacci: fib(0) = 0 fib(1) = 1 fib(n) = fib(n-1) + fib(n-2); Uma das formas de encontrar o número de Fibonacci é através de chamadas recursivas. Isto é ilustrado a seguir, apresentando a árvore de derivação ao calcularmos o valor fib(4), ou seja o 5º valor desta sequência: Desta forma, fib(4) = 1+0+1+1+0 = 3 Foram feitas 8 calls, ou seja, 8 chamadas recursivas.",
        "titulo": "Fibonacci, Quantas Chamadas?",
        "entrada": "A primeira linha da entrada contém um único inteiro N, indicando o número de casos de teste. Cada caso de teste contém um inteiro X (1 ≤ X ≤ 39) ."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1299",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro que representa o número do jogador (1 ou 2) que vai ganhar o jogo, se ambos jogarem de maneira perfeita.",
        "descricao": "Jogo de mosaicos ou de ladrilhos é um jogo para dois jogadores, jogado sobre uma placa rectangular na forma de uma tabela de R linhas e C colunas de  células quadradas chamados mosaicos. No início do jogo, alguns dos quadrados podem ser pintados de preto e o restante permanece branco. Em seguida, o jogador 1 e jogador 2 alternam jogadas e o primeiro que não pode fazer um movimento válido perde o jogo. O primeiro movimento do jogo é feito por um jogador e consiste na escolha de um ladrilho branco  escrevendo o número do 1 nele. Depois disso, cada movimento subsequente i consiste em escrever o número i em um azulejo branco não utilizado que é adjacente horizontalmente ou verticalmente (mas não na diagonal)  ao ladrilho numerado i - 1. Note que o jogador 1 sempre escreve números ímpares e jogador 2 sempre escreve números pares. ​A figura a seguir mostra três exemplos possíveis de configurações de uma placa com R = 3 e C = 4, durante um jogo. À esquerda ela mostra a configuração inicial. No centro, mostra um estado intermediário, onde as células em cinza marca os movimentos possíveis para o jogador 2. E à direita mostra a configuração quando o jogo é ganho pelo jogador 2, que escolheu o movimento apropriado.  Sua tarefa é escrever um programa que, dada a configuração inicial do tabuleiro, determina qual jogador irá ganhar, se ambos jogarem de maneira perfeita.",
        "titulo": "Jogo de Mosaicos",
        "entrada": "Cada caso de teste é descrito utilizando várias linhas. A primeira linha contém dois inteiros R e C que representam respectivamente o número de linhas e o número de colunas do tabuleiro (1 ≤ R, C ≤ 50). A enésima (i-th) das próximas R linhas contém uma string Bi de C caracteres que descreve a enésima (i-th) linha do tabuleiro inicial. O enésimo (j-th) caracter de Bi é ou `.' (ponto) ou a letra maiúscula 'X', representando que o ladrilho na linha i e coluna j é respectivamente branco ou preto. Dentro de cada caso de teste pelo menos um dos ladrilhos ou mosaicos é branco."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1231",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único caractere. Se for possivel encontrar uma concatenação de uma ou mais palavras do primeiro conjunto que seja igual a uma concatenação de uma ou mais palavras do segundo conjunto então o caractere deve ser S, caso contrário deve ser N.",
        "descricao": "Dados dois conjuntos de palavras formadas por zeros e uns, você deve escrever um programa para determinar se existem concatenações de palavras de cada um dos conjuntos que gerem uma mesma palavra. Por exemplo, se um conjunto A contém as palavras 010 e 11 e outro conjunto B contém as palavras 0 e 101, então a palavra 01011010 pode ser formada tanto por contatenações de palavras de A como por contatenações de palavras de B: 010 · 11 · 010 = 01011010 = 0 · 101 · 101 · 0",
        "titulo": "Palavras",
        "entrada": "A primeira linha de um caso de teste contém dois inteiros, N1 (1 ≤ N1), e N2 (N2 ≤ 20), que indicam respectivamente o número de palavras do primeiro e do segundo conjunto de palavras. Cada uma das N1 linhas seguintes contém uma palavra do primeiro conjunto. Cada uma das N2 linhas seguintes contém uma palavra do segundo conjunto. Obs: cada palavra tem no mínimo um caractere e no máximo 40 caracteres, todos zeros e uns."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1654",
        "saida": "Imprima todas as combinações de preços que seja possível fazer com quatro itens. O valor total para cada combinação, deve ser de no máximo 20,00 €. Para cada combinação, imprima uma linha com os preços dos quatro itens em ordem crescente, com um caractere de espaço entre eles. Você pode imprimir as combinações em qualquer ordem, mas certifique-se de imprimir cada combinações apenas uma vez.",
        "descricao": "Um caixa de uma Mercearia parece estar com dificuldade em distinguir o símbolo de multiplicação e de adição. Para facilitar as coisas para ele, você deve comprar itens, de tal forma que o produto de seus preços seja igual à soma dos mesmos. Claro, se você comprar apenas um item, isso será sempre verdade. Já com dois ou três itens, essa tarefa pode se tornar muita chata para você. Portando, agora você está interessado em encontrar quatro itens, de modo que a soma dos preços dos quatro itens seja igual ao produto de seus preços. Você deve considerar os preços em Euros (€), com dois dígitos depois do ponto decimal. Obviamente, cada produto custa pelo menos um centavo.",
        "titulo": "Mercearia",
        "entrada": "Este problema não contém entradas."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2089",
        "saida": "Para cada entrada seu programa deverá imprimir uma linha, contendo sim, caso seja possível realizar o pagamento da forma que seu amigo deseja ou nao, caso contrário.",
        "descricao": "Todos os dias nos intervalos da faculdade você e seu amigo vão para a lanchonete da faculdade o mais rápido possível para poder comprar um lanche. Apesar de vocês serem bem rápidos no trajeto entre o prédio do curso e a lanchonete, sempre vocês acabam enfrentando uma fila enorme. Seu amigo é muito metódico, então todos os dias ao chegar na fila ele retira do bolso todas as suas moedas e verifica se ele consegue pagar o lanche inteiramente com o dinheiro que ele tem, sem necessitar que a funcionária da cantina dê algum troco, afinal o troco dado sempre é em moedas e seu amigo não gosta nem um pouco de ter moedas, então caso ele não consiga pagar dessa forma, ele realiza o pagamento no cartão. Como a fila é sempre muito grande e na maioria das vezes vocês estão entre os últimos, seu amigo realiza a contagem com muita calma para que não ocorra nenhum erro. Hoje foi um dia diferente, ao chegar na lanchonete, você e seu amigo se depararam com algo muito estranho: a fila estava pequena. Seu amigo ficou muito preocupado e nervoso de não conseguir a tempo verificar suas moedas e ter que fazer as pessoas que estão atrás de vocês esperarem. Tentando o acalmar, você explica para ele que o problema de verificar as moedas é muito simples e que você é capaz de escrever um programa no celular rapidamente que, dado todas as moedas com seus valores e o preço do lanche, informe se é possível pagar usando apenas as moedas o valor total do lanche. Como vocês são uns dos primeiros da fila, escreva esse programa o mais rápido possível, para que seu amigo tome a decisão antes de chegar no caixa.",
        "titulo": "Lanchonete",
        "entrada": "A entrada possui diversos casos de teste. Cada caso inicia com dois inteiros V (1 ≤ V ≤ 10^5) e N (1 ≤ N ≤ 10^3), representando respectivamente, o valor do lanche que seu amigo deseja comprar e a quantidade de moedas que seu amigo possui. Na próxima linha terá N inteiros, onde Xi (1 ≤ Xi ≤ 10^5) representa o valor da i-ésima moeda. A entrada termina com V = N = 0 e não deve ser processada."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1614",
        "saida": "Imprima a soma das distâncias percorridas por Luís em cada caso. Lembre-se que você deve minimizar este valor.",
        "descricao": "Luís está de férias e gostaria de conhecer os pontos turísticos de Manhattan nos próximos K dias. Através de um mapa, ele sabe a localização dos N pontos turísticos e das M estações de metrô da cidade. Para apreciar bastante os passeios, ele irá visitar apenas um ponto por dia. Entretanto, ele é bastante preguiçoso e gostaria de caminhar a menor distância possível entre o ponto turístico e uma estação de metrô. Em outras palavras, encontre K pares distintos de pontos turísticos e estações de metrô, de forma que a soma das distâncias destes pares seja o mínimo possível. A distância é medida usando-se a métrica de Manhattan, ou seja, dado um ponto A e outro B, a distância entre eles é definida por: D(A,B) = |A_x - B_x| + |A_y - B_y|. Mais informações sobre esta distância: http://en.wikipedia.org/wiki/Taxicab_geometry .",
        "titulo": "Ajude o Turista",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso de teste estarão três números inteiros N (1 ≤ N*) , M (M ≤ 100*) e K considerando 1 ≤ K ≤ min(10, N*M). Nas próximas N linhas estarão as localizações dos pontos turísticos e nas próximas M linhas as localizações das estações de metrô, todas dadas por um par de inteiros (x, y - 0 <= x,y <= 1000* ou 0 <= x,y <= 105**). Não há pontos turísticos ou estações de metrô na mesma localização. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1707",
        "saida": "Imprima um único inteiro por linha, a resposta da pergunta do Kirito.",
        "descricao": "Kirito ama jogos, especialmente aqueles envolvendo números ímpares. Em um dia chuvoso, sem poder sair para brincar com os amigos, ele decidiu brincar sozinho. Ele escreveu números aleatórios em papéis e colocou dentro de um saco. Então misturou tudo e pegou 2 números (x,y) e se perguntou: \"Qual a soma dos dígitos decimais dos números ímpares que estão no intervalo [min(x,y), max(x,y)] (inclui os limites)?\" Agora sua tarefa é ajudar Kirito em seu jogo respondendo suas perguntas.",
        "titulo": "Jogo com Números",
        "entrada": "A entrada consiste de diversos casos testes e termina com EOF. Cada caso de teste consiste de 2 inteiros x e y, o par de números que Kirito tirou do saco (1 ≤ x, y ≤ 10^9)"
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "2053",
        "saida": "No início de cada instância imprima a linha Instancia k, onde k é o número da instância atual. Em seguida, para cada palavra x da lista, imprima uma linha na saída dizendo x e uma palavra valida se ela pode ser obtida a partir da raiz por meio das regras de composição, e x nao e uma palavra valida caso contrário. Imprima uma linha em branco após cada instância.",
        "descricao": "Desde o início de 2006 o Seti@home (programa de busca de vida alienígena) tem registrado padrões estranhos em transmissões de rádio recebidas do espaço. Inicialmente imaginou-se tratar apenas de estática. Porém, com o tempo e a repetição das transmissões os pesquisadores foram se convencendo que algo mais havia. Convidados a participar do projeto, linguistas da Universidade de Baylor identificaram uma linguagem na transmissão. Era uma linguagem bastante simples. A língua tem várias regras de composição de palavras. As regras de composição serão descritas nesse problema pelos seguintes elementos: um conjunto de símbolos não-terminais V; um conjunto de símbolos terminais T; um símbolo não-terminal especial chamado de raiz; um conjunto de regras de composição de palavras. Todas as regras de composição que consideramos aqui serão ou da forma A → BC ou da forma A → a, onde A, B, C são elementos de V e a é um elemento de T. A notação acima indica que podemos substituir o não-terminal A à esquerda da seta pelo terminal a (no primeiro caso) ou pela concatenação dos não-terminais A e B (no segundo caso) que aparecem à direita da seta. Aplicando repetidamente as regras de composição sobre o símbolo raiz, podemos montar palavras válidas na língua. Por exemplo, suponha que o seguinte conjunto de regras de composição é válido: S → AB A → a B → b A palavra ab pode ser obtida a partir desse conjunto de regras de composição da seguinte maneira: S → AB AB → aB, pois A → a aB → ab, pois B → b Já a palavra b não pode ser produzida a partir de S a partir desse mesmo conjunto de regras de composição. Dado um conjunto de regras de composição e uma lista de palavras, sua tarefa é determinar, para cada uma das palavras, se ela pode ou não ser produzida a partir das regras descritas na instância atual.",
        "titulo": "ET Phone Home",
        "entrada": "A entrada é composta por vários casos de teste. Cada teste segue as regras descritas acima. Na primeira linha de cada teste aparece o símbolo raiz, que sempre será uma letra maiúscula. Na segunda linha, o conjunto V será fornecido como uma palavra composta apenas por letras maiúsculas. Cada letra dessa palavra será identificada como um membro de V. O conjunto T será dado como uma palavra de caracteres imprimíveis (com exceção de # e caracteres em branco) na terceira linha. Cada caractere dessa palavra será identificado como um membro de T. A seguir, serão fornecidas várias linhas, que descreverão as regras de composição para a instância atual. Uma regra de composição na forma # → # indica o fim da lista de regras de composição. Por fim, são fornecidas várias linhas, cada uma contendo uma palavra que desejamos saber se pode ou não ser produzida a partir da raiz por meio das regras de composição. Essas palavras não vão conter qualquer caractere em V e são compostas por no máximo 50 caracteres. A lista de palavras termina com uma linha contendo # na primeira coluna."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1513",
        "saida": "Para cada caso de teste, imprima um inteiro, representando a quantidade mínima de saltos que o cavalo de Rafael deve fazer para capturar os K peões e retornar à posição inicial. É garantido que sempre haverá ao menos uma maneira de capturar todos os peões.",
        "descricao": "Rafael gosta tanto de jogar xadrez que resolveu inventar novas maneiras de se desafiar. Dessa vez ele resolveu jogar com a peça do cavalo, pois a forma como ela se movimenta pareceu adicionar um pouco de dificuldade ao jogo, segundo Rafael. O desafio é o seguinte: Há um cavalo e K peões no tabuleiro. Dada uma posição inicial do cavalo e dos peões, qual a menor quantidade de movimentos necessários para capturar os K peões e voltar à posição inicial? Lembre que a peça do cavalo pode mover-se usando saltos de formato L, ou seja, duas posições para a vertical e uma posição para a horizontal, ou duas posições para a horizontal e uma posição para a vertical. Para capturar um peão, basta ocupar a mesma posição que ele no tabuleiro.",
        "titulo": "Cavalo",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com três inteiro N, M e K (5 ≤ N, M ≤ 100, 2 ≤ K ≤ 15), representando, respectivamente, a quantidade de linhas e de colunas do tabuleiro, e a quantidade de peões a serem capturados. As próximas N linhas irão conter M caracteres cada, onde o caractere na linha i e coluna j indica que na posição [i, j] do tabuleiro há: '.' uma posição válida onde o cavalo pode pular. '#' uma posição inválida onde o cavalo não pode pular. 'C' a posição inicial do cavalo de Rafael. 'P' a posição de um dos K peões o qual Rafael deve capturar. O último caso de teste é indicado quando N = M = K = 0, o qual não deve ser processado."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1106",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número real, escrito com precisão de seis casas decimais, indicando a probabilidade de Rubens vencer o torneio.",
        "descricao": "Embora não seja uma modalidade muito popular no Brasil, as corridas de dragsters atraem multidões nos EUA. Os fãs gostam de ver os carros velozes correndo a velocidades de até 400 km/h, mesmo que só por alguns segundos. Muitos competidores são mecânicos amadores que apenas incluiram foguetes e outros artefatos para criarem carros ultra velozes. As competições de dragsters são disputadas em torneios de eliminação, onde cada disputa consiste de dois competidores correndo lado a lado e somente um deles sendo declarado o vencedor (o que chegar primeiro, claro). Os vencedores são então rearranjados em novas partidas, até que no final somente um competidor seja declarado o campeão. Rubens é um piloto experiente, com carreira em diversas categorias, inclusive a Fórmula 1. Entretanto, após enfrentar alguns contratempos, resolveu dedicar-se a competições de dragsters. Aproveitando-se da larga experiência que ganhou durante a Fórmula 1, ele consegue, observando os competidores, dizer qual a probabilidade de cada um dos competidores envolvidos ser o vencedor de uma dada disputa. Embora Rubens seja bom piloto, não é muito bom em matemática nem em programação, e pediu a sua ajuda para, dadas as probabilidades calculadas por Rubens para a disputa entre cada par de pilotos, e a descrição das corridas do torneio, determinar a probabilidade que ele tem de vencer o torneio.",
        "titulo": "Dragster",
        "entrada": "A entrada é composta de vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de competidores do torneio (2≤N≤300). Na descrição do torneio, os competidores são identificados por inteiros de 1 a N, e as corridas são identificadas por inteiros de N + 1 a 2 × N - 1. Rubens é sempre identificado pelo número 1. As N linhas seguintes descrevem a matriz M de probabilidades calculada por Rubens. A linha i contém N números reais M[i, j] separados por espaços (0 ≤ M[i, j] ≤ 1, para 1 ≤ i ≤ N e 1 ≤ j ≤ N). Cada elemento M[i, j] da matriz indica a probabilidade de o competidor i vencer o confronto com o competidor j (0.001 ≤ M[i, j] ≤ 0.999 e M[i, j] + M[j, i] = 1 para i ≠ j , e M[i, j] = 0 para i = j). As probabilidades serão sempre dadas com três casas decimais de precisão. Cada uma das N - 1 linhas seguintes contém dois inteiros A, B descrevendo uma corrida, sendo que A e B representam identificadores de competidores ou de corridas (1 ≤ A ≤ 2 x N - 1 e 1 ≤ B ≤ 2 x N - 1). Note que a primeira dessas linhas descreve a corrida identificada por N +1, a segunda linha descreve a corrida identificada por N +2 e assim por diante. Quando um identificador de corrida k aparece na entrada como A, isto significa que o competidor que venceu a corrida k é quem disputará a corrida contra B. Da mesma forma, quando um identificador de corrida k aparece na entrada como B, isto significa que o competidor que venceu a corrida k é quem disputará a corrida contra A. O final da entrada é indicado por uma linha que contém apenas um número zero."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1720",
        "saida": "Para cada caso de teste, imprima o número de maneiras diferentes que retângulo dado pode ser preenchido com pequenos retângulos de tamanho 2 por 1. Suponha que o retângulo maior dado seja orientado.",
        "descricao": "Quadrados e retângulos fascinaram, o famoso pintor holandês, Piet Mondriaan. Uma noite, depois de produzir os desenhos em sua \"idas ao banheiro\" (onde ele teve que usar o seu papel higiênico para desenhar, pois todo o seu papel estava cheio de quadrados e retângulos), sonhou em preencher um retângulo maior com pequenos retângulos de largura 2 e altura 1 em formas variadas. Especialista como ele era neste matéria, ele viu de relance que ele iria precisar de um computador para calcular o número de maneiras possiveis de preencher um retângulo maior cujas dimensões eram valores inteiros, como dito. Ajude-o, de modo que o seu sonho não vá se transformar em um pesadelo!",
        "titulo": "Sonho de Mondriaan",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste é composto de dois números inteiros: a altura H (1 ≤ H ≤ 11) e largura W (1 ≤ W ≤ 11) do retângulo maior. A entrada é terminada H = W = 0."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1033",
        "saida": "Para cada caso de teste deve ser impresso o número do caso de teste na saída. Em seguida, imprima n, b e o ultimo dígito (na base b) do número de chamadas. Deverá haver um único espaço entre estes dois números. Note que o ultimo dígito deverá ser apresentado no formato de um número decimal.",
        "descricao": "Os números de fibonacci são definidos pela seguinte recorrência: fib(0) = 0 fib(1) = 1 fib(n) = fib(n-1)+fib(n-2) Mas não estamos interessados em números de Fibonacci aqui. Gostaríamos de saber quantas chamadas recursivas seriam necessárias para um determinado número de Fibonacci n, seguindo a recorrência normal. Uma vez que os números serão bem grandes, não será uma tarefa muito simples para você. Mas então vamos torná-la um pouco mais fácil: queremos que você apresente somente o ultimo dígito do numero de chamadas, onde este número deve estar na base b.",
        "titulo": "Quantas Chamadas Recursivas?",
        "entrada": "A entrada consiste em vários casos de teste. Para cada caso de teste haverá dois números inteiros n (0 ≤ n < (263 - 1)) e b (1 < b ≤ 10000). A entrada será terminada por um caso de teste onde n=0 e b=0, que não deve ser processada."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "2052",
        "saida": "Para cada instância, imprimir a mensagem \"Instance #H:\", onde H é o número da instância, sequêncial e crescente a partir de 01. Em seguida, para cada N linha da instância, o professor pediu para imprimir, o número de pares conectados, o número de pontos não conectados, seguido da mensagem \"->\". Após, listar todos os pares conectados em ordem ascendente, com um espaço entre dois pares conectados. Se não conseguir conectar nenhum ponto, imprimir a mensagem \"No connection found\". Imprimir uma linha em branco entre duas instâncias consecutivas.",
        "descricao": "O professor Jack entregou uma lista de exercícios de revisão, afirmando que na próxima aula vai fazer uma avaliação. O conteúdo principal desta lista é Mapas de Karnaugh. John recebeu a lista, mas percebeu que faltou as aulas de Mapas de Karnaugh. John é esperto e conhece um amigo que sempre vai as aulas, e sabe como resolver Mapas de Karnaugh. Neste problema você é o amigo de John, será que você consegue ajudar John? Conectando a menor quantidade de pares possíveis? Seguindo as especificações do professor: 1º Formar pares: Um par é conectado, quando encontrar o menor ponto adjacente presente. 2º Formar termos isolados: Pares conectados não precisam ser conectados uma segunda vez. No Mapa de Karnaugh acima é possível identificar os pontos conectados seguindo as especificações do professor. Pares conectados: O par [ 2-6 ] indica que o ponto 2 encontrou o menor ponto adjacente presente 6. Pares isolados: Note que o par [ 6-8 ] não é um par isolado. O ponto 6 está conectado com o ponto 2, e o ponto 8 está conectado com o ponto 7. Portanto não é um par válido. Um par é válido se, e somente se, um de seus pontos não estiver conectado a nenhum outro ponto. Cada par consiste de [ origem-destino ], os pares sempre começam a ser conectados do menor ponto presente na N linha da entrada, origem, com o menor ponto adjacente presente de destino, um determinado ponto de origem tem quatro pontos de destino, por exemplo o ponto de origem 16 tem os pontos [ 8, 12, 14, 15 ] de destino. Uma instância contém um número inteiro N. As próximas N linhas consistem em pontos verdadeiros no Mapa de Karnaugh. Estamos falando de Mapas de Karnaugh de quatro variáveis. Portanto no máximo 16 números. Como o professor mostrou um exemplo, tudo fica mais fácil. Na imagem acima é possível observar que são quatro pares conectados: [ 2-6 ] [ 7-8 ] [ 12-16 ] [ 13-14 ]. E todos os pontos estão conectados. Ajude John a resolver os exercícios da revisão.",
        "titulo": "Mapas de Karnaugh II",
        "entrada": "A primeira linha de cada instância contém um inteiro N ( 1 ≤ N ≤ 105 ), que corresponde ao número de exercícios presentes na lista do professor Jack. As N linhas seguintes contém um número indefinido de inteiros E ( 1 ≤ E ≤ 16 ). Cada número inteiro E indica que no Mapa de Karnaugh na posição E, é verdadeira, isto é contém 1, como mencionado acima. A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1659",
        "saida": "Para cada caso de teste, a saída deve conter o número mínimo de entradas que devem ser mantidas para satisfazer os requisitos descritos acima. O processo de recuperação de ano descrito acima deve dar o mesmo resultado para as entradas iniciais do que para as entradas que foram selecionadas para manter na memória.",
        "descricao": "O telefone que você comprou há muito tempo tem uma memória interna que mantém o controle de todas as chamadas que recebe. Ele registra a data (mês e dia) e a hora (hora e minuto) de cada chamada, juntamente com o número de quem liga. Apenas um número limitado de chamadas podem ser registradas (memória ainda era cara naquela época). Você descobre que o registro está quase cheio e, portanto, pretende apagar algumas entradas do registro. Na escolha das entradas para apagar você tem que considerar duas restrições: Existem algumas entradas (importantes) que você deseja manter. Você deve conseguir recuperar o ano (que o telefone não armazena) de cada chamada que você mantém. O processo de recuperação é descrito abaixo. Calcule o número mínimo de entradas que devem ser mantidas para satisfazer estes requisitos. Recuperação dos anos Dada uma lista de timestamps (composta de mês, dia, hora e minuto) de chamadas, você descobre o ano de cada chamada pelo seguinte procedimento: A última chamada na lista ocorreu no ano atual. Você deve comparar seu timestamp T com o timestamp T' da chamada anterior. Se T' < T, você deve assumir que as duas chamadas ocorreram no mesmo ano. Se T' ≥ T, você deve assumir que a chamada anterior ocorreu no ano anterior. Você deve percorrer a lista de trás para frente e fazer como no item 2. a cada passo. Nota-se que este procedimento não é o correto de forma geral, mas você pode assumir que é para a entrada que você obtém, e você deve garantir que ele dá o mesmo resultado para um registo encurtado. P.S.: Devido a um erro no software do telefone, nenhuma ligação foi registrada dia 29 de Fevereiro.",
        "titulo": "Chamadas Econômicas",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste começa com o número de entradas N no registro, onde 1 ≤ N ≤ 1000. Cada uma das próximas N linhas contém uma entrada. Cada entrada tem o formato \"mm:dd:HH:MM número ±\", sendo \"mm\" o mês, \"dd\" o dia, \"HH\" a hora, \"MM\" os minutos, e o número (tendo 1-16 dígitos) de cada chamada, seguido por \"+\" marcando uma chamada que você quer definitivamente manter ou por \"-\" para marcar as outras chamadas. As entradas vêm diretamente do registro do telefone, ou seja, elas são classificadas por tempo de recepção da chamada correspondente (a última entrada é a mais recente). Você pode assumir que o processo de recuperação descrito acima produz o ano correto de cada chamada. O último caso de teste é demonstrado por um 0."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1922",
        "saida": "Imprima a quantidade máxima de criaturas que podem ser atingidas com no máximo m marteladas.",
        "descricao": "Durante a festa do Padroeiro de Lagoa de Roça, diferentes jogos, brinquedos e parques de diversão se instalam no centro da pequena cidade do interior da Paraíba. Um deles é o não tão conhecido Jogo do Martelo. O jogo consiste de um tabuleiro esburacado e um martelo que cobre totalmente o tabuleiro. Além disso, há pequenas criaturas (bonecos) que vez por outra saem dos buracos do tabuleiro, ficam visíveis por um segundo e após isso voltam a se esconder no buraco por onde saíram. O objetivo do Jogo do Martelo é atingir a maior quantidade de criaturas com uma quantidade m de marteladas. Após ficar um tempo observando o jogo, Diego percebeu que cada uma das criaturas possuía um padrão de aparição, ou seja, se uma determinada criatura i, apareceu pela primeira vez no instante di, ela tornará a aparecer no instante 2di, depois no instante 3di e assim por diante até que o instante kdi chegasse, após isso essa criatura não apareceria mais. Diego anotou os instantes da primeira e da última aparição de cada uma das criaturas e agora ele precisa de você. Escreva um programa que com essas informações e com a quantidade m de marteladas disponíveis, informe qual a quantidade máxima de criaturas que podem ser marteladas. Obs.: Quando uma criatura é martelada ela não aparece mais durante o jogo.",
        "titulo": "Diego e o Jogo do Martelo",
        "entrada": "A primeira linha da entrada será composta por dois inteiros 1 ≤ n ≤ 103 e 1 ≤ m ≤ 10, representando a quantidade de criaturas e a quantidade de marteladas disponíveis, respectivamente. Cada uma das próximas n linhas irá conter dois inteiros 2 ≤ di ≤ 500 e 2 ≤ kdi ≤ 103, representando o instante da primeira e da última aparição da criatura i, respectivamente. É garantido que di  ≤ kdi."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1288",
        "saida": "Se o dano total das cargas carregadas for maior ou igual à resistência do castelo então deverá ser impressa a mensagem “Missao completada com sucesso”, caso contrário, deverá ser impressa a mensagem “Falha na missao”.",
        "descricao": "O jogo canhão de destruição é um jogo muito simples de ser entendido. Você recebeu como missão destruir um determinado castelo, sendo que o mesmo possui como característica um número inteiro R que é a sua resistência. Para tentar completar sua missão, você recebeu um canhão que é carregado com projéteis de chumbo, sendo que este canhão pode ser carregado com quantos projéteis forem possíveis desde que a soma do peso deles em quilos não exceda a capacidade de carga do canhão. Podem existir projéteis com pesos iguais e poder de destruição diferentes devido ao seu formato, embora isso não seja tão importante. Ao atingir o castelo, um projétil faz com que o seu valor de destruição seja diminuído da resistência do castelo. Levando em consideração que o canhão pode ser carregado uma única vez, respeitando o seu limite de quilos, a sua tarefa é carregar o canhão com projéteis que não ultrapassem o seu limite de carga mas que façam o maior estrago possível, para saber se a missão foi completada ou não.",
        "titulo": "Canhão de Destruição",
        "entrada": "A primeira linha de entrada contém o número de casos de teste. Cada caso de teste inicia com uma linha contendo um número inteiro N (1 ≤ N ≤ 50), que representa o número de projéteis de chumbo disponíveis. Seguem N linhas contendo dois inteiros X e Y, representando respectivamente o poder de destruição do projétil e o peso do projétil. A próxima linha contém um inteiro K (1 ≤ K ≤ 100) que representa a capacidade de carga do canhão e a última linha do caso de teste contém um inteiro R que indica a resistência total do castelo."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1685",
        "saida": "Para cada caso teste, imprima o lado maximun da praça seguido pela lista do ponto superior esquerdo de cada praça na imagem (organizado por linha e em caso de empate para a coluna). Verifique a amostra para mais detalhes. Não imprima linha em branco entre dois casos testes.",
        "descricao": "Daniel é um engenheiro civil, que foi atribuído a encontrar possíveis locais para a construção de uma praça, no entanto, a pedido da população local para a construção da praça, nenhuma árvore deve ser cortada. Daniel tem imagens de satélite do lugar, a necessidade de maximizar a área da praça e relatar suas possíveis localizações. Você poderia ajudar?",
        "titulo": "Praça de Daniel",
        "entrada": "A primeira linha contém a quantidade de casos tests T (T <= 40). A segunda linha contém dois números inteiros n e m (1 <= n, m <= 1000), a altura e a largura da imagem. As seguintes linhas n contém as informações da imagem, onde \" * \" representa terras ocupadas por árvores e \" . \" Representa terra livre. Há pelo menos um \" . \" Na imagem."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1522",
        "saida": "Para cada instância, imprima uma linha contendo o número 1 se o jogador pode ganhar a instância do jogo ou o número 0 se o jogo for impossível.",
        "descricao": "Claudio inventou um novo jogo, chamado de Jogo das pilhas, e quer submetê-lo ao próximo concurso de jogos da URI (União Recreativa Internacional). Apesar de muito divertido, o jogo parece ser muito difícil de ganhar, logo Claudio pediu sua ajuda para avaliar se algumas instâncias do jogo podem ser vencidas. O jogo das pilhas é individual, e é jogado com três pilhas, inicialmente com o mesmo número de cartas. Cada carta tem um valor numérico inteiro de 0 até 9. O jogador pode, a qualquer momento ver o valor de qualquer carta, mas só pode jogar com as cartas que estão no topo das pilhas. Em cada rodada, o jogador pode remover qualquer combinação de cartas que estejam no topo da pilha (pode escolher 1, 2 ou até 3 cartas) cuja soma dos valores seja múltipla de 3. O jogo é ganho quando todas as cartas forem removidas das pilhas. Se alguma carta não puder ser removida, perde-se o jogo.",
        "titulo": "Jogo das Pilhas",
        "entrada": "A entrada é composta por várias instâncias Cada instância é iniciada por um inteiro N (0 ≤ N ≤ 100), que identifica o número de cartas em cada pilha. A entrada termina quando N = 0. Cada uma das N linhas seguintes contém três inteiros A, B e C, que descrevem os valores numéricos das cartas em um nível da pilha (0 ≤ A, B, C ≤  9). As pilhas são descritas do topo até o fundo."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1269",
        "saida": "Os casos de teste devem ser respondidos na ordem em que foram apresentados. Para cada caso de teste, você deve imprimir: • uma única linha contendo cinco estrelas ***** indicando o início do processo • para cada empregado i, uma linha com dois inteiros i e s, separados por um espaço em branco, o que significa que i tem um salário de s.",
        "descricao": "A Companhia Internacional de Projetos Concretos (ICPC) é uma empresa de construção especializada na construção de casas para o mercado high-end. A empresa é mais rentável do mundo devido a um método muito eficiente em divisão de terras que tem sido usado em seus projetos de desenvolvimento de habitações desde o ano passado. Recentemente houve um caos na ICPC, porque os funcionários se recusaram a trabalhar alegando que eles não ganhavam o suficiente. Preocupado com a perda de lucros devido à greve, a diretoria da empresa propôs um novo método para calcular os salários, que foi felizmente aceito por todos. O salário de um trabalhador reflete na importância das tarefas que ele / ela tem para realizar e é influenciado pela forma como as tarefas dependem uma das outras. Uma tarefa X depende de uma tarefa Y se (i) X depende diretamente de Y, ou (ii) existe uma tarefa T tal que X depende diretamente de T e T depende de Y. Uma vez que todas as tarefas em ICPC devem ser realizadas, não há circularidade da relação de dependência da tarefa. Além disso, a tarefa pode ser realizada por mais do que um trabalhador. Um significado básico está associado com cada tarefa que reflete na sua importância (por exemplo, o desenvolvimento de um método eficiente na divisão de terras é mais importante do que a construção de casas em si). O significado de uma tarefa T é então definido como o significado básico de T mais o significado de cada tarefa que depende diretamente de T. Note que se nenhuma outra tarefa depende diretamente da tarefa T, o significado básico e o significado de T são iguais. O salário de um trabalhador é a soma dos significados de todas as tarefas que ele executa as quais não dependem de qualquer outra tarefa realizada por ele. Em outras palavras, um valor igual ao significado da tarefa X será adicionado ao salário de um trabalhador W que trabalha em uma tarefa X se não houver nenhuma outra tarefa Y da qual X depende, e na qual W trabalha também em Y. ICPC deseja que você ajude-os a determinar o salário de cada um de seus funcionários.",
        "titulo": "ICPC Ataca Novamente",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros T e E indicando, respectivamente, o número de tarefas e do número de empregados (1 ≤ T ≤ 1000 e 1 ≤ E ≤ 1000). As tarefas são numeradas de 1 a T e empregados de 1 a E. Em seguida, vai vir uma sequência de linhas que descrevem as tarefas 1 a T em ordem crescente. Cada tarefa é descrita por duas linhas. A primeira dessas linhas contém três inteiros BS, ND e NE, representando respectivamente o significado básico da tarefa, o número de tarefas que dependem diretamente sobre ela, e o número de empregados que executam-la (1 ≤ BS ≤ 1000, 0 ≤ ND < T e 1 ≤  NE ≤ E). A segunda linha contém inteiros ND + NE correspondentes primeiro ao ND que tem tarefas diretamente dependentes e depois os funcionários NE que executaram a tarefa. O fim da entrada é indicado por T = E = 0."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1788",
        "saida": "Para cada caso, exiba uma única linha, a quantidade máxima de posições possíveis de serem visitadas se a posição de início for escolhida de forma ótima.",
        "descricao": "Alguns amigos, entediados em uma tarde de domingo, resolveram inventar uma brincadeira. Eles desenharam uma matriz de L linhas e C colunas em uma folha de papel, e em seguida escreveram um número em cada uma de suas LxC posições. A brincadeira funciona da seguinte maneira: Uma posição (i, j) qualquer da matriz pode ser escolhida para começar o jogo, i representando uma linha, e j uma coluna. A partir dessa posição, é possível mover para as posições (i-1, j) – (i, j+1) se o modo do jogo for normal ou para as posições (i+1, j) – (i, j-1) se o modo do jogo for reverso. Porém, só é possível mover para alguma dessas posições, se o número contido nela for menor que o número da posição atual. Nesse jogo, há algumas posições especiais. São as posições que contêm um número primo. Quando um jogador cai nessa posição, ele pode se mover para qualquer uma das 2 adjacentes(de acordo com o modo do jogo), mesmo que o número contido nela não seja menor que o número atual. Em uma partida, é possível utilizar apenas K posições especiais. Após a utilização das K posições, uma posição com número primo será tratada como uma posição normal. O objetivo do jogo é “visitar” o maior número de posições possíveis.",
        "titulo": "Brincando com Números",
        "entrada": "Haverá diversos casos de testes. Cada caso inicia com três inteiros, L, C e K (1 ≤ L, C ≤ 1000, 0 ≤ K ≤ 5), representando, respectivamente, a quantidade de linhas, colunas, e a quantidade de posições especiais que podem ser utilizadas. A segunda linha contém um caractere P (‘N’ ou ‘R’) representando o modo do jogo, normal ou reverso. A seguir haverá L linhas, cada linha contendo C inteiros X (0 <= X <= 10^7). A entrada termina com L = C = K = 0, a qual não deve ser processada."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1543",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, representando a soma máxima que é possível alcançar se os padrões forem escolhidos de forma ótima.",
        "descricao": "Você está em um programa de televisão, e tem uma ótima chance de ganhar muito dinheiro. Trata-se de um jogo com algumas regras peculiares, e o montante de dinheiro resultante dependerá apenas da sua esperteza, podendo-se até sair perdendo caso se jogue mal. O jogo funciona da seguinte maneira: há um quadro, com N linhas e M colunas, e em cada posição deste quadro há um inteiro positivo, representando uma quantia em dinheiro. Em cada uma dessas posições você tem a opção de colocar um dos seguintes sinais: '+' - Significa que o valor daquela posição deve ser somado à seu prêmio. '-' - Significa que o valor daquela posição deve ser subtraído do seu prêmio. '.' - Significa que tal posição deve ser ignorada. A vida seria muito simples se você pudesse colocar '+' em todas as posições, portanto há duas regras adicionais ao jogo: para cada linha do quadro, você deve preencher as posições com um dos padrões de sinais montados pelos organizadores do jogo; e para cada coluna do quadro, não é permitido que duas posições adjacentes verticalmente tenham o mesmo sinal (se aplica aos sinais '+' e '-'). É possível usar o mesmo padrão mais de uma vez, desde que não desrespeitando a segunda regra acima. Veja um exemplo na imagem abaixo, onde os padrões são: “++”, “--”, “.+” e “+.”. Considere que há sempre ao menos uma maneira de se completar o quadro. Como o jogo é novo, eles deixaram que você usasse seu computador para te ajudar na decisão, sem saber que você era um programador. Escreva um algoritmo que lhe diga qual a soma máxima que é possível alcançar no jogo.",
        "titulo": "Quadro Premiado",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros, N e M (1 ≤ N, M ≤ 100), indicando o número de linhas e de colunas do quadro, respectivamente. A seguir haverá N linhas, contendo M inteiros cada, representando os valores do quadro. Seja v o valor de qualquer posição do quadro, 1 ≤ v ≤ 100. A seguir haverá um inteiro K (1 ≤ K ≤ 100), indicando o número de padrões. Em seguida haverá K linhas, cada uma com M caracteres, representando cada um dos padrões, conforme a simbologia descrita no enunciado. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado."
    }
]