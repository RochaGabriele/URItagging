[
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1767",
        "saida": "Para cada caso de teste de entrada, seu programa deverá imprimir três linhas de saída, com mensagem correspondente conforme o exemplo abaixo, seguidas por uma linha em branco. A primeira destas linhas deverá conter a quantidade de brinquedos que Y-URI irá carregar até o trenó. A segunda linha conterá o peso total destes brinquedos. A última linha, por pedido de Noel, será a quantidade de pacotes que sobraram para uma viagem futura. No segundo caso de teste abaixo, por exemplo, foram selecionados para a viagem 106 brinquedos que estão agrupados nos pacotes com 24, 2, 3, 4, 5 e 8 kg, somando um total de 46 kg. Para a maior quantidade de brinquedos selecionada, haverá apenas uma quantidade de peso e pacote que irá sobrar.",
        "descricao": "Papai Noel vai começar a fazer as suas viagens de trenó para entregar os presentes de Natal. A SBC (Sociedade Brasileira de Carregadores) determinou que o máximo de peso de cada saco com presentes, poderá ser 50 kgs, para que os elfos, que são \"puxa-sacos\" ou ajudantes de Papai Noel não fiquem com dores nas costas ao carregarem o trenó e também para que o Papai Noel não se machuque ao entregar os brinquedos. Uma vez que todos os brinquedos estão agrupados em pacotes, sua tarefa é auxiliar com um programa que agrupe o máximo de brinquedos possíveis dentro do peso limite de 50 kgs. Logo na sequência Y-URI, que é o elfo chefe, levará este saco até o trenó para que Noel possa seguir com sua viagem.",
        "titulo": "Saco do Papai Noel",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que é o número de casos de teste, ou melhor, o número viagens que Papai Noel irá fazer para entregar os presentes. Cada viagem inicia com um inteiro Pac (1 < Pac < 100) que indica a quantidade de pacotes disponíveis para esta viagem. As próximas Pac linhas irão conter dois valores inteiros cada uma, qt (1 < qt ≤ 300) e peso (1 ≤ peso ≤ 50) que são respectivamente a quantidade de brinquedos e o peso de cada um destes pacotes, separados por um espaço em branco."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1545",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, o maior número de pontos que Alberto consegue obter.",
        "descricao": "Wanderley, após descobrir que Alberto utilizava-se ilicitamente de um programa para ajuda-lo, decidiu parar de jogar o jogo dos cartões. Agora, Alberto passa suas tardes jogando o jogo sozinho. A versão individual do jogo é muito semelhante à original. Um conjunto com um número par de cartões contendo números inteiros é disposto sobre uma mesa, um ao lado do outro, formando uma sequência. Alberto pode pegar um dos dois cartões das pontas, que é computado na soma. A seguir, Alberto descarta um dos cartões que agora está em uma das pontas, e assim sucessivamente, até que os cartões acabem. Alberto tem como objetivo maximizar o número total de pontos que ele consegue nos cartões que não descarta, somando os valores dos cartões escolhidos. Você deve escrever um programa que, dada a sequência de cartões, determine o maior número de pontos que Alberto consegue obter.",
        "titulo": "Cartões II",
        "entrada": "Cada caso de teste é descrito em duas linhas. A primeira linha contém um inteiro par N (2 ≤ N ≤ 104), que indica o número de cartões sobre a mesa. A segunda contém N inteiros, que descrevem a sequência de cartões. Cada um dos N inteiros cabem em um inteiro de 32 bits."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1649",
        "saida": "Para cada caso de teste, imprima o número mínimo de operações necessárias para criar a pintura, ou -1 se for impossível.",
        "descricao": "Talvez você queira saber o que é uma ferramenta irritante de pintura? Primeiro de tudo, a ferramenta de pintura falada só aceita cor preta e branca. Portanto, uma imagem consiste em uma área retangular de pixels, que pode ser preto ou branco. Em segundo lugar, existe apenas uma operação para mudar a cor dos pixels: Selecione uma área retangular de r linhas e c colunas, que está completamente dentro do quadro. Como resultado da operação, cada pixel no interior do retângulo selecionado muda a sua cor (preto vira branco e branco vira preto). Inicialmente, todos os pixels são brancos. Para criar uma imagem, a operação descrita acima pode ser aplicada várias vezes. Você pode pintar uma certa imagem que você tem em mente?",
        "titulo": "Ferramenta Irritante de Pintura",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com uma linha contendo quatro inteiros n, m, r e c. (1 ≤ r ≤ n ≤ 100, 1 ≤ c ≤ m ≤ 100). As próximas n linhas descrevem uma linha de pixels da pintura que você deseja criar. Cada linha consiste em m caracteres com a descrição do pixel desejado a ser pintado (0 indica a cor branca, 1 indica a cor preta). Os casos de testes terminam com uma line contendo 4 zeros."
    },
    {
        "nivel": "9",
        "assunto": "6",
        "numero": "1565",
        "saida": "Para cada teste, a saída consiste de uma linha contendo o número mínimo de pontos que precisam ser adicionados na matriz para conectar todos os pontos. Caso seja impossível conectar todos os pontos, imprima 'impossivel'.",
        "descricao": "Vou te fazer um desafio! Você irá receber uma matriz de dimensões N por M, com caracteres iguais a '-', '#' e '*'. Veja um exemplo a seguir: *-#-* ----- --*-- ####- *---- Os caracteres '#' significam obstáculos, os caracteres '-' significam espaços vazios e os caracteres '*' significam pontos. O seu trabalho é colocar o mínimo de pontos adicionais necessários para deixar todos os pontos conectados. Você só pode colocar mais pontos em espaços vazios. Por exemplo, para a matriz acima, você precisa de no mínimo 7 pontos adicionais para ligar os pontos, assim como mostra a figura a seguir: *-#-* -*-*- --*-* ####* ****- Você aceita o desafio?",
        "titulo": "Ligue os Pontos",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é iniciado por uma linha contendo dois inteiros N e M indicando as dimensões da matriz (1 ≤ N*M ≤ 100). Após a primeira linha, seguem N linhas descrevendo a matriz da mesma maneira mostrada no enunciado."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1636",
        "saida": "Para cada caso de teste imprima uma permutação dos números inteiros de 1 a n, que é tanto antimonotônica quanto cíclica. No caso de existirem várias soluções, você pode imprimir qualquer uma. Separe todos os inteiros por caracteres em branco.",
        "descricao": "Uma permutação é uma sequência de números inteiros, que contém cada número inteiro entre 1 e n exatamente uma vez. Neste problema estamos à procura de permutações com propriedades especiais: Antimonotônica: para cada 3 valores consecutivos pi-1, pi, pi+1 (1 < i < n), pi deve ser tanto o menor ou o maior dos três valores. Cíclica: A permutação deve consistir de apenas um ciclo, isto é, quando nós utilizarmos pi como um ponteiro a partir de i a pi, ele poderá começar na posição 1 e seguir os ponteiros alcançando todas as posições de n antes de retornar para a posição 1.",
        "titulo": "Permutações Antimonotônicas Cíclicas",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste consiste de uma linha contendo um número inteiro n, (3 ≤ n ≤ 106), o número de inteiros na permutação. A entrada é terminada por n = 0."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2072",
        "saida": "Para cada instância imprima uma linha contendo um único inteiro, o maior número de balas de canhão que Anúbis pode derrubar.",
        "descricao": "Anúbis está preocupado, soldados franceses estão praticando tiro ao alvo com balas de canhão na esﬁnge novamente! Dessa vez ele vai tentar impedir que outras partes da esﬁnge tenham o mesmo destino do seu nariz favorito. Para parar os canhões, ele pode invocar raios, que destroem tudo em que tocam, inclusive as balas de canhões. Mas os deuses egípcios já não tem tantos seguidores, o que limita os seus poderes. Anúbis só pode invocar os raios em determinados instantes de tempo. Por sorte um desses condiz com um momento em que as balas estão no ar. Anúbis quer aproveitar essa chance para derrubar o maior número possível de balas. Acontece que para fazer a invocação, Anúbis precisa temporariamente passar para o nosso plano de existência. Assim ele só pode acertar alvos que estejam todos num mesmo plano. Ajude Anúbis a derrubar o maior número possível de balas de canhão.",
        "titulo": "Canhões de Anúbis",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N, onde 1 ≤ N ≤ 50, indicando o número de balas de canhão. Cada uma das próximas N linhas contém três inteiros cada, xi, yi e zi, onde −1000 ≤ xi, yi, zi ≤ 1000, indicando as coordenadas da i-ésima bala de canhão no momento em que Anúbis pode invocar seus raios. Os franceses tem uma mira muito boa, assim eles as vezes atiram balas que vão grudar uma na outra para aumentar o dano. Logo, não se assuste se houverem pontos repetidos na entrada. Eles representam balas diferentes que estão juntas. Nesses casos cada bala é contada separadamente caso Anúbis decida acertá-las."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1744",
        "saida": "Imprima uma linha contendo um inteiro que representa o número mínimo de moedas que Shagga terá que pagar a Dolf para ordernar as pedras de tal forma que todas as pedras pretas estejam à esquerda de todas as pedras brancas.",
        "descricao": "Shagga e Dolf gostam de jogar um jogo com pedras, cada uma das quais é preto ou branco. No início do jogo, Dolf organiza todas as pedras em uma única linha, da esquerda para a direita. Então, o objetivo da Shagga é reordenar as pedras para que todas as pedras pretas fiquem à esquerda de todas as pedras brancas. Para fazer isso, ele pode escolher qualquer par de pedras de cor diferente e trocar as suas posições, pagando A moedas para Dolf no processo. No entanto, se as duas pedras cujas posições que ele está trocando são adjacentes, Dolf deve dar-lhe um reembolso de B moedas, o que significa que a operação vai custar a Shagga apenas A - B moedas. Shagga não é muito esperto, por isso ele ainda não percebeu que ele só vai perder moedas ao jogar este jogo. No entanto, ele está consciente de suas limitações, então ele sabe que, se ele jogar de forma ótima ele perderá menos moedas do que ele está perdendo agora, com sua estratégia de escolher aleatoriamente as pedras que ele troca a cada movimento. Por isso, ele quer saber o número mínimo de moedas que ele terá que pagar a Dolf, a fim de chegar a ordenação desejada das pedras, e ele está ameaçando a te dar de aleatoriamentento as cabras, se você não ajudá-lo.",
        "titulo": "Pedras Pretas e Brancas",
        "entrada": "A primeira linha contém dois inteiros A e B (0 ≤ B <A ≤ 106), que representam, respectivamente, o custo da troca de duas pedras e o valor da restituição ao trocar pedras adjacentes. A segunda linha contém uma string não-vazia S de, no máximo, 5.000 caracteres. O i-ésimo caracter de S indica a cor da i-ésima pedra, a partir da esquerda para a direita, no arranjo inicial das pedras. O caracter é a letra maiúscula \"B\" ou a letra maiúscula \"W\", indicando, respectivamente, uma pedra preta ou uma pedra branca."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1900",
        "saida": "Para cada caso de teste imprima o número de Sequências Nulas na sequência dada.",
        "descricao": "Chico ganhou de aniversário uma lista de números inteiros e chamou seu amigo Mário para brincar com ele. A brincadeira é a seguinte: \"Chico vai escolher N números da lista e vai colocá-los em uma sequência aleatória, e o Mário terá que dizer se existe pelo menos uma Sequência Nula nesta nova sequência.\". Vamos chamar de uma Sequência Nula, uma sequência contígua de inteiros onde a soma de todos os elementos é igual a zero. Dada a sequência do primeiro caso de teste: (-2,-1,0,1,2). Exemplo de Sequências Nulas: (-2,-1,0,1,2), (-1,0,1), (0). Exemplo de Sequências Não Nulas: (-1,1), (-2,0,2), (1). Chico está furioso por que Mário está ganhando toda hora, então ele resolveu dificultar o jogo. Agora ele não terá que dizer se existe ou não uma Sequência Nula, mas dizer quantas sequências na lista são Sequências Nulas. Agora quem está ficando furioso é o Mário e você tem que ajudá-lo sem que o Chico perceba.",
        "titulo": "Sequências Nulas",
        "entrada": "A primeira linha do caso de teste contém um inteiro N (1 ≤ N ≤ 105) que representa a quantidade dos números escolhidos por Chico. Na segunda linha do caso de teste contém os N inteiros Vi (-106 ≤ Vi ≤ 106) separados por espaços representando os elementos da sequência."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2042",
        "saida": "Imprima uma linha com um inteiro T que representa o máximo de felicidade que Fofão consegue proporcionar ao seus fãs na viagem do bairro P ao bairro D. Se for impossível para Fofão chegar com vida ao bairro D, imprima -1.",
        "descricao": "É sabido que uma organização de seres extraordinários vem ascendendo nos últimos tempos. Não se sabe ao certo de onde ou como ela surgiu, mas é notável o quão influente mundialmente são seus membros e o quanto são adorados. Pergaminhos encontrados há décadas indicam que chegaria um tempo em que uma organização que traria felicidade à humanidade chamada Carreta Furacão surgiria e, ao que tudo indica, esse tempo chegou. As escrituras também dão nomes aos lendários seres que fazem parte da organização: Popeye, Capitão América, Patatá, Ben 10, Homem Aranha, Mickey Mouse, Pica-Pau e seu líder supremo: Fofão. As habilidades malabarísticas de Fofão fazem jus a seu apelido de sua forma suprema: Fofão da Pérsia. Apesar de toda sua superioridade, Fofão da Pérsia tem um problema. Sua cidade é formada por bairros e ruas bidirecionais que os ligam. Em cada rua há exatamente um muro. Ele está a bordo do trenzinho da Carreta Furacão em um bairro P, mas todos os outros membros da Carreta Furacão estão em um bairro D. Com o objetivo de reunir todos os membros e formar o Exódia, Fofão deseja chegar no bairro D (o trenzinho consegue chegar em qualquer bairro partindo de qualquer outro bairro). Quando o trenzinho entra em uma rua, Fofão não resiste à tentação e sempre desce do trenzinho para aplicar o seu famoso mortal no muro daquela rua (ver imagem abaixo) e retorna logo após. Cada mortal proporciona aos fãs que estão dentro do trenzinho um nível de felicidade Fi, a depender da altura do muro. O solado do tênis de Fofão começa com uma quantidade B de borracha e, para cada mortal em um muro, uma quantidade Si de borracha é gasta do solado, a qual depende das condições do muro. Se em algum momento a quantidade de borracha no solado de Fofão for X e ele tentar aplicar um mortal em um muro que tem Si > X, Fofão explode. Fofão (e o motorista do trenzinho) não se importa de passar pela mesma rua várias vezes; a única coisa que ele deseja é chegar no bairro D com vida e tendo proporcionado o máximo de felicidade aos fãs dentro do trenzinho. Note que se em dado momento o trenzinho chegar no bairro D, o motorista irá tirar um cochilo e nenhuma rua mais poderá ser percorrida. Escreva um programa que diga ao Fofão qual é o máximo de felicidade que ele consegue proporcionar aos fãs que estão dentro do trenzinho.",
        "titulo": "Fofão da Pérsia",
        "entrada": "A entrada descreve um único caso de teste. A primeira linha consiste de dois inteiros N e M, que representam a quantidade de bairros e a quantidade de ruas, respectivamente. Os bairros são enumerados de 1 até N. (2 <= N <= 100, 1 <= M <= (N * (N - 1)) / 2) A segunda linha consiste de dois inteiros P e D, que representam o bairro de partida e o bairro de destino, respectivamente. (1 <= P, D <= N e P != D) A terceira linha contém um inteiro B, o qual representa a quantidade de borracha inicial no solado de Fofão. (1 <= B <= 1000). As M linhas seguintes descrevem as ruas (e o muro presente em cada rua). Cada rua é descrita por quatro inteiros: Xi, Yi, Fi e Si, que representam, respectivamente, o primeiro bairro que é conectado à rua, o segundo bairro que é conectado à rua, a quantidade de felicidade que o muro presente na rua proporciona aos fãs quando um mortal é aplicado por Fofão e a quantidade de borracha do solado de Fofão que é gasta quando um mortal é aplicado no muro da rua. (1 <= Xi, Yi <= N, 1 <= Si <= 1000, 1 <= Fi <= 10^9 e Xi != Yi)"
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1432",
        "saida": "Para cada caso de teste, imprima o número do caso e a resposta, como mostrado abaixo.",
        "descricao": "Uma sequência binária consiste em zeros e uns. Dada uma string binária T, se não houver uma seqüência binária S tal que SSS (três cópias do S concatenadas) é uma subsequência de T, dizemos que T é o triplo-free. Um padrão consiste de uns e zeros, asteriscos, onde um asterisco (*) pode ser substituído por um ou zero. Por exemplo, o padrão de 0**1 contém strings 0001, 0011, 0101, 0111, mas não 1001 ou 0000. Dado um padrão P, quantas strings binárias triple-livres contém?",
        "titulo": "Strings Binárias Triple-Free",
        "entrada": "Cada linha da entrada representa um caso de teste, que contem o tamanho do padrão N (1 ≤ N ≤ 30), e o padrão P. Pode haver um máximo de 35 casos de teste. A entrada termina quando N é 0."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1210",
        "saida": "Para cada instância a saída deve conter duas linhas. Na primeira, imprima o custo mínimo para o período dado. Na segunda, uma sequência crescente de inteiros, separados por espaços, indicando os anos nos quais são trocadas as máquinas. Se a máquina nunca é trocada, então imprima apenas um 0. Caso exista mais de uma sequência possível, escolha aquela na qual as máquinas são trocadas o mais cedo possível e sempre que possível (por exemplo, entre as sequências “1 4 7” e “1 2 8 10 14” escolha a segunda).",
        "descricao": "A produção de vodka da cidade de São Petersburgo é famosa em todo o mundo. Conta a lenda que a vodka produzida é distribuída diretamente na casa de alguns dos funcionários mais graduados da empresa através do sistema de abastecimento de água. Ou seja, basta abrir a torneira e a vodka jorra geladinha (afinal os canos estão correndo a uma temperatura negativa na maior parte do ano) do cano. Isso causa diversos problemas de segurança, afinal as pessoas escavam as ruas procurando os supostos canos de vodka que saem da empresa. Este não é o único problema enfrentado na produção de vodka da cidade. Para garantir o padrão de qualidade exigido da bebida, ela é produzida em apenas um destilador, que tem uma vida útil bem definida, de M anos. Sua manutenção varia dependendo da idade do equipamento. O custo de manutenção é Ci , onde i é a idade do destilador, e deve ser pago todo ano, até mesmo para destiladores novos. Estes destiladores têm um preço P quando comprados novos (idade 0) e os destiladores usados em fábricas russas são disputados por destilarias de todo o mundo, onde são usados ainda por muitos anos, e por museus. O preço de venda de um destilador com idade i é Vi. Note que um destilador com idade M não pode mais ser usado e deve ser vendido. Sua tarefa neste problema é decidir em quais instantes a empresa deverá trocar o destilador de forma a minimizar o custo de produção ao final de N anos (a partir do ano 1). Considere que a troca de destiladores só pode ser feita no início do ano.",
        "titulo": "Produção Ótima de Ótima Vodka",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância possui 4 inteiros, N (1 ≤ N ≤ 2000), I (1 ≤ l ≤ M), M (1 ≤ M ≤ 2000) e P (1 ≤ P ≤ 1000) representando, respectivamente, o período de produção, a idade inicial do destilador, a idade máxima do destilador e o preço de um destilador novo. A linha seguinte contém M inteiros, separados por espaços, correspondendo ao custo de manutenção Ci (1 ≤ Ci ≤ 1000), para i = 0,1,2, ... M - 1. A próxima e última linha contém M inteiros, separados por espaços, correspondendo ao valor de venda Vi (1 ≤ Vi ≤ P), para i = 1,2, ..., M."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1596",
        "saida": "Para cada instância imprima uma linha com os jogadores ordenados de acordo com a classificação de Yusuf II. Caso exista mais de uma classificação possível, qualquer uma será aceita. Caso não exista classificação de acordo com o esquema de Yusuf II, imprima a palavra inclassificavel.",
        "descricao": "Marrakech é uma das cidadelas do mundo árabe. A cidade foi fortificada nos anos 1122-1123 por Ali ibn Yusuf, filho de um dos primeiros dirigentes da cidade. Um dos grandes chefes da cidade foi o Califa Abu Yaqub Yusuf ‘al-Mustansir’ também conhecido como Yusuf II. O califa viveu apenas 21 anos (1203-1224) e reinou desde os seus 10 anos. Conhecido como um amante das artes e esportes, foi um grande incentivador da construção de palácios e museus. Idealizou uma grande competição de xadrez, uma de suas paixões, disputada por toda a corte. O esquema imaginado por Yusuf II para determinar a classificação do campeonato de xadrez era muito interessante. Todos os N competidores jogavam contra todos. Um jogador K é chamado de ملك (malik) se para todo jogador J diferente de K, ou K vence J ou K vence algum jogador J' que vence J. A classificação do campeonato é uma ordenação dos jogadores J1 , J2 , . . . , JN tal que cada jogador Ji , 1 ≤ i < N , vence Ji+1 e é ملك se considerarmos os jogadores que aparecem depois dele na ordenação, isto é, ignorando os anteriores. Sua tarefa será, dados os resultados dos jogos de um torneio de xadrez em Marrakech, determinar se é possível obter uma classificação de Yusuf II para aquele campeonato.",
        "titulo": "Torneio de Yusuf II",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 1.000) correspondendo ao número de jogadores do torneio. Os jogadores são numerados de 1 a N . Para cada i = 1, . . . , N , a (i + 1)-ésima linha contém um inteiro di ≥ 0 seguido pela identificação dos di jogadores vencidos pelo jogador i."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1843",
        "saida": "Imprima uma linha contendo unicamente o inteiro que representa o menor número de cliques que o jogador precisa fazer para tornar o grid monocromático. Tome cuidado! Fomos generosos ao definirmos os casos de teste e o limite de tempo deste problema, mas nem tanto.",
        "descricao": "Neste ano, ao invés de se submeterem a rituais de iniciação humilhantes, os calouros do curso de Ciência da Computação resolver fazer algo muito mais humanitário para celebrarem seu ingresso numa universidade federal. Primeiramente, eles foram doar sangue no HEMOSC, o hemocentro do estado de Santa Catarina. Depois, ainda com metade do sangue no corpo, eles foram até uma escola pública, o Centro de Educação Infantil Municipal Pequeno Príncipe (ou simplesmente Pequeno Príncipe), realizar trabalhos voluntários. Numa das atividades desenvolvidas, as crianças da escola deveriam jogar no computador um jogo single-player muito interessante chamado Flood It!. Em Flood It!, é apresentado ao jogador um grid N × M em que cada célula está pintada com uma cor, como na figura à esquerda. Quando o jogador clica numa célula qualquer do grid de cor α, a célula no canto superior esquerdo do grid, chamada de origem, de cor β, assume a cor α, mas não somente ela: todas as células que estejam conectadas à origem por caminhos que usam apenas as cores α ou β também assumem a cor α. As adjacências entre as células devem ser consideradas apenas nos sentidos horizontal ou vertical para formar os caminhos. Por exemplo, quando o jogador clica na célula destacada na figura à esquerda, o grid assume a coloração da figura à direita. O objetivo do jogo é tornar o grid monocromático.",
        "titulo": "O Enigma do Príncipe",
        "entrada": "A primeira linha da entrada é constituída por 2 números inteiros N e M (1 ≤ N ≤ 4, 1 ≤ M ≤ 5), os quais representam respectivamente o número de linhas e o número de colunas do grid. As próximas N linhas descrevem a configuração inicial do grid, representando cada cor por um inteiro entre 0 e 9. A entrada não é constituída por nenhuma outra linha."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1648",
        "saida": "Para cada caso de teste imprima uma linha contendo o menor preço por área que se pode conseguir comprando qualquer uma das pizzas no máximo uma vez. Faça um arredondamento desse número na quarta casa decimal, note que você pode combinar um número de cupons de descontos arbitrários: Por uma pizza de custo 10, e dois cupons de desconto de 50 e 20, para esta mesma pizza, você só teria de pagar 10 * 0.8 * 0.5 = 4 (unidades monetárias).",
        "descricao": "Bob ama Pizzas, mas sempre está sem dinheiro. Certo dia ele lê nos jornais que sua pizzaria favorita, Alfredo's Pizza Restaurant, está realizando uma competição: para a primeira pessoa que lhes disser o menor preço por área, que se pode conseguir ao comprar qualquer uma das pizzas no máximo uma vez, receberá a doação de uma pizza grande. \"Essa tarefa é fácil!\", pensou Bob, \"Para cada pizza somente presciso calcular a razão de cada preço e o menor quociente será a resposta.\". Infelizmente, o problema é um pouco mais complicado: Alberto desponibiliza cupons de desconto com a venda de algumas pizzas, para obter outra pizza mais barato, e pior, esses cupons podem ser combinados. As pizzas precisão ser compradas uma após a outra, e não é possivel usar um cupom para ter um desconto retrospectivamente para uma pizza a qual já foi comprada. Você pode ajudar Bob a ser o primeiro a resolver esta tarefa, e ganhar a pizza de graça?",
        "titulo": "Ajude Bob",
        "entrada": "O arquivo de entrada contém diversos casos testes. Cada caso de teste começa com um número m, o número de pizzas Alfredo oferece. A entrada é terminada pelo m = 0.Caso contrário, 1 ≤ m ≤ 15. Logo, segue m linhas descrevendo as pizzas. Cada uma destas seguintes linhas descreve pizza i (1 ≤ i ≤ m) e começa com os três números inteiros pi, ai e ni especificando respectivamente o preço da pizza, sua área e número de cupons de desconto conseguidos ao compra-la, 1 ≤ pi ≤ 10000, 1 ≤ ai ≤ 10000 e 0 ≤ ni < m. Haverá em seguida ni pares de números inteiros xij e yij, que especificam o índice xij (1 ≤ xij ≤ m, xij ≠ i) da pizza que se obtém cupom de desconto e yij (1 ≤ yij ≤ 50) o desconto em termos de porcentagem obtidos ao comprar a pizza xij. Você pode assumir que para cada i o valor de xij é um par distinto."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1408",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único número inteiro, indicando o número mínimo de trocas que Mário precisa efetuar para satisfazer o pedido do novo cliente (ou seja, ter N armários consecutivos lívres).",
        "descricao": "Mário é dono de uma empresa de guarda-volumes, a Armários a Custos Moderados (ACM). Mário conquistou sua clientela graças à rapidez no processo de armazenar os volumes. Para isso, ele tem duas técnicas: Todos os armários estão dispostos numa fila e são numerados com inteiros positivos a partir de 1. Isso permite a Mário economizar tempo na hora de procurar um armário; Todos os armários têm rodinhas, o que lhe dá grande flexibilidade na hora de rearranjar seus armários (naturalmente, quando Mário troca dois armários de posição, ele também troca suas numerações, para que eles continuem numerados sequencialmente a partir de 1). Para alugar armários para um novo cliente, Mário gosta de utilizar armários contíguos, pois no início da locação um novo cliente em geral faz muitas requisições para acessar o conteúdo armazenado, e o fato de os armários estarem contíguos facilita o acesso para o cliente e para Mário. Desde que Mário tenha armários livres em quantidade suficiente, ele sempre pode conseguir isso. Por exemplo, se a requisição de um novo cliente necessita de quatro armários, mas apenas os armários de número 1, 3, 5, 6 e 8 estiverem disponíveis, Mário pode trocar os armários 5 e 2 e os armários 6 e 4 de posição: assim, ele pode alugar o intervalo de armários de 1 até 4. No entanto, para minimizar o tempo de atendimento a um novo cliente, Mário quer fazer o menor número de trocas possível para armazenar cada volume. No exemplo acima, ele poderia simplesmente trocar os armários 1 e 4 de posição, e alugar o intervalo de 3 até 6. Mário está muito ocupado com seus clientes e pediu que você fizesse um programa para determinar o número mínimo de trocas necessário para satisfazer o pedido de locação de um novo cliente.",
        "titulo": "Mário",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois números inteiros N e L (1 ≤ N ≤ L ≤ 100000), indicando quantos armários são necessários para acomodar o pedido de locação do novo cliente e quantos armários estão disponíveis, respectivamente. A linha seguinte contém L números inteiros positivos separados por espaços em branco, nenhum deles maior do que 1000000000, indicando as posições dos armários disponíveis. Os números dos armários livres são dados em ordem crescente. O final da entrada é indicado por um caso onde N = L = 0."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1606",
        "saida": "Para cada instância, imprima uma única linha com a permutação que originou a sequência da entrada, com um espaço separando inteiros consecutivos. Caso exista mais de uma permutação possível, qualquer uma delas será aceita.",
        "descricao": "As Mil e Uma Noites são uma coleção de histórias árabes que remontam ao século IX. Algumas traduções para o ocidente foram feitas a partir do século XVII, e algumas destas histórias, como \"Simbad, o Marujo\", \"Aladim e a Lâmpada Mágica\" e \"Ali Babá e os Quarenta Ladrões\" são hoje conhecidas por crianças de todo o mundo. Na história de Ali Babá os tesouros são guardados em uma gruta que se abre quando a expressão \"Abre-te Sésamo\" é usada. Na verdade, o tesouro estava escondido dentro de um cofre na parede da gruta, que se abria quando uma permutação dos inteiros de 1 a N era recitada. Nem todos os 40 ladrões tinham boa memória, assim Ali Babá era obrigado a manter nas paredes da gruta, dicas de como reconstruir a permutação, caso algum dos ladrões a esquecesse. Ele anotava uma sequência de inteiros a1, a2, ... , ak gerada a partir da permutação que abria o cofre após possíveis aplicações das seguintes operações: duplicação (i, j) e espelhamento (i, j), para i ≤ j. A operação duplicação (i, j) cria uma cópia da subsequência ai, ai+1, ... , aj e a insere entre aj e aj+1. A operação espelhamento (i, j) insere uma cópia invertida da subsequência de ai até aj (aj, aj-1, ... , ai) entre aj e aj+1. Por exemplo, dada a sequência (a1, a2, a3, a4, a5, a6), a aplicação da operação espelhamento (3,5) gera a sequência (a1, a2, a3, a4, a5, a'5, a'4, a'3, a6). Sua tarefa é reconstruir a permutação original.",
        "titulo": "As Dicas de Ali Babá",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém os inteiros K (2 ≤ K ≤ 10 5) e N (1 ≤ N ≤ K) indicando, respectivamente, o tamanho da sequência escrita por Ali Babá e o maior inteiro da permutação original. A linha seguinte contém os K inteiros da sequência, separados por um espaço."
    },
    {
        "nivel": "9",
        "assunto": "6",
        "numero": "1283",
        "saida": "Para cada caso de teste deverá ser impressa uma linha com um número inteiro que representa o número de maneiras nas quais as S pedras podem ser distribuídas entre as primeiras B - 1 caixas, de modo que Carolina fique certa que ela pode ganhar o jogo. Como este número poderá ser muito grande, você é obrigado a imprimí-lo como o restante deste número dividido por 109 + 7.",
        "descricao": "Paulo e Carolina gostam de jogar um jogo com S pedras e B caixas enumeradas de 1 até B. Antes de iniciar o jogo, eles arbitrariamente distribuem as S pedras entre as caixas desde a caixa 1 até a caixa B - 1, deixando a caixa B vazia. O jogo então avança algumas rodadas. Em cada rodada, primeiro Paulo escolhe um subconjunto P das pedras que estão nas caixas; ele pode escolher tantas pedras quantas deseja a partir de tantas caixas quantas ele quiser, ou ele pode simplesmente não escolher nenhuma pedra, e neste caso P é vazio. Então, Carole decide o que fazer a seguir: ela pode ou promover o subconjunto P e descartar as pedras restantes (isto é, aquelas pedras não escolhidas por Paulo na primeira etapa), ou ela pode descartar o subconjunto P e promover as pedras restantes. Promover um dado subconjunto significa pegar cada pedra deste subconjunto e movê-la para a caixa com o próximo número na sequência, de modo que, se houver uma pedra neste subconjunto dentro de uma caixa b, ela é movida para a caixa b + 1. Descartar um determinado subconjunto significa remover todas as pedras deste subconjunto de sua correspondente caixa, de modo que essas pedras não sejam utilizadas ​​no jogo para as rodadas restantes. A figura abaixo mostra um exemplo das duas primeiras rodadas de um jogo. Paulo e Carolina jogam até que pelo menos uma pedra atinja uma caixa com número B, caso em que Paulo vence o jogo, ou até que não haja mais pedras deixadas nas caixas, caso em que Carolina ganha o jogo. Paulo é um jogador muito racional, mas Carolina é um rival digno, porque ela não é apenas extremamente boa nesse jogo, mas também tem muita sorte. Gostaríamos de saber quem é o melhor jogador, mas antes disso temos que compreender como o resultado de um jogo depende da distribuição inicial das pedras. Em particular, gostaríamos de saber de quantas maneiras as pedras S poderiam ser distribuídas inicialmente entre as primeiras B - 1 caixas de modo que Carolina possa ter certeza de que irá ganhar o jogo se jogar da melhor maneira possível, mesmo que Paulo nunca cometa nenhum erro.",
        "titulo": "Caixas e Pedras",
        "entrada": "Cada caso de teste é composto por uma linha. A linha contém dois inteiros S (1 ≤ S ≤ 200) e B (2 ≤ B ≤ 100), representando respectivamente, o número de pedras e o número de caixas no jogo."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1913",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma única linha com o valor da altura da maior torre de cilindros que pode ser construída, seguido da palavra “centimetro(s)”.",
        "descricao": "Nhonho, filho do Sr. Barriga está participando de uma brincadeira nova criada pelas crianças da vila bastante conhecida por “Torre de cilindros”. A brincadeira consiste em construir a maior torre composta por cilindros, respeitando todas as regras, claro! Logo abaixo está descrito o funcionamento da brincadeira. Será disposta em uma mesa, uma quantidade N de cilindros. Cada cilindro possui uma cor, que pode ser: Vermelho, laranja, verde ou azul. Cada cilindro possui uma altura h, e uma base com um raio de tamanho r. Para a construção da torre, os cilindros deverão ser empilhados, sendo que o cilindro do topo deverá sempre ter a base menor que a do cilindro logo abaixo dele. Exceto o primeiro cilindro, que poderá ter a base de qualquer tamanho, já que não existe nenhum outro cilindro abaixo dele. Existem também algumas restrições bem interessantes quanto às cores dos cilindros. Elas estão descritas abaixo: Um cilindro vermelho nunca pode ser colocado sobre um cilindro laranja. Um cilindro laranja nunca pode ser colocado sobre um cilindro azul. Um cilindro azul nunca pode ser colocado sobre um cilindro verde. Um cilindro verde nunca pode ser colocado sobre um cilindro vermelho. Cansado de ver o seu filho reclamar de perder sempre e consequentemente de ouvir a frase “Olha ele hein! Olha ele hein! Olha ele...” repetidas vezes, Sr. Barriga quer dar uma pequena dica para Nhonho, informando a maior altura que é possível ser construída dado a lista com as características dos cilindros disponíveis para construção da torre. Porém, apesar de ser bom em matemática e cobrar o preço do aluguel corretamente, Sr. Barriga não conseguiu calcular a altura máxima que a torre pode ter, devido a grande quantidade de cilindros disponíveis. Então ele contratou você para escrever um programa capaz de informar esse valor. Para lhe ajudar a entender melhor o problema, Sr. Barriga lhe demonstrou através de um desenho a altura da maior torre possível de ser construída com cinco peças, seguindo todas as regras da brincadeira. Logo abaixo você pode consultar o desenho do Sr. Barriga.",
        "titulo": "Ajude o Sr. Barriga",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10³ ), que representa a quantidade de cilindros dispostos sobre a mesa, seguem N linhas, cada linha contendo a altura h (1 ≤ h ≤ 1000) do cilindro em centimetros, o raio r (1 ≤ r ≤ 1000) da base do cilindro e uma palavra p representando a cor do cilindro. A palavra pode ser: VERMELHO, LARANJA, VERDE ou AZUL. O fim da entrada é indicado quando N == 0, a qual não deverá ser processada."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1905",
        "saida": "Seu programa deverá imprimir \"COPS\" caso o grupo dos policiais ganhem, e \"ROBBERS\" caso o grupo dos ladrões ganhem.",
        "descricao": "Mario adora convidar seus amigos para brincar em sua casa. Então decidiu convidar seus amigos para brincarem de Polícia e Ladrão. O jogo consiste em dois grupos, um grupo é a polícia e o outro é o grupo dos ladrões. Os ladrões devem se esconder e a polícia deve capturá-los. Caso a polícia consiga capturá-los e prendê-los os ladrões perdem o jogo e caso a polícia não consiga capturá-los os ladrões vencem o jogo. Mario decidiu que seria do grupo da polícia e que teria que procurar seus amigos do grupo dos ladrões e capturá-los, porém algum de seus amigos sentiram-se em desvantagens por não possuírem lugares estratégicos para se esconder no seu quintal. Portanto decidiram planejar uma forma em que poderiam deixar os policiais sem saída e terem chances de ganhar o jogo. Para isso montaram um labirinto usando caixas de papelão e marcaram como “0” todos os lugares no quintal aonde os policiais poderiam atravessar e como “1” aonde os policiais não poderiam atravessar. Os ladrões irão se esconder sempre no último espaço do labirinto, Se os policiais ficarem encurralados no labirinto os ladrões vencem e poderão comemorar a fuga, mas se os policiais alcançarem o ultimo espaço do labirinto os policiais serão os vencedores. Os policiais poderão andar somente nos blocos marcados como 0. Sua tarefa é determinar a partir do labirinto quem vai ganhar o jogo.",
        "titulo": "Polícia e Ladrão",
        "entrada": "A primeira entrada consiste de um inteiro T(1 ≤ T ≤ 400) indicando o número de casos de testes. As próximas T entradas consistem de uma matriz 5x5, composta de valores inteiros, sendo 0 ou 1"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1690",
        "saida": "Para cada caso de teste, imprima uma única linha, a resposta para o problema.",
        "descricao": "Você tem em mãos um array de números inteiros positivos, não necessariamente distintos. Vamos escolher alguns dos números no array, isto é, um subconjunto não vazio do array original. O valor de um subconjunto é a soma dos elementos contidos nele. Qual é o menor valor de um subconjunto que não pode ser gerado? Por exemplo, pegue o array [2, 1, 5]. Os seguintes subconjuntos pode ser formados: [1], [2], [5], [1, 2], [1, 5], [2, 5], [1, 2, 5]. Os seus valores são os seguintes: 1, 2, 5, 3, 6, 7, 8, respectivamente. O valor menor do subconjunto que não pode ser gerado, neste caso, é 4.",
        "titulo": "Soma de Sobconjuntos",
        "entrada": "A primeira linha contém um número T (1 ≤ T ≤ 1000), indicando que se seguirão T casos de teste. Para cada teste, a primeira linha conterá um número N (1 ≤ N ≤ 10000), indicando a quantidade de números que existem no array. A linha seguinte conterá N inteiros positivos separados por espaços, entre 1 a 109."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1996",
        "saida": "Para cada caso de teste, imprima em uma única linha um inteiro representando o número de tendas diferentes válidas que podem ser configurados usando as varas dadas.",
        "descricao": "O Comitê Internacional de Preparação de Tendas (ICPC) tem um procedimento peculiar para a criação de suas tendas. O procedimento depende de uma visão bidimensional das tendas. Uma determinada tenda é criada utilizando N pólos de diferentes alturas. Para configurar as tendas, o ICPC usa o seguinte procedimento. Primeiro, N+2 pontos são marcadas no chão, todos na mesma linha, de modo que dois pontos consecutivos são sempre separados por uma distância de exatamente dois pés. Depois disso, uma vara é colocada verticalmente sobre cada um dos N pontos centrais. Finalmente, a tenda é estendida sobre as varas, juntando-se a extremidade superior de cada vara com a extremidade superior das varas vizinhas. As primeiras e últimas varas são unidas com os pontos livres no chão. A figura a seguir mostra três possíveis formas de criação de uma tenda usando as instruções mencionadas antes, com alturas das varas de 4, 5, 7, 8 e 9. Depois de anos de trabalho duro, o ICPC chegou à conclusão de que, a fim de obter tendas úteis e robustas, é necessário que o ângulo formado por duas lonas consecutivas na extremidade de uma vara, medido em seu interior, é estritamente inferior a 180 graus. Na figura, somente a tenda na esquerda satisfaz esta condição. A tenda no meio tem um ângulo superior a 180 graus nas varas de altura 4 e 7, enquanto a tenda da direita tem um ângulo de exatamente 180 graus na vara de altura 8. Dizemos umatenda é válida quando cumpre a recomendação da ICPC. É claro que, dado o número de varas e suas alturas, há um grande número de diferentes maneiras de colocá-los, alguns dos quais irão produzir telas válidas e alguns não. A tarefa é, através destes dados, contar o número de diferentes tendas válidas que podem ser criadas. Duas tendas válidas são consideradas diferentes se a sequência de alturas das varas em um deles, visto da esquerda para a direita, é diferente da sequência de alturas do outro, visto da mesma maneira.",
        "titulo": "Construção de Tendas",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em duas linhas consecutivas. A primeira linha contém um inteiro N que indica o número de varas (1 <= N <= 60). A segunda linha contém N inteiros H_i representando as alturas das varas em pés (1 <= H_i <=109 para 1 <= i <= N). A última linha da entrada contém um único -1 e não deve ser processado como um caso de teste."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1475",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma única linha contendo um inteiro indicando o menor comprimento total de remendos que é suficiente para consertar todos os furos do pneu.",
        "descricao": "Carlão é muito preocupado com o meio ambiente. Sempre que possível, ele tenta utilizar meios de transporte menos poluentes. Recentemente ele conseguiu um emprego próximo de casa e agora está utilizando sua bicicleta para ir ao trabalho. Infelizmente, no caminho entre sua casa e seu emprego, há uma fábrica de pregos, que frequentemente deixa alguns pregos caírem de seus caminhões que acabam furando os pneus de da bicicleta de Carlão. Por isso, ele acaba tendo que fazer diversos remendos nos pneus de sua bicicleta. Para fazer os consertos, Carlão usa dois tipos diferentes de remendos. Ambos os tipos têm a largura do pneu da bicicleta, mas diferem no comprimento. Como o valor do remendo é proporcional ao seu comprimento, Carlão está tentando encontrar uma maneira de economizar, gastando o menor comprimento total possível de remendos para fazer os consertos, mas sem precisar cortá-los. O primeiro passo para efetuar o conserto é fazer uma marca com giz em uma posição do pneu e depois anotar as distâncias, medidas no sentido horário, de cada um dos furos em relação à marca de giz. Todos os furos devem ser cobertos por um remendo. Carlão gostaria de sua ajuda para determinar, a partir das posi¸cões dos furos, a forma mais econômica de efetuar o conserto.",
        "titulo": "Remendo",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha contém quatro inteiros N (1 ≤ N ≤ 1000), C (1 ≤ C ≤ 106), (1 ≤ T1) e T2 (T2 ≤ C). O inteiro N corresponde ao número de furos no pneu e C corresponde ao comprimento da circunferência do pneu, em centímetros. Os comprimentos dos remendos, em centímetros, são dados pelos inteiros T1 e T2. A segunda linha da entrada contém N inteiros Fi (0 ≤ Fi ≤ C-1), um para cada furo, descrevendo a distância no sentido horário da marca de giz até o furo i (1 ≤ i ≤ N), em centímetros. O Final da entrada é determinado por EOF (fim de arquivo). Obs: Se a distância entre dois furos é exatamente k centímetros, um remendo de comprimento k centímetros é suficiente para cobrir ambos os furos."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1485",
        "saida": "Para cada caso de teste na entrada seu programa deve escrever uma linha de saída, contendo um inteiro indicando a máxima arrecadação que a banca pode obter em um turno. A saída deve ser escrita na saída padrão.",
        "descricao": "Roleta turca é um jogo de azar que usa uma roleta com S espaços, cada um numerado com um inteiro entre -64 e 64. Em cada turno do jogo, os jogadores apostam em B bolas, cada uma também numerada de -64 a 64. Para cada uma das B bolas, exatamente um jogador apostará nela. Após girar a roleta, o representante da banca joga as B bolas sequencialmente. Quando a roleta para, cada bola está disposta em dois espaços adjacentes, como descrito na figura a seguir, que mostra uma roleta com 32 espaços e 4 bolas. Note que, como a figura ilustra, uma bola ocupa dois espaços adjacentes, e, portanto, há espaço para no máximo floor(S/2) bolas na roleta. As bolas terminam dispostas na mesma posição relativa em que elas foram jogadas na roleta. Isto é, se as bolas a, b e c são jogadas nessa sequência, elas terminam dispostas tais que, na direção horária, a é seguida por b que é seguida por c que é seguida por a. O valor de uma bola em um turno é calculado pela multiplicação do número da bola pela soma dos números dos espaços adjacentes sobre os quais a bola está disposta. Se o valor de uma bola é positivo, o jogador que apostou nessa bola recebe essa quantia (o valor da bola) da banca; se o valor de um bola é negativo, o jogador que apostou nessa bola deve pagar essa quantia para a banca. A arrecadação da banca em um turno é a quantia total recebida menos a quantia total paga. Por exemplo, na figura anterior, a banca paga $5.00 para bola numerada -1, paga $7.00 para bola numerada -7, recebe $24 pela bola numerada 12 e não paga nem recebe pela bola numerada 3. Portanto, neste turno a banca fez uma arrecadação de $12.00 (24 -5 -7); note que a arrecadação da banca em turno pode ser negativa (perda). Será dada a descrição da roleta, a descrição das bolas e a sequência em que as bolas foram jogadas na roleta. Escreva um programa que determine a arrecadação máxima que a banca pode fazer em um turno.",
        "titulo": "Roleta Turca",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros S e B que indicam respectivamente o número de espaços na roleta (3 ≤ S ≤ 250) e o número de bolas usadas (1 ≤ B ≤ floor(S/2)). A segunda linha de um caso de teste contém S inteiros Xi, indicando os números associados com os espaços da roleta, na direção horária (-64 ≤ Xi ≤ 64, para 1 ≤ i ≤ S). A terceira linha de um caso de teste contém B inteiros Yi, indicando o número associado com as bolas (-64 ≤ Yi ≤ 64, para 1 ≤ i ≤ B), na sequência em que as bolas são jogadas na roleta (note que elas estão na ordem que elas terminam dispostas na roleta, na direção horária). O fim da entrada é indicada por S = B = 0."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "2113",
        "saida": "Para cada caso imprima o número de setores que são cobertos por pelo menos K agentes. A saída deve ser escrita na saída padrão.",
        "descricao": "Durante os anos da União Soviética o nome da cidade de Ecaterimburgo era Sverdlovsk, em homenagem ao bolchevique Iakov Sverdlov, filho de um artesão judeu que era excelente orador e foi um dos principais protagonistas ao lado de Lenin na revolução de outubro de 1905. Era considerado honesto, enérgico e trabalhador e respeitado por todos os setores do partido. Faleceu aos 34 anos. A cidade retomou o nome original em 1991 por iniciativa de Boris Yeltsin primeiro presidente da Rússia, nascido na cidade. Em 2 de abril de 1979, quando a cidade ainda se chamava Sverdlovsk houve um vazamento de antraz de uma fábrica militar na cidade. Este incidente é muitas vezes chamado de “Chernobyl biológico”, e causou aproximadamente 100 mortes, apesar de que o número exato de vítimas e contaminados seja desconhecido. A União Soviética negou por anos as reais causas do acidente e todos os registros das vítimas desapareceram, pois poderiam revelar sérias violações da Convenção de Armas Biológicas. As autoridades soviéticas tiveram de recorrer a procedimentos altamente sofisticados de descontaminação, especialmente das áreas rurais. Cada área retangular de dimensões N por M metros era dividida em N × M setores quadrados de um metro quadrado. Estes setores eram identificados pelas coordenadas de seus centros, numeradas de oeste para leste e de sul para norte a partir de (1, 1). Cada setor seria considerado descontaminado se ele for coberto por pelo menos K agentes de saúde. Cada agente era capaz de cobrir uma área circular. O raio dessa área variava de acordo com os equipamentos usados e com a experiência do agente de saúde. Sua tarefa é determinar quantos desses setores são considerados descontaminados, isso é, cobertos por pelo menos K agentes. Consideramos que um setor é coberto se seu centro está numa área coberta por um agente de saúde.",
        "titulo": "O Incidente de Sverdlovsk",
        "entrada": "A entrada é composta por vários casos de teste e termina com final de arquivo (EOF). A primeira linha de cada caso contém dois inteiros, N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 105) , indicando a dimensão da área retangular falada no enunciado. A segunda linha contém o número de agentes, C , e o número K (1 ≤ K ≤ C ≤ 103). As C linhas seguintes têm a descrição dos agentes Xc (1 ≤ Xc ≤ N), Yc (1 ≤ Yc ≤ M) e Rc (0 ≤ Rc ≤ 108), onde (Xc , Yc ) é o centro da área circular de raio Rc que o agente cobre. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1727",
        "saida": "Para cada estudo de caso, primeiro exiba uma linha escrito “Grupo #x” onde x é o número do caso (contando de 1). Então, imprima uma linha por time na ordem em que aparecem na entrada. Em cada linha, exiba o nome do time, um caractere vazio, sua melhor posição possível, um sinal de menos e sua pior posição possível. Imprima uma linha vazia após cada estudo de caso, inclusive após a última.",
        "descricao": "Como você talvez saiba, a qualificação para o Campeonato Europeu de Futebol 2000 é um torneio em que em cada grupo cada time joga um contra o outro duas vezes.A Alemanha está no grupo 3 junto com a Turquia, Finlândia, Moldávia e Irlanda do Norte. 14 jogos foram disputados e 6 ainda acontecerão. Uma olhada rápida nas posições atuais talvez te faça pensar que a Irlanda do Norte já está fora do páreo. Mas isso está errado! Imagine que a Irlanda do Norte ganhe os seus três jogos restantes, a Alemanha empata com a Turquia e perde para a Finlândia, e a Moldávia derrota a Turquia. Aí a Irlanda do Norte fica em primeiro! Para aqueles que não estão familiarizados com o modelo de pontuação: Em cada jogo um time ganha 3 pontos por uma vitória, 1 ponto por um empate ou 0 pontos por uma derrota. Depois que todos os jogos tenham sido jogados, os times são ordenados de acordo com seus pontos. No caso de empate, os desempates adicionais são: diferença de gols (gols feitos - gols tomados), gols feitos e escolha aleatória, nessa ordem. A questão que seu programa deve responder é: Levando em conta todas as possibilidades de como os jogos restantes possam terminar, qual é a posição mais alta e mais baixa de cada time no grupo quando o torneio acabar?",
        "titulo": "Copa Européia 2000",
        "entrada": "A entrada consistirá em um ou mais estudos de caso. Cada estudo de caso se atém ao seguinte formato: Na primeira linha haverá um inteiro n (1 ≤ n ≤ 20), representando o número de times no grupo. Nas próximas n linhas, os nomes dos times se seguirão. Nomes sempre são menores que 30 caracteres e não contém espaços em branco. Na próxima linha, haverá um inteiro g, representando o número de jogos completos. Finalmente, cada uma das g linhas seguintes, descrevem um jogo completo no formato time1 time2 gols1 gols2. Você pode partir do pressuposto que no máximo 10 jogos restam e cada time tem ao menos um jogo a jogar. (Isso simplifica o problema um pouco). A entrada será encerrada quando o valor de n for igual a zero."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1034",
        "saida": "Para cada instância, imprima o número mínimo de blocos necessários para obter um bloco de comprimento M.",
        "descricao": "Todos os anos, artistas de todo o mundo se reúnem na cidade, onde fazem esculturas de gelo gigantescas. A cidade vira uma galeria de arte ao céu aberto, uma vez que as esculturas ficam expostas na rua por semanas, sem derreter. Afinal, a temperatura média no inverno de Harbin (época em que ocorrerá a final mundial do ICPC) é de -20 graus. O primeiro passo para fazer a escultura é montar um grande bloco de gelo da dimensão pedida pelo artista. Os blocos são recortados das geleiras de Harbin em blocos de altura e profundidade padrão e vários comprimentos diferentes. O artista pode determinar qual o comprimento que ele deseja que tenha o seu bloco de gelo para que a escultura possa começar a ser esculpida. Os comprimentos disponíveis dos blocos são {a1; a2; ...;  aN} e o comprimento que o artista deseja é M. O bloco de comprimento 1 é muito usado, por este motivo ele sempre aparece na lista de blocos disponíveis. Sua tarefa é determinar o número mínimo de blocos tal que a soma de seus comprimentos seja M.",
        "titulo": "Festival de Estátuas de Gelo",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 25) e M (1 ≤ M ≤ 1000000) representando o número de tipos de blocos e o comprimento desejado pelo artista, respectivamente. A próxima linha contém os inteiros a1; a2; ...; aN , onde (1 ≤ ai ≤ 100) para todo i (1,2,...N) separados por espaço."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1927",
        "saida": "Imprima a quantidade máxima de trufas que Tapioca é capaz de comer.",
        "descricao": "Tapioca sonhou que estava chovendo trufas na cidade onde ele mora, Lagoa de Roça (Lá já choveu granizo, mas isso é papo pra outro problema). Trufas de todos os sabores, pena que ele não pode comer todas, porque as que caem no chão se espatifam completamente. Mas ele pode tentar comer a maior quantidade possível, basta pegá-las antes que elas caiam no chão. Felizmente, nesse sonho Tapioca é capaz de prever o futuro e é por isso que ele sabe o instante e a posição em que cada uma das trufas irá cair. No entanto ele não tem o poder de fazer duas coisas ao mesmo tempo e é por isso que sua ajuda é necessária. Escreva um programa que com as premonições de Tapioca, informe a quantidade máxima de trufas que ele pode comer. Considere Lagoa de Roça como sendo um plano e que Tapioca se encontra no instante 0 na posição (6, 6). Além disso ele só pode se mover para posições ortogonais, ou seja, Norte, Sul, Leste e Oeste. Para se movimentar ele leva 1 segundo. E ele só é capaz de pegar uma trufa se estiver na mesma posição e no momento em que ela irá cair.",
        "titulo": "Tapioca e a Chuva de Trufas",
        "entrada": "A primeira linha de entrada contém um inteiro 1 ≤ n ≤ 2000, que representa a quantidade de trufas que irão cair do céu. Cada um das próximas n linhas irá conter três inteiros, 0 ≤ xi, yi ≤ 20 e 0 ≤ ti ≤ 1000, representando as coordenadas do local da queda e o momento da queda da trufa i."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1517",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro, representando qual o número máximo de maçãs que Rafael consegue pegar com sua cesta.",
        "descricao": "Rafael resolveu passar o final de semana na fazenda de seu tio, Antônio, e quando percebeu que havia lá uma árvore carregada de maçãs, decidiu fazer uma torta de maçã. Para fazer a torta, porém, Rafael precisaria pegar o maior número de maçãs possíveis, e para isso pediu ajuda a seu primo. O combinado era: Seu primo subiria na árvore e chacoalharia diversos galhos contendo as maçãs, fazendo com que elas caissem. A medida que as maçãs iam caindo, Rafael estaria no chão com uma cesta e iria pegá-las no meio do caminho entre a árvore e o chão. Como as maçãs caiam com muita velocidade, o impacto com o chão fazia com que elas rachassem, e Rafael decidiu que iria ignorar todas as maçãs que não conseguisse pegar com a cesta. Podemos representar a situação da seguinte maneira: Rafael está posicionado em uma área de N linhas e M colunas abaixo da árvore, e pode se mover uma posição horizontalmente, verticalmente ou diagonalmente por segundo. Cada maçã cai em uma determinada posição dessa área, digamos [i, j] (linha i, coluna j), e o momento exato em que Rafael deve estar nessa posição para que ela caia dentro de sua cesta é um determinado tempo t. Dada a posição inicial de Rafael, diga quantas maçãs ele consegue pegar com sua cesta, dentre todas as K maçãs derrubadas por seu primo.",
        "titulo": "Maçãs",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros, N, M e K (3 ≤ N, M ≤ 20, 1 ≤ K ≤ 1000), representando, respectivamente, a quantidade de linhas e colunas da área abaixo da árvore, e o número de maçãs derrubadas por seu primo. A seguir haverá K linhas, contendo três inteiros cada, Xi, Yi e Ti (1 ≤ Xi ≤ N, 1 ≤ Yi ≤ M, 1 ≤ Ti ≤ 2*K), representando, respectivamente, a linha e coluna em que a maçã i caiu, e o tempo exato em que Rafael deve estar em tal posição para que ela caia em sua cesta. A sequência de valores Ti dada na entrada é não-decrescente, ou seja, Ti-1 ≤ Ti, para todo 2 ≤ i ≤ K. Não há duas maçãs que caiam no mesmo lugar ao mesmo tempo. A seguir haverá dois inteiros X e Y (1 ≤ X ≤ N, 1 ≤ Y ≤ M), indicando a linha e a coluna em que Rafael estará no tempo 0. O último caso de teste é indicado quando N = M = K = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1058",
        "saida": "Para cada caso, imprima o número do caso de teste seguido do número de configurações válidas.",
        "descricao": "Uma técnica comum usada por exércitos invasores é cercar uma cidade em vez de diretamente entrar nela. Os exércitos divididem-se em pelotões com bases em uma forma circular ao redor da cidade. Para assumir o controle interno da cidade, pelotões são agrupados em três para cobrir regiões triangulares. Isso é uma política do general para garantir que não haja duas regiões triangulares sobrepostos. Infelizmente, o processo é um pouco mais complicado porque existem dois tipos de exércitos na força invasora. Os dois exércitos diferentes são conhecidos como Exército Vermelho eo Exército Negro. Cada pelotão é formado por um tipo de exército. Enquanto o Exército Preto tem clara intenção de servir ao General, os vermelhos podem trair na primeira oportunidade. Então se decidiu que cada grupo triangular será composto de no máximo um pelotão do Exército Vermelho para que os vermelhos não dominam em qualquer tarefa que lhes for atribuída. Supondo 6 pelotões (4 pretos e 2 vermelhos) como mostrado na figura abaixo: Uma vez que são 6 pelotões, nós podemos formar 2 grupos ( 6 / 3 = 2 ). Há duas possibilidades de arranjo para esta configuração. Problema: será dado a você um número de pelotões e suas cores. Você deve encontrar o número de possíveis configurações tal que cada pelotão faça parte de exatamente um grupo e respeite as restrições passadas acima.",
        "titulo": "Zonas de Ataque Independentes",
        "entrada": "A primeira linha de entrada é um inteiro T (T<100) que indica o número de casos de teste. Cada caso consiste de duas linhas. A primeira linha é um inteiro P ( 2 < P < 40 e P é um múltiplo de 3). P representa o número de batalhões. As próximas linhas consistem de uma string de tamanho P. Cada caracter da string é  ‘R’ (Red: vermelho) ou ‘B’ (Black: preto). A string dá a posição do batalhão no sentido horário. A posição inicial é arbitrariamente escolhida. Portanto, o exemplo acima pode ser representado por qualquer uma das seguintes sequências: ‘RBBBRB’, ‘BBBRBR’, ‘BBRBRB’, ‘BRBRBB’, ‘RBRBBB’ ou ‘BRBBBR’."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1599",
        "saida": "Para cada instância imprima as coordenadas dos picos do mapa correspondente, uma por linha,ordenado primeiro pelas linhas e, em caso de empate, pelas colunas. Caso não existam picos, imprima -1. Imprima uma linha em branco no final da saída de toda instância.",
        "descricao": "O Marrocos é cortado pelas montanhas Atlas, cujo pico mais alto é Toubkal, com 4.165 metros. Estas montanhas deram origem a diversos mitos e histórias durante toda a antiguidade, como, por exemplo, nos 12 trabalhos de Hércules. Próximo à cidade de Marrakech fica o que se chama de “alto Atlas”, a parte mais alta destas montanhas. O estudo das altitudes dos diversos picos tem sido feito há séculos. Antigos documentos berberes documentam o registro de diferentes altitudes dos vários pontos das montanhas Átlas desde o século XVI. O documento é um mapa da região dividido em quadrantes. Em cada quadrante está anotada a altura média daquele ponto. Sabemos que um ponto é um pico se a altura daquele quadrante é maior que de seus vizinhos (um quadrante tem até 8). Sua tarefa neste exercício é ler esse mapa e identificar os picos existentes na região documentada.",
        "titulo": "Picos do Átlas",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância corresponde ao mapa de uma região e é representado por uma matriz N × M (1 ≤ N, M ≤ 1.000). A primeira linha de cada instância contém os inteiros N e M. Para i = 1, 2, . . . , N, a (i + 1)-ésima linha corresponte a i-ésima linha da matriz e contém M inteiros separados por um espaço."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1611",
        "saida": "Para cada caso, imprima em uma única linha o valor da mínima energia necessária.",
        "descricao": "Em um prédio de N andares temos um elevador com capacidade para até C pessoas. Os andares são numerados de 0 a N-1. Há um grupo de M pessoas querendo usar o elevador, todas no andar 0. Cada uma deseja ir a um andar específico. Você deve decidir a ordem em que as pessoas devem usar o elevador de forma que a energia utilizada seja a menor possível. Inicialmente um grupo de tamanho no máximo C pessoas decidido por você entra no elevador no andar 0. Depois você deve decidir a ordem em que os andares são visitados. Logicamente, os andares de todas as pessoas dentro do elevador devem ser visitados. O custo de energia do elevador é apenas no deslocamento, ou seja, a cada andar em que ele sobe ou desce você gasta uma unidade de energia. O processo é repetido até que não se tenha mais pessoas no andar 0. No fim o elevador deve voltar ao andar 0. Dado o tamanho do prédio, a capacidade do elevador e os andares das pessoas que querem utilizar o elevador, monte a melhor estratégia que minimize a energia utilizada. Imprima o valor desta energia.",
        "titulo": "Elevador Lotado",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso teremos os números inteiros N (1 ≤ N ≤ 104), C (1 ≤ C ≤ M) e M (1 ≤ M ≤ 1000* ou 1 ≤ M ≤ 5*104**). Na próxima linha teremos M inteiros indicando os andares a serem visitados pelas pessoas. Os inteiros indicando os andares vão de 1 até N-1, inclusive. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1976",
        "saida": "Assuma que as matrizes em nomes A1, A2, ..., AN. Para cada caso de teste, seu programa deverá imprimir uma linha contendo a ordem das matrizes a serem multiplicadas (Seguindo o exemplo de saída), em caso de mais de uma solução possível seu programa deverá imprimir apenas a quantidade total de contas necessárias.",
        "descricao": "Gustavo em uma de suas aulas de pré-cálculo aprendeu a fazer multiplicações de matrizes, como ele é um aluno muito esperto, rapidamente percebeu que quando fazemos a multiplicação, a ordem com que as matrizes são multiplicadas pode influenciar na quantidade total de contas necessárias para encontrar a resposta. Apesar de muito dedicado, Gustavo está com pouco tempo para realizar trabalhos da faculdade, pois atualmente está estudando muito para a maratona de programação, então ele pediu sua ajuda em um tarefa solicitada na aula de pré-cálculo. A professora passou como exercício diversas matrizes para que a turma treinasse a multiplicação, então Gustavo precisa de um programa que dado as dimensões das matrizes, o informe qual a melhor ordem de realizar as multiplicações levando em consideração a menor quantidade de contas necessárias para gerar a resposta. Como você é amigo de Gustavo e tem mais tempo do que ele, resolveu ajudá-lo, mas com algumas regras: 1ª Gustavo sempre terá que informar matrizes onde a multiplicação na ordem dada é sempre possível; 2ª Caso haja mais que uma solução ótima, seu programa irá informar somente a quantidade de contas necessárias para a multiplicação.",
        "titulo": "Matrizes",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1000), indicando o número de matrizes a serem multiplicadas. Segue então N linhas cada uma contendo dois inteiros L e C (1 ≤ L, C ≤ 100), indicando o número de linhas e colunas de cada matriz. A entrada termina quando N = 0 e não deverá ser processada."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1681",
        "saida": "Para cada caso de teste, imprima em em uma linha o número mínimo de passos de dobradura necessários para produzir a folha de papel descrita.",
        "descricao": "Leia a descrição do problema 1680 (Lado) para entender como dobrar uma folha de papel e como interpretar a entrada. Uma \"tira\" é definida como a parte maximal de uma folha que não tem vincos atravessando-a. Como as dobras ocorrem em locais equidistantes, todas as tiras são congruentes. Neste problema é dada a descrição do resultado da realização de diversas dobras como no problema E: Lado, ou seja, no estado desdobrado. Adicionalmente, é sabido que o comprimento da folha em seu estado dobrado é exatamente o comprimento de uma tira (novamente a grossura do papel é ignorada). Encontre o número mínimo de dobraduras necessárias para gerar a folha descrita a partir de uma folha de papel inicialmente plana. Note que realizar uma dobradura pode criar mais que uma dobra no resultado porque partes do papel estão sobrepostas devido à dobraduras anteriores. No entanto, quando um passo de dobradura é realizado todas as partes sobrepostas do papel são afetadas, isso é, não é permitido dobrar, por exemplo, apenas as três camadas superiores. Por último, note que todo resultado pode ser obtido iterando as dobras em uma direção fixa e realizando uma dobradura por vez, acumulando dessa forma uma pilha de todas as tiras, com comprimento de uma tira. Se n é o número de dobras na descrição de entrada, esse procedimento requer então n passos de dobradura, que não é necessariamente o mínimo, como pode ser observado na saída de exemplo.",
        "titulo": "Dobra",
        "entrada": "A entrada contém vários casos de teste, cada um em uma linha distinta. Cada linha contém uma string não vazia de caracteres A e V descrevendo o lado mais longo da folha. Assuma que o comprimento da string é menor que 200. O arquivo de entrada termina imediatamente após o último caso de teste."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2026",
        "saida": "A saída devera apresentar o número total de enfeites para cada galho. Imprima uma linha em branco após o total de enfeites de cada galho.",
        "descricao": "Com a chegada do clima natalino muitas famílias ao redor do mundo decoram suas casas, colocam luzes constroem suas próprias árvores de natal, colocando os mais váriados enfeites decorativos sempre com muita criatividade. Na família Enilno Egduj, descendetes de Italianos, sempre muito organizados e perfeccionistas criaram uma tradição onde todo o ano alguém fica responsável por enfeitar a árvore de natal. Neste ano o filho mais novo da família Rolien Enilno Egduj, ficou encarregado de fazer a decoração, e para isso precisava comprar os enfeites para a árvore. Para quem não conhece Rolien, ele é um menino muito perfeccionista, tão perfeccionista que descidiu fazer um programa para auxilia-lo na sua tarefa. Para enfeitar a árvore estavam disponíveis no mercado onde Rolien foi procurar enfeites natalinos, vários pacotes com uma quantidade X de enfeites e em cada pacote o seu respectivo peso em gramas. Baseando-se nessas informações Rolien estipulou que cada galho pudesse suporta uma quantidade K em gramas. Com isso ele precisava encontrar qual a melhor opção entre os pacotes, ou seja, quais pacotes ele deve levar que combinados possuam o maior número de enfeites e que o galho ao qual ele vai enfeitar consiga suportar suportar o peso dos enfeites.",
        "titulo": "Árvore de Natal",
        "entrada": "A primeira linha de entrada possui um inteiro G para os galhos da árvore, e também representando o numero de casos de teste, a segunda linha de entrada possui um inteiro P (1 < P < 100) que indica o número de pacotes, a próxima linha possui um inteiro W (1 < W < 1000) que indica a capacidade de peso que o galho da árvore suporta. As próximas P linhas indicam o número de enfeites em cadas pacote E(1 < E ≤ 300) e o peso de cada pacote PC (1 ≤ PC ≤ W)."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1265",
        "saida": "Para cada consulta k em um caso de teste, você deverá imprimir uma única linha contendo o k-ésimo som tocado na festa. Uma linha em branco deve ser impressa após cada caso de teste.",
        "descricao": "Um DJ muito famoso foi recentemente convidado para atuar em uma festa fechada de uma conferência de Ciência da Computação. Na tentativa de impressionar os participantes do evento, ele decidiu usar um programa que escolhesse automaticamente os sons que iriam tocar nesta festa. Entretanto, o resultado foi um desastre, uma vez que o modo como o programa escolhia os sons foi muito estranho e repetitivo. Antes de tudo o DJ selecionou N sons a partir de um conjunto que ele tinha disponível. O programa usado pelo DJ então rotulava cada um dos sons utilizando um caracter de 'A' até 'Z'. O enésimo som é rotulado atrávés do uso do enésimo caracter da sequência. O programa escolhe o som a ser tocado na festa a fim de que seus títulos apareçam na seguinte sequência infinita de caracteres: primeiro viriam todas as palavras com um caracter em ordem lexicográfica; na sequência todas as palavras com dois caracterem em ordem lexicográfica. Depois viriam todas as palavras com três caracteres, também em ordem lexicográfica, e assim por diante. Para N = 3 , esta sequência seria: ABCAAABACBABBBCCACBCCAAAAABAACABAABBABC... No final da festa, algumas pessoas perguntaram ao DJ se ele lembrava qual tinha sido o primeiro som que havia sido tocado. Outros queriam saber qual tinha sido o sétimo som e assim por diante. O DJ não conseguia lembrarr nada além do estranho padrão de repetição dos sons, portanto, ele precisa da tua ajuda urgente para escrever um programa que responda a estas consultas ou perguntas.",
        "titulo": "DJ da Computação",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste consiste de três linhas. A primeira linha contém dois inteiros N e Q que indicam respectivamente o número de sons escolhidos pelo DJ e o número de consultas feitas pelos participantes ( 1 ≤ N ≤ 26 e 1 ≤ Q ≤ 1000 ). A segunda linha conterá N títulos de sons (o título de um som é a cadeia de caracteres alfanuméricos de pelo menos um e no máximo 100 caracteres) separados por um espaço simples. A última linha de um caso de teste contém a sequência de consultas. Cada consulta é um número k (1 ≤ k ≤ 100000000) que corresponde ao k-ésimo som tocado na festa. O final da entrada é indicado por N = Q = 0."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1970",
        "saida": "Imprima uma linha contendo unicamente o número máximo total de minutos de música que é possível gravar nos cartuchos.",
        "descricao": "Quem já teve um Super Nintendo deve lembrar que os cartuchos quase nunca pegavam no primeiro contato com o console. Às vezes, era preciso soprar repetidas vezes nos conectores tanto dos cartuchos quanto do console para que a conexão fosse estabelecida com sucesso. Ainda bem que a tecnologia evoluiu, mas, diga a verdade, você até que sente falta daquele tempo, não? Fernando é um garoto fascinado por estudar video games antigos. Ele descobriu que é possível inclusive gravar música nos cartuchos antigos do Super Nintendo. Ele tem uma coleção de canções em seu computador e gostaria de gravá-las em alguns cartuchos. Ele sabe que cada cartucho tem capacidade para gravar no máximo um número limitado de minutos de música, e sabe a duração em minutos de cada canção. No entanto, ele está tendo dificuldades para decidir quais canções gravar em quais cartuchos visando maximizar o uso dos cartuchos.",
        "titulo": "Primeiro Contato",
        "entrada": "A primeira linha da entrada consiste de dois inteiros positivos N e K (N ≤ 100, K ≤ 3), os quais representam respectivamente o número de canções no computador de Fernando e o número de cartuchos que ele tem. A segunda linha da entrada consiste de N inteiros positivos, os quais representam as durações em minutos de cada música. A última linha da entrada consiste de K inteiros positivos, os quais representam o número máximo de minutos de música que é possível gravar em cada cartucho. Nenhuma música possui mais de 50 minutos, e em nenhum cartucho cabe mais de 50 minutos de música."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1396",
        "saida": "Para cada instância, você deverá imprimir um identificador \"Instancia c\", onde c é o número da instância atual. Na linha seguinte você deve imprimir a lista de nomes resultante do processo. Após cada nome, seu programa deve imprimir um espaço em branco, inclusive após o último nome (por exemplo, na saída do primeiro caso de teste abaixo: wanderleybthadeubchegadob, onde b representa um espaço em branco. Após cada instância, seu programa deve imprimir uma linha em branco, inclusive após a última.",
        "descricao": "A Profa. Cristina é muito exigente. Sua fama de maquiavélica já é conhecida fora da universidade e ela até gosta disso... Mas, parece que agora ela exagerou... Na última prova de sua disciplina, a professora exigiu que os alunos formassem fila indiana para entrar na sala de aula. Eles formaram. Quando eles iam entrar, ela gritou: \"Mas, vocês não estão em ordem lexicográfica crescente!!!???\" Os alunos revoltados formaram uma comissão e foram conversar com a professora dizendo que aquilo já era demais. Para não parecerem intransigentes eles disseram que permitiriam no máximo um número k de trocas de posição entre pessoas consecutivas na fila. A professora gostou da idéia, e colocou como um problema extra da prova. Dada uma sequência de nomes e um inteiro k, devolver a menor sequência (em ordem lexicográfica) que pode ser obtida a partir da original com no máximo k trocas de elementos vizinhos. Sua tarefa é resolver este exercício para os alunos da Profa. Cristina a fim de que eles consigam entrar na sala e começar a prova.",
        "titulo": "Hoje tem Prova da Cris!",
        "entrada": "A entrada é composta de diversas instâncias. Cada instância começa com dois inteiros n e k, onde 1 ≤ n ≤ 100 e 0 ≤ k ≤ n, indicando a quantidade nomes e a quantidade máxima de trocas, respectivamente. A próxima linha contém uma sequência de n nomes. Cada nome possui tamanho máximo de 20 caracteres, e letras de 'a' a 'z'. O programa deve parar de processar a entrada quando n = k = 0."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1354",
        "saida": "Para cada caso de teste da entrada, imprima uma linha contendo um único número inteiro K, indicando o número mínimo de quadrados necessários para construir a praça de destino. cada uma das K linhas seguintes, contém três inteiros X, Y, L, indicando as coordenadas do canto superior esquerdo, e o comprimento do lado do quadrado correspondente (1 ≤ x, y ≤ N).",
        "descricao": "Tomy possui vários quadrados de papel. O comprimento do lado destes quadrados(chamamos de 'tamanho'), variam de 1 a N-1, e ele possui na verdade, inúmeros quadrados de cada tipo. Ele costumava ter muito orgulho de seus quadrados, mas um dia, de repente, ele quis ter um maior - um quadrado de tamanho N! Embora ele não tem tal quadrado, ele pode fazê-lo com os quadrados que ele já tem. Por exemplo, um quadrado de tamanho 7 pode ser feito com nove quadrados menores, como mostrado abaixo. Note que não deve haver nenhum espaço vazio no quadrado, e nenhum papel adicional fora do quadrado, e os pequenos quadrados não devem se sobrepor. Como você pode imaginar, Tomy quer fazê-lo usando o número mínimo de quadrados que ele tem, você pode ajudar?",
        "titulo": "Um Quadrado Grande, Por Favor",
        "entrada": "A primeira linha da entrada contém um único inteiro T, indicando o número de casos de teste (1 ≤ T ≤ 20). Cada caso contém um único inteiro N (2 ≤ N ≤ 50)."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1166",
        "saida": "Para cada caso de teste da entrada, imprima uma linha contendo um inteiro que indica o número máximo de bolas que podem ser colocadas. Imprima -1 se um número infinito de bolas pode ser colocado.",
        "descricao": "As pessoas pararam de mover discos de uma haste para outra depois que eles descobriram o número de passos necessários para completar a tarefa. Por outro lado, elas não pararam de pensar sobre puzzles similares à Torre de Hanoi. Senhor S, como é conhecido, inventou um pequeno jogo. O jogo consiste de N astes e um MONTE de bolas. As bolas são numeradas 1,2,3... As bolas parecem comum, mas na verdade elas são mágicas. Se a soma dos números de duas bolas não for um quadrado perfeito elas irão se repelir com uma força grande quando estiverem muito perto, portanto, elas NUNCA podem ser colocadas encostando uma na outra. O jogador deve colocar uma bola no topo de cada haste por vez. Ele deve primeiro tentar a bola 1, então a bola 2, depois a bola 3, assim por diante... Se ele falhar em fazer isto, o jogo termina. O Jogador deve tentar colocar o máximo de bolas possíveis nas hastes. Você pode ver o exemplo da figura acima, que nos mostra o melhor resultado possível de se obter utilizando 4 hastes.",
        "titulo": "Torre de Hanoi, Novamente!",
        "entrada": "A primeira linha de entrada contem um único inteiro T (1 ≤ T ≤ 50), indicando o número de casos de teste Cada caso de teste contém um único inteiro N (1 ≤ N ≤ 50), indicando o número de varetas disponíveis."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2169",
        "saida": "Para cada caso de teste imprima se Leon conseguirá ou não completar a missão. Mostre conforme o exemplo de saída.",
        "descricao": "\"Leonardo Silva Kennedy era apenas um policial novato quando presenciou o tenebroso evento que aconteceu em 1998, na cidade de Raccoon City. Muito tempo se passou e Leonardo finalmente conseguiu deixar para trás as imagens daquele dia. Seis anos depois, ele é um agente do serviço secreto norte-americano, responsável pela proteção da família presidencial. A filha do presidente é sequestrada na saída de sua universidade por uma organização desconhecida. A única pista é que ela teria sido vista em uma remota ilha do continente europeu. Agora, cabe a Leonardo resgatá-la. Mal sabia ele que isso significava uma nova imersão em um pesadelo que ele acreditava ter acabado.\" Em um determinado momento, Leonardo descobre um mapa de um galpão onde ele deverá entrar para buscar uma relíquia. Através do mapa ele pode ver quantos e que tipo de monstros existem no local. Ele dispõe de N armas e um valor Y de munição. Para a sorte dele, ali próximo existe um mercador de armas. Então Leonardo solicita a sua ajuda(o mercador) para que diga se ele conseguirá, com a quantidade de balas e as armas que ele dispõe, matar os monstros ou se será morto. Seguem as armas que Leonardo dispõe no momento e a potência de cada uma: E os monstros que pode haver no galpão: Obs: Ao escolher uma arma, Leonardo utiliza todas as balas que ela possui.",
        "titulo": "Ajude o Leonardo!",
        "entrada": "A entrada é composta por diversos casos de teste, cada caso inicia com um valor QA, (1 <= QA <= 7), indicando a quantidade de armas. Em seguida são lidos QA valores e suas respectivas quantidades de munição. É lido então um valor QM (1 <= QM <= 10), indicando a quantidade de monstros, e seguem QM linhas indicando o monstro e a quantidade de cada um. E por ultimo, é recebido um valor QB (1 < QB < 104), indicando a quantidade máxima de balas que ele poderá utilizar, pois dessa forma ele não sairá sem balas do galpão... se sair."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1860",
        "saida": "Imprima uma linha com dois valores: o valor de xl e a distância para o esconderijo mais longe. Arredonde e imprima ambos os valores com exatamente duas casas decimais.",
        "descricao": "Septa Unella: \"Vergonha! Vergonha!\" Para pagar por seus pecados, Cersei deve caminhas pelas ruas de King's Landing, nua. Considere King's Landing como um plano Cartesiano. Cersei deve caminhar a partir do ponto (0, 0) até o ponto (X, 0), em linha reta. Note que, para completar seu trajeto, Cersei não deve deixar o eixo x. Entretanto, ela planeja não completar todo o trajeto! Em algum ponto (xl, 0) (0 ≤ xl ≤ X), ela sairá de seu trajeto e correrá para um dos N esconderijos na cidade. Ela quer ficar o mais longe possível do trajeto original. Por isso, ela correrá para o esconderijo que ficar mais longe do ponto (xl, 0). Entretanto, Cersei deve chegar ao esconderijo o mais cedo possível. Sua tarefa é ajudar Cersei a determinar o valor de xl tal que, se ela sair do trajeto no ponto (xl, 0), a distância para o esconderijo mais longe é minimizada.",
        "titulo": "A Caminhada da Vergonha de Cersei",
        "entrada": "A primeira linha contém dois inteiros N e X (1 ≤ N ≤ 5×104, 10 ≤ X ≤ 104). As próximas N linhas indicam as posições dos esconderijos. Cada linha contém dois inteiros xi e yi (0 ≤ xi ≤ X, -104 ≤ yi ≤ 104, yi ≠ 0) indicando a existência de um esconderijo no ponto (xi, yi)."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1365",
        "saida": "Para cada caso de teste, imprima uma única linha contendo a extensão mínima que o grupo pode ter.",
        "descricao": "Um grupo K de amigos vai ver um filme. No entanto, já está muito tarde para obter bons ingressos, por isso, eles estão procurando uma boa maneira de sentar-se todos próximos. Uma vez que todos eles são estudantes de ciências, eles decidiram avançar com um problema de otimização em vez de ir em frente com argumentos informais para decidir quais bilhetes comprar. O cinema tem R linhas com C lugares cada, e eles podem ver um mapa com os atuais assentos disponíveis. Eles decidiram que estar perto um do outro é o que importa, mesmo se isso significar estar na fila da frente, onde a tela é tão grande que é impossível ver tudo de uma só vez. Para obedecer os critérios formais, eles acharam que iriam comprar bancos em ordem, a fim de minimizar a extensão do grupo. A extensão é definida como a menor área do retângulo com os lados paralelos aos assentos que contém todos os assentos comprados. A área de um retângulo é o número de assentos nele contidas. Eles levaram um laptop e pediram para você os ajudá-los a encontrar os assentos desejados.",
        "titulo": "Procurando Assentos",
        "entrada": "Cada caso de teste consistirá em diversas linhas. A primeira linha conterá três inteiros positivo R, C e K, como explicado acima (1 ≤ R, C ≤ 300, 1 ≤ K ≤ R × C). As próximas linhas R conterão exatamente C caracteres cada. O j-ésimo caractere da i-ésima linha será 'X' se o j-ésimo assento no a i-ésima linha é tomada ou '.' se ele estiver disponível. Sempre haverá pelo menos K assentos disponíveis no total. A entrada é terminada com R = C = K = 0."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1700",
        "saida": "Para cada caso de teste imprima em uma única linha o tamanho do maior par de antenas, de mesmo tamanho, que podem ser construídas utilizando qualquer número de palitos.",
        "descricao": "A professora do jardim de infância pediu como tarefa de casa que a turma montasse um robô utilizando apenas palitos de dente e cola. Joãozinho decidiu que para diferenciar seu robô dos robôs dos demais alunos, ele faria as antenas de seu robô do maior tamanho possível. Quando Joãozinho estava montando seu robô, os palitos acabaram, exatamente quando faltava apenas montar as duas antenas, e como já era tarde, não havia como comprar mais palitos. Joãozinho quebrou sua cabeça pensando numa forma de terminar seu robô, até que se lembrou que seu vizinho, seu Zé, era dono de um bar, e talvez pudesse lhe arrumar alguns palitos. Infelizmente Joãozinho não estava no seu dia de sorte, quando ele chegou no bar, seu Zé lhe disse que também estava sem palitos, e os únicos palitos que haviam no bar, eram os palitos usados pelos clientes do dia, que estavam esparramados pelo chão do bar, e muitos deles sujos e quebrados. Mas, como Joãozinho é um menino bastante insistente e um pouco porquinho, ele resolveu que iria usar esses palitos mesmo, e combinou com seu Zé que varreria o chão do bar em troca de todos os palitos que encontrasse. Como já era madrugada quando Joãozinho acabou de varrer o chão ele pediu a sua ajuda para determinar qual o maior par de antenas, de mesmo tamanho, que poderia ser montado. Dado o número N de palitos encontrados por Joãozinho e o tamanho de cada um desses palitos, determine o tamanho do maior par de antenas, de mesmo tamanho, que podem ser montadas colando qualquer número de palitos pelas suas extremidades.",
        "titulo": "Antenas",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância contém um inteiro N ( 1 <= N <= 1000 ), o número de palitos encontrados. A segunda linha de cada instância contém uma sequência de N inteiros, S1, ..., Sn, onde Si (1 <= Si <= 100) é o tamanho do iésimo palito encontrado por Joãozinho. O final da entrada é sinalizado por um caso com N = 0. Que não deve ser processado."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1395",
        "saida": "Para cada caso de teste o programa deve produzir uma linha com a mensagem: No solution Se o resultado não puder ser obtido a partir dos números de entrada, ou se um conjunto de linhas com a seqüência de operações leve a partir dos números iniciais para o resultado, levando em consideração os critérios anteriores. Cada operação deve ser expressa da seguinte forma: operando_da_esquerda operador operando_da_direita = resultado Onde operando_da_esquerda e operando_da_direita representam os números envolvidos na operação, o resultado é o resultado da operação, e o operador é um único caractere que representa a operação que deverá ser feita a partir dos seguintes: '+': Adição 'x': multiplicação '-': Subtração '/': Divisão Para cada caso de teste, a última linha de sua solução deve terminar com um símbolo '<-', indicando que esta é a última operação, que dá o número de destino como resultado. Para todos os casos, deverá haver um espaço vazio (apenas um) entre cada impresso e o seguinte. Não deve haver nenhum caractere (/) negociando espaços em branco no início e no fim de cada linha de saída. Cada linha deve terminar com uma marca de final de linha, e não deve aparecer nenhuma linha em branco na saída.",
        "descricao": "Queremos resolver um problema clássico de obtenção de um determinado número a partir de um conjunto de números iniciais, de acordo com as seguintes regras: Todos os números envolvidos no problema são inteiros positivos, e por isso todo resultado intermediário de qualquer operação também deverá ser inteiro. Assim, as operações que levam a não inteiros ou números não positivos serão estritamente proibidas (não vamos considerar truncamento ou resultados de arredondamento, nem qualquer outra coisa do tipo). Nós podemos fazer qualquer uma das quatro operações aritméticas elementares: adição, multiplicação, subtração e divisão. Cada número pode ser utilizada no máximo uma vez: quando utilizamos dois números, os mesmos não podem ser utilizados novamente em operações posteriores (mas o resultado desta operação pode, e as mesmas considerações aplicam-se a este novo número). Não há nenhuma obrigação de fazer uso de todos os números iniciais. Faremos as seguintes premissas sobre os dados de entrada: Para qualquer número de saída T, ele terá sempre que: 0 < T < 2000. Para qualquer número de entrada I, ele terá sempre que: 0 < I < 200. Haverá sempre pelo menos dois números iniciais e sete no máximo. Não vamos considerar os casos de problemas triviais, ou seja, casos em que o número de destino já está contido nos iniciais. A fim de tornar a única solução oferecida pelo programa, também deverá fazer as seguintes suposições sobre a solução que iremos considerar como correta: O programa deverá fornecer a solução que satifaz as condições, com um número mínimo de operações. Se houver mais do que uma solução com o número mínimo de operações, vamos decidir qual tomar de acordo com as características da primeira operação na qual eles se diferem. As próximas regras serão aplicadas. Para duas operações iguais, será escolhido aquele cujo operando do lado esquerdo é maior que, ou igual a, o operando do lado direito. Por exemplo, a operação \"10 x 5 = 50\" terá prioridade sobre \"5 x 10 = 50\". Para as operações que envolvem dois operadores diferentes, será preferido aquele cujo operador tem a prioridade mais alta, definidos como se segue: Adição (mais alto) - Multiplicação - Subtração - Divisão (mais baixo). Para operações com o mesmo operador, será preferido um que envolve o número cuja posição é mais baixa, na ordem em que foram dados na entrada (que aparece em primeiro lugar). Se este primeiro número pode aparecer em duas operações diferentes de mesma precedência, o mesmo critério deve ser aplicado para o segundo operando. Novos números gerados pelas operações são assumidos para serem então, colocados no início da lista ordenada.",
        "titulo": "Números e Operações",
        "entrada": "A entrada é constituída por um conjunto de linhas. Cada linha representa um caso de teste, e lhes serão dados no seguinte formato: T N I1 ... IN T é o número de destino, N é a quantidade de números iniciais e I1 ... IN são os próprios números iniciais. Todos os números são separados por um único espaço em branco. Não haverá caractere (/) levando espaços em branco no início e no fim de qualquer linha de entrada. A linha final com um único zero marca o fim da entrada e não será processada."
    },
    {
        "nivel": "9",
        "assunto": "6",
        "numero": "1282",
        "saida": "Para cada caso teste de saída terá uma linha com um inteiro representando o mínimo custo total, para reagrupar os N amontoados iniciais em K montes maiores.",
        "descricao": "Uma empresa de mineração extrai térbio, um metal raro usado para a construção de ímãs leves, a partir de areia de rio. Eles mineram um grande rio em N pontos de mineração, cada um deles identificado por sua distância a partir da origem do rio. Em cada ponto de mineração, uma pequena pilha ou amontoado de minério mineral altamente valorizado é extraido do rio. Para recolher o minério mineral, a empresa reagrupa os N amontoados produzidos em um menor número de K pilhas ou montes maiores, cada um localizado num dos pontos de extração inicial. Os montes recém-formados são então recolhidos por caminhões. Para reagrupar os N montes eles usam uma barca, o que na prática pode levar qualquer quantidade de minério mineral por ser bem larga. A barcaça começa na origem do rio e somente pode viajar rio abaixo, de modo que o amontoado de mineral produzido em um ponto X de mineração pode ser levado para um ponto Y de mineração somente se Y > X. Cada monte é movimentado completamente para outro ponto de mineração, ou não se move. O custo de mover um monte com peso W a partir de um ponto X de mineração para um ponto Y de mineração é W (Y - X). O custo total do agrupamento é a soma dos custos de cada movimento de um monte. Nota-se que um monte que não é movido não tem influência sobre o custo total. Dados os valores de N e K, os N pontos de mineração, e o peso da pilha ou amontoado produzido de cada ponto de mineração, escreva um programa que calcule o custo total mínimo para reagrupar estes N montinhos iniciais em K pilhas ou montes maiores.",
        "titulo": "Organizando Pacotes",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros N e K os quais denotam espectivamente, o número de montes ou pilhas iniciais e o número desejado de montes após o reagrupamento (1 ≤ K < N ≤ 1000). Cada uma das seguintes N linhas descrevem um dos montes iniciais com dois números inteiros X e W indicando que o ponto X de mineração produziu um amontoado com peso de W (1 ≤ X, W ≤ 106 ). Dentro de cada caso de teste, os montes ou pilhas são dados estritamente em ordem ascendente, considerando os seus pontos de mineração."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1687",
        "saida": "Para cada caso de teste você deve imprimir uma única linha contendo o número de possíveis padrões de destravamento. Como este número pode ser grande, imprima seu resto quando dividido por 1300031.",
        "descricao": "Henrique trabalhou muito durante as últimas férias ajudando seus amigos em problemas de matemática. Ele usou o dinheiro que ganhou para comprar um smartphone. Ele se interessou bastante no sistema de trava do seu celular. O sistema consiste de um grid N por N de pontos e para destravá-lo é preciso desenhar um padrão que passa por exatamente P pontos. Passar por um mesmo ponto mais de uma vez é permitido, mas tais repetições não podem acontecer seguidamente (um movimento que vai de um ponto a ele mesmo não é permitido). Pode-se ir diretamente de um ponto X para outro ponto Y se o segmento que conecta X e Y não passa por nenhum outro ponto. Henrique trabalhou bastante para comprar seu celular e quer ter certeza de que ninguém descobrirá seu padrão de destravamento. Ele quer saber quantos padrões diferentes existem. Dois padrões são considerados o mesmo se e somente se começam no mesmo ponto e seguem uma mesma sequência de movimentos.",
        "titulo": "Destrave o Celular",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso contém dois números em uma única linha: N (2 ≤ N ≤ 15) e P (1 ≤ P ≤ 105). A última linha da entrada contém dois 0, caso que não deve ser processado."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1838",
        "saida": "Imprima uma única linha contendo o número máximo de minutos da semana em que é possível não deixar a pedra filosofal ociosa.",
        "descricao": "A Universidade Federal da Fronteira Sul (UFFS) foi criada no dia 15 de setembro de 2009, tendo suas atividades de ensino, pesquisa e extensão começado em 29 de março de 2010 em prédios provisórios alugados. Atualmente, a UFFS possui 6 campi, nas cidades de: Chapecó, Laranjeiras do Sul, Realeza, Cerro Largo, Erechim e Passo Fundo. Em Chapecó, a mudança dos prédios provisórios para o campus ocorreu no 2ọ semestre de 2013. No prédio provisório em que funcionava o curso de Ciência da Computação funcionavam também vários outros cursos, como o curso de Defesa contra as Artes das Trevas, mas havia somente 3 laboratórios, 2 auditórios e 1 pedra filosofal. Todos os pesquisadores interessados em usar a pedra filosofal precisavam fazer suas requisições com no mínimo uma semana de antecedência. Com base na lista de requisições feitas para a semana, o secretário decidia quais requisições atender visando minimizar o tempo em que a pedra filosofal ficaria ociosa. A pedra filosofal ficava disponível para uso 12 horas por dia, o que corresponde a 3.600 minutos por semana. Numerando-se, então, esses 3.600 minutos de 1 a 3.600, cada pesquisador, ao fazer sua requisição, deveria informar o minuto a partir do qual gostaria de começar a usar a pedra filosofal e o minuto a partir do qual a pedra filosofal estaria livre para ser usada por outro pesquisador. Escreva um programa capaz de gerenciar as requisições conforme descrito. Nós nos encarregaremos de voltar no tempo para entregar seu programa ao secretário.",
        "titulo": "A Pedra Filosofal",
        "entrada": "A primeira linha da entrada é constituída por um único inteiro N (1 ≤ N ≤ 103), o qual representa o número de requisições que foram feitas para a semana. Cada uma das N linhas seguintes, por sua vez, descreve uma requisição através de dois inteiros i e j (1 ≤ i < j ≤ 3.600), os quais representam respectivamente o minuto a partir do qual o pesquisador gostaria de começar a usar a pedra filosofal e o minuto a partir do qual a pedra filosofal estaria livre para ser usada por outro pesquisador."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1689",
        "saida": "Para cada caso de teste imprima um único número, a resposta para o problema.",
        "descricao": "Antonio, prefeito de Rio Pequeno, está querendo implantar radares na estrada principal da cidade. Para isso, ele tem uma lista de possíveis pontos onde os radares podem ser instalados. Cada radar tem um lucro associado. Sabe-se que a distância entre dois radares não pode ser inferior a K, de acordo com a legislação de trânsito. Dada a lista de pontos e os seus lucros, a sua tarefa é ajudar Antonio a escolher os pontos para instalar os radares de modo que o lucro seja maximizado. Printe o lucro máximo! Por exemplo, imagine radares nas posições 1, 2 and 3, com lucro 2, 5 e 3, respectivamente. Se K for igual a 2, uma solução ótima seria escolher os radares nas posições 1 e 3, somando 5 de lucro.",
        "titulo": "Radares",
        "entrada": "A primeira linha conterá um número T (1 ≤ T ≤ 100), indicando a quantidade de casos de teste. Para cada caso de teste, a primeira linha conterá um inteiro N (1 ≤ N ≤ 106) e K (1 ≤ K ≤ 106), o número de radares e a menor distância entre 2 radares, respectivamente. A próxima linha conterá N inteiros separados por espaços, indo de 1 até 106, indicando a posição dos radares, em ordem crescente. A última linha conterá N inteiros positivos separados por espaços, indo de 1 a 103, indicando o lucro de cada radar."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2050",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, seqüencial e crescente a partir de 1. Nas próximas linhas, você deve imprimir os nomes de três jogadores daquela mesa seguida de sao amigos ou sao inimigos conforme o caso. Devem haver tantas linhas quantos forem os casos determinados. Estas linhas devem estar listadas em ordem lexicográfica. O mesmo vale para os três nomes em uma mesma linha. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "Bill “Snake” Ramsey foi um dos mais famosos donos de saloon em San Antonio. Seu saloon era conhecido até a costa oeste, e suas mesas de pôquer sempre lotadas eram sinônimo de jogos eletrizantes, muito dinheiro e, muitas vezes, muitas disputas sangrentas. Ramsey tinha uma teoria (e seu revólver .38 intimidava os que dele discordavam ao contestá-lo) de que em uma mesa de pôquer com 6 participantes havia sempre ou 3 que eram amigos entre si, ou 3 que eram inimigos entre si (naquela época em San Antonio se você não era amigo de alguém automaticamente se tornava seu inimigo). Hoje sabemos que Ramsey tinha de fato razão. Sua tarefa neste problema é checar a afirmação de Ramsey para vários exemplos.",
        "titulo": "Bar do Ramsey",
        "entrada": "São dadas várias mesas de pôquer (cada mesa tem sempre 6 jogadores). Para cada mesa é dado o número −1 ≤ m ≤ 15 de pares de amigos seguido, na linha seguinte, dos nomes dos participantes daquele jogo (cada nome é uma string de no mínimo 1 e no máximo 15 caracteres e você pode supor que os nomes dos jogadores são dois a dois distintos). O valor −1 indica o fim dos dados. Em seguida, vêm m linhas, cada uma com os nomes de dois amigos naquela mesa. Considere que um jogador não é amigo de si mesmo."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1487",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia H em que H é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, deve ser impressa a pontuação total conseguida com a coleção determinada por seu programa. Com relação a quais são as atrações da coleção determinada, os colegas decidiram que iriam perguntar para você pessoalmente no futuro, já que eles não querem que outras pessoas saibam e venham a utilizá-la. Uma linha em branco deve ser impressa após cada caso de teste.",
        "descricao": "O Six Flags Fiesta Texas é um dos maiores parques de diversão do mundo, e fica em San Antonio. Sabendo que as finais do ACM-ICPC de 2006 serão naquela cidade, três colegas começaram a planejar em quais dos famosos brinquedos eles iriam, caso seu time se classificasse para as finais mundiais. Para isso, estabeleceram notas para cada uma das atrações de acordo com o quanto eles gostariam de brincar lá. Por exemplo, a montanha russa \"Superman Krypton Coaster\" (que tem 800m de giros, loops e quedas com o carrinho indo a mais de 100km/h) recebeu a maior pontuação possível entre os colegas. O problema é que é impossível visitar todas as atrações em um mesmo dia. Assim, os colegas pesquisaram, para cada uma delas, quanto tempo durava o brinquedo (e quanto tempo de fila teriam de enfrentar até chegar a ele...). Sua tarefa neste problema é encontrar, dado o tempo disponível pelos colegas no Six Flags, uma coleção (pode haver repetições) de atrações que dá a maior pontuação dentro deste período.",
        "titulo": "Six Flags",
        "entrada": "Seu programa deve estar preparado para processar diversas instâncias. Na primeira linha são dados dois inteiros 0 ≤ N ≤ 100 e 0 ≤ T ≤ 600, em que N é o número de atrações nas quais os colegas gostariam de brincar, e T é o tempo (em minutos) que eles terão disponível para isso. Nas próximas N linhas, são dados dois inteiros 0 ≤ D ≤ 600 e 0 ≤ P ≤ 100 (em cada linha). O primeiro deles, D, representa a duração do brinquedo (incluído aí o tempo de fila e uma estimativa do tempo de traslado entre os brinquedos). O segundo, P, representa a pontuaçãao atribuída ao brinquedo pelos colegas. Um valor N = 0 indica o final das instâncias e não deverá ser processado."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1661",
        "saida": "Para cada caso de teste, imprima a quantidade mínima de unidades de trabalho necessárias para que todo habitante tenha sua demanda cumprida. Você pode assumir que este número cabe em um inteiro de 64 bits com sinal (em C/C++ você pode usar o tipo de dados \"long long\", em JAVA o tipo de dados \"long\").",
        "descricao": "Como você deve saber do cômico \"Astérix e o Escudo de Arverne\", Gergóvia consiste de uma única rua e cada habitante da cidade é um vendedor de vinho. Você quer saber como essa economia funciona? Bem simples: todos compram vinhos dos outros habitantes da cidade. Cada dia, cada habitante decide quanto vinho ele quer comprar ou vender. Curiosamente, a demanda e o fornecimento são sempre os mesmos de modo que cada habitante consegue o que deseja. Contudo, há um problema: transportar o vinho de uma casa para outra resulta em trabalho. Sendo todos os vinhos igualmente bons, os habitantes de Gergóvia não se importam com quais pessoas eles irão comercializar, eles estão somente interessados em vender e comprar um quantidade específica de vinho. Eles são espertos o suficiente para imaginar uma forma de negociar de modo que todo o montante de trabalho necessário para o transporte seja minimizado. Nesse problema você está sendo inquerido para reconstruir o comércio durante um dia em Gergóvia. Para simplificar, nós assumimos que as casas são construidas ao longo de uma linha reta com a mesma distância entre as casas adjacentes. Transportar uma garrafa de vinho de uma casa para uma casa adjacente resulta em uma unidade de trabalho.",
        "titulo": "Comércio de Vinhos na Gergóvia",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste inicia com o número de habitantes n (2 ≤ n ≤ 100000). A linha seguinte contém n inteiros ai (-1000 ≤ ai ≤ 1000). Se ai ≥ 0, isso significa que cada habitante que vive na ith casa, deseja comprar ai garrafas de vinho, caso contrário se ai < 0, ele deseja vender -ai garrafas de vinho. Você pode assumir que os números ai resumem a 0. O último caso de teste é seguido por uma linha contendo 0."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1310",
        "saida": "Para cada caso de teste imprima o máximo de dinheiro que George pode ganhar trazendo o seu circo para a cidade de acordo com o exemplo abaixo.",
        "descricao": "George é dono de um circo e traz seu circo de cidade em cidade. Ele sabe o quanto de receita ele pode obter em qualquer dia de uma série de dias em uma cidade. Ele também sabe o custo constante diário para manter o seu circo. George quer trazer seu circo à cidade para a série de dias que resulta em maior lucro. Por exemplo, se em uma determinada cidade o custo for de $ 20 por dia em um exemplo com 6 dias, sendo que as receitas previstas por dia são {$ 18, $ 35, $ 6, $ 80, $ 15, $ 21}, George pode obter o máximo de lucro trazendo o seu circo para esta cidade do dia 2 ao dia 4. Desta forma ele pode lucrar (35 + 80 + 6) - (3 * 20) = $ 61. Nota: A série de dias que George traz seu circo para a cidade pode ser entre 0 e o número máximo de dias, inclusive. Obviamente, se George traz seu circo para a cidade por 0 dias, ele obtém $ 0 de lucro.",
        "titulo": "Lucro",
        "entrada": "A entrada contém muitos casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 50) que representa o número de dias que George pode trazer o seu circo para a cidade. A segunda linha do caso de teste contém um número inteiro custoPorDia (0 ≤ custoPorDia < 1000) que representa o custo em manter o circo na cidade. Segue N linhas (uma por cada dia), contendo cada um um inteiro receita (0 ≤ receita < 1000) representa a receita que o circo obtem em cada dia. O final da entrada é indicado por EOF (fim de arquivo)."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1642",
        "saida": "Para cada teste, imprima uma linha com o comprimento da maior subsequência do texto que consiste em no máximo m caracteres diferentes.",
        "descricao": "O teclado do Bruce está quebrado, apenas algumas teclas ainda funcionam, Bruce descobriu que ele ainda pode digitar textos, mudando o layout do teclado, sempre que a letra necessária não está no mapeada para as m teclas que atualmente funcionam do teclado. Dado o texto que Bruce deseja digitar, ele quer saber se você consegue dizer a ele o número máximo de caracteres consecutivos no texto, que pode ser digitado sem a necessidade de mudar o layout do teclado, Ou seja, cada tecla está mapeada para exatamente um carácter, e não é possível digitar esse carácter por outras combinações de teclas, isso significa que Bruce quer saber o comprimento da maior subsequência do texto, que consiste em no máximo m caracteres diferentes.",
        "titulo": "Teclado Quebrado",
        "entrada": "A entrada consiste em vários casos de teste, cada caso de teste possui duas linhas. A primeira linha de cada caso contém o número m (1 ≤ m ≤ 128), que especifica o número de teclas restantes (as que ainda funcionam) . A segunda linha de cada caso de teste consiste no texto em que Bruce deseja digitar. Você pode deduzir que esse texto não ultrapasse 1 milhão de caracteres. Note que a entrada pode possuir caracteres de espaço, que devem ser tratados como qualquer outro carácter. O último caso de teste é seguido por uma linha contendo um zero. Dica: A maior substring para o primeiro caso de teste é \"_by_bru\", onde _ representa um caractere de espaço."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1590",
        "saida": "Imprima o maior valor possível para cada caso, em uma única linha.",
        "descricao": "Dado uma lista de N números inteiros, escolha K ou mais deles em que a operação binária AND dos números escolhidos seja o maior possível. Imprima este valor. Para informações sobre o AND consulte: http://en.wikipedia.org/wiki/Binary_and#AND",
        "titulo": "Cuarenta e Dois",
        "entrada": "Na primeira linha temos um inteiro T (T = 100), indicando o número de casos de teste. Para cada caso, há uma linha que terá os números inteiros N (1 ≤ N ≤ 20* ou 1 ≤ N ≤ 35**) e K (1 ≤ K ≤ 7) . Na linha seguinte terão os N números inteiros separados por espaços. Os números da lista vão de 0 até 230-1, inclusive, e podem se repetir. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes. Os limites são estes porque 35+7=42 ;)"
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1892",
        "saida": "Para cada caso de teste, imprima uma única linha com o número pedido na especificação.",
        "descricao": "Professor Denis está curioso para saber se a classificação final de seus N alunos de programação competitiva segue a ordem de matrícula na universidade. Ele pediu a sua ajuda para, dada a classificação final, contar quantos pares (i, j) existem tais que i m[j], onde 1 ≤ i,j ≤ N e m[i] significa a matrícula do aluno que ficou em i-ésimo lugar.",
        "titulo": "Calouro Vence Veterano?",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um único inteiro N, que representa o número de alunos, onde 1 ≤ N ≤ 105. As próximas N linhas são a classificação final dos alunos. Cada linha contém uma cadeia de exatamente 10 caracteres."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1645",
        "saida": "Para cada caso de teste, imprimir uma linha com o número de sequências crescentes de tamanho k que a sequência de entrada contém. Você pode assumir que a maneira com que as entradas são escolhidas permite que esse número caiba em um inteiro com sinal de 64 bits (em C/C++, você pode usar o tipo de dado \"long long\", em java, o tipo \"long\").",
        "descricao": "Bruce Force foi a Las Vegas, o El Dorado dos apostadores. Ele está especialmente interessado em um jogo de apostas no qual uma máquina escolhe números aleatórios, formando uma sequência de n números. Cada jogador deve estimar previamente quantas subsequências crescentes de tamanho k existirão na sequência de números. Uma subsequência de uma sequência a1,...,an é definida como ai1, ..., ail sendo que 1 ≤ i1 < i2 < ... < il ≤ n. A subsequência é crescente se aij-1 < aij para todos 1 < j ≤ l. Bruce não confia que o Cassino contará corretamente o número de subsequências crescentes de tamanho k. Ele perguntou se você consegue resolver esse problema para ele.",
        "titulo": "El Dorado",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois números n e k (1 ≤ k ≤ n ≤ 100), sendo que n é o tamanho da sequência escolhida pela máquina e k é o tamanho desejado das sequências crescentes. A linha seguinte deve conter n inteiros distintos dois a dois ai (-10000 ≤ ai ≤ 10000), sendo ai o i-ésimo número na sequência escolhida pela máquina. A linha seguinte ao último caso de teste deve conter dois zeros."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2109",
        "saida": "Para cada instância, imprima uma linha com um único ponto flutuante arredondado para 3 casas decimais, indicando a probabilidade que o Alexey vença o duelo, sendo que ele que começa atacando.",
        "descricao": "Alexey e Boris eram dois agentes da KGB que moravam em Ecaterimburgo nos anos 70. A cidade era um tanto parada, e como nada acontecia, os dois decidiram inventar um jogo de dados para não morrerem de tédio. Nesse jogo cada um deles começa com A e B pontos de vida respectivamente. Cada um têm à sua disposição um número de ataques possíveis, e eles se alternam atacando um ao outro. Cada ataque é descrito por uma quantidade de dados. Para saber o dano do ataque rodamos essa quantidade de dados e a soma dos valores é igual ao dano causado. Para jogar, eles têm disponível dados honestos com um número de faces entre 1 e 12. Dessa forma, se um dado com L faces for jogado ele vai mostrar um valor inteiro entre 1 e L, com igual probabilidade e de maneira independente de qualquer outro lançamento no jogo. Ambos os jogadores conhecem todos os seus ataques e os do seu oponente e escolhem como atacar em cada turno de forma a maximizar a sua própria probabilidade de vitória. Sua tarefa nesse problema é determinar qual a probabilidade de vitória de cada jogador.",
        "titulo": "Duelo de Espiões",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém quatro inteiros, VA, VB (1 ≤ VA , VB ≤ 300), NA and NB (1 ≤ NA, NB ≤ 10). Cada uma das próximas NA linhas descrevem um ataque do Alexey, elas começam com um inteiro D (1 ≤ D ≤ 3) e são seguidas por outros D inteiros L1 , . . . , LD (1 ≤ Li ≤ 12), indicando que nesse ataque Alexey lança D dados, com L1 , L2 , . . . , LD faces. As próximas NB linhas descrevem os ataques do Boris de maneira análoga."
    }
]