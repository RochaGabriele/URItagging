[
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1738",
        "saida": "Para cada consulta em todos os casos de teste, gere uma linha contendo os identificadores de todas as empresas que podem rotear pacotes de dados em suas próprias conexões a partir do nó de início para o nó final da consulta. Se não houver empresas, imprima \"-\". Imprima uma linha em branco após cada caso de teste.",
        "descricao": "Diversas empresas iniciantes decidiram construir uma Internet melhor, a chamada \"FiberNet\". Eles já instalaram muitos nós que atuam como roteadores em todo o mundo. Infelizmente, eles começaram a discutir sobre as linhas de conexão, e acabou cada empresa estabelecendo seu próprio conjunto de cabos entre alguns dos nós. Agora, provedores de serviços, que querem enviar dados do nó A para o nó B estão curiosos, qual é a empresa capaz de fornecer as conexões necessárias. Ajude os provedores, respondendo às suas perguntas.",
        "titulo": "Rede de Fibra",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia-se com o número de nós da rede n. A entrada é terminada por n = 0 . Caso contrário, 1 ≤ n ≤ 200. Os nós tem os números 1 , ..., n . Depois segue-se uma lista de conexões . Cada conexão começa com dois números A, B. A lista de conexões é terminada por A = B = 0. Caso contrário, 1 ≤ A, B ≤ n, e eles indicam o início e o ponto final da conexão unidirecional, respectivamente. Para cada conexão, os dois nós são seguidos pelas empresas que têm uma ligação do nó A para o nó B. A companhia é identificada por uma letra minúscula. O conjunto de empresas que possuem uma conexão é uma palavra composta apenas por letras minúsculas. Depois da lista de conexões, cada caso de teste é completado por uma lista de consultas. Cada consulta é composta de dois números A, B. A lista (e com ela o caso de teste) é terminada por A = B = 0. Caso contrário, 1 ≤ A, B ≤ n, e eles indicam o início e o ponto final da consulta. Você pode assumir que nenhuma ligação e nenhuma consulta contém os nós iniciais e finais idênticos."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1205",
        "saida": "Para cada instância imprima uma linha contendo a probabilidade de sucesso do soldado soviético. A probabilidade deve ser impressa com 3 casas decimais.",
        "descricao": "A cidade de São Petersburgo mudou de nome depois da revolção russa em 1914 para Petrogrado. Após a morte de Lênin, em homenagem ao grande líder o nome da cidade mudou novamente para Leningrado em 1924, e assim permaneceu até o fim da União Soviética. Em 1991, a cidade voltou a ter o nome antigo. Durante a segunda guerra mundial a cidade de Leningrado sofreu um cerco das tropas alemãs que durou cerca de 900 dias. Foi uma época terrível, de muita fome e perdas humanas, que terminou em 27 de janeiro de 1944 com a vitória dos soviéticos. É considerada uma das vitórias mais custosas da história em termos de vidas humanas perdidas. No auge da ofensiva alemã, no ano de 1942, vários atiradores de elite foram espalhados pela cidade, inclusive, em alguns pontos estratégicos da cidade mais de um atirador aguardavam soldados inimigos. A espionagem russa tinha informações detalhadas das habilidades desses atiradores, mas seus esconderijos eram excelentes, tornando a tarefa de um soldado soviético que desejasse cruzar a cidade extremamente difícil. Os soldados soviéticos eram bem treinados, mas com o passar do tempo e a continuação do cerco à cidade, os melhores soldados foram sendo dizimados, uma vez que se errassem o alvo na primeira tentativa certamente eram mortos pelos soldados alemães na tocaia. Sabendo a probabilidade de um soldado em matar um atirador alemão e sabendo também o número de balas que ele tinha à sua disposição, desejamos saber a probabilidade desse soldado conseguir chegar a um ponto estratégico de destino, partindo de um ponto estratégico de origem. O soldado, sendo muito experiente, sempre usava um caminho que maximizava a probabilidade de sucesso. Note que o soldado deve matar todos os atiradores presentes no caminho usado, inclusive os que estiverem nos pontos estratégicos de origem e destino.",
        "titulo": "Cerco a Leningrado",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém 3 inteiros, N (2 ≤ N ≤ 1000), M, e K (0 ≤ K ≤ 1000) e a probabilidade P (0 ≤ P ≤ 1) do soldado matar um atirador. Os inteiros N, M, e K representam respectivamente os números de pontos estratégicos, estradas ligando pontos estratégicos e balas carregadas pelo soldado soviético. Os pontos estratégicos são numerados de 1 a N. Cada uma das próximas M linhas contém um par de inteiros i e j indicando que existe uma estrada ligando o ponto i ao j. Em seguida tem uma linha contendo um inteiro A (0 ≤ A ≤ 2000), correspondendo ao número de atiradores na cidade, seguido por A inteiros indicando a posição de cada atirador. A última linha de cada instância contém dois inteiros indicando o ponto de partida e o destino do soldado."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1774",
        "saida": "Seu programa deve imprimir um único valor inteiro que representa o custo total que a empresa gastará com cabos após as modificações.",
        "descricao": "Bruno é o responsável por configurar os roteadores de uma empresa. Os roteadores transmitem os dados entre si através dos cabos de internet, Os dados transmitidos podem trafegar por uma ou mais rotas para serem entregues ao destinatário. O preço dos cabos de rede utilizados nos roteadores da empresa pode chegar a ser muito caro, e a empresa precisa cortar gastos. Pensando nisso a empresa decidiu fazer algumas alterações na infra-estrutura de redes. Bruno deve modificar a infra-estrutura da rede da empresa de forma com que todos os roteadores consigam transmitir dados entre si e exista somente uma rota entre cada par de roteadores, economizando o máximo possível de cabos de internet. A sua tarefa é descobrir qual será o custo total com cabos que a empresa terá após as modificações feitas por Bruno. A figura abaixo mostra (a) a infraestrutura de redes atual; e (b) a infraestrutura de redes após as modificação feitas.",
        "titulo": "Roteadores",
        "entrada": "A primeira linha é composta por dois inteiros R (3 ≤ R ≤ 60) e C (R ≤ C ≤ 200) representado respectivamente a quantidade de roteadores e a quantidade de cabos de internet utilizados atualmente. Seguem C linhas, cada uma contendo três inteiros V (1 ≤ V ≤ R), W (1 ≤ W ≤ R) e P (1 ≤ P ≤ 10000), sendo V e W um par de roteadores que estão conectados por um cabo de internet e P o preço do cabo de internet utilizado."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "2130",
        "saida": "Para cada instância, você deverá imprimir um identificador Instância k, onde k é o número da instância atual. Para cada consulta, na ordem da entrada, você deve imprimir o custo mínimo ou -1 caso não exista caminho entre as duas cidades. Após cada instância imprima uma linha em branco.",
        "descricao": "Preocupado com a atual situação de crise no transporte aéreo, o diretor regional do concurso do ICPC no Brasil já iniciou seus preparativos para fazer as reservas das passagens aéreas para as ﬁnais mundiais de Banff em 2008. O primeiro passo foi estudar a malha aérea disponível, em que cada voo tem um certo preço e liga duas cidades (estamos, na verdade, chamando de voo apenas um trecho non stop de um voo comercial). O objetivo do diretor é fazer várias consultas nesta malha de voos. Em geral desejamos fazer voos sem escalas, mas estes podem ser muito caros. Para contornar este fato o diretor deseja permitir algumas escalas possíveis. Assim, ele ordenou as várias cidades da malha em sua ordem de preferência para fazer escala. Ou seja, a cidade de índice 1 é a que ele prefere fazer escala, seguida pela cidade 2, e assim por diante. As consultas que o diretor fará são do seguinte tipo. É dada a cidade de partida e de chegada e um número t de cidades em que o diretor permite que sejam feitas escalas. Seu programa deverá encontrar o custo de um voo de custo mínimo entre as cidades que faça, no máximo, escalas nestas cidades. Por exemplo, se t = 1 você deverá encontrar o custo de um voo de custo mínimo entre as duas cidades que seja, ou non stop ou que faça uma escala na primeira cidade.",
        "titulo": "Final Mundial de 2008",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em dois inteiros n (1 ≤ n ≤ 100) e m (1 ≤ m ≤ 100000), indicando o número de cidades e o número de escalas. Nas m linhas seguintes temos três inteiros u, v e w (1 ≤ u, v ≤ n e 0 ≤ w ≤ 100) indicando que existe uma escala que vai de u para v com custo w. Em seguida um inteiro c (1 ≤ c ≤ 10000) indicando o número de consultas e nas c linhas seguintes temos três inteiros o, d e t (1 ≤ o, d ≤ n e 1 ≤ t ≤ n) onde o é a cidade de origem, d é a cidade de destino e t indica que as cidades 1,2,..,t podem ser usadas para escalas. A entrada termina com ﬁnal de arquivo."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1498",
        "saida": "Para cada caso de teste de entrada, imprima uma linha com um inteiro que representa o tamanho mínimo (número total de caracteres) que o texto pode ter assim como os códigos gerados têm os comprimentos determinados.",
        "descricao": "Codificação Estática de Huffman é um algoritmo de codificação usado principalmente para compressão de texto. Dado um texto de determinado tamanho feito de n caracteres diferentes, o algoritmo escolhe N códigos , um para cada diferente caractere. O texto é compactado usando esses códigos. Para escolher os códigos, o algoritmo constrói uma árvore binária com N folhas. Para N ≥ 2 a árvore pode ser construído como se segue. 1. Para cada caractere diferente no texto construa uma árvore contendo apenas um único nodo, e atribua a ele um peso coincidente com o número de ocorrências de caracteres no texto. 2. Construia um conjunto s contendo as N árvores acima. 3. Enquanto s contiver mais de uma árvore: (a) Escolha t1 ∈ s com peso mínimo e remova-o de s. (b) Escolha t2 ∈ s com peso mínimo e remova-o de s. (c) Crie uma nova árvore t com t1 como a sua subárvore esquerda e t2 como sua subárvore direita e atribua para t a soma dos pesos de t1 e t2. (d) Inclua t em s. 4. Retorne a única árvore que sobrar em s . Para o texto \"abracadabra\" , a árvore produzido pelo processo acima descrito pode ser semelhante a imagem à esquerda, onde cada nodo interno é marcado com o peso da sub-árvore esquerda daquele nodo. Note que a árvore obtida também pode se parecer com a imagem da direita, entre outras coisas, porque nas etapas 3a e 3b do conjunto s pode conter várias árvores com peso mínimo. Para cada caractere diferente do texto, seu código depende do caminho que existe na árvore final, à partir da raiz até a folha correspondente ao caracter. O tamanho do código é o número de arestas existentes no caminho (que coincide com o número de nodos internos do caminho). Assumindo que a árvore da esquerda foi construída por um algoritmo, o código para “r” tem tamanho 3 enquanto que o código para “d” tem tamanho 4. Sua tarefa é, dado os tamanhos dos N códigos escolhidos pelo algoritmo, encontrar a árvore mínima (em número total de caracteres) que o texto poderá ter de forma que os códigos gerados tenham comprimento N",
        "titulo": "Inversão de Huffman",
        "entrada": "A entrada contém vários casos de teste e terminam com EOF. A primeira linha de cada caso de teste contém um inteiro N (2 ≤ N ≤ 50) que representa o número de caracteres diferentes que aparece no texto. A segunda linha contém N inteiros Li indicam os comprimentos dos códigos escolhido pelo algoritmo de Huffman para os diferentes caracteres (1 ≤ Li ≤ 50 para i = 1, 2, ..., N). você pode assumir que existe pelo menos uma árvore, construída tal como descrito, que produz códigos com o dado comprimentos."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1454",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Nas próximas k linhas, você deve imprimir as maiores alturas encontradas nas rotas entre os k pares (origem, destino) fornecidos, um valor por linha, na ordem da entrada. Uma linha em branco deve ser impressa após cada instância.",
        "descricao": "Como você já deve saber, a bicicleta é um dos meios de transportes mais populares da China. Quase todos os chineses possuem a sua, e utilizam-na para trabalho, recreação, e outras atividades. Após muitos anos pedalando, Mr. Lee já não têm a mesma disposição para encarar as diversas subidas da cidade onde mora. E a cidade em que Mr. Lee vive é extremamente montanhosa. Por razões sentimentais, ele não quer mudar para uma cidade mais plana. Resolveu, então, que tentaria evitar grandes altitudes em seus caminhos mesmo que, para isso, tivesse que pedalar um pouco mais. Mr. Lee obteve com o serviço topográfico chinês uma coleção de mapas de sua cidade, em que cada rua desses mapas possui a informação da maior altitude encontrada quando trafegada. Tudo que ele precisa fazer agora é determinar rotas que minimizem a altura percorrida entre pares (origem, destino). Sabendo que você planeja visitar a cidade em que ele mora no próximo ano, Mr. Lee pediu sua ajuda. Em uma primeira etapa, ele deseja que você implemente um programa que receba mapas topográficos da cidade e uma coleção de pares (origem, destino). Para cada par, seu programa deve imprimir a maior altura encontrada em uma rota entre a origem e o destino. Lembre-se que as rotas devem minimizar tais alturas. As rotas propriamente ditas, serão determinadas em uma segunda etapa (quando você chegar à China para visitá-lo). Como o transporte utilizado é uma bicicleta, você pode considerar que todas as ruas da cidade são de mão dupla. Não demore, pois Mr. Lee conta com você. :-)",
        "titulo": "O País das Bicicletas",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversos mapas, doravante denominados instâncias. Cada instância tem a estrutura que segue. Na primeira linha são fornecidos dois inteiros n (0 ≤ n​ ≤ 100) e m (0 ≤ m ≤ 4950) que representam, respectivamente, os números de interseções e de ruas. Por razões de clareza, as interseções são numeradas de 1 a n, inclusive; toda rua começa e termina em uma interseção; e não existem interseções fora das extremidades de uma rua. Nas próximas m linhas são fornecidos três inteiros: i e j (1 ≤ i, j ≤ n) que indicam a existência de uma rua entre as interseções i e j; e h que representa a maior altitude encontrada quando a rua é trafegada. Esses inteiros estão separados por espaços em branco. Na linha seguinte, é dado um inteiro k (1 ≤ k ≤ 50) que representa o número de pares (origem, destino) que serão especificados nas próximas k linhas. Cada par é formado por dois inteiros i e j como acima. Isto é, origem e destino são interseções de ruas, e também estão separados por espaços em branco. Valores n = m = 0 indicam o final das instâncias e não devem ser processados."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2117",
        "saida": "Seu programa deve gerar uma única linha que contêm um único inteiro: o maior número de amigos que o Mestre pode conseguir.",
        "descricao": "Mestre Pátio Zero é um coordenador do Farias Brito que usa de sua extensa rede de amigos no FB (FariasBook) para auxiliar jovens alunos que desejam estudar na organização. Recentemente, ele decidiu ampliar ainda mais seu número de amigos, e fará isso comentando fotos avulsas de pessoas que são amigas de seus amigos. Baseado em um recente estudo do renomado instituto de pesquisa FBideias, Mestre sabe que uma determinada pessoa i aceitará sua solicitação de amizade após ele deixar um comentário S em uma de suas fotos se a letra favorita da pessoa i aparecer pelo menos Ki vezes em S, não importando se a letra aparece em sua forma maiúscula ou minúscula. Por carregar consigo o nome da Organização, Mestre enviou para o FBideias todos os seus possíveis comentários, e recebeu uma lista com os N que foram aprovadas como politicamente corretos, mas como o FariasBook tem uma política contra SPAM muito rígida, ele não pode repetir o mesmo comentário em duas fotos distintas. Jogério Rúnior estuda para olimpíadas de informática no colégio, e por isso Mestre decidiu pedir a ajuda dele em duas tarefas: consertar sua impressora e escolher o que comentar em cada foto de modo que seu número de amigos aumente o máximo possível. Ele percebeu que a impressora apenas estava com um cabo solto, resolveu esse problema e passou para você, a novata Fia Breire, a missão de comentar as fotos. Ajude o Mestre!",
        "titulo": "Mestre Me Ajude",
        "entrada": "A primeira linha da entrada contêm dois inteiros: N e M (3 ≤ N, M ≤ 1000), o número de comentários na lista que mestre recebeu e o número de pessoas que são amigos de amigos do Mestre, respectivamente. As próximas N linhas irão conter cada um dos comentários da lista que Mestre recebeu. Cada linha representa um comentário. Por restrição do FariasBook, cada comentário só pode conter no máximo 140 caracteres, que devem ser letras (minúsculas ou maiúsculas) ou espaços. As próxima M linhas contêm cada uma, uma letra maiúscula Ci e um inteiro Ki, que representam, respectivamente, a letra favorita da pessoa i e quantas vezese ela deve aparecer em um comentário para que a pessoa aceite a solicitação de amizade do Mestre."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2056",
        "saida": "Para cada labirinto, inicialmente imprima o número da instância, conforme mostra o exemplo de saída abaixo. Se for impossível levar a caixa até sua posição final, imprima \"Impossivel\" (sem aspas). Caso contrário, você deve imprimir dois inteiros x e y; x indica o número de movimentos (passos + empurrões) e y o número de empurrões de uma sequência que faz com que você leve a caixa até a posição final. O número de empurrões deve ser minimizado. Caso exista mais de uma sequência possível que utiliza um número mínimo de empurrões, o número total de movimentos deve ser minimizado. Imprima uma linha em branco após cada instância.",
        "descricao": "Num futuro não muito distante as pessoas buscarão jogos cada vez mais perigosos para se divertir. Depois de ultra-leve e bungee-jump as pessoas precisarão de jogos em que suas habilidades mentais sejam também colocadas a prova. É o caso deste jogo, chamado \"O Cubo\", inventado na Nova Zelândia. Em alguns lugares o jogo também é conhecido pelo seu nome em japonês: \"Sokoban\". Considere um labirinto bi-dimensional composto por células quadradas. Cada uma delas ou está livre ou está sendo ocupada por uma pedra. A cada passo, você pode sair da célula em que está e se mover para outra célula vizinha livre (acima, abaixo, à direita ou à esquerda). Uma única célula do labirinto contém uma pilha de caixas. A pilha pode ser movida de uma célula i para uma célula k (por exemplo, k = i + 1), vizinha de i, apenas se você estiver numa célula j (no caso, j = i - 1), vizinha de i, e a direção ik é igual à direção ji (ou seja, você está empurrando a caixa para a próxima célula). A caixa não pode ser movida de qualquer outra maneira (você não pode puxá-la, por exemplo). Logo, se ela for parar em algum canto do labirinto, você não será capaz de movê-la novamente. Por fim, note que em cada empurrão você dá um passo, e que o contrário não é necessariamente verdade. Uma das células vazias é marcada como a célula final. Sua tarefa é trazer a caixa para essa célula final através de uma sequência de passos e de empurrões. Como a caixa é pesada, você quer realizar o menor número possível de empurrões. Observe que no jogo da vida real há a possibilidade de você se prender ou mesmo ser esmagado pela caixa, tornando tudo muito mais divertido.",
        "titulo": "O Cubo",
        "entrada": "O arquivo de entrada é composto por várias instâncias. Cada instância começa com uma linha contendo dois inteiros r e c (20 ≥ r,c) representando o número de linhas e colunas do labirinto. Em seguida, são fornecidas r linhas, cada uma contendo c caracteres. Cada caractere descreve uma célula do labirinto. Uma célula ocupada por uma pedra é indicada por # e uma célula vazia é representada por um \".\" (sem aspas). Sua posição inicial é indicada por S, a posição inicial da caixa é indicada por B e a posição final da caixa é indicada por T. A entrada termina quando r = c = 0."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1270",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma linha com o comprimento total mínimo de fibra óptica necessária para ligar as cidades informadas. Sua resposta deve ser arredondada para um dígito decimal.",
        "descricao": "Um país em desenvolvimento está tentando melhorar sua infra-estrutura de comunicação. Atualmente, cada cidade do país tem a sua rede de computadores local, mas não há uma comunicação rápida entre as cidades. O Ministério Autônomo das Comunicações (ACM) do país decidiu criar uma rede de fibra óptica de grande velocidade que ligará todas as cidades. A fim de fazer isso, eles decidiram fazer a seguinte abordagem. Pares de cidades foram escolhidas para ter uma ligação de fibra óptica instalada entre elas. A escolha foi tal que haverá apenas um caminho de fibra entre qualquer par de cidades, a fim de reduzir o custo. Os pares de cidades foram escolhidos considerando diversos fatores, incluindo a análise de demanda estimada e a distância entre as cidades. Cada cidade terá um roteador óptico instalado, o qual será utilizado para conectar todas as ligações óticas com uma extremidade da cidade. Em cada cidade, há muitos locais diferentes onde o roteador óptico pode ser instalados. Sua tarefa, como engenheiro que está trabalhando neste projeto, é desenvolver um programa de computador que receba as localizações de cada uma das cidades e minimize o tamanho total de fibra que seria necessária para este projeto.",
        "titulo": "Fibra Óptica",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste começa com uma linha contendo o número de cidades N (1 ≤ N ≤ 1000) no país. A seguir, para cada cidade, há uma sequência de linhas. A primeira linha contém o nome (único) da cidade (apenas letras maiúsculas, no máximo de 15 letras), e o número de locais candidatos Ci (1 ≤ Ci ≤ 50) em que o roteador óptico pode ser instalado. Então, existe uma linha para cada local candidato, contendo dois inteiros X e Y que representam as coordenadas do local (-10000 ≤ X, Y ≤ 10000). Você deve usar a distância euclidiana entre os sites para calcular o comprimento da fibra correspondente necessário para ligá-los. Depois da descrição de cada cidade, com seus sites candidatos, haverá N - 1 linhas, cada uma delas contendo o nomes de duas cidades que terão um link de fibra instalado entre elas. O final da entrada é indicado por N = 0."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2173",
        "saida": "Para cada caso de teste deve ser impressa uma única linha com um inteiro que representa a maior quantia possível do prefeito roubar e não mentir em seu discurso.",
        "descricao": "O prefeito de Nlogônia está sendo acusado de usar o asfaltamento como caixa dois. Os investigadores suspeitam que ele fez um orçamento maior do que o usado nas obras. Em um pronunciamento oficial, o prefeito disse: “Eu asfaltei o menor número de ruas que permitissem aos cidadãos passearem sem precisarem passar por uma rua de barro”. O Folha de Nlogônia conseguiu alguns documentos sobre as ruas que poderiam ser pavimentadas e quanto isso custaria. Aqui é onde você entra, o jornal te contratou e te forneceu os documentos que eles possuem. Então você pode calcular o maior valor que o político pode ter ganho nesse esquema. Lembre-se você deve considerar que o discurso é verdadeiro, caso contrário você pode ser processado.",
        "titulo": "Caixa Dois",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N (1 ≤N ≤104) e M(1 ≤M ≤105), o número de esquinas e de ruas respectivamente. Cada uma das próximas M linhas possui três inteiros X (1 ≤X ≤ N), Y(1 ≤ Y ≤ N) e C(1 ≤ C ≤ 103), indicando que para asfaltar a rua que liga a esquina X com a esquina Y o custo é C. Sempre é possível escolher as ruas de maneira que o discurso do prefeito seja verdadeiro. Depois do último caso de teste, tem uma linha com dois zeros."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1823",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, seqüencial e crescente a partir de 1. Na linha seguinte, voce deve imprimir sim se existir uma maneira de ir do ponto de partida do labirinto até seu ponto de chegada (sem atravessar nenhum pauzinho...), e imprimir nao em caso contrário. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "Muito se conhece do último imperador da China, imortalizado no clássico filme vencedor do Oscar. Porém, seu antecessor, o Imperador Thang Po Lop teve uma vida muito mais interessante, uma vez que morreu ainda na cidade proibida, cercado de concubinas e criados eunucos. O Imperador Po Lop era um grande colecionador de pauzinhos (daqueles que os orientais utilizam para comer). Desde seus 9 anos ele os guardava e construía com eles enormes labirintos utilizando uma estratégia bastante interessante. Inicialmente Po Lop escolhia um dos pátios retangulares da cidade proibida para construir o labirinto, e esse labirinto sempre ocupava todo o espaço do pátio escolhido. Os pauzinhos eram então colocados nesse pátio aparentemente em lugares aleatórios, sempre paralelos a um dos cantos do pátio. O imperador nunca colocava pauzinhos sobrepostos (nem mesmo parte deles), apesar de ser possível existir cruzamentos ou até mesmo pauzinhos se encostando. Consta na biografia do imperador Po Lop que ele construiu labirintos gigantescos, sempre tomandos esses cuidados. Infelizmente havia um problema. Apesar de exímio construtor de labirintos, o imperador era incapaz de saber se afinal o labirinto continha ou não um caminho ligando sua a entrada à sua saída (sempre em lados opostos do pátio). Para saber isso, ele se utilizava de seus eunucos. Ele instruía o eunuco a procurar o caminho naquele labirinto. Muitas vezes, o eunuco dizia não ser possível. O imperador Po Lop se zangava e degolava o infeliz, pois duvidava da resposta do criado. Felizmente, além de muito paciente (não com eunucos) o imperador era bastante cuidadoso, e anotava criteriosamente as informações sobre os labirintos que construía. Estas anotações foram encontradas na biblioteca da cidade proibida quando da revolução e salvas da destruição. Sua tarefa neste problema é resolver finalmente o enigma, verificando se os labirintos construídos pelo Imperador Po Lop têm ou não saída.",
        "titulo": "O Penúltimo Imperador",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversos labirintos, doravante denominados instâncias. Cada instância é iniciada com uma linha contendo 5 números, ditos n xi yi xf yf . O valor n indica o número de pauzinhos que foram usados para construir o labirinto. O par ( xi , yi ) é o canto inferior esquerdo do pátio e também o ponto de partida. O par ( xf , yf ) é o canto superior direito e também ponto de chegada do labirinto. Nas próximas n linhas são dadas as coordenadas x1 y1 x2 y2 representando os extremos ( x1 , y1 ) e ( x2 , y2 ) de um dos pauzinhos usados na construção do labirinto. O arquivo de entrada termina com n < 0. Pode-se assumir que todos os números dados são inteiros e que n ≤ 1000."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1348",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha, contendo ou a palavra 'yes' (se é possível satisfazer a todos os clientes que votaram) ou a palavra 'no' (se não é possível).",
        "descricao": "A bem conhecida rede de supermercados X-Mart decidiu cortar custos, reduzindo o número de diferentes produtos disponíveis nas prateleiras de suas lojas. O departamento de marketing ficou preocupado se esta decisão afetaria as vendas, e decidiu explorar a redução dos produtos para promover a relação com clientes. Para tal, a rede de supermercados X-Mart organizou uma votação na Internet, na qual os clientes poderiam escolher quais produtos eles gostariam que permanecessem nas prateleiras, e quais produtos eles gostariam que fossem retirados destas. A lista dos produtos disponíveis atualmente foi publicada na Internet. Para simplificar o sistema de votação, foi permitido a cada consumidor escolher no máximo dois produtos para votar a favor (significando que o supermercado deveria continuar a vender estes) e no máximo dois produtos para votar contra (significando que o supermercado deveria parar de vender estes). Sendo que o departamento de marketing possui todos os votos em sua base de dados, este quer saber se é possível escolher uma nova lista de produtos que satisfaça TODOS os clientes que votaram. O departamento de marketing considera que um cliente estará satisfeito se pelo menos um dos produtos que ele/ela votou a favor continua sendo vendido, e se pelo menos um dos produtos que ele/ela votou contra foi removido das prateleiras dos supermercados. Você pode considerar que um cliente não vota a favor e contra um mesmo produto.",
        "titulo": "X-Mart",
        "entrada": "Seu programa deverá processar diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros C e P, representando respectivamente o número de clientes e o número de produtos no teste (1 ≤ C ≤ 1000 e 1 ≤ P ≤ 10000). Cada uma das próximas C linhas descreve a preferência de um cliente, representada por quatro inteiros X, Y, S e T (0 ≤ X, Y, S, T ≤ P). X e Y são os produtos que o cliente quer que o supermercado continue vendendo, S e T são os produtos que o cliente quer que o supermercado pare de vender. Um valor 0 (zero) para qualquer uma das variáveis X, Y, S e T significa que o cliente não está fazendo uso daquele voto. Uma linha com C = P = 0 indica o fim da entrada."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1322",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um caractere 'Y' se é possível organizar o círculo de forma que todas crianças tenham seus desejos atendidos, ou um 'N' caso contrário.",
        "descricao": "Kevin é uma criança. Ele almoça na escola junto com muitas outras crianças. Eles costumam ir até o pátio e almoçar sentados no chão. Eles adoram formar um grande círculo onde cada criança tem exatamente dois vizinhos, um na esquerda e outro na direita. Às vezes a professora tem problemas para organizar o círculo pois muitas crianças desejam sentar ao lado de outras crianças. Cada criança pode desejar sentar ao lado de no máximo duas outras crianças já que cada criança tem apenas dois vizinhos. A professora quer saber se é possível organizar o círculo de forma que todos os desejos de todas as crianças sejam satisfeitos. Você limpa o lugar quando o almoço termina. Já que você quer terminar seu trabalho o mais cedo possível, ajude a professora a responder essa questão.",
        "titulo": "Desejos das Crianças",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros K e W representando respectivamente o número de crianças (3 ≤ K ≤ 109) e o número de desejos (0 ≤ W ≤ 105). Crianças são identificadas por números inteiros entre 1 e K. Cada uma das próximas W linhas descreve um desejo através de dois inteiros distintos A e B (1 ≤ A, B ≤ K); esses valores significam que a criança A deseja sentar ao lado da criança B. Cada criança possui no máximo dois desejos. ​O último caso de teste é seguido de uma linha contendo dois zeros."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1702",
        "saida": "Para cada caso teste, imprima uma única lina com \"Y\" (sem aspas) se é possível construir tal grafo ou \"N\" caso contrário.",
        "descricao": "Seja G um grafo simples com N vértices coloridos e M arestas. Nós desejamos saber se é possível adicionar exatamente P arestas em G de tal forma que o grafo resultante seja simples, conexo e nenhuma aresta conecte dois vértices da mesma cor.",
        "titulo": "Colorindo Grafos",
        "entrada": "A entrada contém múltiplos casos testes. A primeira linha contém a quantidade de casos testes T (T < 70). Cada caso teste começa com 4 inteiros na seguinte ordem: o número de vértices N (1 <= N <= 10^3), o número de arestas no grafo original M (0 <= M <= 10^5), o número de arestas a serem inseridas P (0 <= P <= 10^6) e o número de cores K (1 <= K <= 10^3). A linha seguinte contém N números Xi indicando a cor do i-ésimo vértice (1 <= Xi <= K). As M seguintes linhas contém um par de inteiros (V_i, V_j) indicando a presença de uma aresta entre os vértices V_i e V_j. (1 <= V_i,V_j <= N)."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2182",
        "saida": "Imprima um único inteiro, o índice da casa onde Luciano deverá morar.",
        "descricao": "Luciano é um fã de esportes, ainda mais quando se trata do ciclismo. Luciano possui uma bicicleta e a cuida como se fosse seu filho, evitando ao máximo andar em ruas ruins, ou seja, ruas com muitos buracos. Luciano irá mudar de cidade e precisa de sua ajuda para encontrar o melhor bairro para se morar. Para Luciano, o melhor bairro é aquele onde a média da quantidade de buracos entre todos os caminhos é a menor possível. Duas casas estão no mesmo bairro se for possível sair de uma e chegar até a outra usando os caminhos existentes. Após decidir o bairro, Luciano escolhe a casa baseado no seu identificador, ele prefere a casa com o maior identificador possível. Você receberá uma lista com N casas disponíveis para Luciano morar e M caminhos entre essas casas. Em cada um desses caminhos existe uma quantidade de buracos. Nunca haverá mais de um caminho direto entre duas casas. Cada casa possui um identificador [1, N]. Se existir um bairro com apenas uma casa, a quantidade de buracos nesse bairro será 0, já que não existe caminhos. Ajude Luciano e diga qual o identificador da casa onde deverá morar.",
        "titulo": "Luciano e a Bicicletinha",
        "entrada": "A primeira linha contêm dois inteiros, N, M, representando a quantidade de casas disponíveis e a quantidade de caminhos entre elas. (1 ≤ N ≤ 104, 0 ≤ M ≤ 105). Após isso, M linhas seguem, cada uma com três inteiros, X, Y, B, representando um caminho bidirecional entre as casas X e Y com uma quantidade B de buracos. (1 ≤ X, Y ≤ N, X != Y, 0 ≤ B ≤ 100)."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1489",
        "saida": "O programa deve imprimir a cada instância uma linha com Instancia i, onde i é o número de i-ésima instância. A linha seguinte deve conter a expressão pair programming se a proposta de Wander for viável. Caso contrário, imprima a expressão extreme programming. Após cada instância, seu programa deve imprimir uma linha em branco.",
        "descricao": "Wander Vega é um experiente gerente de projetos numa grande empresa de desenvolvimento de sistemas. Ele recentemente leu na renomada revista científica Boas Práticas os resultados de uma pesquisa que indicam que alguns aspectos de metodologias de desenvolvimento ágil podem ser aplicadas em grandes equipes aumentando a produtividade. Ele ficou surpreso ao descobrir que um desses aspectos é a programação pareada (pair programming), onde dois desenvolvedores trabalham juntos, usando o mesmo computador. Ávido por impor mudanças que sejam notadas pela diretoria, Wander resolveu adotar programação pareada no próximo grande projeto que irá gerenciar. Só que como todo bom engenheiro de software, Wander quer otimizar esse processo. Ele resolveu que irá usar pares fixos de desenvolvedores. Além disso ele vai alocar os pares de programadores previamente. Porém, Wander não está disposto a correr riscos desnecessários, e só permitirá a composição de duplas de desenvolvedores que tenham níveis aceitáveis de produtividade, comunicação e capacidade de interação em trabalhos conjuntos. Caso isso não seja possível, Wander colocará todos os desenvolvedores de seu próximo projeto numa sala quente, com várias esfihas, refrigerantes e um computador, e aplicará as técnicas de programação extrema (extreme programming) para viabilizar o desenvolvimento do sistema. Avaliando suas possibilidades ele percebeu que seu plano seria mais reutilizável em outros projetos se ele tivesse um programa que verificasse a viabilidade do pair programming em sua empresa. Nesse momento ele pensou em você, o mais novo estagiário da empresa, para escrever um programa que resolva esse problema. Wander fez uma profunda análise de requisitos e chegou na seguinte especificação que seu programa deve seguir.",
        "titulo": "Engenharia de Software",
        "entrada": "A primeira linha da entrada contém um número k, que indica o número de instâncias. Cada instância é composta por uma linha contendo um número inteiro 2 ≤ n ≤ 100, a quantidade de profissionais de desenvolvimento da empresa, seguida por n linhas. A i-ésima linha começa com um número p, indicando o número de pessoas com a qual o i-ésimo programador tem produtividade aceitável, e vem seguida por p inteiros, cada um entre 1 e n, indicando tais parceiros."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1977",
        "saida": "Seu programa deverá produzir duas linhas na saída. Uma contendo o horário de chegada a faculdade e outra contendo \"Ira se atrasar\" ou \"Nao ira se atrasar\".",
        "descricao": "Anne é uma aluna muito aplicada do curso de ciência da computação. Ela não gosta de chegar atrasada de forma alguma, sempre tenta chegar no máximo 18:00 em ponto que é o horário de início das aulas. Porém o trânsito na cidade de Teresópolis entre 16:30 e 19:00 é muito lento, então um trajeto que normalmente levaria 10 minutos, leva um tempo bem maior. Anne sai do seu trabalho às 17:00 e leva aproximadamente X minutos para chegar ao ponto, porém os ônibus em direção à faculdade passam exatamente as 17:30, nesse horário passam diversos ônibus com trajetos diferentes que levarão à faculdade, caso Anne os perca, terá de esperar até as 17:50 até passar mais ônibus. Do ponto de ônibus que ela geralmente espera, até a faculdade, levará facilmente mais de 30 minutos se não escolher o ônibus que tenha o melhor trajeto. Anne precisa saber que horas ela chegará a faculdade escolhendo o melhor trajeto e se chegará atrasada. Sua tarefa é, a partir de N rotas possíveis, dizer que horas Anne chegará na faculdade indo pelo melhor trajeto, sabendo que ela deve sair da varzea e chegar ao alto, com pesos T de tempo entre um local e outro, levando em consideração o trânsito (o T da varzea ao alto não é o mesmo que do alto a varzea, pois o transito no sentido contrário pode ser diferente) e informar se houve ou não atraso. Assuma que Anne sempre chegará no ponto antes de 17:50 e que sempre terá um caminho entre a Várzea e o Alto.",
        "titulo": "Não Posso me Atrasar",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém três inteiros separados por um espaço, X (1 ≤ X ≤ 50), N (1 ≤ N ≤ 90) e V (1 ≤ V ≤ 10), indicando o tempo que Anne levá para ir do trabalho ao ponto, a quantidade possíveis rotas e o número de pontos que ela poderá passar. Seguem-se, então, N linhas, cada uma com duas strings não-vazias e únicas contendo os locais das rotas que Anne pode passar e um inteiro separados por espaço, O, D e T (1 ≤ T ≤ 60), indicando que existe uma rota para ir do local O para o local D, e que tal trajeto levará T minutos. A entrada termina quando X = N = V = 0, e não deve ser processada."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1908",
        "saida": "Imprima o menor custo para ir do campus 1 ao campus N.",
        "descricao": "É o ano de 2.265, e a UFFS (Universidade da Fronteira Final da Sapiência) já conta com 112.345 campi espalhados pela galáxia. Para integrar todos os campi, a UFFS criou várias linhas de transporte coletivo em velocidade de dobra. O itinerário de cada linha L é uma sequência de |L| ≥ 2 campi C1, C2, …, C|L|, e cada linha conta com uma única nave, a qual passa por todos os campi da linha, seguindo a ordem do itinerário, parando em cada um deles e dando meia-volta sempre que atinge um extremo do itinerário, revertendo a ordem dos campi no itinerário. O passe do transporte custa Ƀ1 (1 bitcoin, a unidade monetária que se tornou a moeda oficial da galáxia graças aos trabalhos do Prof. Emílio Wuergues no início do séc. XXI), e deve ser pago pelo passageiro ao embarcar na nave, independente do tempo que passará nela. Deste modo, o menor custo para ir do campus A ao campus B considerando as linhas hipotéticas da figura abaixo é de Ƀ2.",
        "titulo": "UFFS Multicampi",
        "entrada": "A primeira linha da entrada consiste de dois inteiros N e K (2 ≤ N ≤ 104, 1 ≤ K ≤ 103), os quais representam respectivamente o número de campi e o número de linhas de transporte coletivo criadas pela UFFS. Cada uma das K linhas de entrada seguintes descreve uma linha de transporte L e consiste do inteiro |L| (2 ≤ |L| ≤ 102) seguido pelos |L| identificadores Ci (1 ≤ Ci ≤ N, 1 ≤ i ≤ |L|) dos campi pelos quais a nave passa, sendo C1 e C|L| os extremos de L. Para todo campus A e todo campus B é garantido que é possível ir de A a B usando o sistema de transporte coletivo da UFFS."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1724",
        "saida": "Para cada caso de teste imprima em uma linha o número mínimo de movimentos necessários para levar as três peças para a mesma posição, ou a palavra \"impossible\" caso isso não seja possível para o tabuleiro e as posições iniciais dadas.",
        "descricao": "\"Caminhada em um Grafo\" é um jogo jogado em um tabuleiro onde um grafo não-direcionado é desenhado. O grafo é completo e tem todos os ciclos, isso é, para quaisquer dos locais, existe exatamente uma ligação entre eles. As ligações são coloridas. Existem três jogadores e cada um deles tem uma peça. No início do jogo, as três peças estão em lugares pré-determinados no grafo. Em seu turno, os jogadores podem fazer um movimento. Um movimento consiste em mover a peça ao longo de uma ligação para um novo local no tabuleiro. A seguinte restrição é imposta sobre isso: a peça pode ser movida somente entre ligações da mesma cor que a ligação entre as peças dos jogadores adversários. Nos anos sessenta (\"faça amor, não faça guerra\") surgiu uma variante para um jogador desse jogo. Nessa variação, uma pessoa move todas as três peças, não necessariamente em ordem, mas apenas uma por vez. O objetivo desse jogo é colocar todas as peças no mesmo local com o menor número de movimentos possível. Encontre o menor número de movimentos necessários para colocar todas as três peças no mesmo local, dada uma configuração de tabuleiro e posições iniciais.",
        "titulo": "Caminhada em um Grafo",
        "entrada": "O arquivo de entrada contém diversos casos de teste. Cada caso de teste começa com o número n. A entrada é terminada por n = 0. Caso contrário, 1 ≤ n ≤ 50. A seguir há três inteiros p1, p2, p3 com 1 ≤ pi ≤ n denotando as posições iniciais das peças do jogo. As cores das ligações são dadas em seguida como uma matriz m x m de letras minúsculas separadas por espaço. O elemento mij denota a cor da ligação entre os locais i e j. Como o grafo não é direcionado, você pode assumir que a matriz é simétrica."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1148",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir K linhas na saída. A I-ésima linha deve conter um inteiro M , o tempo mínimo, em horas, para se enviar uma carta na I-ésima consulta. Se não houver meio de comunicação entre as cidades da consulta, você deve imprimir ”Nao e possivel entregar a carta”(sem acentos). Imprima uma linha em branco após cada caso de teste.",
        "descricao": "No ano 2050, após diversas tentativas da ONU de manter a paz no mundo, explode a terceira guerra mundial. Segredos industriais, comerciais e militares obrigaram todos os países a utilizar serviços de espionagem extremamente sofisticados, de forma que em cada cidade do mundo há ao menos um espião de cada país. Esses espiões precisam se comunicar com outros espiões, com informantes e mesmo com as suas centrais durante as suas ações. Infelizmente não existe uma forma segura de um espião se comunicar em um período de guerra, então as mensagens são sempre enviadas em código para que somente o destinatário consiga ler a mensagem e entender o seu significado. Os espiões utilizam o unico serviço que funciona no período de guerra, os correios. Cada cidade possui uma agência postal onde as cartas são enviadas. As cartas podem ser enviadas diretamente ao seu destino ou a outras agências postais, até que a carta chegue à agência postal da cidade de destino, se isso for possível. Uma agência postal na cidade A pode enviar diretamente uma carta impressa para a agência postal da cidade B se houver um acordo de envio de cartas, que determina o tempo, em horas, que uma carta leva para chegar da cidade A à cidade B (e não necessariamente o contrário).a Se não houver um acordo entre as agências A e B, a agência A pode tentar enviar a carta a quantas agências for necessário para que a carta chegue ao seu destino, se isso for possível. Algumas agências são interligadas por meios eletrônicos de comunicação, como satélites e fibras ópticas. Antes da guerra, essas ligações atingiam todas as agências, fazendo com que uma carta fosse enviada de forma instantânea, mas durante o período de hostilidades cada país passou a controlar a comunicação eletrônica e uma agência somente pode enviar uma carta a outra agência por meio eletrônico (ou seja, instantaneamente) se ela estiver no mesmo país. Duas agências, A e B, estão no mesmo país se houver uma forma de uma carta impressa enviada de uma das agências ser entregue na outra agência. O serviço de espionagem do seu país conseguiu obter o conteúdo de todos os acordos de envios de mensagens existentes no mundo e deseja descobrir o tempo mínimo para se enviar uma carta entre diversos pares de cidades. Você seria capaz de ajudá-lo?",
        "titulo": "Países em Guerra",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros separados por um espaço, N (1 ≤ N ≤ 500) e E (0 ≤ E ≤ N2), indicando o número de cidades (numeradas de 1 a N) e de acordos de envio de mensagens, respectivamente. Seguem-se, então, E linhas, cada uma com três inteiros separados por espaços, X, Y e H (1 ≤ X, Y ≤ N, 1 ≤ H ≤ 1000), indicando que existe um acordo para enviar uma carta impressa da cidade X à cidade Y , e que tal carta será entregue em H horas. Em seguida, haverá uma linha com um inteiro K (0 ≤ K ≤ 100), o número de consultas. Finalmente, virão K linhas, cada uma representando uma consulta e contendo dois inteiros separados por um espaço, O e D (1 ≤ O, D ≤ N). Você deve determinar o tempo mínimo para se enviar uma carta da cidade O à cidade D. A entrada termina quando N = E = 0."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1915",
        "saida": "Para cada caso de teste exiba, com duas casas após o ponto, o percentual máximo de amigos da vila que ficarão com um brinquedo. Veja a formatação de saída.",
        "descricao": "Uma das coisas que a turma da vila mais faz é brincar, porém na maioria das vezes a brincadeira termina em confusão, pois Chaves sempre fica sem nenhum brinquedo. Para tentar evitar as confusões e poderem se divertir em paz o dia todo, Chaves deu a ideia de cada um pegar apenas um brinquedo e ficar o dia todo com ele. O processo para a escolha dos brinquedos é um tanto quanto diferente e será explicado abaixo. Dado os nomes dos N amigos da vila e M diferentes brinquedos, cada nome/brinquedo será criptografado em uma sequência de números, de acordo com a tabela a seguir: Os valores da tabela acima só serão válidos para a primeira aparição de cada letra, se uma letra aparecer pela segunda vez, seu valor será o valor original + 26. Se a mesma letra aparecer pela terceira vez, seu valor será o valor original + 26 + 26 e assim por diante. Ex: O nome KIKO será criptografado na seguinte sequência: 11 9 37 15. Agora vem a parte necessária para a escolha dos brinquedos, uma pessoa X só irá desejar ficar com um brinquedo Y, se a soma da quantidade mínima de números necessários de serem retirados de suas sequências para que elas se tornem iguais for um múltiplo de cinco. Veja o exemplo: CHAVES = 3 8 1 22 5 19 - Retirando os números 3, 8, 22 e 19, sobrará a sequência 1 5. PATINETE = 16 1 20 9 14 5 46 31 - Retirando os números 16, 20, 9, 14, 46 e 31, sobrará a mesma sequência 1 5. Ou seja, foi necessário retirar 4 + 6 = 10 números, logo Chaves deseja brincar com o Patinete, pois 10 é um múltiplo de 5. Dado o nome dos N amigos e M brinquedos, você deverá maximizar o percentual de amigos que ficarão com um brinquedo.",
        "titulo": "Ajude Chaves",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N e M (1 ≤ N, M ≤ 100) representando a quantidade de amigos da vila e a quantidade de brinquedos. N linhas seguem, cada uma contendo o nome de um amigo, o tamanho do nome nunca ultrapassará 100 caracteres [A-Z]. Após isso, M linhas seguem contendo cada o nome de um brinquedo, o tamanho do nome de um brinquedo nunca ultrapassará 100 caracteres [A-Z]. A entrada termina com N = M = 0, a qual não deve ser processada."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1128",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha contendo um inteiro G, onde G é igual a 1 se o requisito de conexidade está satisfeito, ou G é igual a 0, caso contrário.",
        "descricao": "Numa certa cidade há N intersecções ligadas por ruas de mão única e ruas com mão dupla de direcão. É uma cidade moderna, de forma que muitas ruas atravessam túneis ou têm viadutos. Evidentemente é necessário que se possa viajar entre quaisquer duas intersecções, isto é, dadas duas intersecções V e W, deve ser possível viajar de V para W e de W para V. Sua tarefa é escrever um programa que leia a descrição do sistema de tráfego de uma cidade e determine se o requisito de conexidade é satisfeito ou não.",
        "titulo": "Ir e Vir",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros N e M, separados por um espaço em branco, indicando respectivamente o número de intersecções (2 ≤ N ≤ 2000) e o número de ruas (2 ≤ M ≤ N(N−1)/2). O caso de teste tem ainda mais M linhas, que contêm, cada uma, uma descrição de cada uma das M ruas. A descrição consiste de três inteiros V, W e P, separados por um espaço em branco, onde V e W são identificadores distintos de intersecções (1 ≤ V, W ≤ N , V ≠ W ) e P pode ser 1 ou 2; se P = 1 então a rua é de mão única, e vai de V para W; se P = 2 então a rua é de mão dupla, liga V e W. Não existe duas ruas ligando as mesmas intersecções. O ultimo caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1928",
        "saida": "Seu programa deve produzir uma linha contendo um inteiro, o maior valor total de pontos que é possível acumular.",
        "descricao": "Pedro e Paulo resolveram complicar um pouco o tradicional Jogo da Memória, em que os jogadores precisam virar duas cartas iguais. Eles colocam N cartas no chão, com as faces viradas para baixo. A face de cada carta tem a figura de um número de 1 até N/2, sendo que exatamente duas cartas possuem a figura de cada número entre 1 e N/2. Como as cartas têm as faces viradas para baixo, elas podem também ser identificadas por suas posições, que são inteiros de 1 a N. Pedro e Paulo então desenham no chão, usando giz, algumas linhas ligando pares de cartas, de modo que para qualquer par de cartas (A, B) existe uma e apenas uma sequência de cartas e linhas desenhadas que leva de A até B. A figura abaixo mostra um exemplo de jogo, (a) com todas as cartas com as faces viradas para baixo, e (b) com todas as cartas com as faces viradas para cima. O jogo é jogado com todas as cartas com as faces viradas para baixo. A cada jogada, o jogador deve escolher um par de cartas A e B. Se as faces das duas cartas escolhidas têm a mesma figura, o jogador acumula um número de pontos igual ao número de linhas desenhadas que existem no caminho entre as cartas A e B. Pedro e Paulo, agora, estão estudando qual é a melhor estratégia para esse jogo e precisam da sua ajuda para resolver uma tarefa específica: dadas as cartas existentes em cada posição, e as ligações desenhadas com giz, calcular o maior valor total de pontos que é possível acumular.",
        "titulo": "Jogo da Memória",
        "entrada": "A primeira linha da entrada contém o número de cartas N (2 ≤ N ≤ 50000, N é par). A segunda linha da entrada contém N inteiros Ci, indicando qual número está anotado na carta na posição i (1 ≤ Ci ≤ N/2, para 1 ≤ i ≤ N). As cartas são dadas na ordem crescente das posições: a primeira carta ocupa a posição 1, a segunda a posição 2, e assim por diante até a última carta, que ocupa a posição N. Cada uma das N − 1 linhas seguintes contém dois números A e B, indicando que existe uma linha desenhada entre as cartas nas posições A e B (1 ≤ A ≤ N e 1 ≤ B ≤ N)."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1799",
        "saida": "Imprima um valor inteiro identificando a quantidade mínima de pontos do labirinto pelos quais IBO deve passar para cumprir a sua tarefa.",
        "descricao": "Em 1942, um estudo feito por Robert Tryon concluiu que os traços genéticos frequentemente podem contribuir para o comportamento, independente do meio ambiente. Para fazer isso Tryon criou uma experiência que testou a proficiência de gerações sucessivas de ratos em completar um labirinto, separando os que fizeram os menores números de erros em \"brilhantes\", e aqueles com mais erros em \"medíocres\". Dando continuidade a este processo durante sete gerações ele criou duas raças distintas de ratos: \"brilhantes\" e \"medíocres\". O ratinho IBO é descendente da linhagem de ratos \"brilhante\", sendo o melhor de todos no desempenho deste experimento. Ele consegue entrar, pegar o queijo e sair de qualquer labirinto sem se perder, e sempre faz o caminho mais curto possível. Sua tarefa neste problema é, dado o desenho do Labirinto e a posição do queijo, determinar por quantos pontos estrategicamente marcados por letras do alfabeto (ou palavras contendo somente letras) IBO deve passar para pegar o queijo (indicado pelo caractere '*') e sair, sempre partindo do ponto Entrada e terminando em Saida (sem acento). No exemplo abaixo, a sequência de IBO à partir da Entrada seria: A, F, J, *, I, M, K e Saida, o que resultaria em 8, que é a quantidade mínima de pontos pelos quais IBO deve passar para cumprir a sua tarefa. Se IBO tiver que passar por um ponto duas vezes (uma indo para o queijo e outra indo para a saída) isso conta como dois pontos visitados.",
        "titulo": "O Rato no Labirinto",
        "entrada": "A primeira linha de entrada contém dois inteiros Pontos (4 ≤ Pontos ≤ 4000) e Ligacoes (4 ≤ Ligacoes ≤ 5000) representando respectivamente o número de pontos estrategicamente marcados no labirinto e quantidade de ligações existentes entre estes pontos. Seguem as linhas que indicam cada uma das ligações entre estes pontos. As ligação entre dois pontos indica que qualquer um dos dois pode ser a origem."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1476",
        "saida": "Para cada sede, na ordem em que elas foram descritas na entrada, seu programa deve imprimir uma linha contendo um único inteiro, indicando o maior peso bruto, em toneladas, que pode ser transportado por caminhão do depósito que irá fornecer os balões até ela.",
        "descricao": "A Sociedade de Bal˜oes Coloridos (SBC) é a principal fornecedora de balões para competições de programação; ela dispõe de grandes fábricas e depósitos, além de uma extensa frota de caminhões para garantir a alegria dos competidores. Há várias sedes regionais na Nlogônia, todas as quais contrataram a SBC para o fornecimento de balões para a prova. A Nlogônia é um arquipélago ligado por várias pontes. Cada ilha do arquipélago pode conter várias sedes regionais e vários depósitos da SBC. Ao planejar as rotas, a SBC se deparou com um problema: por razões de segurança, cada ponte da Nlogônia tem um limite máximo de peso permitido para os veículos que trafegam sobre ela. Devido ao grande número de pontes na Nlogônia, e ao elevado peso da mercadoria transportada, o diretor de operações da SBC pediu que você escrevesse um programa que determina o maior peso bruto que pode ser transportado entre os depósitos e os locais de prova.",
        "titulo": "Caminhão",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três inteiros N(2 ≤ N ≤ 2 x 104), M(1 ≤ M ≤ 105) e S(1 ≤ S ≤ 5 × 104), indicando, respectivamente, o número de ilhas da Nlogônia, o número de pontes que ligam as ilhas e o número de sedes. As ilhas nlogonianas são numeradas de 1 a N. Cada uma das M linhas seguintes descreve uma ponte. A descrição de cada ponte consiste de uma linha contendo três inteiros A, B(1 ≤ A,B ≤ N, A != B) e P(0 ≤ P ≤ 105), indicando as duas ilhas ligadas por aquela ponte e o peso máximo permitido naquela ponte, em toneladas. Todas as pontes são de mão dupla; cada par de ilhas é ligado por no máximo uma ponte; é possível ir de qualquer ilha para qualquer outra ilha utilizando apenas as pontes do arquipélago (mas pode ser preciso passar por outras ilhas primeiro). Cada uma das S linhas seguintes descreve uma sede. A descrição de cada sede consiste de uma linha contendo dois inteiros A e B, indicando, respectivamente, a ilha onde está a sede e a ilha onde está o depósito que irá fornecer os balões àquela sede. O final da entrada é determinado por EOF (fim de arquivo)."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1923",
        "saida": "Imprima a quantidade de pessoas que serão convidadas para o churrasco, em seguida o nome de cada uma delas em ordem lexicográfica crescente.",
        "descricao": "Após ter feito um churrasco para festejar os resultados da OPI (Olimpíada Paraibana de Informática) com os amigos, Rerisson pretende fazer outro churrasco, dessa vez um bem maior, com o intuito de conhecer novas pessoas. Ele irá convidar todas as pessoas que possuem um grau de relacionamento para com ele (chamado g) de no máximo, G. Por exemplo, considere “>” como sendo o sinal de relacionamento direto: Rerisson > Lucas Rerisson > Jonathan Lucas > Jonathan Jonathan > Pedro Pedro > Juan Lucas > Juan Para esse exemplo, considerando o G = 1, apenas Lucas e Jonathan seriam convidados para o churrasco. Com o auxílio de uma rede social, Rerisson conhece todas os relacionamento diretos, mas está ocupado preparando o churrasco e gostaria que você, com a lista de relacionamentos preparada por Rerisson, informe quais pessoas serão convidadas para a grande festa.",
        "titulo": "Rerisson e o Churrasco",
        "entrada": "A primeira linha da entrada irá conter dois inteiros 3 ≤ n ≤ 103 e 1 ≤ G ≤ 500, representando a quantidade de relações de amizades direta e o grau de distância máxima a ser considerado. Cada uma das próximas n linhas irá conter duas strings sem espaços S e T, 1 ≤ |S|, |T| ≤ 20, descrevendo uma relação de amizade direta, (A relação é mútua)."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1409",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha na saída contendo um número inteiro, a quantidade mínima inicial de mana necessária. Caso não seja possível recuperar o tesouro, você deve imprimir -1.",
        "descricao": "Zak Galou é um famoso bruxo matador de monstros. Diz a lenda que existe uma caverna escondida nos confins da selva contendo um tesouro milenar. Até hoje nenhum aventureiro conseguiu recuperar o tesouro, pois ele é bem guardado por terríveis monstros. Mas Zak Galou não é um aventureiro qualquer e decidiu preparar-se para recuperar o tão sonhado tesouro. Zak Galou dispõe de uma certa quantidade de mana (uma espécie de energia mágica) e de uma lista de M magias. Cada monstro tem um determinado número de pontos de vida. Cada vez que Zak Galou lança uma magia contra um monstro, Zak gasta uma certa quantidade de mana (o custo da magia) e inflige um certo dano ao monstro. O dano infligido provoca a perda de pontos de vida do monstro (o número de pontos perdidos depende da magia). Um monstro está morto se tiver zero ou menos pontos de vida. Zak sempre luta contra um monstro a cada vez. Como é um bruxo poderoso, ele pode usar a mesma magia várias vezes, desde que possua a quantidade necessária de mana. Em suas pesquisas, Zak Galou conseguiu o mapa do tesouro. A caverna é representada como um conjunto de salões conectados por galerias. Os salões são identificados sequencialmente de 1 a N. Zak sempre inicia no salão 1 e o tesouro está sempre no salão N. Existem K monstros identificados sequencialmente de 1 a K. Cada monstro vive em um salão, do qual não sai (note que é possível que mais de um monstro viva no mesmo salão). Durante a busca pelo tesouro, Zak Galou pode sair ou recuperar o tesouro de um salão somente se o salão estiver vazio (sem monstro). Em outras palavras, Zak deve sempre, antes de sair ou de recuperar o tesouro de um salão, matar o(s) monstro(s) que lá viver(em). Dadas as descrições das magias, dos monstros e da caverna, sua tarefa é determinar a quantidade mínima inicial de mana necessária para que Zak Galou consiga recuperar o tesouro.",
        "titulo": "Zak Galou",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém quatro inteiros M, N, G e K, indicando respectivamente o número de magias (1 ≤ M ≤ 1000), de salões (1 ≤ N ≤ 1000), de galerias (0 ≤ G ≤ 1000000) e de monstros (0 ≤ K ≤ 1000). Cada uma das M linhas seguintes descreve uma magia. A descrição de uma magia contém dois números inteiros, a quantidade de mana consumida (entre 1 e 1000) e o número de pontos de danos provocados (também entre 1 e 1000). Em seguida, há G linhas, cada uma descrevendo uma galeria. Uma galeria é descrita por dois números inteiros A e B (A ≠ B), representando os salões que a galeria conecta. Zak pode utilizar a galeria nos dois sentidos, ou seja, para ir de A para B ou de B para A. Finalmente, as últimas K linhas de um caso de teste descrevem os monstros. A descrição de um monstro contém dois números inteiros representando respectivamente o salão no qual ele vive (entre 1 e N inclusive) e o seu número inicial de pontos de vida (entre 1 e 1000 inclusive). O final da entrada é indicado por M = N = G = K = 0."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1539",
        "saida": "Para cada caso de teste, deve-se imprimir C linhas, sendo que cada uma representa a distância do menor caminho entre as duas antenas. Os valores devem ser INTEIROS, ou seja, a parte real deve ser truncada (não arredondada), e sempre com uma quebra de linha. Caso não seja identificada uma rota entre as antenas, deve ser impresso o valor -1.",
        "descricao": "Cesário é um analista da Algar Telecom, e está trabalhando em um projeto de análise da rede de telefonia móvel. Ele terá que desenvolver um sistema que analise o alcance de cada uma das antenas dessa rede, e que defina os custos operacionais para o envio de dados de de dispositivo para outro, baseando-se na distancia entre as antenas. O objetivo minimizar esses custos, encontrando a melhor rota disponível. Os cálculos também visam descobrir se é possível estabelecer um caminho entre dois dispositivos, de forma a detectar graves problemas na rede. Mesmo com todos os dados disponíveis para processamento, Cesário tem enfrentado problemas na implementação devido a alta complexidade desse algoritmo, por isso você foi contratado para ajudá-lo. O seu objetivo é analisar todas as antenas da rede da Algar Telecom, observando as suas coordenadas e raios de alcance; verificar quais as antenas possíveis de serem acessadas (dentro do raio de alcance); e calcular o menor caminho entre duas antenas determinadas.",
        "titulo": "Empresa de Telecom",
        "entrada": "A entrada é composta de vários casos de testes. Sendo que, a primeira linha contém um inteiro não negativo, N (2 ≤ N ≤ 100), que indica o número de antenas disponíveis para interconexão na rede. Seguem-se N linhas, cada uma contendo três números inteiros X (0 ≤ X ≤ 1000), Y (0 ≤ Y ≤ 1000) e R (1 ≤ R ≤ 1000), que descrevem a posição da antena, coordenadas X e Y, e o seu raio de alcance R (separados por espaço em branco). A linha seguinte contém outro inteiro não negativo, C (1 ≤ C ≤ 100), que descreve a quantidade de cálculos à serem realizados nessa rede. As C linhas seguintes contém 2 inteiros cada, A1 (1 ≤ A1 ≤ N) e A2 (1 ≤ A2 ≤ N), que descrevem o índice das antenas a serem utilizadas e também separadas por espaço em branco. O fim das entradas é sinalizado por um número 0."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1902",
        "saida": "Seu programa deve imprimir numa linha um único inteiro, representando o maior número de casamentos que é possível a SBC formar.",
        "descricao": "A Sociedade Brasileira Casamenteira (SBC) perguntou a todas as pessoas solteiras do país se estavam apaixonadas e por quem estavam apaixonadas. Curiosamente, cada pessoa solteira respondeu que estava apaixonada por exatamente uma outra pessoa, mas que tinha vergonha de declarar seus sentimentos. Dispondo agora dessas informações, a SBC deseja formar casamentos, para que as pessoas vivam mais felizes. Se uma pessoa A1 é apaixonada por uma pessoa A2 e a pessoa A2 também é apaixonada pela pessoa A1, é claro que a SBC pode formar o casamento {A1, A2}. Contudo, se A1 é apaixonada por A2, mas A2 é apaixonada por A3, que é apaixonada por A4… que é apaixonada por Ak, sendo que Ak é apaixonada por A1, também é possível formar o casamento {A1, A2, …, Ak}, já que, recentemente, foi aprovado o casamento poligâmico no Brasil. Mais formalmente, a SBC pode formar o casamento {A1, …, Ak} se e somente se k ≥ 2, a pessoa Ak é apaixonada pela pessoa A1 e, para todo i ∈ {2, …, k}, a pessoa Ai - 1 é apaixonada pela pessoa Ai. Ajude a SBC a formar o maior número possível de casamentos.",
        "titulo": "Sociedade Brasileira Casamenteira",
        "entrada": "A entrada é composta por no máximo 105 linhas e finalizada por fim de arquivo. Cada linha da entrada consiste dos nomes de duas pessoas A e B, indicando que a pessoa A é apaixonada pela pessoa B. Cada nome de pessoa é uma cadeia de no mínimo 1 e no máximo 10 letras do alfabeto latino, sem diacríticos."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1621",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando a distância entre a entrada e a saída do labirinto se a localização da entrada e da saída do labirinto for escolhida de forma ótima.",
        "descricao": "Labirinto de papel é o passatempo favorito de Rafael, mas ele anda reclamando que os labirintos que ele encontra para resolver são muito fáceis. Para ser mais específico, a distância entre o início do labirinto e a saída é sempre muito pequena. A entrada de um labirinto é por onde o jogador deve começar a resolvê-lo, e a saída é por onde o jogador deve terminar o labirinto. O jogador pode dar passos nas quatro direções – cima, direita, baixo ou esquerda – e a distância entre a entrada e a saída do labirinto é dado pela soma de passos do menor caminho que pode ser feito. Dado um labirinto de N linhas e M colunas, diga qual a distância máxima que pode ser definida se a entrada e a saída for escolhida de forma ótima.",
        "titulo": "Labirinto",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (5 ≤ N, M ≤ 500), representando o número de linhas e colunas do labirinto, respectivamente. A seguir haverá N linhas contendo M caracteres cada, representando o labirinto a ser analizado. O caractere da i-ésima linha e da j-ésima coluna indica o que há na posição i, j do labirinto. Se o caractere for um “.” (ponto), significa que aquele é um espaço vazio, por onde o jogador pode passar. Caso seja um “#”, significa que aquele é um obstáculo, por onde o jogador não pode passar. Haverá sempre ao menos dois espaços vazios no labirinto, e só há um caminho entre quaisquer dois espaços vazios. A entrada e a saída do labirinto não necessariamente precisam estar nas bordas. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1592",
        "saida": "Imprima o menor custo de combustível possível para cada caso em uma única linha, e caso Golias não consiga chegar até Elias, imprima -1.",
        "descricao": "Várias cidades são conectadas por estradas. As N cidades são nomeadas com números de 0 até N-1. Golias deseja viajar de carro de sua cidade, identificada pelo número 0, para a capital, identificada pelo número N-1 para visitar seu amigo Elias. Cada estrada é de uma mão, ou seja, os carros viajam em apenas uma direção, e se tem um custo de combustível para atravessá-la. Dado a configuração das cidades e estradas, Golias quer saber qual o menor custo de combustível de maneira que ele passe por no máximo K cidades diferentes. As cidades inicial e final também contam, ou seja, sempre ele terá de visitar no mínimo duas cidades, a inicial e a final.",
        "titulo": "Elias e Golias",
        "entrada": "Na primeira linha terá um inteiro T (T = 200) indicando o número de casos de teste. Para cada caso, a primeira linha terá três números inteiros, N (2 ≤ N ≤ 50* ou 2 ≤ N ≤ 1000**), M (1 ≤ M ≤ 200* ou 1 ≤ M ≤ 3000**) e K (2 ≤ K ≤ N), indicando o número de cidades, o número de estradas e o máximo número de cidades diferentes que podem ser visitadas, respectivamente. Nas M seguintes linhas haverá três inteiros A (0 ≤ A ≤ N-1), B (0 ≤ B ≤ N-1) e C (1 ≤ C ≤ 105) indicando que há uma estrada de mão única da cidade A para a cidade B, e que custa C unidades de combustível . Pode haver mais de uma estrada conectando duas cidades, ou uma estrada conectando uma cidade a ela mesma. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2112",
        "saida": "Para cada instância o seu programa deverá imprimir uma permutação das turmas que atenda os requisitos de todos os docentes, ou seja, todas as turmas em que um docente dá aula estejam adjacentes. Caso não exista uma tal permutação seu programa deverá imprimir impossível. Se existir mais de uma permutação possível, qualquer uma será aceita.",
        "descricao": "Os professores da Universidade de Ecaterimburgo não gostam de deslocar-se por longas distâncias. Cada docente deseja que as salas em que ele vai dar aula estejam em posições adjacentes. No início de cada semestre cabe ao responsável pela Comissão de Graduação determinar as salas de aula em que os docentes deverão dar aula. Cada docente sabe que turma de alunos deverá assistir às suas aulas como, por exemplo, alunos do terceiro período de Engenharia Mecânica, ou alunos do primeiro período de Computação, etc. Os alunos de cada turma permanecem na mesma sala em todas as aulas. O importante é que todas as salas em que um docente dá aulas fiquem em posições adjacentes. Nem sempre é possível satisfazer os requisitos dos docentes. Se, por exemplo, um docente dá aulas para o terceiro semestre de Matemática e primeiro semestre de Computação, um segundo dá aulas para o primeiro semestre de Computação e segundo período de Engenharia Elétrica e um terceiro professor dá aulas para os alunos do segundo período de Engenharia Elétrica e terceiro semestre de Matemática, claramente não é possível satisfazer os três professores. Sua tarefa é ajudar o responsável pela alocação das salas, e determinar se é possível satisfazer todos os requisitos dos docentes.",
        "titulo": "Escalonamento de Salas de Aula",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Na primeira linha de cada instância é dado o número de turmas T (1 < T < 103), numeradas de 1 a T, e o número de docentes D (1 < D < 103). Nas D linhas seguintes são dados o número K (0 < K < T) de turmas em que o docente correspondente dá aulas seguido pelas identificações destas turmas em ordem crescente."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1617",
        "saida": "Para cada caso de teste, a saída deverá ser uma linha contendo um único inteiro – o número de minutos que o caminhão precisará para ir de DeTI até DeOT e voltar. (Considere que o tempo que o caminhão fique em DeOT seja desprezível). Se não houver solução, escreva “Pernoite.”.",
        "descricao": "Você, um Tenente especializado em computação, foi designado para ajudar o Coronel Rambo que por ser italiano, prefere ser chamado de Ramboni. Ramboni é o bravo comandante das tropas aliadas, que luta para manter a ordem na região das Algarias. Para executar as missões, as tropas precisam se alimentar bem e com regularidade. Para isso, diariamente um caminhão sai do quartel, na cidade DeTI e viaja alguns quilômetros passando por várias cidades até chegar ao destino, na cidade DeOT, onde tem comida farta. Entretanto, nos últimos dias, começaram a ocorrer ataques ao caminhão para roubar o carregamento. Diante deste cenário crítico, o Coronel Ramboni elaborou um plano. O caminhão deveria ir por um caminho e voltar por outro caminho totalmente diferente do caminho de ida. Sendo que o caminhão não pode passar pela mesma rodovia/estrada duas vezes. Caso não seja possível essa possibilidade, o caminhão deve ficar no destino para voltar apenas no outro dia. O incansável Coronel Ramboni pediu uma coisinha a mais: temos que ser rápidos, pois a tropa não pode ficar com fome.",
        "titulo": "Caminho Seguro",
        "entrada": "A entrada conterá vários casos de testes. Cada caso de teste iniciará com um inteiro N (2 ≤ N ≤ 100) indicando o número de cidades. DeTI é a cidade de número 1, e a DeOT é a cidade N. A próxima linha conterá um inteiro M representando o número de estradas/rodovias. As próximas M linhas descreverão as M estradas/rodovias. Cada linha conterá 3 inteiros, ou seja, as duas cidades conectados por uma estrada/rodovia e o tempo necessário para percorrer a distância entre elas (em minutos). Nenhuma estrada/rodovia levará mais do que 1000m ou menos que 1m. Cada estrada/rodovia se conectará a duas diferentes cidades. Nenhum par de cidades será diretamente conectado por mais do que uma estrada/rodovia. O último caso de teste será seguido por uma linha contendo o número 0."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "2128",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima sim se existe uma atribuição de construções de rodovias que atenda as exigências descritas acima, caso contrário imprima nao. Após cada instância imprima uma linha em branco.",
        "descricao": "Com o grande número de imigrantes argentinos no Canadá, o governo canadense está criando novas rodovias para as regiões mais distantes e isoladas habitadas por argentinos. Foram feitas diversas licitações para descobrir quais empresas poderiam conduzir as obras de cada rodovia. Cada empresa divulgou os orçamentos para as rodovias que ela poderia construir. Os canadenses são conhecidos pela intolerância à corrupção e querem a qualquer custo evitar que alguma empresa seja beneficiada acima das outras. Então decidiram que cada empresa pode ser contratada para fazer no máximo uma das rodovias. Dá para perceber que no Brasil as coisas funcionam da mesma forma. (Mas não vamos entrar neste mérito!) Entre duas cidades apenas uma empresa pode ter sido escolhida para construir uma rodovia. Sua tarefa é: Dado um conjunto de orçamentos para construção das rodovias que ligam as cidades decida se existe uma maneira de atribuir as construções para as empresas, atendendo a exigência do governo canadense, e que seja possível viajar de qualquer cidade para qualquer outra usando as rodovias construídas.",
        "titulo": "Demonstração de Honestidade!",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em três inteiros n (1 ≤ n ≤ 100), m (1 ≤ 10000) e k (1 ≤ k ≤ 2n) que indicam o número de cidades, número de orçamentos e o número de empresas. As próximas m linhas contém três inteiros u (1 ≤ u ≤ n), v (1 ≤ v ≤ n) e c (1 ≤ c ≤ k) indicando que a empresa c pode construir uma rodovia que liga a cidade u à cidade v. As instâncias são separadas por uma linha em branco. A entrada termina com final de arquivo."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1668",
        "saida": "Para cada caso de teste, escreva uma linha contendo a frequência de acesso para cada nó em ordem crescente de valores dos nós. Para evitar problemas de precisão, as frequências devem ser escritas como números inteiros, significando que a probabilidade de acesso de um nó será a frequência dividida pela soma de todas as frequências. Certifique-se que você não escreverá qualquer inteiro maior que 263 - 1 (o valor máximo que cabe no tipo long long para C/C++ ou long para Java). Caso contrário, você poderá produzir uma solução qualquer sem a garantia de que é exatamente uma árvore binária de busca ótima: a árvore binária de busca dada na entrada.",
        "descricao": "Preparar um problema para uma competição de programação leva muito tempo. Você não somente tem que escrever a descrição e a solução de um problema, mas você também tem que criar arquivos de entrada difíceis. Nesse problema, você terá a chance de ajudar o autor de problemas a criar algumas entradas para um determinado problema. Para isso vamos selecionar o problema que não foi resolvido durante uma competição local no ano passado. O problema era encontrar a árvore binária de busca ótima, dado a probabilidade de que certos nós são acessados. Seu trabalho será: dado a árvore binária de busca ótima desejada, descubra algumas probabilidades de acesso para que esta seja a única e melhor árvore. Não se preocupe se você não leu o problema no ano passado, pois todas as definições exigidas foram colocadas abaixo. Vamos definir uma árvore binária de busca indutivamente da seguinte forma: Uma árvore vazia que não possui nenhum nó é uma árvore binária de busca; Cada árvore binária de busca não vazia possui uma raiz, que é um nó identificado por um inteiro e duas sub-árvores uma a direita e outra a esquerda da raiz; A sub-árvore da esquerda não contém nenhum nó com rótulo ≥ que o rótulo da raiz; A sub-árvore da direira não contém nenhum nó com rótulo ≤ que o rótulo da raiz. Dado tal árvore de busca binária, o seguinte procedimento de busca pode ser usado para localizar um nó na árvore: Começe com a raiz. Compare o rótulo do nó atual com o rótulo do nó desejado. Se forem iguais, você encontrou o nó correto. Caso contrário, se o rótulo desejado for menor busqye na sub-árvore da esquerda, senão, busca na sub-árvore da direita. O custo de acesso para localizar um nó é o número de nós que você visitou até encontrar o nó certo. Uma árvore binária de busca ótima é uma árvore com o mínimo custo esperado.",
        "titulo": "Ajude o Autor do Problema",
        "entrada": "O entrada contém vários casos de teste. Cada caso inicia com um inteiro n (1 ≤ n ≤ 50), que é o número de nós de uma árvore binária de busca ótima. Para simplificar, os valores dos nós serão inteiros de 1 a n. A seguir temos n linhas que descrevem a estrutura da árvore. A i-ésima linha contém os valores dos nós da sub-árvore esquerda e direita com valor i (ou -1 para uma árvore vazia). Você pode assumir que a entrada sempre conterá uma árvore binária de busca válida. O último caso é seguido por um zero. Note que o primeiro caso de teste no exemplo de entrada descreve uma árvore parecida com:    2  /  \\ 1    3"
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1317",
        "saida": "Para cada caso de teste seu programa deverá exibir uma lista de nomes seguida dos atributos que adquiriram. Seu programa deve escrever os nomes das pessoas na ordem em que aparecerem na entrada, seguido de ‘:’ e de um espaço, seguido de seus atributos de acordo com os SPAM que enviaram. Os atributos devem ser escritos na ordem que apareceram na entrada; cada atributo deve ser seguido de espaço.",
        "descricao": "Hoje em dia, infelizmente, mensagens de SPAM estão ficando mais e mais comuns. Algumas delas têm efeito de multiplicação, já que pedem que repasses para teus amigos. Algumas mensagens de SPAM desejam boa sorte, outras, prometem que tornar-se-á rico, e outras apenas lhe lembram o quão importante é contar a seus amigos o quanto você se importa com suas amizades. Eis um exemplo de SPAM:    De: Alice    Para: Bob, Mary, Julia, Paul    Olá, este é um e-mail de boa sorte. Desejo que se torne milionário, mas    isso depende de você. Se você:    * mandar esse e-mail para 10 pessoas você se ficará milionário    * mandar esse e-mail para 5 ou mais pessoas você ficará rico    * mandar esse e-mail para menos de 5 pessoas você será pobre    Como eu disse, depende de você. Escreve seu e-mail e seja rico! :-)    Alice Pessoas normalmente reagem de dois modos diferentes quando recebem SPAM: Eles descartam a mensagem imediatamente sem ao menos lê-la (eles odeiam SPAM); Eles encaminham a mensagem para todos que conhecem (eles amam SPAM). Para esse problema, nós assumiremos que todos amam SPAM, mas ninguém manda a mesma mensagem duas vezes. Cada mensagem de SPAM tem um efeito baseado no número de amigos que você manda as mensagens. Por exemplo: uma mensagem de SPAM poderá lhe dizer que ficarás pobre se mandares a mensagem para 5 amigos, mas serás rico se mandares para 10, e serás o mais rico do mundo se mandares para 20 amigos, e assim vai. Consideraremos apenas as mensagens de SPAM similares ao exemplo acima. Mais especificamente, uma mensagem de SPAM definirá dois valores limiares T1 e T2 e três atribuidores A1, A2 e A3. Uma pessoa adquire um dos três valores dependendo do número de mensagens enviadas para aquele SPAM específico. Se a pessoa encaminha T mensagens e T < T1 então o atributo dele/dela é A1, se T1 ≤ T < T2 então o atributo dele/dela é A2, caso contrário o atributo dela é A3. Lhe será dado os nomes de um grupo de pessoas, e para cada pessoa do grupo, um conjunto de amigos que ele/ela conhece o endereço de e-mail. Lhe será dado um conjunto distinto de mensagens de SPAM, e para cada mensagem de SPAM ela limita valores e atributos, e a informação sobre cada pessoa que iniciou a proliferação do SPAM. Você tem que escrever um programa que determine, para cada pessoa no grupo dado, quais atributos ele/ela adquiriu, baseado no SPAM encaminhado. Você assumirá que o originador do SPAM tenha pelo menos um amigo (em outras palavras, ele/ela enviará pelo menos uma mensagem), e a pessoa não mandará para si mesma.",
        "titulo": "Eu Odeio SPAM, Mas Algumas Pessoas Amam",
        "entrada": "Seu programa deverá processar vários casos de teste. A primeira linha do caso de teste contém um inteiro N indicando o número de pessoas no grupo (2 ≤ N ≤ 20). Na entrada a pessoa é identificada por um inteiro de 1 a N. As N linhas seguintes contêm cada, uma lista de amigos de cada pessoa (a linha i contém a lista de amigos da pessoa i). A lista de amigos da pessoa i descreve os amigos que a pessoa i conhece o endereço de e-mail, e consiste de uma lista de inteiros Fi (1 ≤ Fi ≤ N, Fi ≠ i) terminada pelo valor 0 (zero). Seguindo a lista de amigos vem a descrição das mensagens de SPAM (terá no máximo 100 mensagens). Cada descrição aparece em uma linha diferente. A descrição consiste de um inteiro P identificando a pessoa originadora do SPAM (2 ≤ P ≤ N); dois inteiros T1 e T2 representando os valores limites; e os três atributos A1, A2 e A3 (cada atributo é uma palavra de não mais que vinte letras). A lista de SPAM acaba com uma linha contendo apenas o valor 0 (zero). As N linhas contém cada, um nome, que é uma palavra apenas, com não mais que vinte letras. O nome na linha de i é o nome da pessoa número i. O fim da entrada é indicado por N = 0."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1053",
        "saida": "Para cada caso, imprima o número do caso de teste seguido pela quantidade total de tinta requerida com 2 dígitos depois do ponto decimal. Se as linhas não podem ser desenhadas sem que se levante a caneta, imprima o número do caso de teste seguido de “~ x (“, conforme exemplo abaixo (caso 2).",
        "descricao": "Uma tarefa simples! Você receberá os pontos finais de alguns segmentos de linha. Basta desenhá-los! Está achando muito fácil, certo? Você decide desafiar a si mesmo e, portanto, adicionar algumas restrições. 1] Iniciar a partir do ponto final de qualquer segmento de linha. 2] Não levante a caneta do papel. 3] Você pode passar por cima de uma linha de mais de uma vez. 4] Não desenhar qualquer outra linha além das citadas. 5] Você só pode mudar de direção em coordenadas inteiras de x e y. 6] Use a menor quantidade de tinta necessária. Você precisa de uma unidade de tinta para desenhar uma unidade de linha. As distâncias entre os pontos sucessivos são: 1 unidade. Portanto Distância (A1 até B1) = 1 unidade and Distância (A1 até A2) = 1 unidade.",
        "titulo": "Desenho Contínuo",
        "entrada": "A primeira linha de entrada é um inteiro T(T<20) que indica o número total de casos de teste. Cada caso inicia com um inteiro N (N<10). Então N linhas vem a seguir, cada uma descrevendo um segmento de linha. Um segmento de linha é definido por dois pontos Y   1   X  1    Y 2 X2  . Y1 e  Y2 estarão no intervalo [A,E]. X1 e X2 estarão no intervalo [1,5]. O  primeiro exemplo é mostrado na figura acima. Portanto, olhe para o exemplo para compreender o formato exato."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1628",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único inteiro representando o número máximo de movimentos que o jogador deve fazer para xecar o rei usando uma só peça e se livrar de virar a dose de tequila. Se o número não for finito, imprima “INF” (sem as aspas).",
        "descricao": "Um novo jogo virou a maior sensação na Nlogônia. Batizado de ChessGuess, este jogo baseado no xadrez é definido pelas seguintes regras, as quais compõem o Manifesto do ChessGuess: O ChessGuess pode ser jogado por qualquer número de jogadores maior que 1, sendo um deles escolhido pelo grupo para ser o dealer. Em cada rodada, o dealer prepara um tabuleiro de xadrez com qualquer número positivo de peças brancas e um único rei preto, desde que nenhum rei branco seja colocado no tabuleiro. O número de peças de cada tipo não é limitado como no xadrez tradicional, ou seja, podem ser colocados, por exemplo, 63 peões brancos e 1 rei preto sem problemas. Após preparar o tabuleiro duma rodada, o dealer escolhe um dos demais jogadores, de modo que cada jogador, à exceção do próprio dealer, seja escolhido exatamente uma vez. O jogador escolhido deve, então, escolher uma única peça branca e movê-la tantas vezes quantas achar necessário para pôr o rei preto em xeque. Os movimentos das peças obedecem aos movimentos do xadrez tradicional, com a única exceção de que ao peão não é permitido andar duas casas para frente em seu primeiro movimento. Se o jogador for capaz de adivinhar uma escolha ótima, que põe o rei em xeque com o número mínimo de movimentos usando uma só peça, o dealer deve virar uma dose de tequila. Do contrário, quem vira a dose de tequila é o jogador. No exemplo da Figura, 1 é o número máximo de movimentos que o jogador deve fazer para xecar o rei usando uma só peça e se livrar de virar a dose de tequila. Um problema, porém, está comprometendo o sucesso do novo jogo. Conforme avança a brincadeira, as pessoas vão ficando bastante bêbadas, especialmente o dealer, que já não consegue mais decidir se a escolha feita pelo jogador é ótima ou não. Portanto, a Federação e Associação do ChessGuess Ecológico (FACE) precisa de um programa que, dada a configuração inicial do tabuleiro montada pelo dealer, calcula o número máximo de movimentos que o jogador deve fazer para embebedar o dealer ainda mais.",
        "titulo": "ChessGuess",
        "entrada": "A entrada é composta por vários casos de teste, sendo cada caso de teste composto por 3 linhas. Na primeira linha figura um único inteiro positivo N, o qual representa o número de peças brancas que o dealer pôs no tabuleiro. A segunda linha descreve as N peças brancas, seguindo a Notação Algébrica¹ do Xadrez. A terceira linha, por fim, indica a posição do rei preto. A entrada é finalizada quando N = 0."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2038",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um número inteiro, representando o lucro máximo que a GigaFarma pode obter a partir de uma cadeia de DNA produzível e alienígena. Se nenhum lucro é positivo, você deve imprimir o valor 0. Se o lucro pode ser arbitrariamente grande, você deve imprimir um asterisco '*'.",
        "descricao": "GigaFarma é uma das maiores empresas farmacêuticas do mundo, e está atualmente conduzindo experimentos usando DNA alienígena. Seu objetivo é produzir uma cadeia de DNA alienígena que irá resultar no maior lucro possível quando comercializado. Uma cadeia de DNA estranho pode ser entendida como uma sequência não vazia de genes ligados, e por sua vez, cada gene é uma sequência não vazia de bases. Devido ao fato que nem todas as sequências possíveis de bases corresponde a um gene válido, a GigaFarma criou um catálogo de genes que aparecem no DNA alienígena, que são as únicas consideradas sequências válidas de bases. Cada um destes genes tem um valor de acordo com a sua funcionalidade, e uma dada cadeia de DNA alienígena tem um valor de mercado que é a soma dos valores dos genes que o compõem. Vamos representar as diferentes bases com letras minúsculas, 'a' - 'z', e as ligações usando um hífen \"-\". No exemplo a seguir, podemos ver na esquerda uma possível lista de genes e seus valores correspondentes; à direita há algumas cadeias de DNA alienígena que podem ser formados com esses genes, juntamente com os seus correspondentes valores de mercado. GigaFarma só pode produzir cadeias de DNA muito específicas, que chamamos de produzível. Estas cadeias são uma sequência não vazia de partes de DNA que a empresa pode sintetizar, unidas sem quaisquer ligações adicionais entre eles. Cada parte é uma sequência de bases e conexões que contenham pelo menos uma conexão, mas sem quaisquer ligações consecutivas, iniciais ou finais. Cada parte tem um custo, determinado pela dificuldade associada com a sua produção, de modo que cada cadeia produzível de DNA tem um custo de produção que é a soma dos custos de cada uma das partes que o compõem. No exemplo a seguir, podemos ver na esquerda uma lista de partes de DNA e os seus custos; do lado direito, temos algumas cadeias produzíveis de DNA que podem ser formadas com essas partes, juntamente com os seus custos de produção. Note que pode haver várias maneiras de formar uma mesma cadeia produzível usando diferentes partes. Este é o caso de \"como-como-les\" no exemplo, que pode ser obtido usando porções \"como-co\" e \"mo-les\" com um custo de produção de 7, ou simplesmente usando \"como-como-les\" com um custo de produção de 12. É claro que, quando existe mais de uma maneira de sintetizar uma determinada cadeia produzível de DNA, GigaFarma sempre faz usando o processo mais barato possível. Claramente, o conjunto de cadeias de DNA alienígena é infinito, assim como o conjunto de cadeias de DNA produzíveis. No entanto, a GigaFarma não está interessada em nenhum destes conjuntos, mas na sua intersecção. Se verificar os exemplos anteriores, podemos ver que \"como-les\" é uma cadeia de DNA alienígena válida, mas não é produzível, \"mo-les\" é produzível, mas não é uma cadeia de DNA alienígena, e \"como-como-les\" é produzível e uma cadeia de DNA alienígena. Para cada cadeia de DNA alienígena e produzível, a empresa pode comercializar essa cadeia para obter um lucro que equivale ao valor dessa cadeia menos o seu custo de produção do mercado. É claro que, se este lucro não é positivo, a cadeia correspondente nunca será produzida. Por existir muito material genético em todo o lugar, GigaFarma pagaria qualquer coisa para saber o lucro máximo que ela pode obter por algumas cadeias de DNA produzível e alienígena.",
        "titulo": "Gerando DNA Alienígena",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois números inteiros G e P, representando o número de genes no catálogo e o número de partes que a GigaFarma pode produzir (1 ≤ L, P ≤ 100). Cada uma das seguintes G linhas descrevem um gene diferente, usando uma string S e um número inteiro V. A string S tem entre 1 e 10 caracteres, e é formada exclusivamente por letras minúsculas representando as bases que formam este gene; o número inteiro V representa o valor desse gene (1 ≤ V ≤ 1000). Cada uma das P linhas seguintes descrevem uma parte diferente do DNA, usando uma string T e um inteiro C. A string T tem entre 1 e 30 caracteres, e é composta de apenas letras minúsculas e hifens, respectivamente representando as bases e as conexões nesta parte. T contém pelo menos uma conexão, mas nunca terá conexões iniciais, finais ou consecutivos. O inteiro C representa o custo de produção para a parte correspondente (1 ≤ C ≤ 1000). Note que em todos os casos de teste, todos os genes são diferentes um dos outros, e todas as partes também são diferentes uma da outra. O fim da entrada é indicado por uma linha que contém duas vezes o número -1."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1427",
        "saida": "Para cada rota de cada caso de teste, você deve produzir uma ou duas linhas de saída. Se existe uma rota entre as localizações solicitadas, você deve produzir duas linhas: uma contendo o custo mínimo da viagem e outra contendo a rota utilizada. As linhas devem ser impressas no seguinte formato (sem aspas): \"Mr to go from to , you will receive euros\" \"Path: \" Se não há uma rota possível entre as localizações de origem e destino, você deve produzir uma linha, no seguinte formato (sem aspas): \"Sorry Mr you can not go from to \" Se houver dois caminhos minimos possiveis entre A e B e os dois tem vertices intermediarios, a preferencia é do caminho que aparece antes na entrada, por exemplo: Se as cidades da entrada forem: A B C D E F, o caminho \"A C D B\" tem mais prioridade que o caminho \"A E B\" (pois E aparece depois que D) e o caminho \"A D E B\" tem mais prioridade sobre \"A C F B\" (pois F aparece depois que E). A analise é feita olhando-se a ordem de entrada dos vértices intermediários.",
        "descricao": "A empresa de entregas Scrooge Co. quer estabelecer um sistema para pagar a menor quantia necessária de dinheiro a seus empregados durante suas entregas. A empresa sabe qual é a quantia mínima de dinheiro necessária para ir diretamente de uma localização até outra. A empresa pediu para você escrever um programa que compute a menor quantia de dinheiro que um empregado deve receber para poder ir de uma localização até outra, e a rota que ele deve usar.",
        "titulo": "O Problema da Scrooge Co.",
        "entrada": "A entrada começa com uma linha contendo um inteiro C (1 ≤ C ≤ 99), indicando o número de casos de testes. Cada caso de teste é descrito a seguir. A primeira linha de um caso de teste contém um inteiro P (1 ≤ P ≤ 99), indicando o número de localizações existentes. A segunda linha contém os nomes das localizações, separados por um TAB. Cada nome tem no máximo 20 caracteres.  As próximas P linhas contém os custos para ir de uma localização diretamente para outra, também separados por TAB. A primeira destas linhas contém os custos para ir diretamente da primeira localização para todas as outras; a segunda linha contém os custos para ir da segunda localização para todas as outras; e assim por diante. Um custo é dado por um inteiro W (-1 ≤ W ≤ 300), onde W = -1 indica que a viagem direta entre as localizações é muito cara e não pode ser realizada, e W = 0 indica o custo para ir diretamente de uma localização a ela mesma.  Depois das P linhas, há uma linha contendo um inteiro R (1 ≤ R ≤ 99), indicando o número de rotas a serem consideradas. As próximas R linhas contém cada uma o nome de um funcionário e o nome das localizações de origem e destino de sua entrega. Os nomes das localizações diferenciam maiúsculas e minúsculas (case sensitive), e o nome do funcionário tem no máximo 30 caracteres."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1552",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma linha contendo o valor com precisão de duas casas decimais correspondente ao comprimento mínimo de teia, em metros, necessário para se conectarem todas as pessoas do grupo. Atente para que o separador das casas decimais seja . (ponto), não , (vírgula).",
        "descricao": "Ó, meu Deus! Um grupo de pessoas está caindo em queda livre! Elas saltaram todas exatamente ao mesmo tempo de vários aviões que estavam exatamente à mesma altura. A intenção era realizar o maior e mais belo salto sincronizado da História. No entanto, o malévolo Loki, para se deleitar com a insignificância humana, sabotara os paraquedas, e agora a única esperança está numa ação conjunta do Homem-Aranha com o Homem-de-Ferro. Como ambos são muito nerds, notaram que as pessoas estavam caindo todas num mesmo plano paralelo ao solo, a despeito da resistência do ar e de outros fatores. Então, bolaram um plano infalível. Primeiro, o aracnídeo unirá todas as pessoas através de cabos de teia entre elas. Uma vez que não haja pessoa que não esteja conectada ao grupo, o playboy poderá eletromagnetizar o grupo todo e, segurando na mão de uma apenas das pessoas do grupo, pousar todas elas em segurança. Mas não há muito tempo para divagações. O Homem-Aranha precisa agir rápido, o que no caso dele significa gastar o mínimo possível de teia. Para tanto, o Homem-de-Ferro em seu screen projetou numa malha cartesiana o plano em que as pessoas estão, usando o centímetro como unidade de medida, e obteve as coordenadas de cada pessoa na malha. Agora, J.A.R.V.I.S. está computando qual o mínimo necessário de teia de que o Homem-Aranha precisará. Dependendo da resposta, o Homem-de-Ferro não esperará pelo garoto e improvisará alguma outra peripécia.",
        "titulo": "Resgate em Queda Livre",
        "entrada": "A entrada é constituída por vários casos de teste. A primeira linha de entrada contém um inteiro C que determina a quantidade de casos de teste. Cada caso de teste começa com um inteiro positivo n (n ≤ 500), o qual representa o número de pessoas no grupo. Seguem, então, n linhas, cada uma designando uma pessoa do grupo pelas suas coordenadas x e y na malha (0 ≤ x, y ≤ 104)."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1550",
        "saida": "Para cada caso de teste, o programa deve imprimir um inteiro indicando o número mínimo de apertos de botão para que o número do visor passe de A para B.",
        "descricao": "Pedro é um garoto curioso que gostava de eletrônica. Certo dia, o menino estava mexendo no laboratório de sua escola e encontrou uma caixa cheia de pequenos aparelhos eletrônicos feitos por outros alunos em anos anteriores. Dentro dessa caixa havia um aparelho que possuía apenas um visor e dois botões. Esse visor apresentava um número inteiro. Mexendo nos botões, Pedro descobriu para que servia cada um deles. O primeiro botão adicionava uma unidade ao número no visor. O segundo botão invertia os dígitos do número, por exemplo, 123 invertido resulta em 321 e 150 invertido resulta em 51 (ignora-se os zeros a esquerda). Inicialmente, o visor apresentava o número A. Após a descoberta da função dos botões, Pedro quer saber como fazer o número do visor mudar de A para um número maior igual a B. O seu trabalho nesse problema é ajudar Pedro a descobrir qual é o número mínimo de apertos de botão para que o número no visor passe a ser igual a B.",
        "titulo": "Inversão",
        "entrada": "A entrada é iniciada por um inteiro T, 0 < T ≤ 500, que indica a quantidade de casos de teste a ser processados. Segue-se T linhas cada uma contendo dois inteiros A e B, 0 < A < B < 10000, indicando respectivamente o número inicial no visor e o número que deve ser mostrado no visor depois de apertar os botões."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1100",
        "saida": "para cada caso de teste imprima uma linha dizendo \"To get from xx to yy takes n knight moves.\". No caso xx é a origem, yy é o destino e n é a quantidade de movimentos necessários para ir de xx  até yy.",
        "descricao": "Pedro está fazendo uma pesquisa sobre o problema do movimento do cavalo em um tabuleiro de xadrez e incumbiu você da tarefa de encontrar o menor conjunto de movimentos possíveis, podendo sair de qualquer quadrado a e podendo chegar em qualquer quadrado b dentro do tabuleiro, sendo que a e b são quadrados diferentes. Ele pensa que a parte mais difícil do problema é determinar o menor número de movimentos do cavalo entre 2 quadrados fornecidos e que uma vez que você está comprometido com esta tarefa, encontrar a sequência de movimentos entre estes 2 quadrados será uma tarefa muito fácil. É claro que você sabe que o movimento é vice versa. Portanto você deve fornecer a Pedro um programa que resolva esta questão. Seu trabalho então será escrever um programa que, pegando dois quadrados a e b como entrada, determine o número de movimentos para encontrar a rota mais curta de a até b.",
        "titulo": "Movimentos do Cavalo",
        "entrada": "A entrada contém um ou mais casos de teste. Cada caso de teste consiste de uma linha contendo dois quadrados separados por um espaço. Um quadrado será uma string consistindo de uma letra (a-h) representando a coluna e um dígito (1-8) representando a linha do tabuleiro de xadrez (veja figura acima)."
    },
    {
        "nivel": "2",
        "assunto": "7",
        "numero": "2046",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia H em que H é um número inteiro, seqüencial e crescente a partir de 1. Nas L linhas seguintes, você deve imprimir por qual sede da empresa o pedido correspondente àquela linha foi atendido. Em caso de haver mais de uma sede à mesma distância, dê preferência pela que possuir menor índice de linha. Persistindo o empate, dê preferência pela com menor índice de coluna. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "O Texas é famoso pela sua carne de excelente qualidade. “Steaks” com até dois centímetros de espessura assados em churrasqueiras são a especialidade culinária do estado. Em San Antonio é difícil encontrar entregadores de pizza por telefone, mas é muito comum encontrar “disk steaks”. Você liga para o número e em poucos minutos chega um suculento bife à sua casa, quente e pronto para comer. É claro que tamanha eficiência depende de um complicado sistema de entregas. Há várias sedes da empresa espalhadas pela cidade, e sempre que uma chamada é feita a sede mais próxima é acionada, o steak é assado e o entregador segue com o suculento jantar. Sabemos que San Antonio é uma cidade planejada. Podemos imaginar os cruzamentos da cidade como vértices de uma grade. Por algum motivo obscuro, todas as sedes estão instaladas em cruzamentos. Sua tarefa é ajudar a empresa na entrega dos steaks.",
        "titulo": "Entregadores de Steak",
        "entrada": "São dadas várias instâncias. Para cada instância são dadas as dimensões 0 ≤ M, N ≤ 1000 da cidade (será uma grade com M linhas e N colunas). Um valor N = 0 ou M = 0 indica o fim dos dados. A seguir vem o número 0 < K ≤ 100000 de sedes da empresa. Nas K linhas seguintes vêm as coordenadas das sedes. A seguir, vem o número 0 ≤ L ≤ 100000 de ligações pedindo steaks. Nas L linhas seguintes vêm as coordenadas da posição de cada chamada (que também são vértices da grade)."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1413",
        "saida": "Para cada caso de teste, seu programa deve imprimir apenas uma linha, contendo um número real que representa a penalidade mínima, isto é, a menor soma possível dos tempos levados pelos membros da equipe para chegar a seus respectivos pontos de chegada. Suas respostas devem ser arredondadas a um dígito depois do ponto decimal.",
        "descricao": "Orientação, uma corrida a pé onde os competidores recebem um mapa e uma bússola, é um esporte muito popular em alguns países da Europa. Johnny e seus amigos entraram em uma competição de orientação, e pretendem vencer. Nesta competição, cada membro de uma equipe se veste com uma cor diferente, e inicia a prova em um lugar diferente. Existem alguns pontos de chegada, e cada ponto de chegada tem uma lista de cores que ele \"aceita\". Todo competidor de uma uma equipe deve ir de seu ponto inicial até um dos pontos de chegada que aceitam a sua cor. Nenhum membro de uma equipe pode ir para o mesmo ponto de chegada de outro membro. A penalidade de uma equipe no jogo é igual à soma do tempo que os membros da equipe levam para ir de seus pontos iniciais aos seus pontos finais. Para maximizar as chances de vitória, Johnny e seus companheiros de equipe querem determinar quais são os pontos de chegada mais apropriados para cada membro, assumindo que ele e seus amigos caminham a velocidades possivelmente diferentes. Assim, eles querem determinar um ponto de chegada diferente para cada membro da equipe, de forma que a penalidade da equipe seja minimizada. Você pode assumir que sempre haverá uma resposta válida (isto é, um ponto de chegada diferente para cada membro da equipe).",
        "titulo": "Apresse-se!",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M, representando o número de membros na equipe e o número de pontos de chegada, respectivamente (1 ≤ N ≤ M ≤ 100). As próximas N linhas contém dois inteiros X e Y cada, representando a posição inicial de cada membro (-20000 ≤ X, Y ≤ 20000), e um número real s, representando a velocidade do competidor. Os membros da equipe são identificados pela ordem em que suas posições iniciais são dadas na entrada (o primeiro competidor a aparecer é o número 1, o segundo é o número 2, e assim por diante). Esses mesmos números são utilizados para identificar a cor de cada membro. As próximas M linhas contém dois inteiros X e Y cada que descrevem a posição de um ponto de chegada (-20000 ≤ X, Y ≤ 20000), e a lista de cores Ci que são aceitas pelo ponto (1 ≤ Ci ≤ N); o fim desta lista é indicado por um 0 (zero). O fim da entrada é indicado por N = M = 0."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1988",
        "saida": "Para cada caso de teste, imprima em uma única linha um inteiro que representa o número mínimo de vias aquáticas adicionais que devem ser construídas de modo que cada ilha pertença a pelo menos um circuito turístico.",
        "descricao": "Todo mundo está ciente da existência do bem conhecido arquipélago Nordenskjold, situado no Oceano Ártico e pertencente ao Krasnoyarsk Krai da Rússia. Este arquipélago é constituído por um grupos de ilhas N e M rotas aquáticas entre alguns pares de ilhas. Cada percurso liga um par de ilhas e para cada par, há no máximo um percurso ligando-os. Considerando a popularidade do Archipelago Nordenskjold, autoridades de Krasnoyarsk estão preocupadas com o seu valor turístico. O valor turístico do arquipélago é dado pelo número total de ilhas que pertencem a pelo menos um \"circuito turístico\". Um circuito turístico é um caminho que começa e termina na mesma ilha que visita pelo menos três diferentes ilhas, nunca visita a mesma ilha mais de uma vez e usa apenas as rotas aquáticas para ir de uma ilha para a próxima. Autoridades de Krasnoyarsk quer saber o número mínimo de rotas aquáticas adicionais que devem ser construídas de modo que cada ilha pertença a pelo menos um circuito turístico. Sua tarefa é escrever um programa que responde a esta pergunta.",
        "titulo": "Circuitos Turísticos",
        "entrada": "A entrada contém vários casos de teste. Cada teste é descrito em várias linhas. A primeira linha contém dois números inteiros N e M (3 <= N <= 100, 1 <= M <= 1000) que indicam o número de ilhas e o número de vias aquáticas, respectivamente. Cada ilha é identificada por um número entre 1 e N. Cada uma das M linhas seguintes contém dois inteiros U e V (1 <= U <V <= N), indicando que existe um percurso de ligação aquático ilhas U e V. Pode-se supor que em cada caso de teste existe no máximo um percurso aquático que liga o mesmo par de ilhas. A última linha da entrada contém o número -1 duas vezes e não deve ser processado como um caso de teste."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1447",
        "saida": "Para cada instância, imprima a linha \"Instancia k\", onde k é o número da instância atual. Além disso, imprima a menor quantidade possível de dinheiro que os amigos vão gastar para voltar ao Brasil (que está limitada por 1015). Caso não seja possível escolher um conjunto de voos que levem todos para casa, imprima \"impossivel\". Imprima uma linha em branco após cada instância.",
        "descricao": "Um grupo de amigos resolveu ir à Alemanha para apoiar a seleção brasileira em sua jornada gloriosa rumo ao hexa. Como as passagens aéreas e as estadias eram caras, cada um trouxe uma quantidade de dinheiro que julgou suﬁciente para passar o mês com conforto e voltar para casa sem problemas. Porém, após a bela campanha do Brasil na copa do mundo, o grupo de amigos se viu obrigado a gastar o dinheiro que tinha guardado para as etapas ﬁnais da copa com a famosa cerveja alemã. As consequências de tais atos foram terríveis. Após uma grande bebedeira, todos foram pegos pela polícia local dormindo na rua, e receberam multas pesadíssimas. Além disso, todos perderam suas passagens de volta. Devido a esses contratempos, a viagem de volta ﬁcou ameaçada. De repente, eles descobriram que precisavam voltar para casa gastando a menor quantidade possível de dinheiro. Analisando as rotas aéreas disponíveis, os amigos notaram que em todas as rotas o número de assentos disponíveis nos aviões era sempre o mesmo. Porém, os preços das viagens entre uma cidade e outra eventualmente variavam bastante. Assustados com a possibilidade de não encontrar lugares suﬁciente nos aviões para que todos pudessem voltar e preocupados em gastar a menor quantidade possível de dinheiro, o grupo de amigos resolveu pedir sua ajuda.",
        "titulo": "Back to the Future",
        "entrada": "O problema é composto por várias instâncias. Cada instância começa com uma linha com dois inteiros positivos N (2 ≤ N ≤ 100) e M (1 ≤ M ≤ 5000), onde N é o número de cidades que pertencem às M rotas de voo consideradas. Os amigos querem ir da cidade 1 até a cidade N. Nas próximas M linhas são fornecidos triplas de inteiros A B C descrevendo a rota do avião (A e B) e o preço da passagem aérea por pessoa (C). Os valores de A e B estão entre 1 e n. As rotas são bidirecionais (ou seja, há um voo de A até B e um voo de B até A com preço C) e haverá no máximo uma rota entre duas cidades. Na próxima linha são dados dois inteiros, D e K, onde D é o número de amigos e K é o número de assentos livres em cada voo. Cada rota só pode ser utilizada uma vez."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1711",
        "saida": "Para cada consulta da entrada seu programa deve produzir apenas uma linha, contendo apenas um número inteiro, o comprimento do percurso mínimo que Dona Minhoca deve percorrer dentro da caverna para entrar e sair pelo salão indicado na consulta, sem dar marcha-a-ré. Se não for possível para Dona Minhoca entrar e sair sem dar marcha-a-ré, a linha deve conter o valor −1.",
        "descricao": "Dona Minhoca fica furiosa quando ouve as pessoas dizerem que minhocas são bichos palíndromes, nos quais não é possível distinguir a cabeça do rabo. Que infâmia! Dona Minhoca vive em uma linda caverna, composta de salões e túneis. Cada túnel liga dois salões distintos e pode ser usado nas duas direções. Um “ciclo” na caverna é uma sequência de salões s1, s2, . . . , sn, sn+1 = s1 , tais que s i ≠ si+1 e (si, si+1) é um túnel, para 1 ≤ i ≤ n. A caverna de Dona Minhoca pode conter ciclos, mas cada salão faz parte de no máximo um ciclo da caverna. Os túneis e salões são estreitos, de forma que se uma parte do corpo de Dona Minhoca ocupa um túnel ou salão, não há espaço para Dona Minhoca entrar novamente por esse túnel ou salão. Alguns salões da caverna têm acesso a partir da superfície. Dona Minhoca tem um mapa que descreve a caverna, informando para cada túnel o seu comprimento e quais dois salões o túnel liga. Dona Minhoca também é vaidosa e conhece o seu próprio comprimento. Dona Minhoca quer saber, para os salões que têm acesso à superfície, se é possível entrar na caverna pelo salão, percorrer a menor distância possível dentro da caverna, e sair novamente pelo mesmo salão que entrou, sempre andando para a frente, sem nunca dar marcha-a-ré. Você pode ajudá-la?",
        "titulo": "Dona Minhoca",
        "entrada": "A primeira linha contém dois inteiros S (2 ≤ S ≤ 104 ) e T (1 ≤ T ≤ 2S) representando respectivamente o número de salões e o número de túneis da caverna. Os salões são identificados por inteiros de 1 a S. Cada uma das T linhas seguintes descreve um túnel e contém três inteiros A, B e C (1 ≤ A < B ≤ S; 1 ≤ C ≤ 100), onde A e B representam os salões ligados pelo túnel, e C representa o comprimento do túnel. Um salão é ligado por túneis a no máximo outros 100 salões e cada dois salões são ligados por no máximo um túnel. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 100), que indica o número de consultas. Cada uma das Q linhas seguintes descreve uma consulta, e contém dois inteiros X (1 ≤ X ≤ S) e M (1 ≤ M ≤ 105 ), que indicam respectivamente o salão pelo qual Dona Minhoca quer entrar e o comprimento de Dona Minhoca."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1706",
        "saida": "Para cada caso você deve imprimir Y se for possível o festival acontecer ou N caso contrário.",
        "descricao": "Como acontece em todo réveillon, o reino Doce organizará uma incrível festa da virada. A princesa Bubblegum (PB) pediu para construir diversas torres musicais, com pontes conectando essas. Uma torre musical é uma nova ideia de PB e funciona assim: cada torre pode tocar duas notas musicais A e B. Elas começam com uma nota aleatória (A ou B) e o objetivo é fazer todas as torres tocarem a nota A. Aí que as pontes entram, se você tocar a ponte com uma varinha doce mágica, as notas das duas torres magicais conectadas por essa ponte mudarão. Agora PB não sabe se é possível organizar o festival cumprindo tal objetivo. Ela deu aos heróis Finn e Jake o mapa com as torres musicais, as conexões das pontes e o som inicial de cada torre e perguntou a eles se seria possível organizar tal festival. Como Finn e Jake não sabem muito sobre ciência, eles pediram para você resolver essa tarefa.",
        "titulo": "Pontes Mágicas",
        "entrada": "Terão diversos casos testes. Cada caso teste contém dois inteiros: N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 4000). A próxima linha contém N letras, indicando o som inicial da i-ésima torre. As próximas M linhas, contém dois inteiros a (1 ≤ a) e b (b ≤ N e a != b ), indicando que existe uma ponte conectando a torre a e a torre b. A entrada termina com o final do arquivo."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1499",
        "saida": "Cada caso de teste de entrada imprima uma linha com um número racional representando o tamanho esperado do sistema viário, após a dois reinos se unirem, considerando que todos os caminhos que ligam eles são igualmente possíveis de serem construídos. O resultado deve ser emitido como um número racional com exatamente três dígitos após o decimal ponto, arredondado, caso necessário.",
        "descricao": "Os reinos de Nlogônia e Quadradônia travaram uma longa e terrível guerra que os historiadores a chamaram de Almost Completely Meaningles (ACM), que significa quase completamente sem sentido porque ninguém agora consegue se lembrar por que tudo começou. Quando a guerra ACM finalmente terminou, os dois reinos decidiram reforçar seus laços a fim para evitar mais derramamento de sangue, e por esta razão eles consultaram o Consórcio Internacional para a Prevenção de Conflitos (ICPC). O ICPC recomenda a construção de uma única estrada para ligar uma cidade da Nlogônia com uma cidade em Quadradônia, permitindo, assim, o intercâmbio comercial e cultural entre o dois países. Nlogônia e Quadradônia tem N e Q cidades respectivamente. O sistema viário de cada reino consiste de um conjunto de estradas bidirecionais que unem pares de diferentes cidades no mesmo reino, de tal forma que há um caminho único (ou seja, uma seqüência de estradas consecutivas) que se pode tomar para ir de qualquer cidade de um reino para qualquer outra cidade no mesmo reino. O \"tamanho\" de um tal sistema de estradas é definido como o número máximo de caminhos que se deve tomar a fim de viajar entre quaisquer pares de cidades . Uma vez que o ICPC não especificou quais duas cidades deve ser conectadas pela nova estrada que une os dois reinos, os cidadãos estão preocupados que o tamanho do sistema viário combinado pode ser demasiado grande. Para evitar uma segunda guerra ACM, você gostaria de convencê-los de que este não é o caso e, para isso, você precisa calcular o tamanho esperado deste sistema de estradas, resultando assumindo que todos os caminhos possíveis entre os dois reinos são igualmente propensos de serem construídos.",
        "titulo": "Junte Dois Reinos",
        "entrada": "A entrada contém vários casos de testes e termina com EOF. A primeira linha de cada caso de teste contém dois números inteiros N e Q e representam o número de cidades em cada um dos dois reinos (1 ≤ N, Q ≤ 4 × 104). As cidades em Nlogônia são identificadas com diferentes números inteiros de 1 a N, enquanto as cidades Quadradônia são identificados com diferentes números inteiros de 1 a P. Cada um dos seguinte N - 1 linhas descreve uma estrada em Nlogônia com dois números inteiros distintas A e B, indicando que a estrada liga A cidade com a cidade B (1 ≤ A, B ≤ N). Cada uma das próximas Q-1 linhas descreve uma estrada em Quadradônia com dois inteiros distintos C e D, indicando que a estrada liga cidade C com a cidade D (1 ≤ C, D ≤ Q). O sistema viário de cada reino é construído de tal forma que existe exatamente um caminho apenas entre cada par de cidades do reino."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1461",
        "saida": "Para cada caso de teste, imprima o número de caminhos simétricos ótimos. Imprima o resto da divisão do resultado por 1.000.000.009 .",
        "descricao": "Você tem uma grade de n linhas e n colunas. Cada quadrado da grade contém um dígito, diferente de zero. Você deve ir do quadrado mais acima e mais à esquerda para o quadrado mais abaixo e mais à direita da grade. A cada passo, você pode se mover para o quadrado adjacente que está à esquerda, à direita, acima ou abaixo (você não pode se mover pelas diagonais). Além disso, você não pode passar por um quadrado mais de uma vez. Há ainda uma outra regra: seu caminho deve ser simétrico em relação à linha que conecta o quadrado mais abaixo e mais à esquerda ao quadrado mais acima e mais à direita da grade. A figura abaixo exemplifica um caminho simétrico em uma grade 6 x 6. Sua tarefa é descobrir, dentre todos os caminhos válidos, quantos deles têm a soma mínima de dígitos nos quadrados percorridos.",
        "titulo": "Caminhos Simétricos Ótimos",
        "entrada": "Haverá no máximo 25 casos de teste. Cada caso de teste começa com um inteiro n (2 ≤ n ≤ 100). As próximas n linhas contém n dígitos cada, diferentes de zero (isto é, um número em 1, 2, 3, ..., 9). Esses n2 inteiros são os dígitos na grade. A entrada termina com um caso de teste onde n = 0, que não deve ser processado."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1298",
        "saida": "Para cada caso de teste imprima uma linha com um número inteiro que representa o número mínimo de interruptores de barreira necessárias para reconfigurar o tanque conforme especificado.",
        "descricao": "A fazenda de camarão usa um lago retangular construído como uma grade com linhas 2N e colunas 2N + 1 de células quadradas, para um dado inteiro N. Cada lado da célula tem um metro de comprimento. A lagoa tem exatamente (2N-1) x N barreiras de dois metros de comprimento, usado para isolar temporariamente seções menores dentro da lagoa para criação de diferentes tipos de camarão. As barreiras têm os seus pontos médios fixados precisamente nas coordenadas inteiro (a, b), para todo 0 <a <2N e 0 <b <2N + 1, onde a e b são ímpares, ou pares. ​​Cada barreira pode ser girada em torno do seu ponto central para alterar a configuração do tanque, no entanto, sendo girada, uma barreira muda entre apenas duas posições possíveis, sempre sendo estas posições paralelas aos lados da lagoa, vertical ou horizontal. A parte esquerda da figura abaixo mostra uma configuração de tanque, com N = 3. ​ No final de cada temporada a lagoa é fechada para manutenção e limpeza. Em seguida, deve ser reconfigurada para que uma máquina especial possa varrer o chão da lagoa. A máquina inicia o seu trabalho na célula superior esquerda, e precisa passar por todas as células exatamente uma vez, terminando na célula inferior esquerda. A parte direita da figura mostra uma reconfiguração tal, onde seis barreiras foram trocados. Para este exemplo, porém, quatro chaves de barreira seriam suficientes. Você deve escrever um programa que, dada uma configuração de lagoa, determina o número mínimo de interruptores de barreira necessários para reconfigurar a lagoa, conforme especificado acima. Existe sempre, pelo menos, uma maneira possível para reconfigurar o tanque de acordo com a especificação.",
        "titulo": "Corrija o Labirinto",
        "entrada": "Cada caso de teste consiste de diversas linhas. A primeira linha contém um inteiro N que indica que a lagoa tem 2N linhas 2N + 1 colunas ( 1 ≤ N ≤ 300). Cada uma das próximas 2N - 1 linhas contém uma string de N caracteres descrevendo a orientação das barreiras. Na enésima (i-th) linha, o enésimo (j-th) caractere indicata a orientação da barreira cujo ponto central tem coordenadas (i, 2j - 1) se i for ímpar, ou (i, 2j) caso i for par, para i = 1, 2,..., 2N - 1 e j = 1, 2,..., N. O caracter é a letra maiúscula 'V' se a orientação for vertical ou a letra maiúscula 'H' se ela for horizontal."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1081",
        "saida": "Para cada caso de entrada, deve ser apresentada uma saída que representa a busca em profundidade de todos os nodos,  respeitando a hierarquia e profundidade de cada um deles. O símbolo b  representam um espaço em branco. Veja o exemplo abaixo para ilustrar: bb0-2 pathR(G,2) bbbb2-1 pathR(G,1) bbbb2-4 pathR(G,4) bbbbbb4-1 E assim sucessivamente... Obs.: Há uma linha em branco depois de cada segmento impresso do grafo, inclusive após o último segmento.",
        "descricao": "A rotina PathR é bem conhecida em grafos. É também chamada de dfs ou dfsr. Trata-se de uma busca em profundidade dos nodos do grafo, utilizando backtracking. A tarefa aqui é, dado o grafo de entrada, simplesmente gerar o desenho da hierarquia dos nodos pesquisados. Para isso, é apresentada a rotina PathR abaixo, como apoio.",
        "titulo": "DFSr - Hierarquia de Profundidade",
        "entrada": "A entrada será um arquivo contendo vários casos de teste. A primeira linha do arquivo de entrada contém um inteiro N que indica a quantidade de casos de teste que vem a seguir. Cada um dos N casos de teste contém, na primeira linha, duas informações: V (1 ≤ V ≤ 20) e E (1 ≤ E ≤ 20) que são, respectivamente, a quantidade de Vértices e de Arestas (Edges) do grafo. Seguem  E linhas contendo informações sobre cada uma das arestas do grafo."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1894",
        "saida": "A saída esperada consiste em duas linhas. A primeira linha contém o custo mínimo da árvore. A segunda linha contém a sequência genética do indivíduo de índice (N*2)-1, que sempre é a raiz da árvore.",
        "descricao": "Bino é um naturalista, e viajou para o planeta Binox com o objetivo de estudar a filogenia dos seres desse planeta. Bino conseguiu desenhar as árvores filogenéticas dos seres do planeta Binox, porém ele precisa da sua ajuda para determinar a menor quantidade possível de mudanças evolutivas que ocorreram entre os decendentes diretos na árvore. Computacionalmente, as árvores filogenéticas são representadas por árvores binárias, em que suas folhas representam indivíduos conhecidos e seus nós internos e a raiz representam ancestrais hipotéticos, que geralmente não se possui informações genéticas precisas sobre. Com isso, Bino vai fornecer uma topologia de árvore e o código genético dos indivíduos representados pelas folhas. O código genético dos seres de Binox é representado por uma sequência de letras minúsculas do alfabeto. Como Bino irá fornecer apenas os códigos genéticos dos indivíduos representados pelas folhas, a sua tarefa será inferir os códigos genéticos dos indivíduos representados pelos outros nós. Sua inferência terá que minimizar a quantidade de mudanças entre os códigos dos indivíduos diretamente ligados na árvore. As figuras a seguir apresentam a configuração inicial e duas possíveis configurações finais para a árvore do primeiro caso de teste: Para calcular o custo total da árvore depois de inferida, basta comparar todas as posições do código genético de indivíduos ligados diretamente. Para cada diferença encontrada, o custo é incrementado em um. Por exemplo, para a árvore resposta do primeiro caso de teste:     Custo inicia em 0     Ligação entre 1 (\"ac\") e 4 (\"aa\"): 'c' ≠ 'a' (Custo + 1).     Ligação entre 2 (\"ba\") e 4 (\"aa\"): 'b' ≠ 'a' (Custo + 1).     Ligação entre 3 (\"ab\") e 5 (\"aa\"): 'b' ≠ 'a' (Custo + 1).     Ligação entre 4 (\"aa\") e 5 (\"aa\"): \"aa\" = \"aa\".     Custo total 3. As duas árvores inferidas tem custo total 3. Porém, Bino quer a árvore com menor custo possível e que a raiz tenha o menor valor lexicográfico possível para esse custo. Logo, Bino escolherá a árvore com raiz de código \"aa\". É garantido que todos as indivíduos folhas não tenham filhos e que todos os demais tenham exatamente dois filhos.",
        "titulo": "Filogenia",
        "entrada": "A entrada consiste de múltiplas linhas. A primeira linha contém 2 inteiros N (3 ≤ N ≤ 10000) e L (1 ≤ L ≤ 1000), representando o número de espécies e o comprimento dos códigos. As próximas N linhas contêm as sequências genéticas dos indivíduos das folhas (1, ..., N). As próximas (N-1)*2 linhas contêm dois inteiros A (1 ≤ A ≤ (N*2)-1) e B (1 ≤ B ≤ (N*2)-1) representando que existe uma ligação entre o individuo de índice A e o individuo de índice B."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1950",
        "saida": "Imprima uma linha consistindo de um único valor representando a probabilidade de o robô ter conseguido sair do labirinto em no máximo T2 unidades de tempo contando a partir do início do experimento. A probabilidade deve ser exibida como uma porcentagem com duas casas decimais após o ponto decimal.",
        "descricao": "— Taca-lhe pau, Marco véio! Estas palavras ficaram gravadas para sempre no coração do Dr. Marco Spohn, e é por isso que ele faz tudo com excelência e dedicação. Ultimamente, ele tem trabalhado num sistema operacional que gerencia um robô e um labirinto e que é capaz de fazer o robô encontrar a saída do labirinto. Por enquanto, o projeto está num estágio muito inicial, e na atual versão o robô apenas se move aleatoriamente no labirinto. O labirinto é uma caixa eletrônica cujas posições formam um grid N × M. Cada posição do grid pode estar bloqueada, quando uma parede de borracha está erigida na posição do fundo ao topo da caixa, ou livre. Assumindo que a indexação das linhas e colunas do grid começa em 1, a saída do labirinto se encontra sempre na posição (N, M) e nunca está bloqueada, sendo a única posição não coberta pela tampa da caixa. O robô do Dr. Spohn é esperto e consegue, através de suas câmeras e sensores, saber quais das posições adjacentes à posição em que se encontra estão livres ou bloqueadas. Destarte, a próxima posição para a qual vai é sempre tomada com distribuição uniforme dentre todas as posições livres adjacentes. As adjacências são sempre consideradas apenas nos sentidos horizontal e vertical. Se há posições livres adjacentes, o movimento da posição corrente para a próxima custa uma unidade de tempo constante. Do contrário, o robô fica parado. Ontem o Dr. Spohn fez um experimento interessante. Primeiramente, ele configurou o labirinto deixando algumas posições livres e as outras bloqueadas. Em seguida, pôs o robô numa posição livre qualquer do labirinto, tampou a caixa, programou dois tempos T1 e T2 (T1 < T2) e iniciou o sistema. Uma vez iniciado o sistema, o robô, sem poder ser visto pelo Dr. Spohn, começou a se mover dentro do labirinto conforme descrito acima, até não conseguir mais se mover, até chegar na posição (N, M), ou até o tempo T2 ser excedido e o experimento ser abortado. Após T1 unidades de tempo a partir do início do experimento, o sistema sorteou K posições livres em que não estava o robô e as bloqueou, reportando num visor ao Dr. Spohn quais posições foram bloqueadas. Dados os tempos T1 e T2, a configuração inicial do labirinto e as K posições livres que foram bloqueadas após T1 unidades de tempo, calcule a probabilidade de o robô ter conseguido sair do labirinto em no máximo T2 unidades de tempo contando a partir do início do experimento.",
        "titulo": "Spöhndriger",
        "entrada": "A primeira linha da entrada consiste de quatro inteiros, N, M, T1 e T2 (1 ≤ N, M ≤ 30, 1 ≤ T1 < T2 ≤ 105), os quais representam respectivamente o número de linhas e o número de colunas do grid e os tempos programados no sistema conforme já explanado. As próximas N linhas descrevem a configuração inicial do labirinto e contêm exatamente M caracteres cada, sendo o j-ésimo (1 ≤ j ≤ M) caractere da i-ésima (1 ≤ i ≤ N) linha ., # ou R se a posição (i, j) do grid começou, respectivamente, livre, bloqueada ou contendo o robô. A linha seguinte da entrada consiste de um único inteiro K (0 ≤ K ≤ N × M), o qual representa o número de posições livres que foram bloqueadas T1 unidades de tempo após o início do experimento, e as K últimas linhas da entrada descrevem essas posições, cada uma consistindo de dois inteiros i e j (1 ≤ i ≤ N, 1 ≤ j ≤ M) para designar a posição (i, j)."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "2098",
        "saida": "Imprimir uma única linha contendo um número inteiro que representa a quantidade máxima de tempo, em segundos, que se pode recolher o tesouro, de modo a ser capaz de retornar para o barco sem ser atingido pela névoa mortal. Imprimir o número -1 se for impossível voltar para o barco, mesmo quando se inicia o caminho de volta assim que o tesouro é descoberto.",
        "descricao": "Encontrar os tesouros escondidos há séculos pelos piratas das ilhas do Caribe não é tarefa fácil, mais difícil ainda é viver para contar a história. Isto porque, como todo mundo sabe, os piratas tinham poderes sobrenaturais que eles usavam para amaldiçoar a pessoa que levou o seu tesouro sem autorização. Uma maldição muito comum entre os mais poderosos dos piratas, e para a qual é sempre uma boa ideia estar preparado, é hoje conhecida como a névoa mortal. Sempre que o tesouro de um pirata for encontrado, esta maldição vai fazer com que a névoa venenosa suba do chão até que toda a ilha fique coberta por ela. Qualquer criatura viva que é tocado pela névoa vai morrer instantaneamente, algo especialmente indesejável para quem acabou de encontrar um tesouro. A única maneira de se salvar é, em seguida, retornar para o seu barco, sempre passando por áreas que ainda não foram cobertas pela névoa, e, assim, fugir com a parte do tesouro que pode ter sido resgatada. Neste problema estamos interessados em saber qual é a quantidade máxima de tempo que uma pessoa pode recolher o tesouro e ser capaz de voltar para o barco vivo. Para simplificar o problema, vamos considerar que uma ilha pode ser representada por uma grade com R linhas e C colunas, em que a célula na linha i-th e coluna j-th tem altura Hij acima do nível do mar. Além disso, vamos supor que o tesouro está sempre escondido na célula de linha 1 e coluna 1, porque esta é a mais distante do único lugar onde o barco pode ancorar, que é a célula da linha R e coluna C. A névoa mortal aparece no nível do mar no mesmo instante que o tesouro é encontrado, em seguida, levanta-se em toda a ilha, a uma taxa de uma unidade de altura por segundo, para que depois de t segundos não se pode estar em qualquer célula de altura menor ou igual a t. A fim de voltar para o barco, você pode ir de uma célula para outra somente se elas compartilham um lado, de modo que, se você estiver em uma determinada célula você só pode mover horizontalmente para a célula antes ou depois da mesma linha, ou verticalmente para a célula antes ou depois, na mesma coluna, mas você não pode se mover na diagonal ou cruzar as fronteiras da ilha. Cada um desses movimentos de uma célula para outra leva exatamente um segundo.",
        "titulo": "Ilha do Tesouro",
        "entrada": "A primeira linha contém dois números inteiros R e C, representado, respectivamente, o número de linhas e colunas da grade que representa a ilha, constituído por pelo menos duas células (1 ≤ R, C e R ≤ 500 × C ≥ 2). Cada uma das seguintes R linhas contém C valores. No i-ésimo destas R linhas, o valor j-ésimo é um número inteiro Hij que representa a altura da célula da linha i e coluna j (1 ≤ Hij ≤ 106 para i = 1, ..., R e j = 1, ..., C)."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1466",
        "saida": "Para cada caso de teste de entrada você deverá imprimir a mensagem \"Case n:\", onde n indica o número do caso de teste seguido por uma linha contendo a listagem por nível dos nodos da árvore, conforme o exemplo abaixo. Obs: Não deve haver espaço em branco após o último item de cada linha e há uma linha em branco após cada caso de teste, inclusive após o último. A árvore resultante não terá nodos repetidos e também não terá mais do que 500 níveis.",
        "descricao": "Em uma árvore binária, o percurso por nível é um percurso denominado breadth first search (BFS) ou em português, busca em largura, a qual seria não-recursiva por natureza. Este percurso utiliza uma fila ao invés de pilha para armazenar os próximos 2 nodos que devem ser pesquisados (filho à esquerda e à direita). Esta é a razão pela qual você deve percorrer os nodos na ordem FIFO ao invés da ordem LIFO, obtendo desta forma a recursão. Portanto nossa tarefa aqui, após algumas operações de inserção sobre uma árvore binária de busca (pesquisa), é imprimir o percurso por nível sobre estes nodos. Por exemplo, uma entrada com a sequência de valores inteiros: 8 3 10 14 6 4 13 7 1 resultará na seguinte árvore: Com a saída de uma listagem por nível: 8 3 10 1 6 14 4 7 13.",
        "titulo": "Percurso em Árvore por Nível",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro C (C ≤ 1000), indicando o número de casos de teste que virão a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um inteiro N (1 ≤ N ≤ 500) que indica a quantidade de números que deve compor cada árvore e a segunda linha contém N inteiros distintos e não negativos, separados por um espaço em branco."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1479",
        "saida": "Para cada caso de teste haverá um número não definido de linhas de saída. Sempre que, na entrada, o general requisitar a distância mínima entre a base da operação e um ponto estratégico (letra P), tal distância deve ser impressa em uma linha única. Caso não seja possível chegar a tal ponto estratégico, deve-se imprimir -1. Deve haver uma linha em branco após cada caso de teste.",
        "descricao": "Um bom general de guerra deve tomar decisões rápidas, e ao mesmo tempo ser um bom estrategista. Uma das funções do general é delegar soldados a diversos pontos estratégicos, de modo que o inimigo seja supreendido e derrotado. Há diversos pontos estratégicos no campo de batalha, assim como diversas rotas que interligam esses pontos. O seu campo está, porém, sendo bombardeado, e essas rotas não são tão seguras mais. Uma vez que uma bomba caia em uma rota, tal terreno se torna irregular e a sua travessia se torna impossível. Para contornar tal problema, o general delegou uma nova tarefa a alguns soldados: encontrar novas rotas. O general pediu sua ajuda então para calcular qual o caminho mais curto entre a base da operação e os pontos estratégicos. Você será informado sobre o estado inicial do campo de batalha, com N pontos estratégicos (sendo o ponto 1 a base da operação) e M rotas. Conforme as bombas inutilizam algumas rotas, e outras rotas vão sendo encontradas pelos soldados, você deve atualizar seu cálculo para que o general possa fazer bom uso de tais informações. Boa sorte, o país depende de você.",
        "titulo": "Ajude seu General",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste inicia com dois inteiros, N e M (2 ≤ N ≤ 1000 e 1 ≤ M ≤ 10000), representando, respectivamente, o número de pontos estratégicos e o número de rotas que interligam dois pontos estratégicos. Após, haverão M linhas, cada uma com três inteiros U, V e W (1 ≤ U, V ≤ N e 1 ≤ W ≤ 100) cada, representando que há uma rota que interliga o ponto U ao ponto V, em direção única, com distância W. Haverá então um inteiro Q (1 ≤ Q ≤ 1000), que representa o número de consultas ou atualizações que serão feitas sobre essas rotas. Nas próximas Q linhas haverá uma letra e um determinado número de inteiros. Se a letra digitada for a letra R, haverá em seguida dois inteiros U e V (1 ≤ U, V ≤ N), indicando que a rota que antes interligava o ponto U até o ponto V foi bombardeada. Caso a letra digitada for a letra I, haverá em seguida três inteiros U, V e W (1 ≤ U, V ≤ N e 1 ≤ W ≤ 100), indicando que foi encontrada uma nova rota que interliga o ponto U até o ponto V, com distância W. E caso a letra digitada for a letra P, haverá em seguida um inteiro V (1 ≤ V ≤ N), e você deve informar ao general qual a distância mínima entre a base da operação e o ponto estratégico V. A entrada termina quando N = M = 0."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1782",
        "saida": "Para cada caso imprima “Caso #X:”, onde X é o número do caso atual, iniciando em 1, seguido pelas respostas das Q consultas desse caso de teste, precedidas por um espaço.",
        "descricao": "Guga ganhou um grafo conexo de aniversário, com N nós e N-1 arestas bidirecionais. Cada aresta conecta dois nós e possui um peso. Quando André descobriu a existência do presente de Guga pensou na seguinte brincadeira: Dado um número inteiro X, quantos pares (A,B) (A ≤ B) existem tal que o menor caminho do nó A para o nó B possui todas as arestas com peso menor ou igual a X? Agora Guga e André estão precisando de um programa que responda várias dessas perguntas, para que assim eles possam brincar infinitamente e saber se acertaram a resposta ou não.",
        "titulo": "Honorável Presente",
        "entrada": "A primeira linha da entrada contém um inteiro T (1 ≤ T ≤ 50), o número de casos de teste. A primeira linha de cada caso de teste contém N (1 ≤ N ≤ 10⁵), o número de nós que o grafo de Guga possui. Cada uma das N-1 linhas possui três inteiros A (1 ≤ A ≤ N), B (1 ≤ B ≤ N) e C (1 ≤ C ≤ 10⁶), indicando que existe uma aresta do nó A para o nó B com peso C. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 10⁴), o número de partidas que Guga e André irão jogar. A próxima linha possui Q inteiros Xi (1 ≤ Xi ≤ 10⁶), o maior peso permitido no caminho, como explicado acima."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1362",
        "saida": "Para cada caso teste, imprima uma linha contendo YES se existe pelo menos uma maneira de distribuir as camisetas de tal forma que todo voluntário tenha uma camiseta que lhe serve, ou NO caso contrário.",
        "descricao": "Nosso amigo Victor é instrutor em um programa ambiental voluntário. O chefe de Victor pediu para ele distribuir N camisetas para M voluntários (N é múltiplo de seis, e N ≥ M). Cada voluntário deve receber exatamente uma camiseta (se N ≠ M, algumas camisetas podem sobrar). Há o mesmo número de camisetas disponíveis para cada tamanho de camiseta possível: XXL, XL, L, M, S e XS (siglas em inglês para P, M, G, etc.). Victor tem um pequeno problema: apenas dois tamanhos de camisetas servem para cada voluntário. Você deve escrever um programa que decide se Victor pode distribuir as camisetas de tal forma que todo voluntário tenha uma camiseta que lhe serve.",
        "titulo": "Minha Camiseta Me Serve",
        "entrada": "A primeira linha da entrada contém o número de casos de teste. Para cada caso de teste, há uma linha contendo os números N e M. O número N é múltiplo de seis, 1 ≤ N ≤ 36, e indica o número total de camisetas disponíveis. O número M, 1 ≤ M ≤ 30, indica o número de voluntários, com N ≥ M. As próximas M linhas descrevem os voluntários, um por linha. Cada linha contém dois tamanhos de camiseta possíveis (XXL, XL, L, M, S ou XS) separados por um espaço, indicando quais tamanhos servem para o voluntário."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1698",
        "saida": "Para cada caso de teste, imprima dois números A e B (A < B) indicando os índices das duas estações que deverão ser conectadas pelo sistema de teletransporte para que o número de configurações possíveis seja o maior possível. Em caso de múltiplas respostas possíveis, imprima a lexicograficamente menor.",
        "descricao": "Um grande terremoto destruiu todo o sistema de metrô de São Paulo, porém o Brasil irá ser o anfitrião da Copa do Mundo, de forma que o Governo resolveu tomar duas medidas: A primeira é comprar um sistema de teletransporte entre duas estações de metrô, a segunda é, com a intenção de evitar custos desnecessários, reconstruir algumas rotas de metrô de forma que exista exatamente um caminho entre qualquer par de estações de metrô. Uma configuração é um possível sistema de metrô resultante após as medidas do Governo. Dado o antigo sistema de metrô, determine qual o par de cidades que, se conectadas pelo sistema de teletransporte, geram o número máximo de possíveis configurações.",
        "titulo": "Metrô Brasileiro",
        "entrada": "A entrada consiste de vários casos de teste e termina com final de arquivo (EOF). Na primeira linha de cada caso de teste temos dois inteiros N e M (1 < N <= 12 e N - 1 <= M < N*(N - 1)/2), as próximas M linhas contém inteiros A e B (0 <= A, B <= N - 1), significando que as estações A e B estavam conectadas por uma rota antes do terremoto."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1751",
        "saida": "Apresente uma linha com um inteiro que representa o montante total mínimo de energia necessária para visitar todos os seus amigos a partir do topo da montanha.",
        "descricao": "Quem iria adivinhar? Você escalou a montanha mais alta de sua cidade. Você está tão animado sobre isso que você precisa dizer a todos os seus amigos, e você decidiu começar com aqueles que estão a tentar estar exatamente onde você está neste exato momento. A montanha tem N marcos, e um deles é o topo da montanha, onde você está agora. Cada um de seus amigos que está escalando a montanha está em algum outro local de referência, e você pretende visitar todos eles. Existem trilhas que ligam os pares de pontos de referência, de tal forma que existe exatamente um percurso (isto é, uma sequência de trilhas consecutivas) que vai para baixo a partir do topo da montanha para cada outro ponto de referêmcia. Para visitar dois amigos em duas referências diferentes, você pode ter que descer em algumas trilhas, subir em outras, e descer outras novamente. Descer a montanha é \"fácil\", já que não consome muito sua energia quando você desce por uma trilha. Mas cada vez que você subir uma trilha, você consome uma certa quantidade de energia. Depois de visitar todos os seus amigos, você pode apenas sentar e descansar. Por exemplo, considere a montanha na imagem abaixo, que tem N = 6 pontos de referência. Se seus amigos estão em raferenciais 5 e 2, você pode visitar tanto se você seguir a seqüência de referências 1 ↓ 2 ↑ 1 ↓ 3 ↓ 5, onde a ↓ b significa que você desce uma trilha de uma referência a até uma referência b, e a ↑ b significa que você subir uma trilha de uma referência a até uma referência b. Outra sequência possível é 1 ↓ 3 ↓ 5 ↑ 3 ↑ 1 ↓ 2. Dadas as trilhas entre os pontos de referência, a energia necessária para escalá-los, e os pontos de referência onde seus amigos estão, calcular o montante total mínimo de energia necessária para visitar todos os seus amigos a partir do topo da montanha.",
        "titulo": "Alpinista Intrépido",
        "entrada": "A primeira linha contém dois inteiros N e F (1 ≤ F <N ≤ 105), representando, respectivamente, o número de pontos de referência e o número de seus amigos que estão subindo a montanha. Referenciais são identificados com números inteiros distintos entre 1 e N, sendo 1 o topo da montanha, onde você está inicialmente. Cada uma das próximas N - 1 linhas descreve uma diferente trilha com três números inteiros A, B e C, o que indica que existe uma trilha de A a B, que vai para baixo e requer uma quantidade de energia C para ser escalado (1 ≤ A ≤ N , 2 ≤ B ≤ N, A = B e 1 ≤ C ≤ 100). A próxima linha contém F diferentes inteiros L1, L2,. . . , LF (2 ≤ Li ≤ N para i = 1, 2,.,.,. F), representando os marcos onde seus amigos estão. Você pode assumir que as trilhas entre os marcos são tais que existe exatamente uma rota que vai para baixo a partir do topo da montanha para cada outro referencial."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1952",
        "saida": "Imprima uma linha contendo um único inteiro, o qual represente o número mínimo de movimentos necessários para um cavalo ir da posição (i1, j1, k1) à posição (i2, j2, k2).",
        "descricao": "Caso você ainda não saiba, o estudante Alesom Zorzi, um dos nossos heróis do AKM (time da UFFS que fez 6 balões na Primeira Fase da Maratona de Programação), é enxadrista, tendo inclusive conquistado algumas medalhas em torneios importantes. Das peças do xadrez, uma das peças mais interessantes é o cavalo, a qual pode pular de uma casa de coordenadas (i1, j1) para uma de coordenadas (i2, j2) se e somente se {|i1 - i2|, |j1 - j2|} = {1, 2}. Inspirado na série Star Trek, Alesom desenvolveu sua própria variante do Xadrez 3D, na qual o jogo é composto não de 1, mas de L tabuleiros de dimensões N × M, cada um num nível numerado de 1 a L. A propósito, as linhas de cada nível são numeradas de 1 a N, e as colunas, de 1 a M, de modo que cada posição do jogo pode ser identificado por uma tripla de coordenadas (i, j, k), sendo i o índice da linha, j o índice da coluna e k o índice do nível. Um cavalo nesta variante do Xadrez 3D pode pular de uma casa de coordenadas (i1, j1, k1) para uma de coordenadas (i2, j2, k2) se e somente se {|i1 - i2|, |j1 - j2|, |k1 - k2|} = {0, 1, 2}. A figura ilustra um cavalo na posição (5, 5, 1) de um jogo com 3 níveis de dimensões 8 × 8, destacando suas posições adjacentes.",
        "titulo": "O Cavalo no Xadrez 3D",
        "entrada": "A primeira linha da entrada contém unicamente os inteiros N, M e L (8 ≤ N, M ≤ 100, 3 ≤ L ≤ 100). A segunda linha contém uma tripla de coordenadas (i1, j1, k1), e a terceira linha contém uma tripla de coordenadas (i2, j2, k2) (1 ≤ i1, i2 ≤ N, 1 ≤ j1, j2 ≤ M, 1 ≤ k1, k2 ≤ L)."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1692",
        "saida": "Imprimir se existe, o número máximo de servidores infectados. Caso contrário, você deve imprimir \"Impossible Revenge!\".",
        "descricao": "Uma nova rede universitária é composta por N servidores distribuídos em todo o campus , cada par de servidor é ligado por um caminho único feito de fios e são N - 1 fios ao todo, mas o Departamento de Informática esqueceu de atribuir os servidores para o instituto de matemática. Um estudante de matemática preguiçoso, chamado Curo , está se sentindo ressentido, porque agora ele não pode executar seus programas em uma máquina poderosa. Então , ele decidiu implantar um vírus, feito por ele durante seu tempo livre, porque ele odeia seus cursos de matemática e prefere codificar algo mais divertido, ao invés de escrever números e símbolos intediantes. Curo quer infectar o número máximo de servidores e ter sua vingança contra o departamento de Informática. Ele preparou uma simulação do ataque, mas seu computador não é poderoso o suficiente para executá-lo . Assim, ele precisa de sua ajuda para esta tarefa, mas primeiro você tem que saber como o vírus funciona. Se o vírus infectar um servidor, os servidores adjacentes serão infectados também. Além disso, o programa tem uma variável pseudo-aleatória chamada Kuro-number. No final do processo de infecção, a maior distância entre dois servidores infectados deve ser o Kuro-number. Dada uma rede de computadores e um Kuro-number você deve obter, se existe, o número máximo de servidores infectados, caso contrário, você deve imprimir \"Impossible Revenge!\"",
        "titulo": "Curo Ataque",
        "entrada": "Existem vários testes, a primeira linha de cada teste contém dois inteiros N e K --- Número de servidores na rede e o Kuro-number (2 ≤ K <N ≤ 1000). As próxima N - 1 linhas contém a descrição dos N - 1 fios dessa rede --- Cada linha contém um par (u, v) significa que há uma conexão entre o servidor u e o servidor v (1 ≤ u, v ≤ N)."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "2002",
        "saida": "Para cada caso de teste, imprima o menor custo de mover Rogério até a Casa de Rogério",
        "descricao": "Rogério é um menino bem esperto e malino. Ele gosta de usar seu tempo livre para criar jogos de tabuleiro. O último jogo criado por Rogério foi o \"Casa de Rogério\". Nesse jogo, o tabuleiro tem tamanho NxM. Cada célula do tabuleiro possui um valor inteiro. O Rogério (Personagem do jogo) começa na célula superior esquerda e a casa de Rogério na célula inferior direita. O objetivo do jogo é mover Rogério até a casa com menor custo possível. Cada rodada, você pode mover Rogério para uma das células adjacentes (não é permitido mover Rogério nas diagonais). O custo para mover Rogério de uma célula de valor X para uma célula de valor Y é definido pela função C(X,Y). C(X, Y) = min(X,Y) XOR (min(X,Y)+1) XOR ... XOR max(X,Y). Perceba que se X é igual a Y, C(X,Y) = X. XOR é a operação binária conhecida como \"ou exclusivo\". Para facilitar a entendimento da função C(X,Y), seu código em C++ está apresentado abaixo:",
        "titulo": "Casa de Rogério",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros N (1 ≤ N ≤ 100) e M (1 ≤ M ≤ 100), representando o tamanho do tabuleiro. Em seguida, N linhas, cada uma com M inteiros, representando os valores das células do tabuleiro (o valor de cada célula pode variar de 1 até 1000000000000). A entrada termina com final de arquivo (EOF). E garantido que a resposta pode ser representada por um inteiro de 64 bits com sinal."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2081",
        "saida": "Para cada instância imprima uma linha contendo o número mínimo de movimentos que resolve o problema, ou \"impossivel\" se não for possível resolver o problema com no máximo 50 movimentos.",
        "descricao": "Um dos mais importantes ativistas políticos do mundo foi o Dr. Martin Luther King Jr, cujo discurso mais conhecido foi “I have a dream”. Em 1964, ele recebeu o Nobel da Paz por seu empenho na luta pelo fim do preconceito racial nos Estados Unidos, e pela sua liderança nos movimentos não violentos. Pouco tempo depois de ter recebido o prêmio, Luther King foi assassinado momentos antes de uma marcha no Memphis. Além do empenho na luta política, Luther King gostava de jogar quebra-cabeça. Um dos jogos que ele adorava jogar é o seguinte: são dados dois mapas N-por-M, cada um com um robô. Cada mapa contém um ponto inicial e um final. Algumas “casas” do mapa são cercadas por paredes. Uma casa do mapa pode ser ou não um buraco. Um comando dado (Cima, Baixo, Esquerda, Direita) é executado ao mesmo tempo para ambos os mapas. Os robôs não atravessam as paredes e nem flutuam sobre os buracos. O objetivo é chegar com os dois robôs no ponto final ao mesmo tempo, em até 50 movimentos, se isso for possível. Neste problema, sua tarefa é dados dois mapas N-por-M, determinar o número mínimo de movimentos que resolve o problema.",
        "titulo": "Sonhos, Acredite Neles!",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha da instância possui dois inteiros N e M (1 ≤ N, M ≤ 50), indicando o número de linhas dos mapas e o número de colunas dos mapas, respectivamente. Nas linhas seguintes são dados os dois mapas. Para cada mapa teremos N linhas com M caracteres. O caractere “.” indica uma posição livre; “#” indica uma posição cercada por paredes; “B” indica um buraco; “R” indica a posição inicial do robô e “F” indica a posição final do robô."
    },
    {
        "nivel": "2",
        "assunto": "7",
        "numero": "1790",
        "saida": "Seu programa deve imprimir a quantidade de pontes que não estão contidas em qualquer ciclo.",
        "descricao": "Pedrinho Ritchie mora em um país chamado Grafolândia. As cidades desse país estão interligadas através de pontes. Não existem cidades isoladas e nenhuma ponte é inserida mais de uma vez. Seu professor propôs um desafio: detectar a quantidade de pontes que não estão contidas em qualquer ciclo. Podemos dizer que um ciclo começa e termina na mesma cidade e nenhuma cidade se repete. Pedrinho gosta muito de desafios de programação, mas precisa de sua ajuda para resolver esse problema, será que você consegue ajudá-lo?",
        "titulo": "Detectando Pontes",
        "entrada": "A entrada termina em EOF. Para cada caso de teste, a primeira linha contém dois inteiros positivos C e P que representam respectivamente a quantidade de cidades (2 <= C <= 50) e a quantidade de pontes (1 <= P <= 1250). Seguem-se P linhas onde cada linha contém dois inteiros positivos X e Y (indexados a partir do 1) indicando que há uma ponte interligando as cidades X e Y."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1082",
        "saida": "Para cada caso de teste da entrada, deve ser apresentada uma mensagem Case #n:, onde n indica o número do caso de teste (conforme exemplo abaixo). Segue a listagem dos vértices de cada segmento, um segmento por linha, separados por vírgula (inclusive com uma virgula no final da linha). Finalizando o caso de teste, deve ser apresentada uma mensagem indicando a quantidade de componentes conexos do grafo (em inglês). Todo caso de teste deve ter uma linha em branco no final, inclusive o último caso de teste. Obs: os nodos devem sempre ser apresentados em ordem crescente e se há caminho de a até b significa que há caminho de b até a.",
        "descricao": "Com base nestas três definições: Grafo conexo: Um grafo G(V,A) é conexo se para cada par de nodos u e v existe um caminho entre u e v. Um grafo com apenas um componente é um grafo conexo. Grafo desconexo: Um grafo G(V,A) é desconexo se ele for formado por 2 ou mais componentes conexos. Componente conexo: Componentes conexos de um grafo são os subgrafos conexos deste grafo. O grafo a seguir possui 3 componentes conexos. O primeiro é formado pelos nodos a,b,c. O segundo é formado unicamente pelo nodo d e o terceiro componente é formado pelos nodos e,f. Com base nestes conceitos, onde cada entrada fornecida que tem a identificação de cada um dos vértices, arestas e as ligações entre os vértices através destas arestas,  liste cada um dos componentes conexos que existem no grafo, segundo a entrada fornecida.",
        "titulo": "Componentes Conexos",
        "entrada": "A primeira linha do arquivo de entrada contém um valor inteiro N que representa a quantidade de casos de teste que vem a seguir. Cada caso de teste contém dois valores V e E que são, respectivamente, a quantidade de Vértices e arestas (Edges) do grafo. Seguem E linhas na sequência, cada uma delas representando uma das arestas que ligam tais vértices. Cada vértice é representado por uma letra minúscula do alfabeto ('a'-'z'), ou seja, cada grafo pode ter no máximo 26 vértices. Cada grafo tem no mínimo 1 componente conexo. Obs: Os vértices de cada caso de teste sempre iniciam no 'a'. Isso significa que um caso de teste que tem 3 vértices, tem obrigatoriamente os vértices 'a', 'b' e 'c'."
    }
]