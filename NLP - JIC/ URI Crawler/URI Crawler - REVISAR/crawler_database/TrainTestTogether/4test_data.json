[
    {
        "nivel": "",
        "assunto": "",
        "numero": "1538",
        "saida": "Para cada valor lido, deve ser impresso na tela o elemento na n-ésima posição da sequência alienígena, sempre com uma quebra de linha.",
        "descricao": "Recentemente foi descoberto um planeta intitulado como Gliese 581g. Ele tem apenas três vezes a massa da Terra, e está à 20 anos-luz de distancia, orbitando uma estrela da constelação de Libra conhecida como Gliese 581, uma anã vermelha. Astrônomos da Universidade da Califórnia e da Carnegie Institution de Washington afirmam que o planeta é o primeiro a apresentar potencial real para conter vida. Eles disseram que essa descoberta só foi possível através da análise de antigas escrituras egípcias, remanescentes da biblioteca de Alexandria. Foram encontradas anotações com uma sequencia estranha, que supostamente indicaria as posições dos planetas com vida no universo. Cada elemento é traduzido em coordenadas tridimensionais utilizando um algoritmo extremamente complexo descrito nas anotações, no entanto o algoritmo para cálculo da sequencia se perdeu por causa das páginas queimadas no incêndio da biblioteca. O livro contém apenas os oito primeiros valores dessa sequência, detectada nas páginas legíveis das escrituras, e para conseguir encontrar as outras coordenadas a Universidade da Califórnia lançou um desafio mundial para estudantes de matemática, engenharia e computação. Dados os primeiros elementos da sequência, deve-se escrever um algoritmo capaz de calcular qualquer elemento da série. Os elementos conhecidos são {B, BA, CB, BAA, BCB, CBA, DAB, BAAA}. Acredita-se que seja possível encontrar qualquer elemento da série, cujos elementos parecem estar escritos em um base numérica alienígena.",
        "titulo": "Sequência Alienígena",
        "entrada": "Cada linha de entrada contém um inteiro N (1 ≤ N ≤ 100000), que descreve a posição na sequência alienígena do elemento a ser calculado. A entrada é finalizada quando N = 0."
    },
    {
        "nivel": "6",
        "assunto": "4",
        "numero": "1439",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o número do jogador que ganha a partida.",
        "descricao": "Bora Bora é um jogo de cartas simples para crianças, inventado na Ilha do Pacífico Sul de mesmo nome. Duas ou mais pessoas podem jogar, usando um baralho de cartas normais. As cartas têm os valores normais: Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Dama e Rei. Cada carta tem também um dos quatro naipes: Paus, Ouros, Copas e Espadas. Os jogadores sentam-se em um círculo ao redor da mesa e jogam por turnos. O próximo jogador a jogar pode ser aquele à esquerda (sentido horário) ou o jogador à direita (sentido anti-horário) do jogador atual, dependendo das cartas jogadas, como você verá. No começo, o sentido do jogo é horário. O baralho é embaralhado e é dada a cada jogador uma mão de cartas. O restante do baralho é colocado na mesa, virado para baixo; a essa pilha é dado o nome de pilha de saque. Então a primeira (a mais acima) carta é removida da pilha e colocada na mesa, virada para cima, começando outra pilha, chamada de pilha de descarte. O objetivo do jogo é que um jogador descarte todas suas cartas. Em cada turno, um jogador descarta no máximo uma carta. Uma carta pode ser descartada apenas se ela tem o mesmo valor ou o mesmo naipe da carta que se encontra no topo da pilha de descarte. Um jogador descarta uma carta colocando-a, virada para cima, na pilha de descarte (essa carta se torna a carta do topo). Se um jogador não tiver uma carta passível de ser descartada em seu turno, ele deve sacar uma carta da pilha de saque e adicionar à sua mão; se ele puder descartar essa carta, ele o faz, caso contrário ele não faz mais nada e seu turno acaba. Um jogador sempre descarta a carta mais alta que ele consegue. O valor de uma carta é determinado primeiro pelo valor da carta e então pelo naipe. A ordem dos valores é o valor em si (Ás é o menor e Rei é o maior), e a ordem dos naipes é, do menor para o maior, Paus, Ouros, Copas e Espadas. Portanto, a carta de maior valor é o Rei de Espadas e a de menor valor é o Ás de Paus. Como exemplo, a Dama de Ouros tem um valor maior que um Valete (qualquer naipe) mas tem um valor menor que a Dama de Copas. Algumas das cartas descartadas afetam o jogo, como se segue: Quando uma Dama é descartada, a direção de jogo é invertida: se a direção é horária, ela se torna anti-horária, e vice-versa; Quando um Sete é descartado, o próximo jogador deve sacar duas cartas da pilha de saque (o número de cartas em sua mão aumenta por dois), e perde a vez (não descarta nenhuma carta); Quando um Ás é descartado, o próximo jogador deve sacar uma carta da pilha de saque (o número de cartas em sua mão aumenta por um), e perde sua rodada (não descarta nenhuma carta); Quando um Valete é descartado, o próximo jogador perde a vez (não descarta nenhuma carta). Perceba que a penalidade da primeira carta da pilha de descarte (a carta sacada da pilha de saque no começo) é aplicada ao primeiro jogador a jogar. Por exemplo, se o primeiro jogador é p e a primeira carta na pilha de descarte é um Ás, o jogador p saca uma carta da pilha de saque e não descarta nenhuma carta em seu primeiro turno. Note também que se a primeira carta é uma Dama, o sentido do jogo é invertido para o anti-horário, mas o primeiro jogador a jogar permanece o mesmo. O vencedor é o jogador que descarta todas suas cartas primeiro (o jogo acaba depois de o vencedor descartar sua última carta). Dada a descrição do baralho embaralhado e o número de jogadores, escreva um programa que determine quem vencerá o jogo.",
        "titulo": "Bora Bora",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém três inteiros P, M e N, separados por espaço, indicando respectivamente o número de jogadores (2 ≤ P ≤ 10), o número de cartas distribuídas para cada jogador no começo da partida (1 ≤ M ≤ 11) e o número de cartas no baralho embaralhado (3 ≤ N ≤ 300). Cada uma das próximas N linhas contém a descrição de uma carta. Uma carta é descrita por um inteiro X e um caractere S, separados por um espaço, representando respectivamente o valor da carta e seu naipe. O valor das cartas é mapeado com inteiros de 1 a 13 (Ás é 1, Valete é 11, Dama é 12 e Rei é 13). Os naipes das cartas são designados pela primeira letra do naipe: 'C' (Paus - Clubs), 'D' (Ouros - Diamonds), 'H' (Copas - Hearts) ou 'S' (Espadas - Spades). Os jogadores são identificados com valores de 1 a P e sentam-se em um círculo, no sentido horário, 1, 2 ... P, 1. As primeiras P x M cartas do baralho são distribuídas aos jogadores: as primeiras M cartas ao primeiro jogador (jogador 1), as próximas M cartas ao segundo jogador (jogador 2), e assim por diante. Depois de distribuir as cartas aos jogadores, a próxima carta do baralho - a (P x M + 1)-ésima carta - é usada para começar a pilha de descarte, e as cartas restantes formam a pilha de saque. A (P x M + 2)-ésima carta a aparecer na entrada é a carta do topo da pilha de saque, e a última carta a aparecer na entrada (a N-ésima carta) é a carta de baixo da pilha de saque (a última carta que pode ser sacada). O jogador 1 é sempre o primeiro a jogar (mesmo se a carta usada para começar a pilha de descarte é uma Dama). Todos os casos de teste têm um vencedor, e em todos casos de teste o número de cartas no baralho é suficiente para jogar até o fim da partida. O final da entrada é indicado por uma linha contendo apenas três zeros, separados por espaços."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1449",
        "saida": "Para cada instância imprima as N linhas traduzidas. As palavras que não estão no dicionário devem ser impressas como aparecem na entrada. Imprima uma linha em branco após tradução, inclusive após a última. Nenhuma linha da saída contém mais do que 80 letras.",
        "descricao": "Em 1985 estréia na TV Japonesa a série Kyojiu Tokusou Jaspion (Investigador Especial de Monstros Jaspion). A série chega ao Brasil alguns anos depois com o título “O Fantástico Jaspion”, e com ela nasce a fantasia de polícia espacial em milhões de brasileirinhos. As crianças saíam da escola, corriam pelas ruas (sem olhar se vinha carro), ligavam a TV e mergulhavam na coragem, exemplo de pessoa, e incontestável sede por justiça do Fantástico Jaspion. O comércio de gibis e as brigas por figurinhas no recreio da escola estavam alcançando números históricos. Até então, tal sentimento só havia sido estimulado com tanta intensidade pelo Chaves e a sua turma! Diante dessa febre inter-galática, o inevitável aconteceu. Os produtores do Jaspion ganharam o Nobel da Paz! Isso mesmo! Os produtores ganharam um Nobel. As histórias do grandioso Jaspion estavam por todo canto. Agora as crianças tinham um belíssimo exemplo para seguir. A paz mundial estava garantida! Não precisávamos mais temer o monstrengo Satan Gos! No Brasil havia uma criança que adorava as histórias do Jaspion! Antônio Melhorança Capote Valente Junior carinhosamente apelidado de ACM, um menino da zona sul de São Paulo que adorava cantar as músicas do grande herói. Ele era tão fanático que chegou a comprar um dicionário de Japonês-Português e iniciou um trabalho árduo de tradução. Entretanto, o trabalho ficou inacabado! Alguns trechos da canção ainda precisam ser traduzidos. Neste momento você deve estar se perguntando: qual é a minha tarefa neste fabuloso problema? Ok! Antes de falar da sua tarefa, convide seu companheiro de equipe para mergulhar com você no desfecho da história. Para isso, vamos falar mais um pouco sobre o nosso ACM. Ele se formou em Ciência da Computação e hoje trabalha no mesmo escritório que você. Pois é! Você trabalha como programador ao lado dessa figura! Como sabemos que você gosta muito dele, temos certeza que vai aceitar a seguinte tarefa: dado um dicionário Japonês-Português e uma letra de música, escreva um programa que imprima a letra traduzida.",
        "titulo": "O Fantástico Jaspion",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros M e N (1 ≤ M ≤ 1000000, 1 ≤ N ≤ 1000), que representam o número de palavras no dicionário e o número de linhas na letra da música, respectivamente. Os próximos M pares de linhas contêm as traduções: a primeira linha de cada par contém a palavra em Japonês, e a segunda linha contém a tradução para o Português (que pode ter uma ou mais palavras). Todas as palavras usam apenas letras minúsculas. Cada palavra em Japonês aparece apenas uma vez em cada instância. As próximas N linhas contêm a letra da música. Cada linha da letra da música é uma lista de palavras separadas por um espaço (todas as palavras consistem apenas de letras minúsculas). Algumas podem estar vazias, mas nenhuma linha possui espaços no início ou no final. Nenhuma linha contém mais do que 80 letras."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2047",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir viavel se é possível transportar todos os passageiros de suas origens até o destino especificado, e inviavel em caso contrário. Uma linha em branco deve separar a saída de cada instância. Inclusive na última instancia.",
        "descricao": "Bill Poucher anunciou em Shangai (China), em abril último, que a trigésima final mundial do ACM-ICPC será realizada em San Antonio (USA) na segunda semana de 2006. Ao tomar conhecimento de tal informação (com alguns meses de atraso), uma empresa de transportes aéreos do Texas - conhecida como Fly by Night Ltd. - decidiu aproveitar o evento para tentar incrementar seu ganho anual. O objetivo do CEO da empresa era oferecer transporte aéreo para os times (incluindo competidores e técnicos) e para a equipe de suporte (aqueles que fazem as coisas funcionarem) a partir de suas cidades de origem, em seus países de origem, até o local da competição. Para tentar garantir o sucesso de sua idéia, o mesmo CEO ofereceu tarifas ligeiramente abaixo do preço de mercado para aqueles que seriam transportados. Como eles eram em sua maioria estudantes e professores universitários, toparam na hora. Como você já deve ter imaginado, a Fly by Night Ltd. opera vôos noturnos. No entanto, em vez de possuir seus proprios aviões, a referida empresa apenas vende assentos em vôos de outras companhias. Ela ganha uma boa comissão devido ao fato de tais vôos terem, historicamente, uma baixa ocupação. No entanto, quando os funcionários da empresa foram verificar os vôos que teriam à disposição para realizarem a operação, tiveram uma bela surpresa. A maior parte dos vôos estava completamente lotada. Os que não estavam lotados, não possuiam muitos assentos livres. Ninguém soube explicar o motivo de tal demanda irregular. Duas hipóteses foram levantadas: a proximidade do spring-break americano e a popularidade da competição. :-) Na tentativa de salvar a empresa (e seu próprio cargo), o CEO percebeu que teria de utilizar escalas e baldeações. O lucro desta forma seria menor, mas nada comparado ao prejuízo que teria se operasse com vôos diurnos ou deixasse de transportar os passageiros (que naquela altura, já tinham pago as passagens...). Os funcionários da Fly by Night Ltd. levantaram então um conjunto de cenários com vôos que poderiam ser utilizados. O que foi percebido pouco depois é que nem todos os cenários eram viáveis, já que nem todos conseguiam transportar o montante de passageiros necessário. Finalmente, o CEO percebeu que não tinha pessoal qualificado para lidar com a situação. Você foi então contratado para desenvolver um programa que, para cada cenário construído, responda se o cenário é viável ou inviável.",
        "titulo": "Fly By Night",
        "entrada": "Um cenário será, daqui em diante, chamado de instância. Seu programa deve estar preparado para lidar com diversas instâncias. Cada instância começa com um inteiro 0 ≤ m ≤ 100 que especifica o número de cidades de origem dos passageiros que devem ser transportados. Um valor m = 0 indica o final das instâncias e não deverá ser processado. Em caso contrário, em cada uma das próximas m linhas, são dados o nome de uma cidade de origem e o respectivo número de passageiros daquela cidade (um inteiro não negativo menor ou igual a 100). O nome de uma cidade possui entre 1 e 20 caracteres tomados do alfabeto Σ={a,b,...,z,-}. Na próxima linha são dados um inteiro 0 ≤ n ≤ 100, que representa o número de vôos da instância, e o nome da cidade em que ocorrerá o evento (o CEO decidiu que o programa deveria aceitar isso). O nome desta cidade segue as mesmas regras estabelecidas acima. Em cada uma das próximas n linhas são dados os nomes de duas cidades de um vôo (origem e destino, respectivamente), seguido por um inteiro não negativo menor ou igual a 200 que representa o número de assentos livres naquele vôo. Novamente os nomes das cidades estão sobre Σ e de comprimento entre 1 e 20. Você pode supor que não há duas cidades com o mesmo nome, e que as cidades de origem e destino são sempre diferentes. Além disso, a Fly by Night Ltd. não trabalha com mais de um vôo entre quaisquer duas cidades. Em cada linha da entrada, um número qualquer de espaços pode separar os dados fornecidos."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1587",
        "saida": "Imprima uma linha revelando o placar final do jogo de acordo com os eventos fornecidos e com as regras descritas. Os exemplos esclarecem o formato em que o placar deve ser impresso.",
        "descricao": "A Final Nacional da Maratona de Programação da Sociedade Brasileira de Computação (SBC) de 2014 será em Fortaleza, e os desbravadores maratonistas chapecoenses, ansiosos, já começam a fazer as malas, esperançosos da classificação na Etapa Regional. A capital do Ceará, com uma população de 2.551.805 habitantes (segundo o Censo Populacional de 2013 do IBGE), é mundialmente conhecida por suas belas praias, seus luxuosos hotéis, pousadas e restaurantes, suas magníficas obras de Arquitetura, seu povo alegre e hospitaleiro, e também pelos seus extraordinários parques aquáticos. Visando derrubar a hegemonia do maior parque aquático da cidade, uma empresa local de TI, denominada NCC (Núcleo de Computação Cearense), construiu um parque aquático maior ainda, denominado BIT Park, o qual será inaugurado ainda neste ano. Para a inauguração toda a população da cidade foi convidada, e o NCC promete várias atividades para entreter o povo a tarde toda. Uma das atividades previstas para a inauguração ocorrerá na maior piscina do BIT Park: um colossal jogo de futebol aquático, do qual poderão participar todos os habitantes de Fortaleza, já que a piscina em questão possui nada mais nada menos que 1 km de largura por 2 km de comprimento. O futebol aquático funciona basicamente como o futebol convencional, mas com algumas diferenças: o jogo ocorre dentro d'água, então, a bola é passada com as mãos, não com os pés; o jogo pode ser jogado por qualquer número par de jogadores, desde que haja o mesmo número de jogadores nos dois times --- e desde que todos os jogadores caibam na piscina; não há goleiros, já que todos os jogadores podem defender a bola com as mãos; assim como no futebol convencional, a legalidade da posição de um jogador é avaliada de acordo com a linha paralela à linha do gol adversário em que se encontra, considerando-se também as linhas em que se encontram os jogadores adversários: a posição de um jogador J é considerada ilegal — e o jogador, consequentemente, considerado impedido — se menos de 2/11 dos jogadores adversários encontram-se em linhas mais próximas da linha do gol adversário que a linha em que se encontra J; apenas pode pegar a bola um jogador que esteja numa posição legal, diferentemente do que ocorre no futebol convencional, em que o impedimento é avaliado no momento do passe, não no momento da recepção. Na Figura, em que o time A joga contra o time B, estão impedidos os jogadores A4 e A5. O NCC percebeu que avaliar as legalidades das posições dos jogadores durante o jogo seria impraticável; afinal, toda a população de Fortaleza poderia estar na piscina. A decisão, então, foi deixar o jogo rolar para depois reavaliar todos os eventos e recalcular o placar através de um programa. A partir do momento em que um jogador impedido recebe a bola, o próximo gol que ocorre na partida deve ser anulado, a menos que a bola saia da piscina. No início do jogo, e toda vez que a bola sai da piscina ou que ocorre algum gol, o árbitro sorteia um jogador qualquer — não necessariamente não impedido — e lhe concede a bola para dar continuidade à atividade.",
        "titulo": "BIT Park",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste é composta por dois inteiros N e E (1 < N < 2.551.805, 1 < E < 104), os quais encerram a entrada quando são ambos nulos. N é um número par que indica o número de fortalezenses que participaram do jogo. E é o número de eventos que aconteceram durante o jogo. Os times são chamados de A e de B, e os jogadores, de A1, A2, A3… e de B1, B2, B3… Todas as posições são determinadas pela distância em milímetros da linha do gol do time A, ou seja, o gol do time A está na posição 0 e o gol do time B está na posição 2.000.000. A segunda linha de um caso de teste contém N / 2 inteiros xiA (0 ≤ xiA ≤ 2.000.000, 1 ≤ i ≤ N / 2), indicando cada xiA a posição do jogador Ai no início da partida. De igual modo, a terceira linha contém N / 2 inteiros xiB (0 ≤ xiB ≤ 2.000.000, 1 ≤ i ≤ N / 2), indicando cada xiB a posição inicial do jogador Bi. Seguem, então, E linhas, cada uma descrevendo um evento do jogo. O quadro abaixo lista todos os eventos possíveis e como cada um deles é descrito na entrada. I Xi o árbitro concede a bola ao jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2 ) para iniciar uma jogada M Xi x o jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2) se movimenta para a posição X (0 ≤ X ≤ 2000000) P Xi a bola passa para as mãos do jogador Xi (X ∈ {A, B}, 1 ≤ i ≤ N / 2) G X a bola entra no gol do time X (X ∈ {A, B}) S a bola sai da piscina Assuma que um evento I ocorre se e somente se é o primeiro evento da partida ou o evento anterior é um evento G ou S."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1430",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma única linha contendo um único inteiro, o número de compassos que possuem a duração correta.",
        "descricao": "A. C. Marcos está dando os primeiros passos para ser um compositor de jingles. Ele está tendo alguns problemas, mas ao menos ele está criando melodias agradáveis e ritmos atrativos. Na música, uma nota tem um tom (sua frequência, resultando em quão grave ou agudo é o som) e uma duração (por quanto tempo a nota soa). Neste problema, estamos interessados apenas na duração das notas. Um jingle é dividido em uma sequência de compassos, e um compasso é formado de uma série de notas. A duração de uma nota é indicada pela sua forma. Neste problema, iremos utilizar letras maiúsculas para indicar a duração de uma nota. A seguinte tabela lista todas as notas disponíveis: ​ A duração de um compasso é a soma da duração de suas notas. Nos jingles de Marcos, cada compasso tem a mesma duração. Como Marcos é apenas um iniciante, seu famoso professor Johann Sebastian III o ensinou que a duração de um compasso deve ser sempre 1. Por exemplo, Marcos escreveu uma composição contendo cinco compassos, dentre os quais quatro possuem a duração correta e um está errado. No exemplo abaixo, cada compasso é delimitado com barras e cada nota é representada como na tabela acima. /HH/QQQQ/XXXTXTEQH/W/HW/ Marcos gosta de computadores assim como de música. Ele quer que você escreva um programa que determine, para cada uma de suas composições, quantos compassos possuem a duração correta.",
        "titulo": "Composição de Jingles",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em uma única linha contendo uma string cujo tamanho está entre 3 e 200 caracteres, inclusive, representando uma composição. Uma composição começa e termina com uma barra '/'. Compassos em uma composição são separados por uma barra '/'. Cada nota em um compasso é representada pela letra correspondente segundo a descrição acima. Você pode assumir que cada composição contém ao menos um compasso e que cada compasso contém ao menos uma nota. Todos os caracteres na entrada serão barras ou uma das sete letras maiúsculas usadas para representar as notas. O último caso de teste é seguido por uma linha contendo um único asterisco."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1520",
        "saida": "Cada caso de entrada deverá produzir uma única linha de saída, indicando as posições da prateleira nas quais o parafuso de tamanho Num se encontra ou indicando que não foi possível encontrar o parafuso, conforme o exemplo abaixo.",
        "descricao": "Pedro está trabalhando em um novo emprego em uma loja de parafusos e porcas. Toda semana ele irá receber novas encomendas de parafusos mistos em grandes caixas e precisa saber onde ele deve armazenar esses produtos. Mango, que é supervisor de Pedro, pediu-lhe para organizar todos os parafusos e porcas em um rack enorme, de forma que seja fácil de responder onde é possível encontrar cada predeterminado lote de parafusos e quanto de cada um destes lotes a loja tem.  Pedro recebe todos os parafusos e porcas em caixas etiquetadas com o intervalo de tamanho dos produtos. Por exemplo, duas caixas com os respectivos intervalos (1, 2) e (4, 8) representam lotes de produtos com tamanho {1, 2, 4, 5, 6, 7, 8}. Um número de parafuso e porca pode estar presente em mais de uma caixa, e ele aparece na lista uma vez para cada intervalo. Por exemplo, três caixas com os respectivos intervalos (1, 3), (2, 4) e (3,5) representam lotes de parafusos e porcas com tamanho {1, 2, 2, 3, 3, 3, 4, 4, 5}.",
        "titulo": "Parafusos e Porcas",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto por várias linhas. A primeira linha contém um inteiro positivo N (N < 100) que indica a quantidade de caixas de parafusos. Seguem N linhas, cada uma delas com dois valores X e Y (1 ≤ X < Y ≤ 100) que representam os tamanhos dos lotes de parafusos e porcas presentes naquela caixa. A próxima linha de entrada conterá um único inteiro positivo Num (1 ≤ Num ≤ 100), que indica o número que Mango deseja pesquisar após todos os produtos serem organizados na estante ou rack. Obs. A estante ou rack possui prateleiras enumeradas de 0 a P, sendo que este P não deve ser superior a 10000."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1548",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de alunos que não precisaram trocar de lugar mesmo após a fila ser reordenada.",
        "descricao": "Na escola onde você estuda, a hora do recreio é a mais aguardada pela grande maioria dos alunos. Não só porque as vezes as aulas são cansativas, mas sim porque a merenda servida é muito boa, preparada por um chefe italiano muito caprichoso. Quando bate o sinal para a hora do recreio, todos os alunos saem correndo da sua sala para chegar o mais cedo possível na cantina, tanta é a vontade de comer. Um de seus professores notou, porém, que havia ali uma oportunidade. Utilizando um sistema de recompensa, seu professor de matemática disse que a ordem da fila para se servir será dada não pela ordem de chegada, mas sim pela soma das notas obtidas em sala de aula. Assim, aqueles com maior nota poderão se servir antes daqueles que tem menor nota. Sua tarefa é simples: dada a ordem de chegada dos alunos na cantina, e as suas respectivas notas na matéria de matemática, reordene a fila de acordo com as notas de matemática, e diga quantos alunos não precisaram trocar de lugar nessa reordenação.",
        "titulo": "Fila do Recreio",
        "entrada": "A primeira linha contém um inteiro N, indicando o número de casos de teste a seguir. Cada caso de teste inicia com um inteiro M (1 ≤ M ≤ 1000), indicando o número de alunos. Em seguida haverá M inteiros distintos Pi (1 ≤ Pi ≤ 1000), onde o i-ésimo inteiro indica a nota do i-ésimo aluno. Os inteiros acima são dados em ordem de chegada, ou seja, o primeiro inteiro diz respeito ao primeiro aluno a chegar na fila, o segundo inteiro diz respeito ao segundo aluno, e assim sucessivamente."
    },
    {
        "nivel": "6",
        "assunto": "4",
        "numero": "1083",
        "saida": "Como saída, para cada expressão de entrada deverá ser gerado uma linha indicando o resultado do processamento. Se a expressão estiver correta, esta deverá ser transformada para a forma posfixa. Se não for possível, deverá ser impressa a mensagem \"Lexical Error!\" indicando erro léxico ou \"Syntax Error!\" indicando o erro de sintaxe, nesta ordem.",
        "descricao": "Uma das formas mais interessantes do uso de pilhas é a na avaliação de uma expressão matemática. Pode-se, através da pilha, fazer a análise léxica de uma expressão (indicar se uma expressão possui um operando inválido, como por exemplo um símbolo qualquer que não está presente nem na tabela de operadores, nem na tabela de operandos) e também a análise sintática. A análise sintática pode indicar que está faltando um ou mais parênteses, sobrando um ou mais parênteses, sobrando operador, 2 operandos sucessivos, etc. A tarefa aqui é determinar se uma expressão está correta ou não.",
        "titulo": "LEXSIM - Avaliador Lexico e Sintático",
        "entrada": "Como entrada, são válidos: a) Operandos: todas as letras maiúsculas ou minúsculas ('a'..'z', 'A'..'Z') e números (0...9). b) Parênteses. c) Operadores: deverão ser aceitos os seguintes operadores segundo a tabela de prioridades  apresentada abaixo: Operador Prioridade ^ 6 *,/ 5 +,- 4 >,<,=,#, 3 AND ( . ) 2 OR ( | ) 1 Para facilitar a implementação, será utilizado um ponto para representar o AND (.) e o Pipe ( | ) para representar o OR. Obs.: Como restrição, não será permitida a entrada de expressões com operadores unários, como por e exemplo o '-' de: 4 * -2 A finalização da entrada será determinada pelo final do arquivo de entrada EOF()."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1326",
        "saida": "Para cada caso de teste da entrada, seu programa deve produzir uma linha, contendo a string 'PRODUCT requires N containers', onde o PRODUCT é a substância final e N é o número de recipientes necessários para produzi-lo.",
        "descricao": "Internacional Chemical Products Company (ICPC) é uma empresa conhecida mundialmente pelos seus bons produtos e acessíveis, o que inclui shampoos, produtos de limpeza, matadores de insetos, e alguns tipos de vacinas. Os engenheiros da ICPC sempre estão procurando meios de reduzir o custo de fabricação de seus produtos, sem perder a qualidade. Um dos engenheiros, Sr. Poucher, tem uma nova ideia de reduzir o custo, que visa reduzir o número de recipientes necessários para manter as substâncias durante a sequência de reações químicas para se obter uma última substância. Essas substâncias finais são obtidas através de uma sequência de reações na forma de X + Y → Z, onde X e Y são substâncias iniciais ou intermediarias (que já foram geradas em reações anteriores). Essas reações são feitas dentro de um recipiente de reações, que quando vazio pode ser limpo e usado novamente. O processo de gerar a substância final pode ser descrevido por uma sequência de duas simples operações: Colocar uma substância disponível em um recipiente de reação vazio C; Realizar a reação de X + Y → Z ou colocando X no recipiente de reação contendo Y, ou colocando Y no recipiente de reação contendo X. A ordem não afeta o resultado final da reação. O que Sr. Poucher percebeu é que escolhendo a sequência de reação correta, ICPC poderia cortar o número de reações necessárias na companhia drasticamente . Por exemplo, considerando a seguinte sequência de reações químicas usadas para obter a substância final P: 1) A + B -> T1 2) C + D -> T2 3) E + F -> T3 4) T2 + T3 -> T4 5) T4 + T1 -> P Nesse exemplo, A, B, C, D, E e F são as substância iniciais (somente aparecem no lado esquerdo das reações), T1, T2, T3 e T4 são substâncias intermediarias (aparecem no lado esquerdo pelo menos uma vez, e exatamente uma na direita de alguma outra reação) e P é a substância final (só aparece na direita de uma única reação, que vai ser a última listada). Se a sequência de reações é realizada como foi dito então três recipientes são necessários em ordem para produzir a substância final P: Recipientes Operações C1 C2 C3 colocar A em C1: A - - adicionar B para C1: T1 - - colocar C em C2: T1 C - adicionar D para C2: T1 T2 - colocar E em C3: T1 T2 E adicionar F para C3: T1 T2 T3 colocar T2 em C3: T1 - T4 colocar T4 em C1: P - - Nota-se, contudo, que se as reações são realizadas na sequência 2, 3, 4, 1, 5, dois recipientes são suficientes: Recipientes Operações C1 C2 colocar C em C1: C adicionar D para C1: T2 colocar E em C2: T2 E adicionar F para C2: T2 T3 colocar T2 em C2: - T4 colocar A em C1: A T4 adicionar B para C1: T1 T4 colocar T1 em C2: - P Você foi contratado pela ICPC, e sua tarefa é criar um programa de computador que determine o número minimo de recipientes necessárias para executar a sequência de reações necessárias para obter a substância final. Você deve assumir que: A reação de produção da substância final é a última listada, e a reação que produz uma substância intermediária sempre vai preceder as reações onde essa substância intermediária é usada. Uma sequência de reações que produzem a última substância é sempre possível. ICPC tem um suprimento ilimitado de substâncias iniciais. No início do processo de produção, cada substância inicial está em um recipiente de armazenamento, usado para guardar todo estoque de substâncias da ICPC. Tais recipientes não podem ser utilizados como recipiente de reação para armazenar produtos intermediários da reação. Todos os recipientes de reação são grandes o suficiente para manter todas as substâncias resultantes. A quantidade de substâncias geradas por uma única reação é suficiente para ser usada como entrada para uma única outra reação. Por exemplo, se um produto intermediário Z é necessário como entrada para duas diferentes reações, este produto deve ser produzido duas vezes. Cada reação usa exatamente duas substâncias diferentes e gera também uma substância distinta, isto é, toda reação tem a forma X + Y → Z, onde X, Y e Z são distintos.",
        "titulo": "Química",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste começa com uma linha contento um inteiro R, indicando o número de reações para serem consideradas(1 <= R <= 5000). A seguir R linhas são da forma: S1 + S2 → S3 Descreve uma reação que consome S1 e S2 e produz S3 como resultado. Os nomes de todas as substâncias são cadeias-alfanumericas de tamanho no máximo 5. Um caso de teste com R = 0 indica o final da entrada."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1162",
        "saida": "Para cada caso de teste imprima a sentença: 'Optimal train swapping takes S swaps.' onde S é um inteiro.",
        "descricao": "Na estação de trem você ainda pode encontrar o último dos “organizadores de vagões”. Um Organizador de vagões um empregado cujo trabalho é apenas reordenar os vagões do trem, trocando-os de posição. Uma vez que os vagões são organizados em uma ordem considerada ótima, o condutor pode desconectar cada vagão e colocá-los na estação. O título “organizador de vagões” é dado à pessoa que realiza esta tarefa, cuja estação fica perto de uma ponte. Ao invés da ponte poder subir ou descer, ela roda sobre um pilar que fica no centro do rio. Após rodar 90 graus, os barcos podem passar na esquerda ou direita dela. O Primeiro organizador de vagões descobriu que girando a ponte 180 graus com dois vagões em cima dela, é possível a troca de lugar entre os dois vagões. Obviamente a ponte pode operar no máximo com dois vagões sobre ela. Agora que quase todos os organizadores de vagões já faleceram, a estação gostaria de automatizar esta operação. Parte do programa a ser desenvolvido é uma rotina que decide para um dado trem com um determinado número de vagões, o número de trocas entre trens adjacentes que são necessárias para que o  trem fique ordenado. Sua tarefa é criar tal rotina.",
        "titulo": "Organizador de Vagões",
        "entrada": "A entrada contém na primeira linha o número de caso de testes (N). Cada caso de teste consiste de duas linhas de entrada. A primeira linha de um caso de teste contém um inteiro L, determinando o tamanho do trem (0 ≤ L ≤ 50). A segunda linha de um caso de teste contém uma permutação dos números 1 até L, indicando a ordem corrente dos vagões. Os vagões devem ser ordenados de forma que o vagão 1 venha por primeiro, depois o 2, etc, com o vagão L vindo por último."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2020",
        "saida": "Para cada lista codificada por elfos, deve-se apresentar a mensagem “LISTA #X:”, onde X é o número da lista seguindo a sequência (1, 2, 3, ...), em seguida deve-se listar todos os presentes em ordem alfabética e maiúsculo, um em cada linha. Imprimir uma linha em branco entre dois casos de teste consecutivos. No fim da saída não deve haver uma linha em branco.",
        "descricao": "Neste ano Papai Noel recebeu várias listas de presentes, com pedidos e mais pedidos. Para dificultar, todas as listas são codificadas por elfos. Como são milhares de listas e o Papai Noel é organizado, decidiu pedir a sua ajuda. Ele sabe que você é dedicado e conhece o padrão de decodificação dos elfos, e para isso disponibilizou 26 gnomos e 676 duendes. Cada lista é decodificada através da colaboração de gnomos e duendes ajudantes do Papai Noel. Os gnomos são enumerados de 1 a 26 e para cada gnomo, 26 duendes que correpondem a letras de A até Z (incluindo as letras K, W, Y). Quando a decodificação é iniciada, todas as N linhas são executadas. Cada N linha corresponde a um presente. Seguem os passos para decodificar uma determinada lista criada por elfos: 1º Os gnomos e duendes são organizados, gnomos representam linhas e duendes representam as colunas. 2º Para cada gnomo, é encontrado um duende. Por exemplo, se o número inteiro i for 2 (linha 2) o gnomo é 2 e obrigatoriamente o duende também é 2, correspondendo, portanto, ao caractere B. 3º Todos os duendes, na posição gnomo devem ser movidos para o final. 4º A linha correspondente ao gnomo é movida para a última posição válida. Após este primeiro movimento, se o próximo número da entrada para i for 2 (linha 2) o gnomo agora será 3 e consequentemente o duende também será 3, correspondendo portanto, ao caractere D. O 1º passo é executado a cada nova lista codificada por elfos, o 2º, 3º e 4º passo são executados a cada número inteiro i que corresponde a linha da matriz. Papai Noel quer saber os presentes que contém na lista codificada por elfos.",
        "titulo": "Elfos e seus Códigos",
        "entrada": "A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10000), que corresponde ao número de linhas codificadas por elfos. As N linhas seguintes contém um número indefinido de inteiros i (1 ≤ i ≤ 27), cada número inteiro i representa a linha da matriz e se i for 27, um espaço. A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1424",
        "saida": "Para cada consulta, imprima o índice do vetor (1-indexado) da ocorrência solicitada. Se tal ocorrência não existe, imprima 0 ao invés.",
        "descricao": "Embora Rujia Liu geralmente escreve problemas difíceis para algumas competições (como, por exemplo, competições regionais de Xi'an em 2006, de Pequim em 2007 e de Wuhan em 2009, ou competições no UVA OJ como a \"Rujia Liu's Presents\" 1 e 2), ele escreve problemas fáceis algumas vezes (como, por exemplo, o problema \"the Coco-Cola Store\" no UVA-OJ), para encorajar mais pessoas a resolver mais problemas :D Dado um vetor de inteiros, sua tarefa é encontrar a k-ésima ocorrência (da esquerda para a direita) de um inteiro v no vetor. Para tornar o problema mais difícil (e mais interessante!), você deve responder a m consultas deste tipo.",
        "titulo": "Problema Fácil de Rujia Liu?",
        "entrada": "Há vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros n e m (1 ≤ n, m ≤ 100.000), o número de elementos no vetor e o número de consultas a serem respondidas, respectivamente. A próxima linha contém n inteiros positivos não maiores que 1.000.000, que descrevem o vetor. As próximas m linhas contém dois inteiros k e v cada (1 ≤ k ≤ n, 1 ≤ v ≤ 1.000.000), descrevendo as consultas. O arquivo de entrada termina com fim-de-arquivo (EOF). O tamanho do arquivo de entrada não excede 5 Mb."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1069",
        "saida": "Você deve imprimir a quantidade de diamantes possíveis de serem extraídos em cada caso de entrada.",
        "descricao": "João está trabalhando em uma mina, tentando retirar o máximo que consegue de diamantes \"\". Ele deve excluir todas as particulas de areia \".\" do processo e a cada retirada de diamante, novos diamantes poderão se formar. Se ele tem como uma entrada .>....>....>>>., três diamantes são formados. O primeiro é retirado de , resultando  .....>....>>>. Em seguida o segundo diamante é retirado, restando .....>>>. O terceiro diamante é então retirado, restando no final .....>>>., sem possibilidade de extração de novo diamante.",
        "titulo": "Diamantes e Areia",
        "entrada": "Deve ser lido um valor inteiro N que representa a quantidade de casos de teste. Cada linha a seguir é um caso de teste que contém até 1000 caracteres, incluindo \", .\""
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1897",
        "saida": "A saída é o número mínimo de operações para converter N em M.",
        "descricao": "Enquanto Bino descansava, inventou um jogo esperto. Dado um número N e um número M, Bino quer saber qual a quantidade mínima de operações para converter N em M. Existe seis operações permitidas. Operação 1: N = N*2 Operação 2: N = N*3 Operação 3: N = N/2 Operação 4: N = N/3 Operação 5: N = N+7 Operação 6: N = N-7",
        "titulo": "Jogo Esperto",
        "entrada": "A entrada contém dois inteiros N ( 0 ≤ N ≤ 10000) e M ( 0 ≤ M ≤ 10000)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1704",
        "saida": "Para cada teste imprima uma única linha representando a menor quantidade de dinheiro perdida.",
        "descricao": "Você trabalha para uma empresa muito grande e que tem uma cultura move-fast. Hoje, um dos seus colegas ficou doente e você precisa repor o trabalho dele. Seu chefe disse que você tem apenas um computador para realizar algumas tarefas. Cada uma delas dá v de lucro e deve ser terminada até t horas a partir de agora. Após esse tempo, não pode ser mais realizada e não possui nenhum valor. O computador realiza exatamente uma tarefa por hora. Você deseja impressionar o seu chefe e assim ganhar uma promoção. Para isso, você pretende usar suas habilidades de programador e selecionar quais tarefas executar de tal forma a minimizar a quantidade de dinheiro perdida.",
        "titulo": "Arrumando as Tarefas",
        "entrada": "A entrada é composta por diversos casos teste e termina com o final do arquivo. Cada um descreve uma lista de tarefas e começa com dois inteiros N (1 ≤ N) e H (H ≤ 1000), o número de tarefas e a quantidade de horas disponível do computador, respectivamente. As próximas N linhas contém cada uma v (1 ≤v ≤ 1000) e t (1 ≤ t ≤ H) como descrito acima."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1633",
        "saida": "Para cada caso de teste, imprima o valor inteiro que representa a soma, para todos os processos, do tempo, em ciclos de processamento, que cada processo espera até entrar em execução. Por favor, note que este valor pode não caber em 32 bits.",
        "descricao": "A Federação dos Apagadores e Celulares Esquisitos (FACE) assinou recentemente um contrato com o Governo Federal para desenvolver um telefone celular de baixo custo que será distribuído gratuitamente a populações de baixa renda. Apesar de simples, o aparelho contará com uma série de aplicativos, a fim de que as pessoas possam desfrutar de todas as facilidades que as plataformas móveis proporcionam. Um desafio, contudo, está intrigando os programadores da FACE: o aparelho não dispõe de muitos recursos de hardware, e os programadores estão tendo dificuldades em escrever o módulo que gerenciará os processos do sistema operacional SBC (Sistema Bonito para Celulares), desenvolvido especialmente para a arquitetura. Os programadores receberam dos analistas as seguintes diretivas, as quais precisam ser rigorosamente seguidas: O sistema executa apenas um processo por vez, e cada processo até o fim. O sistema jamais pode ficar ocioso se há processos esperando para serem atendidos. Para que um processo não trave o sistema, cada processo, quando requisita sua execução, deve informar ao sistema o tempo exato, em ciclos de processamento, que sua execução durará. O sistema jamais permite que a execução de um processo dure mais que o tempo previsto, abortando-a se necessário. Ainda, se um processo se encerra antes do informado, o sistema aproveita os ciclos restantes para rotinas de coleta de dados e comunicação com o Governo. Dessarte, para todos os efeitos, a execução de um processo que informou precisar de c ciclos dura sempre exatos c ciclos. O sistema garante que é mínima a soma, para todos os processos, do tempo que cada processo espera até entrar em execução. Ajude a FACE a completar o SBC escrevendo o módulo que falta!",
        "titulo": "SBC",
        "entrada": "A entrada é composta por vários casos de teste. A primeira linha de cada caso de teste consiste de um único inteiro N (1 ≤ N ≤ 105), o qual representa o número de processos que requisitaram sua execução ao SBC. Cada uma das N linhas seguintes corresponde, então, a um processo e é formada por dois inteiros t e c (1 ≤ t, c ≤ 103), os quais representavam respectivamente o tempo do sistema em que o processo fez sua requisição e o número de ciclos de processamento que durará a execução do processo. Considere que o tempo do sistema é contado em ciclos de processamento e que o contador começa em 1 em cada caso de teste. Considere ainda que a entrada é finalizada em fim de arquivo."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1701",
        "saida": "Para cada caso teste você deve imprimir um número, a soma dos N primeiros elementos da sequência de Fibo. Esse número pode ser muito grande, então você deve imprimi-lo MOD 1000000007.",
        "descricao": "Fibo é um grande fã de números, especialmente números grandes. Ele ama sequências que crescem rápido, sua favorita é a tão famosa: sequência de Fibonacci. Um dia ele decidiu criar uma nova sequência usando a sua favorita. Sua nova sequência é criada multiplicando números consecutivos da sequência de Fibonacci. A partir de números de Fibonacci de índices A e B. O primeiro elemento de sua nova sequência será o número de fibonacci de índice A multiplicado pelo número de Fibonacci de índice B, o segundo número é o número de Fibonacci de índice A+1 multiplicado pelo número de Fibonacci de índice B+1 e assim por diante. Ele sabe como obter cada elemento dessa nova sequência eficientemente, mas ele gostaria de calcular outra coisa. Ele gostaria de calcular a soma dos N primeiros números de sua nova sequência.Você pode ajudá-lo? Obs: Fibonnaci(0) = 0 e Fibonnaci(1) = 1",
        "titulo": "Sequência de Fibo",
        "entrada": "A entra contém diversos casos testes. Cada caso teste contém três inteiros, A, B e N (1 <= A, B, N <= 1000000000), os significados foram explicados acima. A entrada termina com três zeros."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1740",
        "saida": "O programa deve imprimir uma linha por pergunta do tipo 4 (“4 X Y”), respondendo se a sequência A[X...Y] é NON INCREASING, NON DECREASING, ALL EQUAL ou NONE como explicado acima.",
        "descricao": "Chavaska gosta de jogar com sequência de inteiros. Ele tem uma sequência A que contém N inteiros que ele modifica e analisa. Particularmente ele está interessado na ordem de algumas sequências contíguas. Ele explicou a Kabralouco como ele está se divertido e lhe convidou para jogar. Kabralouco quer jogar, mas como ele não consegue pensar tão rápido como Chavaska e não gosta de ficar atrás, ele decidiu roubar e agora esté te pedindo para ajudá-li criando um programa que pode realizar as seguintes operações 0 X Y – Troca os elementos X e Y. 1 X Y – Troca o valor do elemento na posição X por Y. 2 X Y – Insere o elemento Y na posição X. 3 X – Remove o elemento na posição X X. 4 X Y – Pergunta a estrutura dos elementos A[X..Y] e as respostas devem ser: “ALL EQUAL” – Se A[i] = A[i+1] para todo i em [X,Y −1] “NON DECREASING” – Se A[i] ≤ A[i+1] para todo i em [X,Y−1] e A[i] ≠ A[i+1] para algum i em [X,Y−1] “NONINCREASING” – Se A[i] ≥ A[i+1] para todo i em [X,Y−1] e A[i] ≠ A[i+1] para algum i em [X,Y−1] “NONE” – Se nenhum dos casos acontecem.",
        "titulo": "Está Ordenado?",
        "entrada": "A entrada contém diversos casos testes e termina com o fim de arquivo. A primeira linha de cada caso teste começa com um inteiro N (1 ≤ N ≤ 104,) o número de elementos na sequência inicial. Na próxima linha tem N inteiros |A[i]| ≤ 109 (1 ≤ i ≤ N). A próxima linha contém um inteiro Q (1 ≤ Q ≤ 105), o número de operações que devem ser executadas. As próximas Q linhas são as operações."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1088",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, com o nome do vencedor, igual a Carlos ou Marcelo., sem espaços em branco.",
        "descricao": "Andrea, Carlos e Marcelo são muito amigos e passam todos os finais de semana à beira da piscina. Enquanto Andrea se bronzeia ao sol, os dois ficam jogando Bolhas. Andrea, uma cientista da computação muito esperta, já disse a eles que não entende por que passam tanto tempo jogando um jogo tão primário. Usando o computador portátil dela, os dois geram um inteiro aleatório N e uma seqüência de inteiros, também aleatória, que é uma permutação de 1, 2, . . . ,N. O jogo então começa, cada jogador faz um movimento, e a jogada passa para o outro jogador. Marcelo é sempre o primeiro a começar a jogar. Um movimento de um jogador consiste na escolha de um par de elementos consecutivos da seqüência que estejam fora de ordem e em inverter a ordem dos dois elementos. Por exemplo, dada a seqüência 1, 5, 3, 4, 2, o jogador pode inverter as posições de 5 e 3 ou de 4 e 2, mas não pode inverter as posições de 3 e 4, nem de 5 e 2. Continuando com o exemplo, se o jogador decide inverter as posições de 5 e 3 então a nova seqüência será 1, 3, 5, 4, 2. Mais cedo ou mais tarde, a seqüência ficará ordenada. Perde o jogador impossibilitado de fazer um movimento. Andrea, com algum desdém, sempre diz que seria mais simples jogar cara ou coroa, com o mesmo efeito. Sua missão, caso decida aceitá-la, é determinar quem ganha o jogo, dada a seqüência inicial.",
        "titulo": "Bolhas e Baldes",
        "entrada": "A entrada contém vários casos de teste. Os dados de cada caso de teste estão numa única linha, e são inteiros separados por um espaço em branco. Cada linha contém um inteiroN (2 ≤ N ≤ 105), seguido da seqüência inicial P = (X1, X2, ...,XN) de N inteiros distintos dois a dois, onde1 ≤ Xi ≤ N para 1 ≤ i ≤ N. O final da entrada é indicado por uma linha que contém apenas o número zero."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1236",
        "saida": "Cada linha de entrada deve produzir uma linha de saída que é a compactação da linha de entrada, conforme exemplo abaixo.",
        "descricao": "O Professor Francisco solicitou sua ajuda para compactar alguns arquivos de texto que ele possui. Como os arquivos basicamente possuem muito espaço em branco e valores nulos (0), o compactador deve ser algo bem simples. O texto somente contém letras do alfabeto, espaços e números. Para simplificar, vamos considerar o $ como símbolo para compactação de espaços em branco e o # como símbolo para compactação de zeros. Só lembre de 2 detalhes: É o caractere da tabela AscII correspondente à frequência que deve ser gravado, e não o número decimal. caso apareça mais do que 255 caracteres seguidos de nulos ou brancos, a gravação deverá ser feita em mais do que um bloco. Por exemplo, para compactar 380 zeros seguidos, o primeiro bloco compacta as 255 ocorrências e o segundo bloco as 125 restantes, e assim por diante. O resultado seria \"# #}\". Note que o caractere 255 é invisível (aparece como se fosse um espaço em branco). Para você entender um pouco melhor a entrada e a saída, considere a tabela ASCII abaixo: Por exemplo CHR(3) equivale ao “ETX” Observações: Não compactar quando ocorrerem apenas dois zeros ou apenas dois espaços seguidos (\"*00*\" ou \"*  *\"), pois a compactação não teria efeito. o nosso toolkit pode não mostrar alguns caracteres especiais exigidos no output deste problema.",
        "titulo": "Compactação de Nulos e Brancos",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém um valor N que indica a quantidade de casos de teste. Cada caso de teste contém uma linha com até 2000 caracteres para serem compactados."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2018",
        "saida": "Como saída, deve ser impresso o quadro de medalhas das Olimpíadas de Natal. A primeira linha contém a informação \"Quadro de Medalhas\". Cada uma das próximas linhas conterá o nome de um país seguido pelo respectivo número de medalhas de ouro, prata e bronze que este país conquistou, separadas por um espaço em branco. O critério de desempate é, na ordem, o número de medalhas de ouro seguido pelo número de medalhas de prata e de bronze. Se países empatarem nestes três critérios, a listagem será por ordem ascendente do nome do país participante.",
        "descricao": "Segundo a tradição, as provas das Olimpíadas de Natal são muito interessantes e diferentes. Dentre as provas existentes, podemos citar por exemplo, o levantamento de saco de brinquedos, a escalada de pinheiros, o hipismo com renas, o arremesso de duendes (com e sem o consentimento deles - esse segundo é mais perigoso) e o tempo de mergulho em buraco no gelo sem equipamentos, entre outros. Parte do melhoramento da competição proposto por Noel para este ano sera a disponibilização do quadro de medalhas dos países participantes através de um placar eletrônico. Você foi convidado para viajar até as montanhas de Korvatunturi na Lapônia, Finlândia, aonde será a sede destes jogos, para, à partir de uma relação das provas e os países vencedores, desenvolver o sistema para este placar. Serão quase trezentos países participantes e até 1000 modalidades de provas, no máximo.",
        "titulo": "Olimpíadas de Natal",
        "entrada": "A entrada contem um unico caso de teste que consiste em uma relacao com o resultado de todas as provas realizadas nas Olimpíadas de Natal. Cada prova ou modalidade contém quatro linhas de informação: a primeira linha contém a descrição da prova, a segunda linha contém o país que ficou campeão nesta modalidade, a terceira linha contém o país vice-campeão e a última linha contém o país que ficou com a medalha de bronze na referida prova. O final da entrada é determinado por EOF."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2071",
        "saida": "Para cada instância seu programa deve produzir Q linhas na saída, sendo uma para cada consulta. Cada uma dessas linhas deve conter dois inteiros: o primeiro representa a soma do intervalo com maior soma, e o segundo, o número de elementos desse intervalo. Caso haja mais de um intervalo com maior soma, imprima o número de elementos naquele com maior número de elementos.",
        "descricao": "Pouca gente sabe, mas foi no Antigo Egito que surgiram os primeiros bancos, de uma forma muito semelhante ao que conhecemos hoje. O principal banco era do faraó, que decidia, de tempos em tempos, tomar para o Estado o conteúdo de algumas contas. Isso ocorria da seguinte forma. Dado N, o número de correntistas do Banco do Faraó (era esse o nome do banco), cada conta podia ter uma quantia em menés (moeda do Antigo Egito) que podia ser, inclusive, negativa (indicando que a pessoa devia aquela quantia ao banco), ou seja, o estado de cada conta era um inteiro ai. O objetivo do faraó era fazer diversas consultas nas contas de seus súditos. Dado um intervalo [A;B] (correspondente as contas aA; aA+1; ... ; aB-1; aB) o faraó desejava encontrar um subintervalo de soma máxima, ou seja, cujo sequestro pelo Estado renderia ao Faraó a maior quantia de dinheiro. Isso era explicado aos correntistas como sendo uma oferenda a Amon-Ahcid, o Deus egípcio do dinheiro. Fazendo regularmente tais oferendas o deus ficava satisfeito e permitia que o sistema econômico funcionasse perfeitamente. Isso durou surpreendentemente mais de 500 anos, até que num desses sequestros os correntistas se rebelaram, tomaram o palácio e mataram o faraó. O banco foi saqueado e o sistema ruiu. Só se ouviu falar de bancos novamente centenas de anos depois. Sua tarefa é dado um registro de contas e uma série de consultas, determinar para cada consulta um intervalo de soma máxima.",
        "titulo": "Banco do Faraó",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N, indicando o número de contas no Banco do Faraó, onde 1 ≤ N ≤ 100 000. A segunda linha de cada instância contém N inteiros, entre -10 000 até 10 000, indicando os saldos nas contas dos correntistas. A terceira linha contém um inteiro Q, onde 1 ≤ Q ≤ 100 000, indicando o número de consultas que serão feitas. Cada uma das Q linhas seguintes contém dois inteiros A e B, onde 1 ≤ A, B ≤ N, indicando o intervalo que deve ser consultado."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1405",
        "saida": "Para cada caso de teste, seu programa deve produzir uma linha contendo um inteiro que representa o valor de saída (retorno) para a entrada N dada, ou um asterisco (*) no caso de o programa nunca terminar.",
        "descricao": "O Problema da Parada (The Halting Problem) é um problema de decisão clássico da Ciência da Computação que consiste, basicamente, em determinar se um dado programa sempre vai parar (ou seja, terminar sua execução) para uma dada entrada arbitrária ou se vai executar infinitivamente. Alan Turing provou, em 1936, que é impossível resolver o problema da parada generalizando para qualquer par programa-entrada. Neste problema, porém, dada a descrição de uma linguagem simples, um programa escrito nessa linguagem e uma entrada para esse programa, você deve determinar se o programa dado pára com a entrada dada e, em caso positivo, qual a saída produzida. Esta linguagem só trabalha com números inteiros de 0 a 999 (inclusive). Sendo assim, o sucessor de 999 é 0, e o antecessor de 0 é 999. Além disso, ela possui dez variáveis (R0 a R9), sendo que a R0 sempre é atribuído o valor de chamada do programa (ou seja, o parâmetro de entrada) e a R9 é sempre atribuído o valor de saída (o retorno). No início da execução do programa, é atribuído o valor 0 a todas as variáveis, com exceção de R0 que recebe o parâmetro de entrada. As operações básicas são atribuição (MOV), soma (ADD), subtração (SUB), multiplicação (MUL), divisão inteira (DIV) e resto da divisão inteira (MOD). Todas essas operações têm a sintaxe COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde COMANDO é uma dessas operações, OPERANDO1 é uma das 10 variáveis (R0 a R9) e OPERANDO2 pode ser uma das 10 variáveis ou um valor inteiro (entre 0 e 999). Todas as operações modificam o valor de OPERANDO1, sendo assim MOV R4,100 é o equivalente a atribuir o valor 100 a R4, enquanto que MUL R3,R8 é o equivalente a multiplicar R3 por R8 e atribuir o resultado a R3. A operação DIV, assim como a MOD, retornam 0 (zero) se OPERANDO2 for 0 ou se a variável equivalente tiver valor 0. Ou seja, DIV R4,0 é o equivalente a MOV R4,0. Por divisão inteira, entendemos a parte inteira do quociente da divisão (sem a parte fracionária). Por exemplo, a divisão inteira de 7 por 2 é 3 (sendo o resto 1). Existem seis comandos de fluxo de decisão: IFEQ (se igual), IFNEQ (se diferente), IFG (se maior), IFL (se menor), IFGE (se maior ou igual) e IFLE (se menor ou igual). A sintaxe de todos eles é COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde OPERANDO1 e OPERANDO2 podem ser variáveis (R0 a R9) ou valores inteiros (entre 0 e 999). Assim, o comando IFEQ R4,123 é o equivalente a testar se R4 é igual a 123. Caso a condição testada seja verdadeira, o programa continua a executar normalmente a linha subsequente ao comando de decisão. Caso a condição seja falsa, o programa passa a executar a linha subsequente ao ENDIF mais próximo. Todos os comandos de decisão devem ter um comando ENDIF correspondente. Finalmente, existem os comandos CALL e RET, ambos com a sintaxe COMANDO OPERANDO, onde OPERANDO é uma variável (R0..R9) ou valor direto (entre 0 e 999). O comando CALL chama o próprio programa novamente, passando OPERANDO como parâmetro de entrada, ou seja, atribuindo o valor de OPERANDO à variavel R0. Já RET termina a execução do programa, retornando o valor de OPERANDO como o resultado de saída. A última linha do programa sempre será um comando RET. Observe que, caso o programa chame a si mesmo através do comando CALL, quando a execução voltar, o valor de R9 vai estar alterado com o valor retornado pelo programa. Note também que todas as variáveis (R0..R9) são locais, ou seja, uma chamada subsequente ao programa não pode alterar os valores guardados nas variáveis da instância anterior, com exceção, naturalmente, do valor de R9 que recebe o retorno da instância chamada. O exemplo a seguir ilustra um programa que calcula o fatorial de um número. 1a linha: Verifica se o valor de R0 vale 0, caso positivo, executa a próxima linha, caso contrário, pula para a 4a linha (ENDIF mais próximo). 2a linha: Retorna 1 como saída do programa. 3a linha: Marca o fim do bloco de decisão iniciado na primeira linha. 4a linha: Atribui o valor de R0 a R1 (R1 ← R0). 5a linha: Diminui 1 de R1 (R1 ← R1 - 1). 6a linha: Chama o programa passando R1 como parâmetro de entrada. 7a linha: Guarda o valor de R9 (retornado pela chamada anterior) em R2 (R2 ← R9). 8a linha: Multiplica o valor de R2 por R0 (R2 ← R2 * R0). 9a linha: Retorna o valor de R2 como saída do programa. A tabela seguir traz um resumo dos comandos para referência:",
        "titulo": "O Problema da Parada",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste se inicia com dois inteiros, L e N, representando respectivamente o número de linhas do programa (1 ≤ L ≤ 100) e o valor do parâmetro de entrada do programa (0 ≤ N ≤ 100). As L linhas seguintes contêm o programa. Pode-se assumir que ele está sempre sintaticamente correto de acordo com as regras definidas acima. Todos os comandos (bem como o nome das variáveis) só conterão letras maiúsculas. O final da entrada é marcado pelo caso em que L = N = 0 e não deve ser processado."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1211",
        "saida": "Para cada caso de teste imprima uma linha informando o maior número possível de caracteres economizados por este processo.",
        "descricao": "Devido ao grande número de reclamações, a companhia telefônica de São Petersburgo está sendo obrigada a investir pesado na melhora de seus serviços. Para isso a companhia decidiu diminuir o orçamento de alguns setores para aumentar o de outros mais essenciais. Um dos setores que terá seu orçamento reduzido é o de impressão de listas telefônicas. Com um orçamento reduzido, o setor de impressão de listas telefônicas não consegue comprar toner suficiente para imprimir as listas completas. Como os números de telefone são impressos alinhados na vertical, foi sugerida a seguinte solução: a partir do segundo número de telefone impresso, os dígitos iniciais do próximo número a ser impresso que coincidirem com os do número acima são omitidos, ficando apenas um espaço em branco. Por exemplo, para os números 535456, 535488, 536566 e 835456 a impressão é a seguinte: 5 3 5 4 5 6         8 8     6 5 6 6 8 3 5 4 5 6 Note que esta impressão economizou a impressão de 6 caracteres. A companhia telefonica cogitou também não imprimir os sufixos repetidos, mas nos testes feitos viram que a resposta não foi boa para o usuário e decidiram, portanto, fazer apenas a eliminação em prefixos. Para saber se a economia será suficiente, o setor de impressão quer saber o número máximo de caracteres que podem ser omitidos. No entanto, como em qualquer cidade grande, são vários os números telefônicos e eles não querem gastar homens-hora para calcular manualmente este valor. Então cabe a você, novo empregado da companhia, automatizar a economia feita pelo toner, no número de caracteres.",
        "titulo": "Lista Telefônica Econômica",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada caso de teste contém um inteiro N, que informa o número de telefones na lista. As próximas N (1 ≤ N ≤ 105) linhas possuem, cada uma delas, um telefone Xi, de até 200 caracteres. Para um mesmo caso de teste os números de telefone têm a mesma quantidade de caracteres. Um número de telefone pode começar com o caracter ’0’."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1535",
        "saida": "Se houver apenas um único número N em uma única linha, imprima dois números inteiros não negativos a e b, tal que a * a - b * b = N. Se o número não pode ser expresso em tal formato, então imprima a mensagem “Bachelor Number.” em uma única linha caso esse número seja par e imprima a mensagem “Spinster Number.” caso esse número seja ímpar. Se existirem dois números n1 e n2 na entrada então imprima quantos números \"bachelor\" estão entre n1 e n2 (incluindo n1 e n2). Observe que (n1 ≤ n2 e (n2 - n1) ≤ 1000000).",
        "descricao": "Pode qualquer número ser expresso como uma subtração de dois quadrados? Os números, que podem ser expressos de tal forma, são chamados de números \"square-couple\" ou, traduzindo, casal quadrado. Seu trabalho é descobrir: a) Se um número é um número casal quadrado.  b) Se o número for casal quadrado então encontre esse forma de expressá-lo. c) Descubra quantos números casal quadrado estão dentro de um determinado intervalo (incluindo os números das pontas).",
        "titulo": "Números Casal-Solteirão-Solteirona",
        "entrada": "Cada conjunto de entrada é dado por uma única linha. Cada conjunto de entrada pode conter um ou dois números inteiros de 32 bits com sinal. A entrada é terminada por EOF (Fim de Arquivo)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1804",
        "saida": "Para cada linha \"? i\", imprima uma linha contendo o número de pessoas da excursão ainda remascentes atrás do buggy i naquele momento. Mas não seja bugueiro (nada de pôr bugs em seu código)!",
        "descricao": "Aconteceu na semana passada em Beberibe, CE, o VIII Latin-American Algorithms, Graphs and Optimisation Symposium (LAGOS 2015), uma conferência que reuniu matemáticos e cientistas da Computação do mundo todo para discutirem alguns desafios computacionais. A fim de que os participantes pudessem relaxar um pouco, os organizadores do evento contrataram buggies para levar os pesquisadores a alguns pontos turísticos da região. Os buggies saíram do hotel numa fila, um atrás do outro. Quem conhece os passeios de buggy do Ceará sabe que o turista pode pedir ao bugueiro um passeio com emoção ou sem emoção. No entanto, a excursão do LAGOS contou com uma emoção extra. Como em Marte atualmente há uma carência de pesquisadores em Algoritmos, Grafos e Otimização, alienígenas marcianos começaram a abduzir alguns buggies, com todas as pessoas a bordo (inclusive o pobre bugueiro, que nada tinha a ver com a história). Foi muito triste nosso planeta ter perdido mentes tão brilhantes para Marte, mas a tragédia teria sido menor se cada bugueiro mantivesse atualizada a informação de quantas pessoas no total estavam nos buggies atrás dele — assim ele poderia perceber a aproximação da sonda alienígena e acelerar o buggy.",
        "titulo": "Precisa-se de Matemáticos em Marte",
        "entrada": "Um inteiro N (1 ≤ N ≤ 105) constitui a primeira linha da entrada, o qual representa o número de buggies que deixaram o hotel. A segunda linha da entrada é constituída por N inteiros pi (1 ≤ pi ≤ 5, 1 ≤ i ≤ N), cada um representando o número de pessoas no buggy i (incluindo o bugueiro). Cada uma das linhas seguintes pode ser constituída: por um caractere 'a' seguido de um inteiro i (1 ≤ i ≤ N), o qual caracteriza a abdução do buggy i (que ainda não havia sido abduzido); por um caractere '?' seguido de um inteiro i (1 ≤ i ≤ N), o qual caracteriza que, naquele momento, o bugueiro do (ainda) não abduzido buggy i gostaria de saber quantas pessoas da excursão restavam atrás do seu buggy. Considere que o identificador i de um buggy não muda. Assim, o terceiro buggy a deixar o hotel deverá sempre ser identificado pelo inteiro 3, mesmo que os buggies 1 e 2 sejam abduzidos."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1022",
        "saida": "A saída consiste em um valor racional, seguido de um sinal de igualdade e outro valor racional, que é a simplificação do primeiro valor. No caso do primeiro valor não poder ser simplificado, o mesmo deve ser repetido após o sinal de igualdade.",
        "descricao": "A tarefa aqui neste problema é ler uma expressão matemática na forma de dois números Racionais (numerador / denominador) e apresentar o resultado da operação. Cada operando ou operador é separado por um espaço em branco. A sequência de cada linha que contém a expressão a ser lida é: número, caractere, número, caractere, número, caractere, número. A resposta deverá ser apresentada e posteriormente simplificada. Deverá então ser apresentado o sinal de igualdade e em seguida a resposta simplificada. No caso de não ser possível uma simplificação, deve ser apresentada a mesma resposta após o sinal de igualdade. Considerando N1 e D1 como numerador e denominador da primeira fração, segue a orientação de como deverá ser realizada cada uma das operações: Soma: (N1*D2 + N2*D1) / (D1*D2) Subtração: (N1*D2 - N2*D1) / (D1*D2) Multiplicação: (N1*N2) / (D1*D2) Divisão: (N1/D1) / (N2/D2), ou seja (N1*D2)/(N2*D1)",
        "titulo": "TDA Racional",
        "entrada": "A entrada contem vários casos de teste. A primeira linha de cada caso de teste contem um inteiro N (1 ≤ N ≤ 1*104), indicando a quantidade de casos de teste que devem ser lidos logo a seguir. Cada caso de teste contém um valor racional X (1 ≤ X ≤ 1000), uma operação (-, +, * ou /) e outro valor racional Y (1 ≤ Y ≤ 1000)."
    },
    {
        "nivel": "5",
        "assunto": "4",
        "numero": "1301",
        "saida": "Para cada caso de teste imprima uma linha com uma string que representa o resultado de todos os comandos de produto do caso de teste. O caracte i da string representa o resultado do enésimo (i-th) comando de produto. Se o resultado do comando for positivo, o caractere deve ser '+' (mais), se o resultado for negativo, o caractere deve ser '-' (menos), se o resultado é zero, o caractere deve ser '0' (zero) .",
        "descricao": "É normal sentir-se preocupado e tenso o dia antes de uma competição de programação. Para relaxar, você saiu para beber com alguns amigos em um pub. Para manter sua mente afiada para o dia seguinte, você decidiu jogar o seguinte jogo. Para começar, seus amigos vão dar-lhe uma seqüência de N inteiros X1, X2, ..., XN. Em seguida, haverá K rodadas; a cada rodada, seus amigos vão emitir um comando, que pode ser: um comando de alteração, quando seus amigos querem mudar um dos valores na seqüência, ou um comando de produto, quando seus amigos lhe dar dois valores I, J e perguntar-lhe se o produto XI x XI+1 x ... x XJ-1 x XJ é positivo, negativo ou zero. ​ Uma vez que você está em um pub, foi decidido que a pena para uma resposta errada é beber um copo de cerveja. Você está preocupado como isso poderia afetá-lo negativamente na competição do dia seguinte, e você não quer verificar se a teoria do pico de Ballmer é correta. Felizmente, seus amigos lhe deram o direito de usar o seu notebook. Uma vez que você confia mais nas suas habilidades de codificação do que na sua matemática, você decidiu escrever um programa que o ajudasse no jogo.",
        "titulo": "Produto do Intervalo",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros N e K respectivamente, indicando o número de elementos na seqüência e o número de rodadas do jogo (1 ≤ N, K ≤ 105). A segunda linha contém N inteiros Xi que representam os valores iniciais da sequência (-100 ≤ Xi ≤ 100 para i = 1, 2, ..., N). Cada uma das próximas K linhas descreve um comando e começa com uma letra maiúscula 'C' ou 'P'. Se a letra é 'C', a linha descreve um comando de mudança, e a letra é seguida por dois inteiros I e V,indicando que os XI devem receber o valor V (1 ≤ I ≤ N e -100 ≤ V ≤ 100). Se a letra for 'P', a linha de comando descreve um produto, e a letra é seguida por dois números inteiros I e J, indicando que o produto a partir de XI até XJ, inclusive deve ser calculado (1 ≤ I ≤ J ≤ N). Dentro de cada teste há pelo menos um comando de produto."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1874",
        "saida": "Para cada caso de teste, imprima as pilhas após a inserção dos novos blocos. Em alguns casos, a fila de novos blocos será mais que suficiente para que todas as pilhas fiquem do mesmo tamanho. Neste caso, desconsidere os blocos que sobrarem na fila.",
        "descricao": "A Empresa Blocos Regulares Inventando Serventia de Algo, mais conhecida como BRISA, construi blocos, sempre do mesmo tamanho. Um detalhe que chama a atenção está na forma em que os blocos são armazenados em estoque, depois de fabricados. Os mesmos são formados por uma fileira de pilhas. A retirada de uma caixa do estoque é um tanto quando desordenado, pois se escolhe uma pilha aleatoriamente e retira-se algum bloco do topo dela. Porém, a forma de armazenamento é um tanto quanto interessante: uma esteira, localizada na reta do topo da pilha mais à direita do estoque, é utilizada. Com isto, forma-se uma fila com os novos blocos. A esteira roda da direita para a esquerda. Assim que houver um espaço vago em uma das pilhas seguintes, o bloco será inserido na mesma, caso não haja, ele vai avançando até as pilhas seguintes. Segue abaixo um exemplo de inserção de blocos.",
        "titulo": "Empurrando Blocos",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste terá 3 números inteiros, H, P e F, indicando a altura da pilha mais a direita , a quantidade de pilhas de blocos e o tamanho da fila de blocos a ser inserida. Após isto, serão lidos H linhas com P valores, com valores 1, representando onde tem bloco, e 0, representando onde não tem bloco. A seguir, será lida uma linha com F valores, representando a fila com os blocos novos. O último caso de teste é representado por três zeros, e não deverá ser processado."
    },
    {
        "nivel": "6",
        "assunto": "4",
        "numero": "1388",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha na saída, contendo uma permutação dos números {1, 2, ..., N}, que quando ordenada usando bubblesort produz o mesmo número de intercâmbios no mesmo número de turnos especificados na entrada. Ao imprimir a permutação, deixe um espaço em branco entre dois elementos consecutivos. Se mais de uma permutação existir, imprima a maior na ordem lexicográfica padrão para sequências de números (a ordem lexicográfica da permutação a1, a2, ..., aN é maior do que a da permutação b1, b2, ..., bN se para algum 1 ≤ i ≤ N temos ai > bi e o prefixo a1, a2, ..., ai-1 é igual ao prefixo b1, b2, ..., bi-1). Em outras palavras, caso exista mais de uma solução, imprima aquela onde o primeiro elemento da permutação é o maior possível. Caso exista mais de uma solução satisfazendo essa restrição, imprima, dentre estas, aquela onde o segundo elemento é o maior possível. Caso exista mais de uma solução satisfazendo as duas restrições anteriores, imprima, dentre estas, a solução onde o terceiro elemento é o maior possível, e assim sucessivamente. Para toda entrada haverá pelo menos uma permutação solução.",
        "descricao": "Uma das operações mais frequentes em computação é ordenar uma sequência de objetos. Portanto, não é surpreendente que essa operação seja também uma das mais estudadas. Um algoritmo bem simples para ordenação é chamado Bubblesort. Ele consiste de vários turnos. A cada turno o algoritmo simplesmente itera sobre a sequência trocando de posição dois elementos consecutivos se eles estiverem fora de ordem. O algoritmo termina quando nenhum elemento trocou de posição em um turno. O nome Bubblesort (ordenação das bolhas) deriva do fato de que elementos menores (\"mais leves\") movem-se na direção de suas posições finais na sequência ordenada (movem-se na direção do início da sequência) durante os turnos, como bolhas na água. A figura abaixo mostra uma implementação do algoritmo em pseudocódigo: Para i variando de 1 até N faça   Para j variando de N - 1 a i faça     Se seq [j - 1]> seq [j] então       Intercambie os elementos seq[j - 1] e seq[j]     Fim-Se   Fim-Para   Se nenhum elemento trocou de lugar então     Final do algoritmo   Fim-Se Fim-Para Por exemplo, ao ordenar a sequência [5, 4, 3, 2, 1] usando o algoritmo acima, quatro turnos são necessários. No primeiro turno ocorrem quatro intercâmbios: 1 x 2, 1 x 3, 1 x 4 e 1 x 5; no segundo turno ocorrem três intercâmbios: 2 x 3, 2 x 4 e 2 x 5; no terceiro turno ocorrem dois intercâmbios: 3 x 4 e 3 x 5; no quarto turno ocorre um intercâmbio: 4 x 5; no quinto turno nenhum intercâmbio ocorre e o algoritmo termina. Embora simples de entender, provar correto e implementar, o algoritmo bubblesort é muito ineficiente: o número de comparações entre elementos durante sua execução é, em média, diretamente proporcional a N2, onde N é o número de elementos na sequência. Você foi requisitado para fazer uma \"engenharia reversa\" no bubblesort, ou seja, dados o comprimento da sequência, o número de turnos necessários para a ordenação e o número de intercâmbios ocorridos em cada turno, seu programa deve descobrir uma possível sequência que, quando ordenada, produza exatamente o mesmo número de intercâmbios nos turnos.",
        "titulo": "Onde Estão as Bolhas?",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M que indicam respectivamente o número de elementos (1 ≤ N ≤ 100.000) na sequência que está sendo ordenada, e o número de turnos (0 ≤ M ≤ 100.000) necessários para ordenar a sequência usando bubblesort. A segunda linha de um caso de teste contém M inteiros Xi, indicando o número de intercâmbios em cada turno i (1 ≤ Xi ≤ N - 1, para 1 ≤ i ≤ M). O final da entrada é indicado por N = M = 0."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2186",
        "saida": "Para cada operação 1, imprima uma única linha contendo a quantidade de ocorrências do caractere C no intervalo entre as posições A e B. Para cada operação 2, imprima a primeira e a última ocorrência do caractere C no intervalo entre as posições A e B. Caso não exista o caractere C no intervalo, imprima -1. Ao final das N operações, imprima a string resultante das operações.",
        "descricao": "Como você já deve saber, Prant é um garoto muito indeciso, de tal modo que foi muito difícil escolher o nome do seu cachorro. Depois de Prant escolher o nome S para seu cachorro, Bino propôs um desafio.  O desafio de Bino consiste em N rodadas, e em cada rodada pode ser realizada uma das seguintes operações sobre o nome S: 1 A B C: Retornar a quantidade de ocorrências de um caractere C no intervalo entre as posições A e B. Por exemplo, para S = “abcda”, A = 1, B = 5 e C = ‘a’, a resposta é 2. 2 A B C: Encontrar a primeira e a última ocorrência de um caractere C no intervalo entre as posições A e B. Por exemplo, para S = “abcda”, A = 1, B = 5 e C = ‘a’, a primeira ocorrência de C é na posição 1, e a última é na posição 5. 3 A B: Inverter todas as letras no intervalo entre as posições A e B. Por exemplo, para S = “abcd”, A = 2 e B = 4, após a operação, S = “adcb”. 4 A C: Adicionar um caractere C antes o caractere da posição A. Por exemplo, para S = “abcd”, A = 2 e C = ‘z’, após a operação, S = “azbcd”.",
        "titulo": "Bino, Prant e a Indecisao",
        "entrada": "A primeira linha da entrada consiste de dois inteiros L ( 1 ≤ L ≤  106) e N ( 1 ≤ N ≤  105), representando a quantidade de letras que formam inicialmente o nome S, e a quantidade de rodas, respectivamente. A segunda linha contém uma string S, representando o nome inicial do cachorro de Prant. Então, seguiram N linhas, representando as N operações realizadas. É garantido que a string S contém apenas letras minúsculas do alfabeto."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2064",
        "saida": "A saída deve ser composta de duas linhas. A primeira linha deve conter um inteiro V que representa o maior número de letras favoritas presente no nome que deve ser escolhido por Prant. A segunda linha deve conter o nome que dever ser escolhido (se houver mais de uma resposta imprima o primeiro nome gerado por Prant que contém V letras favoritas).",
        "descricao": "Prant é garoto muito indeciso, qualquer tipo de escolha é uma tarefa muito difícil e estressante para o menino. Porém recentemente Prant ganhou um cachorro e tem que escolher um nome para seu novo mascote. Ele tem um nome em mente, mas por ser muito indeciso de tempos em tempos Prant realiza uma operação de troca de letras, em que ele escolhe duas letras, A e B, e todas as letras A viram B e todas letras B viram A, assim trocando o nome de seu cachorro. É possível que alguma letra (A ou B) não esteja na palavra e ainda que A e B sejam a mesma letra, porque Prant fica muito nervoso ao fazer as operações. Para tomar uma decisão Prant sorteou algumas letras e as definiu como sendo suas letras favoritas (afinal Prant é muito indeciso, como ele iria escolher tais letras se não de maneira aleatória?) de modo que a melhor escolha de nome é a palavra que possui o maior número de letras favoritas. O problema é que Prant, devido ao nevorsimo, não consegue raciocinar na hora de definir as trocas de letras para formar o melhor nome possível, então ele continua fazendo trocas possivelmente ilógicas e assim alterando o nome do cão. Por exemplo se as letras fatoritas de Prant são {a, e, i, o, u}, o nome inicial do cão é \"abccdab\" com 2 letras favoritas e Prant realiza as seguintes operações de troca: troca(c, e), assim \"abccdab\" -> \"abeedab\", e agora o nome do cão é \"abeedab\" com 4 letras favoritas troca(b, i), assim \"abeedab\" -> \"aieedai\", e agora o nome do cão é \"aieedai\" com 6 letras favoritas troca(a, f), assim \"aieedai\" -> \"fieedfi\", e agora o nome do cão é \"fieedfi\" com 4 letras favoritas troca(d, h), assim \"fieedfi\" -> \"fieehfi\", e agora o nome do cão é \"fieehfi\" com 4 letras favoritas O melhor nome gerado durante as operações foi o nome \"aieedai\", pois foi o nome gerado com maior número de letras favoritas. Sua tarefa é, sabendo o nome inicial do cachorro de Prant, as letras favoritas de Prant e as operações por ele realizadas em ordem, definir qual foi o melhor nome gerado para o cãozinho. Perceba que manter o nome inicial é uma opção e que Prant sempre realiza as operações independetemente de serem lógicas ou não.",
        "titulo": "Prant e a Indecisão",
        "entrada": "A primeira linha da entrada é composta por 3 inteiros: k, m, n (1 ≤ k ≤ 26, 1 ≤ m, n ≤ 100 000). Nas próximas duas linhas haverá duas strings, compostas apenas de letras minúsculas, de tamanho k e m respectivamente. A primeira string é composta por letras não repetidas e representa as letras favoritas de Prant. Já a segunda string é o nome inicial do cão de Prant (o primeiro nome que Prant havia pensado). As próximas n linhas são compostas de dois caracteres a e b que representam as letras envolvidas em cada operação de troca de letras."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1762",
        "saida": "Na primeira linha de saída deverá ser informado o peso total de presentes da lista de pedidos, com duas casas após a vírgula. Na segunda linha será informado o número de trenós necessários para levar os presentes da lista de pedidos. Caso seja inserido na lista de pedidos um presente que não consta na lista do lote dos brinquedos, deverá ser impresso a seguinte mensagem “NAO LISTADO: ” seguido pelo nome do presente. Deixar uma linha em branco após a impressão de cada caso de teste.",
        "descricao": "Todos os anos quando chega o natal, o Papai Noel tem a importante e difícil tarefa de entregar milhares de presentes a todas as crianças do mundo. O que ninguém sabe, é que ele desenvolveu uma maneira eficaz para conseguir entregar todos os presentes antes que o natal acabe, e essa maneira consiste numa infinidade de trenós espalhados pelo globo entregando simultaneamente todos os presentes. Dessa maneira fica muito mais fácil para completar as entregas, mas por conta de ser um número muito grande de presentes a ser entregue, o Papai Noel sempre tem dificuldades em saber quantos trenós ele disponibilizará para cada lote de presentes. Noel tem uma lista com o número de presentes de cada lote contendo o nome do presente e o seu peso, e ele também sabe a capacidade de carga de cada trenó. Sabendo essas informações, todo ano, Noel pede ajuda a um estudante para desenvolver um programa que possa ajuda-lo a saber quantos trenós serão necessários para cada lote. Sua tarefa é desenvolver um programa que armazene um número determinado de presentes de um lote, cada presente é armazenado com o nome do brinquedo e o seu respectivo peso em Quilogramas(considerar duas casas após a vírgula), depois de armazenar a lista, você irá informar a capacidade de carga do trenó, e após você deve informar a lista de pedidos, contendo o nome do presente e a sua quantidade, feito isso você deve calcular o peso total dos presentes e determinar quantos trenós serão necessários para efetuar a entrega.",
        "titulo": "Trenós do Papai Noel",
        "entrada": "A primeira linha contem um número inteiro Y correspondendo a o número de casos de testes, após você deverá informar um inteiro T (0 < T < 1000) que corresponde a o número de presentes do lote, após você deve ler a lista de presentes, uma string N com o nome do presente e um valor de ponto flutuante K (0 < K <= 100 ) que corresponde ao peso em quilogramas do presente, o nome e o peso devem ficar em linhas separadas. Após inserir todos os T presentes você deve informar um valor de ponto flutuante M (0 < M <= 100) que corresponde em quilogramas a capacidade de carga do trenó, considerar duas casas após a vírgula. Após inserir o valor M você deve informar a lista que contém X pedidos da seguinte forma, uma string P correspondendo ao nome do presente, na próxima linha um valor inteiro J (0 < J <= 100) que corresponde a quantidade desse presente. Essa lista só termina quando forem inseridos um \"-\" para o nome do presente e \"0\" para o peso do presente."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1511",
        "saida": "Imprima todas as linhas de saída na sequência, para todos os casos de teste. Para cada query do tipo “QUERY x y d” deverá ser respondido na saida padrão o gcd (Greatest Common Divisor) de todas as posição que estão a uma distância manhattan de no máximo 'd' da posição do tabuleiro (x, y).",
        "descricao": "Dado um grid infinito totalmente setado para o valor zero e Q queries dos tipos: SET x y d: Seta a posição (x,y) do tabuleiro para o valor d QUERY x y d: Retorna o gcd (Greatest Common Divisor) de todas as posições do tabuleiro que estão a uma distância de manhattan de no máximo d da posição (x,y).",
        "titulo": "Tabuleiro GCD",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. A primeira linha de cada caso de teste contém um inteiro Q (1 <= Q <= 105) que representa a quantidade de queries a serem feitas. As proximas Q linhas contém cada uma query, podendo ser dos seguintes tipos: SET x y d QUERY x y d 0 <= |x|, |y| <= 500 0 <= d <= 106"
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1259",
        "saida": "Apresente todos os valores lidos na entrada segundo a ordem apresentada acima. Cada número deve ser impresso em uma linha, conforme exemplo abaixo.",
        "descricao": "Considerando a entrada de valores inteiros não negativos, ordene estes valores segundo o seguinte critério: Primeiro os Pares Depois os Ímpares Sendo que deverão ser apresentados os pares em ordem crescente e depois os ímpares em ordem decrescente.",
        "titulo": "Pares e Ímpares",
        "entrada": "A primeira linha de entrada contém um único inteiro positivo N (1 < N < 105) Este é o número de linhas de entrada que vem logo a seguir. As próximas N linhas conterão, cada uma delas, um valor inteiro não negativo."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1673",
        "saida": "Cada linha da entrada é codificada separadamente como descrito acima. A nova linha no final de cada linha não é codificada, mas é passada diretamente para a saída.",
        "descricao": "Sua tarefa é escrever um programa que realiza uma simples Codificação Run-Length, como descrita nas regras abaixo. Qualquer sequencia entre 2 e 9 caracteres idênticos é codificada por dois caracteres. O primeiro caractere é a largura da sequência, representada por um dos caracteres entre 2 a 9. O segundo caractere é o valor do caractere repetido. Uma sequência de mais de 9 caracteres identicos repetidos é resolvida com primeiro codificando 9 caracteres, depois os caracteres restantes. Qualquer sequência de caracteres que não contém repetições consecutivas de qualquer caracteres é representada por um caractere '1' seguido da sequência de caracteres e terminado com outro '1'. Se um '1' aparecer como parte da sequencia, ele será terminado com um '1', tendo então dois caracteres '1' como saída.",
        "titulo": "Codificação Run-length",
        "entrada": "A entrada consiste de letras(maiúsculas e minúsculas), digitos, espaços e pontuação. Toda linha é terminada com um caractere terminador de linha."
    },
    {
        "nivel": "6",
        "assunto": "4",
        "numero": "1274",
        "saida": "Cada problema de projeto da P-Network na entrada deverá gerar uma única linha de saída. Se o problema não tem solução a saída deve ser No solution. Caso contrário, a linha deverá conter uma descrição de uma P-Network qualquer (com N fios e menos do que 4N2 cursos), que realiza o conjunto de transformações solicitado. A descrição é dada por um conjunto de valores M, s1, s2, . . . sM, em que os valores consecutivos são separados por um único espaço em branco. O valor de M é o tamanho da P-Network, isto é, o número de cursos. Os valores de s1, s2, . . . sM descrevem os cursos da P-Network; isto deve ser entendido como o i-ésimo curso da esquerda para a direita, que liga os fios si e 1 + si (1 ≤ i ≤ M). Observe que 0 ≤ M < 4N2 , enquanto 1 ≤ si < N para cada 1 ≤ i ≤ M.",
        "descricao": "Pretty Networks Inc. é uma empresa que constrói alguns artefatos curiosos, cujo propósito é transformar um conjunto de valores de entrada de uma determinada maneira. A transformação é determinada por aquilo que eles chamam de uma P-Network. A imagem abaixo mostra um exemplo de uma P-Network. No caso geral, uma P-Network de ordem N e tamanho M, tem N fios horizontais numerados de 1, 2,. . . N, e M cursos verticais. Cada curso conecta dois fios consecutivos. Não há dois cursos diferentes tocando o mesmo ponto de nenhum fio e não há nenhum curso tocando o ponto mais à esquerda ou mais à direita de qualquer fio. O exemplo acima é uma P-Network de ordem 5 e tamanho 9. A transformação determinada por uma P-Network pode ser explicada através de um conjunto de regras que governam a maneira como um P-Network deve ser percorrida: 1. comece no ponto mais à esquerda de um fio, e vá para a direita; 2. cada vez que um curso aparecer mude para o fio conectado, e continue indo da esquerda para a direita; 3. pare quando o ponto mais à direita de um fio for alcançado. Se partindo do fio i a travessia termina no fio j, dizemos que o P-Network transforma i em j, e denotamos isso com i → j. No exemplo acima, o P-Network determina o conjunto de transformações {1 → 3, 2 → 5, 3 → 4, 4 → 1, 5 → 2}. A empresa Pretty Networks contratou você para resolver o seguinte problema de projeto da P-Network: dado um número N e um conjunto de transformações {1 → i1, 2 → i2, . . . N → iN}, decida se uma P-Network de ordem N pode ser construída para realizar estas transformações e, nesse caso, forneça uma P-Network que faça isto. Quando existe uma solução com um determinado tamanho, em muitos casos há uma outra solução com um tamanho maior. Cientistas da Pretty Networks afirmaram que se existe uma solução para um problema de projeto da P-Network, então esta solução tem tamanho inferior a 4N2 . Portanto, eles estão interessados apenas em soluções com um tamanho inferior a este limite.",
        "titulo": "P-Networks",
        "entrada": "A entrada tem um certo número de problemas de projeto da P-Network. Cada problema é descrito em apenas uma linha que contém os valores N, i1, i2,. . . iN, separados por um único espaço em branco. O valor de N é a ordem da P-Network desejada, isto é, o seu número de fios (1 ≤ N ≤ 20). Os valores i1, i2,. . . iN representam que a P-Network deve determinar o conjunto de transformações {1 → i1, 2 → i2,. . . N → iN} (1 ≤ ij ≤ N, para cada 1 ≤ j ≤ N). A entrada termina com uma linha com N = 0 e que não deve ser processada."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1944",
        "saida": "Para cada grupo de visitantes, deve ser informado quantos destes receberão brindes.",
        "descricao": "A FACE em 2015 está apoiando a terceira edição da Maratona de Programação, mas desta vez a organização solicitou sua ajuda para criar um sistema de sorteio utilizando as letras da palavra FACE. Como a feira utiliza uma proposta diferenciada e alegre, cada participante que entra na feira ganha 4 letras, uma de cada cor e em formato de bloco de madeira, conforme Figura 1, e deve inserí-las num painel. Se, no momento da inserção, as 4 letras formarem o contrário das 4 últimas letras, o visitante ganhará um brinde. Figura 1 - Entrada de FACE no painel seguido de ACEF. Por exemplo: suponha que já tiveram 3 participantes que entraram na feira e o painél ficou da seguinte forma: F A C E E C F A A C F E A C E F. Note que sempre que o painél fica vazio, assim como no início do evento, as letras F A C E são inseridas pela organização do evento. Agora, na entrada do quarto participante, ele inseriu as letras F E C A e, com isso, receberá um brinde por fechar o contrário de A C E F. Após essa situação, o painél deve ficar F A C E E C F A A C F E. Escreva um algoritmo que, dadas as letras recebidas e inseridas pelos participantes, diga quantos participantes ganharam brindes. Lembre-se que sempre que o painel fica vazio as letras F A C E são inseridas pela organização do evento.",
        "titulo": "BRINDE FACE 2015",
        "entrada": "A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100), representando o número de visitantes que vão receber as letras. Em cada uma das N linhas seguintes deve ser informada a combinação das 4 letras que o visitante deseja inserir no painel, separadas por espaço."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1523",
        "saida": "Para cada caso de teste imprima uma linha, contendo a palavra “Sim”, caso seja possível que todos os N motoristas façam uso do estacionamento, ou “Nao” caso contrário.",
        "descricao": "Após muito tempo juntando dinheiro, Rafael finalmente conseguiu comprar seu carro (parcelado, é claro). Chega de pegar ônibus, agora sua vida será mais fácil. Pelo menos isso é o que ele pensava, até ouvir falar do estacionamento perto da faculdade onde ele decidiu estacionar o carro todos os dias. O estacionamento tem apenas um corredor, com largura o suficiente para acomodar um carro, e profundidade suficiente para acomodar K carros, um atrás do outro. Como este estacionamento só tem um portão, só é possível entrar e sair por ele. Quando o primeiro carro entra no estacionamento, o mesmo ocupa a posição próxima à parede, ao fundo do estacionamento. Todos os próximos carros estacionam logo atrás dele, formando uma fila. Obviamente, não é possível que um carro passe por cima de outro, portanto só é possível que um carro saia do estacionamento se ele for o último da fila. Dados o horário de chegada e saída prevista de N motoristas, incluindo Rafael, diga se é possível que todos consigam estacionar e remover seus carros no estacionamento citado.",
        "titulo": "Estacionamento Linear",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e K (3 ≤ N ≤ 10⁴, 1 ≤ K ≤ 10³), representando o número de motoristas que farão uso do estacionamento, e o número de carros que o estacionamento consegue comportar, respectivamente. Em seguida haverá N linhas, cada uma contendo dois inteiros Ci e Si (1 ≤ Ci, Si ≤ 10⁵), representando, respectivamente, o horário de chegada e saída do motorista i (1 ≤ i ≤ N). Os valores de Ci são dados de forma crescente, ou seja, Ci < Ci+1 para todo 1 ≤ i < N. Não haverá mais de um motorista que chegam ao mesmo tempo, e nem mais de um motorista que saiam ao mesmo tempo. É possível que um motorista consiga estacionar no mesmo momento em que outro motorista deseja sair. O último caso de teste é indicado quando N = K = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1281",
        "saida": "Para cada caso de teste, imprima o valor que será gasto por dona Parcinova no seguinte formato: R$ seguido de um espaço e seguido do valor, com 2 casas decimais, conforme o exemplo abaixo.",
        "descricao": "Dona Parcinova costuma ir regularmente à feira para comprar frutas e legumes. Ela pediu então à sua filha, Mangojata, que a ajudasse com as contas e que fizesse um programa que calculasse o valor que precisa levar para poder comprar tudo que está em sua lista de compras, considerando a quantidade de cada tipo de fruta ou legume e os preços destes itens.",
        "titulo": "Ida à Feira",
        "entrada": "A primeira linha de entrada contém um inteiro N que indica a quantidade de idas à feira de dona Parcinova (que nada mais é do que o número de casos de teste que vem a seguir). Cada caso de teste inicia com um inteiro M que indica a quantidade de produtos que estão disponíveis para venda na feira. Seguem os M produtos com seus preços respectivos por unidade ou Kg. A próxima linha de entrada contém um inteiro P (1 ≤ P ≤ M) que indica a quantidade de diferentes produtos que dona Parcinova deseja comprar. Seguem P linhas contendo cada uma delas um texto (com até 50 caracteres) e um valor inteiro, que indicam respectivamente o nome de cada produto e a quantidade deste produto."
    }
]