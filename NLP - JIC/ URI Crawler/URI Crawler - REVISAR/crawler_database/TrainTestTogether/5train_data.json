[
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1199",
        "saida": "Para cada linha de entrada (exceto a última) deve ser produzido uma linha de saída. Todo número hexadecimal deve ser precedido na saída por '0x' (zero xis).",
        "descricao": "Neste problema você é solicitado a escrever um simples programa de conversão de base. A entrada será um valor hexadecimal ou decimal. Você deverá converter cada valor da entrada. Se o valor for hexadecimal, você deve convertê-lo para decimal e vice-versa. O valor hexadecimal inicia sempre com “0x” ou também, é aquele valor cuja segunda casa contém a letra 'x'.",
        "titulo": "Conversão Simples de Base",
        "entrada": "A entrada contém vários casos de teste. Cada linha de entrada, com exceção da última, contém um número não-negativo, decimal ou hexa. O valor decimal será menor ou igual a 231. A última linha contém um número negativo que não deve ser processado, indicando o encerramento do programa."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1745",
        "saida": "Apresente uma linha com um inteiro que representa o número de substhreengs contido em S.",
        "descricao": "Substrings são strings formadas pela escolha de um subconjunto de caracteres contíguos a partir de uma string. Isto é bem conhecido. Um pouco mais obscura é a definição de substhreengs. A substhreeng é uma substring que cumpre com os seguintes requisitos adicionais: 1. É não-vazio, e composto inteiramente de dígitos de base 10. 2. Interpretada na base 10 (permitindo zeros extras), o inteiro resultante é um múltiplo de 3. Por exemplo, a string \"130a303\" contém 9 substhreengs: o substhreeng \"3\" três vezes, os substhreengs \"30\" e \"0\" duas vezes cada, e os substhreengs \"303\" e \"03\", uma vez cada. A substring \"30a3\" não é um substhreeng porque não é inteiramente composto por dígitos de base 10, enquanto a substring \"13\" não é um substhreeng porque 13 não é um múltiplo de três. Note que dois substhreengs são consideradas diferentes se eles são diferentes em comprimento ou começar numa posição diferente, mesmo se os caracteres selecionados são os mesmos. Dado uma string, você está convidado a contar o número de substhreengs que ela contém.",
        "titulo": "Contando Substhreengs",
        "entrada": "A entrada consiste de uma única linha que contém uma string não-vazia S de, no máximo, 10 6 caracteres. Cada personagem do S ou é um dígito ou uma letra minúscula."
    },
    {
        "nivel": "8",
        "assunto": "5",
        "numero": "1949",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha. Se for possível chegar ao estado final a partir do estado inicial dado, a linha da saída deve conter apenas um inteiro, o menor número de pulsos de relógio necessários para o LFSR atingir o estado final. Caso não seja possível, a linha deve conter apenas o caractere '*'.",
        "descricao": "Um Registrador de Deslocamento é um circuito que desloca de uma posição os elementos de um vetor de bits. O registrador de deslocamento tem uma entrada (um bit) e uma saída (também um bit), e é comandado por um pulso de relógio. Quando o pulso ocorre, o bit de entrada se transforma no bit menos significativo do vetor, o bit mais significativo é jogado na saída do registrador, e todos os outros bits são deslocados de uma posiçãoo em direção ao bit mais significativo do vetor (em direçãoo à saída). Um Registrador de Deslocamento com Retroalimentação Linear (em inglês, LFSR) é um registrador de deslocamento no qual o bit de entrada é determinado pelo valor do OU-EXCLUSIVO de alguns dos bits do registrador antes do pulso de relógio. Os bits que são utilizados na retroalimentação do registrador são chamados de torneiras. A figura abaixo mostra um LFSR de 8 bits, com três torneiras (bits 0, 3 e 5). Neste problema, você deve escrever um programa que, dados o número de bits de um LFSR, quais bits são utilizados na retroalimentação, um estado inicial e um estado final do LFSR, determine quantos pulsos de relógio serão necessários para que, partindo do estado inicial, o LFSR chegue ao estado final (ou determinar que isso é impossível).",
        "titulo": "Registrador de Deslocamento",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por três linhas. A primeira linha contém dois números inteiros N, T, indicando respectivamente o número de bits (2 ≤ N ≤ 32) e o número de torneiras (2 ≤ T ≤ N). Os bits são identificados por inteiros de 0 (bit menos significativo) a N − 1 (bit mais significativo). A segunda linha contém T inteiros, separados por espaços, apresentando os identificadores dos bits que são torneiras, em ordem crescente. O bit 0 sempre é uma torneira. A terceira linha contém dois números em notação hexadecimal I e F, separados por um espaço em branco, representando respectivamente o estado inicial e o estado final do LFSR. O final da entrada é indicado por uma linha que contém dois zeros separados por espaços em branco."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1697",
        "saida": "Para cada caso de teste imprima uma linha contendo o maior valor de X que Jaida pode obter. Se for impossível, imprima 0.",
        "descricao": "Jaida adora inteiros positivos. Agora ela está jogando um jogo chamado \"jogo de multiplicar\". \"Jogo de multiplicar\" é um jogo educativo no qual você tem uma lista de N números. Você pode escolher qualquer par desses números e adicionar o resultado da multiplicação deles na lista. Você pode fazer essa operação quantas vezes quiser. Jaida quer que a lista contenha todos os números de 1 a X (mas pode haver repetições ou números maiores). Ajude a pequena Jaida dizendo-a qual é o maior valor de X que ela pode obter.",
        "titulo": "Jaida e o Jogo Multiplicativo",
        "entrada": "A primeira linha da entrada contém um inteiro T que representa o número de casos de teste. Cada caso de teste é descrito em 2 linhas: A primeira linha contém o número N (0 < N <= 106) como explicado acima. A segunda linha contém N inteiros positivos ai, que são os números iniciais da lista de Jaida (0 < ai <= 109)."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1624",
        "saida": "Para cada caso de teste imprima um inteiro que representa o total dos produtos que Dr Luis Cláudio conseguir levar para casa.",
        "descricao": "Dr Luis Cláudio, um sujeito antenado com as promoções oferecidas pelo supermercado VemQueTem, o qual fica próximo à sua residência, anda muito sorridente ultimamente. Descobriu-se que ele foi sorteado em uma promoção oferecida pelo supermercado. Nesta promoção, a pessoa poderia entrar no supermercado, sozinho, e levar todos os produtos que pudesse carregar. Porém, algumas regras foram estabelecidas. 1)Entrar sozinho 2)Apenas um produto de cada tipo pode ser levado 3)Uma lista L contendo os preços e pesos dos produtos deve ser seguida 4)Um peso P máximo foi estabelecido Você foi contratado pelo vizinho curioso do Dr Luis Cláudio para descobrir qual o valor total em mercadorias que ele conseguiu levar para casa.",
        "titulo": "Promoção",
        "entrada": "A entrada consiste de T casos de testes. Cada caso de teste começa com um inteiro N (1 ≤ N ≤ 100) que indica o número de produtos da lista L. As N linhas seguintes são formadas por 2 inteiros p e P. O primeiro inteiro, p (1 ≤ p ≤ 1000), representa o preço do produto. O segundo inteiro P,(1 ≤ P ≤ 30) representa o peso do produto. A próxima linha contém um inteiro M, que indica o peso máximo permitido. O fim da entrada é representado por um 0."
    },
    {
        "nivel": "8",
        "assunto": "5",
        "numero": "1526",
        "saida": "Para cada instância, imprima a quantidade máxima de lanches que podem ser entregues, se tal quantidade for positiva, ou \"impossivel\", caso contrário.",
        "descricao": "Um dos critérios para uma maratona de programação se considerada um sucesso é que os competidores não passem fome. Preocupada com isso, a organização da maratona escolheu um dos melancias para se dedicar a tarefa de ir buscar os lanches no fornecedor. Para facilitar o transporte dos lanches o melancia recebeu um carrinho de mão. Mesmo com o carrinho, essa é uma tarefa muito cansativa, por isso a organização permitiu ao melancia comer um dos lanches que ele transporta a cada 100 metros percorridos (indo ou voltando). Além disso, a cada 100 metros, foram preparadas cabanas onde é possível armazenar os lanches temporariamente. Dessa forma os lanches não precisam ser transportados diretamente do fornecedor ao local da competição. Para saber se o melancia comeu mais lanches do que deveria, a organização quer que você escreva um programa que determine a quantidade máxima de lanches que podem ser entregues. Você pode supor que o melancia parte do fornecedor e come um lanche sempre que permitido.",
        "titulo": "Transportando Lanches",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de uma linha com três inteiros, L, D, e C (10 ≤ L, D, C ≤ 100.000.000) indicando, respectivamente, a quantidade de lanches comprados, a distância entre o fornecedor e o local da competição em hectômetros e quantos lanches cabem no carrinho."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1169",
        "saida": "Para cada caso de teste, imprima a quantidade de kgs de trigo que o monge esperava receber.",
        "descricao": "Uma rainha requisitou os serviços de um monge e disse-lhe que pagaria qualquer preço. O monge, necessitando de alimentos, perguntou a rainha se o pagamento poderia ser feito em grãos de trigo dispostos em um tabuleiro de damas, de forma que o primeiro quadrado tivesse apenas um grão, e os quadrados subseqüentes, o dobro do quadrado anterior. A rainha considerou o pagamento barato e pediu que o serviço fosse executado, porém, um dos cavaleiros que estava presente e entendia um pouco de matemática alertou-a que seria impossível executar o pagamento, pois a quantidade de grão seria muito alta. Curiosa, a rainha solicitou então a este cavaleiro que era bom em cálculo, que fizesse um programa que recebesse como entrada o número de quadrados a serem usados em um tabuleiro de damas e apresentasse a quantidade de kg de trigo correspondente, sabendo que cada 12 grãos do cereal correspondem a uma grama. Finalmente, o cálculo da quantidade deverá caber em um valor inteiro de 64 bits sem sinal.",
        "titulo": "Trigo no Tabuleiro",
        "entrada": "A primeira linha de entrada contem um único inteiro N (1 ≤ N ≤ 100), indicando o número de casos de teste. Cada caso de teste contém um único inteiro X (1 ≤ X ≤ 64), indicando o número de casas do tabuleiro que serão utilizadas."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2084",
        "saida": "Imprima uma linha contendo um único dígito, indicando se há um vencedor no primeiro turno ou não. Se houver um vencedor no primeiro turno, o digito deve ser '1'; caso contrário (isto é, no caso de haver um segundo turno) o dígito deve ser '2'.",
        "descricao": "Agora eleições presidenciais estão sendo realizadas em Noglônia. Para um candidato ganhar no primeiro turno, ele deve obter mais votos do que cada um dos outros candidatos. Mas isso não é suficiente: ele também deve obter pelo menos 45% de todos os votos, ou, pelo menos, 40% de todos os votos e pelo menos 10% a mais de votos do que cada um dos outros candidatos. Se nenhum candidato vence no primeiro turno, uma nova eleição é realizada como um segundo turno. Benício é um jornalista político em Noglônia, e ele sempre quer ser o primeiro a ter as notícias. É por isso que ele coletou informações a partir de pesquisas, e quer saber se de acordo com estes um dos candidatos vai ganhar no primeiro turno, ou, pelo contrário, haverá um segundo turno. Benício precisa decidir isso com pressa, antes que alguém solte a noticia antes dele. Você pode ajudá-lo?",
        "titulo": "Eleições",
        "entrada": "A primeira linha contém um número inteiro N, que representa o número de candidatos (2 ≤ N ≤ 10). A segunda linha contém N números inteiros Vi que representam a quantidade de votos obtidos por cada um dos candidatos (0 ≤ Vi ≤ 1000 para i = 1, ..., N). Pelo menos um candidato obteve um voto, e não existem dois candidatos com o mesmo número de votos."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1967",
        "saida": "Imprima G linhas contendo C inteiros cada, de modo que o j-ésimo inteiro da i-ésima linha represente a quantia de bitcoins que a Reitoria precisa transferir para o curso i do campus j. Siga rigorosamente as mesmas regras de espaçamento entre colunas da entrada.",
        "descricao": "É o ano de 2.265, e a Universidade da Fronteira Final Sideral (UFFS) já conta com diversos campi espalhados pela galáxia, de modo que todos os cursos de graduação da UFFS são ofertados em todos os campi. Cada curso promove várias atividades por ano, e as atividades promovidas por um curso são as mesmas em todos os campi da UFFS. Para que cada atividade possa acontecer, a Universidade precisa comprar uma certa quantidade de materiais, mas os preços de cada material não são os mesmos para todos os campi. Um lápis, por exemplo, pode custar Ƀ2 (2 bitcoins) para o campus de Chapecó, no planeta Terra, e Ƀ7 (7 bitcoins) para o campus de ShiKahr, no planeta Vulcano. Apesar das diferenças de custo, nunca compensa comprar materiais num campus para enviá-los para outro campus, dados os elevadíssimos custos de transporte e taxas de importação e de exportação. Assim, a fim de que todas as atividades da Universidade possam ser realizadas, a Reitoria precisa transferir para cada curso de cada campus a quantia certa de bitcoins a fim de que os cursos possam eles próprios comprar os materiais.",
        "titulo": "A Fronteira Final",
        "entrada": "A primeira linha da entrada consiste de quatro inteiros positivos, G, A, M e C (G ≤ 600; A, C ≤ 100; M ≤ 2000), os quais representam respectivamente o número de cursos de graduação, o número total de tipos de atividade que podem ocorrer, o número total de tipos de material que podem ser necessários e o número de campi da UFFS. Os cursos são designados na entrada pelos inteiros de 1 a G, os tipos de atividade pelos inteiros de 1 a A, os tipos de material pelos inteiros de 1 a M e os campi pelos inteiros de 1 a C. Seguem, então, três tabelas de inteiros não-negativos. Cada tabela é precedida por uma linha em branco, entre duas colunas consecutivas de uma mesma tabela há uma coluna de espaços de largura 1, e espaços adicionais podem preceder cada inteiro duma tabela a fim de que todas as colunas daquela tabela fiquem alinhadas à direita e haja ao menos um inteiro por coluna que não seja precedido por espaços adicionais. A primeira tabela consiste de G linhas, cada uma contendo A inteiros não maiores que 10, de modo que o j-ésimo inteiro da i-ésima linha representa quantas atividades do tipo j um curso de graduação i precisa realizar no ano corrente. A segunda tabela consiste de A linhas, cada uma contendo M inteiros não maiores que 10, de modo que o j-ésimo inteiro da i-ésima linha representa de quantos materiais do tipo j a realização de uma atividade do tipo i precisa. A terceira e última tabela consiste de M linhas, cada uma contendo C inteiros não maiores que 100, de modo que o j-ésimo inteiro da i-ésima linha representa o preço, em bitcoins, de uma unidade do material do tipo i no planeta em que se situa o campus j."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1641",
        "saida": "Haverá uma saída para cada caso de teste informando se uma pizza cabe ou não na mesa com seu número do pedido. Uma pizza que toca a borda da mesa sem ultrapassá-la é considerada como válida. Considere o terceiro exemplo como ilustração deste caso.",
        "descricao": "Tradicionalmente depois do Local Contest em Louisiana, juízes e participantes vão juntos para seu restaurante favorito, Restaurante e Pizzaria do Alfredo. Os participantes estão realmente famintos após 5 horas de competição. Para pegar suas pizzas o mais rápido possível, eles decidiram pedir uma pizza grande para todos ao invés de várias pizzas pequenas. Eles gostariam de saber se é possível colocar uma pizza grande com formato retangular sobre a superfície de uma mesa redonda de modo que não fiquem partes penduradas na borda da mesa. Como todos estão cansados e famintos, escreva um programa que os ajude!",
        "titulo": "Restaurante e Pizzaria do Alfredo",
        "entrada": "A entrada possui vários casos de teste. Cada caso de teste começa com um número inteiro R, sendo o raio da superfície da mesa onde os participantes estão sentados (1 ≤ R ≤ 1000). Então 2 números inteiros W e L especificando a largura e altura da pizza (1 ≤ W ≤ L ≤ 1000). A entrada termina com R = 0. Caso contrário, 1 ≤ R ≤ 1000. Então seguem 2 números inteiros W e L especificando a largura e o comprimento da pizza, 1 ≤ W ≤ 1000."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1398",
        "saida": "Para cada número em binário, imprima \"YES\" se o número é divisível pelo número primo dado, ou \"NO\" caso contrário.",
        "descricao": "Oceano profundo Estou com tanto medo de mostrar meus sentimentos, Eu naveguei por um milhão de tetos Em meu quarto solitário Oceano profundo Os versos acima fazem parte de uma tradução livre da letra de uma música popular de Cliff Richard. Neste problema, iremos lidar com um tipo similar de pessoa. O nome dessa pessoa é Rampell-Stilt-Skin. Além disso, um outro fato importante: ele é um homem morto. Alguém o matou alguns dias atrás, e você é o detetive que deve resolver o mistério. O problema deste homem é que ele sempre tentou esconder suas informações e seus sentimentos \"abaixo do mar\" (isto é, fora de alcance). Ele escreveu um diário que contém algumas sentenças e um grande número em binário (este número pode ter até 10000 dígitos). Se o número é divisível pelo número primo 131071, então as sentenças são verdadeiras, e, caso contrário, elas são falsas. Dados números grandes em binário, você deve verificar se cada número é divisível por 131071 ou não. Seu algoritmo deve ser eficiente o bastante.",
        "titulo": "Oceano Profundo! Faça-o Raso!!",
        "entrada": "O arquivo de entrada contém vários números em binário. Cada número em binário começa em uma linha nova, mas pode ser expandido em várias linhas. Cada número é terminado pelo simbolo #. Nenhuma linha contém mais de 100 dígitos."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "2133",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia K, onde K é o número da instância atual. Na linha seguinte imprima sim se N é um número de Dinostratus, caso contrário imprima nao.",
        "descricao": "Descobertas arqueológicas recentes de pesquisadores da Universidade de Alberta, no Canadá, mostraram que uma estranha sequência de números eram encontrados nas paredes das pirâmides do Egito, nas ruínas de Macchu Picchu e nas pedras de Stonehenge. Intrigados com a aparente coincidência os pesquisadores acionaram o Departamento de Matemática para decifrar o que aquela sequência ou aqueles números tinham de especial. A descoberta foi estarrecedora. Todos os números eram gerados por matrizes de Dinostratus. Dinostratus foi um famoso matemático grego que viveu de 390 à 320 a.C. e trabalhou em importantes problemas de geometria como a quadratura do círculo. Dinostratus estudava matrizes M de dimensão 3 × 3 formada por 9 inteiros distintos com a propriedade que para toda posição (i, j), i = 1, . . . , 3, j = 1, . . . , 3 da matriz o elemento Mi,j é múltiplo dos seus vizinhos Mi-1,j, Mi-1,j-1 e Mi,j-1 (quando existirem). Em sua homenagem, dizemos que N é um número de Dinostratus se existir uma matriz M com a propriedade acima em que M3,3 = N. Veja um exemplo com N = 36. Veja um exemplo com N = 36. A relação entre os números de Dinostratus, as pirâmides do Egito, as pedras do Stonehenge e as ruínas de Macchu Picchu ainda permanece um grande mistério. Mas, os pesquisadores de Alberta estão dispostos a estudar estes números mágicos. Sua tarefa é fazer um programa que recebe um inteiro N e verifica se este é um número de Dinostratus.",
        "titulo": "Números de Dinostratus",
        "entrada": "A entrada é composta de diversas instâncias. Cada instância é dada por uma linha contendo um inteiro N (1 ≤ N ≤ 1048576). A entrada termina com final de arquivo."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1457",
        "saida": "Para cada instância imprima uma linha contendo o K-fatorial de N. É garantido que nenhuma instância na entrada possui resultado maior que 1018.",
        "descricao": "Todo computólogo que se preza conhece o livro \"O guia do mochileiro das galáxias\" (The Hitchhiker’s Guide to the Galaxy) e sabe qual é a resposta para a pergunta fundamental sobre a vida, o universo e tudo mais. Mas, o que poucos sabem, é que a história de Douglas Adams é baseada em uma lenda egípcia, de um oráculo situado na cidade de Eskendereyya (Alexandria). Alexandria hoje é a maior cidade do Egito, com mais de 4 milhões de habitantes. Fica no delta do Nilo, e extende-se por 32km na costa do Mediterrâneo. Na Antiguidade, a cidade fundada em 331 a.C. por Alexandre, o Grande, foi umas das principais cidades do mundo e lá ficava o Farol de Alexandria (uma das 7 maravilhas do mundo antigo), a Biblioteca de Alexandria (a maior do mundo antigo) além de outras obras fantásticas. A lenda diz também que lá ficava o grande oráculo de Alexandria. Os habitantes da cidade entregavam ao oráculo pequenos bilhetes com números anotados, e recebiam de volta um número, que seria a resposta a uma pergunta fundamental do universo relacionada aos dois números dados. No seu tratado de 227 d.C. Cleómenes de Naucratis (que se tornou administrador de Alexandria quando Alexandre partiu para suas conquistas) relata alguns resultados obtidos do oráculo: Dados 8 e 1 o oráculo devolvia 40320; Dados 10 e 3, devolvia 280; Dados 4 e 2, devolvia 8; Dados 21 e 19, devolvia 42. Estudos modernos dão conta que o que o oráculo devolvia nada mais era que uma generalização do fatorial de um número inteiro. Como sabemos, N! = N x (N-1) x ... x 1. O oráculo devolvia para os dados N e K o K-fatorial de N , ou seja, N x (N-K) x (N-2K) x (N-3K) x ..., em que o produto era feito enquanto a diferença é maior ou igual a 1. Podemos representar o K-fatorial de um número por ele seguido por K exclamações: 8! = 40320; 10!!! = 280; 4!! = 8; 21!!!!!!!!!!!!!!!!!!! = 42 Dizem que ao ler sobre a lenda do oráculo de Eskendereyya, Douglas Adams teve sua inspiração para sua obra. Também, no Egito está a inspiração do Restaurante do fim do universo, mas isso é outra história... Sua tarefa é dado inteiros N e K determinar K-fatorial de N.",
        "titulo": "Oráculo de Alexandria",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém um inteiro N seguido de K pontos de exclamação, onde 1 ≤ N ≤ 100 e 1 ≤ K ≤ 20."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1323",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o número de diferentes quadrados para a entrada correspondente.",
        "descricao": "Richard Phillips Feynman era um físico americano muito famoso e ganhador do Prêmio Nobel de Física. Ele trabalhava em física teórica e também foi pioneiro no campo da computação quântica. Ele visitou a América do Sul por dez meses, dando palestras e aproveitando a vida nos trópicos. Ele também é conhecido pelos livros \"Surely You’re Joking, Mr. Feynman!\" e \"What Do You Care What Other People Think?\", que inclui algumas de suas aventuras abaixo do equador. Sua paixão da vida inteira era resolver e criar quebra-cabeças, trancas e códigos. Recentemente, um fazendeiro idoso da América do Sul, que hospedou o jovem físico em 1949, achou alguns papéis e notas que acredita-se terem pertencido a Feynman. Entre anotações sobre mesóns e eletromagnetismo, havia um guardanapo onde ele escreveu um simples desafio: \"quantos quadrados diferentes existem em um quadriculado de N x N quadrados?\". No mesmo guardanapo havia um desenho, que está reproduzido abaixo, mostrando que para N = 2, a resposta é 5. ​",
        "titulo": "Feynman",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste é composto de uma única linha, contendo apenas um inteiro N, representando o número de quadrados em cada lado do quadriculado (1 ≤ N ≤ 100). O final da entrada é indicado por uma linha contendo apenas um zero."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1580",
        "saida": "Para cada palavra imprima uma linha contendo um inteiro que representa o número de anagramas que é possível formar com aquela palavra. Como este número pode ser muito grande, imprima o resto que ele deixa quando dividido por 109 + 7.",
        "descricao": "Há muito tempo atrás, numa galáxia muito, muito distante, a Unidade Federativa Fazedora de Segredos (UFFS) constantemente enviava e-mails para a Unidade Receptora do Império (URI) com os códigos que deveriam ser trocados de hora em hora no sistema de segurança da Estrela da Morte. Com medo de que os e-mails fossem interceptados pela Aliança Rebelde, a UFFS assinava cada e-mail com um dos 12 anagramas diferentes de sua própria sigla, como FUFS ou SUFF, por exemplo. Não demorou muito para que a prática virasse mania entre os órgãos imperiais, e alguns stormtroopers mais curiosos começaram a se perguntar quantos anagramas teria uma palavra qualquer.",
        "titulo": "Quid Est Veritas? Est Vir Qui Adest!",
        "entrada": "A entrada é composta por uma lista de palavras, uma por linha, e termina com EOF (fim de arquivo). Compõem uma palavra no mínimo uma e no máximo 103 letras do alfabeto latino, maiúsculas apenas, sem espaços nem quaisquer outros símbolos."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2069",
        "saida": "Imprima quantos centímetros tem o lado da mesa quadrada da Rainha da Internet. Se houver mais de uma resposta possível, imprima a menor.",
        "descricao": "Inês Venezuela resolveu gravar os vídeos que enviou ao programa GranHermano em CDs, um vídeo por CD. Após colocar cada CD numa caixinha quadrada, ela percebeu que era possível organizar os CDs de modo a cobrirem perfeitamente uma mesa quadrada sua sem que CDs fossem colocados uns sobre os outros. Ana e Beto são dois amigos que são grandes fãs de Inês Venezuela. Eles também enviaram muitos vídeos ao GranHermano e também gravaram seus vídeos em CDs, um vídeo por CD. Porém, diferentemente da Panterona, eles querem organizar seus vídeos em mochilas de modo que: em cada mochila haja apenas ou CDs de Ana ou CDs de Beto; o número N de CDs em todas as mochilas seja sempre o mesmo. Eles perceberam que não há necessariamente só uma possibilidade para o valor de N, mas que, para todas as possibilidades de valores para N, seria possível também organizar todos os CDs de Inês Venezuela em mochilas de modo que em cada mochila houvesse exatamente N CDs de Inês Venezuela. Sabendo quantos vídeos Ana e Beto enviaram ao GranHermano cada, e sabendo que o lado de cada caixinha quadrada utilizada por Inês Venezuela mede 1 centímetro, calcule quanto mede o lado da mesa quadrada de Inês Brasil.",
        "titulo": "A Mesa Quadrada de Inês Venezuela",
        "entrada": "A entrada consiste apenas de dois inteiros positivos A e B (A, B ≤ 109), os quais representam respectivamente o número de CDs de Ana e o número de CDs de Beto."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1230",
        "saida": "Para cada caso de teste, determine se existe atribuição de valores a f(x) para os pontos inteiros x ∈ [n] \\ S tal que f(x)dx = y, isto é, a área sob f(x) entre os extremos 0 e n seja igual a y. Em caso negativo, seu programa deve imprimir uma linha contendo apenas o caractere ‘N’. Em caso afirmativo, seu programa deve imprimir uma linha contendo o caractere ‘S’, seguido dos valores de f(x) para os pontos inteiros x ∈ [n] \\ S, e, em ordem crescente de valores de x. O caractere inicial e os valores seguintes, se houver, devem ser separados por um espaço em branco. Caso mais de uma solução seja possível, imprima aquela que for lexicograficamente menor.",
        "descricao": "Dado um inteiro positivo n, denotaremos por [n] o intervalo real {x : 0 ≤ x ≤ n}. Uma função f : [n] ⇒ R é parcialmente especificada, sendo fornecidos valores de f apenas em pontos de um subconjunto S de [n]. O conjunto S satisfaz as seguintes propriedades: 1. Os pontos em S são todos inteiros. 2. Os extremos 0 e n de [n] estão ambos em S. A função f satisfaz as seguintes propriedades: 1. Os valores def nos pontos inteiros de [n] são inteiros. 2. Para cada ponto inteiro x em [n] \\ S (ou seja, nos pontos inteiros de [n] que não estão em S), a função f é monótona no intervalo [x − 1, x + 1]. Em outras palavras, pelo menos uma das desigualdades f(x − 1) ≤ f(x) ≤ f(x + 1) ou f(x − 1) ≥ f(x) ≥ f(x + 1) é satisfeita. 3. Para cada ponto não inteiro x em [n], o valor de f(x) é dado pela interpolação linear de f(⌊x⌋) e f(⌈x⌉), isto é, f(x) = (x − ⌊x⌋)f(⌊x⌋) + (⌈x⌉ − x)f(⌈x⌉). Temos ainda a liberdade de especificar os valores de f nos pontos inteiros de [n] \\ S (note no entanto que S pode conter todos os pontos inteiros de [n]). Gostaríamos de utilizar essa flexibilidade para fazer com que f(x)dx = y, isto é, a área sob f(x) entre os extremos 0 e n seja igual a y, um valor dado. Seu problema então é decidir se isso é possível ou não.",
        "titulo": "Integral",
        "entrada": "A primeira linha de um caso de teste contém três inteiros, N (1 ≤ N ≤ 106), M e Y (0 ≤ Y ≤ 109), respectivamente a amplitude do intervalo, o tamanho do conjunto S e o valor de y. Cada uma das M linhas seguintes descreve a função f em um ponto de S, contendo dois inteiros X (0 ≤ X ≤ N, ∀X ∈ S) e F (0 ≤ F ≤ 106), representando f(X) = F. Os valores de X não estão necessariamente em ordem crescente. Obs.: f(x)dx ≤ 109 para qualquer atribuição de valores a f(x) para x ∈ [n] \\ S satisfazendo as \\restrições do enunciado."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1537",
        "saida": "Para cada caso de teste imprima uma linha contendo um inteiro, representando o número de maneiras que a fila do banco pode estar ordenada. Como o resultado pode ser um valor muito alto, imprima o resultado com resto de divisão em 1000000009.",
        "descricao": "André, Bruno e Carlos são amigos a um bom tempo, e se tem uma coisa que eles sabem um sobre o outro é o quanto eles são pontuais. André é conhecido por ser sempre o último a chegar em um compromisso entre o três, e Carlos é sempre o primeiro. Bruno sempre chega antes de André, mas nunca antes de Carlos. Chegou o fim do mês e os três precisam ir ao banco para pagar algumas contas. Contando com eles, há N pessoas na fila para usar o caixa. Sabendo o quanto eles são pontuais entre si, de quantas maneiras possíveis a fila do banco pode estar ordenada? Lembre-se que as regras acima só se aplicam entre eles, por exemplo, Carlos sempre chega antes que Bruno e André, mas pode chegar depois de outras pessoas na fila. Duas ordenações de fila são consideradas diferentes se ao menos uma pessoa está em um lugar diferente nas duas ordenações.",
        "titulo": "Fila do Banco",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (3 ≤ N ≤ 10⁵), indicando o número de pessoas na fila, incluindo André, Bruno e Carlos. O último caso de teste é indicado quando N = 0."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1736",
        "saida": "Para cada caso de teste imprima uma única linha que contém a árvore correspondente, denotada como descrito acima. Observe que, em geral, há muitas maneiras para denotar tal árvore: escolha sua favorita.",
        "descricao": "Uma árvore (isto é, um grafo conexo sem ciclos) com os vértices numerados por números inteiros 1, 2, ..., n é dado. O código \"Prüfer\" de tal estrutura é construído da seguinte forma: a folha (um vértice que tem uma única aresta incidente) com o menor número é escolhido. Esta folha, juntamente com a sua aresta incidente é removida do grafo, enquanto que o número do vértice que era adjacente à folha é anotado. No grafo obtido, este procedimento é repetido, até que haja apenas um vértice restante (que, a propósito, sempre tem o número n). A sequência com n-1 números anotados, é chamado de código de Prüfer da árvore. Sua tarefa é reconstruir uma árvore, dado o seu código de Prüfer. A árvore deve ser indicada por uma palavra da linguagem especificada pela seguinte gramática: T ::= \"(\" N S \")\" S ::= \" \" T S     | vazio N ::= número Ou seja, as árvores têm parênteses em torno delas, e um número que indica o identificador do vértice raiz, seguido por arbitrariamente muitas (talvez nenhuma) subárvores separadas por um único caractere de espaço. Como um exemplo, dê uma olhada na árvore na figura abaixo que é indicado na primeira linha do exemplo de saída. Observe que, de acordo com a definição dada acima, a raiz de uma árvore pode ser uma folha também. Apenas para facilitar a notação nós designamos um vértice como raiz. Normalmente, o que estamos tratando aqui é chamado de \"árvore não enraizada\".",
        "titulo": "Decodifique a Árvore",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste especifica o código de Prüfer de uma árvore em uma linha. Você encontrará n-1 números separados por um único espaço. A entrada é terminada por EOF. Você pode assumir que 1 ≤ n ≤ 50."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1729",
        "saida": "Para cada time deverá ser impresso uma linha contendo o numero do time t e o tempo médio no formato \"m:ss\". Se ao menos um corredor do time foi desclassificado, a saída devera ser \"-\". Olhe o exemplo de Saída para o formato exato de apresentação.",
        "descricao": "Uma corrida de revezamento é feita para dois ou mais times de corredores. Cada membro de um time corre uma parte da corrida. Sua tarefa é ajudar a computar o resultado de uma corrida de revezamento. Você tem que avaliar varios times. É dado uma lista com os tempos das seções da corrida de cada time. Você deve calcular o tempo médio por quilômetro ao longo de toda a distância. Isto é fácil, certo? Então se você gosta de um pouco de diversão e desafio, você provavelmente irá gostar de uma corrida de revezamento. Estudantes da universidade de Ulm participaram da corrida de revezamento \"SOLA\", em Zurique, Suiça.",
        "titulo": "Média Não é Rápida o Suficiente!",
        "entrada": "A primeira linha da entrada especifica o número N de seções seguido pela distancia total D, em kilometros, da corrida de revezamento. Você pode assumir que 1 ≤ N ≤ 20 e 0.0 < D < 200.00. Cada linha seguinte possui informação sobre um time: o número (inteiro) do time T e seguido por N resultados de cada seção, separado por um espaço. O tempo é dado no formato \"h:mm:ss\", sendo horas, minutos e segundos números inteiros. Se algum corredor foi desclassificado, o tempo da corrida será denotado por \"-:--:--\". E no final, a linha é acabada por um caracter de \"nova linha\". Entrada é terminada por EOF."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1316",
        "saida": "Para cada caso de teste o programa deverá produzir uma linha de saída. Se for possível distribuir os chocolates como foi relatado na declaração do problema, imprima o número de caixas a ser preenchido com chocolate Mindt, seguido de espaço, seguido pela lista do número de caixas, em ordem ascendente. Cada número de caixa na lista deve ser seguido de espaço. Se for impossível distribuir os chocolates, imprima \"Impossible to distribute\". Se existem mais que uma solução, imprima qualquer uma.",
        "descricao": "Pedro viajou para a Europa para participar da Olimpíada Internacional de Informática e está voltando para casa. Já que todos os seus amigos pediram para que ele trouxesse alguns presentes, ele comprou dois grandes pacotes de chocolate (um do Mindt e um do Lilka). Cada um desses pacotes contém em certo número de pequenos chocolates. Comprar os dois grandes pacotes foi bem menos caro que comprar as caixas individuais dos mesmos. Em casa, Pedro tinha algumas caixas que guardou de outras viagens. Pedro pretende distribuir os chocolates que recém comprou nessas caixas, para dá-las a seus amigos. Assim que Pedro começou a encher as caixas, ele percebeu um grande problema: já que ele tem dois tipos de chocolates, se ele misturar chocolates de diferentes tipos nas caixas, o amigo que receber a caixa perceberá o truque de Pedro para economizar dinheiro, e ficará magoado com ele. Você deve ajudar o pobre Pedro a distribuir os chocolates nas caixas de maneira a que cada caixa esteja cheia e com apenas um tipo de chocolate. Um certo número de pedaços podem acabar sobrando (Pedro ficará com eles se for o caso).",
        "titulo": "Compra Livre de Impostos",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso consiste em três linhas. A primeira linha contém dois inteiros M e L que indicam respectivamente o número de chocolates Mindt e Lilka que Pedro comprou, sendo (0 ≤ M, L ≤ 1000). A próxima linha contém um inteiro N representando o número de caixinhas que Pedro tem, sendo (N ≤ M + L). A terceira linha contém N inteiros indicando a capacidade Ci (Ci ≥ 0), onde Ci é o número de chocolates necessário para encher a caixa i. O final da entrada é indicado por M = L = 0."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1352",
        "saida": "Para cada caso de teste seu programa deve produzir uma linha de saída, contendo um valor real representando o prêmio a ser pago para cada bilhete premiado. O valor do prêmio deverá ser impresso com 2 dígitos de precisão, e o último dígito decimal deve ser arredondado. A entrada não irá conter os casos de teste onde diferenças de arredondamento são significativas.",
        "descricao": "O Governo da República Unida de Little Tower está desenvolvendo um novo tipo de loteria. O principal objetivo da loteria é arrecadar dinheiro para a construção do Estádio Olímpico Little Tower, para atender a 400.000 pessoas. A proposta do estádio é uma estratégia de Little Tower para sediar a Copa do Mundo em 2078. O sorteio será executado semanalmente. Cada semana, os bilhetes, sob a forma de cartões quadrados serão vendidos. Cada bilhete terá quadrados com números impressos no interior, de uma sequência de N linhas e N colunas, conforme mostrado na Figura 1. ​Fig 1: Um exemplo de bilhete para N = 3. Em cada bilhete nenhum número aparece duas vezes e, portanto, todos os números de 1 a N2 estarão presentes (em ordem aleatória de posições). Não haverá duas passagens iguais vendidas na mesma semana. No entanto, todos os possíveis diferentes bilhetes serão vendidos, uma vez que os cidadãos de Little Tower amam loterias. Os ingressos serão vendidos por T$ 1,00 (um Torreal, Unidade monetária de Little Tower). Para escolher o(s) vencedor(es), quatro números (entre 1 e N2) serão escolhidos aleatoriamente e o(s) bilhete(s) cujos números escolhidos sejam vértices de um quadrado, será concedido o prêmio em dinheiro. Por exemplo, o bilhete mostrado na Figura 1 é um bilhete premiado, se os números colhidos são (6, 3, 2, 9), (1, 4, 2, 5) ou (7, 8, 9, 6), mas não é um bilhete premiado, se os números colhidos forem (1, 7, 2, 9). Se mais de um bilhete for vencedor, os clientes que compraram os bilhetes vão compartilhar o prêmio da semana. O governo de Little Tower pede sua ajuda para determinar o valor do prêmio a ser pago para cada bilhete vencedor para um dado N, e uma determinada percentagem, sobre o montante total recebido pelos ingressos, que o governo quer pagar como prêmios.",
        "titulo": "Loteria Quadrada",
        "entrada": "A entrada conterá vários casos de teste. Cada teste é descrito em uma linha que contém dois números, um inteiro N e um valor de ponto flutuante (real) P, representando, respectivamente, o número de linhas (e colunas) dos bilhetes, bem como a percentagem do dinheiro recebido que será pago como prêmio (2 ≤ N ≤ 100 e 0 ≤ P ≤ 100.0). O final da entrada é indicado por N = P = 0."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1202",
        "saida": "Para cada instância imprima os 3 dígitos que devem estar escrito no cartão para a pessoa entrar no teatro.",
        "descricao": "Todos os anos, na época das chamadas “noites brancas” em que o sol não se põe sobre a cidade de São Petersburgo ocorre o “festival de artes das noites brancas”, que consiste de uma série de apresentações musicais, concertos, balés, e muito mais que atraem artistas de todo o mundo. É considerado uma das maiores manifestações populares de toda a Russia, uma vez que no auge das noites brancas, o festival costuma ter até um milhão de participantes circulando pelas ruas da cidade. O Teatro Mariinski recebe alguns dos melhores espetáculos e, uma vez que não tem ingressos suficientes para todos os que desejam assistir `as performances, costuma utilizar um sistema curioso e divertido para sortear os que poderão entrar no teatro. Cada pessoa que entra no teatro, interessado em assistir a uma apresentação escolhe uma fileira na qual gostaria de sentar e recebe um cartão com um número de 000 a 999 escrito nele. Este número é o código do sorteio daquela pessoa. Ao chegar `a entrada o atendente verifica a situação da fila na qual a pessoa sentará. A fila é descrita por uma sequência de ’1’s e ’0’s, onde 1 indica cadeira livre e 0 indica cadeira ocupada. Essa sequência é então interpretada como a representação binária do número n. A pessoa entrará com seus acompanhantes se o n-ésimo número da sequência de Fibonacci terminar exatamente com o número escrito no seu cartão. Assim, por exemplo, se a descrição da fileira é 100 a pessoa só entrará se possuir o cartão com o número 003.",
        "titulo": "Festival das Noites Brancas",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste em uma linha contendo uma descrição de fileira com até 10000 dígitos. A descrição de uma fileira é uma sequência de ’1’s e ’0’s, nunca começando com ’0’ (a primeira cadeira de todas as fileiras estão reservadas)."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "2149",
        "saida": "Para cada caso de teste, imprima o valor correspondente a posição solicitada na sequência.",
        "descricao": "Will Bonati mora na cidade de Belo Ar, juntamente com o a família de seu tio, Phill Bonati. Will costuma fazer algumas coisas que seu tio não gosta, como, por exemplo, ouvir música com volume alto. Certo dia, Phill propõe um desafio ao seu sobrinho. Ele passaria os primeiros números de uma sequência que ele criou. Se Will pudesse descobrir os próximos números desta sequência, seu tio teria que aturar as músicas dele, com volume alto, e ainda faria uma sopa para eles. Se não descobrisse, Will teria que parar de ouvir tais músicas, deixando o tio mais sossegado. Os primeiros números desta sequência estão logo abaixo. Will pediu a sua ajuda para escrever um programa que possa identificar os próximos números nesta sequência. 0     1     1     1     2     2     4     8     12 Escreva um programa que, dado um número inteiro, informe qual é o valor correspondente a esta posição na sequência proposta.",
        "titulo": "Sequência do Tio Phill Bonati",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (1 ≤ N ≤ 17), indicando a posição solicitada na sequência. A entrada termina com fim de arquivo."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1946",
        "saida": "A saída deve ser dada em uma única linha, que contem a probabilidade da bolinha cair na caixinha com o grande prêmio. A probabilidade deve ser exibida com 2 casas decimais.",
        "descricao": "Um grande show de TV distribui prêmios à platéia através da Pirâmide da Sorte. Um convidado joga uma bolinha no topo da pirâmide (que é um triângulo, na verdade) e ela vai descendo para a esquerda ou para a direita aleatoriamente até chegar em uma das caixinhas na base. O convidado ganha o prêmio que está associado àquela caixinha. O grande prêmio sempre fica no meio da base da pirâmide, que sempre tem, portanto, um número ímpar de caixinhas na base. Veja uma pirâmide com 15 caixinhas na figura. Os produtores do programa querem economizar o máximo possível e pediram para você calcular qual a probabilidade de alguém ganhar o grande prêmio, dado o número de caixinhas na base da pirâmide. Considere que, em cada ponto da pirâmide, existe a mesma chance da bolinha ir para a esquerda ou para a direita.",
        "titulo": "Pirâmide da Sorte",
        "entrada": "A entrada é dada em uma única linha, que contem o número S de caixinhas na base da pirâmide (3 ≤ S ≤ 4999). S é sempre ímpar."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1904",
        "saida": "Seu programa deve imprimir uma única linha contendo unicamente o nome do vencedor da partida, assumindo-se que ambos os jogadores jogam de maneira ótima. Se a partida empata, a linha da saída deverá conter unicamente o símbolo ?.",
        "descricao": "Alice e Bob são dois amigos que moram no planeta Terra 2.0, construído após a destruição do planeta Terra 1.0 pelos Vogons. Em Terra 2.0, tudo é melhorado. Os seres humanos, por exemplo, não possuem 10 dedos nas mãos, mas 10 milhões: 5 milhões em cada mão. O tradicional jogo ‘Par ou Ímpar’, muito jogado em Terra 1.0, também foi bastante melhorado. Alice e Bob jogam ‘Par ou Ímpar 2.0’ o tempo todo. Nesta versão do jogo, os jogadores devem ao mesmo tempo exibir usando as mãos um número inteiro entre 0 e 10 milhões. Se os números exibidos pelos dois jogadores forem iguais, configura-se empate. Senão, os jogadores se alternam escrevendo números num pedaço de papel. Sendo A o inteiro exibido por Alice no início da partida e B o inteiro exibido por Bob, cada número escrito no papel deve ser um produto de |A - B| fatores, sendo todos os fatores números primos, não necessariamente distintos, pertencentes ao intervalo definido pelos inteiros A e B. Além disso, não é permitido que um mesmo número seja escrito no papel mais de uma vez. Perde o jogador que, em sua vez de jogar, não for capaz de escrever no papel um número novo. Como Bob é um cavalheiro, Alice é sempre a primeira a jogar. Note que se não há primos no intervalo definido pelos inteiros A e B, Alice não consegue escrever número algum no papel na sua primeira jogada, e Bob vence a partida. Por exemplo, se A = 5 e B = 2, há somente 10 números que podem ser escritos no papel, os quais são: 8 = 2 × 2 × 2 12 = 2 × 2 × 3 20 = 2 × 2 × 5 18 = 2 × 3 × 3 30 = 2 × 3 × 5 50 = 2 × 5 × 5 27 = 3 × 3 × 3 45 = 3 × 3 × 5 75 = 3 × 5 × 5 125 = 5 × 5 × 5 Assim, se tanto Alice quanto Bob jogarem de maneira ótima, Bob vence a partida neste caso.",
        "titulo": "Par ou Ímpar 2.0",
        "entrada": "A entrada consiste de dois inteiros A e B (0 ≤ A, B ≤ 107), os quais representam respectivamente os números exibidos por Alice e Bob no início do jogo, conforme explicado anteriormente."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1465",
        "saida": "Para cada caso de teste, a saída deve consistir de um único número natural N em uma linha, indicando a potência tal que (A+B*i)N é real e seu valor absoluto não é maior que 230. Se não houver solução imprima \"TOO COMPLICATED\".",
        "descricao": "Números complexos não são apenas complexos, mas também complicados. Então é melhor tentar resolver outro problema... Nós temos um números complexo, a+b*i, onde i é a raiz quadrada de -1. Nós queremos torná-lo simples (isto é, real), elevando-o a uma potência natural. Por exemplo, o número complexo 2+2*i, pode ser simplificado elevando-o a 4: (2+2*i)4 = -64 Você tem que computar o menor número natural, N, (zero não está incluso) tal que (a+b*i)N é um número real. Além disso, pedimos que o valor absoluto de (a+b*i)N não seja maior que 230.",
        "titulo": "Complexo, Difícil e Complicado",
        "entrada": "A primeira linha da entrada contém um inteiro M, indicando o número de casos de teste. Para cada caso de teste, há uma linha com dois inteiros A e B. A é a parte real do número complexo, e B a parte imaginária. Você pode assumir que -10000 ≤ A ≤ 10000, e -10000 ≤ B ≤ 10000."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1805",
        "saida": "Para cada caso de teste, a saída consiste de uma linha contendo a soma dos números naturais do intervalo.",
        "descricao": "Um número natural é um inteiro não-negativo (0, 1, 2, 3, 4, 5,...). A sua tarefa neste problema é calcular a soma dos números naturais que estão presentes em um determinado intervalo [A, B] inclusive. Por exemplo, a soma dos números naturais no intervalo [2, 5] é 14 = (2+3+4+5).",
        "titulo": "Soma Natural",
        "entrada": "Cada caso de teste contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109), representando o limite inferior e o superior respectivamente."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2033",
        "saida": "Para cada caso, a saída é composta por três linhas. A primeira contendo a mensagem “DIFERENCA DE VALOR = “, seguido do valor da diferença entre o valor final com juros simples e o valor final com juros composto. Na segunda linha será exibida a mensagem “JUROS SIMPLES = “, seguido do valor da diferença entre o valor a ser emprestado e o valor final com juros simples. E na terceira linha será mostrada a mensagem “JUROS COMPOSTO = “, seguido do valor da diferença entre o valor a ser emprestado e o valor final com juros composto. - Não esqueça de colocar os espaços existentes nas mensagens  e de por uma quebra de linha no final de cada saída.",
        "descricao": "Sempre que pode, Danilo compra acessórios para o seu computador, pois trabalha como programador e procura sempre melhorar o desempenho de seu PC. Certa vez Danilo resolveu fazer um upgrade geral em seu computador, mas como estava sem dinheiro no momento, resolveu solicitar um empréstimo em dinheiro com seu amigo Maclaud que é agiota. Maclaud então resolveu emprestar o dinheiro ao seu amigo Danilo e o aconselhou a verificar qual seria sua dívida se fosse aplicado o regime de “Juros Simples” ou “Juros Composto”, pois assim saberia que o agiota não aumentaria o valor. Danilo ficou confuso e resolveu ir pra sua casa e calcular qual seriam os valores finais de acordo com cada regime de juros.  Mas Danilo não é muito bom de cálculo e resolveu pedir a ajuda de um programador que fosse capaz de criar um programa que informado o valor do empréstimo, a taxa de juros “mensal” e o prazo em “meses” que necessita para quitar o empréstimo com os juros, calcule e mostre: - A diferença entre o valor final com juros simples e o valor final com juros composto; - A diferença entre o valor a ser emprestado e o valor final com juros simples; - A diferença entre o valor a ser emprestado e o valor final com juros composto;",
        "titulo": "Juros Sobre o Empréstimo",
        "entrada": "A entrada consiste de vários casos de teste e termina com EOF. Cada caso contém dois valores de ponto flutuante de dupla precisão, um C (0.01 ≤ C ≤ 20000.00) e outro i (0.01 ≤ i ≤ 1.00), representando, respectivamente, o valor do empréstimo e a taxa de juros, e um inteiro n (1 ≤ n ≤ 20) representando a quantidade de “meses” referente ao prazo para efetuar o pagamento desse empréstimo ao agiota, já com os juros aplicados."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1926",
        "saida": "Para cada uma das Q consultas, imprima a quantidade de número primos gêmeos entre X e Y, inclusive.",
        "descricao": "Marianne está criando um jogo chamado “Herói da Guitarra”. É um trabalho extremamente cansativo, que requer bastante empenho e tempo, mas nada que uma greve não resolva. Ao abrir o seu email, Mari se deparou com um problema bastante curioso proposto pelos primos Renè e Leonhard e pelos gêmeos Isaac e Carl. O problema é descrito da seguinte forma: “Um número natural é dito primo, se ele possui exatamente dois divisores naturais distintos: o número um e ele mesmo. Um número é dito primo gêmeo, se e somente se, ele for primo e houver outro número primo qualquer cuja diferença absoluta entre esse dois números primos seja igual a dois. Por exemplo, o número 3 é um primo gêmeo, pois ele é primo e existe outro primo (5) tal que |3 - 5| = 2, já o número 23, apesar de ser primo, não é um primo gêmeo. Você poderia nos dizer quantos número primos gêmeos existem entre x e y, inclusive?” Marianne adora resolver esse tipo de problema, mas está muito ocupada criando o seu próprio jogo de Herói da Guitarra. Você pode ajudar?",
        "titulo": "Marianne e os Primos Gêmeos",
        "entrada": "A primeira linha de entrada irá conter um inteiro 1 ≤ Q ≤ 105, o número de consultas, cada uma das próximas Q linhas irá contér dois inteiros, 1 ≤ X, Y ≤ 106."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1434",
        "saida": "Para cada caso na entrada, seu programa deve produzir uma linha contendo a Inatividade do Império depois de N ciclos de simulação.",
        "descricao": "Nos tempos antigos, patrulheiros eram usados para garantir que todas as cidades do Império Romano estavam sob controle. O trabalho de um patrulheiro consistia em visitar continuamente as cidades do Império, tentando minimizar o intervalo entre duas visitas em cada cidade. A Sociedade Militar (SM) quer simular o comportamento de um patrulheiro para ver o quão eficientes eles eram. Cada ciclo de simulação corresponde a uma unidade de tempo. A Inatividade Instantânea da Cidade (IIC) para uma cidade X depois de T ciclos da simulação é o número de ciclos decorridos desde a última visita do patruleiro à cidade X (i.e o número de unidades de tempo que a cidade X mantem-se sem visita). Todas as cidades tem Inatividade Instantânea da Cidade igual a zero no início da simulação. A Inatividade Instantânea do Império (IIE) depois de cada ciclo é a soma da Inatividade Instantânea da Cidade de todas as cidades depois de tal ciclo. Finalmente, a Inatividade do Império (II) para uma simulação de N ciclos é a soma das Inatividades Instantâneas do Império depois de N ciclos de simulação. Depois de visitar a cidade X, o patruleiro sempre escolhe visitar a cidade vizinha Y com a máxima Inatividade Instantânea da Cidade (se mais de uma cidade tem a maior inatividade, aquela com o menor identificador é escolhida). As cidades X e Y são vizinhas se há uma rua conectando ambas diretamente, sem passar por nenhum cidade intermediária. No começo da simulação, o patruleiro é localizado em uma das cidades, e é dado um mapa do Império Romano contendo a descrição de todas as ruas do Império, indicando o comprimento (em kilometros) e quais duas cidades cada rua conecta. Uma rua entre as cidades X e Y pode ser usada tanto para ir de X à Y quanto para ir de Y à X. Assumindo que um patruleiro viaja um quilometro em uma unidade de tempo (uma simulação de ciclo) e que o tempo para visitar a cidade é neglicenciável (igual a zero), MS solicitou a você para determinar a Inatividade do Império depois de N ciclos de simulação. Para exemplificar, considere um Império que contém 3 cidades (1, 2 e 3) e duas ruas de comprimento 1 km. A primeira rua conecta as cidades 1 e 2, enquanto a segunda conecta as cidades 2 e 3. Abaixo você encontra um exemplo de uma simulação de 3 ciclos para tal cenário, considerando que o patrulheiro começa na cidade 1. Começo da Simulação Patrilheiro na: 1 IIC1 = 0, IIC2 = 0, IIC3 = 0 IIE = 0 II = 0 Depois do ciclo 1 Patrilheiro na: 2 IIC1 = 1, IIC2 = 0, IIC3 = 1 IIE = 2 II = 2 Depois do ciclo 2 Patrilheiro na: 1 IIC1 = 0, IIC2 = 1, IIC3 = 2 IIE = 3 II = 5 Depois do ciclo 3 Patrilheiro na: 2 IIC1 = 1, IIC2 = 0, IIC3 = 3 IIE = 4 II = 9 Assim sendo, em tal situação, depois de 3 ciclos de simulações a Inatividade do Império é 9.",
        "titulo": "Patrulheiros Romanos",
        "entrada": "A entrada consiste em vários casos de teste. A primeira linha de um caso de teste contém 4 inteiros C, R, N e S, indicando respectivamente a quantidade de cidades do Império (2 ≤ C ≤ 1000), o número de ruas (1 ≤ R ≤ C(C - 1) / 2 ), o número de ciclos a ser simulado (1 ≤ N 1000) e o identificador da cidade inicial do patruleiro (1 ≤ S ≤ C). Cada cidade é identificada por um inteiro distinto de 1 à C. Cada uma das R linhas seguintes contém três inteiros X, Y e D descrevendo a rua; X e Y representam cidades (1 ≤ X ≠ Y ≤ C) e D representa a distância (1 ≤ D ≤ 1000), em kilometros, da rua que conecta X e Y diretamente, sem passar através de qualquer outra cidade. Cada par de cidades X e Y aparecerão ao menos uma vez na descrição de rua. Você pode assumir que é sempre possível viajar de uma cidade para qualquer outra cidade no Império usando as ruas disponíveis. O fim da entrada é indicado por C = R = N = S = 0."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1170",
        "saida": "Para cada caso de teste, imprima uma linha contendo o número de dias que Blobs irá demorar para comer todo seu suprimento de comida, seguido da palavra \"dias\".",
        "descricao": "No planeta Alpha vive a criatura Blobs, que come precisamente 1/2 de seu suprimento de comida disponível todos os dias. Escreva um algoritmo que leia a capacidade inicial de suprimento de comida (em Kg), e calcule quantos dias passarão antes que Blobs coma todo esse suprimento até restar um quilo ou menos.",
        "titulo": "Blobs",
        "entrada": "A primeira linha de entrada contem um único inteiro N (1 ≤ N ≤ 1000), indicando o número de casos de teste. As N linhas seguintes contém um valor de ponto flutuante C (1 ≤ C ≤ 1000) correspondente à quantidade de comida disponível para Blobs."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1307",
        "saida": "Para cada par de strings, seu programa deve imprimir uma das seguintes mensagens: Pair #p: All you need is love! Pair #p: Love is not all you need! Onde p representa o número do par de entrada (que inicia em 1). Seu programa deve imprimir a primeira mensagem no caso de existir pelo menos uma string L válida tal que ambas strings S1 e S2 possam ser feitas somente de L. Caso contrário, imprima a segunda linha.",
        "descricao": "\"All you need is love. All you need is love. All you need is love, love... love is all you need.\" The Beatles Foi inventado um novo dispositivo poderoso pela Beautifull Internacional Machines Corporation chamado de \"Máquina do amor!\". Dada uma string feita de dígitos binários, a máquina do amor responde se isto é feito somente de amor, ou seja, se tudo o que você irá precisar para construir aquela string for somente amor. A definição de amor para a Máquina do amor é outra string de dígitos binários, fornecida por um operador humano. Vamos supor que nós temos uma string L que representa \"love\" e forneçamos uma string S para a máquina do amor. Diremos então que tudo o que você precisa é amor para construir S se pudermos repetidamente subtrair L de S até que sobre apenas L. A subtração definida aqui é a mesma subtração aritmética binária na base 2. Por definição é fácil de ver que L > S (em binário), então S não é feito de amor. Se S = L então S é obviamente feito de amor. Por exemplo, suponha S = \"11011\" e L = \"11\". Se repetidamente subtrairmos L de S, obteremos: 11011, 11000, 10101, 10010, 1111, 1100, 1001, 110, 11. Portanto, dado este L, tudo o que você necessita é amor para construir S. Devido a algumas limitações da Máquina do Amor, não será possível lidar com strings com zero à esquerda. Por exemplo \"0010101\", \"01110101\", \"011111\" etc. são string Inválidas. Strings que contenham apenas um dígito também são strings inválidas (isto é outra limitação). Sua tarefa para este problema é: dadas duas strings binárias válidas, S1 e S2, veja se é possível ter uma string L válida tal que ambas, S1 e S2 possam ser feitas apenas de L (i.e. dadas duas strings válidas S1 e S2, indique se existe pelo menos uma string L válida tal que ambas S1 e S2 sejam feitas apenas de L). Por exemplo, para S1 = 11011 e S2 = 11000, nós podemos ter L = 11 tal que S1 e S2 são feitas ambas somente de L (como pode ser visto no exemplo abaixo).",
        "titulo": "Tudo o que Você Precisa é Amor",
        "entrada": "A primeira linha de entrada contém um valor inteiro positivo N (N < 10000) que indica o número de casos de teste. Então, 2*N linhas vem a seguir. Cada par de linhas consiste de um caso de teste. Cada par de linhas contém respectivamente S1 e S2 que serão inseridas como entrada para a máquina do amor. Nenhuma string conterá menos do que 2 ou mais do que 30 caracteres. Você pode assumir que as strings de entrada serão válidas e estarão de acordo com as regras acima."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1161",
        "saida": "Para cada caso de teste de entrada, seu programa deve imprimir uma única linha, contendo um número que é a soma de ambos os fatoriais (de M e N).",
        "descricao": "Leia dois valores inteiros M e N indefinidamente. A cada leitura, calcule e escreva a soma dos fatoriais de cada um dos valores lidos. Utilize uma variável apropriada, pois cálculo pode resultar em um valor com mais de 15 dígitos.",
        "titulo": "Soma de Fatoriais",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso contém dois números inteiros M (0 ≤ M ≤ 20) e N (0 ≤ N ≤ 20). O fim da entrada é determinado por eof."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1634",
        "saida": "Para cada caso de teste, imprima n linhas de saída, onde a linha i contém a probabilidade como uma fração reduzida que o participante i ganhe mais dinheiro. Veja a saída exemplo para detalhes.",
        "descricao": "Até em tempos de crise econômica, as pessoas na Bytelândia ainda gostam de participar na loteria. Com um pouco sorte, talvez eles se livrem de todas suas mágoas e fiquem ricos. A loteria mais popular em Bytelândia consiste de rodadas m. Em cada rodada, todo mundo pode comprar quantos bilhetes desejar, e entre todos os bilhetes vendidos nessa rodada, um bilhete é escolhido aleatoriamente, cada um com a mesma probabilidade. O dono daquele bilhete ganha o prêmio em dinheiro dessa rodada. Já que as pessoas na Bytelândia gostam de potências de 2, o prêmio em dinheiro para o vencedor da rodada i acumula para 2i Dólares Bytelandenses. Você consegue determinar para cada participante da loteria a probabilidade de ele ganhar mais dinheiro do que todas as outras pessoas?",
        "titulo": "Outra Loteria",
        "entrada": "A entrada consiste em vários casos de teste. Cada caso começa com uma linha contendo dois inteiros n e m, respectivamente o número de participantes na loteria e o número de rodadas na loteria. Você pode presumir que 1 ≤ n ≤ 10000 e 1 ≤ m ≤ 30. As linhas n seguintes contém a descrição dos bilhetes comprados pelo participante. A linha ith contém m inteiros não-negativos c1, ..., cm, onde cj (1 ≤ j ≤ m) é o tanto de bilhetes da rodada j comprados pelo participante i. O número total de bilhetes vendidos em cada rodada está entre 1 e 109. A entrada termina com uma linha contendo 2 zeros."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1756",
        "saida": "Para cada caso de teste imprima uma única linha contendo a resposta com 7 dígitos após o ponto decimal.",
        "descricao": "Algumas disciplinas de computação são muito teóricas e as vezes entediantes. Na tentativa de despertar o interesse dos alunos pelo conteúdo, o professor de Inteligência Artificial, sempre que possível, propõe um desafio envolvendo o conteúdo visto na aula do dia. A aula de hoje foi sobre algoritmos genéticos e procedimento explicado pelo professor foi o seguinte: A partir de 2 indivíduos (duas sequências de N bits: x0x1...xN-1) A e B, escolhe-se um posição de corte Y ( 1 ≤ Y < N) e então ocorre a recombinação (crossover), gerando 2 novos indivíduos: o primeiro é formado pelos bits x0...xY-1 do indivíduo A seguidos dos bits xY..xN-1 do indivíduo B, o segundo é formado pelos bits x0...xY-1 do indivíduo B seguidos dos bits xY..xN-1 do indivíduo A. A imagem abaixo ilustra o resultado do crossover com Y = 5. Após o crossover, cada bit dos novos indivíduos pode sofrer mutação (alterar seu valor) de acordo com uma probabilidade de mutação P especificada. O enunciado do desafio deixado pelo professor foi o seguinte: \"Escreva um programa que receba 3 indivíduos, a posição do \"corte\" e a probabilidade de mutação. O programa deverá calcular qual a probabilidade de se obter o terceiro indivíduo como resultado de um crossover entre os dois primeiros.\"",
        "titulo": "Algoritmo Genético",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 50), o número de casos de teste. Cada caso de teste é composto por 5 linhas. A primeira linha contém o inteiro N (2 ≤ N ≤ 8), a quantidade de bits de cada indivíduo. A segunda linha contém um número inteiro Y (1 ≤ Y < N) seguido de um número de ponto flutuante P (0 ≤ P ≤ 1), a posição de corte e probabilidade de ocorrência de mutação, respectivamente. A terceira linha contém o primeiro indivíduo que será utilizado no crossover. A quarta linha contém o segundo indivíduo que será utilizado no crossover. A quinta linha contém o indivíduo que será comparado com os possíveis resultados do crossover."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1801",
        "saida": "Mostre uma única linha com um inteiro que indica o número de formas com que o Professor pode obter um valor de n que seja um quadrado perfeito. Duas formas são consideradas distintas se elas diferem no valor obtido para n.",
        "descricao": "O Professor Cedrado-Cueta gosta de brincar com números, especialmente quando estes são quadrados perfeitos. Um número natural n é um quadrado perfeito se existe um número natural m tal que n = m2. Por exemplo, 9 e 36 são quadrados perfeitos porque 9 = 32 e 36 = 62; contudo 5 e 12 não são quadrados perfeitos. O Professor encontrou recentemente um número x e ele gostaria de criar um quadrado perfeito o utilizando. Para isso, ele vai reordenar os dígitos de x para formar um número y e, então, calcular n = x + y. De quantas maneiras é possível obter assim um valor de n que seja um quadrado perfeito? Por exemplo, se x = 29 o Professor pode formar y = 92, de modo que n = 29 + 92 = 121 = 112. Perceba que, quando reordena os dígitos de x, o Professor deve usar todos os dígitos e obter uma expressão correta para o número y, ou seja, não podem haver zeros à esquerda em y. Tambem note que ele pode escolher manter os dígitos de x na mesma ordem e, nesse caso, obter para y o mesmo valor de x.",
        "titulo": "Brincando com Números",
        "entrada": "A única linha da entrada tem um inteiro positivo x com no máximo 12 dígitos."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1429",
        "saida": "Para cada caso de teste, escreva uma única linha contendo a representação decimal do número ACM correspondente.",
        "descricao": "Mateus, um calouro de engenharia, está desenvolvendo uma nova notação posicional para representar números inteiros. Ele o apelidou de \"A Curious Method\" (\"Um Método Curioso\"), representado pela sigla ACM. A notação ACM usa os mesmos dígitos que a notação decimal, isto é, de 0 a 9. Para converter um número A da notação ACM para a notação decimal, você deve adicionar k termos, onde k é o número de dígitos de A (na notação ACM), O valor do i-ésimo termo, correspondente ao i-ésimo dígito ai, contando da direita para a esquerda, é ai × i!. Por exemplo, 719ACM é equivalente a 5310, já que 7 × 3! + 1 × 2! + 9 × 1! = 53. Mateus acabou de iniciar seus estudos sobre teoria dos números, e provavelmente não sabe quais propriedades um sistema numérico deve ter, mas no momento, ele só está interessado em converter um número de ACM para decimal. Você pode ajudá-lo?",
        "titulo": "Fatorial de Novo!",
        "entrada": "Cada caso de teste é dado por uma única linha não-nula contendo, no máximo, 5 dígitos, representando um número na notação ACM. A linha não possui zeros no início.O último caso de teste é representado por uma linha contendo um único zero."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1830",
        "saida": "Para cada caso de teste a saída deve ser a mensagem \"Caso #t: A Especial, B Predileta e C Sortida\", onde os inteiros A,B,C são as quantidades de cada tipo de caixa de bombom e t é o número do caso de teste, cuja contagem tem início no número um. Ao final de cada mensagem deverá ser impressa uma quebra de linha.",
        "descricao": "Uma fábrica de chocolates produz três tipos de bombons. Os ingredientes básicos necessários para a fabricação de uma unidade de cada tipo estão listados abaixo: Crocante:5 gramas de amendoim, 25 gramas de chocolate branco e 20 gramas de chocolate ao leite;Misto:25 gramas de chocolate branco e 25 gramas de chocolate ao leite;Tradicional:50 gramas de chocolate ao leite. Esta fábrica comercializa três tipos de caixa de bombons, com 30 unidades cada, com os nomes e composições listados a seguir: Especial:30 bombons do tipo Crocante;Predileta:10 bombons do tipo Crocante e 20 bombons do tipo Misto;Sortida:10 bombons de cada um dos três tipos. Sabendo que no mês de abril a fábrica gastou, na fabricação dos bombons dos três tipos descrito, X kg de amendoim, Y kg de chocolate branco e Z kg de chocolate ao leite, quantas caixas, de cada tipo, foram produzidas neste referido mês?",
        "titulo": "Caixas de Bombons",
        "entrada": "A entrada consiste em vários casos de teste, sendo cada caso representado por uma única linha com os valores de X, Y e Z, (0 ≤ X,Y,Z ≤ 10000), em kilogramas, separados por um espaço em branco e seguidos de uma quebra de linha. Uma linha com três zeros indica o fim da entrada, e não deve ser processada. Os valores de X, Y, Z são números reais com até 3 casas decimais de precisão."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1544",
        "saida": "Para cada caso de teste deve ser impresso um único dígito, que é o último dígito diferente de zero de NPM. Por exemplo, se NPM for 720, então o último dígito não zero é 2 e portanto, neste caso a saída deve ser 2.",
        "descricao": "Neste problema, a você serão dados dois números inteiros decimais N e M. Você terá que encontrar o último dígito não zero de NPM. Isto significará M permutações de N em um determinado momento.",
        "titulo": "O Último Dígito Não-Zero",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste é composto por dois inteiros N (0 ≤ N ≤ 20000000), M (0 ≤ N). A entrada é terminada por EOF (final de arquivo)."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1760",
        "saida": "A saída deve apresentar o valor também em milímetros da área do floco de neve de Kock com duas casas decimais.",
        "descricao": "A Lapônia é um lugar pacato e muito frio. Não há muita coisa para se fazer por lá depois do Natal (época na qual os elfos trabalham incessantemente na fábrica de brinquedos do Papai Noel). O marasmo fez com que o elfo Tod pesquisasse sobre a única coisa que mais se via na Lapônia: Neve. Em seus estudos, Tod descobriu coisas muito interessantes sobre os flocos de neve. Como fazia buscas incessantes nos sites por informações sobre flocos de neve, acabou encontrando links que falavam sobre uma teoria chamada floco de Neve de Koch. Tod achou a teoria muito interessante porque o floco de neve de Koch é um fractal que se obtém a partir de um triângulo equilátero. A seguir, dividimos cada um de seus lados em três partes iguais e acrescentamos, a partir de cada parte intermediária, um novo triângulo equilátero de lado igual a 1/3 da medida do lado do triângulo inicial. A cada iteração o perímetro do fractal aumenta e após n iterações, o mesmo tende ao infinito mas a área permanece menor que a área do círculo que circunda o triângulo original. Portanto, uma linha infinitamente longa é rodeada por uma área finita. Com base nessas informações e sabendo que a área de um triângulo equilátero é igual a l2 √3 /4 (onde l é a medida do comprimento de um lado do triângulo equilátero) sua tarefa é ajudar Tod a encontrar a área de um floco de neve de Koch com base na medida do comprimento de lado do triângulo equilátero dado.",
        "titulo": "Floco de Neve de Koch",
        "entrada": "A entrada possui vários casos de teste e consiste em um número inteiro l (1 ≤ l ≤ 1000) que representa a medida do comprimento de um lado do triângulo equilátero em milímetros. O final da entrada é determinado por EOF."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "2076",
        "saida": "Para cada instância imprima uma linha contendo a soma dos valores que podem ser aplicados no intervalo. Como este valor pode ser muito grande então imprima o resultado módulo 1300031.",
        "descricao": "Tjalling C. Koopmans ganhou em 1975 o prêmio Nobel de Economia juntamente com o matemático russo Kantorovich pelas suas contribuições em importantes áreas como a alocação ótima de recursos. Koopmans formou-se em Matemática pela Universidade de Utrecht, na Holanda, e se especializou em economia matemática. Durante a segunda guerra mundial esteve envolvido no estudo de alocação ótima de recursos, que 30 anos mais tarde lhe rendeu o prêmio Nobel. É considerado um dos precursores da teoria de programação linear. Suas contribuições têm importantes aplicações em Economia, Matemática, Física e mesmo em Química. Um dos problemas prediletos de Koopmans era o de alocação ótima de commodities. Neste problema, é dado um valor inicial e um valor ﬁnal da aplicação a ser feita. Entretanto, nem todos os valores podem ser aplicados nos vários investimentos. Cada investimento é deﬁnido através de um número inteiro, e, por convenção, apenas quando o valor a ser aplicado for um múltiplo de pelo menos um número que deﬁne um investimento ele pode ser aplicado. Sua tarefa neste problema é calcular o valor máximo que pode ser aplicado. Ou seja, dado o valor inicial e valor ﬁnal a serem aplicados e uma lista de inteiros que deﬁnem as várias aplicações,você deverá calcular a soma dos valores que podem ser aplicados no intervalo.",
        "titulo": "Alocação Ótima de Commodities",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância possui três inteiros I, F e N (1 < I < F < 1000000000 e 1 < N < 20) que representam o valor inicial, o valor ﬁnal e o número de elementos da lista de aplicações. A próxima linha contém N inteiros 1 < ai < 1000000000 indicando a lista de aplicações."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1554",
        "saida": "Para cada caso de teste deve ser mostrada uma linha contendo apenas o número da bola que está mais próxima da branca. A margem de erro aceitável é de 0,01 mm. Havendo empate, deve-se mostrar aquela de menor número. Sempre finalize uma linha com o caractere nova linha (\\n).",
        "descricao": "Existem muitas variantes de jogos de bilhar. A UFFS (União Federal dos Fãs de Sinuca) resolveu desenvolver uma nova variante, denominada N + 1. Essa variante consiste em, numa mesa de bilhar padrão, tacar a bola branca para acertá-la na bola mais próxima dela, dentre as N possíveis. O jogo é vencido pelo jogador que completar mais acertos após 50 jogadas. Como a dificuldade do jogo está em descobrir qual das N bolas é a mais próxima da branca, sua tarefa é escrever um programa que ajude os juízes da partida.",
        "titulo": "Bilhar N+1",
        "entrada": "Existem vários casos de teste. A primeira linha contém um inteiro C que determina a quantidade de casos de teste que vem a seguir. Para cada caso de teste, a entrada começa com um inteiro N (1 ≤ N ≤ 50), que define o número de bolas disponíveis, além da branca. As próximas N + 1 linhas possuem dois inteiros, x e y, separados por um espaço em branco, indicando a posição (x, y) das bolas no plano da mesa, uma bola por linha (0 < x < 1420 mm e 0 < y < 2840 mm). A primeira linha indica a posição da bola branca. As demais linhas indicam a posição das bolas 1, 2, 3, . . . , N-1, N nesta ordem."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2066",
        "saida": "A única linha da saída deve consistir unicamente do número de números com exatos K dígitos que são bem-revertíveis.",
        "descricao": "O número reverso de um número natural N é o número que obtemos quando lemos os dígitos de N da direita para a esquerda. Por exemplo, o número reverso de 1234 é 4321 e o número reverso de 150 (um número com 3 dígitos) é 51 (um número com 2 dígitos). Neste problema, dizemos que um número é bem-revertível se é estritamente menor que seu número reverso. Exemplos de números bem-revertíveis são 1234, 15 e 819.",
        "titulo": "amelborP mU",
        "entrada": "A única linha da entrada consiste de um único inteiro positivo K (K ≤ 18)."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1505",
        "saida": "O programa deve imprimir o mínimo número de dias que tem que esperar o pequeno Curo ate que todos os trabalhadores tenham moedas suficientes para suas férias.",
        "descricao": "Curolandia tem N fábricas, cada uma de elas tem como nome um número do 0 ate n-1. A fábrica i paga Ci moedas por cada dia de trabalho. Inicialmente, cada fábrica tem 1 trabalhador, o trabalhador na fábrica i deseja salvar Ai moedas antes de suas férias. O pequeno Curo é o prefeito do Curolandia e gosta da rotação de trabalho nos trabalhadores. É por isso que se um trabalhador trabalha na fábrica i o seguinte dia ele tem que trabalhar na fábrica Gi. O pequeno Curo deseja saber qual e o mínimo número de dias que tem que esperar ate que todos os trabalhadores tenham moedas suficientes para suas férias. Esse dia o pequeno curo vai dar uma festa grande para eles.",
        "titulo": "Curo Factories",
        "entrada": "A entrada contem 4 linhas, a linha 1 tem o número N (1 < N < 5000), as linhas 2 a 4 contem N números. O i-ésimo número da linha 2 é Gi (0 < Gi < N), o i-ésimo número da linha 3 é Ci (0 < Ci <= 10) e o i-ésimo número da linha 4 é Ai (0 < Ai < 107)."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "2034",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um numero inteiro, representando o número de cantingers (com respeito a B e C) que são maiores ou iguais a D e menores ou iguais a H.",
        "descricao": "O matemático Georg Cantor foi um amante de conjuntos e infinito, mas não se dava tão bem com os colegas. Uma manhã ele acordou com a ideia de definir um conjunto tao estranho que, quando lançado, faria o resto dos matemáticos perderem o sono por alguns dias. E ele fez. O conjunto foi definido como o conjunto Cantor, e é formado por todos os números reais no intervalo [0,1] nos quais a expressão decimal na base 3 usa exclusivamente os dígitos 0 e 2. Esse conjunto tem propriedades interessantes, que não serão mencionadas aqui assim você pode dormir hoje. Além disso, e felizmente pra todos envolvidos, nesse problema não iremos trabalhar com o conjunto Cantor, mas uma generalização desse conjunto para números inteiros. Iremos dizer que um número inteiro é do tipo Cantor, ou para abreviar cantinger, se sua expressão em uma dada base B usa apenas os dígitos de um conjunto C dado {0,1,...,B-1}. Assim, o fato de um dado número ser um cantinger ou não depende de como escolhemos B e C. O objetivo é contar os números cantinger, para prevenir que os matemáticos de todo o mundo percam seu sono. Mais precisamente, dados dois inteiros D e H, juntamente com B e C, você deve contar o número de cantingers com respeito a B e C de D a H inclusive.",
        "titulo": "Cantor",
        "entrada": "Cada caso de teste é descrito usando uma linha. A linha contém três inteiros D, H e B, e uma string L. Os valores de D e H indicam os pontos finais do intervalo fechado [D,H] que estamos interessados (1 ≤ D ≤ H ≤ 1016). O valor de B é a base mencionada no problema (2 ≤ B ≤ 10). A string L = L0 L1 ... LB-1 tem exatamente B caracteres, e descreve o conjunto C também mencionado no problema. O caractere Li é a letra \"S\" maiúscula quando i ∈ C, e a letra \"N\" maiúscula caso contrário (i = 0, 1, ... , B-1). O conjunto C não está vazio, isto é, existe pelo menos um caractere ‘s’ em L. O fim da entrada é indicado por uma linha contendo três vezes o numero -1 e um caractere ‘*’."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1968",
        "saida": "Imprima uma linha contendo unicamente um valor que represente o número de possibilidades para a formação dos grupos. Como esse número pode ser muito grande, imprima apenas o resto que ele deixa quando dividido por 109 + 7.",
        "descricao": "No último dia 12 de outubro comemoramos no Brasil o Dia das Crianças. Quem dera nós adultos vivêssemos mais no mundo das crianças, pois o inverso não tem dado certo, não mesmo. Nós adultos dividimos o mundo em nações, e são as crianças que mais sofrem com as guerras. Nós adultos criamos um sistema de distribuição de riqueza, e são as crianças que mais sofrem com a fome. Mas há uma Terra Desconhecida, não muito distante daqueles que ainda conservam um pouco da sua imaginação, que pertence às crianças. Lá não há guerra, não há pobreza, não há fome. Lá as crianças brincam dia e noite. Mas uma catástrofe está ocorrendo com a Terra Desconhecida. Uma catástrofe! Os carneiros que habitavam a Terra Desconhecida acabaram ficando velhos, ou doentes, ou engolidos por jiboias. Com isso, os baobás começaram a crescer e tomaram conta da Terra Desconhecida. Agora, os cidadãos precisam se mudar urgentemente. Para auxiliar na evacuação, todos os cidadãos foram numerados de A a B (é óbvio que essa ideia foi dos adultos — eles adoram essas coisas!). Para definir quem seriam os líderes dos grupos durante a evacuação, alguém sugeriu que os líderes deveriam ser todos aqueles que houvessem recebido um número primo (é óbvio que essa ideia foi de uma criança — crianças têm muita imaginação e adoram se deleitar com coisas que dispensam maiores explicações!). Mas logo outra ideia surgiu: — Um número primo é um número que possui exatamente 2 divisores. E se os líderes fossem aqueles que receberam um número com exatamente N divisores? Todas as crianças adoraram a ideia. Já os adultos ficaram um longo tempo debatendo sobre como o número N deveria ser escolhido. Quando finalmente o número N foi escolhido, cada cidadão que não fosse líder de um grupo deveria escolher o grupo que quisesse para nele entrar. Nenhuma outra restrição foi imposta aos grupos. Nada impedia, por exemplo, que um grupo consistisse apenas do seu líder. Note que, dependendo do valor de N, nem haveria grupo algum. Sabendo dos valores de A, B e N, solte a criança dentro de você e tente descobrir o número total de possibilidades para a formação dos grupos. Se, por exemplo, A = 5, B = 8 e N = 4, situação em que os líderes são os cidadãos 6 e 8, há 4 possibilidades: ambos os cidadãos 5 e 7 escolhem entrar para o grupo liderado pelo cidadão 6; ambos os cidadãos 5 e 7 escolhem entrar para o grupo liderado pelo cidadão 8; o cidadão 5 escolhe entrar para o grupo liderado pelo cidadão 6 e o cidadão 7 escolhe entrar para o grupo liderado pelo cidadão 8; o cidadão 5 escolhe entrar para o grupo liderado pelo cidadão 8 e o cidadão 7 escolhe entrar para o grupo liderado pelo cidadão 6.",
        "titulo": "A Terra Desconhecida",
        "entrada": "A única linha da entrada consiste unicamente dos inteiros positivos A, B e N (A ≤ B; B, N ≤ 107)."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1481",
        "saida": "Para cada caso de teste da entrada, seu programa deve produzir uma linha de saída, contendo um inteiro que representa a área total (em m2) da terra que não será inundada.",
        "descricao": "Zing Zhu possui uma ilha que é um pedaço de terra plana. Todos os dias, quando a maré sobe, a ilha é inundada pela água do mar. Depois de muito pensar e pedir o conselho de membros de sua família, Zing Zhu decidiu criar uma fazenda de ostras na ilha. Zing Zhu usa um sofisticado sistema de cercas de plástico modulares à prova d'água para controlar as áreas que serão inundadas e as áreas que não serão inundadas durante a subida da maré. As cercas usadas por Zing Zhu são horizontais ou verticais e vêm em tiras, que têm diferentes comprimentos e alturas. Duas cercas podem se cruzar em no máximo um ponto, não necessariamente em suas extremidades. ​ Imagem 1 (esquerda):. Mapa de tiras de cerca instalados na fazenda, mostrando as alturas das tiras de cerca, em centímetros. Imagem 2 (direita): áreas não inundadas (mostradas em branco), se a maré sobe 110 centímetros. Você foi contactado por Zing Zhu para calcular, dada a altura que maré atingirá e a posição e altura de todas as tiras de cerca, a área total de terra que não será inundada durante a maré alta. Pode-se presumir que a largura das tiras de vedação são tão finas em comparação ao tamanho do terreno que, para efeitos de cálculo da área total, as tiras de vedação podem ser considerados como tendo larguras iguais a zero.",
        "titulo": "A Fazenda de Ostras de Zing Zhu",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um número inteiro N, indicando o número de tiras de vedação na ilha (1 ≤ N ≤ 2000). Cada uma das próximas N linhas contém cinco números inteiros X1, Y1, X2, Y2 e H, o que representa, respectivamente, o ponto de início (X1, Y1), o ponto final (X2, Y2) e a altura da tira (H). A última linha de um caso de teste contém um inteiro W que representa a altura da maré. As coordenadas são dadas em metros e a altura, em centímetros. Além disso, X1 = X2 ou Y1 = Y2 (mas não ambos); -500 ≤ X1, Y1, X2, Y2 ≤ 500 e 1 ≤ W, H ≤ 1000. A extremidade de entrada é indicado por N = 0."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1812",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador Instance h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte deve ser impresso Viable ou Not Viable, dependendo do escalonamento para a instância ser ou não viável, respectivamente. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "A Academia de Ciências da República Tcheca, preocupada com as inundações ocorridas durante os últimos verões em Praga, está fomentando o desenvolvimento de um novo cluster computacional para, entre outras tarefas, promover uma previsão do tempo mais acurada. Este novo cluster é composto por m máquinas iguais operando em paralelo. Por razões orçamentárias, cada máquina pode processar uma única tarefa por vez, e cada tarefa não pode ser processada em mais de uma máquina simultaneamente. O cluster permite, no entanto, preempção. Ou seja, é possível interromper a execução de uma tarefa e retorná-la posteriormente, em outra máquina inclusive. Por estar em Praga para a realização de um evento relativo à Ciência da Computação, você foi convidado a desenvolver uma versão preliminar do escalonador de tarefas do cluster. Nesta versão, é fornecido um conjunto de tarefas T, em que cada tarefa t ∈ T possui: Um requisito de processamento pt que denota o número de unidades de tempo necessárias para realizar tal tarefa; Um instante de liberação rt , que representa a unidade de tempo a partir da qual a tarefa está disponível para processamento (ela poderia estar aguardando dados, por exemplo); E um valor dt ≥ pt + rt que indica o primeiro instante, em unidades de tempo, em que a tarefa deve, impreterivelmente, ter sido completada. Isto é, a tarefa t deve ser realizada no intervalo [rt, dt). Seu escalonador deve receber estes dados, de acordo com o formato descrito abaixo e dizer se existe ou não um escalonamento viável, isto é, um escalonamento que complete todas as tarefas nos intervalos de tempo permitidos.",
        "titulo": "Um Cluster Para Evitar Enchentes",
        "entrada": "Seu escalonador deve estar preparado para trabalhar com diversas instâncias de entrada. Cada instancia segue o formato que segue. Na primeira linha, são fornecidos os números de máquinas, 0 ≤ m ≤ 100, e de tarefas, 0 ≤ n ≤ 1000, respectivamente. Nas próximas n linhas são fornecidos os valores pt ≥ 0,rt ≥ 0 e dt ≥ 0 (uma tripla por linha) para as tarefas t ∈ T. Os instantes rt e dt são inteiros, e pt é decimal. Valores m = 0 e n = 0 indicam o término do processamento das instâncias e não devem ser processados. Todos os valores da entrada que constem em uma mesma linha são separados por um número qualquer de espaços em branco."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1492",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro que representa o número total de dígitos 1 na representação binária de todos os inteiros de A to B, inclusive.",
        "descricao": "Carl é agora a criança mais feliz do mundo: ele aprendeu esta manhã o que é o sistema binário. Ele aprendeu, por exemplo, que a representação binária de um inteiro positivo k é  uma string anan−1 · · · a1a0 onde cada ai é um dígito binário 0 ou 1, iniciando com an = 1, e de tal forma que k = Σni=0 ai × 2i. É realmente bom ver ele transformando números decimais em binários, e depois somá-los e multiplicá-los. César é o irmão mais velho de Cal, e ele não suporta ver o seu irmão menor tão feliz. Por isso ele preparou um desafio: \"Olhe Carl, eu tenho uma pergunta fácil para você: eu te darei dois inteiros A e B, e você tem que me dize quantos dígitos 1 existem na representação binária de todos os inteiros de A à B, inclusive. Se prepare!\". Carl aceitou o desafio. Após alguns minutos, ele voltou com uma lista com a representação binária de todos os inteiros de 1 a 100. \"César, eu estou pronto\". César sorriu e disse: \"Bom, deixe-me ver, eu escolho A = 1015 e B = 1016. A sua lista não será útil\".  Carl odeia perder para o seu irmão então ele precisa de uma solução mais rápida. Você pode ajudá-lo?",
        "titulo": "Contando Uns",
        "entrada": "A entrada é composta por diversos casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com dois inteiros A e B (1 ≤ A ≤ B ≤ 1016)."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1197",
        "saida": "Para cada linha de entrada imprima um único inteiro que denota o deslocamento no dobro do tempo fornecido.",
        "descricao": "Uma partícula tem velocidade inicial e aceleração constante. Se a sua velocidade após certo momento é v então qual será seu deslocamento no dobro deste tempo?",
        "titulo": "Volta à Faculdade de Física",
        "entrada": "A entrada contém vários casos de teste. Cada linha da entrada é um caso de teste e contém dois inteiros v (-100 ≤ v ≤ 100) e t (0 ≤ t ≤ 200) ( t significa o momento no qual a partícula ganha aquela velocidade). O final da entrada é determinado por EOF."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1433",
        "saida": "Para cada instância do problema você deve imprimir uma única linha, contendo o número mínimo de grupos que satisfazem os 3 requerimentos acima. A saída deve ser escrita pela saída padrão.",
        "descricao": "O clube ACM (All Can Meet) foi criado com o propósito de atrair pessoas de todas as idades, com a ideia de que todas as pessoas poderiam sentar e compartilhar experiências de vida, para o benefício de todos. Mas como aconteceu, o clube tornou-se um sucesso tão grande que tornou-se praticamente impossível reunir todos os membros no mesmo local ao mesmo tempo. O clube decidiu então dividir seus membros em \"seções\" menores. Em função de manter uma boa divisão, o diretor so clube decidiu impor os seguintes requerimentos: A. todos os membros da mesma idade devem estar na mesma seção, B. todos os membros devem fazer parte de exatamente uma seção, C. em cada seção, o número máximo de pessoas com a mesma idade não podem ser mais que R vezes o número mínimo de pessoas da mesma idade, onde R é um número racional entre 1.0 e 2.0. O número R é chamado de o fator divisor do clube. A última condição garante que não há um grupo menor de jovens que talvez sintam-se inconfortáveis na seção. Por exemplo, denotados por [N,M] um grupo com N menbros que tem M anos. Então a seção {[10,50],[6,45],[70,12],[43,23]} o número máximo de pessoas com a mesma idade é 70, o número mínimo de pessoas com a mesma idade é 6. Se R = 2.0, então dizemos que esta seção não satisfaz os requerimentos (C) desde que 70/6 ≤ 2.0. No entanto podemos dividir esta seção em duas menores seções, nominando {[10,50],[6,45]} e {[70,12],[43,23]}, no qual satisfazem os requerimentos. Dado o fator divisor R e uma lista de membros do clube, você deve escrever um programa para achar o número de seções que satisfazem os três requerimentos acima.",
        "titulo": "O Clube da Divisão",
        "entrada": "Seu programa deve processar vários casos de teste. A primeira linha de um caso de teste contém um inteiro K e um racional R. K representa o número de idades diferentes do clube (1 ≤ K ≤ 120), e R representa o fator divisor especificado pelo diretor do clube (1.0 ≤ R ≤ 2.0). As próximas K linhas descrevem os membros do grupo, cada linha contém 2 inteiros N e M, indicando que existem N membros que tem M anos no clube (1 ≤ N ≤ 10000 e 1 ≤ M ≤ 120). O fim da entrada é indicado por uma linha com K = 0 e R = 0.0. Os valores de entrada serão tais que um erro eventual na representação binária interna de R não afetará o resultado. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1829",
        "saida": "A primeira linha da saída consiste na mensagem \"Campeao: C!\", onde C é o nome do participante que venceu o maior número de rodadas, ou a mensagem \"A competicao terminou empatada!\", se for o caso. Após esta mensagem inicial, deve ser impressa, para cada rodada disputada, a mensagem \"Rodada #r: V foi o vencedor\", onde r é o número da rodada (cuja contagem se inicia no número um) e V é o nome do participante que venceu a rodada de número r. Ao final de cada mensagem da saída deve ser impressa uma quebra de linha.",
        "descricao": "Lucas e Pedro são alunos do ensino médio que ficaram impressionados após uma aula de matemática, na qual foi apresentado o fatorial de um número natural n, isto é, com 0! = 1. Ficaram com uma dúvida, porém: qual operação produz os maiores resultados, o fatorial ou a exponenciação? Com esta dúvida em mente, propuseram o Jogo do Maior Número: os dois participantes teriam que dizer, ao mesmo tempo e o mais rápido possível, o maior número que viesse a cabeça, sendo o vencedor aquele que dissesse o maior dentre os dois números. Escolheram Beto como juiz, que foi tomando notas dos números que os dois não cessavam de falar. Lucas citava sempre exponenciais, enquanto Pedro se concentrava nos fatoriais. Ao fim da brincadeira, um porém: nem os participantes, tampouco o juiz, tinha a menor ideia de quem havia sido o vencedor. Escreva, portanto, um programa que os auxilie a decidir quem foi o vencedor de cada rodada da brincadeira, e quem se sagrou campeão (maior número de vitórias, consideradas todas as rodadas).",
        "titulo": "Jogo do Maior Número",
        "entrada": "A primeira linha da entrada contém o número inteiro positivo N (N ≤ 1.000), que representa o número de rodadas disputadas. Cada rodada é representada por duas linhas: a primeira contém a exponencial dita por Lucas, na forma a^b (2 ≤ a, b ≤ 10.000), e a segunda contém o fatorial escolhido por Pedro, na forma n! (2 ≤ n ≤ 10.000). Os números a, b, n são inteiros e a expressão a^b significa \"a elevado à b-ésima potência\"."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1393",
        "saida": "Para cada teste, imprimir uma linha contendo um único número inteiro, o número de diferentes sequências de passo.",
        "descricao": "O caminho para a escola de Maria é uma linha reta pavimentada com lajotas hexagonais. A imagem abaixo mostra um exemplo do caminho com 12 peças numeradas. ​ Maria adora matemática. Ao ir para a escola, ela pisa sobre as lajotas do caminho de acordo com as seguintes regras: Ela sempre começa a partir da lajota com o rosto sorridente (é sempre bom começar com um sorriso!). Esta lajota está sempre presente no inicio do caminho. As outras peças são numeradas consecutivamente, de modo ascendente, a partir de 1, como mostrado na figura. Não é permitido voltar, isto é, ela não deve pisar em uma telha que tenha um número menor do que a telha que ela está pisando (quando ela decide ir para a escola, ela vai mesmo!). Ela sempre dá passos de uma lajota para outra vizinha (não há saltos, de modo a manter-se fora de perigo!). Ela deve sempre terminar na mais alta lajota contada. Quando as aulas terminam, ela está tão cansada que evita o caminho e caminha no gramado. Maria não quer repetir qualquer seqüência de passos nas lajotas e ela gostaria de saber, se o caminho está pavimentado com N lajotas numeradas e uma lajota com um sorriso, quantos dias vai demorar para percorrer cada sequência possível uma só vez. Por exemplo, cinco dias serão necessários para que ela tente todas as possíveis sequências de passos se o caminho tem N = 4 lajotas, um dia, para cada uma das sequências: 1-2-3-4, 1-2-4, 1-3-4, 2-3-4 e 2-4. Escreva um programa para determinar quantas sequências diferentes de passos há em um caminho com um determinado número N de lajotas.",
        "titulo": "Lajotas Hexagonais",
        "entrada": "A entrada contém vários casos de teste. Cada teste é composto por uma linha contendo um número inteiro N (1 ≤ N ≤ 40), o número de peças no caminho. O último caso de teste é seguido por uma linha contendo um único zero."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1488",
        "saida": "Para cada valor da entrada, seu programa deve imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, separados por um espaço em branco, os cinco números que comprovam a condição de quadripartido, quando n for quadripartido. Siga a ordem: m p1 p2 p3 p4. Se n não for quadripartido, seu programa deve imprimir a mensagem n nao e quadripartido. No primeiro caso, é possível que exista mais de uma sequencia que atenda às condições estabelecidas. Se isto ocorrer, seu programa deverá escolher a que apresentar o maior valor possível para m. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "\"Os números sempre desempenharam um papel de acentuado relevo não só nos altos campos da Fé e da Verdade, como no humílimos terreiros da Superstição e do Erro.\" (Prof. Marão) Malba Tahan, em seu clássico \"O Homem Que Calculava\", conta uma fábula de superstição envolvendo os números quadripartidos. Mal sabia ele que séculos antes, na antiga civilização Tcheca, a superstição envolvendo os números quadripartidos já se fazia presente. Na antiguidade, uma importante comunidade que vivia nos arredores de Neratovice, utilizava as propriedades dos números quadripartidos para prever o futuro, batizar as crianças e até mesmo para escolher os seus líderes. Um número inteiro n é quadripartido se existe alguma divisão desse número em quatro parcelas inteiras (p1 + p2 + p3 + p4 = n) e um operador mágico (m) de modo que a primeira parcela somada ao operador mágico, a segunda diminuída dele, a terceira multiplicada por ele e a quarta dividida por ele deem o mesmo resultado (p1 + m = p2 − m = p3 * m = p4 / m). Assim, 128 é quadripartido, porque podemos dividir 128 em 4 parcelas (31, 33, 32 e 32) de modo que existe um operador mágico (no caso, 1) que faz com que p1 + m, p2 − m, p3 * m e p4 / m sejam iguais. De fato: 31 + 1 = 33 − 1 = 32 * 1 = 32 / 1 = 32. Um grupo de pesquisadores de Praga está reconstruindo o passado de Neratovice, e pediu a sua ajuda. Eles querem que você faça um programa que identifique quando um número é ou não quadripartido e qual é o seu operador mágico associado.",
        "titulo": "Números Mágicos?",
        "entrada": "Cada linha da entrada contém um inteiro n (0 ≤ n ≤ 500000) que seu programa deverá analisar e classificar em quadripartido ou não. O valor n = 0 corresponde ao final do arquivo de entrada e não deve ser processado."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1392",
        "saida": "Para cada caso de teste ser programa deve imprimir uma única linha contendo um inteiro, representando o quanto você deve pagar.",
        "descricao": "O ano é 2100. A eletricidade se tornou muito cara. Recentemente, sua companhia elétrica elevou as taxas de energia mais uma vez. A tabela abaixo mostra as novas taxas (o consumo é sempre um inteiro positivo): Isso significa que, calculando a quantidade a pagar, os primeiros 100 LWh (Crazy-Watt-hora) tem o preço de 2 Americus cada; os próximos 9900 LWs (entre 101 e 10000) tem um preço de 3 Americus cada e assim por diante. Por exemplo, se você consome 10123 LWs você terá que pagar 2×100+3×9900+5×123 = 30515 Americus. Os matemáticos do mal da companhia armaram um jeito de ganhar ainda mais dinheiro. Ao invés de informarem quanta energia você consumiu e quanto deve pagar, eles mostram os números relativos a você e um vizinho aleatório: A: o total a pagar se as contas fossem somadas; e B: o valor absoluto entre as contas. Se você não consegue descobrir quanto você tem que pagar, você deve pagar mais 100 Americus pelo \"serviço\". Você é bastante econômico, portanto não tem como ter consumido mais que seus vizinhos. Então, sendo esperto, você sabe que tem como computar quanto você tem que pagar. Por exemplo, suponha que a companhia informou-o os seguintes números: A = 1100 e B = 300. Então o seu consumo e do seu vizinho tem que ser 150 LWh e 250 LWh respectivamente. O consumo total é 400 LWh então A é 2×100+3×300 = 1100. Você deve pagar 2×100+3×50 = 350 Americus, enquanto seu vizinho deve pagar 2×100+3×150 = 650 Americus, então B é |350 - 650| = 300. Decidido a não pagar o custo adicional, você resolveu escrever um programa de computador para encontrar quanto você deve pagar.",
        "titulo": "Conta de Luz",
        "entrada": "A entrada contém vários casos de teste. Cada teste é composto de uma única linha, contendo dois inteiros A e B, separados por um único espaço, representando os números mostrados a você pela companhia (1 ≤ A, B ≤ 109). Você deve assumir que haja sempre uma única solução, ou seja, existe exatamente um par de números de consumo que produzem tais números. O último caso de teste é seguido de uma linha contendo dois zeros separados por um único espaço."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1635",
        "saida": "Para cada palpite, some o percentual adquirido por cada partido e compare com o inteiro especificado n. Então, imprima uma linha informando se o palpite estava correto. Consulte o exemplo para mais detalhes.",
        "descricao": "Antes das eleições no ano de 2009 para o Parlamento Europeu, Bill e Ted pediram a seus amigos que opinassem acerca do resultado das eleições. Agora que os resultados foram divulgados, Bill e Ted querem averiguar quem palpitou de maneira correta. Se eles, entretanto, fossem verificar os palpites de cada um de seus amigos - que são muitos - um por um, levariam muito tempo, precisam, portanto, que esta verficação seja feita por um computador. Uma vez que eles não são muito bons em programação, eles precisam de sua ajuda.",
        "titulo": "Resultado das Eleições",
        "entrada": "As informações providas por Bill e Ted têm o seguinte formato: a primeira linha consiste em um número p de partidos seguido por um número a de adivinhações  (com 1 ≤ p ≤ 50 e 1 ≤ a ≤ 10000). Tem-se na sequência p linhas, cada linha contedo o nome de um partido (estes somente podem ser escritos com letras de a-z, A-Z, dígitos de 0-9 e tamanho ≤ 20) e o percentual adquirido por este partido (com um ponto após a casa decimal). Depois dos partidos, seguem-se a linhas, cada uma contendo um palpite. Um palptite, ou adivinhação, tem forma A1 + A2 + ... + Ak COMP n, onde A1 até Ak são nomes de partidos, COMP é um dos operadores de comparação, , = ou =; e n é um inteiro entre 0 e 100, inclusos.  Cada partido somente pode ser citado uma vez em cada palpite. Obs: Cuidado com a comparação entre valores de ponto flutuante, porque alguns valores na entrada (como 0,1) não têm uma representação exata de um número de ponto flutuante."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1353",
        "saida": "Para cada caso de teste imprima o número de possibilidades, modulo (%) 1.000.000.009.",
        "descricao": "Eu tenho um conjunto de cartas Super Poker, que consistem em um número infinito de cartas. Para cada valor positivo inteiro I, existem exatamente quatro cartas que o valor é I: Espadas(E), Copas(C), Paus(P) e Ouros(O). Não existem cartas de outros valores. Dados dois valores inteiros positivos N e K, de quantos jeitos você pode conseguir o máximo de cartas K cujo valor somam-se a N? Por exemplo, de N = 15 e K = 3, um jeito é 3C + 4E + 8C, mostrado abaixo:",
        "titulo": "Super Poker",
        "entrada": "Terá no máximo vinte casos de teste, cada um com dois inteiros, N e K(1 ≤ N ≤ 109, 1 ≤ K ≤ 10). A entrada é terminada por N = K = 0."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1198",
        "saida": "Para cada linha de entrada imprima a diferença entre o número de soldados de Hashmat e do seu oponente. Cada saída deve ser impressa em uma linha separada.",
        "descricao": "Hashmat é um guerreiro cujo seu grupo de soldados se move de um local a outro para lutar contra os seus oponentes. Antes da luta ele apenas calcula uma coisa. A diferença entre a quantidade de soldados que possui e a quantidade de soldados oponentes. A partir desta diferença ele decide se vai ou não lutar. Às vezes Hashmat tem mais soldados do que o seu oponente, mas na maioria das vezes não.",
        "titulo": "O Bravo Guerreiro Hashmat",
        "entrada": "A entrada contém dois números inteiros em cada linha. Estes dois números denotam respectivamente a quantidade de soldados do exército de Hashmat e do seu oponente.  Nenhum número de entrada é maior do que  232. A entrada termina com fim de arquivo (EOF)."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1308",
        "saida": "Para cada caso de teste, o resultado deve conter um único número inteiro que indica o número de linhas que podem ser formadas.",
        "descricao": "Uma tropa de guerreiros etruscos está organizada da seguinte forma. Na primeira linha, há apenas um guerreiro; a segunda fila contém dois guerreiros; a terceira fila contém três guerreiros, e assim por diante. Em geral, cada linha i contém i guerreiros. Nós sabemos o número de guerreiros etruscos de uma tropa dada. Você tem que calcular o número de linhas em que eles estão organizados. Favor notar que podem haver guerreiros restantes (isso pode acontecer se eles não são suficientes para formar a próxima linha). Por exemplo, três guerreiros estão organizados em duas linhas. Com seis guerreiros você pode formar três linhas, mas você também pode formar três linhas com 7, 8 ou 9 guerreiros.",
        "titulo": "Guerreiros Etruscos Nunca Jogam Xadrez",
        "entrada": "A primeira linha da entrada contém um inteiro que indica o número de casos de teste. Cada caso de teste contém um único inteiro N (0 ≤ N ≤ 1018), indicando o número de guerreiros etruscos."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "2204",
        "saida": "Seu programa deve imprimir, para cada caso de teste, um único número, que representa a resposta para o problema descrito.",
        "descricao": "Com a chegada dos jogos, assim como em todo grande evento, as forças de segurança pública realizam uma série de treinos e simulações com o objetivo de estarem prontos para o pior. Seu amigo David, que não se sente muito realizado no curso de Ciência da Computação - devido ao fato de não ser muito hábil com programação, sonha em se juntar á uma dessas entidades de segurança publica. Enquanto estudava sobre tais exames e simulações, David encontrou o seguinte problema: \"Numa dada simulação, o time de defesa tática deve encontrar e desarmar um alarme - que simula uma bomba - que contém dois inteiros A e B. Para desarmar a bomba, o time deve escrever o maior divisor comum de todos os inteiros de A até B\". Ninguém sabe o por que simulariam uma bomba com tais condições, mas David está curioso para saber qual seria a resposta certa, dependendo dos números que constassem no visor. Como ele não é tão bom como programação ( ou matemática ), ele pediu sua ajuda para encontrar a resposta do seguinte problema : \"Dado dois inteiros A e B, imprima o maior divisor comum de todos os inteiros [A, A+1, A+2, ...., B]\".",
        "titulo": "Pare A Bomba!",
        "entrada": "A entrada começa com um inteiro T que represta o número de casos de testes. Seguem T linhas, cada uma contendo dois inteiros A e B ( 1 <= A <= B <= 10¹°°), já descritos no problema."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1567",
        "saida": "Para cada linha de entrada, deve ser gerada um saída com seis inteiros S2, R2, S3, R3, S4, R4 em uma única linha, onde S2 indica o número de quadrados contidos na grade bidimensional (NxN), R2 indica o número de retângulos contidos na grade bidimensional (NxN). S3, R3, S4, R4 tem o mesmo significado porém em dimensões superiores, como descrito antes.",
        "descricao": "Veja a grade (4x4) abaixo. Você consegue dizer quantos quadrados e retângulos ela contém? Você pode assumir que quadrados não são retângulos. Talvez seja possível contar a mão, mas você conseguiria fazer isso para uma grade (100x100) ou para uma grade (10000x10000)? E para dimensões maiores? Isto é, você poderia contar quantos cubos ou caixas de tamanhos diferentes há em uma cubo de dimensões (10x10x10) ou quantos hipercubos ou hipercaixas de tamanhos diferentes existem em um hipercubo de 4 dimensões de tamanho (5x5x5x5x5)? Lembre-se que o seu programa precisa ser muito eficiente. Você pode assumir que quadrados não são retângulos, cubos não são caixas e hipercubos não são hipercaixas.",
        "titulo": "(2/3/4)-D Sqr/Rects/Cubes/Boxes?",
        "entrada": "A entrada contém um número inteiro N (0 ≤ N ≤ 100) em cada linha, que é o comprimento de um lado da grade ou cubo ou hipercubo. Tal como para o exemplo acima, o valor de N é 4. Pode haver mais de 100 linhas de entrada."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2044",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um número inteiro, o que representa o número de vezes que Inês vai ter de ir à casa de Ignácio para pedir seu dinheiro.",
        "descricao": "Ignácio e Inês realmente gostam de ciência. Eles vivem em Noglônia, onde todos sabem que há N museus de ciência. Ignácio e Inês têm N sábados livres, então eles concordaram em uma programação para visitar um museu de ciência diferente em cada um desses dias. Ignácio é muito mesquinho, então todo sábado ele irá dizer a Inês que se esqueceu de trazer o dinheiro para pagar a entrada do museu, e pedi-la para pagar por ele. Inês sempre faz isso, e por conhecê-lo bem, sabe que também que ele nunca irá pagá-la se ela não pedir seu dinheiro de volta. Na verdade, Inês sabe que mesmo que ela peça Ignácio seu dinheiro de volta, ele só aceitará pagar se a dívida acumulada é um múltiplo de 100, porque senão ele vai argumentar que não tem nenhuma dívida a pagar exatamente, e então não pagará nada. Sendo essa situação, todos os domingos, se a dívida acumulada é um múltiplo de 100 Inês vai até a casa de Ignácio para reivindicar o seu dinheiro, e porque ele não vai ter nenhuma desculpa irá pagar, sem qualquer tipo de desculpa. É claro que Ignácio não gosta disso, mas é consolado pela ideia de que, se a dívida acumulada depois de visitar os N museus não é um múltiplo de 100, Inês não deve cobrar a última parte de seu dinheiro. Inês gostaria de saber quantas vezes ela vai ter que ir para a casa de Ignácio para pedir seu dinheiro. Para o cálculo, ela pode fornecer uma lista de preços dos ingressos para os N museus de ciência em Noglônia, na ordem em que ela e Ignácio vão visitá-los.",
        "titulo": "Em Dívida",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém um número inteiro N, indicando o número de museus de ciência em Noglônia (1 ≤ N ≤ 100). A segunda linha contém N inteiros Pi representando os preços dos ingressos para os diferentes museus, na ordem em que eles vão ser visitados (1 ≤ Pi ≤ 100 para i = 1, ..., N). O final da entrada é indicado por -1."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "2068",
        "saida": "A saída deve ser a probabilidade de haver o encontro no formato a/b, tal que a/b é uma fração irredutível.",
        "descricao": "Um aplicativo bastante popular hoje em dia é o Taynder. A proposta do aplicativo é conhecer pessoas, se relacionar e marcar encontros. Foi no Taynder que Mel e Tob se conheceram. Como Mel e Tob já conversaram por 40 minutos, eles acham que é hora de se conhecerem pessoalmente então marcaram de se encontrar na principal praça da cidade. O único problema é que a hora do encontro não ficou muito bem definida, tudo que eles sabem é o intervalo de tempo marcado para o encontro, mas não sabem de que horas o outro vai chegar. Para não passar o dia esperando a pessoa que chegar primeiro espera um pouco e se a outra pessoa não chegar ela vai para casa achar outra pessoa no Taynder. Por exemplo: se Mel e Tob marcam de se encontrar no intervalo real [16h, 17h] com espera máxima de 15 minutos significa que Mel e Tob podem chegar em qualquer momento do intervalo (incluindo 16h e 17h) e quem chegar primeiro, digamos no tempo x, ficará esperando o outro no intervalo de tempo definido por [x, x+15]. Você deve escrever um programa que, dado o intervalo de tempo do encontro e dado o tempo de espera máximo, determine a probabilidade de haver o encontro.",
        "titulo": "Marcando um Encontro",
        "entrada": "Cada caso de teste consiste de uma única linha contendo: t1, t2, N. t1 e t2 são inteiros representando o tempo em horas tal que t2 > t1 e 1 ≤ t1, t2 ≤ 10⁶, N também é um inteiro e representa o tempo máximo que Mel ou Tob irão esperar em minutos tal que 1 ≤ N ≤ (t2-t1) * 60."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "2148",
        "saida": "Para cada caso de teste, imprima uma linha, contendo um valor, de dupla precisão, com 15 casas decimais, informando a probabilidade de acertar o palpite da rodada correspondente.",
        "descricao": "Todo domingo, um grupo de amigos se reunia em um banco da praça para conversar. Além disso, jogavam algo chamado “dadinho”, que em outras regiões, é chamado de “zezinho”. Cada jogador começava com um dado e um palpite, arremessava o mesmo sobre o banco, e se acertasse o resultado, pegaria mais um dado. A cada rodada, o processo se repetia, com o palpite do resultado da soma dos dados jogados sobre o banco. Quem acertasse, pegaria outro dado. O jogo termina quando um jogador acerta um palpite após ter 13 dados na mão. Considere que todos os dados usados no jogo são honestos e possuem seis faces, numeradas de 1 a 6. Mas a medida que aumentava a quantidade de dados, ficava mais difícil acertar o palpite. Desse modo, pediram a você que faça um programa o qual, dado um palpite de soma, e uma quantidade de dados, calcule a probabilidade de acertar tal palpite. Escreva um programa que, - dado um número inteiro, representando o palpite de soma, e outro número inteiro, sendo a quantidade de dados a serem jogados -, calcule a probabilidade de acerto do palpite.",
        "titulo": "Banco de Dados",
        "entrada": "O primeiro valor a ser lido é um inteiro C, indicando o número de casos de teste. Cada caso de teste inicia com dois inteiros S e D (1 ≤ S ≤ 80, 1 ≤ D ≤ 13), indicando a soma do palpite e a quantidade de dados."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1688",
        "saida": "Para cada caso de teste, a saída consiste em Q linhas contendo o vencedor do jogo (considerando que ambos jogam de forma ótima) para cada uma das Q operações sugeridas pelo conselheiro.",
        "descricao": "Durante sua última visita ao planeta Tatooine, Han Solo foi capturado por mercenários de Jabba, the Hutt e levado ao seu palácio. Jabba, sabendo que Solo não tem dinheiro para pagar sua dívida propôs um acordo. Ambos iriam disputar uma partida de Nim Intergalático e, se Han vencesse sua dívida estaria paga, caso contrário, sua dívida seria duplicada. O Nim Intergalático é uma variação do conhecido jogo de Nim, onde pedras são arrumadas em colunas e em cada rodada um jogador tem que remover uma ou mais pedras de uma das colunas. O jogador que não puder realizar mais movimentos é considerado o perdedor. No caso do Nim Intergalático um dos jogadores (nesse caso Jabba) escolhe um número N (N <= 10^18) e as pedras são colocadas em N colunas sendo que a i-ésima coluna contém i pedras (primeira coluna com 1 pedra, segunda coluna com 2 pedras, e assim por diante). Tendo vasto conhecimento sobre esse tipo de jogos, e sabendo que quem faz o primeiro movimento (nesse caso Jabba) tem maior chance de ganhar, Han sugeriu uma pequena modificação no jogo. Ele poderia escolher três inteiros A, B e K e adicionar K pedras a todas as colunas entre A e B inclusive. Jabba aceitou sua proposta mas com uma limitação: o conselheiro de Jabba vai considerar Q possíveis operações deste tipo e Solo deve aplicar cada uma destas operações independentemente ao jogo original. Como Han não está acompanhado de seu fiel companheiro Chewbacca (que costuma ajuda-lo nessas situações), ele pediu para você ajuda-lo a vencer Jabba.",
        "titulo": "Nim Intergalático",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. A primeira linha do teste consiste de dois inteiros N (N <= 1018) e Q (Q <= 105), o número escolhido por Jabba e a quantidade de operações na lista do conselheiro respectivamente. As Q próximas linhas consistirão de 3 inteiros A, B (1 <= A <= B <= N) e K (-A <= K <= 1018) descrevendo as operações escolhidas pelo conselheiro."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1247",
        "saida": "Para cada caso de teste imprima uma linha contendo ‘S’ se for possível que a Guarda Costeira alcance o fugitivo antes que ele ultrapasse o limite de águas internacionais ou ‘N’ caso contrário.",
        "descricao": "\"Pega ladrão! Pega ladrão!\" Roubaram a bolsa de uma inocente senhora que caminhava na praia da Nlogônia e o ladrão fugiu em direção ao mar. Seu plano parece obvio: ele pretende pegar um barco e escapar! O fugitivo, que a essa altura já está a bordo de sua embarcação de fuga, pretende seguir perpendicularmente à costa em direção ao limite de aguas internacionais, que fica a 12 milhas náuticas de distância, onde estará são e salvo das autoridades locais. Seu barco consegue percorrer essa distância a uma velocidade constante de VF nós. A Guarda Costeira pretende interceptá-lo, e sua embarcacão tem uma velocidade constante de VG nós. Supondo que ambas as embarcações partam da costa exatamente no mesmo instante, com uma distância de D milhas náuticas entre elas, será possível a Guarda Costeira alcançar o ladrão antes do limite de aguas internacionais? Assuma que a costa da Nlogônia é perfeitamente retilínea e o mar bastante calmo, de forma a permitir uma trajetória tão retilínea quanto a costa.",
        "titulo": "Guarda Costeira",
        "entrada": "A entrada é composta por diversos casos de teste e termina com final de arquivo (EOF). Cada caso de teste é descrito em um linha contendo três inteiros, D (1 ≤ D ≤ 100), VF (1 ≤ VF ≤ 100) e VG (1 ≤ VG ≤ 100), indicando respectivamente a distância inicial entre o fugitivo e a Guarda Costeira, a velocidade da embarcação do fugitivo e a velocidade da embarcação da Guarda Costeira."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1422",
        "saida": "Para cada instância na entrada, imprima uma linha contendo a quantidade de bactérias que Pietro terá no início do dia N. A resposta dada deve ser módulo 13371337.",
        "descricao": "Pietro Demazio é um terrorista italiano condenado que fugiu para o Brasil, onde conseguiu um disfarce trabalhando como programador de jogos.  Em seu novo plano de destruição do planeta, Pietro desenvolveu um novo tipo de bactéria mortal, capaz de dizimar toda a população terrestre. Durante 4 dias, Demazio criou colônias desses micro-organismos, mas ao fim do quarto dia, descobriu que o código genético das mesmas possuía um grave erro, que fazia com que as bactérias morressem depois de 4 dias de vida. Como a primeira colônia fora criada 3 dias atrás, ele rapidamente modificou o código genético delas (através de radiação), de modo que elas se reproduzissem todas os dias. Tal reprodução é assexuada, e é feita por bipartição (ou seja, uma bactéria gera exatamente outra bactéria por dia). Assim, se Pietro criou 3 bactérias no dia 1, 4 no dia 2, 2 no dia 3 e 5 no dia 4, terá no total 14 bactérias ao final do quarto dia, quanto ele faz a mutação. Logo após tal mutação, elas se reproduzem, e aí teremos 28 bactérias. Como a primeira colônia (com 3 bactérias) morre ao final desse quarto dia, o número de bactérias no início do quinto dia é 25. Ao final do quinto dia, essas 25 se reproduzem, resultando em 50 bactérias. Mas como a segunda colônia (com 4 bactérias) morre ao final desse dia, no início do sexto dia tem-se 46 bactérias. Demazio observa com atenção tal crescimento da população de bactérias, e já está planejando quando vai liberá-las para fazer o serviço. Para tal, ele precisa saber quantas bactérias existirão depois de um determinado número de dias. Ele pede a você que faça um programa que determine a quantidade de bactérias existentes depois de N dias, dadas as populações das 4 primeiras colônias.",
        "titulo": "Bactérias",
        "entrada": "A entrada contém várias instâncias. Cada instância possui duas linhas. A primeira linha possui um inteiro N (5 ≤ N ≤ 1.000.000.000), representando o dia para o qual Pietro deseja saber a população de bactérias que ele terá. A segunda linha contém quatro inteiros a1, a2, a3, a4 (1 ≤ a1, a2, a3, a4 ≤ 1.000), onde ak representa a quantidade de bactérias criadas no dia k. A entrada termina quando N = 0."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1399",
        "saida": "Imprimir n linhas, uma para cada número inteiro da matriz final.",
        "descricao": "Escreva um programa que transforme uma matriz A[1], A[2], ..., A[n] de acordo com as m instruções. Cada instrução (L, R, v, p) significa: Primeiro, calcular quantos números de A[L] a A[R] (inclusive) são estritamente inferiores a v, chame esta resposta de k. Em seguida, altere o valor de A[p] para u*k/(R - L + 1), aqui nós usamos a divisão inteira (ou seja, ignorando parte fracionária).",
        "titulo": "Transformador de Matriz",
        "entrada": "A primeira linha de entrada contém três inteiro n, m, u (1 ≤ n ≤ 300.000, 1 ≤ m ≤ 50.000, 1 ≤ u ≤ 1.000.000.000). Cada uma das n linhas seguintes contém um número inteiro A[i] (1 ≤ A[i] ≤ u). Cada uma das m linhas seguintes contém uma instrução que consiste de quatro números inteiros L, R, v, p (1 ≤ L ≤ R ≤ n, 1 ≤ v ≤ u, 1 ≤ p ≤ n)."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1555",
        "saida": "Para cada caso de teste imprima uma linha, contendo uma frase, indicando quem ganhou a competição. Por exemplo, se Rafael ganhar a competição, imprima “Rafael ganhou”. Assuma que nunca haverá empates.",
        "descricao": "Na última aula de matemática, Rafael, Beto e Carlos aprenderam algumas novas funções matemáticas. Cada um deles se identificou com uma função em especial, e resolveram competir para ver quem tinha a função de maior resultado. A função que Rafael escolheu é r(x, y) = (3x)² + y². Já Beto escolheu a função b(x, y) = 2(x²) + (5y)². Carlos, por sua vez, escolheu a função c(x, y) = -100x + y³. Dados os valores x e y, diga quem escolheu a função com o maior resultado.",
        "titulo": "Funções",
        "entrada": "A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste. Cada caso de teste consiste em dois inteiros x e y (1 ≤ x, y ≤ 100), indicando as variáveis a serem inseridas na função."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1658",
        "saida": "Para cada caso de teste, imprimir uma linha contendo o formato abreviado da sequência com o número mínimo de operações ao qual resulta na mesma configuração de pontos da sequência de entrada. Em caso de múltiplas soluções ótimas, imprimir qualquer solução.",
        "descricao": "Considere n pontos em círculo com números k = 0, 1, ..., n-1. Inicialmente, o ponto k faz um ângulo de 360 · k / n graus para o eixo x, medido em sentido anti-horário. Vamos realizar dois tipos de operações neste conjunto de pontos: rotacionar em 360 / n graus no sentido horário refletir em relação ao eixo x A figura a seguir mostra um exemplo dessas operações: Dada uma seqüência de operações, estamos interessados na menor seqüência de operações que resulta no mesmo resultado, ou seja, a posição de cada ponto é a mesma após a realização de qualquer uma dessas seqüências de operações. A seqüência é dada por uma string contendo os caracteres 'r' e 'm' que representam a rotação no sentido horário e reflexão respectivamente (\"à direita\" e \"espelho\"). Várias ocorrências consecutivas do mesmo caracter são coletadas na representação , e por conveniência, isto também será feito para ocorrências individuais. Assim, \"rrmrrrrrrrrrrrr\" será abreviado para \"r2 m1 r12\". As representações de diferentes operações são sempre separados por um único espaço.",
        "titulo": "Grupos Diedro",
        "entrada": "O arquivo de entrada é composto por vários casos de teste. Cada caso de teste começa com uma linha contendo n (3 ≤ n ≤ 108), o número de pontos. A segunda linha de cada caso de teste consiste em uma sequência abreviada de operações, como descrito acima. Todos números serão positivos e menors do que 108. Não haverá nenhuma linha em branco na entrada, e nenhuma linha irá conter mais de 100000 caracteres. O último caso de teste é seguido por uma linha contendo 0."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1163",
        "saida": "Para cada disparo, seu programa deve imprimir uma única linha no seguinte formato, “X -> DUCK” para quando o pato acertar a Nlogônia ou “X -> NUCK” quando o pato não acertar a Nlogônia, onde X eh a distancia máxima que o projetil atingiu até chegar ao chão (Y=0). X deve ser impresso com 5 casas decimais.",
        "descricao": "Em uma terra distante existem duas cidades, a Nlogônia onde vivem os Nlogoneses, e Ducklogônia onde vivem seus vizinhos os Duckneses, já à algum tempo estas duas cidades estão em guerra e agora em uma tentativa de ganhar a guerra os Duckneses pretendem atacar a cidade da Nlogônia com um bodoque que atira patos, porem para que não haja erro eles pediram que você construa um programa que dados os valores da altura do bodoque (h), os pontos onde inicia (p1) e onde termina (p2) a cidade da Nlogônia, o ângulo do disparo ( α) e a velocidade do lançamento, calcule se o projetil atingira o alvo. Para os cálculos assuma que a aceleração da gravidade é g = 9.80665 e que π = 3.14159.",
        "titulo": "Angry Ducks",
        "entrada": "Existem vários casos de teste, cada caso inicia com 1 valor de ponto flutuante h (1 ≤ h ≤ 150) indicando a altura do bodoque, a próxima linha contem 2 valores inteiros p1 e p2 (1 ≤ p1, p2 ≤ 9999) indicando onde inicia e onde termina a Nlogônia, a linha seguinte contem um inteiro n (1 ≤ n ≤ 100) indicando o numero de tentativas que serão feitas para acertar a Nlogônia, as n linhas seguintes contem dois valores de ponto flutuante com os valores do ângulo α (1 ≤ α ≤ 180) e a velocidade V (1 ≤ V ≤ 150) do disparo. O final do arquivo de entrada é determinado por EOF."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2063",
        "saida": "Imprima o menor tempo em que todos os Digletts vão aparecer juntos na superfície.",
        "descricao": "Diglett é um Pokémom do tipo terra que fica no subsolo cavando túneis e quase nunca é visto. Ele aparece na superfície através de um buraco no solo de tempo em tempo, onde é possível visualizar apenas a sua cabeça. Os túneis construídos por eles são unidirecionais e sempre conectam um buraco de origem a um buraco de destino, por exemplo: se existe um túnel conectando o buraco A ao buraco B, então é possível ir de A para B e não o contrário. Cada Diglett possuí o seu próprio buraco, o que indica que se existir N buracos vão existir N Digletts. Cada buraco possuí exatamente dois túneis: o primeiro túnel, que sai a partir dele para outro buraco e o segundo túnel, que chega até ele a partir de outro buraco. Os Digletts ficam andando de buraco em buraco a cada instante de tempo, por exemplo: considere um buraco A que tenha um túnel que o conecta a um buraco B, se um Diglett está no buraco A no tempo T, então no próximo instante de tempo T+1 ele vai estar no buraco B. Quando um Diglett chega no seu buraco, ele aparece imediatamente na superfície. Quando não está no seu buraco, ele simplesmente permanece no subsolo e espera o próximo instante de tempo para andar no túnel e ir a outro buraco. É garantido que cada Diglett sempre voltará ao seu buraco em alguns instantes de tempo. Xisto é um Mestre Pokémom e está em busca de capturar a maior quantidade de Digletts com apenas uma pokebola, esta por sua vez é capaz de capturar todos os Digletts visíveis em uma determinada área. Ele precisa da sua ajuda para saber qual é o menor tempo em que todos os Digletts vão aparecer na superfície ao mesmo tempo, para assim poder lançar a pokebola e pegar todos eles. Obs: No instante zero todos os Digletts estão no seu respectivo buraco e não aparecem na superfície.",
        "titulo": "Caçando Digletts",
        "entrada": "A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100) que representa a quantidade de buracos. A linha seguinte contém N inteiros Bi (1 ≤ Bi ≤ N), onde o i-ésimo inteiro representa o i-ésimo buraco, e indica que existe um túnel unidirecional do i-ésimo buraco para o buraco Bi."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2100",
        "saida": "Para cada instância imprima uma linha contendo o número de jeitos diferentes que os casais poderiam ocupar as poltronas de forma que não ﬁquem separados. A resposta dada deve ser módulo 1300031.",
        "descricao": "Harbin tem um dos maiores cinemas do mundo. O Cinema \"Xing Tzen Zu\" é muito largo, tendo poucas ﬁlas com muitas cadeiras. O governo chinês tem regras especíﬁcas para as pessoas irem ao cinema: cada casal deve se sentar sempre na mesma ﬁleira (a primeira ﬁleira é ocupada por fazendeiros, motoristas, mecânicos, a segunda por professores, comerciantes, bombeiros, e assim por diante). Mas, ao mesmo tempo, é proibido que as pessoas sentem exatamente na mesma posição em duas noites. Isso preocupou o prefeito da cidade, que procurou então descobrir quantas noites o cinema poderia abrir sem que fosse necessário repetir uma conﬁguração que já tinha acontecido anteriormente. Uma restrição importante é que os casais devem sempre ocupar poltronas vizinhas na ﬁleira. Sua tarefa neste problema é determinar, dado o número de poltronas N e o número de casais M, quantos jeitos diferentes os casais poderiam ocupar as poltronas de forma que não ﬁquem separados.",
        "titulo": "Cinema de Xing Tzen Zu",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por uma linha que contém dois inteiros N (2 ≤ N ≤ 4000) e M (1 ≤ M ≤ N/2)."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1347",
        "saida": "Para cada caso de teste da entrada, seu programa deverá imprimir uma única linha, contendo um número inteiro representando a distância que você precisa para andar para sair da mina. Claro, você não deve considerar as distâncias que você se teletransportou. A distância deve ser arredondado para o número inteiro mais próximo.",
        "descricao": "No ano de 2222, um terrível desastre aconteceu na mina de kryptonita em Marte: um marsquake sacudiu parte do planeta. Diferentemente de terremotos na Terra, marsquakes não são incomuns em Marte. Este, no entanto, gerou uma mina que começou a afundar-se lentamente para o solo. A mina tem uma forma externa retangular, e seu interior é como um labirinto, com elevações, paredes retas e, mais o importante, teletransportes. Teletransporte, como você sabe, pode transportar pessoas instantaneamente de um lugar para outro. O teletransporte da mina são dos modelos antigos, usando a tecnologia antiga, e só pode teleportar pessoas se houver uma clara visão a partir de uma outra cabine de teletransporte (isto é, se não existem obstáculos ou paredes entre as cabines). Você pode ver o mapa da mina na figura abaixo. ​​ Você está preso sozinho dentro da mina. Felizmente, você tem um mapa de toda a minha, conhece a sua posição atual, a posição das paredes, os locais de saída e todas as cabinas de teletransporte. Infelizmente, o marsquake afetou o sistema de energia, e você sabe que o teletransporte só pode ser usado por um período e número limitado de vezes. Você quer sair andando o mínimo possível, já que torceu o tornozelo durante o marsquake. Você deve encontrar o caminho do seu local atual para a saída que exige a mínima quantidade de caminhada.",
        "titulo": "Mina Kriptonita",
        "entrada": "A entrada é constituída por vários casos de teste. A primeira linha de um caso de teste contém três inteiros N, M e L, que indicam, respectivamente, o número de vezes que os teletransportes podem ser usados, o número de paredes da mina e o número de cabines do teletransporte (0 ≤ N, M, L ≤ 50). Cada uma das linhas seguintes contém M quatro inteiros X1, Y1, X2 e Y2, que representam as coordenadas dos pontos de extremidade de uma parede. Você pode ignorar a espessura das paredes e assumir que eles não se cruzam entre si (-20.000 ≤ X1 < X2 ≤ 20.000 e -20000 ≤ Y1 ≤ Y2 20.000). As próximas L linhas contêm a localização dos estandes de teletransporte, dada por dois inteiros Xp e Yp. A última linha de cada caso de teste contém quatro inteiros Xb, Yb, Xe e Ye onde (Xb, Yb) são as coordenadas da sua localização e (Xe, Ye) são as coordenadas para sair da mina. O fim da entrada é indicado por M = N = L = 0."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1563",
        "saida": "Para cada teste, a saída é composta por uma linha contendo a fração irredutível que responde o enunciado.",
        "descricao": "Sorteando dois números inteiros A e B entre 1 e N inclusive, qual é a chance de que o número B seja menor ou igual ao resto de N dividido por A? Por exemplo, para N=5, há 25 escolhas possíveis para (A,B), porém os únicos pares que satisfazem o enunciado são (2,1), (3,1), (3,2) e (4,1). Portanto para N=5, a probabilidade é igual a 4/25.",
        "titulo": "O Grande Problema",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha conténdo um inteiro N (1 ≤ N ≤ 108)."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1297",
        "saida": "Para cada caso de teste de saída imprima uma linha com um número racional que representa a profundidade d que deve ser permitido à ACM cavar o pedaço de terra, de modo que eles peguem uma área de minerais a partir da camada do meio no perfil exato A. O resultado deve ser saída como um número racional com exatamente cinco dígitos depois do ponto decimal, arredondado, se necessário.",
        "descricao": "Arsênico & Cyanide Mineração (ACM) é uma empresa que recentemente decidiu começar a desenvolver suas minas nas terras perto de sua cidade natal. Como um membro do comité de regulamentação dos cidadãos para as operações da ACM, sua tarefa é controlar o quanto a empresa pode extrair dessas terras, de modo que você terá que manter os empregos e os benefícios de sem sacrificar o meio ambiente e a saúde da população local. A ACM tem planos para minerar vários pedaços retangulares de terra. Um pedaço de terra tem a largura W, pode ser desenterrado para uma profundidade máxima D, e tem uma superfície plana a qual nós consideramos ser a profundidade 0. Os minerais em um pedaço de terra estão organizados em três camadas, que podem variar na sua profundidade ao longo da largura deste pedaço, mas sempre tem o mesmo perfil ao longo do seu comprimento total. Por isso, a ACM está apenas interessado no perfil ao longo da largura de cada pedaço, e tem realizado trabalhos exploratórios, a fim de determinar com precisão a sua forma. Como resultado, eles descobriram que as duas interfaces entre as três camadas de minerais pode ser representada por duas funções y1(x) e y2(x), em que a primeira descreve o limite entre a camada superior e da camada do meio, e o segundo descreve o limite entre a camada intermédia ea camada inferior. Estas funções são de tal forma que sempre -D < y2(x) < y1(x) < 0 for 0 ≤ x ≤ W , ou seja, os limites das camadas não se tocam. Além disso, cada função está na forma yi(x) = pi(x)/qi(x), onde ​ para i = 1, 2 e um determinado inteiro K. A figura abaixo mostra o perfil dos dois pedaços de terra no formato representado pela ACM. O pedaço da esquerda tem largura W = 6 e profundidade D = 9, enquanto que o pedaço da direita tem W = 8 e D = 10. Os limites das camadas de cada pedaço são descritos pelas funções definidas abaixo deles. ​ A ACM vai cavar tudo em um pedaço de terra até uma certa profundidade de escavação d, e, em seguida, vender todos os minerais assim obtidos para lucrar com isso. No entanto, os minerais da parte superior e das camadas inferiores são essencialmente sem valor, de modo que o lucro de toda a operação vem exclusivamente a partir desses minerais na camada do meio. Na verdade, o lucro é proporcional a área A da camada do meio no perfil que está a uma profundidade de pelo menos d. Dada a descrição de um pedaço de terra e um inteiro A, você gostaria de saber a profundidade de escavação d que você deve permitir que o ACM escave a fim de que peguem uma área de minerais na camada do meio com o perfil exato A. Na figura abaixo você pode ver a resposta dos dois casos de teste para a mesma entrada. Para o pedaço da esquerda, a fim de pegar uma área A = 14, a profundidade de escavação deve ser de pelo menos d = 4.00000, enquanto que para o pedaço da direita de área também igual a 14, requer uma profundidade de escavação d = 5.51389.",
        "titulo": "Proteção do Meio Ambiente",
        "entrada": "Cada caso de teste é descrito usando 5 linhas. A primeira linha contém 4 inteiros W, D, A e K, onde W é a largura do pedaço de terra que a ACM deseja minerar (1 ≤ W ≤ 8), D é a profundidade (1 ≤ D ≤ 10), A é a área da camada do meio com o perfil que a ACM deseja(1 ≤ A ≤ W x D), e K permite a definição das interfaces y1(x) e y2(x) conforme explicado acima (0 ≤ K ≤ 8). Cada uma das outras linhas contém K + 1 inteiros entre -108 e 108, inclusive. A segunda linha contem os coeficientes de p1(x) desde P1,0 até P1,K. A terceira linha contém os coeficientes de q1(x) desde Q1,0 até Q1,K. A quarta linha contém os coeficientes de p2(x) desde P2,0 até P2,K. A quinta linha contém os coeficientes de q2(x) desde Q2,0 até Q2,K. Em cada caso de teste, A é estritamente menor que a area total da camada do meio do perfil e existe um único valor d tal que de tal forma que uma profundidade de escavação d origina uma área de minerais a partir da camada do meio em um perfil exato A. Além disso, q1(x) 6= 0, q2(x) 6= 0 e -D < y2(x) < y1(x) < 0, para 0 ≤ x ≤ W."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1969",
        "saida": "Para cada evento da forma -> A B, imprima uma linha contendo um valor que represente o número de possibilidades para o arquivo com o qual se entrou na máquina. Após processar todos os eventos, imprima uma linha extra contendo um valor que represente o número de possibilidades para o arquivo com o qual A. K. M. entraria na máquina se desejasse enviar uma mensagem para todas as G gerações. Como os números de possibilidades representados em cada linha da saída podem ser muito grandes, imprima apenas o resto que eles deixam quando divididos por 109 + 7.",
        "descricao": "Ainda não é possível construir uma máquina que permita viagens no tempo a um corpo de matéria. No entanto, o físico Asdrubal Keyla Monteiro já conseguiu desenvolver uma máquina que consegue enviar mensagens através do tempo, comunicando-se com gerações do futuro. Teoricamente também seria possível utilizar essa máquina para enviar mensagens a gerações do passado, mas elas não teriam a tecnologia para receber essas mensagens. Cada mensagem é uma sequência binária de um comprimento fixo estabelecido pela geração com a qual A. K. M. está se comunicando. O fim de cada mensagem é sempre marcado por 11, padrão que obviamente não pode ocorrer em nenhum outro lugar da mensagem, senão a mensagem chegaria truncada ao seu destino. Por exemplo, se o comprimento de mensagem estabelecido pela geração com a qual A. K. M. está se comunicando é 6, há 5 possibilidades para a mensagem enviada para aquela geração: 000011      001011      010011      100011      101011 O interessante desse protocolo de comunicação é que, concatenando-se mensagens, é possível entrar com um único arquivo na máquina para que ela envie uma mensagem para cada uma dentre um conjunto de gerações especificadas. Por exemplo, se A. K. M. deseja se comunicar com as gerações cadastradas na máquina respectivamente como 1, 2 e 3, e se os comprimentos de mensagem estabelecidos pelas gerações são respectivamente 3, 5 e 3, são 3 possibilidades para o arquivo com o qual se pode entrar na máquina: 01100011011      01101011011      01110011011 A máquina que A. K. M. desenvolveu apenas envia mensagens. Por enquanto, ainda não é possível receber mensagens do futuro. A única coisa que é possível receber de uma geração do futuro é a informação do comprimento da mensagem. Frequentemente as gerações atualizam esse valor, e A. K. M. precisa estar atento.",
        "titulo": "Generations",
        "entrada": "A primeira linha da entrada consiste de dois inteiros, G e E (1 ≤ G, E ≤ 105), os quais representam respectivamente o número de gerações cadastradas na máquina e o número de eventos descritos na entrada. As gerações são identificadas na entrada pelos inteiros de 1 a G. A segunda linha da entrada consiste de G inteiros, de modo que o i-ésimo inteiro, Ci (2 ≤ Ci ≤ 1010, 1 ≤ i ≤ G), representa o comprimento de mensagem estabelecido pela geração i. Cada uma das E linhas seguintes representa um evento e obedece um dos formatos abaixo: -> A B indica que A. K. M. entrou com um arquivo na máquina para enviar uma mensagem para cada geração de A até B (1 ≤ A, B ≤ G); indica que o comprimento de mensagem estabelecido pela geração A deve ser atualizado para C (1 ≤ A ≤ G, 2 ≤ C ≤ 1010)."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2180",
        "saida": "A saída esperada consiste em duas linhas. A primeira linha contém a velocidade que pode ser atingida pela nave, seguida pelo texto \"km/h\". A segunda linha contém o tempo estimado de viagem até Marte em horas e em dias (truncados), com mensagem de texto correspondente, conforme o exemplo abaixo.",
        "descricao": "Um grupo de cientistas está fazendo novas experiências para criar uma nave que possibilite a viagem muito mais rápida até Marte do que é possível atualmente. Esta nave utilizará dois foguetes e um novo combustível recém criado, muito mais eficiente que os utilizados até hoje. Só que a velocidade que os novos foguetes podem proporcionar à nave está relacionada diretamente com o peso do combustível armazenado nestes foguetes (em kg) e, por incrível que pareça, uma relação deste peso com números primos. Por exemplo, se o peso total do combustível dos foguetes for 1010 kg, a velocidade atingida (em km/h) é a soma dos 10 números primos à partir de 1010 (incluindo ele se for primo): 1013 -> 1019 -> 1021 -> 1031 -> 1033 -> 1039 -> 1049 -> 1051 -> 1061 -> 1063, ou seja, 10380 km/h. Os cientistas estão muito intrigados com esta relação matemática existente e querem que você construa um programa que calcule quanto tempo aproximado (em horas e em dias) uma nave levaria para ir da terra até marte com este novo combustível, dado um determinado peso de foguetes (claro, eles estão tentando criar os maiores foguetes possíveis) assumindo que a distância da terra até marte no dia do lançamento, será 60 milhões de kms.",
        "titulo": "Viagem à Marte na Velocidade de Primo",
        "entrada": "A entrada contém um único valor inteiro Peso (1000 < Peso ≤ 60000) indicando o peso máximo de combustível (em kg) que os foguetes podem armazenar."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1028",
        "saida": "Para cada caso de teste de entrada haverá um valor na saída, representando o tamanho máximo da pilha de figurinhas que poderia ser trocada entre dois jogadores.",
        "descricao": "Ricardo e Vicente são aficionados por figurinhas. Nas horas vagas, eles arrumam um jeito de jogar um “bafo” ou algum outro jogo que envolva tais figurinhas. Ambos também têm o hábito de trocarem as figuras repetidas com seus amigos e certo dia pensaram em uma brincadeira diferente. Chamaram todos os amigos e propuseram o seguinte: com as figurinhas em mãos, cada um tentava fazer uma troca com o amigo que estava mais perto seguindo a seguinte regra: cada um contava quantas figurinhas tinha. Em seguida, eles tinham que dividir as figurinhas de cada um em pilhas do mesmo tamanho, no maior tamanho que fosse possível para ambos. Então, cada um escolhia uma das pilhas de figurinhas do amigo para receber. Por exemplo, se Ricardo e Vicente fossem trocar as figurinhas e tivessem respectivamente 8 e 12 figuras, ambos dividiam todas as suas figuras em pilhas de 4 figuras (Ricardo teria 2 pilhas e Vicente teria 3 pilhas) e ambos escolhiam uma pilha do amigo para receber.",
        "titulo": "Figurinhas",
        "entrada": "A primeira linha da entrada contém um único inteiro N (1 ≤ N ≤ 3000), indicando o número de casos de teste. Cada caso de teste contém 2 inteiros F1 (1 ≤ F1 ≤ 1000) e F2 (1 ≤ F2 ≤ 1000) indicando, respectivamente, a quantidade de figurinhas que Ricardo e Vicente têm para trocar."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1304",
        "saida": "Para cada consulta na entrada padrão, você deve imprimir uma linha dando o tempo e a distância percorrida, no formato abaixo, utilizando o arredondamento padrão da linguagem.",
        "descricao": "Você comprou um carro para dirigir de Waterloo para uma cidade grande. O odômetro do seu carro está quebrado, então você não pode medir a distância. Mas o velocímetro e o Cruise Control (sistema que mantém a velocidade, previamente programada, do veículo constante) estão funcionando, de modo que o carro pode manter uma velocidade constante, que pode ser ajustada de tempos em tempos em resposta aos limites de velocidade, engarrafamentos ou filas nas fronteiras. Você tem um cronômetro e anota o tempo decorrido toda vez que a velocidade muda. De vez em quando você se pergunta: “O quão longe eu estou?”. Para resolver este problema, você deve escrever um programa para ser executado em seu computador portátil no banco do passageiro.",
        "titulo": "Velocidade Média",
        "entrada": "A entrada padrão contém várias linhas de entrada: Cada alteração de velocidade é indicada por uma linha específica com o tempo decorrido desde o início da viagem (hh:mm:ss), seguido da nova velocidade em km/h. Cada consulta é indicada por uma linha que contém o tempo decorrido. No início da viagem o carro está parado. O tempo decorrido é dado em ordem não decrescente e há, no máximo, uma variação de velocidade por linha de entrada."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1568",
        "saida": "Para cada caso de teste produza uma linha de saída. Esta linha deverá conter um inteiro que informa de quantas maneiras N pode ser expresso como a soma de inteiros consecutivos.",
        "descricao": "Todos os números positivos podem ser expressos como a soma de um, dois ou mais números inteiros positivos consecutivos. Por exemplo, 9 pode ser expresso em três diferentes formas, 2+3+4, 4+5 ou 9. Dado um número inteiro menor que (9*10^14+1) ou (9E14 + 1) ou (9*10¹⁴ +1), você terá que determinar de quantas maneiras este número pode ser expresso como a soma de números consecutivos.",
        "titulo": "{soma+=i++} até N",
        "entrada": "O arquivo de entrada contém menos de 1100 linhas de entrada (casos de teste). Cada caso de teste contém um inteiro N (0 ≤ N ≤ 9E14) . O final de entrada é determinado por EOF."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1233",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma única linha contendo um único inteiro, indicando o número de estrelas completas que podem ser desenhadas.",
        "descricao": "Fernando ganhou um compasso de aniversário, e agora sua diversão favorita é desenhar estrelas: primeiro, ele marca N pontos sobre a circunferência, dividindo-a em N arcos iguais; depois, ele liga cada ponto ao k-ésimo ponto seguinte, até voltar ao ponto inicial. Dependendo do valor de k, Fernando pode ou não atingir todos os pontos marcados sobre a circunferência; quando isto acontece, a estrela é chamada de completa. Por exemplo, quando N = 8, as possíveis estrelas são as mostradas no desenho abaixo; as estrelas (a) e (c) são completas, enquanto as estrelas (b) e (d) não o são. Dependendo do valor de N, pode ser possível desenhar muitas estrelas diferentes; Fernando pediu que você escrevesse um programa que, dado N, determina o número de estrelas completas que ele pode desenhar.",
        "titulo": "Estrela",
        "entrada": "Cada caso de teste contém de uma única linha, contendo um único inteiro N (3 ≤ N < 231), indicando o número de arcos no qual a circunferência foi dividida."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "2114",
        "saida": "Para cada instância, imprima uma linha contendo um número inteiro. Imprima 1 se o primeiro jogador ganha essa instância, imprima 2 caso o segundo ganhe e imprima 0 se houver um empate, mesmo depois de aplicadas as regras de desempate.",
        "descricao": "Poker é jogado com um baralho tradicional de 52 cartas (13 valores com 4 naipes). Os valores das cartas, em ordem crescente, são: 2, 3,..., 10, Valete, Dama, Rei, Ás. Dada uma mesa de poker, com dois jogadores, sua tarefa é determinar quem ganhou. Cada jogador possui duas cartas próprias e há cinco cartas comuns aos dois jogadores na mesa. Ganha quem conseguir uma mão de cinco cartas mais valiosa, entre as suas duas cartas próprias e as cinco cartas da mesa. Uma carta da mesa pode ser usada pelos dois jogadores ao mesmo tempo e a mão mais valiosa de um ou dos dois jogadores pode ser obtida ignorando as suas duas cartas próprias e usando as cinco comuns. Para comparar duas mãos de cinco cartas, verifica-se em quais tipos da lista abaixo elas se encaixam. Se uma mão se encaixar em mais de um tipo, escolhe-se o mais valioso. Se as duas mãos se encaixarem num mesmo tipo, se aplica uma regra de desempate específica para este tipo. A lista de tipos de mãos, ordenados do menos valioso para o mais valioso, e seus respectivos critérios de desempate é: Carta mais alta: qualquer mão que não se enquadre em nenhum dos demais tipos. No desempate, as cinco cartas são comparadas uma a uma, da mais valiosa para a menos, até uma mão apresentar uma carta com valor maior que o da outra. Um par: duas cartas de mesmo valor. O desempate é análogo ao da carta mais alta comparando primeiro o valor do par e depois as demais cartas; Dois pares: dois pares. O desempate é análogo ao da carta mais alta comparando primeiro o valor do par mais valioso, depois o valor do par menos valioso e por fim a carta restante; Trinca: três cartas de mesmo valor. O desempate é análogo ao do par; Straight: sequência de cinco cartas de valores consecutivos. Neste caso o Ás pode tomar o valor tanto de carta mais baixa (antes do 2) ou de mais alta (depois do Rei). O desempate é feito pela carta de maior valor, sendo que excepcionalmente o Ás tem o menor valor se aparecer antes do 2; Flush: cinco cartas do mesmo naipe. O desempate é feito pelo critério da carta mais alta; Full House: uma trinca e um par. No desempate é comparado primeiro o valor da trinca. Persistindo o empate, é comparado o valor do par; Quadra: quatro cartas com um mesmo valor. No desempate compara-se o valor da quadra e depois a carta restante; Straight Flush: straight e ﬂush simultaneamente. O desempate é feito como no straight. Note que é possível persistir o empate mesmo depois de aplicadas as regras de desempate. Os naipes das cartas só são considerados para definir um ﬂush, não sendo considerados em nenhuma regra de desempate.",
        "titulo": "Poker",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância é composta por três linhas. As duas primeiras linhas contêm a descrição de duas cartas cada uma, separadas por espaço. A primeira linha corresponde às cartas do primeiro jogador enquanto a segunda corresponde às cartas do segundo jogador. A terceira linha contém a descrição das cinco cartas na mesa, também separadas por espaço. Caracter Carta '2'- '9' 2 - 9 'T' 10 'J' Valete 'Q' Dama 'K' Rei 'A' Ás 'e' Espadas 'c' Copas 'o' Ouros 'p' Paus A descrição de uma carta é dada por 2 caracteres, o primeiro indica o valor da carta e o segundo o seu naipe, conforme a tabela acima."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2129",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima o primeiro dígito (da direita para esquerda) diferente de zero. Após cada instância imprima uma linha em branco.",
        "descricao": "Joãozinho é um garoto esperto da sexta série. Ele gosta muito de matemática, e descobriu que sua professora é muito preguiçosa. Nas provas da matéria a professora pede que as crianças circulem a resposta com um quadrado colorido, e que façam o primeiro dígito diferente de zero (da direita para esquerda) do número especialmente grande com caneta. Joãozinho desconfiou que a professora olhava apenas para aquele dígito para corrigir a questão. A turma aprendeu a calcular o fatorial de um número, e isso será cobrado na próxima prova. Joãozinho está convencido de que não precisa escrever de fato o número correto, desde que o primeiro dígito (olhando da direita para esquerda) seja o correto. Sua tarefa neste problema é ajudar Joãozinho a calcular para um número inteiro n da entrada, o primeiro dígito (da direita para esquerda) de n! que seja diferente de zero.",
        "titulo": "Fatorial",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste um inteiro n (1 ≤ n ≤ 1000000). A entrada termina com final de arquivo."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1306",
        "saida": "Para cada linha de entrada, você de produzir uma linha de saída. Esta linha contém o número de série de saída, seguido por um inteiro D que indica o número mínimo de sufixos necessários para nomear as ruas. Se não é possível nomear todas as ruas, você deve imprimir “impossible” no lugar (sem as aspas).",
        "descricao": "No meu país, as ruas não têm nomes, cada uma delas tem apenas um número como nome. Estes números devem ser únicos, mas nem sempre este é o caso. O governo local aloca alguns inteiros para citar as estradas e, em muitos casos, o número de inteiros alocados é menor do que o número total de estradas. Nesse caso, para que os nomes das estradas sejam único, alguns sufixos de caracteres únicos são utilizados. Assim, as estradas são nomeadas como 1, 2, 3, 1A, 2B, 3C etc. É claro que o número de sufixos também é sempre limitado a 26 (A, B, …, Z). Por exemplo, se existem 4 estradas e dois inteiros diferentes são alocados para nomear, então algumas declarações de nomes possíveis podem ser: 1, 2, 1A, 2B 1, 2, 1A, 2C 3, 4, 3A, 4A 1, 2, 1B, 1C Dado o número de estradas (R) e os números de inteiros alocados para a nomeação (N), o seu trabalho é determinar o número mínimo de sufixos diferentes necessários (de todas as nomeações possíveis) para nomear as ruas, assumindo que não existam duas ruas com o mesmo nome.",
        "titulo": "Numerando Estradas",
        "entrada": "O arquivo de entrada pode conter até 10002 linhas de entrada. Cada linha contém dois inteiros R e N (R < 10001, 0 < N). Aqui R é o número total de ruas a serem nomeadas e N indica o número de inteiros alocados para a nomeação. A entrada termina com \"0 0\" que não deve ser processado."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1644",
        "saida": "Para cada caso de teste, imprima uma linha com o texto original.",
        "descricao": "Brutus teve uma ideia interessante para cifrar textos. A seguir está a descrição de como a codificação é feita: Seja x1,x2,...,xn a sequência de caracteres do texto a ser cifrado. Escolha um inteiro M e N números distintos p1, p2, ..., pn do conjunto {1, 2, ..., N}, ou seja, uma permutação dos números de 1 a N. Repita o passo a seguir M vezes. Para 1≤ i ≤ N defina yi com xpi, e então para 1 ≤ i ≤ N substitua xi por yi. Por exemplo, quando nós queremos codificar o texto “hello”, escolhemos o valor M = 3 e a permutação [2, 3, 1, 5, 4], a informação será cifrada em 3 passos: “hello” -> “elhol” -> “lhelo” -> “helol”. Brutus dará a você os textos cifrados, os números M e as permutações [p1, ...pn] usados para produzir os textos cifrados. Ele vai se gabar de que, por ter usado números M enormes para a codificação, você precisará de muito tempo para decifrar os textos. Você é capaz de decifrá-los rapidamente?",
        "titulo": "Decifre o Texto",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste começa com uma linha contendo dois números N e M (1 ≤ N ≤ 80, 1 ≤ M ≤ 109). A linha seguinte consiste em N números distintos p1,...,pn (1 ≤ pi ≤ N). A terceira linha de cada caso de teste consiste em exatamente N caracteres, e representa o texto cifrado. O último caso de teste é seguido por uma linha contendo dois números zeros."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1841",
        "saida": "Para cada primo p proferido por Dolores Umbridge, imprima uma linha consistindo unicamente da resposta que o Ministro da Magia deveria lhe dar. Como a resposta pode ser um número muito grande, imprima apenas o resto que a resposta deixa quando dividida por 109 + 7.",
        "descricao": "Uma das provas do Torneio Tribruxo de 2015 será uma partida de futebol, e a Chapecoense tem treinado duro para enfrentar os jogadores de Hogwarts. A Associação Chapecoense de Futebol (ACF, ou simplesmente Chapecoense) é o time de futebol da cidade de Chapecó. Fundado em 1973, o time hoje joga entre os melhores times do Brasil, e não são uns adolescentes esquisitos de chapéu e vassoura que vão amedrontar nossos desbravadores guerreiros, mesmo que todos nós tenhamos ficado espantados quando o Cálice de Fogo escolheu os trouxas dos nossos jogadores para participarem do Torneio Tribruxo. Como já mencionamos, a história do time começa 1973 quando… Interrompemos este texto para a transmissão de um comunicado urgente do Ministro da Magia. Boa tarde, senhores e senhoras trouxas! Maldito o dia em que Dolores Umbridge saiu da prisão. Agora, vive a me atazanar com esses problemas de Matemática. E ela sabe que eu não sou bom nessas coisas. Enfim, vocês podem fazer um programa para me ajudar? O problema é o seguinte: ela me diz um número inteiro N e pede que eu lhe diga quantos divisores N tem e guarde esse N na minha cabeça. Até aí tudo bem. Não sou tão burro e não preciso de ajuda nesta parte. Mas daí ela fica me dizendo alguns números primos e, para cada primo p que ela diz, eu devo multiplicar p por N, atualizando o valor de N na minha cabeça, e, como se não bastasse, preciso ainda lhe dizer quantos divisores tem esse novo N que são compostos apenas por fatores primos menores que p. Por exemplo, se eu tenho guardado na minha cabeça N = 630 e ela diz p = 5, eu tenho que atualizar N para 3150 e dizer 6, pois os únicos divisores de 3150 compostos apenas por fatores primos menores que 5 são: 1, 2, 3, 6, 9 e 18. Mas o número N cresce muito rápido, e eu não quero perder o jogo para ela. Por favor, façam alguma coisa!",
        "titulo": "O Cálice de Fogo",
        "entrada": "A entrada é composta por no mínimo 2 e no máximo 105 linhas. A primeira linha consiste unicamente do inteiro N (2 ≤ N ≤ 1012). Cada uma das linhas seguintes consiste unicamente de um número primo p (2 ≤ p ≤ 107). Os inteiros são fornecidos na entrada na ordem em que são proferidos por Dolores Umbridge. A entrada termina em fim de arquivo."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1400",
        "saida": "Para cada linha, imprima o número real que está sendo contado, quando a m-ésima pessoa bate palmas pela k-ésima vez. Se isso nunca pode acontecer, imprima '-1'.",
        "descricao": "Existem n pessoas que estão em uma linha, em um famoso jogo chamado \"contando\". Quando o jogo começa, a pessoa mais à esquerda diz \"1\" em voz alta, em seguida, a segunda pessoa (as pessoas estão numerados de 1 a n, da esquerda para a direita) diz \"2\" em voz alta. Isto é seguido pela terceira pessoa dizendo \"3\", e assim por diante. Quanda o e-nésima pessoa (ou seja, a pessoa mais a direita) diz \"n\" em voz alta, a próxima vez vai para a sua pessoa imediatamente à esquerda (ou seja, a (n - 1)-nésima pessoa), que deve dizer \"n + 1\" em voz alta, então a (n - 2)-ésima pessoa deve dizer \"n + 2 \" em voz alta. Depois que a pessoa mais à esquerda falou de novo, a contagem vai para a direita novamente. Há um senão (caso contrário, o jogo seria muito chato!): Se uma pessoa dizer um número que é múltiplo de 7, ou sua representação decimal contém o dígito 7, ele deve bater palmas em vez disso! A tabela a seguir nos mostra o processo de contagem para n = 4 ('X' representa uma salva de palmas). Quando a 3ª pessoa bate palmas pela 4 vez, ele está realmente contando 35. Person 1 2 3 4 3 2 1 2 3 Action 1 2 3 4 5 6 X 8 9 Person 4 3 2 1 2 3 4 3 2 Action 10 11 12 13 X 15 16 X 18 Person 1 2 3 4 3 2 1 2 3 Action 19 20 X 22 23 24 25 26 X Person 4 3 2 1 2 3 4 3 2 Action X 29 30 31 32 33 34 X 36 Dado n, m e k, a sua tarefa é descobrir, quando a m-ésima pessoa bate palmas pela k-ésima vez, e qual é o número real que está sendo contado.",
        "titulo": "Jogo - Contando",
        "entrada": "Haverá, no máximo, 100 casos de teste na entrada. Cada teste contém três inteiros n, m e k (2 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ k ≤ 100) em uma única linha. O último caso de teste é seguido por uma linha com n = m = k = 0, e que não deverá ser processada."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1572",
        "saida": "Para cada consulta deverá imprimir duas linhas. A primeira linha contém o valor de P(i, j) com cinco dígitos após o ponto decimal e a segunda linha contém um número o qual é o número de chamadas recursivas necessários se a função acima mencionada foi utilizada para determinar o valor de P(i, j). Se o valor de P(i, j) é indefinido deverá imprimir -1 como o seu valor com formatação similar. Uma linha em branco deve ser impresso entre as saídas dos dois conjuntos consecutivos.",
        "descricao": "Neste problema particular, o Torneiro Surreal é um torneio, que participam apenas duas equipes. Vamos nomear estas duas equipes de Abahoni e Mohamedan. Eles jogam entre eles não mais de 2N - 1 jogos, o vencedor é a primeira equipe a conseguir N vitórias. Você pode assumir que não há jogos combinados, o resultado de cada jogo é independente e para qualquer jogo há uma constante P que é a probabilidade da equipe Abahoni ganhar e, portanto, há uma constante probabilidade Q(Q = 1 - P) que a probabilidade da equipe Mohamedan ganhar. P(i, j) é a probabilidade da equipe Abahoni ganhar a série, uma vez que eles ainda precisam i vitórias para conseguir isso, enquanto equipe Mohamedan ainda precisa J vitórias se quiserem vencer. A P(i, j) pode ser calculado com uma função tal como: Função P(i, j){    se i = 0, então, retorne 1    senão se j = 0, então, retorne 0    senão retorne pP(i - 1, j) + qP(i, j - 1) } Você vai ter que escrever um programa que dá a probabilidade de ganhar para qualquer P, i e j e também dá o número de chamadas recursivas necessárias da função acima para obter a probabilidade P(i, j).",
        "titulo": "O Torneio Surreal",
        "entrada": "A entrada contém vários conjuntos de entrada. A primeira linha contém um número de ponto flutuante P(0 < P < 1), e um inteiro N(0 ≤ N <1001), onde P é a probabilide de Abahoni ganhar e N é o número de consultas a seguir. Cada uma das N linhas seguintes contém dois inteiros i(0 ≤ i ≤ 1000) e j (0 ≤ j ≤ 1000). A entrada é terminada por um conjunto, que tem o valor de N como 0. Esta entrada não deve ser processada."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1309",
        "saida": "Para cada caso de teste imprima a string formatada de acordo com os regras de formatação.",
        "descricao": "Frequentemente é necessário escrever valores monetários em um formato padrão. Decidimos a formatação de quantidades na seguinte forma:    1. O montante deve começar com '$';    2. A quantidade deve terminar com um ponto decimal e exatamente dois dígitos seguintes;    3. Os dígitos à esquerda do ponto decimal devem ser separador em grupos de três por vírgulas. Sua tarefa neste problema é criar um programa que, recebendo dois valores inteiros dólares e centavos retorne a String formatada corretamente.",
        "titulo": "Formatação Monetária",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por dois valores inteiros, dolares (0 ≤ dolares ≤ 2 * 109) e centavos (0 ≤ centavos ≤ 99), respectivamente."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1346",
        "saida": "Para cada caso de teste seu programa deve produzir uma linha que descreva o resultado. Se não for possível encontrar uma combinação, imprima a palavra 'impossible'. Se for possível encontrar uma combinação, imprima a soma e a descrição da placa descartada (se houver). Se você tiver que descartar uma placa, descreva na forma 'discard X Y', onde X ≤ Y; caso contrário imprima 'discard none'.",
        "descricao": "Nativos da pequena ilha de Tookutoo estão interessados em matemática, e em ensinar seus filhos a jogar vários jogos orientados a matemática. Um quebra-cabeça popular em Tookutoo é jogado com placas de cerâmica como mostradas na figura abaixo. ​ Como pode ser visto na figura acima, as placas são semelhantes ao dominó, sendo divididas em duas partes, em cada peça um valor inteiro é impresso. As peças acima possuem valores [2, 1], [6, 3] e [3, 1]. Note que uma placa [a, b] também pode ser escrita como [b, a]. O quebra-cabeça começa com um jogador a receber um conjunto de placas escolhidas aleatoriamente de um conjunto amplo e variado. Usando o dado conjunto de placas, o jogador tem de encontrar uma combinação em que as placas são colocadas lado a lado sobre a mesa, de tal modo que a soma dos valores do lado superior é igual à soma dos valores no lado inferior. Por exemplo, para o conjunto da figura anterior, um arranjo correto é 1 6 1 2 3 3 Se não for possível encontrar uma combinação utilizando todas as placas escolhidas, o jogador pode descartar uma das placas, mas o valor da soma no arranjo deve ser o mais alto possível. Além disso, se mais de uma placa puder ser eliminada, deixando a mesma soma, o jogador deverá descartar a placa [a, b] de tal forma que a ≤ b e a seja o menor valor possível, considerando todas as placas possíveis a serem descartadas. Você deve escrever um programa que, dado um conjunto de placas, tenta encontrar uma combinação que satisfaça as condições do quebra-cabeça, descartando uma placa, se necessário.",
        "titulo": "Brincadeira de Criança",
        "entrada": "Seu programa deve processar vários casos de teste. A primeira linha de um caso de teste contém um inteiro N, o número de placas em ensaio (0 ≤ N ≤ 400). Cada uma das N linhas seguintes contém dois inteiros Xi e Yi descrevendo uma placa que foi dada ao jogador (0 ≤ Xi ≤ 1000 e 0 ≤ Yi ≤ 1000). O valor N = 0 indica o final da entrada."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1264",
        "saida": "Se o número com as condições dadas não for possível, imprima a linha “such number is impossible!”. Para cada linha de entrada deverá haver apenas uma linha de saída. A saída deverá ser apresentada sempre na base de numeração decimal.",
        "descricao": "Você já ouviu a expressão “A base de todo sistema normal de numeração é 10”? É claro, eu não estou falando de sistemas tais como o sistema de numeração \"Stern Brockot\". Este problema não tem nada a ver com este fato mas pode ter algumas similaridades. Você tem um número R com base N e a garantia de que R é divisível por (N-1). Você deve então imprimir o menor valor possível para N. Os dígitos para um número com base 62 seriam (0..9, A..Z e a..z). Similarmente, os símbolos dos dígitos para um número com base 61 seriam (0..9, A..Z e a..y) e assim por diante. Você terá que determinar qual é a menor base possível daquele número para as condições dadas. Nenhum número inválido será dado como entrada.",
        "titulo": "Um Problema Fácil!",
        "entrada": "Cada linha da entrada deverá conter um número inteiro N de qualquer base inteira (de 2 a 62) com até 1024 dígitos (como definido na matemática). Você terá que determinar qual é a menor base possível daquele número para as condições dadas. Nenhum número inválido será dado como entrada."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1240",
        "saida": "Para cada caso de entrada imprima uma mensagem indicando se o segundo valor encaixa no primeiro valor, confome exemplo abaixo.",
        "descricao": "Paulinho tem em suas mãos um pequeno problema. A professora lhe pediu que ele construísse um programa para verificar, à partir de dois valores inteiros A e B, se B corresponde aos últimos dígitos de A.",
        "titulo": "Encaixa ou Não I",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste consiste de dois inteiros A (1 ≤ A < 231 ) e B (1 ≤ B < 231) positivos."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1531",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro igual ao resto de Fib( Fib( N ) ) por M.",
        "descricao": "A famosa sequência de Fibonacci pode ser definida da seguinte maneira: Fib( 1 ) = Fib( 2 ) = 1 Fib( N ) = Fib( N-1 ) + Fib( N-2 ), para N > 2 Sua tarefa é simples, calcular o valor do resto de Fib( Fib( N ) ) por M.",
        "titulo": "Fibonacci de Novo!",
        "entrada": "A entrada é composta por vários casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com dois inteiros N e M (1 ≤ N ≤ 109, 2 ≤ M ≤ 106)."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "2170",
        "saida": "Para cada projeto mostre o valor dos juros para cada aplicação. Mostre conforme o exemplo de saída.",
        "descricao": "Em um projeto de investimento, cujo o valor inicial do capital é de X,renderá, após um período um valor Y. Deseja-se saber qual a Taxa Interna de Retorno do investimento, pois dessa forma poderá ser verificado o percentual dos juros.",
        "titulo": "Juros do Projeto",
        "entrada": "Existem vários projetos a serem analisados, e para cada projeto é dado o aporte de capital inicial (1 < X < 1020), e o seu retorno (X < Y < 1020)."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1662",
        "saida": "Para cada caso de teste, imprima se o quadrado especificado é homogêneo ou não. Preste atenção ao formato apresentado no exemplo de saída.",
        "descricao": "Suponha que você tenha um quadrado de tamanho n que é dividido em n×n posições como em um tabuleiro de damas. Duas posições (x1, y1) e (x2, y2), onde 1 ≤ x1, y1, x2, y2 ≤ n, são chamados “independentes” se eles ocupam diferentes linhas e colunas, isto é, x1 ≠ x2 e y1 ≠ y2. Genericamente, n posições são chamadas independentes se elas são pares independentes. Então há n! diferentes formas de escolher n posições independentes. Suponha ainda que um número é escrito em cada posição de tal quadrado n×n. Este quadrado é chamado “homogeneous” (homogêneo em português) se a soma de números escritos em n posições independentes é a mesma, não importa como as posições são escolhidas. Escreva um programa para determinar se um dado quadrado é homogêneo!",
        "titulo": "Quadrados Homogêneos",
        "entrada": "A entrada contêm vários casos de teste. A primeira linha de cada caso de teste contêm um inteiro n (1 ≤ n ≤ 1000). Cada uma das n linhas seguintes contêm n números, separados por exatamente um caracter de espaço. Cada número é um inteiro que está no intervalo [-1000000,1000000]. O último caso de teste é seguido por zero."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1694",
        "saida": "Para cada caso de teste, imprima uma única linha contendo o número de apostas diferentes que Pinkie Pie pode fazer, de forma que os números estejam todos ou na mesma linha ou na mesma coluna, e que nenhum número primo seja escolhido. Um número primo é um número natural maior que 1 que não possui divisores positivos além de 1 e si mesmo.",
        "descricao": "Pinkie Pie está se sentindo com sorte. Ela está indo para a lotérica de sua cidade para fazer uma aposta e tentar a sorte. O bilhete da aposta consiste em uma matriz de N linhas por M colunas. As casas são numeradas de 0 a N*M-1 de forma que o número da casa da r-ésima linha e c-ésima coluna (indexadas a partir do 0) é r * M + c. Uma aposta consiste em escolher K números distintos dentre os disponíveis. Pinkie pressente que os números vencedores estarão próximos uns aos outros, então ela decide escolher números que estão ou todos na mesma linha ou todos na mesma coluna. Pinkie também acredita que números primos trazem má sorte, e não fará nenhuma aposta que contém ao menos um número primo. Twilight passou em frente à lotéria e encontrou Pinkie incapaz de chegar a uma decisão. Querendo testar suas habilidades matemáticas, ela decidiu, enquanto Pinkie fazia sua escolha, calcular quantas apostas diferentes Pinkie Pie poderia fazer. Duas apostas são consideradas distintas se existe um elemento presente em uma aposta e ausente na outra.",
        "titulo": "Loteria",
        "entrada": "Existem diversos casos testes. Cada caso de teste consiste de uma única linha contendo três inteiros N, M e K (1 ≤ N, M ≤ 50; 1 ≤ K ≤ 10). O último caso de teste é seguido de uma linha contendo três zeros."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1705",
        "saida": "Imprima um único inteiro por linha, caso exista diversos múltiplos imprima o menor deles. Se não existir solução imprima -1",
        "descricao": "Para provar suar habilidade científicas a princesa Bubblegum aprendeu a programar usando BMO (O melhor computador no reinado Doce) e como todo programador ela se apaixonou por números binários. Por seu vício em números binários ela ama números decimais que parecem como um número binário (i.e. um número decimal que contém apenas dígitos 0 e 1, por exemplo 101) então dado um número decimal N ela deseja achar um múltiplo desse número que pareça um número binário, mas para alguns números estava levando muito tempo para achar esse múltiplo, mesmo com a ajuda do BMO. Por causa do seu vício por resolver problemas, ela não estava fazendo nada enquanto não acha esse múltiplo. Situação perfeita para o Conde de Lemongrab, que tomou conta do Reino Doce. Como Finn e Jake, os heróis do reino Doce, não podem fazer nada contra o Conde e não sabem nada sobre múltiplos, eles pediram para achar os múltiplos e assim salvar o reino.",
        "titulo": "Apaixonado por Binário",
        "entrada": "A entrada contém até 2*10^5 linhas, cada linha com um inteiro N (0 < N < 10^12), o número que a princesa Bubblegum deseja achar o múltiplo M (M != 0), este número deve ser menor que 10^12, caso contrário não cabe na arquitetura do BMO."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1722",
        "saida": "Para cada caso de teste a saída é escrita em uma única linha o número de números de Fibonacci com a ≤ fi ≤ b.",
        "descricao": "A definição da recursão dos números de Fibonacci: f1 = 1 f2 = 2 fn = fn-1 + fn-2         (n ≥ 3) Dado dois números a e b, calcule quantos números Fibonacci estão no intervalo [a,b].",
        "titulo": "Quantos Fibs?",
        "entrada": "A entrada contém alguns casos de teste. Cada caso de teste consiste de dois números inteiros não negativos a e b. Entrada é terminada por a = b = 0. Caso contrário a ≤ b ≤ 10100. Os números a e b são dados sem zeros desnecessários à esquerda."
    }
]