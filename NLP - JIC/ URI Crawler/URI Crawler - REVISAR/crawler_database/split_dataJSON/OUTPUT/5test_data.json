[
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1577",
        "saida": "Imprima \"Yes\" se o polígono regular pode ser construído com régua e compasso ou \"No\" caso contrário.",
        "descricao": "A pesquisa sobre quais polígonos regulares podem ser construídos apenas com régua e compasso é um problema clássico na Matemática. Triângulos, quadrados, hexágonos podem ser construídos facilmente mas, podemos construir um heptágono regular? Foi o matemático alemão Gauss (1777-1855) quem provou primeiro que se poderia construir um polígono regular de 17 lados e depois, em um dos mais bonitos trabalhos matemáticos de todos os tempos (Disquisitiones Arithmeticae, 1798), ele deu condições necessárias e suficientes para determinar quais polígonos regulares podem ser construídos.",
        "titulo": "Polígonos Regulares Construtíveis",
        "entrada": "Na primeira linha, um número inteiro T<50000 representanto o número de casos; então, T números inteiros representando o número de lados de um polígono regular não-degenerado, até no máximo 1000000 (106)."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1815",
        "saida": "O arquivo de saída deve conter, para cada instância de entrada, um identificador Instancia h, em que h é um número inteiro, seqüencial e crescente a partir de 1. Na linha seguinte um número (arredondado em 6 casas decimais) indicando a probabilidade do Mr. Třeboň não ter encontrado a sua casa após m campainhas tocadas. Uma linha em branco deve separar a saída de cada instância, inclusive na ultima.",
        "descricao": "Nos invernos de Praga o frio é insuportável. Para manter o corpo aquecido, diversos moradores utilizam-se de bebidas quentes (como café ou chá) ou alcoólicas. De tempos em tempos, Mr. Třeboň frequenta um pequeno bar de seu bairro. Porém, depois de muitas horas, alguns acabam exagerando nas doses. Nesse momento, Mr. Třeboň precisa retornar a sua casa. O problema é que ele não está se sentindo bem (ele está bêbado mesmo :-) e não lembra onde mora. Então ele começa a tocar as campainhas das casas e a perguntar se mora ali. Assim faz até encontrar sua casa. Devido ao seu estado, o Mr. Třeboň não segue nenhuma ordem lógica para tocar as campainhas das casas. Após tocar uma campainha e verificar que não é a sua casa, ele irá continuar procurando. Além disso, ele não consegue memorizar quais campainhas já tocou. A forma como ele escolhe as casas para tocar a campainha segue uma distribuição de probabilidade condicionada apenas à última casa tocada. Considere que alguém sempre atende à porta e responde ao Mr. Třeboň se ele mora ali ou não. Queremos saber qual a chance dele não conseguir chegar em casa para dormir, sabendo que após tocar um certo número de campainhas ele não aguentará mais e ficará por ali mesmo.",
        "titulo": "Drunk People?",
        "entrada": "O arquivo de entrada tem a seguinte composição para cada instância: a primeira linha contém os inteiros 0 ≤ n ≤ 100, 0 < t ≤ n, 0 < k ≤ n, 0 < m ≤ 100, representando o número de casas, a casa inicial, a casa do Mr. Třeboň e a quantidade de casas que ele poderá tocar a campainha para tentar chegar em casa, respectivamente. São dadas então n linhas. A i-ésima linha representa a casa i e contém os números ai1, ... , aij, ... , ain, separados por brancos, representando a probabilidade do Mr. Třeboň ir da casa i para a casa j. A entrada termina com n = 0."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "2101",
        "saida": "Para cada instância na entrada, imprima uma linha contendo a quantidade de combinações de dias diferentes entre os dois planetas. A resposta deve ser dada em módulo 1713371337.",
        "descricao": "Estamos no ano de 2433, e a nave Pythanic acabou de ser lançada com a primeira leva de humanos a habitar outro planeta. Tal viagem tem sido muito esperada desde que as condições de vida na Terra se tornaram extremamente difíceis após uma tentativa frustrada de um terrorista de acabar com os humanos usando bactérias mutantes, há pouco mais de 400 anos atrás. Como as bactérias foram muito mal-feitas, com muitas gambiarras de última hora, tudo o que ele conseguiu fazer foi deixar um incrível mal cheiro no ambiente. Antes que a viagem fosse feita, ealgumas decisões tiveram que ser tomadas com relação ao modo de vida que tais pessoas levariam no outro planeta. Uma dessas decisões foi de que a duração do dia seria a mesma em todos os planetas habitados pelos humanos. Ou seja, a palavra \"dia\" passa a ser simplesmente um termo que significa \"24 horas\", e não mais um termo que especifica uma rotação completa do planeta em torno de si mesmo. No entanto, ficou decidido que a duração do mês poderá variar de planeta para planeta. Preocupados com a confusão que isso poderia causar, os analistas da comissão de colonização interplanetária pediram a você para criar um programa que, dadas as durações dos meses (em dias) em dois diferentes planetas, diga quantas combinações diferentes existirão de pares (D1, D2), onde D1 é um dia do mês no planeta 1, e D2 é um dia do mês no planeta 2 (não precisam ser dias do mesmo mês). Você deve assumir que o primeiro dia 1/1 (ou seja, primeiro dia do ano) ocorre ao mesmo tempo nos dois planetas. Por exemplo, se um planeta possui 2 dias num mês e outro possui 3, teremos 6 combinações diferentes de dias: (1,1), (2,2), (1,3), (2,1), (1,2) e (2,3). Se um planeta tiver 4 dias num mês e outro possuir 2, existirão apenas 4 combinações: (1,1), (2,2), (3,1), (4,2). Dados D1 e D2, seu programa deve determinar quantas combinações de dias existem.",
        "titulo": "Combinações de Dias",
        "entrada": "A entrada contém várias instâncias. Cada instância é composta por apenas uma linha contendo dois inteiros D1 e D2 (1 ≤ D1, D2 ≤ 1.000.000.000), que correspondem ao número de dias no mês nos dois diferentes planetas. A entrada termina quando D1 = D2 = 0."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1620",
        "saida": "Para a entrada seu programa deve produzir um único resultado real X com precisão de seis casas decimais. Utilize variáveis de dupla precisão para o cálculo.",
        "descricao": "Em matemática, uma Triangulação de Delaunay para um conjunto de pontos P no plano é uma triangulação DT(P) onde nenhum ponto em P está dentro da circunferência formada por qualquer triângulo na DT(P). A Triangulação de Delaunay maximiza o menor ângulo de todos os triângulos na triangulação; esta tende a evitar triângulos com ângulos internos muito pequenos. A triangulação foi inventada por Boris Delaunay em 1934. Para um conjunto de pontos em uma mesma linha, não existe Triangulação de Delaunay (o conceito de triangulação é desfeito para este caso). Para quatro ou mais pontos em um mesmo círculo (isto é, os vértices de um retângulo) a Triangulação de Delaunay não é única: cada uma das duas possibilidades de triangulação que divide o quadrilátero em dois triângulos satisfaz a “condição Delaunay”, isto é, que as circunferências de todos os triângulos tenham interiores vazios. Considerando que as circunferências são esferas, a noção de Triangulação de Delaunay estende-se a três dimensões. Generalizações são possíveis para métricas diferentes das Euclidianas. Entretanto, nestes casos não se pode garantir a existência ou a unicidade da Triangulação de Delaunay. O doutor Louco da Silva, em seu doutorado, resolveu verificar a afirmativa sobre a triangulação de Delaunay anteriormente dita era verdadeira. Analisou as configurações de polígonos perfeito, como mostra a figura. Ele verificou que é verdadeira e que a quantidade de arcos que criam a triangulação de Delaunay para a mesma quantidade de pontos era sempre a mesma. Por exemplo, para 3 pontos é sempre 3, para 4 pontos é sempre 5, para 5 pontos é sempre 7 e para 6 pontos é sempre 9 e assim sucessivamente. Ele resolveu então criar um número real (X) determinado pela relação da quantidade de arco (I) com a quantidade de pontos (L) que é: Ajude o doutor fazendo um programa que calcule o valor do número real X.",
        "titulo": "Triangulação de Delaunay",
        "entrada": "A entrada é composta de um conjunto de teste, que contém uma única linha com um valor inteiro L (3 ≤ L ≤ 1080). A entrada termina quando L = 0."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1776",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #X: Y\", onde X é o número do caso atual, iniciando em 1, e Y é o número mínimo de salgados que eles devem comprar.",
        "descricao": "A turma de Ciência da Computação do CIn-UFPE de 2025.1 está se formando! É uma formatura muito especial, não só porque todos os projetões dos alunos desta turma viraram multinacionais, mas também porque o número 2025 é um quadrado perfeito! Por isso, os alunos decidiram tornar todos os números da cerimônia quadrados perfeitos: datas, quantidade de convidados, hash do nome da turma, até a quantidade de formandos (roleta russa FTW!). Os organizadores da festa estavam conseguindo atender a essa exigência, até chegar a hora de comprar os salgados. Eles vinham em caixas com N salgados de uma vez. Se N não for um quadrado perfeito, terão que comprar mais de uma caixa. Calcule o número mínimo de salgados que eles devem comprar para atender à demanda excêntrica dos formandos.",
        "titulo": "Baile de Formatura",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 1000), o número de casos de teste. Cada uma das próximas T linhas contém um número N (1 ≤ N ≤ 10⁹), o número de salgados que vem numa caixa só."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1869",
        "saida": "Para cada caso de teste, imprima o valor correspondente à entrada, na base 32.",
        "descricao": "Num país chamado Tresdoislândia, todos os números são tratados na base 32, na qual cada símbolo numérico representa a ordem numérica, e os algarismos seguintes utilizam as letras de A até V. Por exemplo, o número 31 na base 32 é o algarismo V, e o número 32 na base 32 se torna 10. Escreva um programa que, dado um número inteiro na base decimal, converta para a base 32.",
        "titulo": "Base 32",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (0 ≤ N ≤ 263), indicando um número na base decimal. O último caso de teste é indicado quando N = 0."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2145",
        "saida": "Seu programa deverá imprimir a relação entre os dois números, de acordo com as condições abaixo: 1 - Se o amor for correspondido, imprima \"Friends and lovers <3\"; 2 - Se o amor for quase correspondido, imprima \"Almost lovers!\"; 3 - Se o amor não for correspondido, imprima \"X friendzoned Y!\", em que a soma dos divisores de X é diferente da soma dos divisores de Y, e X é múltiplo da soma dos divisores de Y (Y ama X) mas Y não é múltiplo da soma dos divisores de X (X não ama Y); 4 - Se não houver relação, isto é, a soma dos divisores de X for diferente da soma dos divisores de Y, e X não for múltiplo da soma dos divisores de Y e Y não for múltiplo da soma dos divisores de X, imprima \"No connection.\". OBS.: Neste problema, a soma dos divisores não considera o próprio número, e nos casos em que o amor é correspondido e também quase correspondido, prevalece o amor correspondido.",
        "descricao": "Um número natural ama outro número se a soma de seus divisores for um divisor do outro número. Por exemplo, 9 ama 12, pois a soma dos divisores de 9 é igual a 4, um divisor de 12. Porém, 12 não ama 9, pois 16 (soma dos divisores de 12) não é um divisor de 9. Nesse caso, 9 ama 12 e não é correspondido, o que o torna um número na 'friendzone'. No entanto, há casos em que o amor será correspondido: quando a soma dos divisores de um número for igual ou divisor do outro número e vice-versa. Por outro lado, um amor quase correspondido é quando a soma dos divisores de um número for exatamente igual à soma dos divisores do outro número.",
        "titulo": "A Vida Amorosa dos Números",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por N e M (2 ≤ N, M ≤ 109), sendo N e M números diferentes. A entrada termina com N = M = 0."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1450",
        "saida": "Para cada instância imprima uma linha contendo a altura da maior pirâmide possível.",
        "descricao": "Ramsés II foi o mais prestigioso dos faraós egípcios. Reinou entre 1279 a.C. e 1213 a.C. Construiu vários templos, inclusive os famosos templos de Núbia. O mais famoso é um esculpido na rocha, em Abu Simpel, perto da segunda catarata do Nilo, onde o próprio faraó é reproduzido. Com Nefertari e outras esposas teve provavelmente mais de 6 filhos, com quem gostava muito de brincar de um jogo que chamava de “pirâmide mais alta”. O jogo consistia do seguinte. As crianças recebiam pequenos paralelepípedos de diferentes dimensões (que podiam ser rotacionados), e deveriam com estes cubos construir a pirâmide mais alta que conseguissem. Para construí-la não podiam colocar um paralelepípedo maior sobre um menor, ou seja, se o bloco A está sobre o bloco B, tanto a largura como a profundidade de A devem ser menores ou iguais que as de B. Amen-hotep, primogênito de Ramsés, era muito bom no jogo, e muitas vezes conseguia construir pirâmides muito mais altas que o pai conseguia. Então, Ramsés decidiu chamar o grande matemático da corte, Narmer, para encontrar para cada conjunto de paralelepípedos a maior pirâmide possível, isto é, a pirâmide com a maior altura possível.",
        "titulo": "Os Joguinhos de Ramsés",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N, onde 1 ≤ N ≤ 15, indicando o número de blocos. Cada uma das N linhas seguintes possui três inteiros X, Y e Z que indicam as medidas do bloco."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1703",
        "saida": "Para cada caso teste imprima uma única linha com a resposta. Sua resposta será considerada correta se tiver um erro absoluto menor que 0.00001. Obs.: Seguindo o exemplo de entrada, para o segundo caso de teste (3 1) teríamos as seguintes possibilidades: 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 Na primeira e segunda configurações, nós terminamos no lugar 1 após 1 passo.",
        "descricao": "Petr está jogando um jogo chamada \"Pulando Pedras\". Nesse jogo, existem N lugares em uma linha numerados de 1 a N. Em cada lugar tem uma pedra com um número escrito em cima. Os números vão de 1 a N e são todos diferentes. Petr começa no 1º lugar e realiza K passos. Em cada passo, ele olha o número escrito na pedra atual e pula para o lugar correspondente a esse número.   Fixado os inteiros N e K, determine entre todas as possíveis configurações a probabilidade que ele retorne ao 1º lugar após K passos. Assuma que todas as configurações são igualmente prováveis.",
        "titulo": "Pulando Pedras",
        "entrada": "Você receberá um inteiro T, o número de casos testes. As próximas T linhas contém N e K (1 <= N,K <= 10^5)."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1324",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma linha contendo dois inteiros não-negativos ta e tb separados por um espaço. Se não houver possibilidade de colisão, ta = tb = 0, caso contrário ta/tb deve ser uma fração irredutível representando o tempo da primeira colisão. Mesmo se a fração resultar em um valor inteiro, você ainda deve imprimir o número 1 como denominador (veja os exemplos abaixo). A saída deve ser escrita na saída padrão.",
        "descricao": "Já passaram-se 100 anos desde a detecção do primeiro Bóson de Higgs e agora a física de partículas é uma matéria principal em todas escolas de ensino médio. Obviamente, as crianças adoram o fato de poderem criar pequenos buracos negros usando apenas seus aceleradores de partículas portáteis e mostrá-los para amigos e colegas. Apesar da criação de grandes buracos negros que poderiam engolir o planeta inteiro ser possível mesmo com esses aceleradores portáteis, os aparelhos estão programados para lançar partículas apenas quando esse efeito colateral indesejável não puder acontecer. Sua neta está tentando criar buracos negros com um kit acelerador portátil, que é composto de dois pequenos aceleradores de partículas que jogam, cada um, uma partícula do tamanho de um bóson. Ambas partículas são jogadas simultaneamente, e um buraco negro aparece quando as partículas colidem. Entretanto, sua neta não sabe quanto tempo ela vai ter que esperar antes disso acontecer. Felizmente, cada acelerador pode prever a trajetória da partícula, mostrando quatro valores inteiros em seu mostrador, chamados A, B, C e D. Cada valor pode ser substituído nas seguintes equações: r = At + B θ = Ct + D para determinar a trajetória da partícula, em coordenadas polares. O raio (r) é representado em unidades de distância e o ângulo (θ) em graus. O tempo (t) é dado em unidades de tempo e é sempre um valor racional que pode ser representado por uma fração irredutível. Sua neta sabe que em coordenadas polares um ponto tem infinitas representações. Em geral, o ponto (r, θ) pode ser representado como (r, θ ± k x360°) ou (-r, θ ± (2k + 1) x 180°), onde k é qualquer inteiro. A origem (r = 0) pode ser representada como (0, θ) para qualquer θ. Usando esses parâmetros informados por cada acelerador de partículas, sua neta quer determinar se as partículas vão colidir e, se forem colidir, o momento em que o farão. Depois da primeira colisão é impossível prever a trajetória da partícula, portanto, apenas a primeira possível colisão deve ser considerada. Apesar de sua neta ser muito inteligente e ter um profundo conhecimento de física de partículas, ela não sabe programar computadores e está procurando no carderno de seu avô (ou avó) por anotações (não se esqueça, ela é sua neta!). Felizmente para você, existe uma anotação no seu caderno que fala que você escreveu aquele código durante a Competição Regional Sul-Americana do ICPC de 2008 (ou, para ser mais exato, essa competição).",
        "titulo": "Bóson de Higgs",
        "entrada": "A entrada consiste de vários casos de teste, um por linha. Cada caso de teste contém oito números inteiros separados por espaços, A1 B1 C1 D1 A2 B2 C2 D2 (-104 ≤ A1 B1 C1 D1 A2 B2 C2 D2 ≤ 104). Os primeiros quatro valores (A1, B1, C1, D1) correspondem aos quatro parâmetros mostrados pelo primeiro acelerador portátil e os valores de entrada seguintes (A2, B2, C2, D2) correspondem aos quatro parâmetros mostrados pelo segundo acelerador portátil quando ambas partículas são lançadas. O final da entrada é representado por A1 = B1 = C1 = D1, A2 = B2 = C2 = D2 = 0, que não deve ser processado como um caso de teste, uma vez que esses são os valores mostrados pelo acelerador de partículas quando um grande buraco negro seria criado se as partículas fossem lançadas. Embora o final da entrada seja representado por uma linha com oito zeros, note que o número zero é um valor de entrada possível. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1623",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro, indicando o número de palavras distintas que esta nova língua terá. E imprimirá “descartado” caso o número de palavras ultrapasse o valor de T.",
        "descricao": "Germanio um guerreiro intergaláctico e conquistador de planetas tem uma dificuldade para falar quando ele fica nervoso, ele fica um pouco gago. Então, palavras como QUERO, ele fala QQUERO, VAMOS, ele fala VVAMOS e assim por diante. Aborrecido com esta situação, Germanio decidiu que toda nova conquista de um novo planeta ele iria inventar uma nova língua. Dado um alfabeto, onde não ocorre repetição de caracteres, por exemplo, QABCDEFG, todas as palavras da nova língua começariam com a letra Q duas vezes. Neste caso, a palavra QQABCDEFG seria válida. Você analisou o caso, e ainda fez a sugestão para que os caracteres a serem repetidos possam ocorrer em qualquer parte da nova palavra desde que sejam na mesma ordem e sempre juntos. No exemplo dado, ABCDEFGQQ seria válido também. O amado guerreiro Germanio gostou de sua ideia e pediu para você calcular quantas palavras estes novos idiomas terão. Mas, se o idioma tiver um número muito grande de palavras ele quer descartar este idioma.",
        "titulo": "Linguagem",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois números inteiros N e Q (1 < N ≤ 100000, 1 ≤ Q < N), indicando o tamanho do alfabeto e o número de caracteres do alfabeto que será considerado na repetição que pode ocorrer em qualquer parte da palavra, respectivamente. A segunda linha é composta por um inteiro T( 1 ≤ 105000) indicando o número máximo de palavras permitido por idioma. O último caso de teste é indicado quando N = Q = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "8",
        "assunto": "5",
        "numero": "1625",
        "saida": "Em cada linha deverá ser impresso o tamanho da menor esteira para produzir todos os conjuntos de robocopiadores, com precisão de 10 casas decimais.",
        "descricao": "Robocopiadores são pequeninos drones que uma vez ativados copiam o movimento de rotação uns dos outros. Quando um drone é ativado junto com outros, eles trabalham em conjunto, como se fossem um só. Recentemente Daniel comprou uma fábrica de robocopiadores. Um braço mecânico coloca cada ropocobiador aleatoriamente em uma área, formando assim um conjunto de robocopiadores. Cada conjunto pode ser de composto por números diferentes de robocopiadores. E para testá-los, eles são ativados. Os robocopiadores ativados devem passar por uma esteira para posteriormente serem desativados e armazenados. Vários conjuntos de rodocopiadores podem passar pela mesma esteira. A largura da esteira deve ser sempre a menor possível, mas que comporte todos os conjuntos. Como Daniel é um empresário inexperiente, não fez um planejamento adequado e então teve de contratar funcionários adicionais para verificar manualmente qual o tamanho da esteira que ele tem de configurar para suportar os diferentes conjuntos de robocopiadores. E claro, este processo é muito custoso e demorado. Para diminuir os gastos e aumentar a eficiência, Daniel contratou você para calcular, de maneira automática, qual a menor largura da esteira para que todos os conjuntos de robocopiadores possam ser armazenados corretamente. Figure 1. Figure 2. Na Figura 1, por exemplo, a máquina ativou 3 robocopiadores (A,B e C) e a menor distância é a = 2, entre BC. Quando a máquina fizer o outro conjunto de robocopiadores (A,B,C e D) da Figura 2, a menor distância é AB ou DC, b = 3, e neste caso, o conjunto tem de ser rotacionado 90 graus para passar na esteira, que tem tamanho 3. Logo, se estes conjuntos fossem passar pela esteira, esta teria que ter uma largura mínima de 3.",
        "titulo": "Robocopia",
        "entrada": "A entrada é composta por vários casos de testes. A primeira linha é composta de um inteiro N (1 ≤ N ≤ 10000) que representa o número de casos de testes. Cada caso de teste é composto por um número inteiro C (1 ≤ C ≤ 100) indicando o número de conjuntos de robocopiadores fabricados. Cada conjunto é composto por um número inteiro c (1 ≤ c ≤ 10000) representando o número de robocopiadores do conjunto, seguido de c linhas de números inteiros, indicando a coordenada -100000 ≤ (x, y) ≤ 100000 de cada robocopiador do conjunto."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1232",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, indicando o menor número de aplicações completas da sequência para que o cubo retorne ao seu estado original.",
        "descricao": "Provavelmente todos conhecem o Cubo de Rubik, um passatempo 3-D desafiador, que tem cada uma das seis faces cobertas com nove etiquetas, cada etiqueta de uma cor (azul, amarelo, laranja, branco, verde e vermelho). No estado inicial, todas as nove etiquetas de uma face têm a mesma cor. Um mecanismo engenhoso permite que cada face seja rotacionada independentemente, fazendo com que as cores das etiquetas nas faces possam ser misturadas. Cada uma das faces do Cubo de Rubik é denotada por uma letra: F, B, U, D, L, e R, como ilustrado na figura abaixo. U F D R L B A rotação de uma face é denominada de um movimento. Para descrever os movimentos utilizamos as letras identificadoras das faces: uma letra maiúscula representa um giro de 90o no sentido horário da face correspondente; uma letra minúscula representa um giro de 90o no sentido anti-horário da face correspondente. Por exemplo, F representa um giro de 90o no sentido horário da face F; r representa um giro de 90o no sentido anti-horário da face R. Uma sequência de movimentos é denotada por uma sequência de letras identificadoras de faces. Assim, rDF representa um giro de 90o no sentido anti-horário da face R, seguido de um giro de 90o no sentido horário da face D, seguido de um giro de 90o no sentido horário da face F. Uma propriedade interessante do Cubo de Rubik é que qualquer sequência de movimentos, se aplicada repetidas vezes, faz com que o cubo retorne ao estado original (estado que tinha antes da primeira aplicação da sequência). Por exemplo, após quatro aplicações da sequência B o cubo retorna ao estado original. Você deve escrever um programa que, dada uma sequência de movimentos, determine o menor número de aplicações completas dessa sequência para que o cubo retorne ao seu estado original.",
        "titulo": "Ciclo de Rubik",
        "entrada": "Cada caso de teste é descrito em uma única linha, que contém a sequência de movimentos. Obs: Cada sequência tem no mínimo um movimento e no máximo 80 movimentos."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1872",
        "saida": "Para cada caso de teste, imprima o valor esperado, com a quantidade de casas necessária.",
        "descricao": "Um palíndromo é uma palavra, frase ou qualquer outra sequência de unidades (como uma cadeia de ADN; Enzima de restrição) que tenha a propriedade de poder ser lida tanto da direita para a esquerda como da esquerda para a direita. Capicua ou número palíndromo é um número (ou conjunto de números) inteiros cujo reverso é ele próprio. Este problema quer que você analise um número real e verifique qual o menor valor que deve ser somado a este para que o mesmo se torne um palíndromo real, sem nome específico até o momento. Por exemplo, se o número for 101,099 , ao somar com 0,002, obteremos o palíndromo real 101,101. Outro exemplo seria o número 13,31 , que já é um palíndromo real, devendo somar 0 para que o mesmo continue assim. Um último exemplo é o número 100,9 , o qual deve somar 0,1 , para que a soma se torne 101. Escreva um programa que, dado um número real, verifique qual o menor valor a ser somado para que o mesmo se torne um palíndromo real.",
        "titulo": "Palíndromo Real",
        "entrada": "Haverá diversos casos de teste. O primeiro número a ser lido será um inteiro C, representando a quantidade de casos de teste. Cada caso de teste tem um número real R (0 ≤ R ≤ 999.999,999999). Lembrando que a entrada terá, no máximo, 6 casas decimais, e que o separador decimal é o ponto ao invés da vírgula."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1995",
        "saida": "Para cada caso de teste, você deve imprimir uma linha contendo um número racional que representa o número máximo esperado de jogos que o torneio dado pode ter. O resultado deve ser arredondado para o número racional mais próximo com 2 dígitos decimais. Em caso de empate, o número deve ser arredondado para cima. Nota-se que você deve sempre imprimir 2 dígitos após o ponto, mesmo que isso signifique terminar com um zero.",
        "descricao": "A Associação de Clubes Modernos organiza anualmente um torneio de CompuTenis, que é um esporte especialmente adaptado para um público sem quaisquer qualidades físicas mensuráveis. As regras do CompuTenis são muito complexas (basta dizer que elas envolvem codificação com o cotovelo colado ao ouvido), mas, felizmente, não é necessário conhecêlas para resolver este problema. Você só precisa saber que em uma partida CompuTenis dois jogadores se opõem um ao outro, e o jogo é ganho pelo jogador que ganha primeiro S rodadas; por sua vez, cada conjunto é composto de vários jogos, e para ganhar um conjunto um jogador deve ganhar pelo menos J jogos, com uma diferença de, pelo menos, D mais jogos ganhos do que o adversário. O torneio tem K rodadas, e existem N = 2K jogadores na mesma, e todos participam da primeira rodada. Em cada rodada cada um dos jogadores participantes restantes está emparelhado com outro jogador participante, a fim de jogar uma única partida. O vencedor de cada uma dessas partidas avança para a próxima rodada, enquanto o perdedor é automaticamente desclassificado do torneio. O vencedor do único jogo na rodada K é, portanto, o vencedor do torneio. É desejável que o torneio dure o maior tempo possível, tendo em vista que os jogos são transmitidos pela televisão e a Associação é paga por cada minuto no ar. Dado qualquer par de jogadores diferentes, a Associação sabe a probabilidade de um deles vencer um jogo contra o outro. Você é um membro da comissão organizadora, e sua tarefa é organizar os jogos de cada rodada, a fim de maximizar o número esperado de jogos disputados no torneio. Organizar as partidas é decidir quais pares de jogadores vão jogar um jogo na primeira rodada, e depois para cada uma das rodadas seguintes decidir qual par de partidas da rodada anterior fornecerá os jogadores vencedores para cada jogo nessa rodada. Note que isto só pode depender da identificação das partidas na rodada anterior. A figura a seguir mostra um possível emparelhamento para K = 3 rodadas e N = 23 = 8 jogadores. Agora, a Associação quer apenas estimar seus ganhos, por isso é suficiente dizer a eles o número máximo esperado de jogos que podem ser jogados no torneio.",
        "titulo": "Game, Set e Match",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito usando várias linhas. A primeira linha contém quatro números inteiros, K, S, J e D. O valor K indica o número de rodadas no torneio (1 <= K <= 3). O valor S indica o número de rodadas que um jogador deve vencer para ganhar um jogo (1 <= S <= 10). O valor J indica o número mínimo de jogos que um jogador deve vencer a fim de ganhar a rodada, enquanto que D indica que um jogador deve ganhar D mais jogos do que o seu adversário para ele vencer a rodada (1 <= D <= J <= 100). Os jogadores estão identificadas por diferentes números inteiros entre 1 e N = 2K. Cada uma das N linhas seguintes contém N valores. Na i-ésima linha, o j-ésimo valor é um número inteiro P_ij tal que p_ij = P_ij/100 é a probabilidade que o jogador número i ganhe um jogo contra o jogador de número j (0 <= P_ij <= 100 para 1 <= i, j <= N). Você pode assumir que P_ii = 0 (nenhum jogador se opõe a ele mesmo) e que P_ij + P_ji = 100 para i e j diferente. O final da entrada é indicado por uma única linha contendo o número -1."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1650",
        "saida": "Para cada caso de teste, imprima o número de tabuleiros de xadrez contidos dentro da dada pintura.",
        "descricao": "Você está visitando o Centro Pompidou que contém muitas pinturas modernas. Em particular você nota que uma pintura consiste somente em quadrados pretos e brancos, arranjados em linhas e colunas como em um tabuleiro de xadrez(sem que quadrados adjacentes tenham a mesma cor). Já que você está entediado, você se pergunta quantos tabuleiros de xadrez 8 x 8 formam a pintura. O canto inferior direito do tabuleiro de xadrez tem que ser branco.",
        "titulo": "Pintura Preto e Branco",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha com três inteiros n, m e c.(8 ≤ n, m ≤ 40000), onde n é o número de linhas do quadro, e m é o número de colunas do quadro. c é sempre 0 ou 1, onde 0 indica que o canto inferior da pintura é preto, e 1 indica que este canto é branco. O último caso de teste é seguido por uma linha composta por três zeros."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1221",
        "saida": "Para cada caso de teste imprima a mensagem “Prime” (Primo) ou “Not Prime” (Não Primo), de acordo com o exemplo abaixo.",
        "descricao": "Mariazinha sabe que um Número Primo é aquele que pode ser dividido somente por 1 (um) e por ele mesmo. Por exemplo, o número 7 é primo, pois pode ser dividido apenas pelo número 1 e pelo número 7 sem que haja resto. Então ela pediu para você fazer um programa que aceite diversos valores e diga se cada um destes valores é primo ou não. Acontece que a paciência não é uma das virtudes de Mariazinha, portanto ela quer que a execução de todos os casos de teste que ela selecionar (instâncias) aconteçam no tempo máximo de um segundo, pois ela odeia esperar.",
        "titulo": "Primo Rápido",
        "entrada": "A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 200), correspondente ao número de casos de teste. Seguem N linhas, cada uma contendo um valor inteiro X (1 < X < 231) que pode ser ou não, um número primo."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1582",
        "saida": "Imprima para cada linha da entrada a linha “tripla pitagorica primitiva” (sem as aspas) se os inteiros dados formam uma tripla pitagórica primitiva, “tripla pitagorica” se os inteiros dados formam uma tripla pitagórica não-primitiva, ou “tripla” se não formam uma tripla pitagórica.",
        "descricao": "Pitágoras foi um matemático grego anterior a Euclides que viveu entre 570 e 495 a.C, considerado por Aristóteles como ‘o primeiro matemático’. Um dos mais antigos e mais importantes teoremas da História, o Teorema de Pitágoras estabelece que, em qualquer triângulo retângulo, o quadrado da hipotenusa é igual à soma dos quadrados dos catetos. O Teorema possui inúmeras aplicações, sendo a base de diversos resultados na Matemática, na Engenharia, na Física e na Ciência da Computação. Embora o Teorema leve o nome de Pitágoras, acredita-se que matemáticos ainda mais antigos, da Babilônia, já tivessem conhecimento da fórmula. Diz-se que uma tripla de inteiros positivos (x, y, z) é uma tripla pitagórica se é possível existir um triângulo retângulo que tenha x, y e z como lados, independentemente da ordem em que os inteiros figurem na tripla. Por exemplos, (3, 4, 5), (6, 8, 10) e (5, 13, 12) são triplas pitagóricas, pois 52 = 32 + 42, 102 = 62 + 82 e 132 = 52 + 122. No entanto, a tripla (6, 8, 10) é apenas a tripla (3, 4, 5) multiplicada por 2, e, por isso, dizemos que (6, 8, 10) não é uma tripla pitagórica primitiva. Um tripla pitagórica (x, y, z) é dita primitiva se mdc(x, y, z) = 1. Euclides mostrou no século III a.C. que existem infinitas triplas pitagóricas primitivas.",
        "titulo": "O Teorema de Pitágoras",
        "entrada": "Cada linha da entrada é formada por 3 inteiros, x, y e z (1 ≤ x, y, z ≤ 104), separados entre si por um espaço em branco e fornecidos não necessariamente em ordem alguma, terminando em EOF."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1785",
        "saida": "Para cada caso de teste imprima “Caso #X: Y”, onde X é o número do caso atual, iniciando em 1, e Y é o retorno da rotina de krapekar ou -1 caso a rotina entre em loop infinito.",
        "descricao": "O inteiro 6174 é conhecido como a constante de Krapekar em homenagem ao matemático indiano Dattathreya Ramachandra Kaprekar. Esse número é interessante graças ao fato que se X é um número de 4 dígitos (zeros iniciais são permitidos para completar os 4 dígitos) em que todos os dígitos não são iguais entre si, a rotina de Krapekar iniciando no número X sempre converge para 6174. Ou seja, a rotina de Krapekar converge para 6174 se, e somente se, X possui 4 dígitos com pelo menos dois deles diferentes entre si. A rotina de Krapekar é executada da seguinte forma: int krapekar(int X) {    int cnt = 0;    while (X != 6174) {        int maior = maior_numero_com_digitos_de(X);        int menor = menor_numero_com_digitos_de(X);        X = maior - menor;        cnt = cnt + 1;    }    return cnt; } maior_numero_com_digitos_de(X) é o maior número que pode ser formado usando-se os dígitos de X. menor_numero_com_digitos_de(X) é o menor número que pode ser formado usando-se os dígitos de X. Por exemplo: maior_numero_com_digitos_de(3524) = 5432 menor_numero_com_digitos_de(3524) = 2345 maior_numero_com_digitos_de(10) = 1000 //pois 10 = 0010 com quatro dígitos menor_numero_com_digitos_de(10) = 1",
        "titulo": "Kaprekar",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 10⁴), o número de casos de teste. Cada caso de teste consiste de uma linha contendo um inteiro X (0 ≤ X ≤ 9999)."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1734",
        "saida": "Para cada consulta imprima três números em uma mesma linha: sendo o valor absoluto da soma mais próxima e os índices inferiores e superiores de algum intervalo onde esta soma absoluta é alcançada. Possíveis índices começam com 1 e vão até n.",
        "descricao": "Sinais possivelmente de origem extraterrestre foram recebidos e digitalizados pela Aeronautic and Space Administration (que deve estar passando por uma fase desafiadora: \"Mas eu quero usar pés, e não metros!\"). Cada sinal parece vir em duas partes: uma sequência de valores inteiros n e um inteiro não negativo t. Não vamos entrar em detalhes, mas os pesquisadores descobriram que um sinal codifica dois valores inteiros. Estes podem ser encontrados como o limite inferior e superior de uma subfaixa da sequência cujo valor absoluto de sua soma é mais próximo de t. Dada à sequência de n números inteiros e o alvo não negativo t, você deve encontrar uma variedade não vazia da sequência (ou seja, uma subsequência contínua) e saída de seu índice mais baixo l e seu índice superior u. O valor absoluto da soma dos valores da sequência a partir do l-nésimo para o elemento de u-nésimo (inclusive) deve ser pelo menos tão perto de t como o valor da soma absoluta quanto qualquer outro intervalo não vazio.",
        "titulo": "Limite Encontrado",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com dois números de n (1 ≤ n ≤ 105) e k. A entrada é terminada por n = k = 0. Caso contrário, segue n inteiros com valores absolutos menores do que 104 que constituem a sequência. Em seguida, segue k consultas para esta sequência. Cada consulta é um alvo t (0 ≤ t ≤ 109)."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1371",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha na saída, contendo a sequência crescente de números correspondente aos identificadores dos quartos cujas portas estarão abertas. Ao imprimir a sequência, deixe um espaço em branco entre dois elementos consecutivos.",
        "descricao": "Madame Beauvoir possui uma mansão onde ela recebe todos os seus descendentes (netos e bisnetos) durante as férias. Sua mansão possui exatamente N quartos (cada quarto é numerado de 1 a N), onde N é também a quantidade de netos e bisnetos (cada descendente é também numerado de 1 a N). Como toda criança, os descendentes de Mme. Beauvoir são bastante travessos. Todo dia é a mesma confusão: eles acordam de manhã cedo antes dela e se encontram no grande jardim. Cada descendente, um de cada vez, entra na mansão e troca o estado das portas dos quartos cujos números são múltiplos do seu identificador. Trocar o estado de uma porta significa fechar uma porta que estava aberta ou abrir uma porta que estava fechada. Por exemplo, o descendente cujo identificador é igual a 15 vai trocar o estado das portas 15, 30, 45, etc. Considerando que todas as portas estão inicialmente fechadas (todos os descendentes fecham as portas antes de descer para o jardim) e que cada descendente entra exatamente uma vez na mansão (a confusão é tão grande que não sabemos em que ordem), quais portas estarão abertas após a entrada de todos os descendentes na mansão?",
        "titulo": "Fechem as Portas!",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha que contém um inteiro N (0 ≤ N ≤ 25000000), indicando o número de portas e descendentes. O final da entrada é indicado por N = 0."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1990",
        "saida": "Para cada caso de teste, imprima por linha um inteiro que representa o número total de diferentes conjuntos equilibrados que pode ser obtido através da adição de um número inteiro para o conjunto dado, tal como se explica na descrição do problema.",
        "descricao": "A média e a mediana geralmente confunde os alunos por causa de sua ortografia semelhante, mas eles são muito diferentes conceitos. Neste problema, vamos trabalhar com a média e a mediana de um conjunto constituído por N pares inteiros distintos, onde N é ímpar. A média de tal conjunto é definida, como é habitual, como a soma dos números divididos por N, enquanto que a mediana é o único elemento no conjunto que é maior do que (N-1) / 2 dos seus elementos, e menor do que o outro (N-1) / 2 elementos do conjunto. Por exemplo, se o conjunto é {0, 2, 6, 4, 13}, a média é 5 enquanto a mediana é 4. Nosso objetivo é tornar a vida do aluno mais fácil através da geração de conjuntos \"equilibrados\", isto é, conjuntos compostos por um número ímpar de inteiros, todos distintos entre si, onde a média e a mediana coincidem. Por exemplo, o conjunto {0, 2, 6, 4, -2} é equilibrado, uma vez que tem N = 5 inteiros diferentes, e a média e mediana, são ambos iguais a 2. O procedimento seguinte tem sido sugerido para a obtenção de conjuntos equilibrados. Um conjunto com um número par de inteiros distintos é escolhido, e um número inteiro adicional diferente de cada elemento do conjunto é adicionada a ele, de tal modo que o conjunto resultante é equilibrado. Nós queremos que você verifique se o procedimento indicado funciona. Por isso a sua tarefa é, dado N-1 inteiros distintos, com N ímpar, contar o número de conjuntos equilibrados que podem ser formados, seguindo o procedimento descrito.",
        "titulo": "Equilíbrio",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em duas linhas. A primeira linha contém um único número inteiro positivo N que indica o número de elementos do conjunto equilibrado deve ter (3 <= N <= 499). A segunda linha contém N-1 inteiros distintos Z_i que representam os elementos dados do conjunto (-1014 <= Z_i <= 1014 para 1 <= i <= N-1). A última linha da entrada contém o número -1, e não deve ser processado como um caso de teste."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2154",
        "saida": "Para cada caso de teste, imprima o polinômio com a derivada aplicada.",
        "descricao": "A fórmula de cálculo de uma derivada de uma função na forma xn é definida por: f(x) = xn    →     f(x)’ = n.xn-1 Veja um exemplo: f(x) = 4x3 + 3x2    →     f(x)’ = 12x2 + 6x Escreva um programa que, dado um polinômio simples, calcule a sua derivada.",
        "titulo": "Derivada de Polinômios",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste é formado por um número inteiro T, que representa a quantidade de termos que o polinômio possui. Na linha seguinte, há o polinômio propriamente dito, formado por T (1 ≤ T ≤ 100) termos, todos separados por um espaço, um sinal de soma e outro espaço, e cada um contendo um inteiro C (2 ≤ C ≤ 100), a letra x e um inteiro E (2 ≤ E ≤ 100), sendo C o coeficiente e E o expoente do termo. A entrada termina com fim de arquivo."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "2096",
        "saida": "Você deve imprimir P linhas, cada uma contendo um número inteiro com a resposta a uma das perguntas feitas por Horácio, na ordem em que aparecem na entrada.",
        "descricao": "Horácio gosta de brincar de escrever números naturais no quadro-negro em seu quarto. Um dos seus jogos favoritos consiste em primeiro escrever um número n, então a soma de todos os diferentes números primos que dividem a n, e assim por diante até que o número escrito na placa se torne um número primo. Por exemplo, se Horácio começa a escrevendo o número n = 90, porque 90 = 2 × 32 × 5 o próximo número a ser escrito, será de 2 + 3 + 5 = 10; então, como 10 = 2 × 5 Horácio vai escrever o número 2 + 5 = 7; finalmente, porque 7 é um número primo o jogo terminará aqui. Formalmente, este jogo em cada número natural n> = 2 define uma sequência cujo primeiro elemento é n, e cada novo elemento é a soma de todos os números primos que dividem o elemento anterior na sequência. O fim do jogo é a posição do primeiro número primo na sequência, e coincide com o número total de números escritos . No exemplo do parágrafo anterior, com n = 90 o fim do jogo é K = 3, porque os números que estão escritos será de 90, 10 e 7. Agora, nem todos os jogos são igualmente divertido para Horácio, e neste caso ele prefere começar por escrever um número n tal que a ordem do jogo correspondente é um valor especial K. Horácio gostaria de saber quantos diferentes valores de n inclusive entre A e B satisfaçam esta condição, mas porque ele não sabe como codificar ele precisa de alguém para fazer este cálculo para ele. Você pode ajudá-lo?",
        "titulo": "Horácio e Seus Primos",
        "entrada": "A primeira linha contém um inteiro P que indica o número de questões que Horácio quer pedir (1 <= P <= 105). Cada uma das próximas P linhas descreve uma pergunta usando três números inteiros A, B e K, o que significa que Horácio gostaria de saber quantos valores diferentes de n satisfaz A <= n <= B e a ordem do jogo começando com n é K (2 <= A <= B <= 106 e 1 <= K <= 106) ."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1735",
        "saida": "Para cada caso de teste imprima uma única linha que contém o código Prufer da árvore especificada. Separe os números por um único espaço. Não imprima espaços no final da linha.",
        "descricao": "Uma árvore (isto é, um grafo conexo sem ciclos) com os vértices numerados por números inteiros 1, 2, ..., n é dado. O código \"Prufer\" de tal estrutura é construído como da seguinte forma: a folha (um vértice que é incidente a uma única aresta) com o menor número é tomado. Esta folha, juntamente com a sua aresta incidente é removida do grafo, enquanto o número do vértice que era adjacente à folha é anotado. No grafo obtido, este procedimento se repete, até que haja apenas um vértice restante (que, por sinal, sempre tem o número n). A sequência de escrita com n-1 números, é chamado o código Prufer da árvore. Sua tarefa é, dada uma árvore, para calcular o seu código Prufer. A árvore é indicada por uma palavra do idioma especificado pela seguinte gramática: T ::= \"(\" N S \")\" S ::= \" \" T S | vazio N ::= número Ou seja, as árvores têm parênteses em torno deles, e um número indicando o identificador do vértice raiz, seguido por arbitrariamente muitas (talvez nenhuma) subárvores separadas por um único caractere de espaço. Como exemplo, dê uma olhada na árvore na figura abaixo que é indicado na primeira linha da entrada de amostra. Observe que, de acordo com a definição dada acima, a raiz de uma árvore pode ser uma folha também. É só para facilitar a denotação que designa algum vértice para ser a raiz. Normalmente, o que estamos lidando aqui com é chamada de \"árvore não enraizada\".",
        "titulo": "Codifique a Árvore",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste especifica uma árvore, como descrito acima em uma linha do arquivo de entrada. A entrada é terminada por EOF. Você pode assumir que 1 ≤ n ≤ 50."
    },
    {
        "nivel": "8",
        "assunto": "5",
        "numero": "1656",
        "saida": "Para cada caso de teste, imprima uma linha com os índices dos vizinhos que as crianças devem selecionar (aqui, o índice i corresponde ao vizinho i que dá um total de doces ai). Se não houver solução, onde cada criança recebe pelo menos um doce, imprima \"no sweets\". Observe que, se existir várias soluções onde cada criança recebe pelo menos um doce, você pode imprimir qualquer uma delas.",
        "descricao": "Todos os anos há o mesmo problema no Halloween: Cada vizinho só está disposto a dar certo número total de doces neste dia, não importa quantas crianças peçam, por isso pode acontecer que uma criança fique sem nada, se for tarde demais. Para evitar conflitos, as crianças decidiram que vão colocar todos os doces juntos e depois dividi-los igualmente entre si. A partir da experiência do Halloween do ano passado, elas sabem quantos doces recebem de cada vizinho. Visto que elas se preocupam mais com a justiça do que o número de doces que recebem, elas querem selecionar um subconjunto de vizinhos para visitar, para que na partilha cada criança receba o mesmo número de doces. Elas não vão ficar satisfeitas se sobrar doces que não possam ser divididos. Seu trabalho é ajudar as crianças e apresentar uma solução.",
        "titulo": "Doces do Dia das Bruxas",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros c e n (1 ≤ c ≤ n ≤ 100000), sendo o número de crianças e o número de vizinhos, respectivamente. A próxima linha contém n inteiros separados por espaço a1,...,an (1 ≤ ai ≤ 100000), onde ai representa o número de doces que as crianças recebem se visitarem vizinho i. O último caso de teste é seguido por dois zeros."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1807",
        "saida": "A saída é a soma módulo (231 - 1) de todos os elementos da linha R. Não esqueça do caractere de fim-de-linha após exibir a soma.",
        "descricao": "O triângulo trinomial é um triângulo numérico de coeficientes trinomiais. Ele pode ser obtido com uma linha contendo um único \"1\", a próxima linha contendo três 1 e cada elemento das linhas seguintes sendo calculado como a soma do elemento acima à esquerda, imediatamente acima e acima à direita: A primeira linha do triângulo trinomial é numerada com zero, a segunda linha é a de número 1 e assim sucessivamente. Sua tarefa é, dado um número de linha R, escrever um programa que exiba a soma de seus elementos. Por exemplo, a soma dos elementos da linha 2 é 9 = 1 + 2 + 3 + 2 + 1. Mas desta vez o número de linha R pode ser muito maior! Sendo assim, a soma dos elementos da linha R deve ser mostrada módulo (231 - 1). Por exemplo, a soma dos elementos da linha 20 é 3486784401 mas a resposta a ser dada é 1339300754, que é congruente a 3486784401 módulo (231 - 1).",
        "titulo": "Triângulo Trinomial, a Vingança",
        "entrada": "A entrada é o número de linha R (0 &leq; R &leq; 999999999)."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1380",
        "saida": "Para cada instância imprima uma linha contendo os três últimos dígitos do número de bacilos após K instantes de tempo.",
        "descricao": "Heinrich Hermann Robert Koch foi um médico alemão que viveu de 1843 a 1910 e ficou famoso por ter isolado o bacilo causador da tuberculose. Seus estudos sobre a doença que causava muitas mortes até meados do século XX possibilitaram o desenvolvimento de uma vacina que salvou milhões de vidas por todo o mundo. Robert Koch foi agraciado em 1905 com o prêmio Nobel de Medicina e é considerado um dos pais da Microbiologia. Um dos estudos de Koch estava ligado com a velocidade de crescimento das populações de bacilos. Koch observou que os bacilos demoram um instante de tempo para atingir a maturidade e iniciar a divisão celular. A partir daí, o bacilo gera um novo indivíduo a cada instante de tempo por meio de uma divisão. Dessa forma, se partirmos de uma população inicial com apenas um indivíduo, no instante seguinte teremos ainda um (ele atinge a maturidade para divisão), no seguinte teremos 2, no outro 3, então 5 e assim por diante. Sua tarefa é, dado um inteiro K, determinar os três últimos dígitos do número de bacilos após K instantes de tempo, partindo de uma população inicial com um indivíduo.",
        "titulo": "Crescimento das Populações de Bacilos",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por apenas uma linha que contém um inteiro K (1 ≤ K ≤ 101000000)."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "2007",
        "saida": "A saída é uma linha com um número inteiro que representa a soma dos valores de todas as plantas que se encontram no exterior da vedação.",
        "descricao": "Aos 40 anos, Alice e Bob decidiram se aposentar. Depois de mais de duas décadas de trabalho como exemplos de protocolos de rede, livros teóricos sobre jogos e vários outros textos, eles estavam cansados. Para permanecerem ativos, eles decidiram praticar a jardinagem. Alice e Bob plantaram vários vegetais em um enorme campo. Depois de terminado, eles perceberam que as plantas precisariam de proteção contra animais selvagens, então eles decidiram construir uma cerca para protegê-los. O campo é representado pelo plano XY e cada vegetal está em um ponto diferente. A cerca é representada como um polígono no plano. De qualquer forma, nem todo polígono é uma cerca válida. Ela deve ser uma cerca de um único polígono simples, com cada um dos seus lados paralelos a um dos eixos. Claro que, o polígono deve conter todos os pontos que representam as plantas. Uma cerca demasiado perto das plantas ou para si poderia tornar difícil para caminhar ao redor, de modo que cada lado do polígono precisa ser afastado de todas as plantas e todos os lados não adjacentes. Infelizmente, Alice e Bob contrataram uma multinacional desagradável para a construção da cerca. A empresa tinha um monte de advogados na folha de pagamento, mas não há bons designers da cerca, pois eles não cumpriram com todos os requisitos. Eles construíram uma cerca que é um polígono simples com lados paralelos aos eixos e cujos lados são longe de plantas e em si. No entanto, eles se esqueceram de fazer a cerca conter todas as plantas! Alice e Bob querem ajuda para avaliar a extensão do problema. Uma vez que nem todas as plantas são igualmente valioso para eles, eles querem saber o valor total das plantas que foram deixados do lado de fora da cerca.",
        "titulo": "Falha Ao Cercar Legumes",
        "entrada": "A primeira linha contém dois inteiros P e V, que representam, respectivamente, o número de plantas e o número de vértices de cima do muro poligonal (1 ≤ P, V ≤ 105). Cada uma das linhas próximas a P descreve uma planta diferente, com dois inteiros Xp e Yp, indicando as coordenadas da planta (-109 ≤ Xp, Yp ≤ 109). O valor da planta p-th na entrada é P, para p = 1, 2,. . . , P. Cada uma das seguintes linhas V descreve um vértice da vedação com dois números inteiros Xv e Yv, indicando as coordenadas do vértice (-109 ≤ Xv, Yv ≤ 109). Vértices são dadas na ordem anti-horário. Cada um destes pontos é um real vértice do polígono, isto é, ela não é colinear com os seus dois vértices adjacentes. O polígono é representado um polígono simples com cada lado paralelo a um eixo. Não há duas plantas estão na mesma posição, e nenhuma planta encontra-se no lado de uma cerca."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1570",
        "saida": "Para cada linha de entrada, exceto a primeira que informa o número de linhas, você deve imprimir exatamente duas linhas de saída. A primeira linha contém o número do caso e a seguinte linha contém os possíveis valores de X e Y (Um par de valores em cada linha). Se houver mais do que uma solução possível, imprima a que o X tiver o menor valor. Quando os valores dados de P e Q são impossíveis para qualquer valor inteiro de X e Y, você deve imprimir \"Impossible\".",
        "descricao": "X e Y são dois números inteiros e X >= Y. Os valores de X e Y  são inteiros positivos ou negativos. Quando a soma destes dois números é multiplicado por Y obtemos P e quando o valor absoluto da subtração destes dois números é multiplicado por X obtemos Q. Dado o valor de P e Q, é preciso encontrar o valor de X e Y.",
        "titulo": "Um Dia na Terra da Matemática",
        "entrada": "A primeira linha contém um inteiro N (N <= 75000) que informa o número total de entradas. Cada uma das N linhas seguintes contém dois inteiros que denota os valores de P e Q, respectivamente, aqui |P| < 231, |Q| < 231."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2177",
        "saida": "A saída deve ser composta de uma única linha contendo os identificadores (índices) ordenados do menor para o maior de quais jogos Maria conseguirá assistir. Se Maria não conseguir assistir nenhum jogo imprima \"-1\" (sem as aspas)",
        "descricao": "Maria adora esportes e está muito animada com o ínicio das Olímpiadas 2016. No auge de sua animação Maria acabou comprando vários ingressos para os jogos e competições, mas infelizmente devido à distância da sua casa para os locais em que os jogo irão acontecer, que pode ser muito grande, ela provavelmente não conseguirá chegar em todas partidas a tempo. Maria sabe que você adora desafios de programação tanto quanto ela adora esportes, então ela te pediu para escrever um programa que dados os locais (posição (x, y) no plano) em que as partidas vão ocorrer e quanto tempo resta até cada partida começar indique quais jogos ela conseguirá chegar a tempo, ou seja antes do jogo começar, se ela sair agora do ponto em que ela está e for diretamente para o local do jogo. Maria se encontra numa certa posição (x, y) e se move com velocidade 1 metro por minuto (apesar da animação Maria anda lentamente para não perder nenhum pokestop no caminho), a distância entre os pontos, também em metros, é definida pela Distância Euclidiana, e o tempo restante para ínicio das partidas se encontra em minutos.",
        "titulo": "Rio 2016",
        "entrada": "A primeira linha da entrada consiste da posição de Maria dada por x e y (0 ≤ x, y ≤ 1000) e de um número n (1 ≤ n ≤ 10⁶) que indica o número de ingressos que Maria comprou. As próximas n linhas são formadas por 3 números, xi, yi, ti, respectivamente a posição x do local do jogo i, a posição y do local do jogo i, e o tempo restante para o jogo i iniciar (0 ≤ xi, yi ≤ 1000 e 1 ≤ ti ≤ 1000000)."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1484",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma resposta. A primeira linha de uma resposta deve conter um identificador do caso de teste, no formato '#i', onde 'i' tem inicialmente o valor 1 e é incrementado a cada caso de teste. Então, se uma solução para o passatempo existe, seu programa deve produzir uma lista das possíveis sequências de termos. Se mais de uma sequência é possível, elas devem aparecer em ordem lexicográfica crescente. Cada sequência de termos deve ser impressa em uma linha, com os termos separados por um espaço em branco. Se não há solução, seu programa deve imprimir uma linha contendo a palavra 'impossivel' (note ausência de acentuação). Definição: considere as sequências Sa = a1a2 ... am e Sb = b1b2 ... bn. Sa precede Sb em ordem lexicográfica se e apenas se Sb é não-vazia e uma das seguintes condições é verdadeira: Sa é uma sequência vazia; a1 < b1; a1 = b1 e a sequência a2a3 ... am precede a sequência b2b3 ... bn.",
        "descricao": "Strike Boy, como o apelido sugere, é um garoto fanático por todo tipo de jogos em computador. Ele está passando as férias em uma ilha paradisíaca, onde computadores não são permitidos. Ele se divertiu por algum tempo com os jogos em seu telefone celular, mas a bateria acabou e não há eletricidade na ilha, de forma que ele parou de jogar. Strike Boy então decidiu inventar um novo passatempo, usando o teclado de seu telefone celular. Neste novo jogo, para dois jogadores, um deles escolhe dois inteiros S e D. O jogador oponente deve então encontrar uma sequência de termos tal que: Cada termo da sequência é um número com D dígitos decimais, exceto pelo último termo, que pode ter entre 1 e D dígitos; A soma de todos os termos da sequência é igual a S; Os dígitos utilizados para formar um termo correspondem às teclas de um teclado padrão de telefone celular (‘0’ a ‘9’); Cada dígito é utilizado no máximo uma vez na sequência; O primeiro termo de uma sequência pode começar com qualquer dígito, mas a ordem dos dígitos da sequência, quando lidos da esquerda para a direita, é tal que a próxima tecla corresponde sempre a uma tecla imediatamente vizinha da tecla utilizada previamente (na vertical, na horizontal ou na diagonal). Por exemplo, se S = 230 e D = 3, há apenas duas soluções possíveis obedecendo as regras do jogo: [074, 156] e [085, 142, 3]. A sequência [230] não é uma solução porque a tecla ‘3’ não é vizinha da tecla ‘0’. Imagem da esquerda: Teclado ilustrando as teclas utilizadas para formar a sequência [074, 156] Imagem da direita: Teclado ilustrando as teclas utilizadas para formar a sequência [085, 142, 3] Ajude Strike Boy a verificar se as respostas do oponente estão corretas: escreva um programa que, dados S e D, imprima todas as soluções possíveis.",
        "titulo": "Tecle & Some",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste em apenas uma linha, contendo dois inteiros S e D, separados por um espaço, representando a soma desejada e o número de dígitos de cada termo (0 ≤ S ≤ 10.000.000.000 e 1 ≤ D ≤ 10). O final da entrada é indicado por S = D = −1."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1992",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um numero que representa o tempo mínimo (em segundos) necessário para Gabriela terminar seu percurso sem violar qualquer regra de tráfego, ou um asterisco se é impossível fazer isso. O resultado deve ser arredondado para o número racional mais próximo com 2 dígitos decimais. Em caso de empate, o número deve ser arredondado para cima. Notese que você deve sempre imprimir 2 dígitos após o ponto, mesmo que isso signifique terminar com um zero.",
        "descricao": "Gabriela dirige um ônibus escolar. Sendo uma das poucas mulheres que têm esse trabalho, ela é sempre ridicularizada pelos motoristas do sexo masculino. Para melhorar a sua condição, ela decidiu que além de dirigir com responsabilidade ela vai conduzir de forma mais eficiente. Sua ideia é terminar a sua rota gastando o mínimo de tempo possível, sem violar qualquer regra de trânsito. O ônibus que Gabriela dirige tem um sistema de condução muito moderno que lhe permite ajustar a aceleração para qualquer número real instantaneamente. Assim, a aceleração é constante em intervalos, mudando para outra aceleração sempre que Gabriela decidir. Se v é a velocidade do ônibus em um determinado instante de tempo, e a sua aceleração que permanece constante ao longo de um período de tempo t, a velocidade de rotação no final desse período será v+ at. Além disso, o ônibus vai passar a uma distância de at² / 2 + vt durante esse período de tempo. As regras de trânsito impede os veículos de usar uma aceleração maior do que A, ou uma desaceleração menor que D, ou seja, a aceleração a em qualquer momento deve satisfazer -D <= a <= A. Além disso, existem pontos de verificação ao longo da rota do ônibus onde a velocidade deve situarse dentro de um determinado intervalo dado. Gabriela sabe de antemão a localização dos pontos de verificação, o comprimento total do percurso, e as constantes A e D. No início do percurso, a velocidade e a aceleração do ônibus são ambos 0. Não há restrições adicionais em relação a velocidade ou a aceleração que o ônibus deve ter no final do percurso (em particular, não é necessário parar no final). Seu trabalho é usar esses dados para determinar o tempo mínimo que Gabriela precisa para terminar o percurso sem violar as regras.",
        "titulo": "Ganhando Tempo",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito usando várias linhas. A primeira linha de cada caso de teste contém quatro inteiros N, L, A e D. N representa o número total de pontos de verificação que estão presentes na rota de Gabriela (1 <= N <= 105). L indica o comprimento do percurso em metros (2 <= L <= 107). A e D representam, respectivamente, o número máximo permitido da aceleração e desaceleração para o ônibus (1 <= A, D <= 100). Cada uma das N linhas seguintes descrevem um ponto de verificação diferente usando três inteiros X, V e W, que representam, respectivamente, a distância entre o ponto de verificação e o ponto de início do trajeto (1 <= X <= L-1), a velocidade mínima, e a velocidade máxima permitida para o ônibus no momento em que passa por esse ponto de verificação (1 <= V, W <= 100). Suponha que, em cada caso de teste dos pontos de verificação os pontos são dados em ordem de distância ascendente desde o ponto de partida da rota, e não existem dois pontos de verificação que estão à mesma distância do ponto de partida. Neste problema, o comprimento é expresso em metros, a velocidade em m/s e a aceleração em m/s2. O fim da entrada é indicado por uma linha contendo o número 1 quatro vezes, e não deve ser processado como um caso de teste."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1512",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro, mostrando quantos azulejos serão pintados no final do processo.",
        "descricao": "Rafael resolveu trocar os azulejos de sua sala de estar, e para isto fez as medições e comprou N azulejos brancos na loja. O fato de todos os azulejos serem brancos deixou Rafael um pouco preocupado com o design de sua sala de estar, e então decidiu pintar alguns deles para dar um “ar mais moderno” à sua casa. Posicionou todos os N azulejos em uma linha reta, e enumerou todos eles de 1 até N, da esquerda para a direita. Para escolher quais azulejos pintar, pensou na seguinte lógica: Escolheu dois inteiros A e B, e disse que iria pintar todos os azulejos cuja enumeração fosse múltipla de A e/ou B. Ajude Rafael a descobrir quantos azulejos serão pintados no total.",
        "titulo": "Azulejos",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste contém três inteiros, N, A e B (3 ≤ N ≤ 10⁹, 2 ≤ A, B ≤ N). O último caso de teste é indicado quando N = A = B = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1999",
        "saida": "Para cada caso de teste, imprima uma única linha contendo o numero de formas diferentes em que o numero de convidados de cada reino podem ser escolhidos para um baile com exatamente N danças, com todas as restrições mencionadas no problema.",
        "descricao": "Todos os anos, os reinos da Cubiconia, Quadradonia e Noglônia organizam um baile para comemorar o fim da guerra que devastou a região por um longo tempo. Algum número de nobres de cada reino é convidado a participar do evento, e espera-se cada par de convidados de diferentes reinos dancem juntos exatamente uma vez. Ou seja, cada convidado de Cubiconia deve dançar uma vez com todos os convidados de Quadradonia e Noglônia, e da mesma forma a cada convidado Quadradonia deve dançar uma vez com todos Noglônia. Porém, os hóspedes de um mesmo reino nunca devem dançar juntos. Para ajudar a organizar o baile, o numero total de danças é determinado antecipadamente, então é preciso ter cuidado ao escolher o numero de convidados de cada reino. Por exemplo, se você decidir que o baile tem N = 20 danças, uma possibilidade é convidar 6 nobres de Cubiconia, 2 de Quadradonia e 1 de Noglônia, que pode ser representado pela expressão (6, 2, 1). Esta é uma opção válida, porque a quantidade total de danças seria 6 × 2 + 6 × 1 + 2 × 1 = 20. Tradições, cuja origem ninguém se lembra, indicam que o número de convidados Cubiconia deve ser maior ou igual ao número de convidados de Quadradonia, e por sua vez o número de convidados Quadradonia deve ser maior ou igual o número de convidados Noglônia. Assim, para N = 20 danças há exatamente 5 possíveis formas de escolher o número de convidados em cada reino (5, 4, 0), (4, 2, 2), (10, 2, 0), (20, 1, 0) e o acima mencionado (6, 2, 1). Com tantas restrições, o comitê organizador da cerimônia tem problemas em encontrar o número de convidados de cada reino. Sua missão é ajudar o comitê a contar as diferentes formas que os convidados podem ser escolhidos para um baile com N danças. Duas maneiras de escolher o número de convidados de cada reino são consideradas diferentes se eles diferem no número de convidados em pelo menos um dos reinos.",
        "titulo": "Baile de Reconciliação",
        "entrada": "Cada caso de teste é descrito usando uma linha, que contém um inteiro N que indica o número total de danças que o baile deve ter (1 ≤ N ≤ 104). O fim da entrada é indicado por uma linha contendo o número -1."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1819",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir os três números a1, a2 e a3, representando os cocientes da função linear procurada. Esses números devem estar truncados em três casas decimais. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "A China é uma grande produtora de alimentos, mas também uma enorme consumidora. Pesquisadores chineses perceberam que em certos momentos de sua história a produção agrícola foi maior que o consumo, e em outros momentos esse quadro se inverteu. Preocupados com o futuro da grande nação, passaram a coletar dados sobre a área de plantio, a quantidade de trabalhadores e a produção agrícola. Para melhor investir seus recursos, eles agora desejam fazer uma previsão sobre a produção do país. O conjunto de dados que os pesquisadores conseguiram coletar é formado por triplas (Xi,Yi,Zi), em que Xi representa a área de plantio, Yi a quantidade de trabalhadores e Zi a produção agrícola. Como essa produção está ligada diretamente com os demais dados coletados, eles decidiram estimar a produção futura usando a função linear a1+a2x+a3y, que minimiza a soma dos erros quadrados em que n é o total de triplas disponíveis. Desta forma eles serão capazes de planejar melhor a produção e o consumo dos próximos anos. Seu objetivo é calcular a função linear desejada.",
        "titulo": "Estimando a Produção",
        "entrada": "A entrada é composta de diversas instâncias. Para cada instância da entrada é dado um número inteiro 3 ≤ n ≤ 1000 indicando quantas triplas foram obtidas na coleta de dados. Em cada uma das próximas n linhas é dada uma tripla Xi, Yi e Zi ,como área de plantio (em milhares de hectares), a quantidade de trabalhadores envolvidos (dado em milhares de pessoas), e a produção agrícola (dada em toneladas de alimentos), respectivamente. O arquivo de entrada termina quando for encontrado n = 0. Assuma que não existe uma relação linear entre a quantidade de trabalhadores e a área de plantio, ou seja, não existem constantes α,β tais que, para todo i, xi = αyi + β. Assuma também que 0 ≤ Xi,Yi,Zi ≤ 1000 e que todos os valores dados são inteiros."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1193",
        "saida": "Para cada caso de teste, você deve apresentar o número de caso de teste seguido por duas linhas, que contém a conversão do valor fornecido para as outras duas bases. A sequência das bases de saída será sempre: decimal, hexadecimal (em minúsculo) e binário, ou seja deve-se respeitar esta ordem excluindo obviamente o formato de entrada. Obs: deverá ser impressa uma linha em branco após cada caso de teste, inclusive após o último caso de teste.",
        "descricao": "O professor de matemática de Juliano marcou uma prova cujo conteúdo será apenas conversão entre valores decimais, hexadecimais e binários. Uma das coisas mais complexas para Juliano é fazer estas conversões de base entre números. Por mais que estude, tem muita dificuldade para entender. Portanto, como você entende de computação e é amigo(a) de Juliano, ele solicitou a tua ajuda para que faça um programa que verifique se as conversões feitas por ele estão correta.",
        "titulo": "Conversão entre Bases",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste que virão a seguir, um por linha. Cada caso de teste contém um valor X (X > 0) seguido de um texto Y com três caracteres, indicando se o valor X está no formato binário, decimal ou hexadecimal. Independente do formato, qualquer dos números deverá caber em um inteiro de 32 bits."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1501",
        "saida": "Para cada linha de entrada, imprima uma única linha informando quantos zeros finais terá o fatorial desse número no sistema de numeração solicitado e também quantos dígitos terá o fatorial desse número neste mesmo sistema de numeração. Separe esses dois números com um único espaço. Você pode ter certeza que o número de zeros à direita ou o número de dígitos não será maior do que 231-1",
        "descricao": "Dado um número inteiro decimal, você terá que descobrir quantos zeros à direita o seu fatorial conterá em um determinado sistema de numeração e você também terá que encontrar quantos dígitos terá este fatorial no mesmo sistema de numeração. Você pode assumir que um sistema numérico baseado em B há B diferentes símbolos para identificar valores indo de 0 até b-1.",
        "titulo": "Quantos Zeros e Quantos Dígitos?",
        "entrada": "Há diversas linhas de entrada. Cada linha forma um bloco. Cada linha conterá um valor decimal  N (um número de 20 bits sem sinal) e um número inteiro B (1 < B ≤ 800), que é a base do sistema de números que você vai considerar. Por exemplo 5! = 120 (em decimal) mas é 78 no sistema de numeração hexadecimal. Portanto, no sistema hexadecimal 5! não tem zeros no final."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1989",
        "saida": "Para cada caso de teste, imprima em uma única linha um inteiro que representa o número de minutos que o casal gasta em assistir toda a série.",
        "descricao": "Um jovem casal faz o seu tempo ser o mais produtivo possível. Esta atividade é muito estressante, então eles decidiram \"perder\" algum tempo assistindo sua série de TV favorita. A série tem N temporadas, e cada temporada pode ter um numero diferente de capítulos de acordo com o seu sucesso, a disponibilidade de atores, tempo de produção e outros fatores externos. Cada capítulo tem uma duração de exatamente M minutos. Para manter-se com o enredo, antes de assistir a cada nova temporada, eles assistem, sem qualquer descanso, todos os capítulos de todas as temporadas anteriores. Isto os fez preocupar com quanto tempo irão gastar com este passatempo, que deve mantê-los calmos. Eles precisam de sua ajuda para que eles voltem para a situação estressante que tinham.",
        "titulo": "Fazendo Nada",
        "entrada": "A entrada contém vários casos de teste. Cada teste é descrito em duas linhas. A primeira linha tem dois inteiros N e M representando respectivamente quantas temporadas a série tem e a duração em minutos de cada capítulo (1 <= N <= 105, 1 <= M <= 106). A próxima linha tem N inteiros C_i representando quantos capítulos cada temporada tem ordenados cronologicamente. (1 <= C_i <= 100 para 1 <= i <= N). A última linha da entrada contém o número -1 duas vezes e não deve ser processado como um caso de teste."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1436",
        "saida": "Para cada caso de teste, imprima uma linha no formato “Case x: a”\\(sem as aspas), onde x é o número do caso de teste e a é a idade do capitão.",
        "descricao": "Há uma vila em Bangladesh, onde o jogo de tijolo é muito popular. Jogo de tijolo é um jogo de equipe. Cada equipe é constituída por um número ímpar de jogadores. O número de jogadores deve ser maior do que 1, mas não pode ser superior a 10. A idade de cada jogador deve estar entre 11(inclusive) e 20(inclusive). Não há dois jogadores com a mesma idade. Há um capitão para cada equipe. A falta de comunicação entre dois jogadores depende da sua diferença de idade, ou seja, é maior se a diferença de idade for maior. Assim, eles selecionam o capitão de uma equipe de maneira que a quantidade de jogadores desta equipe que são mais jovens e mais velhos do que ele é igual. As idades de todos os membros da equipe são fornecidas. Você tem que determinar a idade do capitão.",
        "titulo": "Jogo do Tijolo",
        "entrada": "A entrada começa com um número inteiro T (T ≤ 100), representando o número de casos de teste. Cada uma das próximas T linhas irá começar com um número inteiro N (1 < N < 11), número de membros da equipe, seguido por N inteiros separados por espaço representando as idades de todos os membros de uma equipe. Cada um destes N inteiros será entre 11 e 20(inclusive). Nota-se que, as idades serão dadas estritamente em ordem crescente ou estritamente em ordem decrescente. Nós não vamos mencionar qual está aumentando e qual está diminuindo, você tem que ser cuidadoso o suficiente para lidar com ambas as situações."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1761",
        "saida": "A saída deverá apresentar a quantidade de cordão luminoso necessário para adornar a árvore. Observação: Os valores deverão ser arredondados em 2 casas decimais.",
        "descricao": "Neste Natal, Papai Noel designou alguns de seus mais dedicados elfos para enfeitar o quintal da fábrica de presentes no Polo Norte. No quintal haviam vários pinheiros, de tamanhos diversos. Papai Noel orientou aos elfos que para enfeitar uma árvore com cordões luminosos, o tamanho dos mesmos deveria ser 5 vezes o tamanho da árvore. Para descobrir a altura de cada árvore, Papai Noel deu a eles um teodolito velho (aparelho utilizado para medir ângulos) e mandou que utilizassem conceitos trigonométricos para descobrir a altura de cada árvore. Sua tarefa é ajudar os elfos a descobrir uma forma de calcular a quantidade de cordões luminosos necessários para cada árvore. Considere para este desafio que o teodolito fica posicionado na altura de cada elfo e que essa altura precisa ser computada. O teodolito informará valores em graus. Utilize neste problema PI = 3.141592654.",
        "titulo": "Decoração Natalina",
        "entrada": "A entrada possui vários casos de teste. Cada caso de teste é composto de um valor de ponto flutuante de dupla precisão A que é o ângulo calculado pelo teodolito (1.00 < A < 90.00), um valor de ponto flutuante de dupla precisão B (1 ≤ B ≤ 100) que corresponde à distância entre o teodolito e a árvore e um valor de ponto flutuante de dupla precisão C (0,50 ≤ C ≤ 1.50 ) que é a altura do elfo medidor. O final da entrada é determinado por EOF."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1444",
        "saida": "O seu programa deve imprimir na saída padrão uma linha por caso de teste, contendo o número de corridas necessárias para escolher o marreco campeão.",
        "descricao": "Pirabeiraba é um distrito de Joinville, onde colonizadores alemães se instalaram no início do século XX. Anualmente há a festa do aipim, tubérculo conhecido como macaxeira no nordeste do Brasil. Para acompanhar o aipim, nada como um prato típico germânico: o marreco recheado! Para os entendidos de culinária, há uma magia nesta combinação: marreco com aipim. Contudo, para matar o marreco, você deve capturá-lo quando este estiver com o sangue bem quente. Para isto, o marreco deve estar cansado. Dizem que seu sangue quente é sinônimo de fertilidade, para não dizer: afrodisíaco! Mas isto é uma outra história. Nesta brincadeira de correr atrás do marreco, surgiu a ideia de cansá-los com uma corrida entre eles. O espaço físico da Sociedade Rio da Prata é limitado, assim, construíram apenas 3 raias para se realizar estas corridas. As corridas são feitas em grupos de 2 e 3 marrecos. Os primeiros colocados destes grupos são novamente divididos em grupos de 2 ou 3 para uma nova rodada. Isto acontece até que só reste o marreco campeão, que, como prêmio foge (por ora) da panela. Todos os marrecos sobreviventes devem correr na rodada, isto é, se não for possível dividir todos os marrecos em grupos de 3, alguns grupos de 2 devem ser formados, mas de forma a minimizar o número de corridas. Exemplos são vistos na Figura 1. Figura 1: Exemplos: Competição com 4, 5 e 6 marrecos. Os marrecos perdedores, por sua vez, serão os primeiros a irem para panela. Você foi convidado para comer marreco com aipim, mas, em troca, deve escrever um programa que calcule o número de corridas realizadas para se determinar o marreco campeão.",
        "titulo": "Corrida dos Marrecos",
        "entrada": "A entrada do programa é composta por vários casos de teste. Cada caso de teste é composto por uma linha contendo um número inteiro n, sendo que 0 ≤ n ≤ 100.000, sendo que n = 0 é utilizado unicamente para marcar o término das entradas, sendo que este deve ser desconsiderado."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1214",
        "saida": "Para cada caso de teste imprima uma linha dando o percentual de estudantes que estão acima da média da turma, com o valor arredondado e com 3 casas decimais.",
        "descricao": "Sabe-se que 90% dos calouros tem sempre a expectativa de serem acima da média no início de suas graduações. Você deve checar a realidade para ver se isso procede.",
        "titulo": "Acima da Média",
        "entrada": "A entrada contém muitos casos de teste. A primeira linha da entrada contém um inteiro C, indicando o número de casos de teste. Seguem C casos de teste ou instâncias. Cada caso de teste inicia com um inteiro N, que é o número de pessoas de uma turma (1 ≤ N ≤ 1000). Seguem N inteiros, separados por espaços, cada um indicando a média final (um inteiro entre 0 e 100) de cada um dos estudantes desta turma."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2107",
        "saida": "Para cada instância, imprima uma linha contendo 4 caracteres. O primeiro caractere deve ser S se o observador enxerga a face da pirâmide oposta ao vértice A e N caso contrário. Analogamente para o segundo, terceiro e quarto caracteres, mas levando em conta as faces opostas aos vértices B, C e D respectivamente.",
        "descricao": "As pirâmides são estruturas muito frequentes em civilizações antigas de todo o mundo. As mais famosas, as do Egito, foram construídas mais de 2000 anos antes da passagem de Cristo pela Terra. Outras pirâmides famosas são as encontradas no México e América Central, ligadas às civilizações astecas e maias. Poucos conhecidas, porém, são as pirâmides construídas nos montes Urais, perto da cidade de Ecaterimburgo. Tais pirâmides remontam ao início da era cristã, e acredita-se que foram construídas por povos mongois, que invadiram a Europa através dos montes Urais vindos da Asia. Diferentemente das outras pirâmides conhecidas, estas tinham base triangular. Dessa forma tais pirâmides tinham 4 faces triangulares. Muitas dessas pirâmides eram construídas sobre colunas, o que permitia construções não paralelas ao solo e até mesmo que a base “de baixo” ficasse exposta. Isso era muito importante, pois as faces da pirâmide eram pintadas com figuras que representavam deuses antigos, figuras mitológicas, planetas e outros corpos celestes, e assim por diante. Dessa forma, em algum ponto da cidade, um cidadão poderia visualizar uma ou mais das faces da pirâmide. Isso era importante na religião local, e encontrar uma casa de cuja janela se vislumbrasse as melhores faces das pirâmides era muito valorizado naquela época. Sua tarefa é, dadas as posições no espaço dos vértices de uma pirâmide, e a posição no espaço de um observador, determinar quais das faces da pirâmide são visíveis a ele, considerando que não existe nenhum obstáculo entre o observador e a pirâmide.",
        "titulo": "As Pirâmides de Ecaterinburgo",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de 5 linhas. Cada linha contém três inteiros, separados por espaços e representam as coordenadas dos pontos A, B, C, D e X respectivamente, onde X é a posição do observador e os demais pontos são vértices da pirâmide. Todos os pontos fornecidos têm coordenadas inteiras entre -100 e 100. Os pontos A, B, C e D não são coplanares. Todos os pontos fornecidos são distintos. O ponto X não pertence nem ao interior nem a nenhuma face da pirâmide."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1674",
        "saida": "Para cada caso de teste imprima na linha m os números e1, ..., em, separados por um caractere de espaço, de tal forma que 2e1, ..., 2ek são os primeiros m números na sequência definida, que são potências de 2. Você pode assumir que há pelo menos m potências de 2 entre os primeiros 7654321 elementos da sequência.",
        "descricao": "Para jogar o \"jogo da fração\", correspondente a uma lista dada f1, f2, ..., fk de frações e inteiros começando em N, você repetidamente multiplica o inteiro que você tem em qualquer fase (inicialmente N) pelos primeiros fi na lista para os quais a resposta é um inteiro. Sempre que não exista tal fi, o jogo para. Formalmente, definimos uma sequência S0=N, e Sj+1=fiSj, se para 1 ≤ I ≤ k, o número fiSj é um inteiro, mas os números f1Sj, ..., fi-1SJ não são. Por exemplo, se temos a lista com oito frações f1=170/39, f2=19/13, f3=13/17, f4=69/95, f5=19/23, f6=1/19, f7=13/7, f8=1/3, e iniciando com N = 21, nós produzimos a sequência (finita) (21,39,170,130,190,138,114,6,2). Em geral, a sequência pode ser infinita. Dada uma lista de frações e um inteiro de início, calcule uma parte da sequência definida. Na verdade, estamos interessados apenas nas potências de 2 que aparecem na sequência.",
        "titulo": "Fractran",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa com três inteiros m, N, k. Você pode assumir que 1 ≤ m ≤ 40, 1 ≤ N ≤ 1000, e 1 ≤ k ≤ 100. Então seguem k frações f1, ..., fk. Para cada fração, primeiro seu numerador é dado, seguido por seu denominador. Você pode assumir que ambos são números inteiros positivos menores ou iguais a 1000 e seu maior divisor comum é 1. O último caso de teste é seguido por um zero."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1289",
        "saida": "Para cada conjunto de entrada, deve ser impresso um único valor com 4 casas decimais indicando a probabilidade de ganhar do jogador I, conforme apresentado no exemplo abaixo.",
        "descricao": "Probabilidade sempre foi uma parte importante de algoritmos. Os algoritmos probabilísticos vem para suprir uma lacuna deixada pelos algoritmos determinísticos, que não conseguem resolver determinados problemas em curto espaço de tempo. Neste problema, não estamos lidando com qualquer algoritmo probabilístico. Vamos apenas tentar determinar a probabilidade de ganhar de um determinado jogador. ​Um jogo é jogado através do arremesso de um dado(que não se deve presumir que ele tem seis lados como um dado comum). Se um determinado evento ocorre quando um jogador joga os dados (tal como a obtenção de um 3, ficando lado verde em cima ou seja lá o que for) este é declarado o vencedor. Tal jogador pode ser o jogador N. Assim, o primeiro jogador vai jogar os dados, depois o segundo e, finalmente, o jogador N e, novamente, o primeiro e assim por diante. Quando um jogador obter um determinado resultado ele é declarado vencedor e o jogo termina. Você terá que determinar a probabilidade de ganhar de um (O enésimo) destes jogadores.",
        "titulo": "Qual é a Probabilidade?",
        "entrada": "A primeira linha de entrada irá conter um inteiro S (S ≤ 1000), que indica a quantidade de casos de teste. Cada caso de teste é composto por uma única linha contendo 3 valores, separados por um espaço em branco. O primeiro destes 3 valores é um inteiro N (N ≤ 1000) que indica o número de jogadores. Segue um número de ponto flutuante P que indica a probabilidade de ocorrência de um evento desejado ou bem sucedido em um único lançamento de dado (Se por exemplo, \"bem sucedido\" significa conseguir um número 3, então P é a probabilidade de obter 3 em uma partida. Para um dado normal a probabilidade de se obter 3 é 1/6). O terceiro e último valor de cada caso de teste é um inteiro I (I ≤ N) que é o número de série do jogador cuja probabilidade de vencer deverá ser determinado (varia de 1 até N, inclusive). Você pode assumir que nenhum valor inválido de probabilidade (P) será fornecido como entrada."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1909",
        "saida": "Para cada caso, exiba o tempo de quique da bola escolhida por você, ou “impossivel” caso não exista uma bola que irá satisfazer o desejo de Kiko.",
        "descricao": "Depois de tanto pedir uma bola quadrada à sua mãe, Kiko não ganhou apenas uma, mas sim várias bolas de aniversário! A diversão de Kiko é soltar várias bolas de uma vez no chão e ficar observando elas quicarem. Como as bolas possuem tamanho, peso e são feitas de matérias diferentes, o tempo de quique de uma para outra é variável. Nesse problema iremos supor que toda bola quica infinitamente de acordo com seu tempo de quique. Kiko soltou ao mesmo tempo N bolas e percebeu que dependendo das bolas que solta, em alguns instantes, todas as bolas quicam ao mesmo tempo, e ele achou isso genial! Dado o tempo de quique em segundos das N bolas que Kiko escolheu e um tempo T, que é o segundo que Kiko deseja que todas as bolas quiquem ao mesmo tempo, sua tarefa é escolher o menor tempo de quique de mais uma bola para que todas as N+1 bolas, quando forem soltas juntas, quiquem todas ao mesmo tempo pela primeira vez exatamente no segundo T. Obs: O tempo de quique que irá escolher, não pode ser igual ao de nenhum previamente escolhido por Kiko e deverá ser maior que 1. Tempo de quique é a diferença dos tempos que a bola encosta no chão por duas vezes consecutivas. Se uma bola tem tempo de quique = 4, iremos considerar que ela quicará nos segundos 4, 8, 12, 16...",
        "titulo": "Ajude Kiko",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N (1 ≤ N ≤ 100) e T (1 ≤ T ≤ 105) representando a quantidade de bolas que Kiko tem em mãos e o segundo que Kiko deseja ver as N+1 bolas quicando juntas. Na próxima linha, N inteiros no intervalo [1, T] seguem representando o tempo de quique de cada uma das bolas. A entrada termina com N = T = 0, a qual não deve ser processada."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1839",
        "saida": "Para cada região descrita na entrada, imprima uma linha contendo unicamente o número de possibilidades que os arquitetos têm para rearranjar as unidades quadradas de parede da região apenas dentro da própria região. Como o número de possibilidades pode ser muito grande, imprima apenas o resto que o número deixa quando dividido por 109 + 7.",
        "descricao": "A cidade de Chapecó, no oeste do estado brasileiro de Santa Catarina, é onde ficam situados a Reitoria da Universidade Federal da Fronteira Sul e um dos 6 campi da universidade. No próximo dia 25 de agosto, comemorar-se-ão os 98 anos da cidade, e os vereadores já estão organizando os preparativos da festa. O objetivo desta festa, além da celebração do aniversário da cidade, é arrecadar fundos para a construção da nova Câmara de Vereadores, a qual será uma Câmara Secreta, onde os vereadores poderão votar mais tranquilamente os aumentos da tarifa de ônibus sem serem tão incomodados pelos estudantes. A Câmara Secreta será um verdadeiro labirinto, isso para que eventuais invasores não consigam sair com tanta facilidade. Mas os arquitetos ainda não estão certos quanto à planta e querem fazer modificações no projeto. Para facilitar o trabalho, eles projetaram toda a planta sobre um grid de unidades quadradas, de modo que cada unidade quadrada fosse integralmente parede ou integralmente espaço livre, como na figura abaixo. Visando atacar o problema de modo mais restrito, os arquitetos ainda elegeram algumas regiões da planta para estudarem cada região isoladamente. Agora, eles querem saber qual o número de possibilidades que têm para rearranjar as unidades quadradas de parede de cada região apenas dentro da própria região. Por exemplo, para a região destacada na figura acima, há 5 possibilidades, as quais ilustramos na figura abaixo.",
        "titulo": "A Câmara Secreta",
        "entrada": "A primeira linha da entrada informa as dimensões N e M (1 ≤ N, M ≤ 50) da planta em unidades quadradas, as quais representam respectivamente o número de linhas e o número de colunas do grid, e as N linhas seguintes descrevem o grid, de modo que unidades quadradas livres são representadas pelo caractere ‘.’ e unidades quadradas de parede pelo caractere ‘#’. Cada uma das demais linhas da entrada é composta por quatro inteiros xA, yA, xB e yB (1 ≤ xA < xB ≤ N, 1 ≤ yA < yB ≤ M), os quais definem uma região através do ponto superior esquerdo (xA, yA) e do ponto inferior direito (xB, yB) da região. A entrada termina em fim de arquivo."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1381",
        "saida": "Para cada instância imprima uma linha contendo o número de soluções inteiras que respeitam as restrições.",
        "descricao": "Diofanto de Alexandria viveu no terceiro século d.C. e é considerado por muitos o “pai da Álgebra”. Seu livro “Arithmetica” tratava da solução de equações algébricas com coeficientes inteiros para as quais se busca soluções também inteiras. Tais equações são conhecidas como equações diofantinas. Um grande estudioso do trabalho de Diofanto foi Pierre de Fermat, conhecido matemático francês. Neste problema você deve resolver uma classe de equações diofantinas do tipo x1 + x2 + ... +xn = C. Ou seja, dados inteiros N e C, determine quantas soluções inteiras não-negativas existem para a equação x1 + x2 + ... +xn = C, onde 0 ≤ xi ≤ C para todo i = 1, 2, ... , N.",
        "titulo": "Equações Diofantinas",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por uma linha contendo dois inteiros N e C (1 ≤ N, C ≤ 1000000). Como este valor pode ser muito grande então imprima o resultado módulo 1300031."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1093",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha. A linha deve conter apenas um número real, escrito com precisão de uma casa decimal, representando, em termos de percentagem, a probabilidade de o vampiro 1 vencer o combate.",
        "descricao": "Felipinho está empolgado com seu novo jogo de RPG sobre guerras entre clãs de vampiros. Nesse jogo ele representa um personagem de um vampiro e constantemente entra em conflito contra vampiros de outros clãs. Tais batalhas são realizadas com base nas características de cada personagem envolvido e com a ajuda de um dado comum de seis faces. Por simplicidade, vamos considerar apenas as lutas entre dois vampiros, vampiro 1 e vampiro 2. Cada um possui uma energia vital (chamaremos de EV1 e EV2 respectivamente) e, além disso, são determinadas uma força de ataque AT e uma capacidade de dano D. O combate é realizado em turnos da maneira descrita a seguir. A cada turno um dado é rolado, se o valor obtido for menor do que ou igual a AT, o vampiro 1 venceu o turno, caso contrário o vampiro 2 é quem venceu. O vencedor suga energia vital do adversário igual ao valor D, ou seja, D pontos de EV são diminuídos do perdedor e acrescentados ao vencedor. O combate segue até que um dos vampiros fique com EV igual a ou menor do que zero. Por exemplo, suponhamos que EV1=7, EV2=5, AT=2 and D=4. Rola-se o dado e o valor obtido foi 3. Nesse caso, o vampiro 2 venceu o turno e, portanto, 4 pontos de EV são diminuídos do vampiro 1 (EV1) e acrescentados ao vampiro 2 (EV2) Sendo assim, os novos valores seriam EV1=3 e EV2=9. Observe que se no próximo turno o vampiro 2 ganhar novamente, o combate irá terminar. Os valores de AT e D são constantes durante todo o combate, apenas EV1 e EV2 variam. Apesar de gostar muito do jogo, Felipinho acha que os combates estão muito demorados e e gostaria de conhecer de antemão a probabilidade de vencer, para saber se vale a pensa lutar. Assim, ele pediu que você escrevesse um programa que, dados os valores iniciais de EV1, EV2, além de AT e D, calculasse a probabilidade de o vampiro 1 vencer o combate.",
        "titulo": "Vampiros",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste consiste de uma única linha, contendo 4 inteiros EV1, EV2, AT e D separados por espaços (1 ≤ EV1, EV2 ≤ 10, 1 ≤ AT ≤ 5 and 1 ≤ D ≤ 10). O final da entrada é indicado por uma linha contendo quatro zeros, separados por espaços."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1660",
        "saida": "Para cada caso de teste imprima uma única linha indicando o número de soldados sobreviventes.",
        "descricao": "Flavius Josephus uma vez foi preso em uma caverna junto com seus colegas soldados pelos romanos. Todos os colegas de Josephus preferiram se suicidar a se render. Então eles formaram um círculo e concordaram em um número K. Toda K-ésima pessoa no círculo cometeria suicídio. Entretanto, Josephus tinha prioridades diferentes e não queria morrer no momento. De acordo com a lenda ele conseguiu achar um lugar seguro no círculo onde ele seria o último a cometer suicídio. Ele então se rendeu aos romanos e se tornou um cidadão de Roma anos depois. Já um fato menos conhecido é que as almas de Josephus e seus companheiros todas renasceram em tempos modernos. Obviamente Josephus e seus colegas renascidos queriam evitar ao máximo um fiasco similar no futuro. Então eles contrataram uma empresa de consultoria para bolar um esquema melhor. Pelo bem da tradição todos os soldados deveriam ficar em um círculo. Dessa forma um número entre 0 e N-1 seria associado a cada soldado, onde N é o número de soldados. Como os números mutáveis no esquema antigo eram terrivelmente ineficientes, agora o número associado a cada soldado não muda durante o jogo. A empresa de consultoria vai prover dois números A e B que serão usados para calcular o número do próximo soldado da seguinte forma: Seja X o número do soldado atual, o número do próximo soldado é A · X2 + B mod N. Começa-se com o soldado número 0 e então os soldados calculam o número do próximo soldado de acordo com a fórmula acima. Já que todos merecem uma segunda chance um soldado cometerá suicídio na vez que seu número for calculado pela segunda vez. Na ocasião de um número de soldado for calculado pela terceira vez o jogo acaba e todos os soldados remanescentes se rendem. Você deve escrever um programa que dado o número de soldados N e as constantes A e B, determine o número de sobreviventes.",
        "titulo": "Flavius Josephus Está de Volta",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste consiste numa única linha contendo 3 inteiros N (2 ≤ N ≤ 109), A and B (0 ≤ A, B < N) separados por um espaço em branco. Você pode assumir com segurança que o primeiro soldado morre com não mais que um milhão (106) de etapas. A entrada termina com um único 0 que não deve ser processado."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1795",
        "saida": "A saída é a soma de todos os elementos da linha R. Não esqueça do caractere de fim-de-linha após exibir a soma.",
        "descricao": "O triângulo trinomial é um triângulo numérico de coeficientes trinomiais. Ele pode ser obtido com uma linha contendo um único \"1\", a próxima linha contendo três 1 e cada elemento das linhas seguintes sendo calculado como a soma do elemento acima à esquerda, imediatamente acima e acima à direita: A primeira linha do triângulo trinomial é numerada com zero, a segunda linha é a de número 1 e assim sucessivamente. Sua tarefa é, dado um número de linha R, escrever um programa que exiba a soma de seus elementos. Por exemplo, a soma dos elementos da linha 2 é 9 = 1 + 2 + 3 + 2 + 1.",
        "titulo": "Triângulo Trinomial",
        "entrada": "A entrada é o número de linha R (0 ≤ R ≤ 20)."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1279",
        "saida": "Para cada entrada, imprima as diferentes propriedades dos anos em diferentes linhas de acordo com a descrição anterior e os exemplos fornecidos abaixo.  Uma linha em branco deve separar cada caso de teste de saída. Note que existem quatro diferentes propriedades. Obviamente não deverá ter uma linha em branco após o último caso de teste.",
        "descricao": "A antiga raça de Gulamatu é muito avançada no seu esquema de cálculo dos anos. Eles entendem o que é ano bissexto (ano que é divisível por 4 e não é divisível por 100, com a ressalva de que ano que são divisíveis por 400 são também anos bissextos.), E têm também alguns anos que ocorrem alguns festivais. Um deles é o festival Huluculu (acontece em anos divisíveis por 15) e o festival Bulukulu (acontece em anos divisíveis por 55 desde que também seja um ano bissexto). Dado um ano você terá de indicar quais propriedades este ano tem. Se o ano não é ano bissexto e nem ano de festival imprima a linha 'This is an ordinary year.', ou seja, que é um ano comum. A ordem de impressão das propriedades dos anos (se presente) é leap year -> huluculu -> bulukulu.",
        "titulo": "Ano Bissexto ou Ano não Bissexto",
        "entrada": "A entrada conterá vários casos de teste. Cada caso de teste consiste de uma linha contendo um ano que nunca será menor do que 2000 (para evitar regras anteriores diferentes para anos bissextos), mas pode ter mais do que 1.000 dígitos. O final da entrada é determinado por fim de arquivo (EOF)."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1647",
        "saida": "Para caso de texto, imprima uma linha com o número de rodadas necessárias para o jogo terminar. Você pode assumir que esse número cabe em um inteiro de 64 bits (em C/C++ você pode usar o tipo “long long” e em Java o tipo “long”).",
        "descricao": "Existem n bacias, numeradas de 1 até n. Inicialmente, a bacia i contém mi bolas de gude. Uma rodada consiste em remover uma bola de gude de uma bacia. Quando uma bola de gude é removida da bacia i (i > 1), outra bola de gude é adicionada a cada uma das primeiras i-1 bacias; se uma bola de gude é removida da bacia 1, nenhuma nova bola de gude é adicionada. O jogo termina quando cada uma das bacias estiver vazia. Seu trabalho é determinar quantas rodadas são necessárias para o jogo terminar. Você pode assumir que o suprimento de bolas de gude é suficiente, e que todas as bacias são grandes o suficiente, de tal forma que cada rodada possível pode ser executada.",
        "titulo": "Um Jogo com Bolas de Gude",
        "entrada": "A entrada é composta de vários casos de teste. Cada caso de teste é composto por uma linha, contendo um inteiro n (1 ≤ n ≤ 50), o número de bacias no jogo. A linha seguinte contém n inteiros mi (1 ≤ i ≤ n, 0 ≤ mi ≤ 1000), onde mi representa o números de bolas de gude na bacia i no início do jogo. Um único valor 0 indica o fim da entrada."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1338",
        "saida": "Para cada instância seu programa deve imprimir uma linha que contém o N -ésimo número livre de divisores quadrados perfeitos.",
        "descricao": "No Egito antigo as construções das pirâmides são cercadas de muitos mistérios. Muitos pesquisadores consideram que a tecnologia necessária para construí-las não estava disponível na época, e suspeitam que os egípcios tiveram ajuda de extraterrestres para fazê-las. Um exemplo de um desses mistérios são os números de “It-miha”. Na província egípcia de It-miha foi encontrada uma pedra em que uma sequência de números estava gravada. Aparentemente os números não tinham qualquer ligação, até que Poincaré, no final do século XIX conjecturou que os números gravados naquela pedra eram os 500 primeiros inteiros livres de divisores quadrados perfeitos. Um quadrado perfeito é um número que possui raiz quadrada inteira, como 1, 4, 9, 16, 25, etc. Dizemos que um número é livre de divisores quadrados perfeitos se não for divisível por um quadrado perfeito maior que 1. Pode parecer simples para nós, hoje, determinar tais números, mas devemos pensar que naquela época, há mais de 3500 anos, mesmo o sistema de numeração utilizado era outro, e tornava qualquer conta muito difícil. Vale lembrar que os números de “It-miha” são muito frequentes nas construções das pirâmides. A base da pirâmide de Quéops, por exemplo é de 210 x 210 e sua altura 105 metros. Todas as dimensões são números de “It-miha”!!! Os primeiros dez números de “It-Miha” são 1, 2, 3, 5, 6, 7, 10, 11, 13, 14. Sua tarefa neste exercícios será dado N determinar o N -ésimo número de “It-miha”.",
        "titulo": "It-Miha",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém um inteiro N , onde 1 ≤ N ≤ 20 000 000 000."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1831",
        "saida": "Para cada caso de testes deve ser impressa a mensagem \"Caso #t: N laranja(s)\", onde t é o número do caso de teste (cuja contagem tem início no número um) e N é o total de laranjas. Caso exista mais de uma solução, deve ser escolhida a menor solução inteira positiva possível.",
        "descricao": "José trabalha no ramo de vendas de laranjas. Ele tem uma equipe de funcionários que embalam as laranjas para a venda e distribuição em sacos, onde cada saco contém o mesmo número de laranjas. Com o aumento da produção, José contratou novos funcionários. No primeiro dia de trabalho da nova equipe, os trabalhadores embalaram as laranjas em sacos com 5 laranjas cada, e restaram 2 laranjas. A equipe, contudo, não sabia que o número de laranjas em um saco havia subido para 7, de modo que tiveram que desembalar as laranjas e reempacotá-las em sacos com 7 unidades cada. Ao fim deste segundo serviço sobraram 3 laranjas. Ao chegar, José observou que eles não tinham atentado à promoção de fim de ano, onde cada saco teria 9 laranjas. Uma vez mais foram obrigados a reembalar as laranjas: desta vez não houve nenhuma sobra. Uma vez que o caminhão de entregas já tinha partido, a equipe de iniciantes percebeu que cometera mais um erro: ninguém contou o total de laranjas embaladas, nem o número de sacos preparados! Antes que tivessem que comunicar mais esta falha ao patrão, um dos funcionários sugeriu que seria possível, apenas com as informações sobre o número de laranjas em cada saco e os restos, recuperar o total de laranjas. Você pode escrever um software que auxilie os trabalhadores neste dia difícil de trabalho?",
        "titulo": "Dia Difícil de Trabalho",
        "entrada": "A entrada consiste em uma série de casos de teste. Cada caso de teste é representado por três linhas, onde cada linha representa o número de laranjas restantes ri (0 ≤ ri < Li) após o empacotamento em sacos com Li (2 ≤ Li ≤ 1000) laranjas cada, separados por um espaço em branco, com i = 1, 2, 3. Pode-se considerar que Li e ri são números inteiros tais que não há divisores comuns entre L1, L2, L3, e que as sobras se referem às laranjas que não foram devidamente embaladas (uma laranja só é considerada devidamente embalada se estiver em um saco com exatamente Li laranjas)."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1213",
        "saida": "Para cada caso de teste, imprima quantos dígitos tem o múltiplo de n que atende os requisitos acima.",
        "descricao": "Dado qualquer inteiro n (1 ≤ n ≤ 10000) não divisível por 2 ou por 5, algum múltiplo de n deve ser um número que é uma sequência de números 1. Você deve então calcular e mostrar quantos dígitos tem o menor múltiplo de n que tem todos seus dígitos iguais a 1.",
        "titulo": "Ones",
        "entrada": "A entrada consiste de vários casos de teste e termina com EOF. Cada caso de teste contém um inteiro n (1 ≤ n ≤ 10000) não divisível por 2 ou por 5."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1754",
        "saida": "Para cada caso de teste imprima uma única linha contendo o inteiro K.",
        "descricao": "Na tentativa de parar Super Buu, Goten e Trunks entraram na Sala do Tempo para treinar. Dentro dessa sala o tempo passa mais rápido (1 segundo fora da sala pode ser equivalente a segundos, minutos, horas ou até mesmo dias dentro da sala). Goten e Trunks precisam de X segundos para finalizar o treinamento, porém Super Buu ficou impaciente e ordenou que Sr. Picollo o levasse até seus oponentes imediatamente. Sr. Picollo usou seus poderes telepáticos para alertar os meninos (que até então estavam apenas brincando pela sala) e eles iniciaram o treinamento imediatamente. Sr. Picollo tentou retardar ao máximo o trajeto até a entrada da Sala do Tempo, levando um tempo Y para tal. Seja K a quantidade de segundos que se passa dentro da sala durante 1 segundo fora da mesma. Encontre o menor valor de K que permita que os meninos finalizem o treinamento antes da chegada de Super Buu. Considere que independente da duração do treinamento os meninos jamais param para descansar, afinal eles tem várias sementes dos Deuses para repor as energias e que o treinamento se encerra no momento que Super Buu passar pela porta.",
        "titulo": "A Sala do Tempo",
        "entrada": "A primeira linha da entrada contém um inteiro T (1 ≤ T ≤ 100), o número de caso de teste. As T linhas seguintes contém 2 inteiros cada: X (1 ≤ X ≤ 1015) e Y (1 ≤ Y ≤ 105), o tempo necessário para completar o treinamento e o tempo do trajeto de Super Buu."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "2001",
        "saida": "Para cada caso de teste imprima o valor do FK e a soma de todos os elementos da função de Bile menores ou iguais a FK, separados por um espaço. Suas respostas devem ser apresentadas em módulo 303700049.",
        "descricao": "Bile é um garoto esperto que gosta bastante de recorrências. Ele estava participando de uma competição em que a melhor sequência ganharia um premio. Bile criou uma sequência F em que os N primeiros valores são conhecidos, e para descobrir o valor de FK, para um K N, é utilizada a formulação abaixo. Para N K: FK = 1*FK-1 + 2*FK-2 + ... + N*FK-N Mas Bile não sabe calcular de forma rápida os valores de sua sequência e pediu a sua ajuda. No primeiro caso de teste: N = 2, K = 3, F1 = 2, F2 = 5, F3 = F2 + 2*F1 = 9, F4 = F3 + 2*F2 = 19 ...",
        "titulo": "Bile",
        "entrada": "A entrada consiste em vários casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha de cada caso de teste contém dois inteiros, N ( 2 ≤ N ≤ 100 ) e K ( N ≤ K ≤ 1018 ), representando o número de valores inicialmente conhecidos da sequência de Bile. A segunda linha consiste de N inteiros Fi ( F1, F2, … ,FN ) e ( 0 ≤ Fi ≤ 1010 ) que representam os valores inicialmente conhecidos. A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1212",
        "saida": "Para cada linha de entrada, com exceção da última, você deve computar e imprimir a quantidade de operações \"leva 1\" que resultam da adição dos 2 números, no formato apresentado no exemplo abaixo.",
        "descricao": "As crianças são ensinadas a adicionar vários dígitos da direita para a esquerda, um dígito de cada vez. Muitos acham a operação \"vai 1\" (em inglês chamada de \"carry\", na qual o valor 1 é carregado de uma posição para ser adicionado ao dígito seguinte) um desafio significativo. Seu trabalho é para contar o número de operações de carry para cada um dos problemas de adição apresentados para que os educadores possam avaliar a sua dificuldade.",
        "titulo": "Aritmética Primária",
        "entrada": "Cada linha de entrada contém dois inteiros sem sinal com no máximo 9 dígitos. A última linha de entrada contém 0 0."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1219",
        "saida": "Para cada caso, seu programa deverá mostrar as saídas das áreas com girassóis, violetas e rosas respectivamente. Imprima suas respostas corretamente com 4 casas decimais.",
        "descricao": "\"Roses are red, violets are blue...\" Mr Smith é um milionário muito conhecido – não por sua saúde, mas por seu senso de \"arte\"... Mr Smith Fez um jardim circular. Nos limites ele marcou três pontos e fez um triângulo. Ele então encontrou o maior círculo dentro da região triangular. Mais ou menos conforme a figura abaixo: Mr Smith então plantou girassóis amarelos, violetas azuis e rosas vermelhas, como mostrado na figura acima. (Combinaçào legal, não? :-) Dado os tamanhos dos 3 lados do triângulo, você deve encontrar as áreas que correspondem respectivamente aos 3 tipos de flores: amarelas, azuis e vermelhas.",
        "titulo": "Flores Coloridas",
        "entrada": "Cada linha de entrada contém 3 inteiros a, b, c, que são os tamanhos dos 3 lados da região triangular, com 0 < a ≤ b ≤ c ≤ 1000. A entrada é terminada por final de arquivo (EOF)."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1220",
        "saida": "Para cada viagem, imprima uma linha com a quantidade de dinheiro (em dólares e centavos), que deve ser trocada para equalizar os custos dos estudantes.",
        "descricao": "Alguns estudantes são membros de um clube que viaja anualmente para locais exóticos. Os seus destinos no passado incluíram Indianapolis, Phoenix, Nashville, Filadélfia, San Jose, e Atlanta. Nesta primavera eles estão planejando uma viagem para Eindhoven. O grupo concorda com antecedência em dividir as despesas de forma igual, mas não é prático ficar fazendo acerto a cada despesa nova que ocorre. Assim, cada indivíduo do grupo paga por coisas específicas, como refeições, hotéis, passeios de táxi, bilhetes de avião, etc. Após a viagem, as despesas de cada aluno são computados e dinheiro é trocado de modo a que o custo final para cada um deles é o mesmo, com diferença de no máximo um centavo. No passado, esta troca de dinheiro tem sido tediosa e demorada. Seu trabalho é calcular, a partir de uma lista de despesas,a quantidade mínima de dinheiro que tem de mudar de mãos, a fim de equalizar (dentro de um centavo) os custos de todos os estudantes.",
        "titulo": "A Viagem",
        "entrada": "A entrada contém a informação de diversas viagens. A informação de cada viagem consiste de uma linha contendo um inteiro positivo n (1 ≤ n ≤ 1000) indicando o número de alunos na viagem, seguida por n linhas de entrada, cada uma contendo a quantidade em dólares e centavos, gastos por cada um dos estudantes. Nenhum estudante gastou mais de R$ 10.000,00. Uma única linha contendo 0 vem logo após a última viagem e determina o fim da entrada."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1280",
        "saida": "A saída deverá conter, para cada caso de teste, um inteiro igual ao valor que José terá que pagar a João.",
        "descricao": "João realizou uma tarefa para seu amigo José, mas os dois não chegaram a um acordo quanto ao pagamento pela realização da tarefa. Depois de muita discussão, João, que é muito bom em matemática, propôs um acordo. Inicialmente cada um deﬁniria, sem que o outro o soubesse, um determinado valor, ou seja, João especiﬁcaria um valor n e José um valor m.  Assim, se José propusesse não pagar nada, então ele teria que pagar n + 1 reais! Se João não quisesse receber nada e José propusesse pagar um ou mais reais, José pagaria o mesmo valor que teria que pagar caso João pedisse 1 real e José propusesse pagar apenas m - 1 reais!! Se ambos os valores fossem superiores a zero, então José pagaria o mesmo valor que teria que pagar caso José propusesse m - 1 reais e João quisesse receber o mesmo que receberia se José propusesse m reais e ele pedisse n - 1 reais!!! Eles também estipularam que se José estivesse disposto a pagar no máximo 3 reais, então João poderia pedir até 200 reais. Por outro lado, se José estivesse disposto a pagar 4 reais, então João só poderia pedir até 2 reais! Depois de horas discutindo essas regras, eles ﬁnalmente concordaram que seria muito trabalhoso calcular o valor devido por José. Portanto, escreva um programa que calcule o valor que José terá que pagar a João, segundo essas regras.",
        "titulo": "Amigos",
        "entrada": "A primeira linha da entrada contém um inteiro T que é o número de casos de testes. As T linhas seguintes conterão dois inteiros m (0 ≤ m ≤ 4) e n (0 ≤ n ≤ 200), separados por um espaço, que representam os valores que José quer pagar e que João quer receber, respectivamente."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1630",
        "saida": "Para cada caso de teste imprima uma linha com o número mínimo de estacas necessário para cercar o tereno.",
        "descricao": "Marcos trabalha em uma empreiteira, sua tarefa é cercar com estacas os terrenos onde serão construidos prédios. Existem duas restrições para a distribuição destas estacas, elas devem ser colocadas de tal forma que a distância entre duas estacas seja sempre igual, e a segunda restrição é que Marcos deve usar o menor número possível de estacas. Marcos é seu amigo e pediu para que você desenvolva um programa para ajudá-lo.",
        "titulo": "Estacas",
        "entrada": "Haverão diversos casos de teste, cada caso de teste é descrito em uma linha por dois números X e Y (1 ≤ X, Y ≤ 100000000), os quais representam as dimensões do terreno. O final da entrada é indicado por final de arquivo."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1626",
        "saida": "Para cada inteiro N lido, imprima uma linha contendo dois valores: a soma dos divisores de N! distintos de N! e o próprio N!. Como ambos os valores podem ser muito grandes, imprima apenas o resto que deixam por 109 + 7.",
        "descricao": "As universidades da região brasileira conhecida como Fronteira Sul participam da Maratona de Programação há muitos anos, revezando a sede da Etapa Regional especialmente entre as cidades de Erechim, no Rio Grande do Sul, e Chapecó, em Santa Catarina. Desde o ano passado, nossa sede tem sido a 2ª maior do país. Neste ano de 2014, participaram 34 times de 12 escolas na UNOCHAPECÓ, em Chapecó. As instituições envolvidas na organização do evento — em especial a UNOCHAPECÓ, a UNOESC, a URI e a recém-criada UFFS — acreditam que as competições de Programação são um dos principais meios para fortalecer a cultura de Programação, promovendo independência e inovação científica e tecnológica e maior relevância da Região no cenário nacional. Após a cerimônia de premiação da Etapa Regional deste ano, estudantes e professores das instituições supracitadas foram a um rodízio de pizza com dois objetivos: 1. matar a fome; 2. conversar sobre a organização da Maratona de Programação da Feira de Conhecimento, Cultura e Educação (FACE) de Chapecó, que aconteceria dali duas semanas. Durante a discussão, contudo, um dos professores propôs: “Por que não realizamos uma Maratona aqui mesmo, não de Programação, mas de pizza? Quem comer menos pizza paga uma rodada de cerveja para todos!”. Todos concordaram, e assim aconteceu a 1ª Maratona All FACE. O perdedor, contudo, quis a princípio se esquivar de pagar a cerveja. “Só pago se alguém for capaz de me dizer um número perfeito que seja também um fatorial”, disse ele. “6”, respondeu um outro estudante mais que depressa. Será que existe algum outro número perfeito que também seja fatorial? É claro que não, mas o perdedor, indignado por pagar cerveja para todos, resolveu fazer um programa para se convencer. Lembrando: um inteiro positivo M é dito perfeito se é igual à soma de todos os seus divisores distintos de M (por exemplo, 6 = 1 + 2 + 3 e 28 = 1 + 2 + 4 + 7 + 14), e dito um fatorial se existe um natural N tal que N! = M.",
        "titulo": "Maratona All FACE",
        "entrada": "Cada linha da entrada é constituída de um único inteiro N (2 ≤ N ≤ 105). A entrada termina em fim de arquivo (EOF)."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2135",
        "saida": "Para cada instâncias, você deverá imprimir um identificador \"Instancia k\", onde k é o número da instância atual iniciando por 1. Na linha seguinte imprima o inteiro que satisfaça a restrição descrita acima. Caso não exista tal inteiro imprima \"nao achei\". Após cada instância imprima uma linha em branco.",
        "descricao": "A nossa grandiosa Professora Cris no último aquecimento ficou conhecida como a grande maquiavélica do IME. Para quem não está a par do assunto, a digníssima professora exigiu que os alunos formassem uma fila em ordem lexicográfica (pelo nome) com no máximo k permutações. Isto fez com que muitos alunos nem sequer entrassem na sala para fazer a prova. No entanto, nesta seletiva ela resolveu se redimir perante seus alunos, e resolveu aplicar um probleminha para recuperação. Sua tarefa, mesmo não tendo sido reprovado, é dada uma sequência de n inteiros a1,a2,...,an.Onde -30 ≤ aj ≤ 30 para j = 1,,...,n, imprima, se existir, um inteiro ak tal que .Se houver mais de um inteiro que satisfaça esta condição, imprima o que aparece primeiro na sequência. Observação da professora: \"Meninos, lembrem-se que a soma de nenhum número diferente de zero é zero! Tá?\"",
        "titulo": "Recuperação",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em um inteiro n (1 ≤ n ≤ 100) indicando o número de inteiros na linha seguinte que devem ser processados. A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1376",
        "saida": "Para cada caso de teste, seu programa deve imprimir R linhas com C inteiros cada, separados por um único espaço no mesmo formato que a entrada, o que representa a distribuição de terras, após todas as batalhas.",
        "descricao": "Na terra de ACM governou um grande rei que se tornou obcecado com a ordem. O reino tinha um forma retangular, e o rei dividiu o território em uma grade de pequenos municípios retangulares. Antes de morrer, o rei distribuiu os municípios entre seus filhos. No entanto, ele não tinha conhecimento de que seus filhos tinham desenvolvido uma rivalidade estranha: O primeiro herdeiro odiava o segundo herdeiro, mas não o resto, o segundo herdeiro odiava o terceiro herdeiro, mas não o resto, e assim diante... Finalmente, o último herdeiro odiava o primeiro herdeiro, mas não os outros herdeiros. Assim que o rei morreu, a estranha rivalidade entre os filhos do rei desencadeou uma generalizada guerra no reino. Ataques só ocorreram entre pares de municípios adjacentes (municípios adjacentes são aqueles que partilham uma fronteira vertical ou horizontal). Um município X atacava um município Y adjacente sempre que o proprietário do X odiava o proprietário de Y. O município que foi atacado sempre era conquistado pelo irmão atacante. Por uma regra de honra todos os ataques foram realizados ao mesmo tempo, e um conjunto de ataques simultâneos foi chamado de batalha. Depois de um certo número de batalhas, os filhos sobreviventes fizeram uma trégua e nunca lutaram novamente. Por exemplo, se o rei tinha três filhos, chamados 0, 1 e 2, a figura abaixo mostra o que acontece na primeira batalha de uma dada distribuição inicial de terras: Você foi contratado para ajudar um historiador de ACM a determinar, dado o número de herdeiros, a inicial distribuição de terras e o número de batalhas, como ficou a distribuição de terras após todas as batalhas.",
        "titulo": "Irmãos",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém quatro inteiros N, R, C e K, separados por espaços simples. N é o número de sucessores (2 ≤ N ≤ 100), R e C são a dimensões do reino (2 ≤ R, C ≤ 100), e K é o número de batalhas (1 ≤ K ≤ 100). Herdeiros são identificados por números inteiros sequenciais a partir de zero (0 é o primeiro herdeiro, 1 é o segundo herdeiro, ..., N - 1 é o último herdeiro). Cada uma das próximas linhas R contém C inteiros Hr,c separado por espaços simples, que representam a distribuição de terras inicial: Hr,c é o proprietário inicial do município em r linha e coluna c (0 ≤ Hr,c ≤ N - 1). O último caso de teste é seguido por uma linha contendo quatro zeros separados por espaços."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1390",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma única linha de saída, indicando para quais bases a equação dada é válida. Se a expressão for verdadeira para infinitas bases, imprima \"B+\", onde B é a primeira base para a qual a equação é válida. Se a expressão for válida apenas para um conjunto finito de bases, imprima elas em ordem crescente, separadas por espaço. Se a expressão não for verdadeira em nenhuma base, imprima o caractere '*'.",
        "descricao": "O que você consegue se multiplicar 6 por 9? A resposta, é claro, é 42, mas somente se você fizer os cálculos na base 13. Dado um inteiro B ≥ 2, o sistema de numeração na base B é a maneira de escrever inteiros usando somente dígitos entre 0 e B - 1, inclusive. Em um número escrito na base B, o dígito mais à direita tem seu valor multiplicado por 1, o segundo mais à direita tem seu valor multiplicado por B, o terceiro mais à direita tem seu valor multiplicado por B2, e assim por diante. Algumas equações são verdadeiras ou falsas dependendo da base em que são consideradas. A equação 2 + 2 = 4, por exemplo, é verdadeira para qualquer B ≥ 5 - ela não vale para a base 4, por exemplo, visto que não existe dígito '4' na base 4. Por outro lado, uma equação como 2 + 2 = 5 nunca é verdadeira. Escreva um programa que, dada uma equação, determine em quais bases ela é verdadeira.",
        "titulo": "Bases",
        "entrada": "Cada linha da entrada contém um caso de teste; cada caso de teste é uma equação da forma \"EXPR=EXPR\", onde ambos \"EXPR\" são expressões aritméticas com no máximo 17 caracteres. Todas expressões são válidas e contém apenas os caracteres '+', '*' e os dígitos entre '0' e '9'. Nenhuma expressão contém sinais de mais no começo da equação e nenhum número tem zeros à esquerda. O final da entrada é indicado por uma linha contendo apenas \"=\"."
    }
]