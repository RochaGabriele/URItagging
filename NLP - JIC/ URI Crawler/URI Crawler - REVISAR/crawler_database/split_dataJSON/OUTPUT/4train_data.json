[
    {
        "nivel": "",
        "assunto": "",
        "numero": "1854",
        "saida": "Para cada dia do inverno, encerrado na entrada por uma linha de cinco inteiros, imprima uma linha contendo o número do dia e o número de possibilidades para a distribuição das cenouras entre os bonecos de neve da área delimitada. Considere que a contagem dos dias se inicia em 1. Como o número de possibilidades pode ser muito grande, imprima apenas o resto que esse valor deixa quando dividido por 109 + 7. O exemplo de entrada e saída esclarecem mais detalhes sobre o formato da saída.",
        "descricao": "Certa tarde, na Vila de Inverno, do lado de fora dos portões do castelo de Winterfell, as crianças começaram a construir bonecos de neve, para a alegria e o divertimento da plebe que negociava no mercado. Os bonecos estavam ficando adoráveis, não fosse por um detalhe: nenhum deles possuía nariz, já que as únicas cenouras agora remanescentes em Westeros estavam na despensa real da Casa Stark. O rei, comovido, resolveu ceder algumas de suas cenouras para que fossem distribuídas em regiões retangulares da Vila. Mas as crianças de Westeros são gananciosas e não se importam em colocar vários narizes em seus bonecos, ainda que outras crianças fiquem sem narizes para pôr em seus bonecos. Por exemplo, se o rei designa 2 cenouras idênticas para uma região em que há 3 bonecos, a, b e c, há 6 possibilidades para a distribuição dessas cenouras entre os bonecos depois que as crianças terminem de brigar entre si: a fica com 2 narizes e b e c com nenhum; a e b ficam com 1 nariz cada e c com nenhum; a e c ficam com 1 nariz cada e b com nenhum; b fica com 2 narizes e a e c com nenhum; b e c ficam com 1 nariz cada e a com nenhum; c fica com 2 narizes e a e b com nenhum. Percebendo que as brigas entre as crianças estava levando um número considerável delas a óbito, e preocupando-se com o futuro populacional do reino, o rei decidiu escolher apenas uma região retangular por dia, de modo que a distribuição das cenouras fosse feita sempre no fim do dia, quando todos os bonecos de neve do dia já houvessem sido construídos. Não é permitido às crianças usar cenouras para bonecos fora da região premiada do dia, nem tampouco levar cenouras para casa a fim de as usar no dia seguinte. O rei também ordenou que, tão logo a noite caísse e as crianças fossem embora, um oficial recolhesse todas as cenouras, deixando, contudo, os bonecos de neve intactos. A propósito, os bonecos construídos pelas crianças de Westeros são muito resistentes, podendo permanecer de pé por todo o inverno, a menos que sejam destruídos propositalmente por outra criança.",
        "titulo": "Inverno em Winterfell",
        "entrada": "A entrada descreve, em sequência, todos os eventos que aconteceram durante o inverno à sombra das muralhas de Winterfell e é composta por no máximo 105 linhas. A primeira linha da entrada é constituída por dois inteiros: N e M (1 ≤ N, M ≤ 103), os quais representam as dimensões da Vila. Cada uma das linhas seguintes descreve um evento, caracterizado pelo número de inteiros presentes na linha: se a linha consiste de três inteiros, X, Y e B (1 ≤ X ≤ N, 1 ≤ Y ≤ M, 1 ≤ B ≤ 100), significa que uma criança construiu B bonecos de neve na posição da Vila de coordenadas (X, Y); se a linha consiste de dois inteiros, X e Y (1 ≤ X ≤ N, 1 ≤ Y ≤ M), significa que uma criança destruiu todos os bonecos presentes na posição de coordenadas (X, Y); se a linha consiste de cinco inteiros, X1, Y1, X2, Y2 e C (1 ≤ X1 ≤ X2 ≤ N, 1 ≤ Y1 ≤ Y2 ≤ M, 1 ≤ C ≤ 103), significa que o rei concedeu C cenouras idênticas para serem distribuídas entre os bonecos de neve construídos na região retangular definida pelas posições de coordenadas (X1, Y1) e (X2, Y2), marcando o fim de um dia. A última linha da entrada é sempre uma linha de cinco inteiros."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1856",
        "saida": "Imprima uma linha para cada operação do tipo Q com sua resposta.",
        "descricao": "Arya: \"Cersei. Walder Frey. Montanha. Meryn Trant.\" Para se manter motivada, Arya sempre lembra a lista de inimigos que ela mais odeia. O principal objetivo de sua jornada é matar todos na sua lista! Entretanto, às vezes algum inimigo dela pode ser morto por outra pessoa. Quando ela descobre que tal inimigo morreu, ela o remove da sua lista. Além disso, Arya também pode fazer novos inimigos durante sua jornada. Quando ela faz um novo inimigo, tal inimigo é incluído na sua lista. Arya quer matar seus inimigos um por um, na mesma ordem em que aparecem na sua lista. A qualquer momento, ela pode se perguntar quanto tempo irá levar para matar todos que estão entre dados dois inimigos. Para tal, dados dois inimigos a e b, ela deve determinar quantos inimigos estão na lista entre a e b, excluindo ambos. Ajude Arya respondendo tais perguntas.",
        "titulo": "A Lista da Morte de Arya",
        "entrada": "A primeira linha contém um inteiro N (1 ≤ N ≤ 5×104), o número de inimigos inicialmente em sua lista. Considere que todas as pessoas são numeradas de 1 a 109, inclusive. A próxima linha contém N inteiros, descrevendo a lista inicial de Arya. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 5×104), o número de operações. As próximas Q linhas descrevem as operações. Cada operação pode estar em um dos seguintes formatos: I p e (1 ≤ e, p ≤ 109): Insira a pessoa p depois do inimigo e na lista. É garantido que e está na lista, e p não está na lista; R e (1 ≤ e ≤ 109): Remova o inimigo e da lista. É garantido que e está na lista; Q a b (1 ≤ a, b ≤ 109): Determine quantos inimigos estão na lista entre a e b, excluindo ambos. É garantido que a e b estão na lista."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2065",
        "saida": "Imprima uma linha contendo um inteiro, indicando quanto tempo levará para que todos os clientes sejam atendidos.",
        "descricao": "Hoje é a inauguração de um grande supermercado em sua cidade, e todos estão muito excitados com os baixos preços prometidos. Este supermercado tem N funcionários que trabalham no caixa, identificados por números de 1 a N, onde cada funcionário leva um determinado tempo vi para processar um item de um cliente. Ou seja, se um cliente tem cj itens em sua cesta, um determinado funcionário levará vi*cj segundos para processar todos os itens deste cliente. Quando um cliente entra na fila para ser atendido ele espera até que um funcionário esteja livre para o atendê-lo. Se mais de um funcionário estiverem livres ao mesmo tempo, o cliente será atendido pelo funcionário de menor número de identificação. Tal funcionário só estará livre novamente após processar todos os itens deste cliente. Há M clientes na fila para serem atendidos, cada um com um determinado número de itens na sua cesta. Dadas as informações sobre os funcionários nos caixas e os clientes, o gerente pediu sua ajuda para descobrir quanto tempo levará para que todos os clientes sejam atendidos.",
        "titulo": "Fila do Supermercado",
        "entrada": "A primeira linha conterá dois inteiros N e M, indicando o número de funcionários no caixa e o número de clientes, respectivamente (1 ≤ N ≤ M ≤ 104). Em seguida haverá N inteiros vi, indicando quanto tempo leva para o i-ésimo funcionário processar um item (1 ≤ vi ≤ 100, para todo 1 ≤ i ≤ N). Em seguida haverá M inteiros cj, indicando quantos itens o j-ésimo cliente tem em sua cesta (1 ≤ cj ≤ 100, para todo 1 ≤ j ≤ M)."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1068",
        "saida": "O arquivo de saída deverá ter a quantidade de linhas correspondente ao arquivo de entrada, cada uma delas contendo as palavras correct ou incorrect de acordo com as regras acima fornecidas.",
        "descricao": "Dada uma expressão qualquer com parênteses, indique se a quantidade de parênteses está correta ou não, sem levar em conta o restante da expressão. Por exemplo: a+(b*c)-2-a        está correto (a+b*(2-c)-2+a)*2  está correto enquanto (a*b-(2+c)         está incorreto 2*(3-a))           está incorreto )3+b*(2-c)(        está incorreto Ou seja, todo parênteses que fecha deve ter um outro parênteses que abre correspondente e não pode haver parênteses que fecha sem um previo parenteses que abre e a quantidade total de parenteses que abre e fecha deve ser igual.",
        "titulo": "Balanço de Parênteses I",
        "entrada": "Como entrada, haverá N expressões (1 <= N <= 10000), cada uma delas com até 1000 caracteres."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1566",
        "saida": "Para cada caso de teste de entrada, imprima uma linha contendo os valores das alturas de todos os moradores da cidade (em cm), por ordem crescente de altura, separados por um espaço em branco. Obs.: O arquivo de entrada é bastante grande, portanto, utilize um método rápido para leitura / escrita.",
        "descricao": "Cheio de boas ideias, agora o governo brasileiro resolveu criar a \"bolsa altura\". Desta forma, você foi incumbido de fazer o levantamento da altura da população de várias cidades e ordenar esta população por ordem crescente de altura. Você sabe que as cidades as quais terá que fazer isso tem menos de 3 milhões de habitantes e que ninguém, segundo o IBGE, tem mais do que 230 cm de altura nestas cidades.",
        "titulo": "Altura",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro NC (NC < 100) que indica a quantidade de casos de teste, ou seja de cidades. Para cada caso de teste, a primeira linha conterá um inteiro N (1 < N ≤ 3000000), indicando a quantidade de pessoas da cidade. A próxima linha irá conter a altura de cada uma destas pessoas, em centímetros, representado pela letra h (20 ≤ h  ≤ 230) e separados por um espaço em branco."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1077",
        "saida": "Para cada caso, apresente a expressão convertida para a forma posfixa.",
        "descricao": "O Professor solicitou que você escreva um programa que converta uma expressão na forma infixa (como usualmente conhecemos) para uma expressão na forma posfixa. Como você sabe, os termos in (no meio) e pos (depois) se referem à posição dos operadores. O programa terá que lidar somente com operadores binários +,-,*,/,^, parênteses, letras e números. Um exemplo seria uma expressão como: (A*B+2*C^3)/2*A. O programa deve converter esta expressão (infixa) para a expressão posfixa: AB*2C3^*+2/A*",
        "titulo": "Infixa para Posfixa",
        "entrada": "A primeira linha da entrada contém um valor inteiro N (N < 1000), que indica o número de casos de teste. Cada caso de teste a seguir é uma expressão válida na forma infixa, com até 300 caracteres."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1640",
        "saida": "Para cada caso de teste, imprima uma linha contendo o número mínimo de hotéis nos quais a companhia de transportes deve realizar reserva para uma entrega da cidade 1 à cidade n. Se não for possível encontrar uma rota que o motorista tenha de dirigir no máximo 10 horas por dia, imprima -1.",
        "descricao": "Uma companhia de transportes frequentemente necessita transportar bens de uma cidade para outra. A companhia de transportes fez um acordo especial com uma rede de hotéis que permite que seus motoristas fiquem hospedados nos hotéis desta rede gratuitamente. Os motoristas podem dirigir apenas 10 horas por dia. A companhia de transportes deseja encontrar uma rota que parte da cidade inicial e termina na cidade de destino tal que o motorista possa sempre passar a noite em um dos hotéis da rede, e que este precise dirigir no máximo 10 horas de um hotel até o próximo, ou até o destino. Naturalmente, o número de dias necessários para a entrega ser realizada também deve ser minimizado.",
        "titulo": "Reservando Hotéis",
        "entrada": "O arquivo de entrada contém diversos casos de teste. Cada caso de teste começa com uma linha contendo um inteiro n, (2 ≤ n ≤ 10000), indicando o número de cidades a serem consideradas durante o planejamento. Por simplicidade, as cidades são numeradas de 1 a n, onde 1 é a cidade inicial, e n é a cidade de destino. A próxima linha contem um inteiro h seguido pelos números c1, c2, ..., ch indicando o número de cidades nas quais os hotéis da rede estão localizados. Você pode assumir que 0 ≤ h ≤ min(n, 100). A terceira linha de cada caso de teste contém um inteiro m(1 ≤ m ≤ 105), que representa o número de estradas a serem consideradas para o planejamento da rota. As m linhas seguintes descrevem as estradas. Cada estrada é descrita por uma linha contendo três inteiros a, b, t(1 ≤ a, b ≤ n e t ≤ 600) onde a, b são duas cidades conectadas pela estrada, e t é o tempo em minutos necessário para o motorista dirigir do final de uma estrada ao outro. A entrada acaba quando n = 0."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1356",
        "saida": "Para cada caso de teste imprima os resultados de cada comando de hashing na entrada. Na i-ésima linha escreva um inteiro representando o resultado do i-ésimo comando de hashing. Imprima uma linha contendo um único caractere '-' (hífen) após cada caso de teste.",
        "descricao": "Júpiter está invadindo! As principais cidades tem sido destruídas por espaçonaves Jovianas e a humanidade está lutando contra. Nlogônia está à frente da contraofensiva, invadindo os sistemas de controle das espaçonaves. Diferente dos computadores Terráqueos, nos quais usalmente um byte possui 28 valores possíveis, os computadores Jovianos usam bytes com B possíveis valores, {0,1,...,B-1}. Os engenheiros de software Nlogonianos tem realizado engenharia reversa sobre o firmware das espaçonaves Jovianas, e planejam sabotá-lo de modo que as embarcações eventualmete autodestruam-se. Como uma medida de segurança, entretanto, as espaçonaves Jovianas rodam um programa supervisor que periodicamente checa a integridade do firmware, aplicando hashing sobre porções dele e comparando o resultado contra valores bons conhecidos. Para aplicar o hashing sobre uma porção do firmware do byte na posição i até o byte na posição j, o supervisor usa a função de hashing ​ onde P é um número primo. Por exemplo, se B = 20 e P = 139, enquanto os bytes 2 ao 5 do firmware tem os valores f2 = 14, f3 = 2, f4 = 2 e f5 = 4 então H(f2, . . . f5) = B0 f5 + B1 f4 + B2 f3 + B3 f2 (mod P)                                       = 200 × 4 + 201 × 2 + 202 × 2 + 203 × 14 (mod 139)                = 4 + 40 + 800 + 112000 (mod 139) = 112844 (mod 139)       = 115                             Os criptologistas Nlogonianos precisam encontrar um meio de sabotar o firmware sem esbarrar no supervisor. Como um primeiro passo, a você foi atribuída a função de escrever um programa para simular a intercalagem de dois tipos de comandos: edição de bytes do firmware pelos engenheiros de software Nlogonianos, e o cálculo de hashes de porções do firmware pelo program supervisor Joviano. No início da simulação o valor de cada byte é zero.",
        "titulo": "Júpiter Ataca!",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém quatro inteiros B, P, L e N, onde B é o número de possíveis valores de um byte Joviano, P é o módulo da hash Joviana (2 ≤ B < P ≤ 109 e P primo), L é o comprimento (número de bytes Jovianos) do firmware das espaçonaves, e N é o número de comandos a simular (1 ≤ L, N ≤ 105). No início da simulação o valor de cada byte no firmware é fi = 0 para 1 ≤ i ≤ L. Cada uma das N linhas seguintes descreve um comando a simular. Cada descrição de comando começa com uma letra maiúscula que é ou um 'E' ou um 'H', com os seguintes significados. 'E': A linha descreve um comando de edição. A letra é seguida por dois inteiros I e V indicando que o byte na posição I do firmware (ou seja, fi) deve receber o valor V (1 ≤ I ≤ L e 0 ≤ V ≤ B-1). 'H': A linha descreve um comando de hash. A letra é seguida por dois inteiro I e J indicando que H(fi...fj) deve ser computado (1 ≤ I ≤ J ≤ L). O último caso de teste é seguido por uma linha contendo quatro zeros."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1683",
        "saida": "Para cada caso de teste imprima em uma única linha a área do maior retângulo no histograma especificado. Lembre-se que esse retângulo deve estar alinhado com a base do histograma.",
        "descricao": "Um histograma é um polígono composto por uma seqüência de retângulos alinhados em uma linha de base comum. Os retângulos têm larguras iguais, mas podem ter diferentes alturas. Por exemplo, a figura da esquerda nos mostra um histograma com retângulos de alturas 2, 1, 4, 5, 1, 3, 3, onde a medida 1 é a largura dos retângulos: Normalmente, histogramas são utilizados para representar distribuições discretas, como a freqüência de caracteres em um texto. Note que a ordem dos retângulos, ou seja, suas alturas, é importante. Calcule a área do maior retângulo de um histograma, que também esteja alinhado com a base. A figura da direita mostra o maior retângulo alinhado no histograma apresentado.",
        "titulo": "Maior Retângulo em um Histograma",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste descreve um histograma, e inicia com um inteiro n, que representa o número de retângulos que o compõe. Assuma que 1 ≤ n ≤ 100000. Em seguida, n inteiros h1, ..., hn, onde 0 ≤ hi ≤ 1000000000. Esses números representam as alturas dos retangulos do histograma, da esquerda para a direita. A largura de cada retângulo é 1. Um zero na entrada representa o ultimo caso de teste."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2185",
        "saida": "Para cada alteração nas pilhas do jogo, você deverá imprimir \"Possivel\", se Dabriel tem chance de ganhar, ou \"Impossivel\", caso contrário.",
        "descricao": "Depois de capturar muitos Pomekons, Dabriel e Guarte resolveram criar um jogo com os monstrinhos e quem vencesse ficaria com todos eles. O jogo criado funciona da seguinte maneira: Todos os Pomekons são separados em N pilhas, elas não terão necessariamente a mesma quantidade de monstrinhos, o jogador da rodada escolhe uma pilha e remove um ou mais Pomekons dela. O jogo termina quando não existe nenhum monstrinho para ser selecionado, e o jogador desta rodada é considerado o perdedor. Como Dabriel é sempre o primeiro a jogar e nas últimas rodadas ele está ganhando, Guarte está desconfiado que Dabriel descobriu um macete do jogo, portanto ele propôs uma nova regra. Na nova versão do jogo Guarte irá escolher três inteiros X, Y e V, e a quantidade de monstrinhos em cada pilha entre X e Y, inclusive, irão ter a quantidade V de Pomekons. Dabriel aceitou a proposta, mas ele solicitou sua ajuda para dizer se ele terá chance de ganhar sempre que houver uma modificação nas pilhas. Como Dabriel e Guarte estão muito bons neste jogo, você pode assumir que ambos sempre jogam da melhor maneira possível.",
        "titulo": "Brincando com Pomekons",
        "entrada": "A primeira linha do caso de teste consiste de dois inteiros N (1 ≤ N ≤ 10⁵) e M (1 ≤ M ≤ 10⁵), representando a quantidade de pilhas e a quantidade de alterações que serão feitas respectivamente. A segunda linha consiste de N inteiros vi (1 ≤ i ≤ N, 0 ≤ vi ≤ 10⁴), representando a quantidade de Pomekons que a pilha i contém. As próximas M linhas consistem de três inteiros X, Y, V (1 ≤ X ≤ Y ≤ N, 1 ≤ V ≤ 10⁴), descrevendo as alterações que Guarte irá realizar."
    },
    {
        "nivel": "7",
        "assunto": "4",
        "numero": "1500",
        "saida": "Imprima a respostas das consultas, conforme o exemplo de saída.",
        "descricao": "O mundo está cada vez mais mal e está ficando cada vez mais difícil de entrar na liga do mal. Desde que o lendário Bad Horse se aposentou, você tem que responder corretamente as perguntas do mal do Dr. Horrible, que tem um PhD em malvadeza (mas não em Ciência da Computação). É dado um conjunto de N elementos, que são inicialmente todos 0. Depois disso você receberá C comandos. São eles: 0 p q v - você tem que adicionar v para todos os números na faixa de p à q (inclusive), onde p e q são dois índices do array. 1 p q - imprima uma linha contendo um único inteiro, que é a soma de todos os elementos do array entre p e q (inclusive).",
        "titulo": "Consultas Horríveis",
        "entrada": "A primeira linha contém T, que indica o número de casos de teste. Cada caso de teste começará com N (N ≤ 100 000) e C (C ≤ 100 000). Após isso você deverá ler C operações no formato descrito acima (1 ≤ p, q ≤ N and 1 ≤ v ≤ 107)."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1260",
        "saida": "Para cada caso de teste imprima o nome de cada espécie representada na população, em ordem alfabética, seguida pelo percentual da população que representa, com 4 casas decimais. Imprima uma linha em branco entre dois conjuntos de dados consecutivos.",
        "descricao": "Coníferas e folhosas (softwoods e hardwoods) são dois grandes grupos de vegetais produtores de madeira. As folhosas são aquele grupo de árvores que têm folhas largas, produzem uma fruta ou castanha e geralmente ficam dormentes no inverno. Os climas temperados da América produzem florestas com centenas de espécies de madeira de lei - árvores que compartilham certas características biológicas. Embora o carvalho, bordo e cereja sejam tipos de árvores de madeira de lei, são espécies diferentes. Juntas, todas as espécies de madeira folhosas representam 40 por cento das árvores nos Estados Unidos. Por outro lado, as madeiras macias (Softwoods) ou coníferas, chamadas \"cone-bearing\", são resinosas amplamente disponíveis EUA. Incluem cedro, abeto, cicuta, pinho, abeto vermelho e cipreste. Em uma casa, os resinosas são utilizados principalmente como madeira de viga estrutural, mas também podem ser utilizadas em algumas aplicações decorativas. Usando tecnologia de imagem por satélite, o Departamento de Recursos Naturais elaborou um inventário de todas as árvores de um local específico em um determinado dia. Você deverá calcular a fração da população de cada árvore representada por cada uma das espécies.",
        "titulo": "Espécies de Madeira",
        "entrada": "A entrada possui vários casos de teste. A primeira linha de entrada contém um inteiro N que indica o número de casos de teste, seguido por uma linha em branco. Cada caso de teste consiste de uma lista com a espécie de cada árvore observada pelo satélite, uma árvore por linha. Nenhum nome de espécie é superior a 30 caracteres. Não existem mais de 10.000 espécies e não mais de 1.000.000 árvores. Há uma linha em branco entre cada caso de teste consecutivo."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1261",
        "saida": "Para cada caso de teste de entrada, imprima o salário do funcionário que é calculado através deste sistema Pontos de Feno (que nada mais é do que a soma do valor de todas as palavras que aparecem na descrição do cargo). Obs.: o valor das palavras que não aparecem no dicionário é zero (0).",
        "descricao": "Cada funcionário de um serviço burocrático tem uma descrição do cargo - alguns parágrafos que descrevem as responsabilidades do trabalho. A descrição do cargo combinado com outros fatores, como por exemplo tempo de serviço, é utilizado para determinar qual é o salário deste funcionário. Um sistema denominado Pontos de Feno (Hay Points) libera o departamento de Recursos Humanos de ter que fazer um julgamento inteligente do valor de cada empregado para a empresa. A descrição de um cargo ou função é feita através da verificação de palavras e frases que indicam responsabilidade. Em particular, descrições de cargo que indicam o controle sobre um grande orçamento ou gestão sobe um grande número de pessoas geram escores altos neste sistema. Você deve implementar um sistema de Ponto de Feno simplificado. Você terá como informações um dicionário Hay Point que conterá algumas palavras-chaves que são as descrições dos cargos e um valor em dólares americanos associado com cada um destes cargos. Para cada descrição de trabalho você deverá calcular o salário associado com o trabalho, de acordo com este sistema.",
        "titulo": "Pontos de Feno",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém dois números inteiros positivos: M (M ≤ 1000), que é o número de palavras no dicionário Hay Point, e um número inteiro N (N ≤ 100) que corresponde à quantidade de descrições de cargos ou funções. M linhas seguem, cada um contém uma palavra (uma seqüência de até 16 letras minúsculas) e um valor de dólar (um número real entre 0 e 1000000). Logo na sequência, após o dicionário, estão as descrições de cada uma dos cargos N. Cada descrição de cargo consiste em uma ou mais linhas de texto. Para sua conveniência, o texto contém somente letras minúsculas (de 'a' até 'z'). Cada descrição de cargo é finalizada por uma linha contendo um ponto \".\"."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1696",
        "saida": "Para cada caso de teste imprima Q + 1 linhas. Na primeira linha, imprima o último número do jogo e o vencedor da sequência inicial e nas próximas Q linhas, o útimo número e o vencedor depois de cada substituição.",
        "descricao": "Rusa e Sanches são amigos na escola primária. Este mês eles estão aprendendo como somar e subtrair números inteiros. O professor de matemática deles deu um bom exercício para praticarem estes novos operadores. O exercício é um jogo (para aumentar o interesse dos alunos). É necessário que dois alunos joguem juntos, e como Rusa e Sanches estão sempre fazendo as tarefas juntos, dessa vez não será diferente. O professor deu a eles várias sequências e os movimentos que eles podem realizar são: - Primeiro jogador: Gerar uma nova sequência com a soma do primeiro e segundo números, do terceiro e quarto, do quinto e sexto, etc. - Segundo jogador: Gerar uma nova sequência com a subtração do primeiro e segundo números (nessa ordem), do terceiro e quarto, do quinto e sexto, etc. Se o tamanho da sequência for ímpar, o último número não deve ser modificado. Os jogadores alternam jogadas. O jogo continua até que reste apenas um número, chamado último número. Se ele é ímpar, o primeiro jogador vence. Caso contrário, o segundo vence. Como você pode ver o jogo é previsível, eles não podem alterar o resultado final dado uma sequência inicial. Entretanto, o professor também pediu para eles calcularem o último número da sequência depois de uma substituição num elemento da sequência inicial. Haverá várias substituições, e para cada uma eles tem que jogar novamente. Estas substituições são cumulativas. Ambos precisam aprender a somar e subtrair. Então, no primeiro caso de teste, Rusa será o primeiro jogador e Sanches, o segundo. No segundo caso de teste, eles trocam de ordem, i.e., Sanches é o primeiro jogador e Rusa, o segundo. No terceiro eles mudam de novo, e assim por diante. O professor deu muitas sequências para Rusa e Sanches. Eles já estão chateados do exercício porque eles já aprenderam a lição. Eles precisam terminar todos jogos até o final da semana e eles estão pedindo a você para ajudar com isso. Por exemplo, vamos assumir que a sequência inicial é (4, 2, 3, 5, 1, 6, 10, 2). Então, os movimentos são: (4, 2, 3, 5, 1, 6, 10, 2) → (6, 8, 7, 12) → (-2, -5) → (-7). O último número é -7, e o vencedor é Rusa, porque -7 é impar, e este é o primeiro caso de teste. Vejamos um segundo exemplo, vamos assumir que a sequência inicial é (4, 2, 3). Então, os movimentos são: (4, 2, 3) → (6, 3) → (3). O último número é 3, e o vencedor é Sanches, porque 3 é impar e este é o segundo caso de teste.",
        "titulo": "Brincando Com Operadores",
        "entrada": "A primeira linha conterá um número T (1 ≤ T ≤ 100), quantos casos de teste seguem. Para cada caso de teste, a primeira linha conterá um número N (1 ≤ N ≤ 104) e Q (0 ≤ Q ≤ 104), o número de inteiros na sequência inicial e o número de substituições, respectivamente. A próxima linha contém N inteiros da sequência S1, S2, …, SN (-104 ≤ Si ≤ 104). As próxima Q linhas contém A (1 ≤ A ≤ N ) e B (-104 ≤ B ≤ 104), que significa que o elemento SA da sequência inicial é substituído por B (SA = B)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1594",
        "saida": "Para cada caso imprima a soma dos maiores elementos de cada sub-vetor.",
        "descricao": "Dado um vetor de inteiros de tamanho N e um inteiro K, ache o maior elemento para cada sub-vetor contínuo de tamanho K. Imprima a soma de todos estes valores. Exemplo 1: Se tivermos o vetor [3, 2, 1, 4, 10] e K for 3, então temos que considerar os sub-vetores [3, 2, 1], [2, 1, 4] e [1, 4, 10]. O maior elemento de cada sub-vetor vale 3, 4 e 10, somando o total de 17. Exemplo 2: Se tivermos o vetor [1, 2, 3, 4, 5, 6] e K for 2, então temos que considerar os sub-vetores [1, 2], [2, 3], [3, 4], [4, 5] e [5, 6]. O maior elemento de cada sub-vetor vale 2, 3, 4, 5 e 6 somando o total de 20. Exemplo 3: Se tivermos o vetor [5, 4, 3] e K for 1, então temos que considerar os sub-vetores [5], [4] e [3]. O maior elemento de cada sub-vetor vale 5, 4 e 3 somando o total de 12.",
        "titulo": "Guloso",
        "entrada": "A entrada para esse problema é bem singular, leia com atenção! Na primeira linha você terá um inteiro T (T = 200) indicando o número de casos de teste. Para cada caso você receberá três números inteiros, N (1 ≤ N ≤ 104* ou 1 ≤ N ≤ 106**), K (1 ≤ K ≤ N) e S (0 ≤ S ≤ 109). Para gerar o vetor de inteiros, use o seguinte código em C/C++ em que recomendamos que você copie (control+C) do enunciado: array[0] = S; for (i = 1; i < N; ++i)     array[i] = (1LL*array[i-1]*1103515245 + 12345) % (2147483648LL); É garantido que existe uma solução que não se baseia nas propriedades do gerador da entrada acima. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2111",
        "saida": "Para cada instância imprima a representação do número N (0 ≤ N < 109) no sorobov com o seguinte formato. As duas primeiras linhas correspondem às pedras que valem 5, na linha seguinte imprima --------- (nove hífens) e as próximas cinco linhas correpondem às pedras que valem 1. Cada linha de pedras deve conter nove caracteres, onde '0' corresponde a um espaço vazio e '1' a uma pedra. Imprima uma linha em branco ao final de cada instância (inclusive a última).",
        "descricao": "Instrumentos de ajuda a calcular existem há séculos. Muito antes do surgimento das máquinas de calcular no século XVII, chineses e japoneses faziam uso de ábacos com os quais podem fazer operações matemáticas sofisticadas em velocidade estonteante. Um instrumento semelhante foi recentemente descoberto em escavações nas imediações da cidade de Ecaterimburgo. Acredita-se ser um ábaco similar ao japonês, chamado, em russo, sorobov (copoбob). O sorobov tem nove colunas, onde cada coluna corresponde a um dígito. A coluna mais à direita representa a unidade, a segunda mais à direita representa as dezenas e assim por diante. Existem 7 linhas, sendo as duas primeiras separadas, por uma barra, das 5 últimas. Na parte de cima (duas primeiras linhas) cada coluna possui uma única pedra, que se encostada na barra separadora soma 5 ao valor do dígito correspondente. Na parte de baixo cada coluna possui 4 pedras e um espaço vazio e a quantidade de pedras entre a barra separadora e o espaço vazio é somado ao valor do dígito correspondente. Dessa forma, dizemos que as pedras de cima valem 5 e as de baixo valem 1. Figura 1: Ilustração de como representar os números de 0 a 9. Sua tarefa neste problema será, dado um número N imprimir uma representação da configuração do sorobov correspondente ao número.",
        "titulo": "Entendendo o Sorobov",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância corresponde a uma única linha contendo o número N a ser inserido no sorobov. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1023",
        "saida": "Para cada entrada, deve-se apresentar a mensagem “Cidade# n:”, onde n é o número da cidade seguindo a sequência (1, 2, 3, ...) e em seguida deve-se listar, por ordem ascendente de consumo, a quantidade de pessoas seguido de um hífen e o consumo destas pessoas, arredondando o valor para baixo. Na terceira linha da saída deve-se mostrar o consumo médio por pessoa da cidade, com 2 casas decimais sem arredondamento, considerando o consumo real total. Imprimir uma linha em branco entre dois casos de teste consecutivos. No fim da saída não deve haver uma linha em branco.",
        "descricao": "Devido às constantes estiagens que aconteceram nos últimos tempos em algumas regiões do Brasil, o governo federal criou um órgão para a avaliação do consumo destas regiões com finalidade de verificar o comportamento da população na época de racionamento. Este órgão responsável irá pegar algumas cidades (por amostragem) e verificará como está sendo o consumo de cada uma das pessoas da cidade e o consumo médio de cada cidade por habitante.",
        "titulo": "Estiagem",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1*106), indicando a quantidade de imóveis. As N linhas contém um par de valores X (1 ≤ X ≤ 10) e Y (1 ≤ Y ≤ 200), indicando a quantidade de moradores de cada imóvel e o respectivo consumo total de cada imóvel (em m3). Com certeza, nenhuma residência consome mais do que 200 m3 por mês. O final da entrada é representado pelo número zero."
    },
    {
        "nivel": "5",
        "assunto": "4",
        "numero": "1425",
        "saida": "Para cada cado de teste, imprima uma única linha contendo 'Let me try!'(Me deixe tentar) se for possível chegar a Pedra M, caso contrário, imprima um linha contendo 'Don't make fun of me!'(Não ria de mim!).",
        "descricao": "Existe um belo riacho em uma bela vila. N Pedras estão alinhadas em linha reta do número 1 até N, da margem esquerda à margem direita, como mostrado abaixo. [Flanco esquerdo] - [Pedra 1] - [Pedra 2] - [Pedra 2] - [Pedra 3] - [Pedra 4] - [Pedra N] - [Flanco Direito] A distância entre duas Pedras adjacentes é exatamente 1 metro, enquanto a distância entre a margem esquerda e a Pedra 1 e a distância entre a Pedra N e a margem direita também são 1 metro. O sapo Frank está prestes a atravessar o riacho, seu vizinho, o sapo Funny veio a ele e disse: 'Olá Frank, feliz dia das Crianças! Eu tenho um presente para você. Vê? Um pequeno pacote na Pedra 5.' 'Oh, que legal! Obrigado! Eu vou pegar.' 'Espere! Este presente é apenas para sapos inteligentes. Você não pode pegar pulando direto.' 'Oh? Então o que devo fazer?' 'Pular mais vezes. Seu primeiro pulo deve ser da margem esquerda para a Pedra 1, então, pule quantas vezes quiser - não importa se for pra frente ou para traz - mas seu pulo i deve cobrir 2 × i - 1 metros. E mais, uma vez que alcance a margem direita ou esquerda, o jogo termina, sem mais pulos!' 'Hummmm, nada fácil... deixa eu pensar!' Respondeu sapo Frank, 'Devo tentar?'",
        "titulo": "Presente?!",
        "entrada": "A entrada contém mais de 2000 casos de teste. Cada caso de teste contém um única linha. Ela contém dois positivos inteiros N(2 ≤ N ≤ 106), e M(2 ≤ M ≤ N), M indica o número da pedra em que o presente está. O caso de teste no qual N = 0, M = 0 terminará a entrada e não deve ser contado como caso de teste."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2092",
        "saida": "Imprimir M linhas, a i-ésimo delas indicando o resultado da i-ésima mudança descrita na entrada. Cada linha deve conter dois inteiros números dccw e dcw, representando as distâncias em unidades noglônicas da casa que está mudando para a primeira casa cuja família torce para a mesma equipe, no sentido anti-horário e no sentido horário, respectivamente.",
        "descricao": "No reino de Noglônia há um lago conhecido como o \"Grande O\" por causa de sua forma perfeitamente redonda. No lado do lago há n casas, cada um deles a uma distância de uma unidade noglônica de seus vizinhos. As casas são numeradas de 1 a N em sentido horário, como pode ser visto na figura a seguir para N = 8. Desta forma, se i <j a distância em sentido horário a partir de casa i para a casa j é j-i, ao passo que a distância correspondente no sentido anti-horário é N - j + i. Note que a distância a partir de uma casa até ela mesma é N, em ambas as direções. Todos sabem que o povo de Noglônia são ávidos fãs de futebol, por isso, quando uma família se muda para uma casa do lado do lago é muito importante para eles saberem quem são os vizinhos mais próximos que torcem para a mesma equipe que eles. Isso nem sempre é fácil, uma vez que pode haver muitas casas ao redor do lago, muitos times de futebol diferentes em Noglônia e várias mudanças. Dada uma sequência de M mudanças, as pessoas que vivem na margem do lago querem saudar cada nova família que chega, dizendo-lhes a distância do seu novo lar para as casas mais próximas que torcem para a mesma equipe que eles, tanto no sentido horário e anti-horário. Observe que, se não houver outra casa na margem do lago cuja família torce para a mesma equipe como o recém-chegado, essa distância será N em ambas as direções, pois a casa mais próxima seria de fato a sua própria casa. Você quer participar do comitê de boas-vindas? Em Noglônia existem F times de futebol, identificados por diferentes números inteiros de 0 a F-1. Não quero que você perca tempo indo de porta em porta perguntando qual equipe é seguida em cada casa, vamos supor que, inicialmente, a família que vive na casa de número i é fã da equipe de número ei, sendo este número gerado, de forma pseudoaleatória, pela fórmula recursiva: e1 = A e ei = (B x ei-1 + C) mod F para i = 2, 3, ..., N onde A, B e C são constantes e a expressão x mod y representa o resto da divisão inteira de x por y.",
        "titulo": "Assistindo o Jogo",
        "entrada": "A primeira linha contém dois números inteiros N e F, indicando, respectivamente, o número de casas ao redor do lago e do número de equipes de futebol em Noglônia (3 ≤ N ≤ 105 e 1 ≤ F ≤ 106). A segunda linha contém três números inteiros A, B e C, que determinam qual equipe é as famílias vivendo inicialmente ao redor do lago torcem, como é descrito na descrição do problema (0 ≤ A, B, C < F). A terceira linha contém um único número inteiro M, que representa o número de mudanças que irão acontecer (1 ≤ M ≤ 105). Cada uma das M seguintes linhas descrevem um movimento usando dois números inteiros I e E, o que significa que a família que torce para o time E está mudando para a casa de número I (1≤ I ≤ N e 0 ≤ E < F). As mudanças aparecem na ordem que elas acontecem, e devem ser levadas em consideração pelo comitê para futuras boas-vindas."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2120",
        "saida": "A saída consiste em Q inteiros. Os inteiros representam, em ordem, a matrícula dos tutores de cada aluno na ordem que foi pedida.",
        "descricao": "Cada vez que um novo aluno entra da Organização Educacional Farias Brito, ele recebe um tutor para ajudá-lo a conhecer a todos e tudo na escola. O sistema da escola para determinar o tutor de cada novo aluno foi criado por um louco chamado Succa Liaudzionis. Succa decidiu usar o número de matrícula de cada aluno para seguir o padrão de uma árvore binaria de busca (porque sim), desta maneira: O primeiro aluno, com matrícula X1 vira a raíz da árvore e então não possui tutor. Os números X2, X3, …, Xn são adicionados um a um a árvore. Para adicionar um número Xi, você deve percorrer a árvore partindo da raíz e usando as seguintes regras: O ponteiro está inicialmente apontando para a raíz da árvore. Se Xi é menor que o número do nó atual, o filho da esquerda passar a ser o nó atual. Senão, o filho da direita vira. Se, em algum momento, o filho desejado não existir, cria-se um novo nó contendo o valor de Xi. A matrícula do tutor do estudante atual é o pai de Xi na árvore. Por exemplo, se a ordem na qual os números forem adicionados for (3, 1, 4, 2, 5), a árvore fica desta maneira: Succa precisava de espaço extra em seu computador e decidiu apagar toda informação envolvendo os tutores dos alunos. Agora, seu chefe, Jeixeira Túnior, pediu a mesma informação sobre Q alunos que ele acabou de deletar! Succa considerou perguntar a cada estudante quem é seu tutor, mas isso demoraria tempo demais. Por outro lado, Succa ainda sabe a ordem na qual os estudantes foram adicionados a árvore. Como Succa não é tão brilhante quanto louco, ele precisa da sua ajuda para usar essa informação e determinar o tutor de cada aluno.",
        "titulo": "Tutores",
        "entrada": "A entrada consiste de quatro linhas. A primeira contém um inteiro N (2 ≤ N ≤ 100 000), o número de estudantes do Farias Brito. A segunda linha contém n inteiros distintos Xi (1 ≤ Xi ≤ 109), representando a matrícula de cada um dos n alunos na ordem em que eles foram adicionados ao sistema. A terceira linha contém Q (1 ≤ Q ≤ 99 999). A quarta linha contém os Q alunos representados por números de 1 a N que se quer informação (não será pedida informação sobre o primeiro aluno)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2136",
        "saida": "Seu programa deverá imprimir os inscritos pela ordem de escolha e por ordem alfabética, seguido do nome do vencedor. Imprima uma linha em branco entre a lista de inscritos e o nome do vencedor.",
        "descricao": "Todo final de ano ocorre uma festa na Instituição de Educação Fantástica (IEF). Logo no início de julho, são abertas as inscrições para participar dela. No momento da inscrição, o usuário pode escolher se quer ser \"O Amigo do Habay\" na festa ou não. O mais lógico seria escolher a opção Sim, afinal, é um privilégio ser O Amigo do Habay, já que ele é a pessoa mais descolada do IEF. Porém, há indivíduos que definitivamente não pretendem ser O Amigo do Habay, e por motivos desconhecidos. Somente um será o escolhido. Em vista disso, muitos alunos que escolheram a opção Sim realizaram a inscrição diversas vezes para aumentar a própria probabilidade de ser O Amigo do Habay. O organizador geral da festa contratou você para organizar as inscrições do site, pois está havendo um spam de inscrições. O critério para ser o escolhido é a quantidade de letras do primeiro nome, e em caso de empate, vence aquele que realizou primeiro a inscrição. A organização final dos inscritos deverá seguir a ordem de escolha (Sim ou Não), mas respeitando a ordem alfabética. OBS.: Ninguém que escolheu a opção Não realizou a inscrição mais de uma vez.",
        "titulo": "Amigos do Habay",
        "entrada": "A entrada contém somente um caso de teste. Cada linha é composta pelo primeiro nome do participante (sem espaços), seguido da opção YES (caso o usuário queira ser O Amigo do Habay) ou NO (caso não queira). A entrada termina assim que o usuário digita \"FIM\" (sem as aspas)."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1025",
        "saida": "Para cada caso de teste de saída deve haver um número serial do caso de teste. Para cada consulta, escreva uma linha de saída. O formato desta linha dependerá se o número consultado estiver ou não escrito em um dos mármores. Os dois diferentes formatos são descritos abaixo: 'x found at y', se o primeiro marble x foi encontrado na posição y. Posições são numeradas de 1, 2,...  a N. 'x not found', se o marble com o número x não estiver presente.",
        "descricao": "Raju e Meena adoram jogar um jogo diferente com pequenas peças de mármores, chamados Marbles. Eles têm um monte destas peças com números escritos neles. No início, Raju colocaria estes pequenos mármores um após outro em ordem ascendente de números escritos neles. Então Meena gostaria de pedir a Raju para encontrar o primeiro mármore com um certo número. Ele deveria contar 1...2...3. Raju ganha um ponto por cada resposta correta e Meena ganha um ponto se Raju falha. Depois de um número fixo de tentativas, o jogo termina e o jogador com o máximo de pontos vence. Hoje é sua chance de jogar com Raju. Sendo um/a cara esperto/a, você tem em seu favor o computador. Mas não subestime Meena, ela escreveu um programa para monitorar quanto tempo você levará para dar todas as respostas. Portanto, agora escreva o programa, que ajudará você em seu desafio com Raju.",
        "titulo": "Onde está o Mármore?",
        "entrada": "A entrada contém vários casos de teste, mas o total de casos é menor do que 65. Cada caso de teste inicia com dois inteiros: N que é o número de mármores e Q que é o número de consultas que Meena deseja fazer. As próximas N linhas conterão os números escritos em cada um dos N mármores. Os números destes mármores não tem qualquer ordem em particular. As seguintes Q linhas irão conter Q consultas. Tenha certeza, nenhum dos números da entrada é maior do que 10000 e nenhum deles é negativo. A entrada é terminada por um caso de teste onde N = 0 e Q = 0."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1452",
        "saida": "Para cada caso de teste, o programa deve imprimir a soma total de conexões entre cliente e servidores em uma linha, desconsiderando múltiplas conexões entre um mesmo par de cliente e servidor.",
        "descricao": "A Gloud Computing está vindo se instalar para a região de Joinville. Eles são conhecidos por proverem aplicativos na internet, mais especificamente um modelo de negócios baseado em cloud computing - computação nas nuvens. A fim de selecionar os novos funcionários da empresa, eles contactaram o comitê da maratona da UDESC, para que passassem um problema aos nossos maratonistas. Aquele que resolver, além do balão, pode preencher a ficha funcional com estrelinhas a mais. Basicamente, a Gloud Computing tem aplicações espalhadas em seus servidores em diversos lugares do mundo. Estes servidores são especializados em uma lista de aplicativos a serem usados pelos usuários ali conectados na internet das nuvens. Por exemplo, o servidor de Joinville pode disponibilizar a aplicação A, enquanto que o de Pasadena na Califórnia provê as aplicações A, B e C e o servidor de Pomerode provê a aplicação C. Temos um conjunto de servidores a cada um com um conjunto de aplicações a serem disponibilizados a um conjunto de usuários. Cada usuário pode estar conectado a um ou mais servidores dependendo de sua demanda, como ilustrado na Figura 1. Figura 1: 3 provedores de serviços, 2 usuários e 4 conexões. Serão disponibilizados a você dados sobre estes dois conjuntos, servidores e demanda dos usuários, e você deverá dizer a quantidade total de conexões entre clietes e servidores. As conexões são feitas de forma a maximizar a redundância. Por exemplo, se um cliente utilizar as aplicações B e C, ele irá se conectar a todos os servidores que disponibilizarem ao menos a aplicação B e a todos os que disponibilizarem ao menos a C. Múltiplas conexões entre um mesmo par de cliente e servidor são contabilizadas como um só. Pode ser que um cliente requeira uma aplicação inexistente, assim como o caso de um servidor prover uma apliação não requisitada por nenhum cliente.",
        "titulo": "Gloud Computing",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é iniciado por dois inteiros, N e M (0 ≤ N, M ≤ 200), que correspondem ao número de servidores e ao número de clientes. Cada uma das próximas N linhas contém um valor Qi (0 ≤ Qi ≤ 100) correspondente ao número de aplicações fornecidas pelo i-ésimo servidor, seguido por Qi palavras (separadas por espaços) referentes aos nomes das aplicações fornecidas. Após esta descrição dos servidores, seguem M linhas, cada uma contendo um valor Pj (0 ≤ Pj ≤ 100) correspondente ao número de aplicações requisitadas pelo j-ésimo cliente, seguido por Pj palavras (separadas por espaços) referentes aos nomes das aplições requisitadas. A entrada temina quando N = M = 0. Todos os nomes de aplicativos tem tamanho entre 1 e 20 caracteres."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1340",
        "saida": "Para cada caso de teste, mostre um dos seguintes: stack É definitivamente uma pilha. queue É definitivamente uma fila. priority queue É definitivamente uma fila de prioridade. impossible Não pode ser uma pilha, uma fila ou uma fila de prioridade. not sure Pode ser mais de uma das três estruturas mencionadas acima.",
        "descricao": "Existe uma estrutura de dados do tipo sacola, suportando duas operações: 1 x Jogue um elemento x na sacola. 2 Tire um elemento da sacola. Dada uma sequencia de operações que retornam valores, você vai adivinhar a estrutura de dados. É uma pilha (último-dentro, primeiro-fora), uma fila (primeiro-dentro, primeiro-fora), uma fila de prioridade (sempre tire os elementos grandes por primeiro) ou qualquer outra coisa que você dificilmente consegue imaginar!",
        "titulo": "Eu Posso Adivinhar a Estrutura de Dados!",
        "entrada": "Existem muitos casos de testes. Cada caso de teste começa com a linha contando um único inteiro n (1 <= n <= 1000). Cada uma das seguintes n linhas é um comando do tipo 1, ou um número inteiro 2, seguido de um número inteiro x. Isso significa que depois de executar um comando do tipo 2, obtemos um elemento x sem erros. O valor de x é sempre um número inteiro, positivo e não maior do que 100. O final da entrada é determinado pelo final do arquivo (EOF). O tamanho do arquivo de entrada não excede 1MB."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1382",
        "saida": "Para cada instância imprima uma linha contendo o número mínimo de tais trocas que ordena a sequência dada.",
        "descricao": "Watson, Crick e Wilkins receberam em 1962 o prêmio Nobel de Medicina especialmente pelo seu trabalho que resultou na descoberta da estrutura das moléculas do DNA e na sua importância na transmissão de informações entre as gerações de seres vivos. Watson e Crick publicaram na revista “Nature” em 1953 o artigo em que mostravam que a molécula de DNA apresentava uma estrutura de dupla hélice. O artigo assume enorme importância nos dias de hoje, especialmente depois dos vários avanços na área. Muitas pesquisas têm sido feitas na área de Bioinformática ligadas à descoberta da sequência de bases que compõem as moléculas de DNA dos vários seres vivos. Em especial, a estrutura destas moléculas tem sido usada para compor teorias de como os seres vivos evoluíram e quais têm ancestrais comuns. Acredita-se que os seres vivos presentes hoje no planeta podem descender de ancestrais comuns, sendo que as modificações nos seus respectivos DNAs são devidas a fenômenos de mutação ocorridos durante a evolução. Muitos biólogos acreditam no princípio da parcimônia, que diz que o número destas mutações deve ser o mínimo possível, uma vez que a Natureza busca, de certa forma, o caminho “mais barato” para a modificação desejada. Sua tarefa neste problema é auxiliar os pesquisadores na tarefa de determinar se duas sequências de DNA podem ter um ancestral comum. Considere dadas duas sequências (podemos imaginar como sequências de números inteiros). O seu objetivo é determinar o menor número de trocas de elementos de uma das sequências (os elementos não precisam estar em posições adjacentes na sequência) que leva uma das sequências na outra. Observe que podemos considerar uma das sequências fixa (por exemplo, em ordem crescente), dessa forma buscamos o número mínimo de tais trocas que ordena a sequência dada.",
        "titulo": "Elementar, meu Caro Watson!",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância possui um inteiro N (1 ≤ N ≤ 10000) indicando o número de inteiros na sequência. A segunda linha contém uma permutação dos inteiros 1, 2, ... , N separados por espaço."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1746",
        "saida": "Imprima uma linha contendo um inteiro que representa o número mínimo total de letras a serem escritas nas placas, quando a divisão dos nomes das ruas e avenidas é escolhida de forma otimizada.",
        "descricao": "A Rainha da Nlogônia decidiu mudar a capital do reino para uma nova cidade chamada Sortonia. O projeto da cidade é uma grade de N × N consistindo de N avenidas na direção Norte-Sul e N ruas direção Leste-Oeste. Assim, cada avenida cruza todas as ruas, e não há duas ruas ou duas avenidas que cruzam entre si. Como a cidade está quase terminada, agora é hora de atribuir nomes as suas ruas e avenidas. O povo de Nlogônia já votou nos 2×N nomes que eles querem usar, mas não foi decidido ainda qual desses será usado para as ruas e que para as avenidas. A questão não é tão simples, porque em cada cruzamento deve ter uma placa de identificação da rua e da avenida que se cruzam ali, e a rainha ordenou expressamente que as letras destas placas deve ser escritas em ouro cravejado com rubis. Como você é o Contador Oficial de Dinheiro (Accountant who Counts the Money - ACM), é sua tarefa encontrar uma forma de minimizar o número total de letras escritas nas placas dos cruzamentos, por razões óbvias. Felizmente, você pensou em uma maneira muito inteligente atingir esse objetivo, que é a utilização de abreviaturas nas placas para os nomes das ruas e avenidas. A abreviação do nome de uma avenida (e da mesma forma para uma rua) é o prefixo mais curto de seu nome, que não é um prefixo do nome de qualquer outra avenida (e da mesma forma para outra rua). Naturalmente, a abreviatura a ser utilizada para cada nome depende de como o conjunto de 2×N nomes é dividido em dois conjuntos disjuntos composto de N nomes a ser utilizado para as ruas e avenidas. Por exemplo, considere o caso de N = 2, onde os quatro nomes escolhidos são \"GAUSS\", \"GALOIS\", \"ERDOS\" e \"EULER\". Se são atribuídos os nomes \"GAUSS\" e \"GALOIS\" para as ruas, ao passo que são atribuídos os nomes \"ERDOS\" e \"EULER\" as avenidas, então as abreviaturas seriam \"GAU\" para \"GAUSS\", \"GAL\" para \"Galois\", \"ER\" para \"ERDOS\" e \"EU\" para \"EULER\". Com essa divisão, o número total de letras a serem escritas nas placas seria 20, já que as quatro interseções seriam rotuladas como \"GAU|ER\", \"GAU|UE\", \"GAL|ER\" e \"GAL|UE\". No entanto, no exemplo acima, seria mais conveniente atribuir para as ruas os nomes \"GAUSS\" e \"ERDOS\", deixando \"GALOIS\" e \"EULER\" para as avenidas. Assim, as abreviaturas seriam \"G\" para \"GAUSS\", \"E\" para \"ERDOS\", \"G\" para \"GALOIS\" e \"E\" para \"EULER\", e o número total de letras a serem escritas nas placas seria apenas 8 (pois as intersecções seriam rotuladas como “G|G”, “G|E”, “E|G” e “E|E”). Felizmente, o conjunto de nomes que foi escolhido é tal que nenhum nome nele é um prefixo de algum outro nome no conjunto, garantindo assim que o sistema que você propõe será sempre viável. Você pode calcular o número mínimo de letras a ser escritas nos sinais se você dividir os nomes na forma ideal?",
        "titulo": "Dividindo os Nomes",
        "entrada": "A primeira linha contém um número inteiro N (2 ≤ N ≤ 100) que representa tanto o número de ruas quanto o número de avenidas em Sortonia. Cada uma das próximas 2 × N linhas contém uma string não-vazia de no máximo 18 letras maiúsculas, indicando um dos nomes que foram escolhidos. Você pode assumir que nenhuma das strings dadas é um prefixo de outra string na entrada."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1119",
        "saida": "Para cada conjunto de três números de entrada, imprima uma linha de números especificando a ordem na qual as pessoas são escolhidas. Cada número pode ter até 3 dígitos. Liste o par escolhido partindo da pessoa escolhida pelo contador do sentido horário. Os pares sucessivos são separados por vírgula (mas não deverá haver vírgula após o último escolhido.",
        "descricao": "Em uma séria tentativa de reduzir a fila de desempregados, o novo Partido Nacional Trabalhista dos Rinocerontes Verdes decidiu uma estratégia pública. Todos os dias, todos os candidatos desempregados serão colocados em um grande círculo, voltados para dentro. Alguém é escolhido arbitrariamente como número 1, e os outros são numerados no sentido horário até N (os quais estarão à esquerda do 1°). Partindo do 1° e movendo-se no sentido horário, um contador oficial do laboratório conta k posições e retira um candidato, enquanto outro oficial começa a partir de N e se move no sentido anti-horário, contando m posições e retirando outro candidato. Os dois que são escolhidos são então enviados como estagiários para a reciclagem e se ambos os funcionários escolherem a mesma pessoa, ela (ele) é enviado para se tornar um político. Cada funcionário, em seguida, começa a contar novamente com a pessoa próxima disponível e o processo continua até que não reste ninguém. Note-se que as duas vítimas (desculpe, estagiários) deixam o anel ao mesmo tempo, por isso é possível que um funcionário conte a pessoa já selecionado pelo outro funcionário.",
        "titulo": "A Fila de Desempregados",
        "entrada": "Escreva um programa que leia sucessivamente três números (N, k e m; k, m > 0, 0 < N < 20) e determina a ordem no qual os candidatos são retirados para treinamento . Cada conjunto de três números estará em uma linha distinta e o final da entrada de dados é sinalizado por três zeros (0 0 0)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2077",
        "saida": "Para cada instância imprima uma linha contendo o número mínimo de passageiros que devem ser transportados.",
        "descricao": "Gabriel Garcia Marques é um escritor colombiano autor de histórias fantásticas como \"Cién años de soledade\", \"El amor en los tiempos del cólera\" e \"Memoria de mis putas tristes\". Suas histórias se caracterizam pelo uso do que ficou conhecido como \"realismo mágico\", em que situações reais são explicadas com elementos mágicos. Apesar de seus trabalhos serem considerados muito ricos e até cenográficos, filmes baseados em suas obras não têm merecido sucesso de público ou de crítica. O mais recente exemplo foi a filmagem em 2007 de \"Love in the Time of Cholera\". Uma de suas obras menos conhecidas é \"Los buses de Cartagena\", que descreve a história de uma pequena companhia de ônibus da cidade colombiana que, principalmente devido aos problemas de quebra dos ônibus por excesso de carga, pretendia reduzir o número de passageiros transportados em cada viagem de Cartagena a Medellin para um mesmo número fixo. Ao mesmo tempo, a companhia queria continuar atendendo a todos os pedidos de forma satisfatória. Cada ônibus possui um horário de partida, e cada passageiro dispõe de uma lista de horários nos quais gostaria de viajar. Os passageiros desejam apenas ir para Medellin, ou seja, nenhum passageiro pretende viajar duas vezes no mesmo dia. Sua tarefa é determinar o número mínimo de passageiros que devem ser transportados em cada viagem respeitando a restrição de que todos os passageiros devem ser atendidos.",
        "titulo": "Los buses de Cartagena",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros N e M (1 ≤ N,M ≤ 100). Cada uma das M linhas seguintes possui o horário de partida de um dos ônibus. O horário está no formato hh:mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59 e hh e mm possuem dois dígitos). Cada uma das N linhas seguintes contém a lista de horários em que cada passageiro pode viajar. A lista dos horários está no seguinte formato: um inteiro K (1 ≤ K ≤ M) seguido de K horários, também no formato hh:mm, separados por um espaço em branco."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1167",
        "saida": "Para cada caso de teste, deve-se apresentar a mensagem Vencedor(a): xxxxxx, com um espaço após o sinal \":\" indicando qual é a criança do grupo que venceu a brincadeira.",
        "descricao": "Nas férias de Julho, várias escolas de uma mesma região resolveram se organizar e levaram uma parte de seus alunos para um acampamento de férias por uma semana. Nestes acampamentos os alunos são divididos em chalés coletivos por gênero e idade, sempre com um supervisor ou supervisora que, além de dormirem com o grupo no chalé, também são responsáveis por criar e executar várias atividades interessantes e animadas, para todas as idades. Dentre as diversas atividades podem-se citar jogos, excursões, Gincana Musical, Gincanas Noturnas, etc. No primeiro dia de acampamento, devido à forte chuva, as atividades recreativas ficaram limitadas e as crianças foram levadas para o ginásio de esportes. Foi realizada uma gincana e uma das atividades da mesma consistiu em agrupar as crianças em um círculo (organizado no sentido anti-horário) do qual seriam retiradas uma a uma até que sobrasse apenas uma criança, que seria a vencedora. No momento em que entra no círculo, cada criança recebe uma pequena ficha que contém um valor de 1 a 500. Depois que o círculo é formado, conta-se, iniciando na criança que está ao lado da primeira que entrou no círculo, o número correspondente à ficha que a primeira detém. A criança onde o número contado cair, deve ser retirada do grupo, e a contagem inicia novamente segundo a ficha da criança que acabou de ser eliminada. Para ficar mais interessante, quando o valor que consta na ficha é par, a contagem é feita no sentido horário e quando o valor que consta na ficha é ímpar, a contagem é feita no sentido anti-horário. A brincadeira fez muito sucesso e o administrador do acampamento pediu para que sua equipe desenvolva um programa para que no próximo evento ele saiba previamente qual criança irá ser a vencedora de cada grupo, com base nas informações fornecidas.",
        "titulo": "Acampamento de Férias",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100), indicando a quantidade de crianças que farão parte de cada círculo e participarão da brincadeira. Em seguida, as N linhas de cada caso de teste conterão duas informações, o Nome e o Valor (1 ≤ Valor ≤ 500) que consta na ficha de cada criança, separados por um espaço, na ordem de entrada na formação do círculo inicial. Obs: O Nome de cada criança não deverá ultrapassar 30 caracteres e contém apenas letras maiúsculas e minúsculas, sem acentos, e o caractere “_”. O final da entrada é indicado pelo número zero."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1303",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador \"Instancia h\" em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, deve ser impressa a permutação dos inteiros 1 a n da classiﬁcação do campeonato. Obs: Um espaço em branco deve ser impresso entre cada um desses inteiros e uma linha em branco deve deve ser impressa entre as saídas de dois casos de teste.",
        "descricao": "O San Antonio é o time da cidade na NBA. Já foi algumas vezes campeão de sua conferência e revelou vários excelentes jogadores. Em um campeonato de basquete os times jogam todos entre si em turno único. A vitória vale dois pontos e a derrota vale um ponto (não há empates no basquete). Havendo empates na pontuação do campeonato ﬁca na frente o time com melhor “cesta average” que é dado pela razão entre o número de pontos marcados pelo time dividido pelo número de pontos recebidos (na improvável hipótese de um time vencer todos os jogos do campeonato sem levar cestas seu cesta average é dado pelo número de pontos marcados). Persistindo o empate, leva vantagem quem marcou mais pontos. Ainda havendo empate, o time com menor número de inscrições na liga ﬁca na frente. Sua tarefa neste problema é fazer um programa que recebe os resultados dos jogos de um campeonato e imprime a classiﬁcação ﬁnal.",
        "titulo": "Spurs Rocks",
        "entrada": "São dadas várias instâncias. Para cada instância é dada o número 0 ≤ n ≤ 100 de times no campeonato. O valor n = 0 indica o ﬁm dos dados. A seguir vêm n (n−1) / 2 linhas indicando os resultados das partidas. Em cada linha são dados quatro inteiros x, y, z e w. Os inteiros x e z pertencem ao conjunto {1, 2, . . . , n} e representam os números de inscrição dos times na liga. Os inteiros y e w são, respectivamente, os números de pontos do time x e do time z na partida descrita."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1244",
        "saida": "A saída deve conter o conjunto de strings da entrada ordenado pelo tamanho das strings. Um espaço em branco deve ser impresso entre duas palavras.",
        "descricao": "Crie um programa para ordenar um conjunto de strings pelo seu tamanho. Seu programa deve receber um conjunto de strings e retornar este mesmo conjunto ordenado pelo tamanho das palavras, se o tamanho das strings for igual, deve-se manter a ordem original do conjunto.",
        "titulo": "Ordenação por Tamanho",
        "entrada": "A primeira linha da entrada possui um único inteiro N, que indica o número de casos de teste. Cada caso de teste poderá conter de 1 a 50 strings inclusive, e cada uma das strings poderá conter entre 1 e 50 caracteres inclusive. Os caracteres poderão ser espaços, letras, ou números."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2067",
        "saida": "Para cada consulta, imprima uma linha contendo yes se é possível escolher um quadrado tal que sua pontuação não será igual a zero, ou no caso contrário.",
        "descricao": "O \"jogo do quadrado\" é um jogo muito popular hoje em dia! O jogo é muito simples: é dada um retângulo de N linhas e M colunas contendo números inteiros não negativos. A imagem a seguir mostra um retângulo com 3 linhas e 4 colunas. Também é dado um inteiro S. Você deve escolher algum quadrado com S linhas e S colunas contido inteiramente dentro do retângulo. Sua pontuação é dada pelo produto de todos os inteiros dentro do quadrado que você escolheu. Por exemplo, se S=2 e você escolheu o quadrado mostrado em azul na imagem acima, sua pontuação será igual a 2×3×2×1 = 12. Você percebeu que, dependendo do quadrado que você escolher, sua pontuação pode ser igual a zero. São dados um retângulo e uma lista de consultas. Para cada consulta, é dado um inteiro S e você deve determinar se é possível escolher algum quadrado SxS de tal forma que sua pontuação não será igual a zero.",
        "titulo": "Jogo do Quadrado",
        "entrada": "A primeira linha contém dois inteiros N e M (1 ≤ N, M ≤ 200) indicando o número de linhas e de colunas do retângulo. As próximas N linhas contém M inteiros cada, descrevendo o retângulo. Cada inteiro no retângulo não é maior que 109. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 200) indicando o número de consultas. Cada uma das próximas Q linhas descreve uma consulta. Cada linha contém um inteiro S (1 ≤ S ≤ min(N,M)) indicando o comprimento do lado do quadrado que você deve escolher."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1477",
        "saida": "Para cada operação de contagem, imprima uma linha contendo três inteiros indicando respectivamente o número de símbolos Homem, Elefante e Rato que são usados pelos jogadores no intervalo dado. Imprima também uma linha em branco após cada caso de teste, inclusive após o último caso de teste da entrada.",
        "descricao": "Um jogo muito popular na Nlogônia é o Homem, Elefante e Rato. Ele é tipicamente jogado com apenas dois jogadores, e funciona da seguinte forma: cada jogador secretamente escolhe um dos três símbolos e, após uma contagem regressiva, ambos revelam simultaneamente o símbolo escolhido através de sinais manuais, estendendo à sua frente uma das mãos sinalizando sua escolha. O Homem é representado pela mão fechada, como a cabeça de um homem. O Elefante é representado pela mão aberta, exibindo os cinco dedos, como a pata do elefante nlogonense. Por fim, o Rato é representado pela mão fechada, com o dedo indicador e o dedo médio esticados, como as orelhas do pequeno animal. ​ Figura 1: Os três símbolos do jogo Homem, Elefante e Rato. Para determinar o vencedor é muito simples: o Homem sempre perde para o Elefante (pois é esmagado debaixo de sua pata), o Elefante sempre perde para o Rato (pois tem medo dele e foge correndo) e o Rato sempre perde para o Homem (que espalha ratoeiras para capturá-lo). Se dois jogadores utilizarem o mesmo símbolo, ocorre um empate e joga-se novamente. Os habitantes da Nlogônia, que são estrategistas natos de Homem, Elefante e Rato, utilizam a seguinte técnica no campeonato nacional, realizado todos os anos: começam sempre jogando Homem até o momento em que este símbolo causa empates com a maioria dos oponentes. Eles então trocam sua estratégia para o símbolo que ganha daquele que usavam anteriormente. Assim, os jogadores vão mudar de Homem para Elefante, depois para Rato, depois de volta a Homem. Para auxiliar um famoso competidor estrangeiro de um jogo com uma certa similaridade com este jogo de Homem, Elefante e Rato, você irá desenvolver um programa que contabiliza quantos jogadores irão utilizar cada símbolo. Suponha que todos os N jogadores são dispostos em fila e identificados pela sua posição, de 1 a N. Seu programa deverá processar M comandos, de dois tipos: mudança de símbolo e contar a frequência dos símbolos. Ambos os comandos recebem um intervalo contíguo de jogadores na fila a serem considerados.",
        "titulo": "Homem, Elefante e Rato",
        "entrada": "A entrada é composta por diversos casos de teste. Cada caso de teste começa com uma linha contendo dois inteiros N (1 ≤ N ≤ 105) ​​e M (0 ≤ M ≤ 106) > ​que representam, respectivamente, o número de jogadores no campeonato e o número de operações. As próximas M linhas contêm cada uma a descrição de uma operação. Operações de mudança de estratégia serão representadas por uma linha da forma \"M A B\" onde A (1 ≤ A) e B (A ≤ B ≤ N) são inteiros. Os jogadores cuja estratégias serão alteradas são aqueles cuja posição na fila está entre A e B, inclusive. Operações de contagem serão representadas por uma linha da forma \"C A B\" onde A e B são inteiros representando o intervalo de jogadores que deverão ser considerados na contagem. Levaremos em conta os jogadores cuja posição na fila está entre A e B, inclusive."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1062",
        "saida": "O arquivo de saída contém a quantidade de linhas correspondente às linhas com permutações no arquivo de entrada. Cada linha de saída deve ser Yes se for possível organizar os vagões da forma solicitada e No, caso contrário. Há também uma linha em branco após cada bloco de entrada. No exemplo abaixo,  O primeiro caso de teste tem 3 permutações para 5 vagões. O ultimo zero dos testes de entrada não devem ser processados.",
        "descricao": "Há uma famosa estação de trem na cidade PopPush. Esta cidade fica em um país incrivelmente acidentado e a estação foi criada no último século. Infelizmente os fundos eram extremamente limitados naquela época. Foi possível construir somente uma pista. Além disso, devido a problemas de espaço, foi feita uma pista apenas até a estação (veja figura abaixo).   A tradição local é que todos os comboios que chegam vindo da direção A continuam na direção B com os vagões  reorganizados, de alguma forma. Suponha que o trem que está chegando da direção A tem N <= 1000 vagões numerados sempre em ordem crescente 1,2, ..., N. O primeiro que chega é o 1 e o último que chega é o N. Existe um chefe de reorganizações de trens que quer saber se é possível reorganizar os vagões para que os mesmos saiam na direção B na ordem a1, a2, an.. O  chefe pode utilizar qualquer estratégia para obter a saída desejada. No caso do desenho ilustrado acima, por exemplo, basta o chefe deixar todos os vagões entrarem na estação (do 1 ao 5) e depois retirar um a um: retira o 5, retira o 4, retira o 3, retira o 2 e por último retira o 1.  Desta forma, se o chefe quer saber se a saída 5,4,3,2,1 é possível em B, a resposta seria Yes. Vagão que entra na estação só pode sair para a direção B e é possível incluir quantos forem necessários para retirar o primeiro vagão desejado.",
        "titulo": "Trilhos",
        "entrada": "O arquivo de entrada consiste de um bloco de linhas, cada bloco, com exceção do último, descreve um trem e possivelmente mais do que uma requisição de reorganização. Na primeira linha de cada bloco há um inteiro N que é a quantidade de vagões. Em cada uma das próximas linhas de entrada haverá uma permutação dos valores 1,2, …, N. A última linha de cada bloco contém apenas 0. Um bloco iniciando com zero (0) indica o final da entrada."
    },
    {
        "nivel": "7",
        "assunto": "4",
        "numero": "1112",
        "saida": "Para cada mensagem do tipo \"P\", imprima o valor que responde a pergunta feita. Deixe uma linha em branco após cada caso de teste, inclusive após o último.",
        "descricao": "Conan é um importante membro do Clube Atlético de Desrugenstein, que possui um time de futebol de campo profissional: ele é o responsável pelo gramado do campo onde ocorrem os jogos em casa. Em 2048 anos de história, o campo do CAD sempre esteve em perfeitas condições para os jogos, graças a Conan. Ele já ganhou vários prêmios por isso, sendo o mais importante deles o \"Grama de Ouro\", prêmio que ganhou 1024 vezes. Amanhã acontecerá a final do campeonato Universal de futebol, e o CAD é um dos finalistas. Como o jogo será em casa, Conan foi ver o estado do gramado e reparar se necessário. Chegando lá, entrou em desespero ao ver várias schweisen no campo, estragando todo o gramado!! Sendo assim, Conan precisa de sua ajuda para determinar quanto irá gastar com deswevileutssen para matar todas as schweisen. Cada deswevileutssen mata uma schwisen. Conan pode lhe mandar mensagens de dois tipos: dizendo que encontrou algumas schweisen, ou perguntando quanto ele vai gastar para matar certas schweisen.",
        "titulo": "Schweisen",
        "entrada": "A entrada possui vários casos de teste. A primeira linha de um caso de teste contém 3 inteiros X (≤ 1000), Y (≤ 1000) e P (≤ 10), que representam, respectivamente, o tamanho (X e Y) do campo e o preço de cada deswevileutssen. A próxima linha contém um inteiro Q (≤ 10000). As próximas Q linhas representam mensagens de Conan para você, e estão em uma das duas seguintes formas: - A N X Y - “Achei N (≤ 10) schweisen em (X,Y) - (0 ≤ X < Largura), (0 ≤ Y < Altura)” - P X Y Z W - “Quanto vou gastar para matar todas as schweisen na área retangular de (X,Y) até (Z,W)?” Considere que no início nenhuma schweisen foi vista. A entrada termina quando X, Y e P são iguais a 0."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1851",
        "saida": "Imprima uma linha contendo unicamente o valor mínimo total da multa que Daenerys pagará a Sauron se seguir seus conselhos.",
        "descricao": "Após seu dragão Smaug fracassar na missão de tomar conta de Erebor, Sauron ficou muito aborrecido, e seu Olho começou a procurar por toda parte um treinador de dragões profissional, a fim de que seus demais dragões não falhassem em suas missões. Foi assim que Sauron conheceu Daenerys Targaryen. Impressionado com a reputação dela, Sauron a contratou imediatamente. Sauron envia dragões a Daenerys quase diariamente. Alguns dragões levam mais tempo para serem treinados, outros menos, e ela sempre treina um dragão de cada vez, nunca mais de um no mesmo dia, até que ele esteja pronto para ser retornado a Sauron. Nos dias em que se dedica ao treinamento de um dragão, Daenerys deixa os demais dragões enviados por Sauron hibernando num alojamento até que chegue a vez de cada um deles. Mas o caráter de Sauron, embora de notável perseverança, não é famoso por sua paciência. Para cada dia que um dragão seu passa dormindo no alojamento, Sauron, cujo Olho enxerga tranquilamente tudo o que se passa nos domínios de Daenerys, cobra dela uma multa, que pode variar de dragão para dragão, dependendo dos planos de Sauron para seus dragões. Sauron envia exatamente um dragão por dia, e o dragão sempre chega bem no início do dia, de modo que Daenerys já pode começar a treiná-lo imediatamente. Ainda, se há dragões dormindo no alojamento e nenhum sendo treinado, Sauron envia um Nazgûl para matar Daenerys. Daenerys Targaryen deseja minimizar a multa total a pagar a Sauron e está pedindo sua ajuda. Você já lhe disse que não pode prever o futuro e que o melhor que você pode fazer é: toda vez em que ela não estiver trabalhando com um dragão e quiser escolher um no alojamento para começar a treinar, você pode dizer a ela qual dragão escolher de modo que a escolha seria ótima se nenhum dragão mais viesse nos dias seguintes.",
        "titulo": "Como Treinar Seu Dragão",
        "entrada": "A i-ésima linha da entrada diz respeito ao i-ésimo dragão enviado por Sauron a Daenerys e consiste de dois inteiros: Ti e Fi (1 ≤ Ti, Fi ≤ 103), representando respectivamente o número de dias necessários para treinar o i-ésimo dragão e a multa cobrada por dia que o dragão passa dormindo. Para quaisquer i e j distintos, Ti / Fi ≠ Tj / Fj. A entrada possui no máximo 105 linhas e termina em fim de arquivo."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2122",
        "saida": "Para cada instância da entrada seu programa deverá imprimir, em uma única linha, a lista de candidatos eleitos ordenada pela classificação dos candidatos na eleição. No caso de dois candidatos possuírem a mesma classificação, o de menor índice vem antes. A saída deve ser escrita na saída padrão.",
        "descricao": "Ecaterimburgo, Rússia, é uma cidade com um curioso sistema de votação. Em uma eleição em que haja V vagas para um cargo, cada eleitor tem direito a fazer V votos, ordenados em sua ordem de preferência. Assim, se, por exemplo, há 3 vagas de senador, cada eleitor vota em até 3 nomes. Serão eleitos os candidatos que tiverem o maior número de votos, sem importar em que posição da preferência do eleitor está o candidato. Apenas quando há empate no número de votos se torna relevante a ordem dada pelos eleitores. Ganha aquele candidato que tiver mais indicações em primeiro lugar. Se persistir o empate, em segundo lugar, e assim por diante. Caso dois ou mais candidatos que estejam em posição de serem eleitos tenham exatamente o mesmo número de indicações em todas as posições, todos são eleitos (podendo inclusive exceder o número de vagas). Candidatos com zero votos podem ser eleitos se ainda existir vagas disponíveis.",
        "titulo": "Votação em Ecaterimburgo",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância começa com o número N (1 ≤ N ≤ 105) de eleitores, o número K de candidatos e V (1 ≤ V ≤ K ≤ 100) de vagas. A seguir vêm N linhas com os votos de cada um dos eleitores. Em seu voto, o eleitor i indicará o número Li (1 ≤ Li ≤ 100) de candidatos em quem votará, e os índices destes candidatos na sua ordem de preferência. Índices de candidatos fora do intervalo [1, K] significam votos em branco apenas para a opção de preferência correspondente. Se indicar mais que V votos, os últimos serão desconsiderados. Um eleitor nunca indica o mesmo candidato mais de uma vez. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1527",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de batalhas em que a guilda em que Rafael está participando ganhou uma batalha. Note que empates não são considerados vitórias.",
        "descricao": "Rafael está jogando um novo e excitante jogo de RPG, e acaba de notar a existência de algo chamado Guilda. Para aqueles que não sabem, Guilda se trata de um grupo de jogadores que se unem com um objetivo em comum dentro do jogo, tirando assim vantagem do trabalho em equipe. O jogo que Rafael joga tem um sistema de GVG (Guilda versus Guilda) bem disputado, e logo percebeu que deveria tomar algumas providencias para se sair bem nessas batalhas. O sistema de GVG funciona da seguinte maneira: a batalha acontece entre duas guildas, e vence a guilda que tiver o maior número de pontos. O número de pontos de uma guilda é dado pela soma do número de pontos de todos os jogadores presentes na guilda. Cada jogador tem um número de pontos, que corresponde ao seu nível atual. Considere que inicialmente, todos os jogadores fazem parte de uma guilda, contendo apenas o próprio jogador. A união entre duas guildas faz com que todos os jogadores de ambas as guildas passem a participar apenas de uma guilda, e a outra deixa de existir. Dada uma lista de ações no decorrer do jogo, entre elas união entre duas guildas e batalhas entre duas guildas, diga o número de vezes em que a guilda em que Rafael estava saiu vitoriosa de uma batalha.",
        "titulo": "Guildas",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (1 ≤ N ≤ 10⁵, 1 ≤ M ≤ 5 * 10⁵), representando o número de jogadores dentro do jogo, e o número de ações no decorrer do jogo, respectivamente. Em seguida haverá N inteiros Pi (1 ≤ Pi ≤ 100), onde o i-ésimo inteiro representa o número de pontos que o i-ésimo jogador tem, para todo 1 ≤ i ≤ N. Rafael é o jogador número 1, sempre. Em seguida, haverá M linhas, contendo três inteiros cada, Q, A e B (1 ≤ Q ≤ 2, 1 ≤ A, B ≤ N), representando o tipo da ação, e as duas guildas envolvidas na ação. Se Q for igual a 1, significa que a guilda que contém o jogador A e a guilda que contém o jogador B estão se unindo. Se Q for igual a 2, significa que a guilda que contém o jogador A e a guilda que contém o jogador B participarão de uma batalha. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2091",
        "saida": "Para cada caso de teste imprima apenas o número que ficou sozinho. É garantido que apenas um número está sozinho.",
        "descricao": "Será dado a você um vetor com N números, onde todos estarão em pares. Porém um desses números acabou ficando sem par, você consegue identificar qual é esse número ? Por exemplo, A = {1, 1, 3, 3, 5, 5, 5}, o número que ficou sozinho foi o 5.",
        "titulo": "Número Solitário",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha contendo um inteiro N (1 ≤ N < 10^5), seguida por N números (0 ≤ A ≤ 10^12). A entrada termina quando N = 0 e não deve ser processada."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1110",
        "saida": "Para cada caso de teste, imprima duas linhas. A primeira linha apresenta a sequência de cartas descartadas, cada uma delas separadas por uma vírgula e um espaço. A segunda linha apresenta o número da carta que restou. Nenhuma linha tem espaços extras no início ou no final. Veja exemplo para conferir o formato esperado.",
        "descricao": "Dada uma pilha de n cartas enumeradas de 1 até n com a carta 1 no topo e a carta n na base.  A seguinte operação é ralizada enquanto tiver 2 ou mais cartas na pilha. Jogue fora a carta do topo e mova a próxima carta (a que ficou no topo) para a base da pilha. Sua tarefa é encontrar a sequência de cartas descartadas e a última carta remanescente. Cada linha de entrada (com exceção da última) contém um número n ≤ 50. A última linha contém 0 e não deve ser processada. Cada número de entrada produz duas linhas de saída. A primeira linha apresenta a sequência de cartas descartadas e a segunda linha apresenta a carta remanescente.",
        "titulo": "Jogando Cartas Fora",
        "entrada": "A entrada consiste em um número indeterminado de linhas contendo cada uma um valor de 1 até 50. A última linha contém o valor 0."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1861",
        "saida": "A primeira linha da saída deve consistir da frase “HALL OF MURDERERS”, sem as aspas. Cada uma das linhas seguintes deve conter um nome de um assassino seguido do número de pessoas que ele matou. A lista de assassinos deve obedecer a ordem lexicográfica. Se um assassino também acabou sendo assassinado, ele não deve figurar na lista.",
        "descricao": "Quem matou Meryn Trant? Quem matou Syrio Forel, se é que ele de fato morreu? Quem matou Stannis Baratheon? Quem matou Myrcella Baratheon? Quem matou Aerys II Targaryen? Quem vai matar (alerta de spoiler!) Jaime Lannister? Para algumas destas perguntas já sabíamos a resposta. Para outras, tínhamos apenas especulações. No entanto, recebemos de um correspondente anônimo uma lista descrevendo vários assassinatos, que já aconteceram ou que estão para acontecer, revelando tanto o nome dos assassinos quanto dos assassinados. Mas os assassinatos não estão em ordem lexicográfica, nem mesmo em ordem cronológica, e fica difícil contar quantas pessoas cada assassino matou. Você pode nos ajudar?",
        "titulo": "O Hall dos Assassinos",
        "entrada": "Cada linha da entrada descreve um assassinato informando o nome do assassino seguido pelo nome do assassinado. Cada nome é composto por no mínimo um e no máximo 10 caracteres, sendo o primeiro sempre uma letra maiúscula e os demais sempre letras minúsculas. A entrada consiste de no mínimo uma e no máximo 105 linhas e é encerrada em fim de arquivo."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1215",
        "saida": "Você deve imprimir uma lista de diferentes palavras que aparecem no texto, uma palavra por linha. Todas as palavras devem ser impressas com letras minúsculas, em ordem alfabética. Deverá haver no máximo 5000 palavras distintas.",
        "descricao": "Andy de apenas 8 anos tem um sonho - ele deseja criar o seu próprio dicionário. Isto não é uma tarefa fácil para ele, pois conhece poucas palavras. Bem, ao invés de pensar nas palavras que sabe, ele teve uma idéia brilhante. A partir do seu livro de histórias favorito, ele vai criar um dicionário com todas as palavras distintas que existem nele. Ordenando estas palavras em ordem alfabética, o trabalho estará feito. É claro, isso é uma tarefa que toma um certo tempo e portanto, a ajuda de um programador de computador como você é muito bemvinda. Você foi convidado a escrever um programa que liste todas as diferentes palavras que existem em um texto. Neste caso, uma palavra é definida como uma sequência de letras, maiúsculas ou minúsculas. Palavras com apenas uma letra também deverão ser consideradas. Portanto, seu programa deverá ser \"CaSe InSeNsItIvE\". Por exemplo, palavras como \"Apple\", \"apple\" ou \"APPLE\" deverão ser consideradas como a mesma palavra.",
        "titulo": "Primeiro Dicionário de Andy",
        "entrada": "A entrada contém no máximo 10000 linhas de texto, cada uma delas com no máximo 200 caracteres. O fim de entrada é determinado pelo EOF."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1251",
        "saida": "Imprima o valor ASCII de todos os caracteres presentes e a sua frequência de acordo com o formato abaixo. Uma linha em branco deverá separar 2 conjuntos de saída. Imprima os caracteres ASCII em ordem ascendente de frequência. Se dois caracteres estiverem presentes com a mesma quantidade de frequência, imprima primeiro o caracter que tem valor ASCII maior. A entrada é terminada por final de arquivo (EOF).",
        "descricao": "Dada uma linha de texto, você deve encontrar as frequências de cada um dos caracteres presentes nela. As linhas fornecidas não conterão nenhum dos primeiros 32 ou dos últimos 128 caracteres da tabela ASCII. É claro que não estamos levando em conta o caracter de fim de linha.",
        "titulo": "Diga-me a Frequência",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por uma única linha de texto com até 1000 caracteres."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1401",
        "saida": "Para cada string da entrada, imprima todas as permutações possíveis da string, em ordem lexicográfica crescente. Note que as strings devem ser tratas como Case Sensitive (isto é, letras maiúsculas são diferentes das minúsculas). Além disso, nenhuma permutação deve ser impressa mais de uma vez. Uma linha em branco deve ser impressa após cada lista de permutações.",
        "descricao": "Gerar permutações sempre foi um problema importante na ciência da computação. Neste problema, você terá de gerar todas as permutações de uma dada string, em ordem lexicográfica crescente. Lembre-se que seu algoritmo deve ser eficiente.",
        "titulo": "Gerando Permutações Ordenadas Rapidamente",
        "entrada": "A primeira linha da entrada contém um inteiro n, indicando o número de strings que seguem. As próximas n linhas contém uma string cada. Cada string conterá apenas caracteres alfanuméricos, e nunca conterá espaços. O tamanho máximo de uma string é 10."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1863",
        "saida": "Imprima uma linha contendo o número máximo de soldados que podem ser mortos.",
        "descricao": "Ramsay: \"Não preciso de um exército. Preciso de 20 homens bons.\" Os Boltons conquistaram o castelo de Winterfell e agora precisam protegê-lo da invasão do \"Rei\" Stannis. Os N soldados de Stannis estão posicionados entre Castle Black, que fica a nordeste de Winterfell, e Winterfell. Para cada soldado i (1 ≤ i ≤ N), os Boltons sabem sua posição (x[i], y[i]) no mapa. Ramsay Bolton decidiu contra-atacar antes que a invasão ocorra, enviando seus homens para matar alguns dos soldados de Stannis. Ramsay quer que eles morram um de cada vez, em uma ordem tal que seus homens precisem viajar apenas para o norte e para o leste, e tal que todo soldado deve ser mais forte que os que morreram antes dele (isto é loucura, mas Ramsay é mesmo louco). Em outras palavras, Ramsay quer encontrar uma sequência de soldados (s1, s2, ..., sK) tal que, para todo 1 < i ≤ K: x[si] > x[si-1]; y[si] > y[si-1]; e si é mais forte que si-1 Um espião forneceu a Ramsay uma lista de M pares ordenados de soldados na forma (i, j), indicando que o soldado i é mais forte que o soldado j. Note que esta relação é transitiva, isto é, se i é mais forte que j e j é mais forte que k, então i é mais forte que k, mesmo que o par (i, k) não apareça na lista. Além disso, para qualquer par de soldados i e j, se não é possível concluir que um soldado é mais forte que o outro através da lista, então i não é considerado mais forte que j, e nem j é considerado mais forte que i. Por fim, a lista é dada de tal forma que, para todo soldado i, existe no máximo um soldado j tal que (i, j) está na lista. Sua tarefa é determinar o número máximo de soldados que podem ser mortos pelos homens de Ramsay.",
        "titulo": "O Contra-ataque de Ramsay",
        "entrada": "A primeira linha contém dois inteiros N e M (0 ≤ M < N ≤ 5×104). As próximas N linhas fornecem as posições dos soldados. A i-ésima linha contém dois inteiros x[i] e y[i] (-400 ≤ x[i], y[i] ≤ 400). Não há dois soldados na mesma posição. As próximas M linhas contém dois inteiros i e j cada (1 ≤ i, j ≤ N, i ≠ j), descrevendo a lista fornecida pelo espião."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1766",
        "saida": "Para cada caso de teste você deverá exibir a mensagem \"CENARIO {i}\", onde i indica o caso de teste atual, seguido da posição e o nome de cada umas das M renas que irão puxar o trenó, ordenadas conforme descrito acima.",
        "descricao": "O estábulo onde ficam as renas foi intencionalmente aberto pelo Elfo das Trevas permitindo que cada uma delas corresse e voasse livremente pela fábrica do Papai Noel, causando o maior transtorno. Os elfos estão tentando desesperadamente fazer o possível para deixar o trenó pronto para embarque. Você ficou responsável por colocar cada rena na sua posição correta assim que ela é capturada por um dos outros elfos. Você sabe que o estábulo segue uma organização baseada na ordem que as renas irão ocupar no trenó. Desta forma, na hora da partida todas podem ser facilmente posicionadas. Diferentemente do que muitos pensam, as renas são posicionadas em uma fila única à frente no trenó. Nem todas as renas do estábulo são utilizadas em cada viagem, isto depende da carga total do trenó. Você conseguiu a lista com as características que são utilizadas para determinar a ordem de rena. Elas devem ser ordenadas primeiramente de forma decrescente por peso. Caso duas ou mais apresentarem o mesmo peso elas devem ser ordenadas de forma ascendente pela idade, após pela altura e caso ainda persista empate, pelo nome. Utilizando seu computador mágico de última geração você quer escrever um programa que ordene as renas, de acordo com as características informadas, e exiba somente o número exato de renas que serão utilizadas no trenó (de forma ordenada).",
        "titulo": "O Elfo das Trevas",
        "entrada": "Este problema possui diversos casos de teste. A primeira linha de entrada contém um inteiro T (1 ≤ T ≤ 105) que indica o número de casos de teste a seguir. A primeira linha de cada caso de teste contém dois inteiros N e M (5 ≤ N, M ≤ 103) que indicam respectivamente o número total de renas e o número de renas que irão puxar o trenó. Na sequência serão informados uma string S seguida por 2 inteiros P (1 ≤ P ≤ 300) e I (1 ≤ I ≤ 300) e por um número de ponto flutuante A (0.00 ≤ A ≤ 3.00), indicando respectivamente o nome, o peso, a idade e a altura de cada uma das renas. O nome de cada uma das renas é composto somente por uma palavra com até 100 caracteres."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2075",
        "saida": "Para cada instância imprima uma linha contendo a K-ésima escultura mal-formada de comprimento N . Caso não exista uma tal escultura imprima uma linha contendo −1.",
        "descricao": "Zé Coquinho é um artesão que produz esculturas feitas com cocos. Os cocos secos são cortados ao meio e as cuias formadas pelas cascas são pintadas e utilizadas para construir as esculturas. As esculturas são muito famosas, sendo procuradas por colecionadores de todo o mundo. Figura 1: A mais famosa escultura de coco feita por Zé Coquinho. As esculturas de Zé Coquinho são sequências de cuias coladas umas nas outras. Uma escultura bem-formada é definida pelo seguinte conjunto de regras: Uma sequência vazia de cuias é uma escultura bem-formada. Se T é um escultura bem-formada, então uma escultura formada por (T) (ou seja, uma cuia aberta para a direita, seguida de T , seguida de uma cuia aberta para a esquerda) é uma escultura bem-formada; Se T e S são esculturas bem-formadas, então ST (ou seja, a escultura S seguida de T) é uma escultura bem-formada. Note que todas as esculturas bem-formadas são construídas usando apenas as regras descritas acima. Seja T uma escultura formada por cuias de coco. Se T não é uma escultura bem-formada, dizemos que T é uma escultura mal-formada. Uma característica marcante das esculturas de Zé Coquinho é que elas nunca são bem-formadas; todas as esculturas que ele fez na sua longa vida são mal-formadas. O Museu de Arte Moderna de Graviúna quer fazer uma exposição de esculturas de Zé Coquinho. Para organizar a exposição, o museu resolveu ordenar as esculturas em ordem lexicográfica. Na ordem lexicográfica definida pelo museu o símbolo ( vem antes do símbolo ). Por exemplo, ((( < (() e )( < )). O comprimento de uma escultura mal-formada é o número de cuias que a mesma possui. Dados dois inteiros N e K, você deve determinar a K-ésima escultura mal-formada de comprimento N considerando a ordem definida pelo museu. Considere que Zé Coquinho fez todas as esculturas mal-formadas de comprimento N.",
        "titulo": "Zé Coquinho",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém dois inteiros N e K, onde 1 ≤ N ≤ 50 e 1 ≤ K ≤ 2n − 1, indicando respectivamente o comprimento da escultura e o índice da escultura (na ordem lexicográfica) que você deve determinar."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1252",
        "saida": "A primeira linha de cada conjunto de saída irá contér os valores de N e M. As próximas N linhas irão contér N números, ordenados de acordo com as regras acima mencionadas. Imprima os dois últimos zeros da entrada para a saída padrão.",
        "descricao": "Hmm! Aqui você foi solicitado a fazer uma simples ordenação. A você serão dado N números e um inteiro positivo M. Você terá que ordenar estes N números em ordem ascendente de seu módulo M. Se houver um empate entre um número ímpar e um número par (para os quais o seu módulo M dá o mesmo valor) então o número impar irá preceder o número par. Se houver um empate entre dois números ímpares (para os quais o seu módulo M dá o mesmo valor), então o maior número ímpar irá preceder o menor número ímpar. Se houve um empate entre dois números pares (para os quais o seu módulo M dá o mesmo valor), então o menor número par irá preceder o maior número par. Para o resto de valores negativos siga a regra de linguagem de programação C: um número negativo nunca pode ter módulo maior do que zero. Por exemplo, -100 MOD 3 = -1, -100 MOD 4 = 0, etc.",
        "titulo": "Sort! Sort!! e Sort!!!",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com dois inteiros  N (0 < N ≤ 10000) e M (0 < M ≤ 10000) que denotam quantos números existirão neste conjunto. Cada uma das próximas N linhas conterá um número cada. Estes números deverão caber em um inteiro de 32 bits com sinal. A entrada é terminada por uma linha que conterá dois valores nulos (0) e não deve ser processada."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1063",
        "saida": "O arquivo de saída contém a quantidade de linhas correspondente ao número de casos de teste de entrada. Cada linha de saída contém uma sequência de I e R conforme o exemplo. Se não for possível mostrar a saída, as operações devem ser interrompidas e a mensagem \"Impossible\" deve ser impressa, com um espaço após a sequência.",
        "descricao": "Você lembra daquela estação de trem da cidade PopPush? Apenas para relembrar, existe uma estação de trem em um país incrivelmente acidentado. Além disso, a estação foi construída no século passado e infelizmente os fundos eram muito limitados. Em um determinado trecho foi possível construir apenas uma pista e, a solução encontrada para transportar as cargas nos dois sentidos foi construir uma estação que permitisse desconectar os vagões de uma locomotiva e conectar em outra, que iria em outro sentido. Cada trem que chega na direção A é manobrado e seus vagões continuam na direção B, reorganizados conforme o chefe da estação deseja. Ao chegar pelo lado A, cada vagão é desconectado e vai até a estação e depois segue para a direção B, para ser conectado na segunda locomotiva. Você pode desconectar quantos trens deseja na estação, mas o vagão que entra na estação só pode sair pelo lado B e uma vez que ele sai, não pode mais entrar novamente. Todos vagões são identificados pelas letras minúsculas (a até z). Isto significa 26 vagões no máximo. O chefe da organização dos vagões precisa agora que você ajude a resolver para ele, através de um programa, qual a sequência de movimentos é necessária para obter a saída desejada após a entrada na estação, seguindo para a direção B. O movimento de entrada e saída da estação é descrito respectivamente pelas letras I e R (Insere e Remove). Utilizando a figura dada como exemplo, a entrada e,t,d,a para uma saída desejada d,a,t,e, resulta nos movimentos I,I,I,R,I,R,R,R",
        "titulo": "Trilhos Novamente... Traçando Movimentos",
        "entrada": "A entrada consiste em vários casos de teste, onde cada caso de teste é composto por 3 linhas. A primeira das 3 linhas contém um número inteiro N que representa o número total de vagões. A segunda linha contém a sequência dos vagões que vêm do lado A e a Terceira linha contém a sequência que o chefe de organização deseja como saída para o lado B. A última linha de entrada contém apenas 0, indicando o fim da entrada."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1911",
        "saida": "Para cada caso, exiba uma única linha, a quantidade de assinaturas falsas encontradas.",
        "descricao": "Minutos antes do término das aulas, professor Girafales passa uma lista de presença. Certo dia, ele resolveu conferir as assinaturas e notou que alguns alunos assinavam diferente em algumas aulas e desconfiou que alguém poderia estar assinando por eles. Como o professor possui muitos alunos e pouco tempo (o café com dona Florinda é prioridade), ele pediu sua ajuda para validar as assinaturas. Uma assinatura é considerada falsa se houver mais de uma diferença entre a original e a que estiver sendo checada. Considere diferença uma troca de maiúscula para minúscula ou o contrário.",
        "titulo": "Ajude Girafales",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com um inteiros N (1 ≤ N ≤ 50) representando a quantidade de alunos de sua turma. As próximas N linhas serão da seguinte forma:                                                         Nome do aluno   Assinatura Original A seguir haverá um inteiro M (0 ≤ M ≤ N), representando a quantidade de alunos que compareceram a uma aula. M linhas seguem, no seguinte formato:                                                         Nome do aluno   Assinatura na aula Todos os alunos possuem apenas o primeiro nome na lista, nenhum nome se repete e todos os nomes contêm no máximo 20 letras (a-z A-Z). A entrada termina com N = 0, a qual não deve ser processada."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1258",
        "saida": "Para cada caso de entrada deverão ser impressas as informações ordenadas pela cor dos detalhes em ordem ascendente, seguido pelos tamanhos em ordem descendente e por último por ordem ascendente de nome, conforme o exemplo abaixo. Obs.: Deverá ser impressa uma linha em branco entre dois casos de teste.",
        "descricao": "O professor Rolien organizou junto às suas turmas de Ciência da Computação a confecção de uma camiseta polo que fosse ao mesmo tempo bonita e barata. Após algumas conversas, ficou decidido com os alunos que seriam feitas somente camisetas da cor preta, o que facilitaria a confecção. Os alunos poderiam escolher entre o logo do curso e os detalhes em branco ou vermelho. Assim sendo, Rolien precisa de sua ajuda para organizar as listas de quem quer a camiseta em cada uma das turmas, relacionando estas camisetas pela cor do logo do curso, tamanho (P, M ou G) e por último pelo nome.",
        "titulo": "Camisetas",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com um valor N, (1 ≤ N ≤ 60) inteiro e positivo, que indica a quantidade de camisetas a serem feitas para aquela turma. As próximas N*2 linhas contém informações de cada uma das camisetas (serão duas linhas de informação para cada camiseta). A primeira linha irá conter o nome do estudante e a segunda linha irá conter a cor do logo da camiseta (\"branco\" ou \"vermelho\") seguido por um espaço e pelo tamanho da camiseta \"P\" \"M\" ou \"G\". A entrada termina quando o valor de N for igual a zero (0) e esta valor não deverá ser processado."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1451",
        "saida": "Para cada caso, imprimir o texto Beiju na tela.",
        "descricao": "Você está digitando um texto longo com um teclado quebrado. Bem, não tão quebrado. O único problema com o teclado é que às vezes a tecla \"home\" ou a tecla \"end\" é automaticamente pressionada (internamente). Você não está ciente deste problema, já que você está focado no texto e nem sequer ligou o monitor! Depois que você terminar de digitar, você pode ver um texto na tela (se você ligar o monitor). Em chinês, podemos chamar este texto de Beiju. Sua tarefa é encontrar o texto Beiju.",
        "titulo": "Teclado Quebrado",
        "entrada": "Há diversos casos de teste. Cada teste é uma única linha que contém pelo menos uma e, no máximo, 100.000 letras, underscores e dois caracteres especiais '[' e ']'. '[' Significa que a tecla \"Home\" é pressionada internamente, e ']' significa que a tecla \"End\" é pressionada internamente. A entrada é terminada por fim de arquivo (EOF). O tamanho do arquivo de entrada não excede 5MB."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2110",
        "saida": "Para cada caso de teste imprima uma linha contendo o tempo, em minutos, de luz solar que o jardim receberá no dia escolhido, arredondado para 2 casas decimais.",
        "descricao": "Uma empresa quer demolir um prédio para construir um jardim em uma das principais avenidas de Ecaterimburgo, mas antes quer fazer um estudo: descobrir o tempo de luz de sol que esse jardim receberia por dia, considerando que ela irá demolir o prédio escolhido e construir o jardim no lugar. Isso é importante, pois banho de sol é uma atividade muito popular entre os habitantes da cidade durante o verão. O jardim recebe luz do sol se pelo menos um pedaço dele estiver recebendo raios solares. Para facilitar as coisas, a construtora escolheu um dia do ano para fazer as medições. Nesse dia o sol nasce às 5:30 e se põe às 21:30 (no verão russo os dias são longos). Considere que o sol tem velocidade angular constante no céu e que ele nasce no leste e se põe no oeste. Todos os prédios são alinhados na direção leste-oeste, têm a mesma largura e o espaçamento entre eles é constante, o jardim terá largura igual à dos prédios.",
        "titulo": "Banho de Sol no Jardim",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de 2 linhas. A primeira linha contém 3 inteiros N (2 ≤ N ≤ 100), L, D (1 ≤ L, D ≤ 100), o número de prédios, a largura de cada um deles, e o espaçamentos entre eles, respectivamente. A segunda linha contém N inteiros hi (0 ≤ hi ≤ 50), as alturas dos prédios. Uma altura de 0 indica que o jardim será construído nessa posição e aparecerá exatamente uma vez. Todas as medidas são em metros."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2074",
        "saida": "Para cada instância imprima uma linha contendo o número de planejamentos diferentes.",
        "descricao": "Nefertiti foi rainha do Egito, esposa de Akhenaton, e é tida como uma das mais belas mulheres da história do mundo. A vida familiar da rainha do Egito obrigava-a a cuidar de diversas coisas, inclusive do cardápio da corte. Akhenaton era conhecido por detestar que a comida se repetisse com frequência, e mesmo em intervalos regulares. Ele desejava que os cardápios não apenas fossem diferentes, como fosse praticamente impossível descobrir quando um prato se repetiria. Isso criou um enorme problema para os cozinheiros do rei, Nefertiti teve, então, uma ideia. Elaborou uma lista de N pratos, que seriam repetidos. Uma exigência dela era que a diferença entre o prato preparado no i-ésimo dia e i fosse, em módulo, menor que um certo K dado. Tal exigência, além de ser por motivos religiosos, em virtude de obrigações dos egípcios a Ra, se devia também ao fato de que os ingredientes do prato eram conseguidos neste intervalo, e também estavam sujeitos a perder a validade para o consumo. Sua tarefa neste programa é determinar, dado um inteiro N (número de diferentes pratos) e um inteiro K, quantos diferentes planejamentos podemos fazer (que são, na verdade, permutações π de {1, 2,...,n}) que satisfazem a restrição abaixo: |π(i) - i| ≤ K, para i = 1,...,N.",
        "titulo": "Variados Pratos da Linda Nefertiti",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém dois inteiros N e K, onde 1 ≤ N ≤ 100 e 1 ≤ K ≤ 6."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1763",
        "saida": "O seu aplicativo deverá mostrar na tela a frase no idioma correto. Caso ela não esteja cadastrada, você deverá exibir a mensagem \"--- NOT FOUND ---\" para que depois dos testes você possa completar o banco de dados.",
        "descricao": "Nicolau já está bastante cansado e sua memória não é mais a mesma. Você, como navegador, deverá auxiliar o Papai Noel a gritar a frase \"Feliz Natal\" no idioma correto de cada país de que trenó está sobrevoando. Como você é um elfo muito esperto, você já criou um pequeno app no seu celular (sim, elfos tem celular) que irá lhe informar a frase no idioma correto dado o nome do país. Como o trenó é moderno (foi atualizado no ano 2000) ele exibe no painel de navegação o nome do país atual. Os dados inseridos no seu app foram: brasil Feliz Natal! alemanha Frohliche Weihnachten! austria Frohe Weihnacht! coreia Chuk Sung Tan! espanha Feliz Navidad! grecia Kala Christougena! estados-unidos Merry Christmas! inglaterra Merry Christmas! australia Merry Christmas! portugal Feliz Natal! suecia God Jul! turquia Mutlu Noeller argentina Feliz Navidad! chile Feliz Navidad! mexico Feliz Navidad! antardida Merry Christmas! canada Merry Christmas! irlanda Nollaig Shona Dhuit! belgica Zalig Kerstfeest! italia Buon Natale! libia Buon Natale! siria Milad Mubarak! marrocos Milad Mubarak! japao Merii Kurisumasu! Para não correr o risco de infomar o nome errado você decidiu testar o aplicativo mais algumas vezes.",
        "titulo": "Tradutor do Papai Noel",
        "entrada": "Você irá testar o seu aplicativo com diversos nomes de paises, simulando os dados informados pelo painel de navegação do trenó."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1709",
        "saida": "Seu programa deve produzir uma única linha contendo um único inteiro, o número mínimo de vezes que o processo de embaralhamento deve ser repetido para que o baralho fique novamente ordenado.",
        "descricao": "Um baralho contém um número par 2n de cartas a1, a2,..., a2n, todas distintas (a1 < a2 ... < a2n). O baralho encontra-se perfeitamente ordenado, ou seja, a primeira carta é a1, a segunda carta é a2, e assim por diante, até a última carta, que é a2n. Um croupier então executa repetidamente um procedimento de embaralhar, que consiste de dois passos: O baralho é divido ao meio; As cartas das duas metades são então intercaladas, de maneira que se a sequência de cartas do baralho no início do passo 1 é x1, x2, ..., x2n, então ao final do passo 2 a sequência de cartas se torna xn+1, x1, xn+2, x2,..., x2n, xn. Dado o número de cartas do baralho, escreva um programa que determine quantas vezes o procedimento de embaralhar descrito acima deve ser re petido de forma que o baralho volte a ficar ordenado.",
        "titulo": "Baralho Embaralhado",
        "entrada": "A única linha da entrada contém um inteiro par P (2 ≤ P ≤ 2 x 105 ), indicando o número de cartas do baralho (note que o valor P corresponde ao valor 2n na descrição acima)."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1242",
        "saida": "Para cada instância imprima uma linha contendo o número total de ligações que ocorre quando a fita descrita é ativada.",
        "descricao": "Foi descoberta uma espécie alienígena de ácido ribonucleico (popularmente conhecido como RNA). Os cientistas, por falta de criatividade, batizaram a descoberta de ácido ribonucleico alienígena (RNAA). Similar ao RNA que conhecemos, o RNAA é uma fita composta de várias bases. As bases são B C F S e podem ligar-se em pares. Os únicos pares possíveis são entre as bases B e S e as bases C e F. Enquanto está ativo, o RNAA dobra vários intervalos da fita sobre si mesma, realizando ligações entre suas bases. Os cientistas perceberam que: - Quando um intervalo da fita de RNAA se dobra, todas as bases neste intervalo se ligam com suas bases correspondentes; - Cada base pode se ligar a apenas uma outra base; - As dobras ocorrem de forma a maximizar o número de ligações feitas sobre fitas; As figuras abaixo ilustram dobras e ligacões feitas sobre fitas. Sua tarefa será, dada a descrição de uma tira de RNAA, determinar quantas ligações serão realizadas entre suas bases se a tira ficar ativa.",
        "titulo": "Ácido Ribonucleico Alienígena",
        "entrada": "A entrada é composta por diversos casos de teste e termina com EOF. Cada caso de teste possui uma linha descrevendo a sequência de bases da fita de RNAA. Uma fita de RNAA na entrada contém pelo menos 1 e no máximo 300 bases. Não existem espaços entre bases de uma fita da entrada. As bases são 'B', 'C', 'F' e 'S'."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1256",
        "saida": "A saída deverá ser impressa conforme os exemplos fornecidos abaixo, onde a quantidade de linhas de cada caso de teste é determinada pelo valor de M. Uma linha em branco deverá separar dois conjuntos de saída.",
        "descricao": "As tabelas Hash, também conhecidas como tabelas de dispersão, armazenam elementos com base no valor absoluto de suas chaves e em técnicas de tratamento de colisões. Para o cálculo do endereço onde deve ser armazenada uma determinada chave, utiliza-se uma função denominada função de dispersão, que transforma a chave em um dos endereços disponíveis na tabela. Suponha que uma aplicação utilize uma tabela de dispersão com 13 endereços-base (índices de 0 a 12) e empregue a função de dispersão h(x) = x mod 13, em que x representa a chave do elemento cujo endereço-base deve ser calculado. Se a chave x for igual a 49, a função de dispersão retornará o valor 10, indicando o local onde esta chave deverá ser armazenada. Se a mesma aplicação considerar a inserção da chave 88, o cálculo retornará o mesmo valor 10, ocorrendo neste caso uma colisão. O Tratamento de colisões serve para resolver os conflitos nos casos onde mais de uma chave é mapeada para um mesmo endereço-base da tabela. Este tratamento pode considerar, ou o recálculo do endereço da chave ou o encadeamento externo ou exterior. O professor gostaria então que você o auxiliasse com um programa que calcula o endereço para inserções de diversas chaves em algumas tabelas, com funções de dispersão e tratamento de colisão por encadeamento exterior.",
        "titulo": "Tabelas Hash",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N indicando a quantidade de casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha contém um valor M (1 ≤ M ≤ 100) que indica a quantidade de endereços-base na tabela (normalmente um número primo) seguido por um espaço e um valor C (1 ≤ C ≤ 200) que indica a quantidade de chaves a serem armazenadas. A segunda linha contém cada uma das chaves (com valor entre 1 e 200), separadas por um espaço em branco."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1725",
        "saida": "Primeiro, imprima o inteiro N (8 ≤ N ≤ 512) em uma única linha. Então, imprima uma string de letras B, W e Q que corretamente codificam a figura com o esquema quadtree. Finalmente, acabe a string com um caractere de nova linha.",
        "descricao": "Quando percebeu que o mapa do tesouro codificado em quadtree era uma falsificação, Florida Jones fez um plano maligno para pregar uma peça no próximo caçador de tesouros que viesse atrás do tesouro. Mas para isso, ele precisa da sua ajuda novamente. Você pode escrever um programa que use uma figura no formato XBM e codifica-la no esquema quadtree?",
        "titulo": "Quadtree II",
        "entrada": "A primeira linha será “#define quadtree_width N”, onde N é o tamanho da figura em pixels. (A figura é quadrática, contendo N*N pixels). A segunda linha será “define quadtree_height N”, concordando com a primeira. A terceira linha será “#define quadtree_bits[ ] = {“. Então seguirão N linhas, cada uma codificando uma linha de pixels na figura. Haverão N/8 números hexadecimais por linha. Cada número hexadecimal é composto por 8 bits que codificam 8 pixels da esquerda para a direita (onde o bit da extrema esquerda tem valor 1 e o bit da extrema direita tem valor 128). Os números hexadecimais são impressos no formato 0xdd, onde d é um dos caracteres do conjunto { 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f }. Exemplo: Os 8 pixels WBBBWWB são escritos como 0x9e. (2 + 4 + 8 + 16 + 128 = 158 = 0x9e) A última linha será “};”. Nota: Os comentários no exemplo de entrada (delimitados por /* e */) não são parte da entrada. Eles devem ajudar a explicar o formato XBM."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2022",
        "saida": "Deve ser impressa a lista ordenada, dentro das especificações descritas anteriormente, sendo mostrado primeiramente o nome do dono da lista antecedido de \"Lista de \" seguido por uma lista que mostra somente o nome do objeto seguido do seu preço em reais, definido com duas casas após o ponto decimal. Deve ser mostrada uma linha em branco após todas as saídas.",
        "descricao": "Ah o natal... época mágica, tempo de sentimentos bons, jantares cheios de pessoas legais e recheados de boas comidas e, é claro: muitos presentes. Jucilena foi uma boa menina durante esse ano. Sabendo disso, está montando sua lista de desejos natalinos. Porém, Jucilena é uma menina muito indecisa (e seus desejos são muitos), o que acaba confundindo o seu Nicolau quanto ao presente que ela realmente quer ganhar. Em suas listas, ela elencou o nome do presente desejado, seu preço (campo este solicitado pela sua mãe) e a escala de preferência pelo mesmo, do menos preferido (1) ao mais desejado (10). Vendo essa ideia de Jucilena, seus amigos também fizeram o mesmo, pois todos tinham diversas opções de presentes. Todo esse emaranhado de listas e presentes deixaram o seu Nicolau maluco! Vendo isso, o espírito natalino lhe tocou e você decidiu que ajudará Noel, criando um programa que elencará a lista dos mais desejados presentes para Jucilena e seus amigos. Os presentes devem ser mostrados na ordem descrescente do valor de preferência. Caso a preferência entre um e outro presente seja a mesma, o presente que deverá ser mostrado antes é o de menor preço. Caso haja semelhança entre preferência e preço, eles deverão ser elencados em ordem alfabética.",
        "titulo": "Presentes de Natal",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste contém o Nome (sem espaços) do respectivo dono da lista, junto com um inteiro Q, (1 < Q <100) que define a quantidade de presentes listados. As próximas Q*2 linhas consistem no nome O do objeto desejado descrito em uma linha e o P preço do mesmo (1< P < 100.000.000) e a escala de preferência E (1< E < 10) na linha seguinte. A entrada termina em EOF."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1507",
        "saida": "Para cada querie R, imprima \"Yes\" (sem aspas) se R for uma subsequência de S, ou \"No\" (sem aspas), caso contrario.",
        "descricao": "Dado duas sequências, diga se a segunda é uma subsequência da primeira.",
        "titulo": "Subsequências",
        "entrada": "A entrada comeca com um inteiro N (0 < N <= 10), o número de casos de teste. Seguem N casos testes. Um caso de teste comeca com uma sequência de caracteres S (S in [a-zA-Z], 0 < |S| < 100000). Segue um inteiro Q (0 < Q <= 1000), o número de queries. As proximas Q linhas sao compostas por uma sequência de carateres R (R in [a-zA-Z], 0 < |R| < 100) cada."
    }
]