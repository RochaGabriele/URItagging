[
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2030",
        "saida": "Cada saída de um caso de teste deve conter a linha “Teste #i”, indicando o número do teste. Após isso uma nova linha deve ser impressa informando o menor tempo possível (soma do tempo de todas as voltas e dos atrasos de pit stops) para que um piloto possa completar a prova e o menor número de pit stops para que isto ocorra, separados por espaço. A cada caso de teste deve haver uma linha em branco.",
        "descricao": "“Grazie, grazie, bellissimo!” – dizia um engenheiro da Scuderia Ferrari após uma estratégia inusitada que os fez ganhar o GP de Formosa de 2016, famoso circuito de rua do calendário da Fórmula 1. Fórmula 1 é um esporte meio maluco. Às vezes, quando o pneu está muito desgastado, compensa fazer uma paradinha, denominada de pit stop, para colocar pneus novos e fazer voltas mais rápidas do que se estava fazendo antes. No entanto, nem sempre vale a pena trocar de pneu, dependendo da quantidade de voltas que faltam e do atraso de uma parada de pit stop. Cada pneu tem uma determinada autonomia de algumas voltas, depois ele volta a ficar desgastado e possivelmente uma nova troca será necessária para conseguir bons tempos. Será que você, como futuro engenheiro da Ferrari consegue calcular a melhor estratégia de pit stops?",
        "titulo": "Pit Stop",
        "entrada": "A entrada consiste de uma linha contendo um número N (1 ≤ N ≤ 1000) indicando a quantidade de casos de teste. As N linhas seguintes representam os casos de teste. Cada caso de teste é composto por cinco inteiros: T1 o tempo de volta em milésimos de segundo com o pneu novo (1 ≤ T1 ≤ 106). T2, o tempo de volta em milésimos de segundo com o pneu desgastado (1 ≤ T1 ≤ T2 ≤ 106). A, o atraso em milésimos de segundo do pit stop (1 ≤ A ≤ 106). V, o número de voltas que um pneu novo pode dar até ficar desgastado (1 ≤ V ≤ 100). R, o número de voltas totais do GP de Formosa (1 ≤ R ≤ 100). Considere que os carros largam de pneus novos."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1840",
        "saida": "Imprima uma linha contendo unicamente o nome do vencedor da partida. Se não é possível definir um único vencedor para a partida, imprima uma linha contendo unicamente o caractere asterisco (*).",
        "descricao": "Em 1950, quatro homens foram presos acusados de incendiarem a igreja de Chapecó. Se de fato eram os culpados ou não nunca se saberá, mas a fúria do povo é sempre mais rápida a julgar que os tribunais. Preocupado em preservar a integridade física dos prisioneiros, o delegado de polícia local quis transferi-los para Azkaban. “Eles estarão mais seguros nas mãos dos dementadores que nas mãos do povo de Chapecó”, declarou enquanto acertava com o Ministro da Magia os detalhes da transferência, programada para a manhã seguinte. Enquanto esperavam sem sono pela transferência que jamais aconteceria, os presos resolveram jogar Dane-se, um jogo muito popular no Brasil. Numa de suas muitas versões, as regras do jogo são: São usadas apenas 40 cartas de um baralho francês tradicional com 52 cartas, descartando-se todas as cartas com número 8, 9 ou 10. A ordem crescente básica de valor das figuras empregada no Dane-se é: 4 5 6 7 Q J K A 2 3 Um dos jogadores distribui a cada jogador n cartas. Depois, ainda vira uma carta sobre a mesa, a qual determina as manilhas do jogo, que são as cartas com figura imediatamente posterior à figura da carta virada na ordem básica. Por exemplo, se é virada uma carta com figura 7, são definidas como manilhas do jogo as cartas Q♦, Q♠, Q♥ e Q♣. Se é virada uma carta com figura 3, as manilhas são 4♦, 4♠, 4♥ e 4♣. As manilhas de uma partida valem mais que qualquer outra carta. Embora o naipe não interfira no valor de cartas que não são manilhas, entre manilhas a ordem crescente de valor dos naipes é: ♦  ♠  ♥  ♣ Uma vez definidas as manilhas da partida, cada jogador tem de dizer quantas das n rodadas ele acha que fará. Todos os jogadores devem declarar seus palpites antes mesmo de começarem as rodadas. Iniciam-se, então, as rodadas, em cada uma das quais cada jogador joga uma de suas cartas revelando-a sobre a mesa. Diz-se que um jogador faz uma rodada se a carta que ele joga naquela rodada é de maior valor que todas as outras cartas jogadas naquela rodada. Quando uma rodada não é feita por jogador algum, o que é possível dado que o desempate por naipe ocorre apenas entre as manilhas, diz-se que aquela rodada embuchou. Ao final do jogo, cada jogador ganha tantos pontos quanto for a diferença entre o número de rodadas que o jogador disse que faria e o número de rodadas que de fato fez. Vence o jogador com menos pontos.",
        "titulo": "O Prisioneiro de Azkaban",
        "entrada": "A primeira linha da entrada informa o inteiro n (1 ≤ n ≤ 9), seguido da carta virada sobre a mesa no início da partida. Cada uma das 4 linhas seguintes informa o nome de um jogador, seguido de um inteiro m (0 ≤ m ≤ n), o qual representa o número de rodadas que o jogador declarou que faria no início da partida. A ordem em que são informados os jogadores é sempre a mesma ordem em que jogam em cada rodada. Seguem-se por fim n linhas, de modo que a i-ésima dessas linhas informa as 4 cartas que foram jogadas na i-ésima rodada, na ordem em que foram jogadas. Cada carta é informada no formato XY, com X ∈ {4, 5, 6, 7, Q, J, K, A, 2, 3}, Y ∈ {D, S, H, C}, e D, S, H e C correspondendo respectivamente aos naipes ♦, ♠, ♥, ♣. Considere que o nome de cada jogador é composto por no mínimo 1 e no máximo 10 caracteres do conjunto {a, b, …, z, A, B, …, Z}."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2194",
        "saida": "For each test case, display its case number followed by a string containing one character for each hieroglyph recognized in the image, using the following code: Ankh: A Wedjat: J Djed: D Scarab: S Was: W Akhet: K In each output string, print the codes in alphabetic order. Follow the format of the sample output. The sample input contains descriptions of test cases shown in Figures C.2 and C.3. Due to space constraints not all of the sample input can be shown on this page.",
        "descricao": "In order to understand early civilizations, archaeologists often study texts written in ancient languages. One such language, used in Egypt more than 3000 years ago, is based on characters called hieroglyphs. Figure C.1 shows six hieroglyphs and their names. In this problem, you will write a program to recognize these six characters. Figure C.1: Six hieroglyphs",
        "titulo": "Ancient Messages",
        "entrada": "The input consists of several test cases, each of which describes an image containing one or more hieroglyphs chosen from among those shown in Figure C.1. The image is given in the form of a series of horizontal scan lines consisting of black pixels (represented by 1) and white pixels (represented by 0). In the input data, each scan line is encoded in hexadecimal notation. For example, the sequence of eight pixels 10011100 (one black pixel, followed by two white pixels, and so on) would be represented in hexadecimal notation as 9c. Only digits and lowercase letters a through f are used in the hexadecimal encoding. The first line of each test case contains two integers, H and W. H (0 < H ≤ 200) is the number of scan lines in the image. W (0 < W ≤ 50) is the number of hexadecimal characters in each line. The next H lines contain the hexadecimal characters of the image, working from top to bottom. Input images conform to the following rules: The image contains only hieroglyphs shown in Figure C.1. Each image contains at least one valid hieroglyph. Each black pixel in the image is part of a valid hieroglyph. Each hieroglyph consists of a connected set of black pixels and each black pixel has at least one other black pixel on its top, bottom, left, or right side. The hieroglyphs do not touch and no hieroglyph is inside another hieroglyph. • Two black pixels that touch diagonally will always have a common touching black pixel. The hieroglyphs may be distorted but each has a shape that is topologically equivalent to one of the symbols in Figure C.11. The last test case is followed by a line containing two zeros."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2189",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir três linhas. A primeira linha identifica o conjunto de teste, no formato \"Teste n\", onde n é numerado a partir de 1. A segunda 5 linha deve conter o número do ingresso do ganhador, conforme determinado pelo seu programa. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "descricao": "Os alunos do último ano resolveram organizar uma quermesse para arrecadar fundos para a festa de formatura. A festa prometia ser um sucesso, pois o pai de um dos formandos, Teófilo, dono de uma loja de informática, decidiu doar um computador para ser sorteado entre os que comparecessem. Os alunos prepararam barracas de quentão, pipoca, doces, ensaiaram a quadrilha e colocaram à venda ingressos numerados sequencialmente a partir de 1. O número do ingresso serviria para o sorteio do computador. Ficou acertado que Teófilo decidiria o método de sorteio; em princípio o sorteio seria, claro, computadorizado. O local escolhido para a festa foi o ginásio da escola. A entrada dos participantes foi pela porta principal, que possui uma roleta, onde passa uma pessoa por vez. Na entrada, um funcionário inseriu, em uma lista no computador da escola, o número do ingresso, na ordem de chegada dos participantes. Depois da entrada de todos os participantes, Teófilo começou a trabalhar no computador para preparar o sorteio. Verificando a lista de presentes, notou uma característica notável: havia apenas um caso, em toda a lista, em que o participante que possuia o ingresso numerado com i, havia sido a i-ésima pessoa a entrar no ginásio. Teófilo ficou tão encantado com a coincidência que decidiu que o sorteio não seria necessário: esta pessoa seria o ganhador do computador. Conhecendo a lista de participantes, por ordem de chegada, sua tarefa é determinar o número do ingresso premiado, sabendo que o ganhador é o único participante que tem o número do ingresso igual à sua posição de entrada na festa.",
        "titulo": "Quermesse",
        "entrada": "A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém um número inteiro positivo N (0 ≤ N ≤ 10000) que indica o número de participantes da festa. A linha seguinte contém a sequência, em ordem de entrada, dos N ingressos das pessoas que participaram da festa. O final da entrada é indicado quando N = 0. Para cada conjunto de teste da entrada haverá um único ganhador."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2016",
        "saida": "Saída de uma linha com um inteiro representando o número total máximo de pontos extras que Daedalus poderia ter obtido, se ele tivesse escolhido o melhor cartão de possível em cada rodada, assumindo que as cartas escolhidas pelos outros jogadores permaneçam inalteradas.",
        "descricao": "Daedalus está jogando o jogo de \"Não seja ganancioso\", no qual os N jogadores sentam em torno de uma mesa tendo cada um deles cinco cartões rotulados 1, 10, 100, 1000 e 10000 pontos. Em \"Não seja ganancioso\" os jogadores não podem conversar entre si uma vez que o jogo começa, e existem M rodadas. Em cada rodada, o banco anuncia um orçamento B. Em seguida, cada jogador escolhe uma das cartas e coloca-a, de rosto para baixo, sobre a mesa. O banco então vira as cartas, de modo que todos os jogadores podem ver todos as N cartas. Se a soma dos pontos nas cartas escolhidas é menor ou igual a B, então o banco para cada jogador dá exatamente a quantidade de pontos na placa de que ele ou ela escolheu. Caso contrário, ninguém recebe nada. Cada jogador recebe a sua carta de volta antes da próxima rodada. Os jogadores estão muito racionais e gostariam de maximizar os seus pontos e minimizar os seus arrependimentos! O que você faria nesta situação? Cooperaria ou afundaria o jogo? Tome a tabela a seguir como um exemplo. Daedalus ganhou um total de 10 pontos, no final, porque apenas o primeiro round foi bem sucedida. Mas, olhando para trás no jogo, ele vê que ele poderia ter ganho 110 pontos, se tivesse escolhido 100 pontos na primeira rodada e 10 pontos na terceira rodada. Ou seja, Daedalus poderia ter ganho 100 pontos extra! Isto somente, é claro, assumindo que as cartas escolhidas pelos outros jogadores permaneçam inalteradas. Dado o orçamento e as cartas escolhidas em cada rodada, é preciso calcular o número total máximo de pontos extras que Daedalus poderia ter obtido, no final, se tivesse escolhido o melhor cartão de possível em cada rodada, assumindo as cartas escolhidas pelo outro jogadores permaneçam inalteradas.",
        "titulo": "D como em Daedalus",
        "entrada": "A primeira linha contém dois inteiros N e M, representando respectivamente o número de jogadores e o número de rodadas (1 ≤ N ≤ 20 e 1 ≤ M ≤ 50). Cada uma das M linhas seguintes descreve uma rodada com um número inteiro B, indicando o orçamento (1 ≤ B ≤ 106), seguido de N inteiros C1, C2, ..., CN representam que o jogador i-ésimo escolheu o cartão marcada com Ci pontos durante essa rodada (Ci ∈ {1, 10, 100, 1000, 10000} para i = 1, 2, ..., N). Daedalus é o primeiro jogador."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1103",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma linha, cada uma contendo um número inteiro, indicando o número de minutos que Daniela tem para dormir.",
        "descricao": "Daniela é enfermeira em um grande hospital, e tem os horários de trabalho muito variáveis. Para piorar, ela tem sono pesado, e uma grande dificuldade para acordar com relógios despertadores. Recentemente ela ganhou de presente um relógio digital, com alarme com vários tons, e tem esperança que isso resolva o seu problema. No entanto, ela anda muito cansada e quer aproveitar cada momento de descanso. Por isso, carrega seu relógio digital despertador para todos os lugares, e sempre que tem um tempo de descanso procura dormir, programando o alarme despertador para a hora em que tem que acordar. No entanto, com tanta ansiedade para dormir, acaba tendo dificuldades para adormecer e aproveitar o descanso. Um problema que a tem atormentado na hora de dormir é saber quantos minutos ela teria de sono se adormecesse imediatamente e acordasse somente quando o despertador tocasse. Mas ela realmente não é muito boa com números, e pediu sua ajuda para escrever um programa que, dada a hora corrente e a hora do alarme, determine o número de minutos que ela poderia dormir.",
        "titulo": "Alarme Despertador",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em uma linha, contendo quatro números inteiros H  1 , M 1 , H2 e M 2, com H1:M1 representando a hora e minuto atuais, e H2:M2 representando a hora e minuto para os quais o alarme  despertador foi programado (0≤H1≤23, 0≤M1≤59, 0≤H2≤23, 0≤M2 ≤59). O final da entrada é indicado por uma linha que contém apenas quatro zeros, separados por espaços em branco."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1917",
        "saida": "Para cada caso de teste, exiba uma única linha com a quantidade de vírus que estarão vivos no fim do minuto solicitado pelo Chapolin Colorado.",
        "descricao": "Tripa Seca é um exímio programador de computadores, mas infelizmente ele faz parte de uma entidade formada pelos vilões mais cruéis do universo. Após dominar inúmeros planetas, o próximo alvo dessa entidade é o planeta Terra e o foco é de capturar toda a tecnologia dos terráqueos. A sede da entidade até alguns dias atrás nunca tinha sido avistada por nenhum ser do planeta Terra, mas o poderoso Chapolin Colorado com toda a sua astúcia, realizou esse feito e conseguiu entrar na sala de reuniões dos super vilões. E advinha? Estava tendo uma grande reunião! Chapolin escutou toda a conversa dos vilões e acabou descobrindo que o plano para conquistar a terra, é a criação de um vírus super poderoso capaz de dominar qualquer aparelho que utilize algum tipo de tecnologia terrestre. Naquele exato momento Chapolin Colorado pegou o seu gravador de áudio e começou gravar Tripa Seca explicando o funcionamento do vírus. Abaixo está descrito uma parte da gravação: \"[..]Primeiramente o vírus que eu criei é capaz de se reproduzir, mas infelizmente eu errei em alguma parte do algoritmo e o vírus tem um tempo limitado de vida (Admitam, ninguém é perfeito!), por isso no fim do segundo minuto de vida o vírus morre, porém no início de cada minuto 1 vírus nasce de um outro vírus mais velho vivo, e esse é capaz de herdar as mesmas características do vírus pai, como por exemplo a capacidade de se reproduzir e também o tempo limitado de vida. Mesmo com o problema do tempo limitado de vida, tenho quase certeza que a devastação será gigantesca e nós dominaremos toda a tecnologia deste planeta fútil...Minha ideia é a seguinte: colocarei uma quantidade X de vírus no planeta dos terráqueos e depois deixarei que eles cumpram o resto do serviço! Por exemplo, se eu colocar de início somente 1 vírus, de acordo com meus cálculos já no fim do terceiro minuto terão 5 vírus![..]\" Apesar de Chapolin ser um grande herói, ele não é muito bom para entender certas explicações e pediu que o professor Girafales explicasse para ele a capacidade de destruição daqueles vírus, para que ele tenha uma noção do quanto a Terra corre perigo. Após várias tentativas sem sucesso, o professor Girafales decidiu desenhar o processo e mostrar a Chapolin. Veja o desenho do professor Girafales abaixo: Entretanto Chapolin achou o desenho um grande insulto a sua capacidade mental e pediu para que você informasse a quantidade de vírus que terá em um determinado minuto, dado a quantidade de vírus inseridos inicialmente por Tripa Seca. Um detalhe importante, Chapolin odeia números quebrados ou restos, ele gosta de ver o número original sem nenhum tipo de corte!",
        "titulo": "Ajude o Chapolin Colorado!",
        "entrada": "Haverá diversos casos de teste. Cada caso inicia com dois inteiros, X e Mf (1 ≤ X ≤ 105 , 1 ≤ Mf ≤ 105), representando respectivamente, a quantidade inicial de vírus inseridas no planeta Terra e o minuto em que Chapolin deseja saber a quantidade de vírus que estarão vivos no planeta. A entrada termina com X = Mf = 0, a qual não deverá ser processada."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1300",
        "saida": "Para cada caso de teste uma linha contendo um caracter. Se existe pelo menos uma hora do dia de tal forma que o ângulo mínimo entre os dois ponteiros com exatamente A graus, então escreva a letra maiúscula 'Y'. Caso contrário escreva a letra maiúscula 'N'.",
        "descricao": "Heidi tem um relógio analógico discreto com a forma de um círculo, como o mostrado na figura ao lado. Dois ponteiros giram em torno do centro do círculo, indicando as horas e minutos. O relógio tem 60 marcas colocadas em torno do seu perímetro, com a distância entre cada uma das marcas consecutivas sendo constante. O ponteiro dos minutos se move de sua marca atual para o próximo exatamente uma vez a cada minuto. Por sua vez, o ponteiro das horas se move de sua marca atual para a próxima exatamente uma vez a cada 12 minutos, de modo que avança cinco marcas a cada hora. Consideramos que os dois ponteiros movem-se discretamente e instantaneamente, o que significa que eles estão sempre posicionados exatamente sobre uma das marcas e nunca entre as marcas. À meia-noite ambos os ponteiros alcançam ao mesmo tempo a marca no topo, o que indica zero horas e zero minutos. Após exatamente 12 horas ou 720 minutos, ambos os ponteiros alcançam a mesma posição novamente, e este processo é repetido várias vezes. Note que quando o ponteiro dos minutos se move, o ponteiro das horas pode não se mover, no entanto, quando o ponteiro das horas se move, o ponteiro dos minutos também se move. Heidi gosta de geometria, e ela gosta de medir o ângulo mínimo entre os dois ponteiros do relógio em diferentes momentos do dia. Ela tem anotado algumas medidas, mas depois de vários anos e uma longa lista, ela notou que alguns ângulos se repetiam enquanto alguns outros nunca apareciam. Por exemplo, a lista de Heidi indica que tanto às três horas quanto às nove horas o ângulo mínimo entre os dois ponteiros é de 90 graus, enquanto um ângulo de 65 graus não aparece na lista. Heidi decidiu verificar, para qualquer número inteiro A entre 0 e 180, se existe pelo menos uma vez no dia um ângulo mínimo entre os dois ponteiros do relógio com exatamente A graus. Ajude Heide com um programa que responda a esta pergunta.",
        "titulo": "Horas e Minutos",
        "entrada": "Cada caso de teste é descrito usando uma única linha. A linha contém um número inteiro A (0 ≤ A ≤ 180) que representa o ângulo a ser verificado."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1480",
        "saida": "Seu programa deverá imprimir, para cada caso de teste, uma linha, contendo a palavra “Possivel” caso seja possível encontrar todas as minas baseando nas definições acima, ou “Impossivel”, caso isso não seja possível.",
        "descricao": "Campo Minado é um jogo antigo, que ficou muito conhecido por ser um jogo nativo em um sistema operacional que ninguém lembra o nome. Trata-se de uma grade com N linhas e M colunas, contendo diversas minas espalhadas, e diversas dicas indicando onde elas estariam. O seu objetivo é encontrar todas as minas, sem nunca pisar em uma. Cada posição da grade pode ou não conter uma mina. Caso não contenha uma mina, tal posição irá conter um valor, conhecido também como dica, que irá identificar quantas minas há nos quadrados adjacentes àquele (nas 8 direções), que varia de 0 a 8 (ver Figura 1). Rafael se interessou muito pela proposta do jogo, e achou tão fácil que resolveu escrever por conta própria alguns casos de jogo, onde ele define onde as minas estarão e quais as dicas iniciais. Notou porém que existem duas situações que podem ocorrer durante a partida: em determinados casos, é possível descobrir com certeza onde está a mina, graças às dicas dadas; já em outros casos, não é possível descobrir com certeza onde está a mina, e o jogador vai depender apenas de sua sorte. Considere uma partida como se segue: há inicialmente um determinado número de quadrados revelados (dicas) e o restante dos quadrados cobertos. O jogador pode então realizar dois movimentos: revelar um quadrado coberto, podendo encontrar uma mina (fim de jogo) ou uma dica; ou sinalizar um quadrado coberto como sendo uma mina, de modo a prevenir a si mesmo de nunca revelar tal quadrado. Para prosseguir na partida de uma forma lógica (sem se basear na sorte), leve em consideração as seguintes definições, em relação a um conjunto de quadrados adjacentes a algum quadrado sendo analisado: Quando o número de quadrados cobertos (adjCob), somado do número de quadrados sinalizados (adjSin) for igual à dica (adjCob + adjSin = dica), então todos os quadrados cobertos contém minas. Quando o número de de quadrados sinalizados (adjSin) for igual à dica (adjSin = dica), então todos os quadrados cobertos não contém minas. Veja como exemplo na Figura 2. Na parte a) da figura, temos adjCob = 1, adjSin = 0 e dica = 1, logo 1 + 0 = 1, e podemos sinalizar os quadrados cobertos para identificar as minas. Na parte b) da figura, temos adjSin = 1 e dica = 1, logo 1 = 1, e podemos revelar os quadrados adjacentes ainda cobertos. Para que seu caso de jogo ficasse interessante e desafiador, Rafael decidiu que devia ser possível encontrar todas as minas baseando-se apenas na definição dada, porém não sabe verificar quando isso é possível, e para isso pediu sua ajuda.",
        "titulo": "O Famoso Campo Minado",
        "entrada": "A entrada irá conter diversos casos de teste. Cada caso de teste inicia com três inteiros N, M e K (1 ≤ N, M ≤ 20, 1 ≤ K ≤ 30), indicando que a grade do jogo contém N linhas e M colunas, e que há K minas escondidas naquela grade. Em seguida, haverá N linhas com M caracteres em cada linha, onde o caractere da linha i e coluna j (1 ≤ i ≤ N e 1 ≤ j ≤ M) indica o que há na posição [i, j] da grade: Caractere “.” - Quadrado coberto. Valor entre 0 e 8 – Quadrado revelado, onde o valor é a dica. Em seguida haverá K pares de inteiros a e b (1 ≤ a ≤ N e 1 ≤ b ≤ M), indicando que há uma mina na posição [a, b] da grade. Note que tal informação é útil quando um quadrado é revelado, para se poder calcular qual a dica que será apresentada. A entrada termina quando N = M = K = 0."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2213",
        "saida": "For each test case, display its case number followed by: 0 if the safe opens without inserting a mirror. k r c if the safe does not open without inserting a mirror, there are exactly k positions where inserting a mirror opens the safe, and (r, c) is the lexicographically smallest such row, column position. A position where both a / and a \\ mirror open the safe counts just once. 'impossible' if the safe cannot be opened with or without inserting a mirror.",
        "descricao": "Safe Ltd. is a company that manufactures high-quality safes. Its latest invention is an optical closure mechanism that uses a laser beam passing through a rectangular grid with several mirrors. When the laser is activated, a beam enters the top row of the grid horizontally from the left. The beam is reflected by every mirror that it hits. Each mirror has a 45 degree diagonal orientation, either / or \\ . If the beam exits the bottom row of the grid horizontally to the right, it is detected and the safe opens (see the left side of the figure above). Otherwise the safe remains closed and an alarm is raised. Each safe has a missing mirror, which prevents the laser beam from traveling successfully through the grid (see the right side of the figure above). The safe has a mechanism that enables the user to drop a single mirror into any empty grid cell. A legitimate user knows the correct position and orientation of the missing mirror ( / in row 4 column 3 above) and can thus open the safe. Without this knowledge the user has to guess correctly, which can be difficult for safes with large grids. Your job is to determine if particular safes are actually secure. A secure safe does not open right away without inserting a mirror, and there is at least one valid location and orientation for the missing mirror. There may indeed be multiple such locations and orientations.",
        "titulo": "A Safe Bet",
        "entrada": "Each test case describes a single safe and starts with a line containing four integer numbers r, c, m, and n (1 ≤ r, c ≤ 1 000 000 and 0 ≤ m, n ≤ 200 000). The mechanism’s grid has r rows and c columns. Each of the next m lines contains two integer numbers ri and ci (1 ≤ ri ≤ r and 1 ≤ ci ≤ c) specifying that there is a / mirror in row ri column ci . The following n lines specify the positions of the \\ mirrors in the same way. The m + n positions of the mirrors are pairwise distinct."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1171",
        "saida": "Imprima a saída de acordo com o exemplo fornecido abaixo, indicando quantas vezes cada um deles aparece na entrada por ordem crescente de valor.",
        "descricao": "Neste problema sua tarefa será ler vários números e em seguida dizer quantas vezes cada número aparece na entrada de dados, ou seja, deve-se escrever cada um dos valores distintos que aparecem na entrada por ordem crescente de valor.",
        "titulo": "Frequência de Números",
        "entrada": "A entrada contém apenas 1 caso de teste. A primeira linha de entrada contem um único inteiro N, que indica a quantidade de valores que serão lidos para X (1 ≤ X ≤ 2000) logo em seguida. Com certeza cada número não aparecerá mais do que 20 vezes na entrada de dados."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1916",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma linha com a quantidade de horas e minutos que atualmente estão registradas no banco de horas simulado para Jaiminho no seguinte formato: \"S HH:MM\", onde S pode ser o sinal \"-\", representando horas negativas no banco, ou sinal \"+\" representando horas positivas no banco, HH representa a quantidade de horas e MM representa a quantidade de minutos do banco de horas simulado. Caso HH:MM seja igual a 00:00, você pode considerar como horas positivas no banco.",
        "descricao": "A empresa em que o carteiro Jaiminho trabalha tem uma política de banco de horas bem interessante. Toda vez que um funcionário inicia suas atividades ele deve registrar a sua chegada na \"máquina de ponto\" recebendo um pequeno comprovante, da mesma forma que toda vez que o funcionário finaliza suas atividades ele também deve registrar o término. A maioria dos funcionários nunca teve a curiosidade de saber como a \"máquina do ponto\" processa a quantidade de horas trabalhadas, mas Jaiminho além de ser um excelente funcionário é bastante curioso. Ao registrar a sua digital (no primeiro dia de trabalho) Jaiminho foi informado por uma senhora que trabalha no departamento de Recursos Humanos que existe uma tolerância de 5 minutos tanto na entrada como na saída. A jornada de trabalho de Jaiminho consiste em dois períodos, das 08:00 hrs às 12:00 hrs e das 14:00 hrs às 18:00 hrs (contabilizando 8 horas trabalhadas por dia), sendo assim, se ele chegar às 07:55 hrs e sair às 12:03 hrs, a “máquina do ponto” perceberá que ele respeitou a tolerância e não registrará nenhum minuto a mais ou a menos no banco de horas de Jaiminho, porém se na segunda parte do seu expediente, ele registrar a sua entrada às 13:54 hrs e sua saída às 18:02 hrs, a máquina perceberá que ele abusou da tolerância e então adicionará 6 minutos extras no seu banco de horas. Como Jaiminho é um funcionário dedicado e sempre tenta evitar a fadiga, ele montou uma planilha com o registro (horário de entrada e saída) de todos os dias trabalhados, mas infelizmente ele não é um programador e precisa de sua ajuda para simular o banco de horas da empresa em que ele trabalha.",
        "titulo": "Banco de Horas de Jaiminho",
        "entrada": "A primeira linha de entrada contém um único inteiro QT (1 ≤ QT ≤ 100) indicando a quantidade de casos de teste que vem a seguir. Cada caso de teste inicia com uma linha contendo um único inteiro N (1 ≤ N ≤ 10³) que representa a quantidade de registros na planilha de Jaiminho, seguem N linhas, cada linha contendo a descrição dos horários de entrada e saída no seguinte formato \"A1:B1 A2:B2 | C1:D1 C2:D2\", onde A1 e B1 representam respectivamente as horas e os minutos de entrada do primeiro período de trabalho no dia, A2 e B2 representam respectivamente as horas e os minutos de saída do primeiro período de trabalho do dia, C1 e D1 representam respectivamente as horas e os minutos de entrada do segundo período de trabalho do dia e C2 e D2 representam respectivamente as horas e os minutos de saída do segundo período de trabalho no dia. Jaiminho garante que nunca dormiu no trabalho, que (A1:B1 ≤ A2:B2 && C1:D1 ≤ C2:D2) e que as horas e os minutos no seu banco de horas nunca ultrapassarão 2 dígitos. Lembre-se, 1 dia tem 24 horas e 1 hora tem 60 minutos."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2215",
        "saida": "For each test case, display the case number and the minimum number of operations (splits and joins) that have to be performed to combine the given stacks into a single stack.",
        "descricao": "The Plate Shipping Company is an Internet retailer that, as their name suggests, exclusively sells plates. They pride themselves in offering the widest selection of dinner plates in the universe from a large number of manufacturers. In a recent cost analysis the company has discovered that they spend a large amount of money on packing the plates for shipment. Part of the reason is that plates have to be stacked before being put into shipping containers. And apparently, this is taking more time than expected. Maybe you can help. A shipment of plates consists of plates from several manufacturers. The plates from each manufacturer come stacked, that is, each arranged in a single stack with plates ordered by size (the smallest at the top, the largest at the bottom). We will call such a stack properly ordered. To ship all these plates, you must combine them into a single stack, again properly ordered. To join the manufacturers’ stacks into a single stack, two kinds of operations are allowed: Split: a single stack can be split into two stacks by lifting any top portion of the stack and putting it aside to form a new stack. Join: two stacks can be joined by putting one on top of the other. This is allowed only if the bottom plate of the top stack is no larger than the top plate of the bottom stack, that is, the joined stack has to be properly ordered. Note that a portion of any stack may never be put directly on top of another stack. It must first be split and then the split portion must be joined with the other stack. Given a collection of stacks, you have to find the minimum number of operations that transforms them into a single stack. The following example corresponds to the sample input, and shows how two stacks can be transformed to a single stack in five operations:",
        "titulo": "Stacking Plates",
        "entrada": "Each test case starts with a line containing a single integer n (1 ≤ n ≤ 50), the number of stacks that have to be combined for a shipment. This is followed by n lines, each describing a stack. These lines start with an integer h (1 ≤ h ≤ 50), the height of the stack. This number is followed by h positive integers that give the diameters of the plates, from top to bottom. All diameters are at most 10 000. These numbers will be in non-decreasing order."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2196",
        "saida": "For each test case in the input, display its case number. Then display one line per query in the test case. Each line displays the maximum number of coffee shops reachable for the given query distance m followed by the optimal location. For example, the sample output shows that 3 coffee shops are within query distance 1 of the optimal location (3, 4), 4 shops are within query distance 2 of optimal location (2, 2), and 5 shops are within query distance 4 of optimal location (3, 1). If there are multiple optimal locations, pick the location that is furthest south (minimal positive integer y-coordinate). If there is still a tie, pick the location furthest west (minimal positive integer x-coordinate). Follow the format of the sample output.",
        "descricao": "Is it just a fad or is it here to stay? You’re not sure, but the steadily increasing number of coffee shops that are opening in your hometown has certainly become quite a draw. Apparently, people have become so addicted to coffee that apartments that are close to many coffee shops will actually fetch higher rents. This has come to the attention of a local real-estate company. They are interested in identifying the most valuable locations in the city in terms of their proximity to large numbers of coffee shops. They have given you a map of the city, marked with the locations of coffee shops. Assuming that the average person is willing to walk only a fixed number of blocks for their morning coffee, you have to find the location from which one can reach the largest number of coffee shops. As you are probably aware, your hometown is built on a square grid layout, with blocks aligned on north-south and east-west axes. Since you have to walk along streets, the distance between intersections (a, b) and (c, d) is |a − c| + |b − d|.",
        "titulo": "Coffee Central",
        "entrada": "The input contains several test cases. Each test case describes a city. The first line of each test case contains four integers dx, dy, n, and q. These are the dimensions of the city grid dx × dy (1 ≤ dx, dy ≤ 1000), the number of coffee shops n (0 ≤ n ≤ 5 · 105 ), and the number of queries q (1 ≤ q ≤ 20). Each of the next n lines contains two integers xi and yi (1 ≤ xi ≤ dx, 1 ≤ yi ≤ dy); these specify the location of the ith coffee shop. There will be at most one coffee shop per intersection. Each of the next q lines contains a single integer m (0 ≤ m ≤ 106 ), the maximal distance that a person is willing to walk for a cup of coffee. The last test case is followed by a line containing four zeros."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1387",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro indicando quantos filhos e filhas Og tem ao todo.",
        "descricao": "Og é um homem das cavernas com vários filhos e filhas, e ele quer contar todos eles. Og conta seus filhos com sua mão esquerda e suas filhas com sua mão direita. Entretanto, Og não é inteligente, e não sabe somar os dois números. Assim, ele pediu para você escrever um programa que realize a soma.",
        "titulo": "Og",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste em uma linha contendo dois inteiros L e R, separados por um espaço, indicando o número de filhos e de filhas, respectivamente (1 ≤ L, R ≤ 5). O fim do arquivo de entrada é indicado por L = R = 0."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1770",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando quanto tempo se passou até que você tivesse escutado todas as músicas do álbum ao menos uma vez. Caso isso não seja possível, imprima -1.",
        "descricao": "Sua banda favorita acaba de lançar um novo álbum, e para tornar a experiência mais empolgante você decidiu escutar as músicas em uma ordem aleatória. Para isto você escreveu um algoritmo que iria montar uma playlist com K músicas desse álbum. O problema, porém, é que seu algoritmo não é muito eficiente na forma que as músicas são escolhidas, de forma que algumas músicas poderiam ser tocadas repetidas vezes antes que outras fossem tocadas ao menos uma vez. Dado o número de músicas do álbum, a duração de cada música, e a playlist gerada pelo seu algoritmo, diga quanto tempo se passou até que você tivesse escutado todas as músicas do álbum ao menos uma vez, se isso for possível.",
        "titulo": "Shuffle",
        "entrada": "Haverá no máximo 150 casos de teste. Cada caso de teste inicia com dois inteiros M e K, indicando o número de músicas do álbum e o número de músicas na playlist do seu algoritmo (1 ≤ M ≤ 100, 1 ≤ K ≤ 1000). Em seguida haverá M inteiros mi, indicando que a i-ésima música do álbum dura mi minutos (1 ≤ mi ≤ 300, para todo 1 ≤ i ≤ M). Em seguida haverá K inteiros ki, indicando que a i-ésima música da playlist é a música de faixa número ki (1 ≤ ki ≤ M, para todo 1 ≤ i ≤ K). A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1981",
        "saida": "Para cada caso de teste você deverá imprimir quantos anagramas distintos são possíveis de se formar com os caracteres informados. Como os números podem ser grandes, imprima a resposta módulo 100000007.",
        "descricao": "Agora que você já ajudou o Gabriel com os primeiros dados necessários para seu jogo de lógica, ele necessita de sua ajuda novamente. Dessa vez ele precisa que seu programa consiga tratar casos onde as palavras podem ter letras repetidas.",
        "titulo": "Embaralhando de Novo",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste terá uma única linha, com uma palavra S (1 ≤ S ≤ 10000), composta apenas com caracteres entre 'a' e 'z'. A entrada termina quando S = 0 e não deve ser processada."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1559",
        "saida": "Para cada teste, a saída consiste de uma linha contendo todas as jogadas possíveis para a entrada. As jogadas são indicadas por DOWN (baixo), LEFT (esquerda), RIGHT (direita) e UP (cima). As jogadas devem ser escritas em ordem alfabética. Caso não haja nenhuma jogada possível, imprima NONE.",
        "descricao": "Esse ano, o jogo conhecido como 2048 se tornou muito popular na internet. Veja a seguir uma imagem do jogo: As teclas direcionais são usadas para realizar jogadas (cima, baixo, esquerda e direita). A cada vez que uma tecla é pressionada, os blocos numerados tentam deslizar pela matriz caso haja espaço. No exemplo da imagem acima, se a tecla para esquerda for pressionada, 5 blocos irão se mover (8, 2, 16, 2, 32). Além de tentar deslizar, blocos adjacentes com o mesmo número se juntam em um único bloco com um número dobrado caso tentem deslizar na direção certa. No exemplo da imagem acima, se a tecla para baixo for pressionada, dois blocos 2 irão se transformar em um bloco 4 e dois blocos 32 irão se transformar em um bloco 64. Durante o jogo, além de fazer as jogadas, surgem aleatoriamente blocos na matriz com números iguais a potências de 2. O objetivo é fazer os blocos se juntarem para que um bloco com número 2048 seja formado. Quando isso acontece, o jogador vence o jogo e não é possível fazer mais jogadas. Porém, também pode acontecer do jogador não ter mais jogadas possíveis antes de formar o número 2048. No exemplo da imagem, apertar a tecla para a direita não é uma jogada válida, pois nenhum bloco pode se mover ou se juntar a outro bloco. Sua tarefa nesse problema é dizer quais são as jogadas válidas para uma determinada situação do jogo.",
        "titulo": "2048",
        "entrada": "A entrada é iniciada por uma linha que contém o número de casos de teste. Para cada caso de teste, a entrada consiste em 4 linhas contendo uma matriz quadrada de dimensão 4. Os números da matriz são iguais a 0 para indicar que não bloco na posição, ou são iguais a potências de 2 entre 2 e 2048 inclusive."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1708",
        "saida": "Seu programa deve produzir uma única linha, contendo um único inteiro: a volta em que o piloto mais lento se tornará um retardatário.",
        "descricao": "No automobilismo é bastante comum que o líder de uma prova, em determinado momento, ultrapasse o último colocado. O líder, neste momento, está uma volta à frente do último colocado, que se torna, assim, um retardatário. Neste problema, dados os tempos que o piloto mais rápido e o piloto mais lento levam para completar uma volta, você deve determinar em que volta o último colocado se tornará um retardatário, ou seja, será ultrapassado pelo líder. Você deve considerar que, inicialmente, eles estão lado a lado, na linha de partida do circuito, ambos no início da volta de número 1 (a primeira volta da corrida); e que uma nova volta se inicia sempre depois que o líder cruza a linha de partida.",
        "titulo": "Volta",
        "entrada": "A única linha da entrada contém dois números inteiros X e Y (1 ≤ X < Y ≤ 10000), os tempos, em segundos, que o piloto mais rápido e o piloto mais lento levam para completar uma volta, respectivamente."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2144",
        "saida": "Seu programa deverá imprimir um bordão correspondente à média M (ponto flutuante) da 1RM de BemBem, de acordo com a tabela abaixo: No final, se a média de todos os casos for maior do que 40, imprima uma linha em branco e então, \"Aqui nois constroi fibra rapaz! Nao e agua com musculo!\".",
        "descricao": "BemBem é um famoso fisiculturista da região. Ele está sempre buscando o desempenho perfeito em seus treinos na academia para competir com seus rivais. Seu amigo Frenco o auxilia da melhor maneira possível, ajudando-o a buscar o trapézio descendente e controlando-o para que ele não derrube todas as árvores do Parque Ibirapuera. Apesar disso, BemBem chamou você para o ajudar em uma tarefa específica: determinar a média de sua 1RM (uma repetição máxima). Para tal, você poderá usar a fórmula abaixo: W = Peso a ser levantado. R = Número de repetições. Porém, BemBem possui menos força em um braço do que no outro, o que o faz levantar menos peso em um deles, motivo pelo qual ele lhe pediu ajuda, alegando que \"o maluco está doente\". Ajude-o e torne-se um codebuilder!",
        "titulo": "Bodybuilder",
        "entrada": "A entrada é composta pelos inteiros W1 (peso levantado pelo braço esquerdo: 1 ≤ W1 ≤ 60), W2 (peso levantado pelo braço direito: 1 ≤ W2 ≤ 100) e R (número de repetições: 1 ≤ R ≤ 12). A entrada termina com W1 = W2 = R = 0."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1378",
        "saida": "Para cada caso de teste, imprima uma única linha com um único inteiro indicando o número de subconjuntos de três pontos que contém vértices de um triângulo isósceles.",
        "descricao": "Um dado triângulo pode ser equilátero (três lados de mesmo comprimento), escaleno (três lados de comprimentos diferentes), ou isósceles (dois lados de mesmo comprimento e um terceiro lado de comprimento diferente). Sabe-se que pontos com coordenadas inteiras não podem ser vértices de um triângulo equilátero. É dado um conjunto de pontos distintos com coordenadas inteiras no plano XY tal que três pontos distintos deste conjunto não pertencem a uma mesma reta. Sua tarefa é calcular o número de subconjuntos de três pontos que contém vértices de um triângulo isósceles.",
        "titulo": "Triângulos Isósceles",
        "entrada": "Há vários casos de teste. Cada caso de teste é descrito em várias linhas. A primeira linha de cada caso de teste contém um inteiro N indicando o número de pontos no conjunto (3 ≤ N ≤ 1000). Cada uma das próximas N linhas descreve um ponto do conjunto e contém dois inteiros X e Y separados por um espaço (1 ≤ X, Y ≤ 106); esses valores representam as coordenadas do ponto no plano XY. Você pode assumir que, em cada caso de teste, não há dois pontos com a mesma localização e não há três pontos colineares. O último caso de teste é seguido por uma linha contendo um único zero."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1311",
        "saida": "Para cada caso de teste imprima B+1 linhas. Na i-ésima linha da saída escreva os novos companheiros formados por remover da linha de ataque os soldados que acabaram de ser mortos de acordo com o i-ésimo relatório de baixa. Ou seja, para cada relatório de baixa 'L R', imprima o primeiro soldado sobrevivente a esquerda de L, e o primeiro soldado sobrevivente a direita de R. Para cada direção, imprima o caractere '*' (asterisco) se não existe soldado sobrevivente naquela direção. Imprima uma linha contendo um único caractere '-' (hifen) após cada caso de teste.",
        "descricao": "Nlogonia está lutando uma guerra implacável contra seu país vizinho Cubicônia. O General Chefe do Exército da Nlogônia decidiu atacar o inimigo com uma formação linear de soldados, que avançariam juntos até conquistar o país vizinho. Antes de lutar, o General Chefe ordenou que cada soldado na linha de ataque, além de proteger a si mesmo e atacar, deveria também proteger seus dois vizinhos (mais próximos) na linha, se tais vizinhos existissem (porque o soldado mais a esquerda não possui um vizinho mais a esquerda e o soldado mais a direita não possui um vizinho mais a direita). O General Chefe também disse aos soldados que proteger seus companheiros era muito importante para previnir que a linha de ataque fosse quebrada. Tão importante que, se o companheiro a esquerda ou a direita de um soldado é morto, então o próximo soldado vivo a esquerda ou a direita daquele soldado, respectivamente, deveria se tornar seu companheiro. A batalha é violenta, e muitos soldados na linha de ataque estão sendo mortos por tiros, granadas e bombas. Mas seguindo as ordens do General Chefe, imediatamente após tomar conhecimento das baixas na linha de ataque, a divisão de sistemas de informação do Exército tem que informar aos soldados quem são seus novos companheiros. ​Serão dados o número de soldados na linha de ataque, e uma sequencia de relatórios de baixa. Cada relatório de baixa descreve um grupo de soldados contíguos na linha de ataque que acabaram de ser mortos na batalha. Escreva um programa que, para cada relatório de baixa, imprime os novos companheiros formados.",
        "titulo": "Companheiros de Exército",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha da entrada contém dois inteiros S e B representando respectivamente o número de soldados na linhas de ataque, e o número de relatórios de baixa (1 ≤ B ≤ S ≤ 105). Os soldados são identificados por números diferentes de 1 até S, de acordo com usas posições na linha de ataque, sendo que 1 o soldado mais a esquerda e S o soldado mais a direita. Cada uma da B linhas seguintes descrevem um relatório de perda usando dois inteiros L (esquerda) e R (direita), significando que os soldados de L até R foram mortos (1 ≤ L ≤ R ≤ S). Você pode assumir que até o momento aqueles soldados estavam vivos e acabaram de ser mortos. ​O último caso de teste é seguido por uma linha contendo dois zeros."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1147",
        "saida": "Para cada teste de caso de entrada, seu programa deve imprimir uma única linha, contendo a seguinte descrição: Caso de Teste #Y: X movimento(s). onde Y representa o número do respectivo caso de teste, e X representa a quantidade de movimentos possíveis ao cavalo realizar, em uma única rodada, sem que fique sobre ataque de um ou mais peões.",
        "descricao": "Seu amigo Pedro está aprendendo a jogar xadrez. Mas ele ainda não tem segurança de como pode movimentar o Cavalo. Desta forma, ele solicitou a você que desenvolvesse um programa que calcule, em apenas uma jogada, o número de distintos movimentos que o cavalo pode realizar, sem que o mesmo fique sobre o ataque de qualquer um dos 8 peões. Os movimentos do cavalo e dos peões são realizados conforme o jogo de xadrez tradicional, ou seja, o cavalo pode somente andar em “L”, e os peões atacar somente para frente em diagonal. Segue abaixo um exemplo: Na imagem apresentada, das 8 distintas posições que o cavalo pode movimentar-se no tabuleiro, 2 delas estão sobre ataque (6b e 3e). Nas demais casas, o cavalo pode movimentar-se seguramente, conseguindo fugir do ataque de qualquer um dos peões. Note que na casa 2b já existe um peão, porém ainda é uma jogada válida, já que o cavalo pode movimentar-se nessa mesma casa e “matar” o peão. Portanto, para o exemplo apresentado, o número de movimentos seguros para o cavalo realizar são 6. Vale lembrar que os peões pretos somente podem se movimentar de cima para baixo no tabuleiro, ou seja, da linha 7 até a linha 1, não sendo permitido o seu retorno.",
        "titulo": "Fuga do Cavalo",
        "entrada": "A entrada consiste de diversos casos de teste. Cada caso de teste consiste em 9 linhas de entrada. A primeira linha indica a posição inicial do cavalo. As demais 8 linhas, representam as respectivas posições dos peões. O final da entrada consiste em uma única linha contendo somente o valor 0 (zero)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2214",
        "saida": "For each test case, display the case number followed by one line for each query containing the length in km of the shortest flight path between airport s and t, subject to the fuel constraint c. Display the length accurate to three decimal places. If there is no permissible path between the two airports, then display the word impossible instead. You may assume the answer is numerically stable for perturbations of up to 0.1 km of R or c.",
        "descricao": "Commercial flights are statistically quite safe (in terms of number of deaths per passenger-kilometer, only going to the moon is safer). But there are still reasons for precautions and safety regulations. An early such rule was the so-called “60-minute rule,” which required that a two-engine plane must always be within 60 minutes of the nearest adequate airport along its entire flight path. A variety of similar rules have existed, but at their core, they remain the same: the flight path can not take the airplane more than a certain maximum allowed distance from the nearest airport. With these restrictions, planes cannot always use a direct route for flying from one airport to another. In this problem we will compute the shortest flight path between two airports while adhering to a maximum allowed distance rule. In the figure below, which illustrates the first sample test case, any flight route has to stay within the three circles. Thus a plane going from airport 2 to airport 3 has to detour from the direct route via the region around airport 1. Note that the plane would not necessarily have to go to airport 1 itself. Things are further complicated by the fact that planes have limited fuel supply, and to go longer distances they may need to make a stopover at intermediate airports. Thus, depending on the fuel capacity, a plane going from airport 2 to airport 3 in the figure might have to stop over at airport 1 (or the fuel capacity might be too low even to go to airport 1, in which case the trip would be impossible to make). We make the following simplifying assumptions: The surface of the earth is a sphere of radius 6370 km. Both time and fuel consumption are directly proportional to distance traveled. In other words we are interested only in total distance traveled. The difference in distance caused by planes flying at different altitudes is negligible. Thus, effectively, we assume them to be flying along the earth’s surface. A plane may stop for refueling at as many intermediate airports as needed, each time getting a full tank.",
        "titulo": "Shortest Flight Path",
        "entrada": "The first line of each test case contains two integers N and R, where 2 ≤ N ≤ 25 is the number of airports and 1 ≤ R ≤ 10 000 is the maximum allowed flight distance (in km) from the nearest airport. Each of the next N lines contains two integers φ, θ satisfying 0 ≤ φ < 360 and −90 ≤ θ ≤ 90, the longitude and latitude (respectively) of an airport, in degrees. The airports are numbered according to their order in the input starting from one. No two airports are at the same position. Following this is a line containing an integer Q, satisfying 1 ≤ Q ≤ 100. Each of the next Q lines contains three integers s, t, c satisfying 1 ≤ s, t ≤ N, s != t, and 1 ≤ c ≤ 50 000, indicating a plane going from airport s to airport t with a fuel capacity yielding a range of c km."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2070",
        "saida": "Sendo M o menor tamanho de uma sequência Bolada para os dados de entrada. Imprima uma única linha contendo M e a quantidade de sequências Boladas de tamanho M.",
        "descricao": "Dado um inteiro K e 3 sequências S1, S2 e S3, chamamos de sequência Bolada, uma sequência constituída de inteiros positivos menores ou iguais a K e que não é subsequência de S1, S2 ou S3. Lembrando que uma subsequência é uma sequência que pode ser derivada de outra sequência por exclusão de alguns elementos, sem alterar a ordem dos elementos restantes. Por exemplo, para K = 3, S1 = , S2 = e S3 = , todas as sequências possíveis de tamanho 1 (, e ) não são sequências Boladas, pois todas são subsequências de S1, S2 e S3. Analisando todas as sequências possíveis de tamanho 2 para K = 3, temos 9 sequências: não é subsequência de S2, logo é uma sequência Bolada; é subsequência das 3 sequências; não é subsequência de S2, logo é uma sequência Bolada; é subsequência das 3 sequências; é subsequência das 3 sequências; é subsequência das 3 sequências; é subsequência das 3 sequências; é subsequência das 3 sequências; não é subsequência de S1 e S2, logo é uma sequência Bolada; Assim, o tamanho da menor sequência Bolada, para esse exemplo, é igual a 2. Também concluímos que existem 3 sequências Boladas de tamanho 2.",
        "titulo": "Contando Sequências Boladas",
        "entrada": "A primeira linha da entrada é constituída de 4 inteiros K, L1, L2 e L3, representando, respectivamente, o inteiro K e os tamanhos das sequências S1, S2 e S3 (1 ≤ K ≤ 20 e 1 ≤ L1, L2 e L3 ≤ 200). A segunda linha é constituída de L1 inteiros, representando os elementos da sequência S1. A terceira linha é constituída de L2 inteiros, representando os elementos da sequência S2. A quarta linha é constituída de L3 inteiros, representando os elementos da sequência S3. Considere que todos os elementos das sequências S1, S2 e S3 são inteiros positivos menores ou iguais a K."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1663",
        "saida": "Para cada caso de teste imprima se a permutação é ambígua ou não, de acordo com o formato mostrado no exemplo de saída.",
        "descricao": "Alguns problemas de competições de programação são mesmo melindrosos: não apenas exigem um formato de saída diferente do que você podia esperar, mas também o exemplo de saída não mostra a diferença. Por exemplo, vejamos as permutações. Uma permutação dos inteiros de 1 a n é uma ordenação desses inteiros. Então a maneira natural de se representar uma permutação é listar os inteiros nessa ordem. Para n = 5, uma permutação seria 2, 3, 4, 5, 1. Entretanto, há outra possibilidade de representar-se uma permutação: Cria-se uma lista de números onde o i-ésimo número é a posição do inteiro i na permutação. Chamemos essa segunda possibilidade de uma permutação inversa. A permutação inversa da sequência acima é 5, 1, 2, 3, 4. Uma permutação ambígua é uma permutação que não pode distinguida de sua permutação inversa. A permutação 1, 4, 3, 2, por exemplo, é ambígua, porque sua permutação inversa é a mesma. Para se livrar desses irritantes exemplos de casos de teste, você deve escrever um programa que detecta se a permutação dada é ambígua ou não.",
        "titulo": "Permutações Ambíguas",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste contém um inteiro n (1 ≤ n ≤ 100000). A linha seguinte contém uma permutação de inteiros 1 a n. Há exatamente um caractere de espaço entre inteiros consecutivos. Assuma que todo inteiro entre 1 e n aparece exatamente uma vez na permutação. O último caso de teste é seguido por uma linha que contém um zero."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1576",
        "saida": "A saída deve consistir de um vetor que descreve a linha do horizonte, como mostrado no exemplo acima. No vetor da linha do horizonte (v1, v2, v3, . . . , vn−2, vn−1, vn), o vi tal que i é um número par representa a linha horizontal (altura). O vi tal que i é um número ímpar representa a linha vertical (coordenada x). O vetor deve representar o \"caminho\" tomado, por exemplo, por um inseto iniciando na menor coordenada x e viajando horizontalmente e verticalmente sobre todas as linhas que definem a linha do horizonte (skyline). Assim, a última entrada de todos os vetores da linha do horizonte será um 0 (zero).",
        "descricao": "Com o advento das estações de trabalho de alta velocidade gráfica, CAD (desenho assistido por computador ou DAC) e outras áreas (CAM, design VLSI) têm feito uso cada fez mais eficaz dos computadores. Um dos problemas com imagens de desenho é a eliminação de linhas ocultas - linhas obscurecidas por outras partes do desenho. Você deverá desenvolver um programa para ajudar um arquiteto no desenho da linha do horizonte de uma cidade, dado a localização dos edifícios da cidade. Para tornar o problema tratável, todos os edifícios possuem formas retangulares e eles compartilham uma base comum (a cidade em que eles são construídos é muito plana). A cidade também é vista como bidimensional. Um edifício é especificado por uma tripla ordenada (Li, Hi, Ri), onde Li e Ri são coordenadas esquerda e direita, repectivamente, do edifício i e Hi é a altura do edifício. No diagrama abaixo os edifícios são mostrados à esquerda com triplas (1,11,5),(2,6,7),(3,13,9),(12,7,16),(14,3,25),(19,18,22),(23,13,29),(24,4,28) a linha do horizonte, exibida à direita, é representada pela sequência: (1,11,3,13,9,0,12,7,16,3,19,18,22,3,23,13,29,0)",
        "titulo": "O Problema da Linha do Horizonte",
        "entrada": "A entrada é uma sequência de triplas de edifícios. Todas as coordenadas dos edifícios são inteiros menores que 10000 e haverá ao menos um e não mais do que 5000 edifícios no arquivo de entrada. Cada tripla de edifícios está em uma linha por si só no arquivo de entrada. Todos os inteiros em uma tripla são separados por um ou mais espaços. As triplas serão ordenadas por Li, a coordenada x à esquerda do edifício, de modo que o edifício com a menor coordenada x à esquerda é o primeiro no arquivo de entrada."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2195",
        "saida": "For each test case, display a single line beginning with the case number. If there is a solution, display the maximum number of widgets that can be added to the chip. Display “impossible” if there is no solution. Follow the format of the sample output.",
        "descricao": "A prominent microprocessor company has enlisted your help to lay out some interchangeable components (widgets) on some of their computer chips. Each chip’s design is an N ×N square of slots. One slot can hold a single component, and you are to try to fit in as many widgets as possible. Modern processor designs are complex, of course. You unfortunately have several restrictions: Some of the slots are disabled. Some of the slots are already occupied by other components and cannot be used for widgets. There are sibling memory buses connected to the horizontal and vertical edges of the chip and their bandwidth loads need to match. As such, there must be exactly as many components in the first row as in the first column, exactly as many in the second row as in the second column, and so on. Component counts include both the components already specified on the chip and the added widgets. Similarly, the power supply is connected at the end of each row and column. To avoid hot spots, any given row or column must have no more than A/B of the total components on the chip for a given A and B. A specification for a chip is N lines of N characters, where ‘.’ indicates an open slot, ‘/’ indicates a disabled slot, and ‘C’ indicates a slot already occupied by a component. For example: CC/.. ./.// ..C.C /.C.. /./C/ If no more than 3/10 of the components may be in any one row or column, the maximum number of widgets that can be added to this 5 × 5 chip is 7. A possible arrangement is below, where ‘W’ indicates a widget added in an open slot. CC/W. W/W// W.C.C /.CWW /W/C/",
        "titulo": "Chips Challenge",
        "entrada": "The input consists of several test cases. Each case starts with a line containing three integers: The size of the chip N (1 ≤ N ≤ 40), and A and B (1 ≤ B ≤ 1000, 0 ≤ A ≤ B) as described above. Each of the following N lines contains N characters describing the slots, one of ‘.’, ‘/’ or ‘C’, as described above. The last test case is followed by a line containing three zeros."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1794",
        "saida": "Imprima a palavra \"possivel\" caso seja possível lavar e secar suas peças de roupa seguindo as regras descritas no enunciado, ou \"impossivel\" caso contrário.",
        "descricao": "Cansada de lavar suas roupas sujas, sua mãe decidiu que a partir de agora quem lava suas roupas é você. Na lavanderia da sua casa existe uma lavadora e uma secadora de roupas, cada uma com um limite mínimo e máximo de peças a serem lavadas e secadas por vez. Assim sendo, a lavadora só deve ser usada se forem colocadas no mínimo LA e no máximo LB peças dentro dela, e semelhantemente a secadora só deve ser usada se forem colocadas no mínimo SA e no máximo SB peças dentro dela. Você tem atualmente N peças de roupa a serem lavadas e secadas, e quer descobrir se é possível usar a lavadora e secadora para lavar e secar todas as suas peças, seguindo as regras acima.",
        "titulo": "Lavanderia",
        "entrada": "Na primeira linha da entrada haverá um inteiro N (1 ≤ N ≤ 100). Na segunda linha da entrada haverá dois inteiros LA e LB (1 ≤ LA < LB ≤ 100). Na terceira linha da entrada haverá dois inteiros SA e SB (1 ≤ SA < SB ≤ 100)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2021",
        "saida": "Para cada caso imprima a frase \"Lights: X\" sendo X o total de luzes apagadas que Jon deve comprar.",
        "descricao": "Chegou o Natal e é época de organizar a casa para refletir o clima de festividades do fim de ano. A familia de Jon começou a enfeitar a casa e sua função é pendurar inúmeras luzes de natal ao redor da casa no formato de um retângulo. No entanto essas luzes são um pouco chatas, após guardá-las durante todo o ano algumas acabam quebradas e outras queimadas. O modelo de luzes que ele está usando é no formato de retângulo. Jon vai comprar todas as luzes avulsas que precisam ser substituidas porque ele não sabe que a primeira coluna das luzes funciona de forma paralela enquanto que pra cada linha elas funcionam em série fazendo-o pensar que todas a partir de um determinado ponto estão queimadas. O que ele faz na verdade é contar, em ordem, o numero das luzes até achar aquela que não acende mais e então anota o seu número num papel e então pula para a próxima linha recomeçando a contagem. Por exemplo numa rede 5x5 existem 2 posições que ele encontrou 5 e 1, isso teria a seguinte representação: ****- - - - - - ***** ***** ***** Logo a quantidade que Jon deve comprar é 6. Sua tarefa é dizer quantas luzes estão apagadas a partir das posições que Jon anotou para que ele possa comprar elas avulsas.",
        "titulo": "Luzes de Natal",
        "entrada": "A entrada consiste em multiplas entradas que começam com uma linha com 3 inteiros M, N e P (2 ≤ M, N ≤ 500 e 1 ≤ P ≤ N) que representam respectivamente altura, largura e quantidade de posições que ele encontrou. As próximas P linhas contém um número Q (1 ≤ Q ≤ M*N) que são as posições de cada luz apagada. A entrada termina quando M = N = P = 0."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1515",
        "saida": "Para cada caso de teste, deverá ser impressa uma linha, contendo o nome do planeta da primeira civilização a enviar a mensagem Hello Galaxy. Pode-se supor que não haverá empates.",
        "descricao": "Atualmente, no ano de 2114, o conhecimento de que não estamos sozinhos no universo não é novidade, porém um século atrás isto ainda era um mistério. Diversas civilizações na Via Láctea já emitiram algum tipo de sinal provando sua existência, e outras até estabeleceram um contato aberto com a Terra em busca de informações sobre a tal Árvore Hexagonária (afinal, estamos em 2114). Rafael tem muito interesse pelo assunto, e em um trabalho para a escola se encarregou de descobrir qual foi a civilização mais antiga que enviou um Hello Galaxy para toda a galáxia. Hello Galaxy nada mais é que o primeiro dos passos do Protocolo de Iniciação na Sociedade Via Láctea, PISVL, garantindo que a nova civilização possa entrar em contato com as demais caso necessário. A mensagem Hello Galaxy traz consigo duas informações básicas: o texto “Hello Galaxy”, que faz parte da tradição, e o nome do planeta da civilização que enviou a mensagem. O CMSVL, Centro de Monitoramento da Sociedade Via Láctea, instalado, por algum motivo, na Terra, recebe tais mensagens, armazenando em um registro o ano em que foi recebida a mensagem e a quantidade de anos que tal mensagem levou para chegar até ali. A tarefa de Rafael é simples: descobrir quem foi a primeira civilização a enviar a mensagem Hello Galaxy.",
        "titulo": "Hello Galaxy",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (1 ≤ N ≤ 100), que indica quantas mensagens Hello Galaxy foram coletados por Rafael em sua pesquisa. Em seguida haverão N linhas, cada uma representando uma mensagem. Cada mensagem é representada pelo nome do planeta da civilização, contendo entre 1 e 50 caracteres (somente letras), e dois inteiros A e T (2014 ≤ A ≤ 2113, 1 ≤ T ≤ 1000), representando, respectivamente, o ano em que a mensagem foi recebida no planeta Terra, e a quantidade de anos que tal mensagem levou para chegar do planeta de origem até o planeta Terra. O último caso de teste é indicado quando N = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1369",
        "saida": "Para cada caso de teste seu programa deve produzir uma linha na saída. Se todas as operações de inserção forem executadas sem erro, seu programa deve produzir uma linha contendo uma estimativa aproximada do estado do disco, apresentada como se segue. Divida o número de bytes do disco em oito blocos contíguos de mesmo tamanho. Para cada um dos oito blocos seu programa deve verificar a porcentagem P de bytes livres daquele bloco, e apresentar a estimativa do estado final no formato [C] [C] [C] [C] [C] [C] [C] [C] onde C é ' ', '-' ou '#', dependendo se 75 < P ≤ 100, 25 < P ≤ 75 ou 0 ≤ P ≤ 25, respectivamente. Caso um arquivo não possa ser inserido por falta de espaço, seu programa deve produzir uma linha contendo a expressão ERRO: disco cheio; nesse caso, operações subsequentes do caso de teste devem ser ignoradas.",
        "descricao": "É bem verdade que a maioria das pessoas não se importa muito com o que ocorre dentro de um computador, desde que ele execute as tarefas que devem ser desempenhadas. Existem, no entanto, alguns poucos nerds que sentem prazer em acompanhar o movimento de bits e bytes dentro da memória do computador. É para esse público, constituído principalmente de adolescentes, que a multinacional de sofware ACM (Abstractions of Concrete Machines) deseja desenvolver um sistema que acompanhe e produza um relatório das operações efetuadas em um disco rígido. Um disco rígido é composto de uma sequência de células atômicas de armazenamento, cada uma de tamanho 1Kb. Especificamente, a ACM deseja acompanhar três tipos de operações: insere NOME T Insere no disco o arquivo NOME, de tamanho T. Você pode supor que um arquivo com esse nome não existe ainda no disco. O tamanho T de um arquivo é dado na forma XKb, XMb, ou XGb, onde X é um inteiro (0 < X <= 1023). NOME é uma cadeia de caracteres com comprimento máximo 10. remove NOME Remove o arquivo NOME do disco. Se um arquivo com esse nome não existe, não faz nada; otimiza Compacta o disco, deslocando os arquivos existentes na direção do início do disco, eliminando espaços livres entre dois arquivos subsequentes, e preservando a ordem em que os arquivos aparecem no disco, de modo a deixar um espaço de memória livre no final do disco. A capacidade de um disco é sempre um número múltiplo de 8Kb. No início, o disco está vazio, ou seja, contém um bloco livre do tamanho da capacidade do disco. Um arquivo é sempre armazenado em um bloco de células de armazenamento contíguas. O arquivo a ser inserido deve ser sempre colocado no início do menor bloco livre cujo tamanho é maior ou igual ao tamanho do arquivo. Se mais de um bloco livre é igualmente adequado, escolha o mais próximo do começo do disco. Caso não seja possível inserir o arquivo por falta de um bloco livre suficientemente grande, deve-se executar automaticamente o comando otimiza. Se após a otimização ainda não for possível inserir o arquivo, uma mensagem de erro deve ser produzida. No caso de todas as operações serem executas sem erro, seu programa deve produzir uma estimativa aproximada do estado final do disco, conforme descrito abaixo. Lembre que 1Mb corresponde a 1024Kb, enquanto 1Gb corresponde a 1024Mb.",
        "titulo": "Gerente de Espaço",
        "entrada": "A entrada é constituída de vários casos de teste. A primeira linha de um caso de teste contém um único inteiro N indicando o número de operações no disco (0 < N ≤ 10000). A segunda linha de um caso de teste contém a descrição do tamanho do disco, composta por um inteiro D (0 < D ≤ 1023), seguido de um especificador de unidade; o especificador de unidade é uma cadeia de dois caracteres no formato Kb, Mb ou Gb. Cada uma das N linhas seguintes contém a descrição de uma operação no disco (insere, remove ou otimiza, conforme descrito acima). O final da entrada é indicado por N = 0."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1471",
        "saida": "Seu programa deve produzir uma única linha para cada caso de teste, contendo os identificadores dos voluntários que não retornaram do mergulho, na ordem crescente de suas identificações. Deixe um espaço em branco após cada identificador (note que isto significa que deve haver um espaço em branco também após o último identificador). Se todos os voluntários retornaram do mergulho, imprima apenas o caractere ‘*’ (asterisco).",
        "descricao": "O recente terremoto em Nlogônia não chegou a afetar muito as edificações da capital, principal epicentro do abalo. Mas os cientistas detectaram que o principal dique de contenção teve um dano significativo na sua parte subterrânea que, se não for consertado rapidamente, pode causar o seu desmoronamento, com a consequente inundação de toda a capital. O conserto deve ser feito por mergulhadores, a uma grande profundidade, em condições extremamente difíceis e perigosas. Mas como é a sobrevivência da própria cidade que está em jogo, seus moradores acudiram em grande número como voluntários para essa perigosa missão. Como é tradicional em missões perigosas, cada mergulhador recebeu no início do mergulho uma pequena placa com um número de identificação. Ao terminar o mergulho, os voluntários devolviam a placa de identificação, colocando-a em um repositório. O dique voltou a ser seguro, mas aparentemente alguns voluntários não voltaram do mergulho. Você foi contratado para a penosa tarefa de, dadas as placas colocadas no repositório, determinar quais voluntários perderam a vida salvando a cidade.",
        "titulo": "Mergulho",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é composto de duas linhas. A primeira linha contém dois inteiros N e R ( 1 ≤ R ≤ N ≤ 104), indicando respectivamente o número de voluntários que mergulhou e o número de voluntários que retornou do mergulho. Os voluntários são identificados por números de 1 a N. A segunda linha da entrada contém R inteiros, indicando os voluntários que retornaram do mergulho (ao menos um voluntário retorna do mergulho)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1521",
        "saida": "Para cada caso de teste, deverá ser impressa uma linha, contendo um inteiro, indicando qual o aluno que terminou se entregando.",
        "descricao": "Guerra de bolinha de papel é uma das brincadeiras mais clássicas do tempo do colegial, e algumas pessoas gostam tanto que iniciam essas guerras em plena faculdade. As regras são simples: Mire e acerte alguém com uma bola de papel. Os professores, por outro lado, não acham tal brincadeira tão produtiva, uma vez que isso tira a atenção da aula sendo dada. Pior ainda, é quando um aluno acerta o professor com a bola de papel. O professor dessa vez decidiu investigar quem participava da brincadeira, e disse que estaria satisfeito se ao menos um deles fosse descoberto, para servir de exemplo aos outros. O processo de investigação do professor acontece da seguinte forma: inicia-se perguntando a um aluno K se ele participava da brincadeira ou, caso não participasse, que dissesse quem participava. Se o aluno K se entregasse, a investigação terminaria. Caso contrário, ele diria o número de outro aluno, e o processo se repetiria com o professor fazendo a pergunta para este novo aluno, até que alguém se entregue. O professor disponibilizou uma lista contendo a resposta de todos os alunos para a sua pergunta, e pediu sua ajuda para descobrir, se ele iniciasse a investigação no aluno K, quem acabaria se entregando? É garantido que alguém acabará se entregando.",
        "titulo": "O Culpado",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (3 ≤ N ≤ 50). A seguir, haverão N inteiros ni (1 ≤ ni ≤ N, para todo 1 ≤ i ≤ N), onde cada inteiro ni significa que o aluno i entregou o aluno ni. Ou seja, se o terceiro número for 4, significa que o terceiro aluno entregou o quarto aluno. Se, ao contrário, o número for o dele mesmo, significa que ele se entregou. Em seguida haverá um inteiro K (1 ≤ K ≤ N), indicando quem foi o aluno com o qual o professor iniciou sua investigação. O último caso de teste é identificado quando N = 0, o qual não deve ser processado."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1216",
        "saida": "A saída deve ser um único valor com uma casa decimal (utilize uma variável de dupla precisão - double) indicando a distância média entre a casa de Mangojata e de seus amigos, conforme exemplo abaixo.",
        "descricao": "Mangojata está aprendendo programação. Ela acha tudo muito fácil, muito simples. Ela está prestes a fazer um pequeno programa que leia o nome dos seus amigos e a distância de sua casa até cada um deles. Desta forma, ela quer simplesmente calcular qual é a distância média que deve ser percorrida para chegar na casa de qualquer um de seus amigos (em metros). Porém Aristoclenes, que é um programador mais experiente, lhe alertou que às vezes o que parece muito simples tem lá seus detalhes, dependendo da linguagem que é utilizada para implementação.",
        "titulo": "Getline One",
        "entrada": "A entrada contém vários casos de teste e termina com EOF (Fim de Arquivo). Cada caso de teste consiste de duas linhas de entrada. A primeira linha contém o nome de um amigo de Mangojata e a segunda linha contém um valor inteiro que indica a distância aproximada da casa deste amigo até a casa de Mangojata."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2197",
        "saida": "For each test case, display its case number followed by the largest number of dollars that ACM can have at the end of day D + 1. Follow the format of the sample output.",
        "descricao": "You are the director of Arbitrarily Complex Machines (ACM for short), a company producing advanced machinery using even more advanced machinery. The old production machinery has broken down, so you need to buy new production machines for the company. Your goal is to make as much money as possible during the restructuring period. During this period you will be able to buy and sell machines and operate them for profit while ACM owns them. Due to space restrictions, ACM can own at most one machine at a time. During the restructuring period, there will be several machines for sale. Being an expert in the advanced machines market, you already know the price Pi and the availability day Di for each machines Mi. Note that if you do not buy machine Mi on day Di, then somebody else will buy it and it will not be available later. Needless to say, you cannot buy a machine if ACM has less money than the price of the machine. If you buy a machine Mi on day Di , then ACM can operate it starting on day Di + 1. Each day that the machine operates, it produces a profit of Gi dollars for the company. You may decide to sell a machine to reclaim a part of its purchase price any day after you’ve bought it. Each machine has a resale price Ri for which it may be resold to the market. You cannot operate a machine on the day that you sell it, but you may sell a machine and use the proceeds to buy a new machine on the same day. Once the restructuring period ends, ACM will sell any machine that it still owns. Your task is to maximize the amount of money that ACM makes during the restructuring.",
        "titulo": "Machine Works",
        "entrada": "The input consists of several test cases. Each test case starts with a line containing three positive integers N, C, and D. N is the number of machines for sale (N ≤ 105 ), C is the number of dollars with which the company begins the restructuring (C ≤ 109 ), and D is the number of days that the restructuring lasts (D ≤ 109 ). Each of the next N lines describes a single machine for sale. Each line contains four integers Di , Pi , Ri and Gi , denoting (respectively) the day on which the machine is for sale, the dollar price for which it may be bought, the dollar price for which it may be resold and the daily profit generated by operating the machine. These numbers satisfy 1 ≤ Di ≤ D, 1 ≤ Ri < Pi ≤ 109 and 1 ≤ Gi ≤ 109. The last test case is followed by a line containing three zeros."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2116",
        "saida": "A saída do seu programa deve conter apenas uma linha informando a resposta final do jogo.",
        "descricao": "Juilherme e Jogério, gostam muito de jogos matemáticos. Juilherme acabou de criar mais um jogo matemático para eles se divertirem enquanto assistem essa competição online. O jogo consiste nos seguintes passos: 1) Juilherme escolhe um número N e Jogério escolhe um número M. 2) Juilherme e Jogério devem então achar dois números primos P1 e P2, de tal forma que eles sejam o mais próximo possível do que numero N e M, respectivamente. Além disso P1 deve ser menor ou igual a N e P2 deve ser menor ou igual a M. 3) A resposta final do desafio é encontrar a multiplicacão de P1 e P2. Quem achar a resposta primeiro é o vencedor. Como eles irão tentar achar a resposta o mais rápido possível, algumas vezes chegando a resultados incorretos, eles precisam de um programa que entregue a resposta final do jogo, para que possa ser comparada com a resposta encontrada por eles. Usando as informacoes do jogo, faça um programa que dado os números N e M imprima o resultado final.",
        "titulo": "Diversão dos Alunos",
        "entrada": "A entrada do programa consiste de apenas uma linha com N e M (2 <= N, M <= 1000)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1796",
        "saida": "Seu programa deve imprimir \"Y\" caso a maioria da população esteja de acordo com o cenário econômico. Caso contrário imprima \"N\"",
        "descricao": "Ultimamente a economia brasileira tornou-se o assunto de todos os jornais. A população brasileira têm diferentes opiniões sobre o cenário econômico atual. Sua tarefa é fazer uma pesquisa para saber se a maioria da população está ou não satisfeita com o cenário econômico atual.",
        "titulo": "Economia Brasileira",
        "entrada": "A primeira linha contém um inteiro Q (4 &leq; Q &leq; 233000) representando o número de pessoas que participaram da pesquisa. A segunda linha contém Q inteiros Vi (0 &leq;Vi &leq; 1, 1 &leq; i &leq; Q), representando a opinião do i-ésimo cidadão Brasileiro sobre o cenário econômico atual. Sendo \"0\" os que consideram o cenário atual satisfatório e \"1\" os que consideram não satisfatório."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1791",
        "saida": "Imprima em uma única linha para cada caso de teste a \"Potencia\" (sem aspas) caso a matriz possa ser transformada, ou \"Nao Potencia\" (sem aspas) caso contrário.",
        "descricao": "Uma matriz é uma Matriz de Potências se atende 3 pré-requisitos: 1. É uma matriz quadrada. 2. A primeira coluna é formada apenas por 1's. 3. Para todo elemento (i, j) com j > 1, (i, j) = (i, 2)j-1 e (i, j) é diferente de zero. Por exemplo: Sua tarefa é descobrir se uma matriz quadrada pode ser transformada em uma Matriz de Potências utilizando dois tipos de operações: 1. Troca(x, y): Inverte as posições de todos os elementos das colunas x e y da matriz. 2. Transposta(): A matriz é transposta. Por exemplo: Logo P pode ser transformada em uma Matriz de Potência.",
        "titulo": "Descobrindo uma Matriz",
        "entrada": "A entrada consiste de múltiplas linhas. A primeira linha contém um inteiro C que indica o número de casos de teste. Em seguida, em cada caso de teste a primeira linha contém um inteiro N (1 < N < 8) que indica o número de linhas e colunas da matriz, em seguida N linhas, cada uma com N inteiros d (􀀀-50000 < d < 50000) representando os elementos da matriz ."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1349",
        "saida": "Para cada caso de teste seu programa deverá imprimir apenas uma linha contendo a taxa de precisão da imagem correspondente. A taxa de precisão deverá ser impressa como um número real com dois dígitos de precisão, e o último dígito decimal deverá ser arredondado. A entrada não conterá nenhum caso de teste onde diferenças em arredondamento serão significantes.",
        "descricao": "Pequenos e baratos scanners industriais podem apenas ler imagens em escala cinza, onde são imagens com pixels de valores de intensidade em um raio de inteiros [0, 255]. Uma companhia que fabrica máquinas de venda automáticas deseja utilizar estes pequenos scanners para validar os símbolos usados em suas máquinas. Símbolos são pequenos chips quadrados de metal com buracos estrategicamente colocados. Símbolos com diferentes buracos são utilizados para diferentes valores. Figura 1: Símbolo para uma máquina de vendas. Um scanner vai produzir uma imagem do símbolo introduzido pelo cliente e o programa de computador vai validar isso. Na imagem produzida pelo scanner, metal vai aparecer como pixels escuros (valores próximos a 0) e buracos vão aparecer como pixels mais claros (valores próximos a 255). Há dois problemas que devem ser resolvidos no processo de validação. O primeiro problema é que, visto que o símbolo é um quadrado, um cliente pode introduzi-lo na máquina de diversas maneiras. O segundo problema é que, graças à baixa qualidade da imagem gerada por aqueles scanners baratos, as mesmas poderão conter “ruídos” (erros). Para validar o símbolo, a máquina deverá comparar o resultado do scanner com uma “imagem padrão” do símbolo, previamente produzida usando um scanner de alta qualidade. Você deverá escrever um programa o qual, dada a imagem padrão de um símbolo e uma imagem produzida pelo scanner, determina a taxa de precisão a qual o símbolo obterá. A taxa de precisão é a porcentagem de pixels da imagem do scanner os quais o valor da intensidade difere em 100 ou menos dos pixels da imagem padrão. Como o símbolo pode ter sido introduzido de diversas maneiras, nós estamos interessados na maior taxa de precisão possível, considerando todas as posições do símbolo.",
        "titulo": "Efeito Ruído",
        "entrada": "Seu programa deverá processar diversos casos de teste. Cada caso de teste especifica o tamanho da imagem do símbolo e os valores dos pixels da imagem padrão e da imagem do scanner. A primeira linha de um caso de teste contém um inteiro L que indica o tamanho, em pixels, da imagem (1 ≤ L ≤ 400). As próximas L linhas irão conter L inteiros cada, representando os valores dos pixels das linhas da imagem padrão. Após estas, as próximas L linhas irão conter os valores dos pixels das linhas da imagem do scanner. O final da entrada é indicado por L = 0."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1670",
        "saida": "Para cada caso de teste seu programa deve gerar uma tabela verdade para a proposição denotada. Comece a tabela verdade repetindo a linha de entrada. Avalie a proposição (e as suas subfórmulas) para todas as atribuições para as suas variáveis, e use uma linha para cada atribuição. A linha deve ter o mesmo comprimento que a linha de entrada correspondente e deve conter apenas espaços e os caracteres 0 e 1. Imprima uma linha em branco após cada caso de teste. Deixe os símbolos de proposição (s1, ..., sn) na proposição denotada classificados em ordem alfabética. Então, todas as atribuições de 0 a s1 devem preceder as atribuições de 1 a s1. Dentro de cada um destes blocos de atribuições, todas as atribuições de 0 a s2 devem preceder as atribuições de 1 a s2, e assim por diante.",
        "descricao": "Proposições são fórmulas lógicas que consistem em símbolos de proposição e operadores conectivos. Eles são definidos recursivamente pelas seguintes regras: Todos os símbolos de proposição (neste problema, caracteres alfabéticos minúsculos, por exemplo, a e z) são proposições. Se P é uma proposição, (!P) é uma proposição, e P é uma subfórmula direta dela. Se P e Q são proposições, (P&Q), (P|Q), (P-->Q), e (PQ) são proposições, e P e Q são subfórmulas diretas delas. Nada mais é uma proposição. As operações !, &, |, -->, e denotam negação, conjunção, disjunção, implicação e equivalência, respectivamente. A proposição P é uma subfórmula de uma proposição R se P=R ou se P é uma subfórmula direta de uma proposição Q e Q é uma subfórmula de R. Seja P uma proposição e atribui-se valores boleanos (isto é, 0 ou 1) a todos os símbolos de proposição que ocorrem em P. Isto induz um valor booleano para todas as subfórmulas de P, de acordo com a semântica padrão dos operadores lógicos: Negação  Conjunção  Disjunção  Implicação  Equivalência !0=1 0&0=0 0|0=0 0-->0=1 00=1 !1=0 0&1=0 0|1=1 0-->1=1 01=0 1&0=0 1|0=1 1-->0=0 10=0 1&1=1 1|1=1 1-->1=1 11=1 Dessa forma, o valor de P pode ser calculado. Este valor depende da escolha da atribuição de valores booleanos aos símbolos proposição. Se P contém n símbolos proposição diferentes, existem 2n atribuições diferentes. Para avaliar todas as tarefas possíveis, podemos utilizar tabelas de verdade. Uma tabela verdade contém uma linha por atribuição (ou seja, 2n linhas no total). Cada linha contém os valores de todas as subfórmulas sob a designação escolhida. O valor de uma subfórmula está alinhado com o símbolo da proposição, se a subfórmula é um símbolo proposição, e, de outra forma, com o centro do operador.",
        "titulo": "Lógica Booleana",
        "entrada": "A entrada contém vários casos de teste, cada um em uma linha separada. Cada caso de teste denota uma proposição e pode conter quantidades arbitrárias de espaços no meio. O arquivo de entrada termina imediatamente após o símbolo de nova linha após o último caso de teste."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1880",
        "saida": "Para cada instância, imprima em uma única linha a sequência crescente das bases, de 2 a 16, para as quais a representação de N é capicua. Se a representação de N não for capicua para nenhuma base entre 2 e 16, imprima -1.",
        "descricao": "Nas ruínas de Wat Phra Si Sanphet (วัดพระศรีสรรเพชญ์) estão inscrições famosas que apenas recentemente tiveram seu significado desvendado. Vários números decoram as ruínas, escritos usando os dígitos tailandeses. Há dois anos, o famoso pesquisador peruano Renzo \"el intrépido\" Morales verificou que a maioria dos números encontrados nas ruínas são capicuas, isto é, representam o mesmo valor se lidos ao contrário. Por exemplo, 171 é capicua, mas 17 não é capicua. Intrigado pela presença de números que não são capicuas na decoração dasruínas, Renzo descobriu que, apesar de esses números não serem capicuas quando representados em base 10 (utilizada na escrita tailandesa), eles são capicuas se representados em uma base diferente. A representação em uma base b > 0 de um número N dado na base 10 é dada pela sequência amam-1...a1a0, tal que 0 ≤ ai ≤ b-1, para todo 0 ≤ i ≤ m, am > 0 e ambm + am-1bm-1 + ... + a1b + a0= N. No exemplo anterior, a representação em base 2 do número 17 é 10001, que é capicua. Para comprovar sua descoberta, Renzo quer que você escreva um programa que recebe um número representado na base 10 e verifica em quais bases, de 2 a 16, sua representação é capicua.",
        "titulo": "Renzo e a Decoração Capicuânica",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de uma única linha contendo um número inteiro N (0 ≤ N < 231) escrito na base 10."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1965",
        "saida": "Seu programa deve imprimir duas linhas, informando na primeira a quantidade de coxinhas de esquerda na embalagem e o preço de cada uma, e na segunda as mesmas informações, mas para as coxinhas de direita. A saída deve obedecer rigorosamente o formato esclarecido nos exemplos abaixo.",
        "descricao": "‘Coxinha’ é o nome dado a uma tradicional comida brasileira que consiste de carne de frango desfiada envolta numa massa e frita. Recentemente, o Sr. Spock, o chefe do Enterprise, um restaurante em Chapecó, ganhou um importante prêmio gastronômico por fazer as coxinhas mais gostosas do mundo. Você devia experimentar uma coxinha do Sr. Spock. Elas são tão maravilhosas que o sabor notoriamente levará você aonde nenhum homem jamais esteve. Mas não é fácil conseguir uma coxinha no Enterprise. A procura por Spock é tanta que é preciso encomendar o pedido com pelo menos 42 dias de antecedência. O Sr. Spock gosta de fazer coxinhas de diferentes tamanhos e formatos. Para moldar uma coxinha, ele primeiro seleciona ao menos duas formas circulares sem fundo de mesma altura mas diâmetros todos distintos. Em seguida, põe uma forma sobre a outra em ordem decrescente de diâmetro da base até o topo, amarrando-as com um barbante na lateral. Finalmente, usa as formas para dar forma à sua coxinha. A primeira e a segunda figuras exibem a estrutura de formas vista respectivamente de cima e de lado. A terceira e a quarta figuras exibem a coxinha resultante, também vista respectivamente de cima e de lado. Visando atender melhor seus clientes, o Enterprise também oferece o serviço de entrega a domicílio. Algo importante que o Sr. Spock descobriu é que, para não perderem seu sabor e crocância, as coxinhas devem ser colocadas na embalagem sequencialmente, uma ao lado da outra, sempre deitadas de modo que as bases fiquem perfeitamente perpendiculares ao fundo da embalagem. Ainda, coxinhas consecutivas na sequência devem sempre ter ou suas bases ou seus topos se tocando, e as partes que se tocam devem sempre ter o mesmo diâmetro. Coxinhas cujos topos apontam para a esquerda são chamadas de ‘coxinhas de esquerda’, aquelas cujos topos apontam para a direita são chamadas ‘coxinhas de direita’, e o Sr. Spock usa a orientação das coxinhas para que o cliente saiba o tipo de tempero no recheio de cada uma. Não importando o tamanho, duas coxinhas são vendidas pelo mesmo preço se e somente se são ambas de esquerda ou ambas de direita. Há sempre ao menos uma coxinha de esquerda e ao menos uma coxinha de direita numa embalagem. A figura abaixo ilustra uma embalagem (linha tracejada) contendo 4 coxinhas (linhas contínuas). Como se pode ver, as coxinhas sempre cabem perfeitamente na embalagem. Você foi contratado para trabalhar na equipe de controle de qualidade do Enterprise. Sua função é pegar as embalagens já cheias, passar as embalagens por um scanner de raio-X e, com base nas medições reportadas pelo scanner, determinar quantas coxinhas de esquerda e quantas de direita há nas embalagens. As medições são feitas da esquerda para a direita, a um espaçamento idêntico à altura das formas usadas na modelagem das coxinhas. Em cada medição é reportada a altura da coxinha dentro da embalagem naquele ponto, mas apenas se o resultado da medição é diferente do resultado da última medição (senão, nada é reportado). Na figura acima, 14 medições são ilustradas pelas linhas pontilhadas. Note que apenas 10 delas são reportadas. Como você é novo na equipe, seus colegas esconderam de você os preços das coxinhas e querem não apenas que você calcule quantas coxinhas de esquerda e quantas coxinhas de direita há na embalagem, mas também que adivinhe o preço das coxinhas de esquerda e o preço das coxinhas de direita. Para tanto, eles apenas lhe contaram qual o preço total das coxinhas na embalagem, qual a diferença entre os preços e o tipo das coxinhas que são mais caras.",
        "titulo": "A Procura por Spock",
        "entrada": "Três linhas compõem a entrada. A primeira linha da entrada consiste de 3 valores, N, D e P, sendo o primeiro um inteiro e os outros fornecidos com dois dígitos após o ponto separador decimal: N (3 ≤ N ≤ 106) representa o número de medições reportadas pelo scanner, D (0.01 ≤ D ≤ 100.00) representa a diferença entre o preço de uma coxinha de esquerda e o preço de uma de direita, e P (0.01 ≤ P ≤ 10000000.00) representa o preço total das coxinhas na embalagem. A segunda linha da entrada consiste de N inteiros positivos não maiores que 30, os quais representam os resultados das medições reportadas. A última linha da entrada consiste unicamente: de uma coxinha de esquerda, representada por , se as coxinhas de esquerda são mais caras que as de direita; ou de uma coxinha de direita, representada por (>, caso contrário."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1467",
        "saida": "Para cada caso de teste, seu programa deve produzir uma única linha, contendo um único caractere. Se o vencedor é Alice o caractere deve ser ‘A’, se o vencedor é Beto o caractere deve ser ‘B’, se o vencedor é Clara o caractere deve ser ‘C’ e se não há vencedor o caractere deve ser ‘*’ (asterisco).",
        "descricao": "Todos devem conhecer o jogo Zerinho ou Um (em algumas regiões também conhecido como Dois ou Um), utilizado para determinar um ganhador entre três ou mais jogadores. Para quem não conhece, o jogo funciona da seguinte maneira. Cada jogador escolhe um valor entre zero ou um; a um comando (geralmente um dos competidores anuncia em voz alta “Zerinho ou... Um!”), todos os participantes mostram o valor escolhido, utilizando uma das mãos: se o valor escolhido foi um, o competidor mostra o dedo indicador estendido; se o valor escolhido foi zero, mostra a mão com todos os dedos fechados. O ganhador é aquele que tiver escolhido um valor diferente de todos os outros; se não há um jogador com valor diferente de todos os outros (por exemplo todos os jogadores escolhem zero, ou um grupo de jogadores escolhe zero e outro grupo escolhe um), não há ganhador. Alice, Beto e Clara são grandes amigos e jogam Zerinho a toda hora: para determinar quem vai comprar a pipoca durante a sessão de cinema, quem vai entrar na piscina primeiro, etc. Jogam tanto que resolveram fazer um plugin no Facebook para jogar Zerinho. Como não sabem programar, dividiram as tarefas entre amigos que sabem, inclusive você. Dados os três valores escolhidos por Alice, Beto e Clara, cada valor zero ou um, escreva um programa que determina se há um ganhador, e nesse caso determina quem é o ganhador.",
        "titulo": "Zerinho ou Um",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste consiste de uma única linha, que contém três inteiros A, B e C (A,B,C só podem ser 0 ou 1), indicando respectivamente os valores escolhidos por Alice, Beto e Clara. O final da entrada é determinado por EOF (End of File)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1980",
        "saida": "Para cada caso de teste você deverá imprimir quantos anagramas são possíveis formar com os caracteres informados.",
        "descricao": "Gabriel é aluno do curso de ciência da computação, ele sempre gostou de jogos de lógica, um exemplo é o cubo mágico, os alunos ficam admirados em ver a facilidade que ele tem para resolvê-lo. Gabriel decidiu montar seu próprio jogo envolvendo lógica, a primeira informação que ele irá precisar para montar o jogo é de quantos anagramas é possível formar com certa quantidade de caracteres distintos sem espaço. Como ele tem se dedicado muito para maratona de programação, ele acaba não tendo tempo para verificar isso, por isso precisará de sua ajuda. Sua tarefa é, dado um conjunto de caracteres distintos e sem espaços, informar quantos anagramas é possível formar.",
        "titulo": "Embaralhando",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste terá uma única linha S com no máximo 15 caracteres. A entrada termina quando S = 0 e não deve ser processada."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1453",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma resposta. A primeira linha de resposta deve conter um identificador do caso de teste, no formato '#i’, onde i começa a partir de 1 e é incrementado para cada caso de teste. Então, se houver uma configuração válida para o quebra-cabeças, o programa deve produzir M linhas de saída, que descreve uma tal configuração. Cada linha deve conter dois inteiros L e C, separados por um espaço em branco, indicando a posição de um quadrado preto (L indica o número da linha e C indica um número da coluna, com 1 ≤ L ≤ N e 1 ≤ C ≤ M). Se mais de uma configuração válida é possível, imprima qualquer uma delas. Se não for possível uma configuração válida para o quebra-cabeça, o seu programa deve produzir como resposta uma única linha contendo o valor 0.",
        "descricao": "Embora jogos de caça-palavras remontam à tempos antigos – um caça-palavras foi encontrado nas ruínas Romanas de Pompéia – foi só em 1913 que o Sunday New York World publicou um quebra-cabeça chamado de 'palavras-cruzadas' inventado por Arthut Wynne, um jornalista que tinha o trabalho de semanalmente elaborar um desafio para a seção de quadrinhos do jornal. O quebra-cabeça foi um sucesso imediato e se tornou uma característica semanal, e é hoje, provavelmente, o jogo de palavras mais popular e difundido no mundo. (Para as pessoas estranhas que não conhecem isso, palavras-cruzadas é um quebra-cabeça no qual o jogador deve preencher com palavras indicadas por pistas verbais, um padrão axadrezado, de modo que elas sempre cabem onde elas cruzam.) A configuração de uma palavra-cruzada é a figura formada por casas vazias e por casas pretas no quebra-cabeça. Durante os primeiros anos, vários tipos de formas e figuras (diamante, círculo, quadrado) foram experimentados antes da familiar forma retangular com algumas casas pretas (usadas para separar palavras) ser adotado universalmente. Para este problema, vamos definir que a configuração para um quebra-cabeça com N linhas e M colunas é válida apenas se cada coluna contém exatamente um quadrado preto; e quadrados pretos não estão em colunas adjacentes na mesma linha. Configuração inválida (à esquerda) e configuração válida (à direita). Dada uma lista com os comprimentos das palavras, todas as quais devem ser colocadas para direção vertical, seu trabalho é encontrar uma configuração para um quebra-cabeça com N linhas, M colunas e M quadrados pretos.",
        "titulo": "Palavras-Cruzadas Sem Palavras",
        "entrada": "A entrada possui diversos casos de teste. A primeira linha de cada caso de teste possui três inteiros N, M e K, indicando respectivamente o número de linhas no quebra-cabeça (2 ≤ N ≤ 2000) o número de colunas no quebra-cabeça (1 ≤ M ≤ 2000) e o número dos comprimentos das palavras (1 ≤ K ≤ 4000). A segunda linha contém K inteiros Wk, representando os comprimentos das palavras que devem ser colocadas na direção vertical (1 ≤ Wk ≤ N-1). O fim da entrada é indicado por N = M = K = 0."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1360",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo a descrição da carta escondida.",
        "descricao": "Um mágico inventou um novo truque de cartas e apresentou-o na prestigiosa Conferência Americana dos Mágicos (ACM). O truque foi tão bom que recebeu o \"Prêmio de Melhor Mágica\" na conferência. O truque requer três participantes: o próprio mágico, um espectador e um assistente. Durante o truque o espectador é convidado a embaralhar um baralho de 52 cartas e escolher aleatoriamente 5 cartas dele. As cinco cartas são dadas para o assistente (sem o mágico ver as cartas) que olha para eles e mostra quatro das cinco cartas um por uma para o mágico. Depois de ver as quatro cartas o mágico magicamente adivinha a quinta carta faltante! O truque funciona porque uma vez que o assistente tem as cinco cartas que ele sempre pode escolher quatro delas e usa-las para passar informações em 'código' sobre a quinta carta. O código é baseado em uma ordenação de das cartas. As cartas são ordenadas primeiro por seus trajes e, em seguida, pelo seu valor de face. Usaremos o seguinte ordem: H < C < D < S (Copas, Paus, Ouros, Espadas), e 1 < 2 < ... < 9 < T < J < Q < K para valores de face, onde T, J, Q e K representam Dez (10), Valete (J), Rainha (Q) e Rei (K), respectivamente. Suponha que o espectador escolheu os cartões de JD, 8S, 7H, 8C, QH (Valete de Ouros, 8 de Espadas, 7 de Copas, 8 de Paus e Rainha de Copas). A estratégia para o assistente é o seguinte: Encontre um naipe s que aparece pelo menos duas vezes no conjunto de cartas escolhidas (Corações no exemplo). Se mais de um terno aparece duas vezes, escolher aquele com ordem menor. Esconda a carta x com naipe s que está no máximo seis posições à frente na ordem cíclica 1 < 2 <... <T <J <Q <K <1 <2 <... de outra carta y do mesmo naipe. Isto é sempre possível uma vez que há apenas treze cartas do mesmo naipe (no exemplo, o ssistente esconde QH). Se dois ou mais cartões de satisfazer os critérios acima, escolha aquele com o valor de face menor. Mostrar y para o mágico. Neste ponto, o mago sabe que o naipe da carta oculta, e sabe também que o valor de face da carta escondido x é, no máximo, seis posições na frente do valor de face do y. Com as três cartas que a assistente deixou, ele deve codificar um número entre 1 e 6. Isso pode ser feito da seguinte forma. Diga as três cartas Z1, Z2, Z3 estão na ordem z1 < z2 < z3. Cada um das seis possíveis ordens em que estas três cartas podem ser apresentadas podem ser interpretados para transmitir informação acerca de um número. - Z1, z2, z3 significa 1, - Z1, Z3, z2 significa 2, - Z2, Z1, Z3 significa 3, - Z2, Z3, z1 significa 4, - Z3, Z1, Z2 significa 5, - Z3, Z2, Z1 significa 6. Desta forma, uma vez que o mágico visualiza quatro cartas, uma a uma, ele tem informações suficientes para \"magicamente\" adivinhar a quinta carta! Seu trabalho é desenvolver um programa que, dadas as quatro cartas mostradas pelo assistente, informe ao mágico qual é a carta escondida.",
        "titulo": "Truque de Mágica",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N especificando o número de casos de teste (1 <= N <= 10000). Cada caso de teste é composto por uma linha, que contém a descrição das quatro cartas, separadas por um espaço, na ordem em que foram apresentados pelo assistente."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1741",
        "saida": "Para cada caso teste, imprima uma única linha no seguinte formato. “The answer is N.” se a expressão é válida, pode ser resolvida e o resultado é N “Division by zero.” se a expressão é válida sintaticamente, mas existe divisão por 0. “Invalid expression.” se a expressão não pode ser resolvida em NRJ Todos os resultados, tanto finais quanto intermediários caberão em um inteiro com sinal de 32 bits.",
        "descricao": "O pequeno João está aprendendo como resolver expressões aritmética. Mas as expressão convencionais são muito chatas para ele. Por causa disso, o seu pai está ensinando como resolver expressões escritas em formas diferentes. A primeira forma que ele aprendeu é a Notação Polonesa Reversa, uma forma interessante que não precisa de parentêses . João achou interessante essa notação, mas achou que poderia criar uma ainda mais legal. Por isso ele criou a Notação Reversa de João (NRJ). João chegou a seguinte definição recursiva para NRJ Um único dígito é uma expressão válida e o resultado é o valor deste dígito. Um operador binário (+, −, * or /), seguido por duas expressões válidas, é uma expressão válida. O resultado dessa expressão é aplicação do operador com os dois argumentos trocados. Isto é, + a b vale a soma dos dois operandos - a b, vale b - a, * a b vale o produto dos dois operandos e /a b vale floor(b/a). João agora se diverte escrevendo e resolvendo expressões nesse novo formato. Como ele é uma criança aventureira, ele gosta de expressões grandes. Porém, algumas vezes ele acha algum problema. Parte da expressão que ele escreve não tem solução, porque elas estão mal-formadas ou ocasionam divisão por 0. Mas quando ele resolve novamente, encontra outro valor Agora ele gostaria de ter certeza do resultado. Como você realmente gosta do João, você escreveu um programa para ajudá-lo",
        "titulo": "Notação Reversa de João",
        "entrada": "A entrada contém diversos cados testes. Cada caso teste é uma linha com n caracteres (1 ≤ n ≤ 2×106) que pode possivelmente representar uma expressão em NRJ. Essa expressão conterá apenas dígitos de 0 a 9 e os operadores mencionados acima separados por um único espaço. A entrada termina com fim de arquivo."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1612",
        "saida": "Para cada caso, imprima o tempo máximo que a formiguinha pode ficar no tronco.",
        "descricao": "Uma formiguinha está andando sobre um tronco de árvore de tamanho N metros. Podemos considerar que a formiga pode assumir as posições de 0 até N-1. Assuma que ela está no eixo X dos planos coordenados, porém ela começa em uma posição desconhecida. A única coisa que se sabe sobre sua posição inicial é que é um número inteiro. A formiguinha pode dar um passo para a esquerda ou direita, e este passo a desloca de um metro. Se ela está na posição P e dá um passo para a direita, ela assumirá a posição P+1. Se o passo for para a esquerda, ela assumirá a posição P-1. Se em algum momento ela assumir a posição -1 ou a posição N, ela cairá do tronco! Um passo leva um segundo para ser completado, e a formiga sempre está se movendo. Considerando que a formiga fará sempre a pior sequência de passos possível, escolha uma posição inicial de modo que maximize o tempo em que a formiga permaneça no tronco. Imprima este tempo.",
        "titulo": "Formiguinha",
        "entrada": "Na primeira linha você terá um inteiro T (T <= 100) indicando o número de casos de teste. Para cada caso teremos uma única linha com o número inteiro N (1 ≤ N ≤ 109) indicando o tamanho do tronco da árvore."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1438",
        "saida": "Para cada caso de teste da entrada, seu programa deve imprimir uma única linha, contendo um único inteiro: o número mínimo de caixas, além da caixa 1, que Joãozinho precisa desempilhar para recuperar o seu inventário.A saída deve ser escrita na saída padrão.",
        "descricao": "Joãozinho e sua família acabaram de se mudar. Antes da mudança, ele colocou todos os seus livros dentro de várias caixas numeradas. Para facilitar a retirada dos livros, ele fez um inventário, indicando em qual caixa cada livro foi colocado, e o guardou na caixa de número 1.Chegando no seu novo quarto, ele viu que seus pais guardaram as caixas em várias pilhas, arrumadas em fila, com cada pilha encostada na pilha seguinte.Joãozinho é um garoto muito sistemático. Por isso, antes de abrir qualquer outra caixa, ele quer recuperar seu inventário. Joãozinho também é um garoto muito desajeitado. Para tirar uma caixa de uma pilha, ele precisa que a caixa esteja no topo da pilha e que ao menos um de seus lados, não importa qual, esteja livre (isto é, não tenham nenhuma caixa adjacente).Para isso, Joãozinho precisa desempilhar algumas das caixas. Como o quarto dele é bem grande, ele sempre tem espaço para colocar as caixas retiradas em outro lugar, sem mexer nas pilhas que os pais dele montaram. Para minimizar seu esforço, Joãozinho quer que você escreva um programa que, dadas as posições das caixas nas pilhas, determine quantas caixas Joãozinho precisa desempilhar para recuperar seu inventário.",
        "titulo": "Desempilhando Caixas",
        "entrada": "A entrada é composta de vários casos de teste. A primeira linha de cada caso de teste contém dois números inteiros N e P , indicando, respectivamente, o número de caixas e o número de pilhas (1 ≤ P ≤ N ≤ 1.000). As caixas são numeradas seqüencialmente de 1 a N. Cada uma das P linhas seguintes descreve uma pilha. Cada linha contém um inteiro Qi, indicando quantas caixas há na pilha i, seguido de um espaço em branco, seguido de uma lista de Qi números, que são os identificadores das caixas. Os elementos da lista são separados por um espaço em branco.Todas as pilhas contêm pelo menos uma caixa, e todas as caixas aparecem exatamente uma vez na entrada. As caixas em cada pilha são listadas em ordem, da base até o topo da pilha. Todas as caixas têm o mesmo formato. O final da entrada é indicado por N = P = 0. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1460",
        "saida": "Para cada caso de teste da entrada, seu programa deve imprimir Q+1 linhas. Cada uma das primeiras Q linhas deve conter um único inteiro, indicando o maior tamanho, em número de propriedades, de uma área quadrada contígua com alturas dentro do intervalo especificado na respectiva consulta. A última linha a ser impressa para cada caso de teste é usada como separadora e deve conter um único caractere '-' (conhecido como hífen ou \"sinal de menos\").",
        "descricao": "Na Quadradônia, todas as propriedades rurais são quadradas, todas possuem a mesma área, todas são perfeitamente planas e todas possuem os lados alinhados aos eixos Norte-Sul e Leste-Oeste. Como as propriedades são planas, as colinas na Quadradônia parecem uma série de degrais gigantes, com tamanhos diferentes. Em uma certa montanha, uma situação interessante ocorre em uma área retangular de N x M propriedades. Começando de qualquer lugar da região, ao ir do Oeste para o Leste, as propriedades possuem alturas não-decrescentes. De forma simular, atravessar a região do Norte para o Sul, começando em qualquer lugar, as propriedades também possuem alturas não-decrescentes. Uma grande empresa de vinhos na Quadradônia quer alugar algumas propriedades daquela região para cultivar uvas. A empresa está interessada em uma variedade especial de parreiras que só produzem uvas se cultivadas em propriedades cujas alturas estão em um certo intervalo. Ou seja, a empresa está interessada em alugar propriedades cujas alturas sejam maiores ou iguais a uma dada altura L e menores ou iguais a outra dada altura U. Para facilitar a colheita, as propriedades devem formar uma área contígua. E como todos na Quadradônia gostam de quadrados, a área a ser alugada deve ter a forma de um quadrado. A empresa ainda não decidiu qual variedade de uvas irá produzir, e portanto possui uma lista de consultas envolvendo intervalos, um para cada variedade de uva. A figura abaixo mostra uma área de interesse de dimensão 4 x 5 (em número de propriedades) com exemplos de áreas que a empresa poderia alugar para cultivar uvas em alturas dentro dos intervalos dados nas figuras. ​ Você deve escrever um programa que, dadas a descrição da área de interesse na montanha e uma lista de consultas contendo intervalos de alturas, determina, para cada consulta, o maior lado (em número de propriedades) da maior área contígua quadrada com alturas dentro do intervalo em questão.",
        "titulo": "Parreiral",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M, separados por um espaço simples, representando, respectivamente, o número de propriedades na direção Norte-Sul (1 ≤ N ≤ 500) e o número de propriedades na direção Oeste-Leste (1 ≤ M ≤ 500) da região de interesse. Cada uma das próximas N linhas contém M inteiros Hi, j, separados por espaços simples, indicando as alturas das propriedades na região de interesse (0 ≤ Hi,j ≤ 105, com 1 ≤ i ≤ N e 1 ≤ j ≤ M; também, Hi-1, j ≤ Hi, j e Hi, j-1 ≤ Hi, j). A próxima linha contém um inteiro Q indicando o número de consultas (1 ≤ Q ≤ 104). Cada uma das próximas Q linhas descrevem uma consulta e contém dois inteiros L e U, separados por um espaço em branco, indicando um intervalo de alturas (0 ≤ L ≤ U ≤ 105). As alturas das propriedades a serem alugadas devem ser maiores ou iguais a L e menores ou iguais a U. O último caso de teste é seguido de uma linha contendo dois zeros separados por um espaço simples."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1615",
        "saida": "Para cada caso, imprima o número do candidato vencedor, ou -1 caso haverá segundo turno.",
        "descricao": "Uma eleição foi feita em uma pequena cidade de M habitantes, onde havia N candidatos. As pessoas escreviam o número do candidato em um pedaço de papel, e inseriam na urna. Ao final da eleição, se um candidato receber uma quantidade estritamente maior do que 50% dos votos, ele é considerado o vencedor. Caso contrário um segundo turno de eleições é feito. Como o processo de contagem manual é muito lento, você deve desenvolver um programa que decide qual o candidato vencedor ou se nenhum recebeu votos suficientes e um segundo turno será necessário.",
        "titulo": "Insatisfação nas Eleições",
        "entrada": "Na primeira linha você terá um inteiro T (T ≤ 100) indicando o número de casos de teste. Para cada caso de teste, na primeira linha você terá os números inteiros N (1 ≤ N ≤ 10) e M (1 ≤ M ≤ 103* ou 1 ≤ M ≤ 5*104**). Na próxima linha, M inteiros seguirão separados por espaços, indicando o candidato em que cada pessoa votou, ou seja, o número escrito em cada pedaço de papel dentro da urna. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1532",
        "saida": "Para cada caso de teste, imprima uma linha contendo a palavra “possivel” (sem aspas), caso seja possível arremessar a bola a uma velocidade menor ou igual a V de forma que ela quique no buraco, ou “impossivel”, caso contrário.",
        "descricao": "Seus amigos inventaram uma nova competição: Arremesso de bolas. O objetivo é simples, basta arremessar uma bola de forma que ela caia dentro de um buraco N metros a sua frente. Quando a bola é arremessada, digamos que à uma velocidade inteira V, ela permanece no ar por V metros e então quica. Ela repete esse processo V vezes. Após ela quicar V vezes, ela muda sua velocidade para V-1, e o processo anterior se repete, até que a velocidade seja igual a 0. Por exemplo, se a bola for arremessada a uma velocidade igual a 3, ela quicará nos seguintes pontos: 3, 6, 9, 11, 13, 14; conforme pode ser visto na imagem. Você consegue arremessar a bola à uma velocidade inteira menor ou igual a V. Dada a distância do buraco, diga se é possível que você arremesse a bola e que ela quique exatamente no buraco, acertando-o.",
        "titulo": "Arremesso de Bolas",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste contém dois inteiros, N e V (1 ≤ N ≤ 1000, 1 ≤ V ≤ 30), representando a distância do buraco e a velocidade máxima com a qual você consegue arremessar a bola. O último caso de teste é indicado quando N = V = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1896",
        "saida": "A saída deverá conter \"Y\" caso Charlinho consiga realizar uma combinação válida para invocar Prassódia ou \"N\" caso contrário.",
        "descricao": "Monstros de Duelo é o mais famoso campeonato de cartas do mundo. Cada duelo é disputado por dois jogadores, onde cada jogador começa com 8.000 Pontos de Vida e com o seu Deck (Baralho). Cada carta representa um monstro que tem os atributos de Ataque, Defesa e habilidade. Estamos no duelo final com os dois maiores duelistas da história. De um lado Charlinho, um garoto que gosta muito de estudar, mas que também sabe sentir o coração das cartas. Do outro lado Gilmar, que não foi criado a leite com pêra, mas é reconhecido como o Mestre das Cartas. É a vez de Charlinho, e ele acaba de combinar seus monstros na mesa para obter o proíbido \"Prassódia\". Prassódia é o monstro mais forte do jogo, e quando invocado, a partida é finalizada na hora e o jogador que o invocou ganha o duelo. Para invocar Prassódia é necessário combinar duas ou mais cartas na mesa somando ataque com ataque, defesa com defesa e habilidade com habilidade para obter os atributos de Prassódia informados no início do duelo. Se uma carta for escolhida para ser combinada, os atributos da carta tem que ser utilizados por inteiro, sendo inválido apenas utilizar o ataque ou apenas utilizar a defesa ou apenas a habilidade daquela carta e ainda não podendo utilizar apenas uma parte do ataque e/ou uma parte da defesa e/ou uma parte da habilidade. Gilmar se espanta por um momento, pois ele foi o único em toda a história que conseguiu invocar Prassódia, mas acaba duvidando da jogada de Charlinho porque haviam várias cartas na mesa, o que tornaria tal jogada muito suspeita.  Você é o Juíz do duelo e ficou responsável por avaliar se o Charlinho realmente conseguiu invocar ou não Prassódia com as cartas na mesa.",
        "titulo": "É Hora do Duelo!",
        "entrada": "A primeira linha da entrada contém 4 inteiros, o primeiro inteiro N ( 1 ≤ N ≤ 20) representa o número de cartas na mesa seguido por 3 inteiros A,D,H (1 ≤ A,D,H, ≤ 1000) que representam respectivamente o ataque, a defesa e a habilidade exata para invocar Prassódia. Cada uma das N linhas seguintes representam uma carta da mesa, onde cada linha contém os atributos na ordem X,Y,Z (1 ≤ X,Y,Z ≤ 50) ataque, defesa e habilidade respectivamente."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1771",
        "saida": "Para cada cartela analisada imprima uma linha contendo uma das três palavras: “OK” caso a cartela seja válida, “RECICLAVEL” caso exista alguma permutação de números que faça com que a cartela se torne válida ou “DESCARTAVEL” caso não exista tal permutação.",
        "descricao": "Você pediu ao estagiário que fizesse um programa para gerar cartelas de bingo aleatoriamente. O estagiário dispensou suas explicações, alegando que sabia como o bingo funcionava. E qual foi o resultado de tanta pressa? O estagiário simplesmente gerou 24 números aleatórios diferentes (no intervalo [1, 75] para cada cartela, sem respeitar os intervalos em que cada número pertencia (B -> [1, 15], I -> [16, 30], ...)). Você decidiu então fazer um programa para julgar as cartelas geradas pelo programa do estagiário.",
        "titulo": "Cartelas de Bingo Aleatórias",
        "entrada": "Cada caso de teste contém uma linha 24 números inteiros separados por espaço. O exemplo da figura conteria a sequência 15, 28, 36, 49, 65, 13, ..., 53, 69. A entrada termina com o fim de arquivo (EOF)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1755",
        "saida": "Para cada caso de teste imprima uma única linha contendo um valor de ponto flutuante com 2 dígitos após o ponto decimal: o maior troco que Joãozinho poderá obter.",
        "descricao": "O pai de Joãozinho lhe pediu que fosse à venda comprar um determinado ingrediente e lhe deu as seguintes instruções: 1 - Não me importo com qual marca você vai escolher, contanto que compre o máximo possível. 2 - Não volte de mãos vazias (compre pelo menos um produto). 3 - Não me traga produtos de marcas diferentes. 4 - Se não violar nenhuma das restrições anteriores o troco é seu. Joãozinho não é muito bom em matemática e pediu sua ajuda para escolher a marca que maximizaria seu troco de acordo com as restrições impostas. Você não gosta de pessoas preguiçosas e prometeu a Joãozinho que faria um programa para resolver apenas uma parte do problema: encontrar o valor máximo (sem dizer qual marca ele deve escolher para obter tal troco).",
        "titulo": "O Troco",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 2000), o número de casos de teste. Cada caso de teste é composto por 2 linhas. A primeira linha contém os inteiros D (10 ≤ D ≤ 500) e N ( 2 ≤ N ≤ 300), indicando a quantia que Joãozinho levou ao mercado e a quantidade de marcas diferentes disponíveis (assuma que o estoque da loja é suficiente para vender qualquer quantidade de qualquer produto), respectivamente. A segunda linha contém N números de ponto flutuante pi, representando o preço da unidade fabricada pela marca mi. Assuma que não haverá nenhum preço com mais de 2 dígitos após o ponto decimal."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1920",
        "saida": "Para cada caso, exiba C > P caso Chiquinha vença a disputa, P > C caso Pópis vença ou C = P caso termine empatado.",
        "descricao": "Cansada de jogar moedas na fonte dos desejos e não ter nenhum desejo atendido, Chiquinha e Pópis decidiram usar a fonte como alvo na brincadeira de arremesso de moedas. Elas irão tomar uma distância da fonte e jogar, alternadamente, N moedas cada tentando acertá-la. Cada moeda arremessada pode cair dentro da fonte, na borda ou fora. Dado a coordenada (cx, cy) do centro da fonte, o raio de onde é considerado dentro(r1) , e o raio da borda(r2), sua tarefa é checar os arremessos de ambas e dizer quem acertou mais moedas dentro da fonte. Em caso de empate, ganha quem acertou mais nas bordas. Se o empate persistir, consideraremos que a brincadeira terminou empatada. Obs: Se uma moeda cair exatamente nos extremos de qualquer círculo, será considerado borda (pontos vermelhos na imagem abaixo).",
        "titulo": "Fonte dos Desejos",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia um inteiro N (1 ≤ N ≤ 1000) representando a quantidade de moedas que cada uma arremessou. A segunda linha conterá quatro inteiros, CX, CY (-1000 ≤ CX, CY≤ 1000), R1 e R2 (1 ≤ R1 < R2 ≤ 5000), representando respectivamente, o centro da fonte e os raios como mostram a figura acima. Após isso, 2*N linhas seguem, cada uma contendo dois inteiros X e Y, representando a coordenada x e y de onde uma moeda caiu. Lembre-se que elas jogam alternadamente e Chiquinha sempre joga primeiro. A entrada termina com N = 0, a qual não deve ser processada."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1374",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha contendo dois inteiros separados por um único espaço: o número de dias para os quais o consumo pode ser determinado precisamente e o consumo desses dias.",
        "descricao": "Martin e Isa pararam de jogar jogos loucos e finalmente se casaram. Ótimas notícias! Eles estão vivendo uma nova vida de felicidade para ambos e, também, estão se mudando para uma nova casa em um lugar remoto, comprado com a maior parte de suas economias. A vida é diferente nesse novo lugar. Particularmente, a energia elétrica é muito cara, e eles querem manter tudo sob controle. Por isso Martin propôs que mantivessem um histórico diário de quanta eletricidade foi consumida na casa. Eles têm um marcador de eletricidade, que mostra um número com a quantidade de KWh (kilowatts-hora) que foi consumida desde sua chegada. No começo de cada dia eles consultam o marcador de eletricidade, e anotam o consumo. Alguns dias Martin faz isso, em outros é a Isa quem faz. Desse jeito, eles conseguirão observar as diferenças de consumo entre dias consecutivos e saber quanto foi gasto. Mas alguns dias eles simplesmente esqueceram de anotar, então, depois de muito tempo, o histórico está incompleto. Eles têm uma lista de datas e consumos, mas nem todas datas são consecutivas. Eles só querem levar em conta os dias para os quais o consumo pode ser determinado precisamente, e precisam de ajuda.",
        "titulo": "Eletricidade",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de medições que eles fizeram (2 ≤ N ≤ 103). Cada uma das N linhas seguintes contém quatro inteiros D, M, Y e C, separados por espaços, indicando respectivamente o dia (1 ≤ D ≤ 31), mês (1 ≤ M ≤ 12), ano (1900 ≤ Y ≤ 2100), e consumo (0 ≤ C ≤ 106) lidos no início de cada dia. Essas N linhas são ordenadas em ordem crescente pela data e podem incluir anos bissextos. A sequência de consumos é estritamente crescente (isto é, duas leituras sempre têm valores diferentes). Você pode assumir que D, M e Y representam datas válidas. Lembre-se que um ano é bissexto se ele é divisível por 4 e não por 100, ou então, se o ano é divisível por 400. O final da entrada é indicado por uma linha contendo apenas um zero."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1890",
        "saida": "Para cada instância, imprima uma linha com a quantidade de placas distintas que podem ser geradas pelo sistema correspondente. É garantido que a resposta sempre será menor que 231.",
        "descricao": "Na Tailândia, um tipo popular de transporte público é o chamado tuk-tuk (ตุ๊กตุ๊ก), também conhecido como auto-riquixá. O governo de Phuket decidiu criar um novo sistema de placas para os tuk-tuks, com a finalidade de diferenciá-los dos outros tipos de veículos. Devido ao turismo, que é uma das principais atividades econômicas da província, a frota de tuk-tuks vem crescendo rapidamente. Espera-se que com o novo sistema de placas seja possível criar uma quantidade suficiente de placas distintas para atender à demanda pelos próximos 42 anos. Um sistema de placas é definido por dois números, C e D. Uma placa nesse sistema é uma cadeia com C consoantes seguidas por D dígitos. Uma placa não pode ser vazia (sem consoantes e sem dígitos). No alfabeto tailandês existem 44 consoantes e 10 dígitos. No entanto, como os símbolos de algumas consoantes são parecidos com os de outras, o governo decidiu que serão utilizadas somente 26 consoantes, cujos símbolos foram considerados suficientemente diferentes. Para garantir que existirão tuk-tuks suficientes para os competidores da Final Mundial da Maratona de Programação em 2016, o governo de Phuket quer saber qual o número de placas distintas é possível gerar com um determinado sistema de placas.",
        "titulo": "Emplacando os Tuk-tuks",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste em uma linha contendo os números inteiros C (0 ≤ C ≤ 6) e D (0 ≤ D ≤ 9) representando as quantidades de consoantes e dígitos, respectivamente, em um sistema de placas."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1206",
        "saida": "Para cada instância, imprima uma linha com a palavra SIM, se o rei branco está em xeque mate, ou a palavra NAO, caso contrário.",
        "descricao": "A Russia sempre foi berço de grandes mestres de xadrez. Poucos sabem, mas a FIDE (Federação Internacional de Xadrez), que é o órgão máximo regulador do jogo de xadrez foi fundada em 1924, a partir de um movimento iniciado 10 anos antes no campeonato mundial da modalidade que ocorreu em São Petersburgo em 1914. Hoje, entre os 10 melhores jogadores do mundo, segundo a FIDE, três são russos. O torneio de São Petersburgo ficou também conhecido pelas tentativas dos grandes mestres de popularização do jogo. Na época os maiores mestres (como Capablanca) foram às ruas propor desafios para as pessoas com o objetivo de interessá-las a praticar o jogo. Um desses desafios ficou conhecido como o desafio de São Petersburgo. O grande mestre montava uma situação em que as peças brancas tinham apenas o rei, e o objetivo era que a pessoa dissesse se o rei branco estava ou não em xeque mate. Na situação descrita acima, o rei branco está em xeque mate se ele está sendo atacado e qualquer movimento que ele faça o leva para uma casa que também está sendo atacada. O que você precisa saber sobre xadrez Considere que inicialmente as peças do jogador preto ficam nas linhas 7 e 8 enquanto as do jogador branco iniciam nas linhas 1 e 2. Não pode haver duas peças na mesma casa. As peças consideradas no problema (peão, torre, bispo, rainha e rei) não podem passar por cima de outras peças, ou seja, se durante sua movimentação existir alguma peça no seu caminho você deve parar antes ou atacar a peça (se ela for do oponente), tomando o seu lugar. A movimentação e o ataque de cada tipo de peça são da seguinte forma: # Peão: anda apenas uma casa para frente (em direção a linha 1) podendo atacar em qualquer uma das duas diagonais imediatamente a sua frente; # Torre: anda/ataca quantas casas quiser ou na horizontal, ou na vertical; # Bispo: anda/ataca quantas casas quiser na diagonal; # Rainha: anda/ataca quantas casas quiser ou na horizontal, ou na vertical, ou na diagonal; # Rei: anda/ataca apenas uma casa ou na horizontal, ou na vertical, ou na diagonal.",
        "titulo": "Desafio de São Petersburgo",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 10) indicando o número de peças pretas. A linha seguinte contém a descrição das posições das N peças pretas separadas por um espaço. A terceira linha contém a descrição do rei branco. Uma descrição de uma peça de xadrez consiste em 3 caracteres. O primeiro indica se a peça é um peão (P), torre (T), bispo (B), rainha (R) ou rei (W). Note que o grande mestre não usava cavalos para facilitar para que ainda estava começando a aprender o jogo. O segundo caracter, entre ’a’ e ’h’, indica a coluna na qual a peça está e o terceiro, de ’1’ a ’8’ indica a linha. Em nenhuma das instâncias ocorre a situação na qual o rei branco e o rei preto são adjacentes."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2019",
        "saida": "Para cada caso de teste, imprima uma linha contendo o tamanho da menor sequência e o número de sequências que Cino pode escolher, separados por um único espaço. É garantido que um inteiro de 64 bits com sinal seja suficiente para armazenar a resposta.",
        "descricao": "Cici, Cini e Cino viajaram para o Polo Norte, e querem conhecer os principais pontos turísticos de lá. Para ajuda-los, o Papai Noel decidiu emprestar três renas para eles. As renas do Papai Noel tem capacidade de se teletransportarem, fazendo que as viagens entre os pontos turísticos sejam instantâneas. Papei Noel informou que existem N pontos turísticos, e que suas renas podem realizar dois tipos de passeios: Passeio tipo 1: Dada uma sequência de pontos turísticos que deseja visitar, a rena realiza um passeio parando durante um hora em cada ponto da sequência. Por exemplo: Dada a sequência , a rena vai ficar durante uma hora no ponto 1, depois uma hora no ponto 2 e mais uma hora no ponto 1. Passeio tipo 2: Dada uma sequência de pontos turísticos que deseja visitar, a rena realiza um passeio do tipo 1 utilizando uma subsequência não vazia da sequência escolhida. Por exemplo, se a sequência escolhida for , a rena pode fazer qualquer um dos 6 passeios distintos, escolhido aleatoriamente por ela: , , , , , . Cici e Cini gostaram do fator surpresa do passeio de tipo 2, porém, Cino optou pelo do tipo 1. Como Cici, Cini e Cino possuem preferências diferentes, cada um pode escolher uma sequência diferente de lugares. Sabendo as sequências escolhidas por Cici e Cini, Cino vai escolher a menor sequência em que seja garantido que em pelo menos um local não seja visitado pelos três amigos ao mesmo tempo. Por exemplo: O Papei Noel informou que o Polo Norte possui 3 pontos turísticos distintos. Cici escolhe a sequência . Cini escolhe . Logo, Cino pode escolher as sequências e , mas não pode escolher a sequência , pois existe a chance de os três visitarem o ponto ao mesmo tempo.",
        "titulo": "Cici, Cini e Cino",
        "entrada": "A entrada é constituída de múltiplos casos de teste. Cada caso de teste é constituído por 3 linhas. A primeira linha de cada caso de teste contém 3 inteiros, N (1 ≤ N ≤ 50), X e Y (1 ≤ X, Y ≤ 103), representando respectivamente a quantidade de pontos turísticos, o tamanho da sequência escolhida por Cici e o tamanho da sequência escolhida por Cini. A segunda linha contém X inteiros, representando a sequência escolhida por Cici. A terceira linha contém Y inteiros, representando a sequência escolhida por Cini. A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1196",
        "saida": "Para cada linha de entrada, imprima uma linha de saída correspondente com a mensagem decodificada.",
        "descricao": "Um erro comum de digitação é colocar as mãos no teclado uma posição à direita da correta posição. Desta forma, \"Q\" é digitado como \"W\" e \"J\" é digitado como \"K\" e assim por diante. Você deve decodificar a mensagem desta maneira.",
        "titulo": "WERTYU",
        "entrada": "A entrada consiste em várias linhas de texto. Cada linha pode conter dígitos, espaços e letras maiúsculas. (exceto Q, A, Z), ou pontuação, exceto crase (`) conforme mostrado acima. Teclas rotuladas como palavras [Tab, BackSp, Control, etc.] não são representados na entrada. Você deverá repassar cada letra ou símbolo de pontuação pelo símbolo imediatamente à esquerda. Os espaços de entrada simplesmente deverão ser ecoados (impressos) na saída."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1486",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma única linha da saída, contendo o número de palitos de comprimento maior ou igual a C produzidos pelo experimento.",
        "descricao": "Um circuito bioquímico digital (CBD) é um artefato composto de um conjunto de pontos de processamento. Cada ponto de processamento é constituído por um minúsculo receptáculo para reagentes bioquímicos, feito de um substrato biológico que se comporta como um microcircuito eletrônico digital. Dependendo do estado da reação no receptáculo, o substrato gera dois níveis de voltagem. Um leitor acoplado ao CBD é capaz de realizar a leitura de todos os pontos de processamento de um CDB num dado instante, interpretando os dois níveis de voltagem como 0 ou 1. Um experimento com o CBD é realizado da seguinte maneira. Os pontos de processamento são carregados com as substâncias de interesse e reagentes apropriados e, a cada intervalo fixo de tempo (tipicamente alguns milissegundos), os pontos de processamento são lidos. Assim, o experimento resulta em uma sequência de conjuntos (vetores) de bits, cada vetor correspondendo a uma medição do CBD. Uma sequência ininterrupta de bits 1 de um mesmo ponto de processamento ao longo do tempo é denominada de palito. O comprimento de um palito é o número de bits 1 que o compõe (note que o comprimento dos palitos de um experimento pode variar entre um e o número de medições efetuadas). Uma característica importante de um experimento com o CBD é a quantidade e o comprimento dos palitos gerados. A figura abaixo mostra o resultado de um experimento realizado com um CBD de seis pontos de processamento, em que foram efetuadas quatro medições, contendo três palitos de comprimento um, um palito de comprimento dois e um palito de comprimento quatro. Você foi contratado para escrever um programa que determine, dado o resultado de um experimento, quantos palitos de comprimento igual ou maior do que um certo valor foram gerados.",
        "titulo": "Circuito Bioquímico Digital",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três inteiros P, N e C que indicam respectivamente o número de pontos de processamento (1 ≤ P ≤ 1000), o número de medições efetuadas (1 ≤ N ≤ 1000) e o comprimento mínimo de palitos de interesse (1 ≤ C ≤ N). Cada uma das próximas N linhas contém sequências de P dígitos {0, 1}, separados por um espaço em branco. O final da entrada é indicado por P = N = C = 0."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1528",
        "saida": "Para cada caso de teste, imprima uma linha com a palavra \"YES\" caso as cordas possam ser totalmente separadas após a sequência de movimentos, caso contrário, imprima uma linha com a palavra \"NO\".",
        "descricao": "Quatro crianças estão brincando segurando duas cordas. Inicialmente, as crianças estão posicionadas nos quatro vértices de um quadrado, númerados de 1 a 4, assim como mostra a figura abaixo: No começo da brincadeira, as crianças nas posições 1 e 4 seguram uma corda, e as crianças nas posições 2 e 3 seguram outra. A partir disso, as crianças realizam uma sequência de movimentos que podem ser de três tipos: Movimento + : As crianças nas posições 1 e 2 trocam de lugares, onde a criança na posição 2 passa sua corda por cima da criança na posição 1. Movimento - : As crianças nas posições 1 e 2 trocam de lugares, onde a criança na posição 1 passa sua corda por cima da criança na posição 2. Movimento * : As crianças giram no sentido horário. Quem está na posição 1 vai para a posição 2, quem está na posição 2 vai para a posição 3, quem está na posição 3 vai para a posição 4, e quem está na posição 4 vai para a posição 1. Você deve desenvolver um programa para prever o final da brincadeira: Após uma dada sequência de movimentos da brincadeira, as cordas podem ser totalmente separadas assim estavam como inicialmente sem que as crianças troquem de lugares? John Conway é uma das crianças participando da brincadeira. Ele é um garoto muito esperto e decidiu te dar uma dica para resolver o problema: após a sequência de movimentos, as cordas não podem ser totalmente separadas se e somente se a sequência de movimentos é equivalente a uma sequência de movimentos alternantes. Uma sequência de movimentos é alternante se ela alterna os movimentos '+' e '-' entre um movimento de '*', utilizando o formato \"+++...+++*---...---*+++...\". Por exemplo, \"+++\", \"-*++*-\" e \"+++*----*\" são sequências alternantes. As sequências alternantes são sempre iniciadas com um movimento de '+' ou '-', e não podem possuir movimentos '*' consecutivos, portanto as sequências \"*---*++\" e \"++**--\" não são alternantes. A sequência \"+-++*+\" não é alternante, porém é equivalente a sequência alternante \"+*-*\", pois as duas sequências deixam as duas cordas emaranhadas do mesmo jeito.",
        "titulo": "Cordas Emaranhadas",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste consiste de uma linha contendo uma sequência de até 30 movimentos, indicados pelos caracteres '+', '-', e '*'."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1086",
        "saida": "Para cada um dos casos de teste da entrada, seu programa deve imprimir uma única linha, contendo o menor número de tábuas necessário para cobrir todo o piso do salão, obedecendo às restrições estabelecidas. Caso não seja possível cobrir todo o piso do salão obedecendo às restrições estabelecidas, imprima uma linha com a palavra ‘impossivel’ (letras minúsculas, sem acento).",
        "descricao": "O Clube Recreativo de Tinguá está construindo a sua nova sede social. Os sócios desejam que o piso do salão da sede seja de tábuas de madeira, pois consideram que este é o melhor tipo de piso para os famosos bailes do clube. Uma madeireira da região doou uma grande quantidade de tábuas de boa qualidade, para serem utilizadas no piso. As tábuas doadas têm todas a mesma largura, mas têm comprimentos distintos. O piso do salão da sede social é retangular. As tábuas devem ser colocadas justapostas, sem que qualquer parte de uma tábua seja sobreposta a outra tábua, e devem cobrir todo o piso do salão. Elas devem ser dispostas alinhadas, no sentido longitudinal, e todas devem estar no mesmo sentido (ou seja, todas as tábuas devem estar paralelas, no sentido longitudinal). Além disso, os sócios não querem muitas emendas no piso, e portanto se uma tábua não é longa o bastante para cobrir a distãncia entre um lado e outro do salão, ela pode ser emendada a no máximo uma outra tábua para completar a distância. Há porém uma complicação adicional. O carpinteiro-chefe tem um grande respeito por todas as madeiras e prefere não serrar qualquer tábua. Assim, ele deseja saber se é possível forrar todo o piso com as tábuas doadas, obedecendo às restrições especificadas; caso seja possível, o carpinteiro-chefe deseja ainda saber o menor número de tábuas que será necessário utilizar. A figura abaixo ilustra duas possíveis maneiras de forrar o piso de um salão com dimensões 4 × 5 metros para um conjunto de dez tábuas doadas, com 100 cm de largura, e comprimentos 1, 2, 2, 2, 2, 3, 3, 4, 4 e 5 metros.",
        "titulo": "O Salão do Clube",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros M e N indicando as dimensões, em metros, do salão (1 ≤ N,M ≤ 104). A segunda linha contém um inteiro L, representando a largura das tábuas, em centímetros(1 ≤ L ≤ 100). A terceira linha contém um inteiro, K, indicando o número de tábuas doadas (1 ≤ K ≤ 105). A quarta linha contém K inteiros Xi, separados por um espaço, cada um representando o comprimento, em metros, de uma tábua (1 ≤ Xi ≤ 104 para 1 ≤ i ≤ K). O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1404",
        "saida": "Para cada caso de teste da entrada, seu programa deve produzir uma única linha na saída, contendo um inteiro indicando o maior número de peças do seu oponente que podem ser capturadas em uma jogada.",
        "descricao": "MegaDamas é um jogo de tabuleiro para dois jogadores, muito similar ao conhecido jogo de Damas. O tabuleiro é retangular, com N linhas e M colunas de pequenos quadrados arranjados em uma grade N x M. Os pequenos quadrados são alternadamente coloridos com uma cor clara e uma cor escura, no padrão usual de um tabuleiro de damas. Os quadrados de cor escura são denominados “casas” (note no entanto que, por razões de visualização, os diagramas abaixo mostram casas como quadrados brancos). No início do jogo, cada jogador tem um certo número de peças, posicionadas nas casas mais próximas da borda do tabuleiro que o jogador escolher (os jogadores escolhem bordas opostas). Durante o jogo, as peças só podem ocupar as casas do tabuleiro. Um dos movimentos do jogo é “capturar” uma peça do oponente, saltando sobre ela, diagonalmente, para a casa adjacente além da peça, casa esta que deve estar vazia. A peça do oponente é então removida do tabuleiro. As três casas envolvidas na captura (a casa inicial de sua peça, a casa que contém a peça do oponente e a casa vazia, onde sua peça estará após a jogada) devem estar diagonalmente alinhadas e devem ser diagonalmente adjacentes, como no diagrama abaixo. Em MegaDamas uma peça pode capturar peças do oponente saltando diagonalmente para frente ou para trás (note que, na maioria das variações existentes do jogos de Damas, uma peça só pode capturar peças do oponente saltando para frente). Você pode também efetuar uma captura múltipla, com uma peça apenas, saltando seguidamente para casas vazias sobre peças oponentes. Em uma captura múltipla, a sua peça pode mudar de direção, saltando primeiro em uma direção e depois em outra. Você pode capturar apenas uma peça a cada salto, mas pode capturar várias peças com saltos seguidos. Você não pode saltar sobre uma peça sua, e não pode saltar a mesma peça oponente mais de uma vez. São dadas as dimensões do tabuleiro e uma descrição do estado corrente de um jogo. É a sua vez de jogar e você deve determinar o número máximo de peças do seu oponente que podem ser capturadas em um movimento de captura.",
        "titulo": "MegaDamas",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M indicando respectivamente o número de linhas e o número de colunas do tabuleiro (3 ≤ N ≤ 20, 3 ≤ M ≤ 20 e N x M ≤ 200). O quadrado mais à esquerda do tabuleiro na borda mais próxima ao jogador é uma casa. A segunda linha contém a descrição do estado do jogo. Cada descrição consiste de [(N x M)/2] inteiros, separados por um espaço, correspondendo às casas do tabuleiro, que são numeradas de 1 a [(N x M)/2], da esquerda para a direita, da borda mais próxima ao jogador à borda mais próxima ao seu oponente. Na descrição do estado do jogo, ‘0’ representa uma casa vazia, ‘1’ representa uma casa com uma de suas peças, e ‘2’ representa uma casa com uma peça de seu oponente. Há no máximo [(N x M)/4] peças de cada jogador no tabuleiro. O final da entrada é indicado por N = M = 0. Figura 1: Numeração das casas em (a) tabuleiro de dimensões 8 x 8 e em (b) tabuleiro de dimensões 5 x 3."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1266",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo um inteiro indicando o menor número de postes de madeira que são necessários para restaurar o muro, de acordo com a decisão dos proprietários.",
        "descricao": "É este tempo louco o resultado da interferência contínua da humanidade no meio ambiente? Ou é simplesmente o ciclo normal das mudanças climáticas através dos tempos? Ninguém parece saber ao certo, mas o fato é que os fenômenos naturais, como tornados e furacões atingem nosso país com mais força e freqüência do que nas décadas passadas. Um tornado acaba de atingir a fazenda Silverado, produtora de gado e de leite, e fez estragos. O telhado do celeiro foi rasgado, várias árvores foram arrancadas, o caminhão da fazenda foi derrubado... Mas o pior é que o tornado destruiu várias seções da cerca que rodeava a propriedade. A cerca foi muito bem construída, com postes de concreto a cada dois metros, e arame farpado encerrando o perímetro de toda a fazenda (o perímetro, em metros, é um número par, o que torna a cerca perfeitamente regular). Agora vários postes estão quebrados ou faltando, e há falhas na cerca. Para evitar que o gado fique de fora da propriedade, a cerca deve ser restaurada o mais rápido possível. Reconstruindo o muro à sua forma original, com postes de concreto, vai levar um longo tempo. Enquanto isso, os proprietários da fazenda decidiram fechar as lacunas com uma cerca temporária, feita com postes de madeira. Postes de madeira serão colocados exatamente nos mesmos pontos onde os postes estão faltando ou foram quebrados. No entanto, a fim de tornar a reconstrução temporária mais rápida e menos dispendiosa, os donos decidiram utilizar menos postes: um poste de madeira será utilizado para substituir um poste de concreto ausente / quebrado somente se o comprimento do arame farpado necessário para fechar a distância até o próximo poste (de madeira ou concreto) for superior a quatro metros. Dada a descrição de quantos postes estão quebrados ou faltando, você deve escrever um programa que determine a menor quantidade de postes de madeira que são necessários para fechar as lacunas da cerca, de acordo com a decisão dos proprietários.",
        "titulo": "Tornado!",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um N indicando o número original de postes de concreto da cerca(5 ≤ N ≤ 5000). A segunda linha de um caso de teste irá conter N inteiros Xi indicando o estado de cada poste de concreto após a passagem do tornado (0 ≤ Xi ≤ 1 para 1 ≤ i ≤ N) . Se Xi = 1 o poste i esté em boas condições, se Xi = 0 o poste i está quebrado ou faltando. Note que o poste N é ao lado do poste 1. O final da entrada é indicado por N = 0 ."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "2090",
        "saida": "Para cada caso de teste você deverá imprimir qual será o K-ésimo produto que será dito.",
        "descricao": "Uma brincadeira muito comum entre crianças é \"Fui ao mercado e comprei...\", nela várias crianças formam uma fila e cada uma deve falar um item que compraria no mercado, porém para aumentar a dificuldade é necessário que cada criança repita todos os produtos que já foram ditos desde o inicio da brincadeira. O jogo termina quando alguém erra a ordem dos produtos ou quando a última criança da fila acerta a sequência. Vamos imaginar que Maria, Pedro e Amanda começaram a brincar e já decidiram quem irá dizer qual produto, Maria irá dizer Pão, Pedro gosta de Queijo e Amanda irá falar Maçã. Supondo que a fila esteja organizada em ordem alfabética o jogo deveria seguir da seguinte forma:     1º Amanda diz: \"Fui ao mercado e comprei Pão\"     2º Maria  diz: \"Fui ao mercado e comprei Pão e Maçã\"     3º Pedro  diz: \"Fui ao mercado e comprei Pão, Maçã e Queijo\" Portanto a ordem dos produtos foi: Pão, Pão, Maçã, Pão, Maçã e Queijo. Seus amigos de colégio decidiram realizar essa brincadeira para passar o tempo. Depois de algum tempo de jogo a lista de produtos que cada um deveria dizer estava ficando muito grande, dessa forma, verificar se alguém errou não é uma tarefa simples. Foi quando seus amigos lembraram que você é programador e poderia resolver facilmente esse problema. Dado a quantidade de pessoas na fila e qual produto cada um irá dizer, eles necessitam de um programa que informe qual é o K-ésimo produto que será dito. Assim ficará mais fácil de determinar se alguém errou ou não. Você conseguirá ajudar seus amigos ?",
        "titulo": "Fui ao Mercado e Comprei...",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste terá dois inteiro N e K (1 ≤ N ≤ 10⁵, 1 ≤ K ≤ min(2 * 10⁹, N * (N + 1) / 2)), representando a quantidade de crianças na brincadeira e qual o produto que seus amigos desejam saber, veja o exemplo para mais detalhes. Na próxima linha terá a sequência s1, s2, s3, ..., sn, onde si representa qual o produto a i-ésima criança irá dizer, cada palavra conterá no máximo 20 letras minúsculas. A entrada termina quando N = 0 e não deve ser processada."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1591",
        "saida": "Para cada caso, imprima para cada palavra em uma única linha o número de vezes que ela aparece no caça palavras, na mesma ordem da entrada. Se a palavra não aparecer imprima 0.",
        "descricao": "Vovó está resolvendo um caça palavras. Você quer ajudar muito sua Vovó e vai desenvolver um programa que, dado o caça palavras e as palavras de busca, imprima o número de vezes que elas aparecem. Neste caça palavras em específico, as palavras estarão apenas na vertical ou horizontal. O caça palavras não dá voltas, ou seja, você não pode ir da última coluna para a primeira! As palavras podem sobrescrever as outras, ou seja, uma letra do caça palavras pode ser usada por mais de uma palavra. Conte palavras de uma letra apenas uma vez, veja o primeiro caso de teste de exemplo!",
        "titulo": "Dia da Vovó",
        "entrada": "Na primeira linha terá um inteiro T (T <= 100) indicando o número de casos de teste. A primeira linha de cada caso terá dois números L (1 ≤ L ≤ 10* ou 1 ≤ L ≤ 50**) e C (1 ≤ C ≤ 10* ou 1 ≤ C ≤ 50**) indicando o número de linhas e de colunas do caça palavras respectivamente. Nas seguintes L linhas terão cada uma C caracteres minúsculos do alfabeto indicando as letras do caça palavras. Na linha seguinte terá um número P (1 ≤ P ≤ 50) indicando quantas palavras você deve procurar. Nas próximas P linhas terá uma palavra a ser pesquisada. As palavras a serem pesquisadas terão tamanho condizentes com os limites do caça palavras. As strings na entrada só conterão letras minúsculas do alfabeto. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1459",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro indicando o menor número de fotos que Daniel deve tirar.",
        "descricao": "Daniel esta fazendo um curso de Visão Computacional e decidiu reproduzir um trabalho muito interessante visto em aula: ele tirou varias fotos de uma mesma cena, variando apenas o foco, para depois combina-las em uma unica imagem onde todos os objetos da cena estão nítidos simultaneamente. Para tal, ele precisa que cada objeto apareca nítido em ao menos uma foto. Daniel sabe que, para cada objeto, existe um intervalo fechado de planos de foco no qual aquele objeto está contido. Por exemplo, na figura abaixo, (i), (ii) e (iii) são três fotos da mesma cena, cada uma tirada com um foco diferente; (iv) é a imagem combinada gerada por Daniel. Como o cartão de memoria de sua câmera é pequeno, ele pediu sua ajuda para, dados os intervalos de foco de todos os objetos da cena que pretende fotografar, determinar o numero mínimo de fotos que ele deve tirar para que seja possível deixar cada objeto nítido em pelo menos uma foto.",
        "titulo": "Foco",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 106 ) indicando o número de objetos na cena. Cada uma das N linhas seguintes contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109) indicando os extremos do intervalo de foco de cada objeto."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1680",
        "saida": "Para cada caso de teste gere um desenho PostScript da borda com comandos em linhas separadas. Comece cada desenho nas coordenadas (300, 420) com o comando \"300 420 moveto\". A primeira rotação ocorre em (310, 420) utilizando o comando \"310 420 lineto\". Continue com rotações em sentido horário ou anti-horário de acordo com a string de entrada, usando a sequência \"x y lineto\" de comandos com as coordenadas devidas. Os pontos de rotações são separados por uma distância de 10 unidades. Não se esqueça do último ponto da borda e de terminar cada caso de teste com os comando stroke e showpage. Você pode exibir tais desenhos com o interpretador de PostScript gv, opcionalmente depois de uma conversão utilizando o ps2ps.",
        "descricao": "Para produtos que são embalados em pequenos pacotes é necessário que a folha de instruções de uso seja dobrada até que seu tamanho se torne suficientemente pequeno. Assume-se que uma folha é retangular e só pode ser dobrada ao longo de linhas paralelas à sua menor borda inicial. O ato de dobrar tal linha, contudo, pode ser realizado em duas direções: tanto a superfície superior da folha é dobrada, ou a superfície inferior. Em ambos os casos as duas partes do retângulo que estão separadas pela linha da dobra são dispostas em conjunto e ignora-se qualquer diferença de espessura na folha dobrada resultante.Depois de diversas dobras serem realizadas pode-se desdobrar a folha novamente e observar sua maior curva de forma que pareça uma curva unidimensional, na verdade a junção de segmentos de linhas. Ao se mover por entre essa curva em uma direção fixa pode-se classificar cada ponto em que a folha foi dobrada como um tipo A, uma rotação em sentido horário, ou tipo V, uma rotação em sentido anti-horário. Dadas tais sequências de classificações, produza um desenho da maior borda da folha assumindo rotações de 90 graus em pontos equidistantes.",
        "titulo": "Borda",
        "entrada": "A entrada contém diversos casos de testes, cada um em uma linha separada. Cada linha contém uma string não vazia de caracteres A e V descrevendo a maior borda da folha. Você pode assumir que o tamanho da string é menor que 200. O aquivo de entrada termina imediatamente após o último caso de teste."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2198",
        "saida": "For each case, display its case number followed by the maximum total enclosed area that can be obtained by folding the magic stick at the given points. Answers within an absolute or relative error of 10−4 will be accepted. Follow the format of the sample output.",
        "descricao": "Magic was accepted by all ancient peoples as a technique to compel the help of divine powers. In a well-known story, one group of sorcerers threw their walking sticks on the floor where they magically appeared to turn into live serpents. In opposition, another person threw his stick on the floor, where it turned into a serpent which then consumed the sorcerers’ serpents! The only magic required for this problem is its solution. You are given a magic stick that has several straight segments, with joints between the segments that allow the stick to be folded. Depending on the segment lengths and how they are folded, the segments of the stick can be arranged to produce a number of polygons. You are to determine the maximum area that could be enclosed by the polygons formed by folding the stick, using each segment in at most one polygon. Segments can touch only at their endpoints. For example, the stick shown below on the left has five segments and four joints. It can be folded to produce a polygon as shown on the right.",
        "titulo": "Magic Sticks",
        "entrada": "The input contains several test cases. Each test case describes a magic stick. The first line in each test case contains an integer n (1 ≤ n ≤ 500) which indicates the number of the segments in the magic stick. The next line contains n integers S1, S2, . . . , Sn (1 ≤ Si ≤ 1000) which indicate the lengths of the segments in the order they appear in the stick. The last test case is followed by a line containing a single zero."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1397",
        "saida": "A saída deve ser composta por uma linha por caso de teste, contendo o número de pontos de cada jogador, separados por um espaço.",
        "descricao": "Og gosta muito de brincar com seus filhos. Seu jogo preferido é o jogo do maior, de autoria própria. Este passatempo (no tempo das cavernas se tinha muito tempo disponível para jogos) é jogado em dupla, Og e um dos seus filhos. O jogo procede da seguinte forma: os dois participantes escolhem um número de rodadas e, a cada rodada, cada participante diz um número de 0 até 10 em voz alta, sendo que o participante que falar o número mais alto ganha um ponto (em caso de empate, ninguém ganha o ponto). No final das rodadas, os pontos são contabilizados e o participante com o maior número de pontos ganha. Og e seus filhos gostam muito do jogo, mas se perdem na contagem dos pontos. Você conseguirá ajudar Og a verificar a pontuação de uma lista de jogos?",
        "titulo": "Jogo do Maior",
        "entrada": "A entrada é composta por vários casos de teste (partidas). Cada caso é iniciado com um inteiro N (de 0 até 10) representando o número de rodadas da partida, sendo que o valor 0 representa o final da entrada e não deve ser processado. Cada uma das próximas N linhas contém dois inteiros, A e B, onde A é o número escolhido pelo primeiro jogador e B é o número escolhido pelo segundo jogador (0 ≤ A, B ≤ 10)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2054",
        "saida": "Para cada instância, você deverá imprimir um identiﬁcador \"Instancia K\", onde K é o número da instância atual. Na linha seguinte, seu programa deve imprimir \"sim\" se o jogador pode vencer a partida, e \"nao\" caso contrário. Imprima uma linha em branco entre cada instância.",
        "descricao": "Durante a Guerra Fria a cidade de Marienbad na República Tcheca ﬁcou imortalizada pelos espiões que usaram seus hotéis luxuosos para troca de informações e até mesmo como um recanto de férias e descanso. Na cidade ﬁcou famoso o jogo de \"Streichholzpiramidentfernungspiel\", como era conhecido e apreciado pelos espiões das duas Alemanhas. O jogo começa com 6 ﬁleiras de palitos. A primeira ﬁleira contém 1 palito, a segunda contém 3, a terceira 5, a quarta 7, a quinta 9 e a sexta 11. Segue abaixo um desenho com o esquema do jogo inicial. Participam do jogo duas pessoas, que alternam seus movimentos. Em cada jogada, uma pessoa deve tirar uma quantidade diferente de zero de palitos do tabuleiro. Todos os palitos retirados em uma jogada devem pertencer à mesma ﬁleira. Assim, se uma ﬁleira contém k palitos e um jogador decide retirar palitos dessa ﬁleira em sua jogada atual, ele tem k opções distintas de jogadas (poderá remover entre 1 e k palitos). Se após uma jogada o tabuleiro ﬁcar completamente vazio (i.e., sem palitos em qualquer uma das 6 ﬁleiras), o jogador que realizou a última jogada (o jogador que removeu os últimos palitos) perde o jogo. Dada a descrição de uma conﬁguração do tabuleiro após algumas jogadas, determinar se o jogador que fará a próxima jogada pode vencer o jogo, assumindo que o adversário é inteligente e portanto sempre escolhe a melhor jogada possível.",
        "titulo": "Last Year at Marienbad",
        "entrada": "A entrada começa com um número inteiro N na primeira linha, indicando o número de instâncias do problema que seu programa deve resolver. As próximas N linhas contêm a descrição das instâncias. Cada uma dessas linhas contém uma sequência de 6 números inteiros. O i-ésimo número da sequência indica quantos palitos ainda restam na i-ésima ﬁleira de palitos do jogo. Todos os números da sequência são válidos (ou seja, o i-ésimo inteiro contém um valor entre 0 e o número de palitos com o qual a i-ésima ﬁleira começa o jogo)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1870",
        "saida": "Para cada caso de teste, imprima, caso o balão tenha passado ileso, a palavra “OUT”, seguida da posição da coluna da qual o mesmo saiu no final; e caso tenha estourado no meio do caminho, a palavra “BOOM”, e em qual linha e coluna o mesmo estourou.",
        "descricao": "Em um feriado, os empregados da empresa fabricante de ventiladores Irmãos Fulano, mais conhecida como IF, propuseram uma gincana. Dada uma caixa retangular, de grandes dimensões, formadas por compartimentos, contendo apenas a parede frontal e traseira, com todos os compartimentos acessíveis internamente, ventiladores pequenos, mas potentes, e sem a grade de proteção, foram amarrados internamente na caixa, em alguns compartimentos. Após isto, um balão é solto dentro da caixa, na reta de uma determinada coluna de compartimentos. Cada ventilador estará ligado com um determinado nível de força. Então, é verificado o ventilador mais próximo à esquerda e à direita do balão. Se ambos estiverem com o mesmo nível de força, o balão continua descendo normalmente. Caso seja diferente, o balão será empurrado para o lado do ventilador com o nível mais fraco, e o mesmo se deslocará tantas colunas forem a diferença entre o maior nível e o menor entre os ventiladores. Veja o caso abaixo em todos os detalhes: Balão solto na coluna 6; Na primeira linha, o ventilador mais próximo à direita do balão tem dois níveis a mais que o mais próximo da esquerda, deslocando o balão para a coluna 4; Na segunda linha, o ventilador mais próximo à direita do balão tem dois níveis a mais que o mais próximo da esquerda, deslocando o balão para a coluna 2; Na terceira linha, o ventilador mais próximo à direita do balão tem o mesmo nível em relação ao mais próximo da esquerda, mantendo o balão na coluna 2; Na quarta linha, o ventilador mais próximo à direita do balão tem dois níveis a menos que o mais próximo da esquerda, deslocando o balão para a coluna 4, saindo sem estourar; Se, na mesma caixa, o balão fosse solto na coluna 2, o balão teria estourado na linha 1 e coluna 1, nas hélices do ventilador que se encontra neste local. Escreva um programa que, dada uma matriz, representando a caixa e uma coluna, na qual o balão será solto, e verifique se o mesmo passa por todos os ventiladores sem estourar.",
        "titulo": "Ventiladores e Balões",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros, L, C e P (1 ≤ L ≤ C ≤ P ≤ 9), indicando a quantidade de L linhas e C colunas da matriz e P a posição da coluna a qual o balão será solto. O último caso de teste é indicado quando L = C = P = 0, sendo que este caso não deve ser processado."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1333",
        "saida": "Para cado caso de teste imprima um linha com um inteiro representando o número de diferentes bons empacotamentos de doces, de acordo com as regras dadas acima.",
        "descricao": "Candy possui um estoque de doces de F diferentes sabores. Ela irá fazer vários pacotes de doces para então vendê-los. Cada pacote deverá ser ou um pacote contendo doces de um único sabor, ou um pacote sortido, contendo doces de cada sabor. Ela decidiu que um bom empacotamento deve honrar as seguintes condições: Cada doce deve ser colocado em exatamente um pacote. Cada pacote, independente de seu tipo, deve conter pelo menos dois doces. Cada pacote, independente de seu tipo, deve conter o mesmo número de doces. Dentro de cada pacote sortido, o número de doces de cada sabor deve ser o mesmo. Deve haver ao menos um pacote sortido. Deve haver ao menos um pacote de cada sabor. Candy estava pensando sobre quantos tipos de bons empacotamentos de doces ela poderia fazer. Dois bons empacotamentos de doces são considerados diferentes se e somente se eles diferem no número de pacotes sortidos, ou no número de doces por pacote. Como Candy irá vender seus doces durante a cerimônia de encerramento desta competição, você foi encorajado a responder sua questão tão rápido quanto possível.",
        "titulo": "Os Doces de Candy",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém um inteiro F indicando o número de sabores (2 ≤ F ≤ 105). A segunda linha contém F inteiros Ci , indicando o número de doces de cada sabor (1 ≤ Ci ≤ 109 para cada 1 ≤ i ≤ F). O último caso de teste é seguido por uma linha contendo um zero."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1886",
        "saida": "Para cada instância, imprima uma única linha contendo o numero mínimo de guardas necessários para vigiar todos os templos reais da cidade.",
        "descricao": "Existem milhares de templos budistas na Tailândia. Em geral, os templos budistas são chamados de \"wat\". Além disso, existem alguns templos que recebem uma distinção pela sua importância e são chamados de \"templos reais\". Um exemplo desse último tipo é o templo \"Wat Phra Kaew\", localizado no Grande Palácio de Bangkok. Esse templo acolhe a imagem do Buda Esmeralda, que é a mais venerada na Tailândia. Em 2016, a final mundial do ACM ICPC será realizada em Phuket, Tailândia. Por isso, espera-se que o turismo se incremente nessa cidade. Isso levou às autoridades de Phuket a pensar em melhorar a segurança dos templos reais da cidade. Por esta razão a Unidade de Segurança de Phuket (USP) contratou a pesquisadora Lua \"a engenhosa\" Kuratowski. A USP está interessada em resolver o seguinte problema, dados N templos reais e M ruas que ligam esses templos, posicionar guardas nessas ruas de forma que todo templo real seja vigiado. Consideramos que um templo é vigiado se pelo menos uma das ruas que tem como extremo esse templo é vigiada por algum guarda. Por outro lado, as ruas foram construídas de forma que sempre existe uma sequência de ruas que liga dois templos quaisquer. Além disso, por costumes ancestrais de Tailândia, se fazemos uma trilha pelos templos reais da cidade, sempre andando por ruas distintas e visitando templos distintos até retornar ao templo de partida, sempre temos a certeza de ter passado por um número par de ruas, já que existe certa superstição com os números ímpares. Como Lua é muito esperta, basta-lhe apenas olhar a descrição dos templos de Phuket, que ela já sabe qual é a resposta ótima (aquela que usa o número mínimo de guardas). Ela escreveu a resposta em um papel, enquanto assobiava \"Elephant Gun\", e o entregou à USP. Ela sabe que você deseja participar da final mundial do próximo ano, e considera que este é um bom problema para testar suas habilidades. Por isso, desafia a você a resolvê-lo.",
        "titulo": "Resguardando os Templos",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de diversas linhas. A primeira linha contém dois inteiros, N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 5*103) que representam o número de templos reais de Phuket e o número de ruas entre templos reais, respectivamente. Cada templo e identificado por um inteiro entre 1 e N. As seguintes M linhas descrevem as ruas da cidade. Cada rua é descrita por dois inteiros que representam os templos que ela liga."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "2014",
        "saida": "Para cada uma das Q consultas, mostre uma linha com a letra maiúscula \"Y\" se o grupo sanguíneo correspondente é possível na descendência dos pais dadas; caso contrário saída a letra maiúscula \"N\". Escreva os resultados na mesma ordem que as consultas aparecem na entrada.",
        "descricao": "Existem quatro grupos possíveis de sangue para os seres humanos: AB, A, B e O, o que significa que os glóbulos vermelhos têm antigenes de tipos, respectivamente, A e B, a apenas A, apenas B, e sem antigene em tudo. O nosso grupo de sangue é determinado por dois alelos no nosso DNA. Cada alelo é do tipo A, B ou O. A tabela a seguir lista os possíveis combinações de alelos que alguém pode ter para cada grupo sanguíneo: Nós herdamos exatamente um alelo de cada um dos nossos dois pais. Assim, tendo em conta os grupos sanguíneos de ambos os pais, podemos dizer com certeza se algum grupo de sangue é possível, ou não, em sua prole. Por exemplo, se os grupos sanguíneos dos dois pais são AB e B, em seguida, as possíveis combinações de alelos para eles são, respectivamente, {AB} e {OB, BB}. Desde o fim dos alelos não importa, as possíveis combinações de alelos para a prole são {OA, AB, OB, BB}. Isso significa que os grupos sanguíneos AB, A e B são possíveis em sua prole, mas o grupo sanguíneo O não é. Muito bom de fato! Mas e se a vida na Terra evoluiu de modo que uma pessoa tinha três pais, três alelos, e três tipos de antígenos diferentes? As combinações de alelos ficaria assim: Se os grupos sanguíneos dos três pais são A, BC e O, em seguida, todos os grupos sanguíneos são possíveis em sua prole, exceto os grupos BC e ABC. O universo é vasto! Pode haver, lá fora, no espaço, alguma forma de vida cujos indivíduos têm pais N, N alelos, e N diferentes tipos de antígenos. Tendo em conta os grupos sanguíneos para os pais N, e uma lista de grupos sanguíneos Q para testar, o programa tem de determinar quais os que são possíveis, e quais não são, na descendência dos pais dadas.",
        "titulo": "Grupos Sanguineos",
        "entrada": "A primeira linha contém dois inteiros N e Q, representando respectivamente o número de pais (e alelos e tipos de antígenos) e o número de consultas (1 ≤ N ≤ 100 e 1 ≤ Q ≤ 40). Cada uma das N linhas seguintes descreve o grupo de sangue de um dos pais. Depois disso, cada uma das seguintes linhas Q descreve um grupo de sangue para testar. Tipos de antigenes são identificados com números inteiros distintos de 1 a N, não letras. Cada linha que descreve um grupo sanguíneo contém um número inteiro B que indica o número de tipos de antigenes do grupo sanguíneo (0 ≤ B ≤ N), seguido por B inteiros diferentes C1, C2, ..., CB representando os tipos de antigénios presentes no sangue grupo (1 ≤ Ci ≤ N para i = 1, 2, ..., B)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2206",
        "saida": "For each test case, display the case number and the volume of the full bottle on one line. On a second line, display the increasing sequence of no more than 8 successive distances up from the bottom of the bottle for the volume markings. All volumes and height marks should be accurate to two decimal places. If the bottle does not have a volume that allows at least one mark, display the phrase 'insufficient volume'. No test case will result in a mark within 0.01 from the top of the bottle. The volume of the bottle will not exceed 1 000. All rounded distances for marks on a bottle differ by at least 0.05.",
        "descricao": "In her bike rides around Warsaw, Jill happened upon a shop that sold interesting glass bottles. She thought it might make an interesting project to use such bottles for measuring liquids, but this would require placing markings on the bottles to indicate various volumes. Where should those volume marks be placed? Jill formalized the problem as follows. Assume a bottle is formed by revolving a shape that is the same as the graph of a polynomial P between x = xlow and x = xhigh around the x-axis. Thus the x-axis is coincident with a vertical line through the center of the bottle. The bottom of the bottle is formed by a solid circular region at x = xlow, and the top of the bottle, at x = xhigh, is left open. The first sample input represents a bottle formed using the simple polynomial 4 − 0.25x, with xlow = 0 and xhigh = 12. The bottom of this bottle is a circle with a radius of 4, and the opening at the top is a circle with a radius of 1. The height of this bottle is 12. Volume markings are in increments of 25. Given a polynomial P, xlow, xhigh, and the volume increment between successive marks on the bottle, compute the distances up from xlow for the marks at successive volume increments. A mark cannot be made past the top of the bottle, and no more than the first 8 increments should be marked. Assume the value of P is greater than zero everywhere between xlow and xhigh.",
        "titulo": "Curvy Little Bottles",
        "entrada": "Each test case consists of three lines of bottle data: Line 1: n, the degree of the polynomial (an integer satisfying 0 ≤ n ≤ 10). Line 2: a0, a1, . . ., an, the real coefficients of the polynomial P defining the bottle’s shape, where a0 is the constant term, a1 is the coefficient of x1 , . . ., and an is the coefficient of xn . For each i, −100 ≤ ai ≤ 100, and an != 0. Line 3: xlow and xhigh, the real valued boundaries of the bottle (−100 ≤ xlow 0.1). inc, an integer which is the volume increment before each successive mark on the bottle (1 ≤ inc ≤ 500)."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1090",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo um número inteiro, indicando o maior número de sets que podem ser formados com as cartas dadas.",
        "descricao": "Set é um jogo jogado com um baralho no qual cada carta pode ter uma, duas ou três figuras. Todas as figuras em uma carta são iguais, e podem ser círculos, quadrados ou triângulos. Um set é um conjunto de três cartas em que, para cada característica (número e figura), ou as três cartas são iguais, ou as três cartas são diferentes. Por exemplo, na figura abaixo, (a) é um set válido, já que todas as cartas têm o mesmo tipo de figura e todas elas têm números diferentes de figuras. Em (b), tanto as figuras quanto os números são diferentes para cada carta. Por outro lado, (c) não é um set, já que as duas últimas cartas têm a mesma figura, mas esta é diferente da figura da primeira carta. O objetivo do jogo é formar o maior número de sets com as cartas que estão na mesa; cada vez que um set é formado, as três cartas correspondentes são  removidas de jogo. Quando há poucas cartas na mesa, é fácil determinar o maior número de sets que podem ser formados; no entanto, quando há muitas cartas há muitas  combinações possíveis. Seu colega quer treinar para o campeonato mundial de Set, e por isso pediu que você fizesse um programa que calcula o maior número de sets que podem ser formados com um determinado conjunto de cartas.",
        "titulo": "Set",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (3 · N · 3 × 104), indicando o número de cartas na mesa; cada uma das N linhas seguintes contém a descrição de uma carta. A descrição de uma carta é dada por duas palavras separadas por um espaço; a primeira palavra é \"um\" ou \"dois\"   ou \"tres\" e indica quantas figuras aquela carta possui. A segunda palavra é, “circulo” (ou “circulos”), “quadrado” (ou “quadrados”) ou “triangulo” (ou “triangulos”) indica qual tipo de figura está naquela carta. O final da entrada é indicado por uma linha contendo um zero."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1443",
        "saida": "O programa deverá imprimir, para cada viagem, uma linha contendo a distância percorrida em metros (com duas casas decimais).",
        "descricao": "Marcos é um cientista de computação que trabalha em uma empresa de transporte, analisando dados das viagens dos caminhões de carga da empresa e otimizando notas de veículos. Devido aos constantes congestionamentos envolvendo veículos da empresa, esta designou uma nova tarefa para Marcos: computar a distância percorrida por cada veículo em situações de tráfego intenso. Marcos está muito ocupado com outras tarefas na empresa, e designou esta tarefa de calcular a distância percorrida em viagens para você, o novo estagiário da empresa. De forma mais específica, a distância percorrida de cada viagem deve ser calculada a partir dos dados de aceleração durante a viagem. Nestes dados constam as faixas de tempo onde o motorista pisou no acelerador (aceleração constante de 1m/s², até uma velocidade máxima de 10m/s), sendo que quando o veículo não estiver acelerando o motorista estará com o pé no freio (veículo parado ou freando com uma desaceleração constante de 2m/s²). A distância total percorrida na viagem deve ser calculada a partir destas faixas de tempo, assumindo que o veículo está inicialmente parado.",
        "titulo": "Engarrafamento",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso corresponde a uma viagem e é iniciado por uma linha contendo um inteiro N, que diz a quantidade de faixas de aceleração do veículo durante a viagem. O final da entrada é marcado com N = 0, caso que não deve ser processado. Cada uma das próximas N linhas contém dois inteiros, a e b, designando as faixas de tempo (em segundos) onde o motorista está com o pé no acelerador (acelerou no tempo t = a até t = b). No primeiro caso de teste do exemplo abaixo (primeira viagem) o motorista pisou no acelerador no tempo t = 0s até t = 5s, pisou no freio entre t = 5s e t = 8s, acelerou de t = 8s até t = 15s, freou entre t = 16s e t = 17s e acelerou até t = 50s. A distância percorrida deve ser computada de t = 0s até o segundo final da última faixa de aceleração, neste caso de t = 0s até t = 50s. Limites: 0 ≤ N ≤ 1000, sendo que cada viagem demora no máximo 30h."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2211",
        "saida": "For each case, display the case number. Then if suitable new pipes and plugs can be used to construct the desired system, display the minimum cost of connecting the source junction to the destination junction, accurate to four decimal places. If it is impossible to connect the source to the destination, display the word 'impossible'.",
        "descricao": "You have been hired to construct a system to transport water between two points in an old factory building using some existing components of the old plumbing. The old components consist of pipes and junctions. Junctions are points where pipes may have previously been joined. We say previously joined, because some of the old pipes were damaged and have been removed, effectively leaving open holes in the junctions to which they were connected. If water should enter one of these junctions, it would pour out of an open hole and eventually flood the building—clearly an undesirable event. You can remedy this situation by installing new pipes between some of the open holes and installing plugs to close other open holes as necessary. When you install a new pipe connecting two holes (which must be in two different junctions), the two holes are no longer open and water will be able to flow through the new pipe. The cost of installing a new pipe is equal to the distance between the centers of the two junctions the pipe connects. The cost of installing a plug in an open hole is 0.5. You are not concerned about open holes in junctions that will never be reached by water. Two of the junctions are special. One, called the source, is the point where water will be pumped into the new system. The other, called the destination, is where the water is needed. After any plugs and new pipes have been added to the system, water will be pumped into it at the source with a pressure sufficient to reach a specified height (in the absence of leaks, of course). You are allowed to select the pressure arbitrarily, and are guaranteed that the pressure will not change during the operation of the system. Naturally the pressure must be sufficient to force water up to the heights of both the source and the destination. Your task is simply to find the most inexpensive way of getting water from the source junction to the destination junction without flooding the building. The figure below corresponds to the first sample input case, where black dots represent open holes, junction 1 is the source, and junction 7 is the destination. (The position of a black dot on its circle has no significance and is used for illustration purposes only.) Water flows through the system according to the laws of physics. If the pressure is sufficient to fill a junction with water, then that junction will remain filled with water. If there are pipes extending horizontally or downward from a junction, then water will also flow through those pipes. Water will also flow upward through pipes connected to a junction up to the height determined by the water pressure. Of course, if the water reaches an open hole in a junction, it will flow through the hole and flood the building. In the first sample input case, you can connect junctions 1 and 5 at a cost of 3, plug the open holes in junction 2, and set the pressure so that the water flows up to junction 7 only. The water will fill junctions 1, 2, 5, 6 and 7, and will flow no higher. A different (more expensive) solution would be to simply plug all the holes at a total cost of 5, and let the water flow through all the junctions. You cannot solve this case by connecting junctions 1 and 6 and plugging holes in junctions 2 and 5, since junction 6 has no open holes to which a new pipe can be connected. Assume existing pipes and any new pipes do not interfere with each other or with any junctions, except those to which they are connected. That is, even if a straight line from junction A to junction B passes through junction C, any pipe from A to B will not touch C.",
        "titulo": "Minimum Cost Flow",
        "entrada": "The first line of each test case contains two integers N and M, where N (2 ≤ N ≤ 400) is the number of junctions in the building (numbered 1 through N) and M (0 ≤ M ≤ 50 000) is the number of existing usable pipes. Each of the next N lines contains four integers xi , yi , zi , and ki satisfying −10 000 ≤ xi , yi , zi ≤ 10 000 and 0 ≤ ki ≤ 400, i = 1, 2, ..., N. The ith line describes junction i: (xi , yi , zi) is the location of the ith junction where the z-axis is the vertical axis; ki indicates the number of open holes in the junction. Each of the next M lines contains two integers aj and bj satisfying 1 ≤ aj < bj ≤ N. The jth line indicates that pipe j connects junctions aj and bj . At most one pipe connects any pair of junctions, and no two junctions share the same coordinates. The source is junction 1, and the destination is junction N."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1934",
        "saida": "Seu programa deve produzir uma linha para cada variável do quebra-cabeças, contendo o nome da variável e o seu valor inteiro. As variáveis devem ser escritas em ordem alfabética crescente, ou seja,respeitando a ordem aa, ab, . . . , az, ba, bb, . . . , za, zb, . . . , zz.",
        "descricao": "Discussões recentes na Internet causaram uma onda de renovado interesse em quebra-cabeças de lógica. Neste problema a sua tarefa é escrever um programa que resolva quebra-cabeças como o mostrado na figura abaixo, muito comum em revistas de desafios lógicos. Nesse quebra-cabeças, as letras dentro do quadriculado representam variáveis, e os números representam as somas dos valores das variáveis em cada linha ou coluna. O objetivo desse tipo de quebra-cabeça é determinar o valor de cada variável de modo a satisfazer as somas das linhas e colunas mostradas. Mas como esse tipo de quebra-cabeças é para crianças, ele tem uma propriedade que o torna mais fácil de encontrar a solução: sempre é possível encontrar uma linha ou coluna em que há apenas uma variável cujo valor ainda é desconhecido. Assim, uma possível maneira de resolver o problema é, a cada passo da solução, encontrar o valor de uma variável. Dado um quebra-cabeça, você deve determinar os valores das variáveis que o solucionam.",
        "titulo": "Quebra-cabeça",
        "entrada": "A primeira linha contém dois inteiros L (1 ≤ L ≤ 100) e C (1 ≤ C ≤ 100) indicando o número de linhas e o número de colunas do quebra-cabeça. Cada uma das L linhas seguintes contém C nomes de variáveis, seguidos de um inteiro S, a soma resultante das variáveis dessa linha (−108 ≤ S ≤ 108). A última linha contém C inteiros Xi (−108 ≤ Xi ≤ 108), indicando respectivamente a soma das variáveis na coluna i. Nomes de variáveis são formados por precisamente duas letras minúsculas, de ’a’ a ’z’. Todos os quebra-cabeças têm solução única, em que todas as variáveis são números inteiros entre −106 and 106."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "2156",
        "saida": "Para cada caso de teste, imprima um valor inteiro com a quantidade de pastilhas comidas. ########## #<*******# ########## UWWRWW Neste exemplo, o Pak-man vira para cima, tenta andar duas casas, mas como existe parede, fica no mesmo lugar. Depois vira para a direita e anda duas casas, comendo, com isto, duas pastilhas.",
        "descricao": "Uma vez, um jogo novo precisava ser desenvolvido. Nele, os jogadores controlariam Pak-man, com o objetivo de comer todas as pastilhas que se encontram espalhadas num labirinto, enquanto evitam quatro fantasmas que escapam de uma prisão. Em cada canto da área de jogo, estão pastilhas maiores que permitem Pak-man caçar os fantasmas, em vez de ser caçado, durante um curto período de tempo. Num primeiro estágio do jogo, sem os fantasmas e sem as pastilhas maiores, você foi designado para desenvolver um programa que, dado um determinado cenário, e uma série de movimentos, informe quantas pastilhas foram comidas. Escreva um programa que, dado um cenário e instruções de movimentos, informe quantas pastilhas foram comidas no jogo.",
        "titulo": "As Aventuras de Pak-man",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste começa com três valores inteiros, L (3 ≤ L ≤ 100), C (3 ≤ C ≤ 100) e I (3 ≤ I ≤ 10000), indicando a quantidade de linhas e colunas do cenário e a quantidade de instruções. Em seguida, terão L linhas e C colunas, informando o cenário, o qual só terá # onde representa parede, * onde representa uma pastilha, < onde representa o Pak-man e espaço, locais que o Pak-man pode movimentar. A linha seguinte tem I caracteres, com as instruções de movimento do Pak-man, os quais L, R, U e D indica a direção a qual o Pak-man está direcionado (L-Esquerda, R-Direita, U-Cima, D-Baixo) e W significa que o Pak-man irá movimentar uma posição na direção a qual está. Se ele for caminhar e o local pretendido for uma parede, ele não sai do lugar. Se for uma pastilha, ele come a pastilha e onde era pastilha se torna um espaço livre e ele fica no lugar da pastilha. Se for um espaço livre ele vai ao local pretendido. O final da entrada será com três zeros. Detalhe: Pak-man sempre começará um cenário novo virado para a direita."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2199",
        "saida": "For each test case, display its case number followed by the minimum number of escape shafts needed for the system of mine tunnels and the total number of ways these escape shafts can be installed. You may assume that the result fits in a signed 64-bit integer. Follow the format of the sample output.",
        "descricao": "John Digger is the owner of a large illudium phosdex mine. The mine is made up of a series of tunnels that meet at various large junctions. Unlike some owners, Digger actually cares about the welfare of his workers and has a concern about the layout of the mine. Specifically, he worries that there may a junction which, in case of collapse, will cut off workers in one section of the mine from other workers (illudium phosdex, as you know, is highly unstable). To counter this, he wants to install special escape shafts from the junctions to the surface. He could install one escape shaft at each junction, but Digger doesn’t care about his workers that much. Instead, he wants to install the minimum number of escape shafts so that if any of the junctions collapses, all the workers who survive the junction collapse will have a path to the surface. Write a program to calculate the minimum number of escape shafts and the total number of ways in which this minimum number of escape shafts can be installed.",
        "titulo": "Mining Your Own Business",
        "entrada": "The input consists of several test cases. The first line of each case contains a positive integer N (N ≤ 5·104 ) indicating the number of mine tunnels. Following this are N lines each containing two distinct integers s and t, where s and t are junction numbers. Junctions are numbered consecutively starting at 1. Each pair of junctions is joined by at most a single tunnel. Each set of mine tunnels forms one connected unit (that is, you can get from any one junction to any other). The last test case is followed by a line containing a single zero."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1618",
        "saida": "A saída deverá imprimir para cada caso de testes o número 1, se o robô estiver dentro da área (considerar as bordas da figura como parte da área da figura), e imprimir o número 0 caso contrário.",
        "descricao": "Você recebeu a missão de verificar se o robô invadiu uma área retangular formada por quatro pontos cardeais (A,B,C e D). Serão informados os quatro pontos de um plano cardeal conforme a figura. A área será formada pela ligação dos quatro pontos da seguinte forma A-B, B-C, C-D e D-A. Será informado ainda a coordenada X,Y do robô.",
        "titulo": "Colisão",
        "entrada": "A entrada é composta de vários casos de testes. A primeira linha é formada por um número N indicando o total de casos de testes. As próximas N linhas são constituídas por 10 números inteiros (Ax, Ay, Bx, By, Cx, Cy, Dx, Dy, RX, RY) representando cada um dos vértices A, B, C e D e pela posição X, Y do robô. Cada valor é separado por um espaço em branco."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1250",
        "saida": "Para cada caso, seu programa deve imprimir um inteiro representando o número de vezes que KiloMan é atingido.",
        "descricao": "Você chegou a um dos últimos chefões no novo jogo de ação 2-D de deslocamento lateral, KiloMan. O chefão tem uma arma grande que pode atirar projéteis em várias alturas. Para cada tiro, KiloMan pode ficar parado ou pular. Se ele ficar parado e o tiro estiver na altura 1 ou 2, ele será atingido. Se ele pular e o tiro estiver a uma altura maior que 2, então ele também será atingido. Caso contrário, ele não é atingido. Dada a altura de cada tiro e a sequência de pulos, quantas vezes KiloMan será atingido?",
        "titulo": "KiloMan",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N que indica o número de casos de teste. Cada caso de teste é composto por 3 linhas. A primeira linha contém um inteiro T (1 ≤ T ≤ 50) que indica o número de tiros. A segunda linha contém T inteiros, que representam a sequência das alturas às quais os tiros estão sendo disparados. Cada elemento da sequência será entre 1 e 7, inclusive. A terceira linha da entrada contém a string \"pulos\", que representa a sequência de pulos que KiloMan tentará; 'J' significa que ele irá pular e 'S' significa que ele ficará parado. Por exemplo, se o primeiro número da sequência de tiros for 3 e o primeiro caractere de \"pulos\" for 'J', então KiloMan pulará assim que o chefão atirar a uma altura 3 (e, portanto, ele será atingido)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1588",
        "saida": "Imprima na ordem de classificação os times da entrada, um time em cada linha. Não é necessário imprimir nada entre os casos de teste!",
        "descricao": "A federação de futebol te contratou para elaborar a classificação dos times do campeonato. Você vai receber uma lista com alguns jogos ocorridos e deve ordenar os times. Uma vitória garante 3 pontos ao time, um empate 1 ponto e uma derrota 0 pontos. Leia atentamente a seguir o regulamento sobre como a classificação deve ser feita: Primeiramente o time com mais pontos deve ficar em primeiro. Caso haja empate, o time com mais vitórias fica na frente. Caso ainda tenha empate, o time com mais gols fica na frente. Por último se nenhum dos critérios acima possa desempatar os times, o que aparecer primeiro na entrada fica na frente. Dado os times e os jogos que já aconteceram, ordene e imprima o nome dos times na ordem de classificação.",
        "titulo": "Ajude a Federação",
        "entrada": "Na primeira linha teremos um inteiro T (T ≤ 100), indicando o número de casos de teste. Na primeira linha de cada caso teremos dois números, N (2 ≤ N ≤ 20* ou 2 ≤ N ≤ 100**) e M (1 ≤ M ≤ 100* ou 1 ≤ M ≤ 1000**), indicando quantos times estão no campeonato e quantos jogos já aconteceram. Nas próximas N linhas teremos os nomes dos times, que são únicos, contendo apenas letras minúsculas do alfabeto. Nas próximas M linhas há a informação dos jogos na seguinte forma: X timeA Y timeB, indicando que o timeA jogou contra o timeB e o primeiro marcou X gols e o segundo Y gols. As strings terão tamanho entre 1 e 20 e o número de gols de um time em cada partida será entre 0 e 100.Um time nunca joga contra ele mesmo, porém ele pode jogar inúmeras vezes contra qualquer outro time. * ocorrerá em aproximadamente 90% dos casos de teste; ** ocorrerá no restante dos casos."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1793",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de segundos que a escada rolante ficou ativa.",
        "descricao": "Escadas rolantes sem dúvidas facilitam muito a vida das pessoas. Subir escadas é uma das tarefas mais tediosas já inventadas (após a invenção das escadas normais). Após algumas observações você percebeu que há muita energia gasta com escadas rolantes, pois elas continuam funcionando mesmo quando não há ninguém à utilizando. Para contornar isso, o dono de um shopping local instalou um sensor que verifica quando há alguém na escada rolante. Quando o sensor não detecta nenhuma presença, a escada rolante é desativada, assim economizando energia até que a próxima pessoa chegue. Para ser mais específico, o sistema funciona da seguinte maneira: a escada está inicialmente desativada. O tempo necessário para que uma pessoa chegue de um lado até o outro da escada rolante é 10 segundos. Ou seja, se uma única pessoa se aproximar da escada rolante no tempo t, a escada rolante ficará ativada nos tempos t, t+1, t+2, …, t+8 e t+9, e será desativada no tempo t+10, momento no qual a pessoa já saiu da escada rolante. Tal duração pode ser prolongada caso uma ou mais pessoas se aproximem da escada rolante durante tal processo. O dono do shopping local agora pediu sua ajuda. Escreva um algoritmo que, dados os tempos em que as pessoas se aproximaram da escada rolante, diga por quantos segundos a escada ficou ativada.",
        "titulo": "Escada Rolante",
        "entrada": "Haverá no máximo 30 casos de teste. Cada caso de teste inicia com uma linha contendo um inteiro N, indicando o número de pessoas que usaram a escada rolante no dia em questão (1 ≤ N ≤ 100). Na linha seguinte haverá N inteiros distintos, dados em ordem crescente, indicando o tempo t em que cada pessoa se aproximou da escada (1 ≤ t ≤ 1000). O último caso de teste é indicado quando N = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1800",
        "saida": "Para cada escritório em que ele esteve na última semana seu programa deverá retornar \"0\" caso ele já tenha visitado esse escritório ao procurar pelas chaves, ou \"1\" caso ele não tenha visitado esse escritório ainda enquanto procurava pelas chaves.",
        "descricao": "Gabriel trabalha como Engenheiro de Software na empresa FingerBook, na última semana estava com tanto trabalho para fazer que resolveu dormir no FingerBook a semana inteira. Depois que terminou todo o trabalho e resolveu ir embora percebeu que não estava com as chaves de casa, então decidiu voltar e buscar as chaves. Gabriel decidiu começar a procurar visitando quais escritórios ele esteve recentemente, Após procurar em todos os escritórios que esteve nos úlimos dois dias, ele ainda não encontrou as chaves. Então resolveu pedir sua ajuda para procurar pelas chaves novamente. Para isso ele informará alguns dos escritórios em que ele esteve na última semana. Ajude-o a encontrar as chaves informando em quais escritórios é possível que ele tenha esquecido as chaves.",
        "titulo": "Onde Estão Minhas Chaves",
        "entrada": "A primeira linha é composta por dois inteiros Q(1 ≤ Q ≤ 1*103) e E(1 ≤ E ≤ Q) representado respectivamente a quantidade de escritórios que ele esteve na última semana e a quantidade de escritórios que esteve nos últimos dois dias. A linha seguinte contém E inteiros Si (1 ≤ Si ≤ 1000) contendo o número de identificação de cada um dos escritórios em que ele esteve nos últimos dois dias. Seguem Q inteiros Ci (1 ≤ Ci ≤ 1000) contendo número de identificação de cada um dos escritórios em que ele esteve durante a última semana."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1327",
        "saida": "Para cada caso de teste na entrada, seu programa deve produzir uma linha de saída, contendo o nome do vencedor ou vencedores. A lista de vencedores deve aparecer na mesma ordem dada na entrada, e cada nome deve ser seguido por um espaço. A saída deve ser escrita na saída padrão.",
        "descricao": "Drop Out é o nome de um simples jogo de cartas, que é jogado com um baralho normal de 52 cartas. As cartas são ordenadas da seguinte maneira: (Ás, 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete, Rainha, Rei), com o Ás sendo o menor deles, e o Rei o maior. O naipe das cartas é desconsiderado. Os jogadores (no mínimo dois) sentam em volta de uma mesa, um baralho é embaralhado e colocado no centro da mesa, com as cartas de face voltada para baixo. No início do jogo, todos os jogadores estão \"ativos\". O jogo se prossegue em turnos. Em cada turno, os jogadores ativos recebem uma carta do baralho, no sentido horário, independente da posição onde estão sentados. Os jogadores que recebem a menor carta no turno são eliminados do jogo e tornam-se \"inativos\". Note que até quatro jogadores podem ser eliminados em cada turno. O jogo termina quando resta somente um jogador ativo, o qual é o vencedor. Se todo o baralho acabar antes dos turnos terminarem, o jogo termina e todos os jogadores ativos no início do último turno são vencedores. Dado o número de jogadores, seus nomes e um baralho de cartas embaralhadas, você deve escrever um programa que simule o jogo e determine o vencedor ou vencedores.",
        "titulo": "Drop Out",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste consiste de seis linhas. A primeira linha contém um inteiro N, indicando o número de jogadores no jogo (2 ≤ N ≤ 20). A segunda linha contém uma lista dos nomes dos jogadores, separados por espaços. O nome de um jogador é composto de no máximo 16 letras do alfabeto inglês (de 'A' até 'Z' e 'a' até 'z'). As cartas são entregues aos jogadores na ordem dada na lista. As próximas quatro linhas contém a descrição do baralho embaralhado. As cartas são representadas por inteiros de 1 a 13 (1, 11, 12 e 13 representam, respectivamente, as cartas Ás, Valete, Rainha e Rei). O baralho é descrito em quatro linhas de treze inteiros cada, separados por um único espaço. O baralho é listado de cima para baixo, então a primeira carta entregue é a primeira carta listada. O final da entrada é indicado por N = 0. A entrada deve ser lida da entrada padrão."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2216",
        "saida": "For each test case, display the case number and either the phrase 'Takeover Incorporated' or the phrase 'Buyout Limited' depending on who wins the takeover war if both corporations act optimally.",
        "descricao": "You are studying a takeover war between two large corporations, Takeover Incorporated and Buyout Limited. Each of these corporations controls a number of subsidiaries. The aim in this war is simply to drive the competition out of the market. There are N subsidiaries of Takeover Incorporated and M subsidiaries of Buyout Limited, and you know the market value of each subsidiary. Each company can designate one of its subsidiaries to perform a takeover. The takeover can either be friendly or hostile. A friendly takeover means a subsidiary of a corporation merges with a different subsidiary of the same corporation. The market value of the merged subsidiary is the sum of the market values of the constituent subsidiaries. There is no constraint on the relative sizes of the subsidiaries participating in a friendly takeover. A hostile takeover means a subsidiary A of a corporation attempts to take over a subsidiary B of the other corporation. For this to succeed, the market value of A has to be greater than the market value of B. After this move, B disappears from the market. The market value of A does not change (the gain of incorporating B’s assets is offset by the monetary cost of the takeover). For simplicity we assume that no sequence of moves leads to two subsidiaries of different corporations having the same market value. The companies take turns making moves in this takeover war, with Takeover Incorporated going first. A company will do nothing on its turn only if it cannot make a takeover. A company loses the takeover war if all its subsidiaries are taken over. Your aim is to learn which company can guarantee a victory from this war. In the first case of the sample data, Takeover Incorporated can simply take over one of the companies of Buyout Limited in its first move with the 7-value subsidiary. Then it will lose one of its small (1-value) subsidiaries to a hostile takeover, and then it will take over the second subsidiary of Buyout Limited. In the second case, Takeover has to make a friendly takeover in its first move. Buyout Limited will join its two subsidiaries into a single company with market value 10. Takeover will have to make a friendly takeover again (as again it will not have a large enough subsidiary to take over Buyout’s giant). Now Takeover will have two subsidiaries, valued either 9 and 3 or 6 and 6. In either case, Buyout takes over one of these subsidiaries, Takeover has to pass, and Buyout takes over the other one.",
        "titulo": "Takeover Wars",
        "entrada": "Each test case is described by three lines of input. The first line contains two numbers 1 ≤ N ≤ 105 and 1 ≤ M ≤ 105 denoting respectively the number of subsidiaries of Takeover Incorporated and Buyout Limited. The next line lists the N sizes ai of the subsidiaries of Takeover Incorporated (1 ≤ ai ≤ 1012), and the third line lists the M sizes bj of the subsidiaries of Buyout Limited (1 ≤ bj ≤ 1012)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1885",
        "saida": "Para cada instância, imprima uma linha contendo um único caractere. Imprima 'Y' se for possível fazer o sorteio; caso contrário, imprima 'N'.",
        "descricao": "Borommarachathirat IV (สมเด็จพระบรมราชาธิราชที่ 4) foi um monarca do reino de Ayutthaya no século XVI. Borommarachathirat IV decidiu organizar uma loteria para sua população de súditos, utilizando uma certa quantidade de dados. São dados tradicionais tailandeses, que podem ter várias faces, cada face podendo ocorrer com a mesma probabilidade. Por seu forte senso de justiça, o monarca exige que o sorteio seja perfeitamente justo, ou seja, que cada um de seus súditos tenha a mesma chance de ser sorteado. O sorteio consiste de um número finito de lançamentos e, após cada lançamento, é decidido se houve algum vencedor ou se será necessário realizar um novo lançamento. Os lançamentos devem seguir as seguintes regras: vários dados podem ser jogados simultaneamente no mesmo lançamento; resultados anteriores podem influenciar na escolha dos dados para os lançamentos seguintes; um mesmo dado pode ser escolhido para vários lançamentos. O importante é garantir que, como resultado do sorteio, cada um dos habitantes tenha iguais chances de ser sorteado. Veja que nem sempre isso é possível. Por exemplo, se tivermos 5 pessoas e apenas um dado de 6 faces, não há como realizar o sorteio. Já com este dado é possível realizar o sorteio se a população for de 3, 6, 18, ou 36 pessoas, por exemplo. Sua tarefa neste problema é fazer um programa para ajudar o monarca a decidir se é possível realizar o sorteio com os dados disponíveis.",
        "titulo": "Loteria Tailandesa",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por duas linhas. A primeira linha contém 2 inteiros, N (1 ≤ N ≤ 1018) e K (0 ≤ K ≤ 105), que representam o número de pessoas e o número de dados, respectivamente. A segunda linha contém K inteiros. O i-ésimo inteiro dessa linha, digamos fi (1 ≤ fi ≤ 1018), representa o número de faces do i-ésimo dado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1558",
        "saida": "Para cada linha, imprima \"YES\" se o número pode ser representado por uma soma de dois inteiros ao quadrado, caso contrário imprima \"NO\".",
        "descricao": "Quais números inteiros podem ser representados por uma soma de dois inteiros ao quadrado? É essa a pergunta que seu programa deve responder! Por exemplo, o número 41 pode ser representado como (-4)2 + 52 = 41, já o número 7 não pode ser representado da mesma maneira.",
        "titulo": "Soma de Dois Quadrados",
        "entrada": "A entrada é composta por várias linhas, cada linha contém um inteiro com módulo menor ou igual a 10000."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2207",
        "saida": "For each test case, display the case number and the time in seconds of the shortest possible tour.",
        "descricao": "Imagine you are a tourist in Warsaw and have booked a bus tour to see some amazing attraction just outside of town. The bus first drives around town for a while (a long while, since Warsaw is a big city) picking up people at their respective hotels. It then proceeds to the amazing attraction, and after a few hours goes back into the city, again driving to each hotel, this time to drop people off. For some reason, whenever you do this, your hotel is always the first to be visited for pickup, and the last to be visited for dropoff, meaning that you have to suffer through two not-so-amazing sightseeing tours of all the local hotels. This is clearly not what you want to do (unless for some reason you are really into hotels), so let’s fix it. We will develop some software to enable the sightseeing company to route its bus tours more fairly—though it may sometimes mean longer total distance for everyone, but fair is fair, right? For this problem, there is a starting location (the sightseeing company headquarters), h hotels that need to be visited for pickups and dropoffs, and a destination location (the amazing attraction). We need to find a route that goes from the headquarters, through all the hotels, to the attraction, then back through all the hotels again (possibly in a different order), and finally back to the headquarters. In order to guarantee that none of the tourists (and, in particular, you) are forced to suffer through two full tours of the hotels, we require that every hotel that is visited among the first [h/2] hotels on the way to the attraction is also visited among the first [h/2] hotels on the way back. Subject to these restrictions, we would like to make the complete bus tour as short as possible. Note that these restrictions may force the bus to drive past a hotel without stopping there (this is not considered visiting) and then visit it later, as illustrated in the first sample input.",
        "titulo": "Bus Tour",
        "entrada": "The first line of each test case consists of two integers n and m satisfying 3 ≤ n ≤ 20 and 2 ≤ m, where n is the number of locations (hotels, headquarters, attraction) and m is the number of pairs of locations between which the bus can travel. The n different locations are numbered from 0 to n−1, where 0 is the headquarters, 1 through n−2 are the hotels, and n − 1 is the attraction. Assume that there is at most one direct connection between any pair of locations and it is possible to travel from any location to any other location (but not necessarily directly). Following the first line are m lines, each containing three integers u, v, and t such that 0 ≤ u, v ≤ n−1, u != v, 1 ≤ t ≤ 3600, indicating that the bus can go directly between locations u and v in t seconds (in either direction)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1225",
        "saida": "Para cada caso de teste imprima uma linha contendo um único número inteiro indicando o número mínimo de compassos que a música terá. Se não é possível terminar a música com todos os integrantes cantando a mesma nota, imprima o valor−1.",
        "descricao": "A Maestrina do coral está planejando o espetáculo que apresentará na famosa Semana Brasileira de Corais. Ela pensou em preparar uma nova música, definida da seguinte maneira: • cada um dos integrantes do coral inicia cantando uma nota, e somente muda de nota quando determinado pela Maestrina; • ao final de cada compasso, a Maestrina determina que exatamente dois integrantes alterem a nota que cantam: um integrante passa a cantar a nota imediatamente acima da nota que cantava, e o outro integrante passa a cantar a nota imediatamente abaixo da nota que cantava; • a música termina ao final do primeiro compasso em que todos os integrantes do coral cantam a mesma nota. A Maestrina já tem várias ideias de como distribuir as notas no início da música entre os integrantes do coral, de forma a criar o efeito desejado. No entanto, ela está preocupada em saber se, dada uma distribuição de notas entre os integrantes, é possível chegar ao final da música da forma desejada (todos cantando a mesma nota) e, caso seja possível, qual o número mínimo de compassos da música. Você pode ajudá-la?",
        "titulo": "Coral Perfeito",
        "entrada": "A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 104) indicando o número de integrantes do coral. As notas serão indicadas por números inteiros. A segunda linha contém N números inteiros, indicando as notas iniciais (−105 ≤ notai ≤105), onde 0 ≤ i ≤ N−1, que cada integrante deve cantar. As notas são dadas em ordem não decrescente de altura (notai ≤notai+1)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2191",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter um par de inteiros I e J que indicam respectivamente a primeira e última partidas do melhor período, conforme determinado pelo seu programa, exceto quando o saldo de gols do melhor período for menor ou igual a zero; neste caso a segunda linha deve conter a expressão “nenhum”. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "descricao": "Hipólito é um torcedor fanático. Coleciona flâmulas, bandeiras, recortes de jornal, figurinhas de jogadores, camisetas e tudo o mais que se refira a seu time preferido. Quando ganhou um computador de presente em uma festa, resolveu montar um banco de dados com os resultados de todos os jogos de seu time ocorridos desde a sua fundação, em 1911. Depois de inseridos os dados, Hipólito começou a ficar curioso sobre estatísticas de desempenho do time. Por exemplo, ele deseja saber qual foi o período em que o seu time acumulou o maior saldo de gols. Como Hipólito tem o computador há muito pouco tempo, não sabe programar muito bem, e precisa de sua ajuda. É dada uma lista, numerada seqüencialmente a partir de 1, com os resultados de todos os jogos do time (primeira partida: 3 x 0, segunda partida: 1 x 2, terceira partida: 0 x 5 ...). Sua tarefa é escrever um programa que determine em qual período o time conseguiu acumular o maior saldo de gols. Um período é definido pelos números de seqüência de duas partidas, A e B (A ≤ B ≤ N). O saldo de gols acumulado entre A e B é dado pela soma dos gols marcados pelo time em todas as partidas realizadas entre A e B (incluindo as mesmas) menos a soma dos gols marcados pelos times adversários no período. Se houver mais de um período com o mesmo saldo de gols, escolha o maior período (ou seja, o período em que B - A é maior). Se ainda assim houver mais de uma solução possível, escolha qualquer uma delas como resposta.",
        "titulo": "Saldo de Gols",
        "entrada": "Seu programa deve ler vários conjuntos de teste. A primeira linha de um conjunto de teste contém um inteiro não negativo, N (0 ≤ N ≤ 10000), que indica o número de partidas realizadas pelo time (o valor N = 0 indica o final da entrada). Seguem-se N linhas, cada uma contendo um par de números inteiros não negativos X e Y (0 ≤ X,Y ≤ 50) que representam o resultado da partida: X são os gols a favor e Y os gols contra o time de Hipólito. As partidas são numeradas sequencialmente a partir de 1, na ordem em que aparecem na entrada."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1824",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir sim se o sapo passou por todas as mn posições do lago e nao em caso contrário. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "A mosca do sono é uma das pragas mais sérias na China, que causa prejuízos enormes ao governo do país. Populações inteiras de pequenas cidades são picadas pela mosca e acabam caindo no sono durante o trabalho (muitos suspeitam que nem são as moscas as causadoras do problema, mas isso é outra história...). Preocupados com esta situação os pesquisadores de Engenharia Genética da Universidade de Zhao-Zhao estudaram o genoma de um sapo comedor de insetos da região e descobriram que o padrão de saltos do sapo poderia ser facilmente controlado se uma alteração fosse feita em seu cromossomo 12. Infelizmente nem todos os experimentos resultaram em sucesso e, além de alguns sapos sem pernas e com 12 olhos, os experimentos deram origem a várias espécies de sapos com características diferentes de saltos. O objetivo deste problema é que vocês desenvolvam um programa que, a partir da observação do padrão de saltos de um sapo, verifique se ele é do tipo desejado. Um sapo é do tipo desejado se colocado no canto superior esquerdo de um lago retangular ele cobrir toda a extensão do lago com um número mínimo de saltos. Para anotar o padrão de saltos de um sapo foram feitos vários experimentos. Em cada experimento o sapo foi colocado em uma posição do lago e se anotou para que posição vizinha ele saltou. As posições vizinhas são ordenadas de 1 a 8 no sentido dos ponteiros do relógio, começando na posição imediatamente acima da posição do sapo, como na figura abaixo. 8 1 2 7 sapo 3 6 5 4 Sua tarefa é dada uma instância de um lago, marcado em cada uma de suas posições com o padrão de saltos do sapo, verificar se este, quando colocado no canto superior esquerdo do lago, percorre todas as suas posições.",
        "titulo": "Sapos de Tsé-Tsé",
        "entrada": "São dadas várias instâncias. Cada instância começa com dois inteiros m (0 ≤ m ≤ 1000) e n (0 ≤ n ≤ 1000) que definem a dimensão do lago. Em seguida vêm m linhas com n números inteiros, descrevendo o comportamento do sapo quando colocado naquela posição do lago. Valores m = n = 0 indicam o final das instâncias e não devem ser processados."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1318",
        "saida": "Para cada caso de teste seu programa deverá imprimir uma linha, contendo o número de bilhetes do pacote que contém outro bilhete com o mesmo número da sequência.",
        "descricao": "Sua escola organizou uma grande festa para celebrar a brilhante vitória do seu time no prestigiado, e mundialmente famoso CCIP (Competição Colegial Internacional de Poesia). Todos na sua escola foram convidados para a noite, que incluía coquetel, jantar e uma sessão onde a poesia de seu time era lida para a audiência. O evento foi um sucesso – mais pessoas mostraram interesse em sua poesia do que você esperava – porém alguns de seus críticos disseram que tamanho público esteve presente graças à comida, e não graças a sua poesia. Independente do motivo, no dia seguinte você descobriu o motivo pelo qual o salão esteve tão cheio: o diretor da escola lhe confidenciou que diversos dos bilhetes usados pelos visitantes eram falsos. O número real de bilhetes foram numerados sequencialmente de 1 a N (N ≤ 10000). O diretor suspeita que algumas pessoas usaram o scanner e a impressora da Sala da Computação para produzir cópias dos bilhetes verdadeiros. O diretor lhe deu um pacote contendo todos os bilhetes coletados dos visitantes na entrada da festa, e lhe pediu para que determinasse quantos bilhetes no pacote continham “clones”, isto é, outro bilhete com o mesmo número da sequência.",
        "titulo": "Bilhetes Falsos",
        "entrada": "A entrada contém dados de diversos casos de teste. Cada caso de teste contém duas linhas. A primeira linha contém dois inteiros N e M, que indicam, respectivamente, o número de bilhetes originais e o número de pessoas presentes na festa (1 ≤ N ≤ 10000 e 1 ≤ M ≤  20000). A segunda linha do caso de testes contém M inteiros Ti representando os números dos bilhetes contidos no pacote que o diretor lhe deu (1 ≤ Ti ≤ N). O final da entrada é indicado por N = M = 0."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1987",
        "saida": "Seu programa deve fornecer o número da soma dos algarismos de m e logo depois apresentar “sim” caso o número seja divisível por 3 ou “nao” caso não seja. Não esqueça o fim de linha após o produto, caso contrário seu programa apresentará a mensagem: “Presentation Error”.",
        "descricao": "No mundo da matemática, para sabermos se um grande número é divisível por outro existe uma regra, chamada de regra de divisibilidade. Um número natural é divisível por 3 quando a soma de todos os seus algarismos forma um número divisível por 3, ou seja, um múltiplo de 3. Ex1: 1.104 é divisível por 3? Resposta: SIM. É divisível por 3, pois seus algarismos quando somados: 1 + 1 + 0 + 4 = 6, que é um número divisível por 3 (porque 6 ÷ 3 = 2, que é um número natural). Ex2: 2.791.035 é divisível por 3? Resposta: SIM. 2.791.035 é constituído de algarismos que somados: 2 + 7 + 9 + 1 + 0 + 3 + 5 = 27, gera um número divisível por 3 (pois 27 ÷ 3 = 9, número natural).",
        "titulo": "Divisibilidade Por 3",
        "entrada": "O arquivo de entrada conterá dois números, n (1< n <10) indicando o número de algarismos de m, (1< m < 1000000000). A entrada termina com o fim do arquivo (EOF)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2037",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo uma string, representando a lista única de rivais da concorrente número 1 (Florência) que seja compatível com as listas dos rivais dos outros concorrentes. Os rivais indicados nessa lista devem aparecer em ordem cronológica.",
        "descricao": "O Comitê Internacional de Xadrez Profissional organiza um torneio para jogadores avançados, com uma metodologia muito estranha. Como esperado, em cada jogo exatamente dois jogadores se enfrentam mutuamente, mas neste caso apenas um jogo ocorre de cada vez, porque existe apenas um tabuleiro de xadrez disponível. Depois de receber as inscrições dos competidores e atribuindo-lhes um número, a organização decide arbitrariamente quais jogos irão acontecer e em qual ordem. Cada concorrente pode enfrentar qualquer outro concorrente qualquer número de vezes, e é até possível que alguns concorrentes nunca joguem uns contra os outros. Assim que decidido todos os jogos a serem jogados, a organização distribui a cada competidor uma lista não-vazia de seus rivais, em ordem cronológica (ou seja, a ordem em que os jogos serão realizados). Florência inscreveu em primeiro lugar, de modo que a ela foi atribuído o número 1. Depois de conversar um pouco com os outros concorrentes, ela percebeu que havia perdido sua lista de rivais. Ela não quer incomodar os organizadores do torneio, então ela pediu a todos os outros concorrentes para obter uma cópia de suas próprias listas de rivais, na esperança de que, com esta informação, ela seria capaz de reconstruir sua lista perdida. Florência não tem certeza se existe apenas um tipo de lista de rivais que é compatível com todas as listas copiadas que foram dadas a ela pelos outros concorrentes. No entanto, ela sabe que a lista que ela foi dada pelos organizadores do torneio é de fato única. Sua tarefa é ajudá-la a reconstruir esta lista.",
        "titulo": "A Lista",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém um único número inteiro N, que representa o número de competidores (2 ≤ N ≤ 9). Cada concorrente é identificado por um número inteiro diferente de 1 a N, e concorrente número 1 é sempre Florência. A segunda linha contém N-1 strings não vazias Li de no máximo de 100 caracteres cada (para i = 2, 3, ..., N). A string Li é composta unicamente de dígitos entre 1 e N, excluindo o dígito i, e representa a lista de rivais do concorrente número i em ordem cronológica. Note que o número do competidor 1 aparece pelo menos uma vez em uma das listas dadas. Em cada caso de teste, existe uma lista única de rivais para a concorrente número 1, que é compatível com as outras listas de rivais. O final da entrada é indicada por uma linha que contém o número -1."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1712",
        "saida": "Seu programa deve imprimir uma linha contendo um número inteiro, o número máximo de árvores que podem ser preservadas, com as restrições dadas.",
        "descricao": "O reino da Poliminogônia passou recentemente uma lei ecológica que obriga todas as fazendas a preservar o máximo de árvores possível em uma porcentagem fixa da área da fazenda. Além disso, para que os animais silvestres possam se movimentar livremente, a área preservada deve ser conexa. As fazendas na Poliminogônia são sempre um reticulado de N × N quadrados de um hectare cada. A figura ao lado ilustra uma fazenda com N = 5. A área preservada deve cobrir exatamente M quadrados. No exemplo da figura, M = 6. Ela deve ser conexa ortogonalmente; quer dizer, tem que ser possível se movimentar entre quaisquer dois quadrados preservados apenas com movimentos ortogonais entre quadrados preservados. A área não preservada, entretanto, pode ser desconexa. Os fazendeiros sabem o número de árvores que há dentro de cada quadrado e você deve escrever um programa que calcule o número máximo possível de árvores que podem ser preservadas com uma area de M quadrados. No exemplo, é possível preservar 377 árvores!",
        "titulo": "Ecologia",
        "entrada": "A primeira linha da entrada contém dois inteiros N e M (2 ≤ N ≤ 50, 1 ≤ M ≤ 10). As N linhas seguintes contêm, cada uma, N inteiros de valor entre 1 e 1000, representando o número de árvores dentro de cada quadrado da fazenda."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1731",
        "saida": "Para cada caso de teste, imprima o menor nome da fruta resultante em uma linha. Se mais de nome for possível, qualquer um será aceito.",
        "descricao": "A companhia \"Frutas do século 21\" tem se especializado em criar novos tipos de frutas através de transferência de genes a partir de um fruto no genoma da outra. Muita das vezes este método não funciona, mas as vezes, em casos muito raro, uma nova fruta é gerada e tem o gosto da mistura das duas. Um grande tópico de discussão dentro da empresa é \"Como deveria chamar as novas criações?\" Uma mistura entre uma apple e uma pear poderia ser chamada apple-pear, é claro, mas isso não pareçe muito interessante. O patrão finalmente decide usar a menor palavra que contém a combinação ambos os nomes das frutas originais como sub-palavras para o novo nome. Por exemplo, \"applear\" contém \"apple e \"pear\" (APPLEar e apPlEAR), e não tem uma palavra menor que tem a mesma propriedade. A combinação de um cranberry e um bosenberry poderia ser chamado então um \"boysecranberry\" ou um \"craboysenberry\", por exemplo. Seu trabalho é escrever um programa que crie um nome tão curto quanto a combinação das duas frutas fornecidas. Seu algoritmo deve ser eficiente, do contrário é pouco provavel que executará no time alocado para frutas com nomes longos.",
        "titulo": "Frutas Avançadas",
        "entrada": "Cada linha do arquivo de entrada contém duas palavras que representa os nomes das frutas que deve ser combinado. Todos os nomes tem um tamanho máximo de 100 e consiste somente em caracteres do alfabeto. A entrada é terminada por fim de arquivo."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1290",
        "saida": "Para cada caso de teste da entrada o seu programa deve produzir uma linha de saída, contendo: somente a palavra 'impossible', caso não seja possível atender ao pedido do cliente (porque não existem pelo menos N caixas do mesmo tamanho no estoque que podem conter o item); ou um inteiro V, que especifica o volume do espaço que sobra quando um dos N itens é colocado em uma das caixas escolhidas.",
        "descricao": "Special Box Company (SBC) é uma empresa familiar que produz caixas de papelão decoradas para embalar presentes. As caixas são feitas à mão, produzidas individualmente a partir de materiais nobres. Ao aceitar uma encomenda de um cliente, eles sempre produzem algumas caixas a mais do que o necessário, para manter um estoque de caixas para ser vendido no futuro. Ao longo dos anos seu estoque tem crescido, com caixas em todo o lugar, e eles decidiram que precisavam se organizar um pouco mais. Eles têm, portanto, feito uma lista registrando as dimensões de cada caixa em seu estoque. SBC acaba de receber um pedido de um cliente que deve ser entregue amanhã, por isso não há tempo para produzir novas caixas. O cliente quer uma certo número N de caixas, todas do mesmo tamanho; cada caixa irá ser usada para embalar um item de dimensões X, Y e Z. Como o papelão utilizado nas caixas é muito fino, você pode assumir que em uma caixa de tamanho (X, Y, Z) se encaixaria perfeitamente o item que o cliente quer embrulhar. Se não houver pelo menos N caixas que encaixam perfeitamente o item, o cliente quer caixas de N que se encaixam os itens tão firmemente quanto possível. O tamanho da caixa que se encaixa os itens tão firmemente quanto possível é a que minimiza o espaço vazio quando o item é colocado dentro da caixa. Um item pode ser rotacionado em qualquer direção para ser acomodado dentro de uma caixa, por isso, uma caixa de tamanho (X, Y, Z) é tão boa como uma caixa de tamanho (Y, Z, X). Você pode ajudar a SBC a descobrir se eles podem atender a ordem do cliente?",
        "titulo": "Caixas Muito Especiais",
        "entrada": "A entrada consiste em vários casos de teste. A primeira linha de cada caso de teste contem dois inteiros N e M, indicando respectivamente o número de caixas que o cliente deseja comprar (1 ≤ N ≤ 1500) e o número de caixas na lista de estoque (1 ≤ M ≤ 1500). A segunda linha contém três inteiros X, Y e Z, representando as dimensões do item que o cliente deseja embrulhar (0 < X, Y, Z ≤ 50). Cada uma das M linhas seguintes contém três inteiros A, B e C representando as dimesões de uma das caixas da lista de estoque (0 < A, B, C ≤ 50). O caso de teste com N = 0 indica o fim da entrada."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1964",
        "saida": "Imprima uma linha contendo unicamente o nome da moça que Khan convidou para sair.",
        "descricao": "Khan é um rapaz muito inteligente que estuda Ciência da Computação na Universidade Federal da Fronteira Sul (UFFS). Porém, ontem à tarde ele e sua namorada discutiram feio e acabaram terminando, o que o deixou muito irado. Como ele tinha aula à noite, resolveu ir a pé para a universidade, a fim de espairecer um pouco. Ao chegar no campus, parou em frente ao obelisco da UFFS e instantaneamente decidiu que não usaria sua ira para o ódio, mas para o amor: ficaria ali parado até que uma moça passasse por ele, com a qual, convidando-a para sair, tentaria reconstruir sua vida. Se mais de uma moça passasse por ele ao mesmo tempo, Khan escolheria a mais bonita. O campus da UFFS em Chapecó é circundado por uma estrada, à qual se chega através de um único acesso pela cidade de Guatambu, já que o acesso antigo foi desativado. Conforme ilustrado na figura acima, é bem na interseção entre o acesso e a estrada circundante que se encontra o obelisco da UFFS, representado na figura pelo símbolo *. Ana e Bia são duas amigas que também estudam à noite na UFFS. Ambas são muito saudáveis, apesar de Ana ser mais bonita que Bia, e gostam de se exercitar correndo na estrada circundante antes da aula, sempre no sentido horário. Elas sempre começam a correr juntas em algum ponto da estrada circundante, mas, como correm a velocidades constantes não necessariamente iguais, podem se separar e se encontrar diversas vezes durante a atividade. Ontem elas começaram a correr não depois de Khan chegar ao obelisco, e não havia outras moças no campus.",
        "titulo": "A Ira de Khan",
        "entrada": "A única linha da entrada consiste de cinco inteiros, C, VA, VB, T e D: C (0 < C ≤ 1000) representa o comprimento da estrada que circunda o campus, em metros; VA e VB (0 < VA, VB ≤ 400) representam as velocidades constantes, em centímetros por segundo, a que correm respectivamente Ana e Bia; T (0 ≤ T ≤ 200) representa o tempo, em minutos, entre o início da corrida das moças e a chegada de Khan ao obelisco; D (0 ≤ D < C) representa a distância, em metros, no sentido horário do ponto onde Ana e Bia começaram a correr até o obelisco."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1245",
        "saida": "Para cada caso de teste imprima uma linha contendo um único número inteiro indicando o número total de pares corretos que podem ser formados.",
        "descricao": "A divisão de Suprimentos de Botas e Calçados do Exército comprou um grande número de pares de botas de vários tamanhos para seus soldados. No entanto, por uma falha de empacotamento da fábrica contratada, nem todas as caixas entregues continham um par de botas correto, com duas botas do mesmo tamanho, uma para cada pé. O sargento mandou que os recrutas retirassem todas as botas de todas as caixas para reembalá-las, desta vez corretamente. Quando o sargento descobriu que você sabia programar, ele solicitou com a gentileza habitual que você escrevesse um programa que, dada a lista contendo a descrição de cada bota entregue, determina quantos pares corretos de botas poderão ser formados no total.",
        "titulo": "Botas Perdidas",
        "entrada": "A entrada é composta por diversos casos de teste e termina com final de arquivo (EOF). A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 10 4), N é par, indicando o número de botas individuais entregues. Cada uma das N linhas seguintes descreve uma bota, contendo um número inteiro M (30 ≤ M ≤ 60) e uma letra L, separados por uma espaço em branco. M indica o número da bota e L indica o pé da bota: L = 'D' indica que a bota é para o pé direito, L = 'E' indica que a bota é para o pé esquerdo."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1966",
        "saida": "Imprima uma linha contendo unicamente o número de cubos de queijo que haverá na base da pirâmide de João.",
        "descricao": "Este problema é dedicado a todos nós que estudamos ou trabalhamos longe da cidade onde moram nossas famílias! João adora queijo. Muçarela, parmesão, provolone, não importa, ama-os todos. João gosta tanto de queijo que põe queijo em tudo o que cozinha, até mesmo em sobremesas. A família de João é tão louca por queijo quanto ele. Como neste fim de semana ele está indo visitar seus familiares, que moram longe, decidiu levar um pouco do famoso queijo chapecoense para eles. João pretende organizar uma festa assim que chegue à sua cidade natal. A ideia é cortar todo o queijo que levar em cubos de 1 cm de lado e montar uma pirâmide com eles como a pirâmide da figura, que possui 5 cubos de queijo na base. Talvez não seja possível utilizar todos os cubos de queijo na construção da pirâmide. Neste caso, João come todo o queijo que sobrar. Na loja de queijos de Chapecó, há queijos de vários tamanhos e preços, todos em forma de paralelepípedo. Não é necessário comprar uma peça inteira de queijo. Pode-se solicitar um volume específico, por exemplo: — Sr. Cleijon, poderia por favor cortar para mim um pedaço de 20 cm × 10 cm × 30 cm de queijo parmesão? João estava com um orçamento restrito para comprar os queijos para levar para sua família, mas mesmo assim comprou o maior volume de queijo possível respeitando o orçamento que destinou para isso.",
        "titulo": "A Volta para Casa",
        "entrada": "A primeira linha da entrada consiste de dois inteiros, N e B (1 ≤ N ≤ 105, 0 ≤ B ≤ 109), os quais representam respectivamente o número de peças de queijo na loja e o orçamento de João. A segunda linha da entrada consiste de N inteiros vi (1 ≤ vi ≤ 104, 1 ≤ i ≤ N), cada um representando o volume, em centímetros cúbicos, da i-ésima peça de queijo. A última linha da entrada consiste de N inteiros pi (0 ≤ pi ≤ 104, 1 ≤ i ≤ N), cada um representando o preço da i-ésima peça de queijo."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1366",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma única linha na saída, contendo um número inteiro, indicando o número máximo de retângulos que podem ser formados com o conjunto de varetas dado.",
        "descricao": "Há muitos jogos divertidos que usam pequenas varetas coloridas. A variante usada neste problema envolve a construção de retângulos. O jogo consiste em, dado um conjunto de varetas de comprimentos variados, desenhar retângulos no chão, utilizando as varetas como lados dos retângulos, sendo que cada vareta pode ser utilizada em apenas um retângulo, e cada lado de um retângulo é formado por uma única vareta. Nesse jogo, duas crianças recebem dois conjuntos iguais de varetas. Ganha o jogo a criança que desenhar o maior número de retângulos com o conjunto de varetas. Dado um conjunto de varetas de comprimentos inteiros, você deve escrever um programa para determinar o maior número de retângulos que é possível desenhar.",
        "titulo": "Jogo de Varetas",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N que indica o número de diferentes comprimentos de varetas (1 ≤ N ≤ 1.000) no conjunto. Cada uma das N linhas seguintes contém dois números inteiros Ci e Vi , representando respectivamente um comprimento (1 ≤ Ci ≤ 10.000) e o número de varetas com esse comprimento (1 ≤ Vi ≤ 1.000). Cada comprimento de vareta aparece no máximo uma vez em um conjunto de teste (ou seja, os valores Ci são distintos). O ﬁnal da entrada é indicado por N = 0."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1428",
        "saida": "Para cada caso de teste, imprima uma linha contendo o menor número de sonares necessários.",
        "descricao": "O mostro do lago Ness é um animal não-identificado misterioso que, dizem, habita o Lago Ness, um grande lago localizado na cidade de Inverness, no norte da Escócia. Nessie é geralmente categorizado como um tipo de mostro de lagos. Tradução livre de trecho de https://en.wikipedia.org/wiki/Loch_Ness_Monster. Em julho de 2003, a rede BBC fez uma grande investigação sobre o Lago Ness, usando 600 sonares separados. Nenhum vestígio de nenhum \"mostro marítimo\" (isto é, um grande animal, conhecido ou desconhecido) foi encontrado no lago. A equipe da BCC concluiu que Nessie não existe. Agora, nós queremos repetir este experimento. Dada uma grade de n linhas e m colunas representando o lago, 6 ≤ n, m ≤ 10000, encontre o menor número de sonares que você precisa colocar no lago de tal forma que podemos controlar todas as posições da grade, com as seguintes condições: Um sonar ocupa uma posição da grade; O sonar controla sua própria posição, além das suas posições adjacentes; As posições nas bordas da grade não precisam ser controladas, pois Nessie não conseguiria se esconder nelas (ela é grande demais para isso). Considere as seguintes figuras: Nas figuras, X representa um sonar, e as posições escuras representam as posições controladas por sonares. A última figura exemplifica uma solução para o problema.",
        "titulo": "Procurando Nessy",
        "entrada": "A primeira linha da entrada contém um inteiro t, indicando o número de casos de teste. Cada caso de teste é descrito por uma linha contendo dois inteiros separados por um espaço, n e m (6 ≤ n, m ≤ 10000), indicando o tamanho da grade (n linhas e m colunas)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1329",
        "saida": "Para cada caso de teste na entrada, seu programa deverá escrever uma linha contendo a sentença \"Mary won X times and John won Y times\" (\"Maria venceu X vezes e Joao venceu Y vezes\"), onde 0 ≤ X e 0 ≤ Y.",
        "descricao": "João e Maria são amigos desde que se conheceram na creche. Desde então, eles compartilham uma rotina de brincadeiras: todas as vezes que eles se encontram, eles jogam Cara ou Coroa com uma moeda, e quem ganhar tem o privilégio de decidir quais brincadeiras eles irão jogar durante o dia. Maria sempre escolhe cara, e João sempre escolhe coroa. Hoje em dia eles estão na faculdade, mas continuam sendo bons amigos. Sempre que se encontram, eles ainda jogam Cara ou Coroa, e o vencedor decide que filme assistir, ou em que restaurante jantar, e assim por diante. Ontem Maria contou a João que ela guarda um registro de todas as vezes que eles jogaram, desde os tempos da creche. João ficou espantado. Porém João está estudando Ciência da Computação e decidiu que essa era uma boa oportunidade para mostrar a Maria suas habilidades em programação, escrevendo um programa que mostrasse o número de vezes que cada um deles venceu ao longo de todos esses anos.",
        "titulo": "Cara ou Coroa",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um único inteiro N indicando o número de vezes jogadas (1 ≤ N ≤ 10000). A linha seguinte contém N inteiros Ri, separados por um espaço, descrevendo a lista de resultados. Se Ri = 0 então Maria venceu o iésimo jogo, se Ri = 1 então João venceu o iésimo jogo (1 ≤ i ≤ N). O fim da entrada é indicado por N = 0."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1816",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequêncial e crescente a partir de 1. Na linha seguinte, você deve imprimir o texto decodificado. Uma linha em branco deve ser impressa após cada instância.",
        "descricao": "Vestígios de uma antiga civilização viking foram descobertos nos arredores de Praga, e uma grande quantidade de material impresso foi achada junto ao sítio arqueológico. Como esperado, a leitura deste material mostrou-se uma tarefa árdua e desafiadora, já que essa civilização utilizava um esquema de codifucação de texto para evitar que seu conhecimento fosse assimilado por seus rivais. Recentemente, pesquisadores tchecos anunciaram com grande euforia à imprensa a compreensão do mecanismo de codificação utilizado por esses vikings. De acordo com os pesquisadores, o alfabeto viking era composto pelas letras de A até Z (incluindo as letras K, W e Y). A codificação era realizada da forma que segue. Inicialmente, era construída uma lista em que a letra A aparecia na primeira posição, a letra B aparecia na segunda, e assim sucessicamente,com as letras sequindo a mesma ordem que em nosso alfabeto. Em sequida, o texto a ser codificado era barrido da esquerda para a direita e, para cada letra l encontrada, o número de sua posição na lista era impresso e l era movida para o início da lista. Por exemplo, a codificação viking para a mensagem: A B B B A A B B B B A C C A B B A A A B C era dada pela seguinte sequência de inteiros: 1 2 1 1 2 1 2 1 1 1 2 3 1 2 3 1 2 1 1 2 3 Os pesquisadores tchecos pediram sua ajuda para construir um programa que recebe uma sequência de inteiros que representa uma mensagem codificada e decodifica-a.",
        "titulo": "Vikings em Praga?",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversas instâncias. Cada instância tem a estrutura que segue. Na primeira linha é fornecido um inteiro m (0 ≤ m ≤ 10000) que representa o número de inteiros que compõem o texto codificado. Na próxima linha são dados, separados por espaços em branco, os m valores inteiros (cada valor é maior ou igual a 1 e menor ou igual a 26). Um valor m = 0 indica o final das instâncias e não ser processado."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1496",
        "saida": "Para cada caso de teste, imprima uma linha com os índices que todos os \"Ultas\" no intervalo da montanha, na ordem com que eles aparecem no perfil.",
        "descricao": "A proeminência topográfica de um pico é uma medida de especial interesse para os alpinistas e pode ser definido como se segue: a proeminência de um pico p com a altitude h, em relação ao nível do mar, é o maior valor d tal que qualquer caminho no terreno a partir de p para qualquer pico estritamente superior vai passar através de um ponto de altitude h - d. Se não houver um pico estritamente superior, então a proeminência é h. Aqueles picos com proeminência topográfica maior ou igual a 150000 centímetros (precisão é de grande importância para os alpinistas!) têm um nome especial: eles são chamados de \"Ultras\". Você deve escrever um programa que identifica todos os \"Ultras\" que ocorrem em um perfil bidimensional de uma cadeia de montanhas representada como uma sequência de pontos. Note que a distância horizontal entre os pontos não é importante, tudo o que você precisa é a altitude de cada ponto. Na figura abaixo, os \"Ultras\" são os pontos 7, 12, 14, 20 e 23.",
        "titulo": "Suba os \"Ultras\"",
        "entrada": "A entrada é composta por diversos casos de teste e termina em EOF. A primeira linha de cada caso contém um inteiro  N (3 ≤ N ≤ 105) que representa o número de pontos em um perfil. A segunda linha contém N inteiros Hi que indicam a altitude (em centimetros) dos pontos, na ordem em que eles aparecem no perfil (0 ≤ Hi ≤ 106 para i = 1, 2, . . . , N). Pontos consecutivos tem altitudes diferentes (Hi != Hi+1 for i = 1, 2, . . . , N − 1), já o primeiro e o último pontos estão no nível no mar (H1 = HN = 0). Você pode assumir que o perfil contém pelo menos um \"Ultra\"."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1997",
        "saida": "Para cada caso de teste de saída, imprima uma única linha com um inteiro representando a quantidade mínima de jogadas necessárias para passar as fichas da posição inicial S para o objetivo T.",
        "descricao": "O famoso jogo Preto e Branco é um jogo individual que é jogado com um conjunto de fichas idênticas. Cada ficha tem duas faces com cores diferentes. Surpreendentemente, essas cores são preto e branco. O jogo começa colocando N fichas formando uma única linha. Existe um objetivo que é uma dada sequência de N cores preto ou branco. Em um único movimento, o jogador pode escolher um grupo de fichas consecutivas e inverter a sua cor, em outras palavras, para cada ficha no grupo, a cor que estava voltada para cima, esta voltada para baixo, e a que estava voltada para baixo está virada para cima. O jogo termina quando as cores voltadas para cima são iguais ao objetivo. Barby acaba de descobrir este jogo e logo ela percebeu que você pode sempre ganhar invertendo cada ficha individualmente, se necessário. Para tornar o jogo mais desafiador para ela, ela queria ganhar no menor número possível de movimentos. Note que Barby apenas se preocupa com quantos movimentos ela faz, e não importa quantas fichas são invertidas em cada jogada. Para saber o quão bem Barby está jogando, ela lhe pediu para fazer um programa que, dada a posição inicial da ficha e o objetivo, mostra o menor número possível de movimentos para ganhar o jogo. Você vai dizer que não?",
        "titulo": "Branco e Preto",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é descrito em uma única linha que contém duas palavras não vazias S e T de igual tamanho e, no máximo, 500 caracteres cada. S indica a posição inicial da ficha, enquanto T representa o objetivo. Ambas as palavras contêm apenas letras maiúsculas \"B\" e \"N\", que representam, respectivamente, branco e preto. A última linha da entrada contém dois asteriscos (\"*\") separados por um espaço único e não deve ser processado como um caso de teste."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1718",
        "saida": "Seu programa deve produzir apenas uma linha, com apenas uma letra, que deve ser S se é possível dividir a pizza como descrito acima, ou N caso contrário.",
        "descricao": "Vovô Pepe é famoso por suas pizzas. Elas são deliciosas, e têm o formato de um círculo perfeito. Vovô preparou uma pizza especial para o jantar de hoje à noite, e colocou um certo número de azeitonas distribuídas aleatoriamente, mas colocadas exatamente na borda da pizza. Sua tarefa é determinar, conhecendo a circunferência da pizza, a quantidade de azeitonas e a posição de cada azeitona, se é possível dividir a pizza em setores circulares de mesmo tamanho, de tal forma que cada pedaço de pizza contenha exatamente uma azeitona. A figura abaixo mostra (a) uma pizza de circunferência 12 com 3 azeitonas e uma possível divisão em pedaços iguais; e (b) uma pizza de circunferência 12 com 4 azeitonas que não pode ser dividida em pedaços iguais como descrito acima. Apesar de deliciosas, as azeitonas são muito pequenas, e suas dimensões podem ser desconsideradas no cálculo da divisão.",
        "titulo": "Pizza do Vô Pepe",
        "entrada": "A primeira linha contém dois inteiros C (3 ≤ C ≤ 105 ) e N (3 ≤ N ≤ 104 , N ≤ C) representando respectivamente a circunferência da pizza e o número de azeitonas. O inteiro C é múltiplo de N. A segunda linha contém N inteiros distintos Xi (0 ≤ X1 < X2 < . . . < XN < C), em ordem crescente, descrevendo as posições das azeitonas, dadas pelo comprimento do arco circular no sentido horário, a partir de um ponto fixo da circunferência."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1942",
        "saida": "Imprima ‘S’ caso seja possível ou ‘N’ caso contrário.",
        "descricao": "A loteria BWS é feita anualmente. Nela N pessoas apostam escolhendo K números cada uma. De modo formal, podemos dizer que Bij é o j-ésimo valor apostado pela i-ésima pessoa. Então os organizadores escolhem K inteiros positivos. Os números escolhidos são chamados de W1, W2, ..., WK. Os vencedores são calculados da seguinte maneira: Um subconjunto não vazio dos N participantes é escolhido aleatoriamente, ou seja, alguns participantes são escolhidos por pura sorte. Para cada pessoa neste subconjunto é calculado o valor S1, que é a soma de todos os primeiros números apostados por elas, ou seja, a soma de Bi1, onde i seria o índice de cada pessoa escolhida. Da mesma maneira os valores S2, ..., SK são calculados. E feito um teste de paridade entre Wj e Sj , ou seja, é testado se as paridades (se o número é par ou ímpar) casam entre W1 e S1, W2 e S2, e assim por diante até WK e SK. Se todas as paridades casam, então este conjunto de pessoas é considerado vencedor! Os organizadores querem saber: é possível escolher os números W1, W2, ..., WK de forma que não exista nenhum subconjunto de participantes vencedor?",
        "titulo": "Loteria",
        "entrada": "A primeira linha contém os números N (1 ≤ N ≤ 104 ) e K (3 ≤ K ≤ 50), representando o número de participantes e a quantidade de números apostados por cada pessoa respectivamente. As pessoas apostam em inteiros maiores do que 1 e menores do que 50, inclusive. Cada uma das N linhas seguintes contém K números, representando as apostas de cada pessoa, uma pessoa por linha."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1814",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir o número mínimo de transformações que devem ser gravadas para esta instância. Uma linha em branco deve ser impressa após cada instância",
        "descricao": "A Universidade Charles, situada em Praga, a exemplo de diversas outras universidades de renome ao redor do mundo, instituiu recentemente um programa interdepartamental de pós-graduação na área de biologia computacional. Integrante do corpo docente, Ms. Dolejškova está atualmente interessada no problema das árvores filogenéticas, e trabalhando, portanto, com n cadeias de DNA. Para simplificar o trabalho, Ms. Dolejškova resolveu trabalhar apenas com cadeias gênicas de comprimento m (isto é, todas as cadeias possuem exatamente m bases nitrogenadas). Um subproblema interessante envolve o armazenamento das n cadeias em disco. Até o momento, Ms. Dolejškova está utilizando um esquema ingênuo que requer n × m caracteres, além dos delimitadores. Isto é, todas as sequências são gravadas dentro de um arquivo texto, sequencialmente. Mr. Chuchle, um colega de departamento e especialista em técnicas de armazenamento, sugeriu uma alternativa que pode ser mais econômica. Segundo Mr. Chuchle, é possível armazenar uma cadeia juntamente com informações que permitam transformá-la em outras. Mais especificamente, considere duas cadeias de DNA D1 = ACTA e D2 = AGTC, onde A, C, G, T representam as bases nitrogenadas adenina, citosina, guanina e timina, nesta ordem. Observe que é possível transformar D1 em D2 trocando-se as bases nitrogenadas C e A das posições 2 e 4 de D1 para G e C, respectivamente. Considere agora uma terceira cadeia D3 = CGTC. E necessária apenas uma modificação para transformar D2 em D3 e são necessárias três modificações para transformar D1 em D3. Logo, é vantajoso permitir a transitividade das modificações entre as cadeias. Ms. Dolejškova observou rapidamente que, se as cadeias envolvidas forem muito diferentes entre si, este esquema de armazenamento alternativo não oferece ganhos. Assim, em vez de adotá-lo prontamente, ela solicitou a você que construa um programa que recebe as n cadeias, e determina o número mínimo de transformações que devem ser gravadas (além de uma cadeia) para que seja possível, no futuro, obter-se novamente as n cadeias originais. Baseado no resultado fornecido por seu programa, Ms. Dolejškova vai decidir qual dos esquemas deve utilizar em cada instância de dados que tiver.",
        "titulo": "DNA Storage?",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversas instâncias. Cada instância tem a estrutura que segue. Na primeira linha são fornecidos dois inteiros n e m (0 ≤ n ≤ 100 e 1 ≤ m ≤ 1000) que representam, nesta ordem, o número de cadeias de DNA e o comprimento delas. Nas próximas n linhas são fornecidas as n cadeias, uma por linha, sem espaços adicionais. Cada cadeia é uma sequência de caracteres tomada sobre o alfabeto Σ = {A, C, G, T}. Um valor n = 0 indica o final das instâncias e não deve ser processado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1808",
        "saida": "Imprima uma linha com um número racional representando a média das notas do estudante cujas notas o Sr. King entrou como S. O resultado deve ser impresso como um número racional, arredondado se necessário, com exatos dois dígitos depois do ponto decimal.",
        "descricao": "O profílico autor Stephen King estava entrando com as notas dos seus estudantes de literatura numa calculadora geral de médias on-line. Quando terminou, ele percebeu que sua tecla de retorno (ENTER) estava quebrada. Então, ao invés de entrar com as notas de um estudante numa linha separada cada, ele entrou com elas numa única linha sem separação alguma. Uma vez que o Sr. King não possui as habilidades para consertar sua tecla de retorno, ele precisa que você calcule a média das notas dos estudantes a partir da entrada não separada. Cada nota é um inteiro entre 1 e 10. Todas as notas foram digitadas na base 10 sem zeros à esquerda. Por exemplo, se as notas do estudante do Sr. King foram 3, 10, 1 e 10, elas seriam entradas com “310110”.",
        "titulo": "O Retorno do Rei",
        "entrada": "A entrada consiste de uma única linha que contém uma cadeia de caracteres não-vazia S de no máximo 100 dígitos na base 10. Há uma única maneira de particionar S numa lista de subcadeias de caracteres de tal modo que cada subcadeia represente um inteiro entre 1 e 10 na base 10 sem zeros à esquerda."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1657",
        "saida": "Para cada palavra a ser corrigida, imprima uma linha com a palavra a ser corrigida seguida de uma das possibilidades abaixo: is correct, (está correta em inglês) se a palavra está no dicionário. is a misspelling of X, (é um erro de soletração de em inglês) onde X significa a palavra similar do dicionário, uma vez que a palavra a ser corrigida não está no dicionário. Como neste caso poderão existir várias possibilidades, escolha a palavra do dicionário que aparece primeiro no conjunto de entrada. is unknown, (é desconhecida em inglês) se os casos 1 e 2 não se aplicam.",
        "descricao": "Certos editores de texto oferecem um mecanismo de correção para palavras que aparentam estar escritas incorretamente. Neste problema, você deve implementar um simples Corretor Automático de Erros de Soletração (Automatic Correction of Misspellings - ACM). ACM corrige os seguintes erros de soletração: Uma letra faltando (por exemplo, paso ao invés de passo) ou letras escritas a mais (por exemplo, peasso ao invés de passo). Uma letra errada (por exemplo, passu ao invés de passo). Ordem de duas letras adjacentes errada (por exemplo, pasos ao invés de passo). ACM é baseado em um dicionário de palavras. Quando um texto contem uma palavra que não está no dicionário, ACM tentará substitui-la por uma palavra similar do dicionário. Duas palavras são similares se nós podemos transformar uma palavra em outra seguindo exatamente um dos passos listados acima. Uma palavra desconhecida não é alterada se não existem palavras similares no dicionário.",
        "titulo": "Corretor Automático de Erros de Soletração",
        "entrada": "A primeira linha do conjunto de entrada contém um número N representando o número de palavras no dicionário (N ≤ 10000). As próximas N linhas contêm as palavras do dicionário. A linha seguinte contém um número inteiro Q (Q ≤ 1000) representando o número de palavras a serem corrigidas. Você pode assumir que cada palavra do conjunto de entrada consiste de 1 a 25 letras minúsculas (de ‘a’ a ‘z’)."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1820",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Caso não existam quadrados nos grupos, seu programa deve imprimir ok. Em caso contrário, seu programa deve imprimir todos os quadrados encontrados, um por linha, com os números dos alunos separados por um espaço em branco. Para facilitar a leitura do reitor, os números dos alunos em um quadrado deverão estar em ordem crescente e os quadrados deverão estar listados em ordem lexicográfica crescente. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "Na famosa Universidade de Sing Pil os estudantes sempre fazem os trabalhos em grupo. As regras para a formação dos grupos, no entanto, são estritas e o reitor sempre verifica se não há um grupo de estudantes que violou as regras. Bom, para falar a verdade, a única regra existente remonta à criação da universidade. Naquela época os alunos compunham grupos de três alunos para fazer as tarefas. Quatro alunos, chamados Ting, Ling, Xing e Ming eram muito amigos e, para todas as tarefas que precisavam ser feitas, montavam um grupo entre eles. Isso era muito ruim, porque obrigar as tarefas em grupos visava a aumentar a interação entre os alunos. Desde então proibiu-se em Sing Pil a formção de quadrados, isto é, que quatro alunos montem quatro grupos em que apenas eles são os membros. No caso dos alunos {Ting, Xing, Ling, Ming} (usaremos apenas a primeira letra para simplificar), um quadrado seria formado pelos quatro grupos a seguir: {TLX, TXM, MXL, LMT}. Sua tarefa neste problema é escrever um programa para ajudar o reitor da universidade a verificar se existem ou não quadrados nos grupos.",
        "titulo": "Grupos da Universidade de Sing Pil",
        "entrada": "São dadas várias instâncias. Para cada instância é dado o número m (0 ≤ m ≤ 50) de grupos. O valor m = 0 indica o fim dos dados e não deve ser processado. Cada estudante em Sing Pil é identificado com um número inteiro entre 1 e 100, inclusive. Nas próximas m linhas são dados, em cada linha, três números correspondentes a três estudantes que formam um grupo."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1140",
        "saida": "Para cada caso de teste, imprima uma única linha contendo o caractere 'Y' se a sentença é um tautograma, ou um 'N' caso contrário.",
        "descricao": "Fiona sempre amou poesia, e recentemente descobriu uma forma poética fascinante. Tautogramas são um caso especial de aliteração, que é a ocorrência da mesma letra no início de palavras adjacentes. Em particular, uma sentença é um tautograma se todas suas palavras começam com a mesma letra. Por exemplo, as seguintes sentenças são tautogramas: Flowers Flourish from France Sam Simmonds speaks softly Peter pIckEd pePPers truly tautograms triumph Fiona quer deslumbrar seu namorado com uma carta romântica repleta desse tipo de sentenças. Por favor, ajude Fiona a verificar se cada sentença que ela escreveu é um tautograma ou não.",
        "titulo": "Flores Florescem da França",
        "entrada": "Cada caso de teste é dado em uma única linha que contém uma frase. Uma frase consiste de uma sequência de no máximo 50 palavras separadas por espaços simples. Uma palavra é uma sequência de no máximo 20 letras do alfabeto inglês (maiúsculas e minúsculas). Uma palavra contém ao menos uma letra e uma sentença contém ao menos uma palavra. O último caso de teste é seguido de uma linha contendo apenas o caractere '*' (asterisco)."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1678",
        "saida": "Para cada caso de teste, primeiro apresentar o número do caso (começando com 1 e aumentando sequencialmente). Em seguida, imprima o tempo médio de solução para o conjunto de problemas com dois dígitos à direita do ponto decimal. Siga a descrição de um cronograma de solução que alcança esse tempo médio de solução. Visualiza uma linha para cada problema, na ordem em que foi informado na entrada, que identifica o número do problema, o membro utilizado para resolver (numerado de acordo com a ordem de entrada), o tempo que o membro começou a resolver o problema, e o tempo em que o problema foi resolvido. Siga o formato mostrado no exemplo de saída, e imprima uma linha em branco após cada caso de teste.",
        "descricao": "Uma técnica usada em estratégias iniciais de competição de programação envolve particionar a capacidade intelectual disponível de uma equipe por um número de membros, com cada membro tendo uma quantia fixa de inteligência, e diferentes membros potencialmente tendo quantidades diferentes. A soma da capacidade de todos os membros é igual a capacidade intelectual total da equipe. Dado um conjunto de problemas, a tarefa da equipe é atribuir os problemas a diferentes membros da equipe, de modo que os problemas possam ser resolvidos simultaneamente. Esta tarefa é difícil devido ao fato de que o tempo para a solução de um problema pode depender da quantidade de informações disponíveis. Todo problema tem um requisito mínimo de inteligência: se a atribuição for para um membro mais brilhante, o tempo de solução pode aumentar ou diminuir. Nesta tarefa, você tem que determinar atribuições ideais de problemas aos membros da equipe. O programa informa as capacidades intelectuais dos membros da equipe disponíveis para a solução dos problemas, e uma descrição, para cada problema, de como o tempo de solução depende da quantidade de informação disponível. O programa tem que encontrar um cronograma de solução que minimiza o tempo médio de solução para os problemas. Um cronograma de solução é uma atribuição de problemas aos membros da equipe em relação ao tempo, de tal forma que não há dois problemas que usam o mesmo membro ao mesmo tempo, e não há problema que é atribuído a um membro da equipe com menos capacidade do que o seu requisito mínimo. O tempo para a solução do problema é a diferença entre o tempo em que o problema foi submetido para ser resolvido (o início da competição começa no tempo zero para todos os problemas desta tarefa), e o tempo em que o problema foi resolvido.",
        "titulo": "Gerenciamento de Partição Fixa em Competição",
        "entrada": "Os dados de entrada conterão vários casos de teste. Cada caso de teste começa com uma linha contendo um par de números inteiros m e n. O número m especifica o número de membros da equipe (1 ≤ m ≤ 3), e n especifica o número de problemas a serem resolvidos (1 ≤ n ≤ 10). A próxima linha contém m inteiros positivos informando os valores de inteligência dos membros da equipe m. Em seguida, as n linhas descrevem as compensações de tempo de capacidade para cada um dos n problemas. Cada linha começa com um k inteiro positivo (k ≤ 10), seguido por pares de k inteiros positivos s1 ,t1 , s2 , t2 ,..., sk , tk que satisfazem si < si+1 para 1 ≤ i < k . O requisito mínimo de inteligência do problema é s1, ou seja, não pode ser resolvido por um membro com menos capacidade intelectual do que este número. Se o problema é resolvido por um membro da equipe com capacidade s , onde s1 ≤ s < si+1 para algum i , então o tempo de solução será t1. Finalmente, se o problema é resolvido por um membro da equipe com capacidade intelectual sk ou mais, então o tempo de execução será tk. Um par de zeros será a entrada para o último caso de teste. Você pode assumir que cada problema será resolvido exatamente no tempo especificado para a capacidade informada, independentemente do número de outros problemas que estão sendo resolvidos por outros membros da equipe ao mesmo tempo. Nenhum problema terá um requisito de inteligência maior do que a do membro da equipe mais brilhante."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2200",
        "saida": "For each test case, display its test case number followed by the maximum number of time steps until you are caught (measured as the total number of turns that you get), or the word “never” if you can avoid capture indefinitely. Follow the format of the sample output.",
        "descricao": "During an excursion to the desert at the 2011 ACM-ICPC World Finals, you come across an old Egyptian tomb. Unfortunately, opening the tomb turns out to be a bad idea: all of a sudden, what was just a few moments ago an empty desert has now become a desert crawling with grumpy mummies (you would be grumpy too if you were suddenly awakened after a few thousand years of peaceful sleep).2 Faced with this murderous mass of mad mummies, your only chance is to run for it and try to escape before they catch you. The question is: how long will it take before a mummy catches you, assuming neither you nor the mummies ever get tired? We model the desert as a grid of squares. You and the mummies take turns making moves on the grid. You make the first move. In your turns, you can move to any of the eight squares adjacent to your current location, or you can choose to stand still. In the mummies’ turns, each mummy simply moves to the adjacent square that brings it closest to you (measured by Euclidean distance, assuming that you and all the mummies stand in the centers of their respective squares). It is possible for two mummies to occupy the same square. A time step consists of your move followed by the mummies’ moves. A mummy catches you if it moves to the square where you are located, or if you move to the square occupied by the mummy. Of course, you try to avoid being caught for as long as possible. After how many time steps will you be caught? Figure I.1: A mummy chase The figure illustrates what might happen if you are being chased by four mummies. The square labeled H is your initial position, and the squares labeled M are the initial positions of mummies. After four time steps, you are caught by the mummy whose initial position was (3, 4) with respect to your initial position. 2Fortunately, after solving this problem, you woke up safe and sound in a hotel room in Florida. The enraged mummies had just been a dream. Or had they?",
        "titulo": "Mummy Madness",
        "entrada": "The input consists of several test cases. Each test case begins with an integer n (0 ≤ n ≤ 105 ) giving the number of mummies in the desert. The following n lines each contain two integers x and y, indicating that there is initially a mummy at coordinates (x, y) of the desert, where x and y are both bounded by 106 in absolute value. Your starting position is (0, 0), and no mummy starts at this position. The last test case is followed by a line containing the number −1."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1809",
        "saida": "Para cada cenário da entrada, seu programa deve imprimir o texto Cenario x, probabilidade de interceptacao = P, onde x é a posição do respectivo cenário no arquivo de entrada (numerado a partir de 1) e P a probabilidade da informação a ser difundida ser interceptada. Tal probabilidade deve ser impressa com três casas decimais. Você deve deixar uma linha em branco entre cada cenário.",
        "descricao": "Todas as pessoas que já assistiram a filmes ou seriados de espionagem como 007, Missão Impossível ou Hawai 5-0, sabem que alguns países do mundo mantém grupos de agentes secretos infiltrados em governos e organizações do Oriente Médio, América do Sul e Leste Europeu. Um dado serviço de inteligência possui n agentes espalhados em um país não muito amigável. Cada agente conhece outros agentes e tem procedimentos específicos para arranjar um encontro secreto com cada um deles. Normalmente são trocadas mensagens codificadas para marcar tais encontros. Dados dois agentes que se conhecem i e j, existe uma certa probabilidade pij de que uma mensagem trocada entre eles seja interceptada por pessoas hostis. De tempos em tempos, o líder do serviço de inteligência precisa difundir informações confidenciais a todos os seus agentes em campo. Para tanto, ele utiliza-se do mecanismo de troca de mensagens dos agentes, isto é, ele contacta alguns dos agentes que conhece e estes se encarregam de propagar as informações de modo que a probabilidade de interceptação P seja mínima. Como você pode perceber, o serviço é tão secreto que nem o líder conhece todos os agentes subordinados a ele. Sua tarefa neste problema é construir um programa que calcule P.",
        "titulo": "Agentes Secretos",
        "entrada": "Seu programa deverá estar preparado para trabalhar sobre diversos cenários, isto é, diversas difusões de informações confidenciais em diversos países. Cada cenário é descrito da forma que segue. Na primeira linha são especificados o número de agentes no país, 0 < n ≤ 100, incluindo o líder do serviço de inteligência, e o número de pares de agentes que estão no país e se conhecem, 0 ≤ m ≤ 4950. Nas m linhas seguintes existem dois inteiros i, j e um racional pij, com 1 ≤ i,j ≤ n e 0 ≤ pij ≤ 1. Cada linha significa que os agentes i e j se conhecem e que uma mensagem trocada entre eles é interceptada com probabilidade pij. Um valor igual a zero para n indica o fim dos cenários. Você pode supor que sempre será possível difundir as informações confidenciais entre todos os agentes."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2013",
        "saida": "Mostre uma linha com um inteiro representando o maior numero menor ou igual à U que não contenha algarismos repetidos mais que 2 vezes.",
        "descricao": "Dado um inteiro positivo U, ache o maior inteiro L tal que L ≤ U e L não contenha nenhum algarismo repetido mais do que 2 vezes.",
        "titulo": "No Máximo Duas Vezes",
        "entrada": "A entrada consiste em uma única linha que contém um inteiro U (1 ≤ U ≤ 1018)."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1421",
        "saida": "Você deverá imprimir um cabeçalho indicando o número da instância que está tratando (Instancia h) e na linha seguinte a mensagem de que o jogador foi o vencedor da partida (Branco ganhou ou Azul ganhou), ou se o jogo empatou (Empate). Lembre-se de que vence a partida o jogador que primeiro conseguiu uma sequencia completa. Uma linha em branco deve ser impressa após cada instância, inclusive após a última.",
        "descricao": "Mickayil Romanoff ganhou de presente de aniversário um jogo muito interessante: um jogo da velha tridimensional. O jogo é feito de n x n pinos, dispostos em forma de uma matriz quadrada. Cada pino tem espaço para receber n bolinhas das cores branca e azul. Como no jogo da velha tradicional o objetivo é conseguir uma sequencia completa (em qualquer direção) de n bolinhas da mesma cor. Note que ao colocar uma bolinha num dos pinos ela necessariamente cai ate chegar ao primeiro nível vazio por causa da gravidade. Depois de vários jogos, Mickayil percebeu que não conseguia saber se alguém tinha ganho. Sua tarefa neste problema é ajudar ao Mickayil, escrevendo um programa que recebe uma partida e determina quem ganhou.",
        "titulo": "Tic-Tac-Toe?",
        "entrada": "São dadas várias instâncias. A primeira linha de cada instância contém a dimensão 0 ≤ n ≤ 30 da matriz. A seguir, em cada uma das próximas n3 linhas são dadas alternadamente as posições em que os jogadores estão jogando as bolinhas começando pelo jogador branco. Cada posição é dada pelo pino em que a bolinha da cor correspondente foi colocada, ou seja, um par (i, j), onde i, j ∈ {1, ..., n}. A entrada termina com um zero."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1125",
        "saida": "Para cada caso de sistema de pontuação da entrada seu programa deve imprimir uma linha, que deve conter o identificador do Campeão Mundial de Pilotos. Se houver mais de um Campeão Mundial Pilotos (ou seja, se houver empate), a linha deve conter todos os Campeões Mundiais de Pilotos, em ordem crescente de identificador, separados por um espaço em branco.",
        "descricao": "A temporada de Fórmula 1 consiste de uma série de corridas, conhecidas como Grandes Prêmios, organizados pela Federação Internacional de Automobilismo (FIA). Os resultados de cada Grande Prêmio são combinados para determinar o Campeonato Mundial de Pilotos. Mais especificamente, a cada Grande Prêmio são distribuídos pontos para os pilotos, dependendo da classificação na corrida. Ao final da temporada, o piloto que tiver somado o maior número de pontos é declarado Campeão Mundial de Pilotos. Os organizadores da Fórmula 1 mudam constantemente as regras da competição, com o objetivo de dar mais emoção às disputas. Uma regra modificada para a temporada de 2010 foi justamente a distribuição de pontos em cada Grande Prêmio. Desde 2003 a regra de pontuação premiava os oito primeiros colocados, obedecendo a seguinte tabela: Ou seja, o piloto vencedor ganhava 10 pontos, o segundo colocado ganhava 8 pontos, e assim por diante. Na temporada de 2010, os dez primeiros colocados receberão pontos obedecendo a seguinte tabela: A mudança no sistema de pontuação provocou muita especulação sobre qual teria sido o efeito nos Campeonatos Mundiais passados se a nova pontuação tivesse sido utilizada nas temporadas anteriores. Por exemplo, teria Lewis Hamilton sido campeão em 2008, já que a diferença de sua pontuação total para Felipe Massa foi de apenas um ponto? Para acabar com as especulações, a FIA contratou você para escrever um programa que, dados os resultados de cada corrida de uma temporada determine Campeão Mundial de Pilotos para sistemas de pontuações diferentes.",
        "titulo": "Fórmula 1",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros G e P separados por um espaço em branco, indicando respectivamente o número de Grandes Prêmios (1 ≤ G ≤ 100) e o número de pilotos (1 ≤ P ≤ 100). Os pilotos são identificados por inteiros de 1 a P. Cada uma das G linhas seguintes indica o resultado de uma corrida, e contém P inteiros separados por espaços em branco. Em cada linha, o i-ésimo número indica a ordem de chegada do pilodo i na corrida (o primeiro número indica a ordem de chegada do piloto 1 naquela corrida, o segundo número indica a ordem de chegada do piloto 2 na corrida, e assim por diante). A linha seguinte contém um único número inteiro S indicando o número de sistemas de pontuação (1 ≤ S ≤ 10), e após, cada uma das S linhas seguintes contém a descrição de um sistema de pontuação. A descrição de um sistema de pontuação inicia com um inteiro K (1 ≤ K ≤ P), indicando a última ordem de chegada que receberá pontos, seguido de um espaço em branco, seguido de K inteiros k0, k1, ... , kn−1 (1 ≤ ki ≤ 100) separados por espaços em branco, indicando os pontos a serem atribuídos (o primeiro inteiro indica os pontos do primeiro colocado, o segundo inteiro indica os pontos do segundo colocado, e assim por diante). O último caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco."
    }
]