[
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2184",
        "saida": "Imprima uma única linha, a maior soma das forças dos pomekons capturados que Geraldinho pode conseguir, respeitando as condições dadas. Caso não consiga capturar nenhum pomekon, imprima -1.",
        "descricao": "Pomekon GO foi lançado e já é uma febre entre as pessoas. Após vários dias andando em sua cidade procurando por um padrão de onde os pomekons aparecem, Geraldinho tirou algumas conclusões e deseja usar suas habilidades em programação para sair na frente na captura dos pomekons. Geraldinho mapeou sua cidade em vários pontos. Entre cada par de pontos que se conectam diretamente, ele sabe a força do pomekon que aparece por lá. Agora, Geraldinho quer expandir sua jornada pomekon por todo o mundo e, para isso, ele necessita de sua ajuda. Existem Q possíveis rotas no formato [A, B]. Isso significa que você deve andar do ponto A até o ponto B. (Observe que existe apenas um caminho entre quaisquer pares de pontos). Cada rota pode ser usada uma única vez e é possível capturar apenas um pomekon por rota, já que as pobekolas estão caras. Outro fato importante é que Geraldinho pode visitar no máximo K pontos em sua jornada. Se existir duas rotas que passam por um ponto P, ele será contado duas vezes. Se existir duas rotas que passam pela mesma ligação, é possível capturar o pomekon nas duas passadas. Geraldinho quer maximizar a soma das forças dos pomekons que poderá capturar, ajude-o nessa jornada!",
        "titulo": "Pomekons",
        "entrada": "A primeira linha contêm dois inteiros N, K, indicando, respectivamente, o número de pontos mapeados na cidade e a quantidade máxima de pontos em que Geraldinho pode passar. (2 ≤ N ≤ 105, 2 ≤ K ≤ 103). Segue então N-1 linhas, contendo três inteiros X, Y, F, indicando que existe uma ligação bidirecional entre o ponto X e Y contendo um pomekon de força F. (1 ≤ X, Y ≤ N, X != Y, 1 ≤ F ≤ 1000). Após isso, há uma linha com um inteiro Q, indicando o número de rotas. Q linhas seguem com dois inteiros A, B, indicando que existe uma rota partindo do ponto A até o ponto B. (1 ≤ Q ≤ 5*103, 1 ≤ A, B ≤ N, A ≠ B)."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1813",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador \"Instancia h\", em que h é um número inteiro, sequencial e crescente a partir de 1. As próximas k linhas referem-se à possibilidade das entregas. Para 1 ≤ j ≤ k, você deve imprimir na j-ésima linha a mensagem \"Impossivel\" se não for possível realizar a entrega dentro do tempo limite, ou \"Possivel - km, min\", onde é a distância que deve ser percorrida e o tempo gasto para percorrer essa distância. Se houver mais de um caminho com a menor distância possível, escolha o de menor tempo. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "Mr. Řež Slovankou é proprietário de uma empresa em Praga especializada no transporte de produtos perecíveis. Por ser uma das mais antigas e tradicionais empresas do ramo, ela é responsável por mais de 90% dos transportes deste tipo de mercadoria realizadas no país. Diariamente, vários caminhões carregados deixam postos da empresa (local onde os produtos ﬁcam armazenados) com destino aos centros consumidores. Visando um futuro ingresso no Espaço Econômico Europeu, o governo da República Tcheca, através do órgão de inspeção e vigilância sanitária, baixou uma série de medidas para assegurar ainda mais a qualidade dos alimentos consumidos pela população. Para não perder mercado, a empresa de Mr. Řež precisa adequar-se, o mais rápido possível, às novas regras. Segundo o governo, a partir de agora, produtos destinados a diferentes centros consumidores não mais poderão compartilhar um mesmo caminhão. Além disso, todo transporte deverá ser concluído em um período abaixo de um tempo limite, especiﬁcado para cada mercadoria. A adequação a essas novas regras trará consigo um aumento generoso nos custos operacionais da empresa. Preocupado com isso, Mr. Řež decidiu que seus caminhões deverão satisfazer às regras, mas que também deverão percorrer sempre o menor caminho possível até os centros consumidores (para economizar combustível, gastar menos os pneus, etc.). Para resolver este problema logístico, Mr. Řež pediu auxílio a você, que disse ser capaz de construir um programa que recebe um mapa da malha viária (em que cada estrada tem associado um comprimento em quilômetros e um tempo em minutos que leva para ser percorrida), a origem e o destino do transporte, o tempo limite, e diz se é ou não possível realizar a entrega de acordo com as restrições impostas. Em caso aﬁrmativo, você ainda disse que responderá o tempo gasto e a distância percorrida. Mr. Řež ﬁcou muito impressionado e satisfeito com sua prestatividade, e prometeu-lhe uma boa gratificação.",
        "titulo": "Anacrônico?",
        "entrada": "Seu programa será capaz de resolver várias instâncias do problema logístico. Cada instância possui a estrutura descrita abaixo. Na primeira linha são fornecidos o número de cidades (0 ≤ n ≤ 100) e o número de estradas (0 ≤ m ≤ 10000) da malha viária. Nas próximas m linhas são dados, em cada linha, quatro números inteiros separados por espaços em branco, x y c t, em que x e y são as cidades de onde sai e onde chega uma estrada, respectivamente, c é o comprimento desta estrada e t o tempo gasto para percorrê-la (obtido junto ao departamento nacional de estradas e rodagem, que afere o trânsito de tempos em tempos). Observe que 1 ≤ x, y ≤ n e que c, t ≥ 0. Uma característica interessante na República Tcheca é que as estradas são de mão única para evitar as ultrapassagens indevidas, que causam acidentes. Na linha seguinte é fornecido um inteiro k ≥ 0 que representa o número de entregas que seu programa deve planejar nesta malha viária. As próximas k linhas possuem, em ordem, a cidade de origem, a cidade de destino e o tempo limite t para o transporte da mercadoria, em minutos. De acordo com o órgão de inspeção e vigilância sanitária, nenhum transporte com duração superior a 100 horas será admitido. Logo, 0 ≤ t ≤ 6000. Um valor n = 0 indica o término das instâncias e não deve ser processado."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1275",
        "saida": "Para cada caso de teste da entrada seu programa deverá produzir uma linha de saída, contendo ou um inteiro indicando o menor número de lâmpadas necessárias para alcançar uma configuração vencedora caso ela existir. Caso contrário, seu programa deverá imprimir a mensagem ‘No solution’, conforme exemplo abaixo.",
        "descricao": "Light Up (Iluminar - em português) é um enigma ou jogo definido em uma placa retangular dividida em quadrados menores. Alguns quadrados desta placa são \"vazios\" (quadrados brancos na figura abaixo) e outros quadrados são \"barreiras\" (quadrados escuros na figura abaixo). Um quadrado que indica uma barreira pode ter um número inteiro i associado a ele (0 ≤ i ≤ 4). Figura: (a) Puzzle com 6 linhas, 7 colunas e 7 barreiras; (b) uma solução para o enigma. Neste puzzle o objetivo é \"iluminar\" todos os quadrados vazios, colocando lâmpadas em alguns dos quadrados (as lâmpadas são representadas como círculos na figura). Cada lâmpada ilumina o quadrado em que está além de todos os quadrados alinhados com ele, horizontalmente ou verticalmente até um quadrado que contenha uma barreira ou até o fim do tabuleiro. Uma configuração vencedora satisfaz as seguintes condições: • todos os quadrados vazios devem ser acesos; • a luz não pode ser acesa por outra lâmpada; • todos os quadrados numerados como barreira devem ter exatamente o número de lâmpadas adjacentes a eles (nos seus quatro lados acima, abaixo, e para o lado); • quadrados que indicam uma barreira não numerados podem ter qualquer número de lâmpadas adjacentes a eles. Você deve escrever um programa para determinar o menor número de lâmpadas que são necessárias para alcançar uma configuração vencedora.",
        "titulo": "Light Up",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros N, M indicando respectivamente o número de linhas e o número de colunas da placa (1 ≤ N ≤ 7, 1 ≤ M ≤ 7). A segunda linha contém um B inteiro que indica o número de quadrados do tipo barreira (0 ≤ B ≤ N × M). Cada uma das B linhas seguintes descrevem uma barreira, que contém três inteiros R, C e K, representando, respectivamente, o número da linha (1 ≤ R ≤ N), o número da coluna (1 ≤ C ≤ M) e o número da barreira (-1 ≤ K ≤ 4). K = -1 significa que a barreira é não numerada. O final da entrada é indicado por N = M = 0."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1955",
        "saida": "Imprima uma linha contendo unicamente a expressão Fail! se não é possível alocar as orcas nos tanques como desejado ou a expressão Bazinga! se é possível.",
        "descricao": "Sob a orientação da Profª Graziela Tonin, os estudantes de Tópicos Engenharia de Software estão desenvolvendo um sistema para ajudar o See World, o novo parque temático da cidade, a alocar orcas em dois tanques gigantes. As orcas, em particular, possuem uma hierarquia social bastante complexa, de pelo menos 4 níveis, e o curioso é que orcas são capazes de vocalizar diferentes dialetos, dependendo do nível da hierarquia social pelo qual se relacionam com seus interlocutores. Uma das maiores dificuldades em manter orcas em cativeiro é que, se duas orcas são postas juntas num mesmo tanque mas falam nenhum dialeto em comum, elas eventualmente brigarão, por não se entenderem, e por serem oriundas de culturas totalmente diferentes. Às vezes elas podem se machucar gravemente ou até morrer. Assim, o See World deseja alocar suas orcas nos seus dois tanques de modo que, se duas orcas forem alocadas num mesmo tanque, seja garantido que elas partilhem de ao menos um dialeto.",
        "titulo": "See World",
        "entrada": "A primeira linha da entrada consiste de um inteiro N (1 ≤ N ≤ 103), o qual representa o número de orcas do See World. A propósito, cada orca do See World é representada unicamente por um único código entre 1 e N. Cada uma das N linhas seguintes consiste de N inteiros, de modo que o j-ésimo inteiro da i-ésima linha (1 ≤ i, j ≤ N) é 1 se as orcas de códigos i e j partilham de ao menos um dialeto ou 0 caso contrário."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1742",
        "saida": "Seu programa deve imprimir uma linha para cada query com o número de maneiras de fugir o mais rápido possível. Como o número pode ser muito grande, sua saída deve ser módulo 109 + 7. Imprima uma linha em branco após cada caso teste.",
        "descricao": "Bob foi a Babilônia procurando por novas aventuras. Mas, assim que chegou, ele encontrou confusão com as criaturas daquele lugar que não eram muito gentis. Eles tinham um jogo esquisito e agora era a vez de Bob jogá-lo. Eles colocariam o Bob em algum lugar e objetivo era sair com vida. Como Bob sabia que ele seria frito caso não fizesse um plano a tempo, ele robou um mapa do terreno em que ele seria jogado. Mas ele ainda não sabia exatamente onde seria largado. Então ele teve que memorizar o mapa inteiro para poder sair com vida. Felizmente, o terreno era retangular (N+1)x(M+1) e as únicas possíveis direções eram ir para o norte,sul, leste e oeste. Uma coisa crucial era memorizar onde eram os buracos, também retangulares. Como ele tinha que sair o mais rápido possível, ele não podia errar o caminho. Exemplo de um grid 6x6 com dois buracos e um jeito de sair. Agora ele está te perguntando de quantas maneiras ele poderia sair o mais rápido possivel se ele fosse largado em uma posição (xi, yi) e tivesse que chegar em (xf , yf).",
        "titulo": "Entrando em Confusão",
        "entrada": "A entrada é composta por diversos casos testes e termina com o fim de arquivo. Cada uma descreve um mapa e começa com três inteiros N,M (1 ≤ N, M ≤ 1000) e H (0 ≤ H ≤ 100), os quais são, respectivamente, o tamanho do grid e o número de buracos, como descrito acima. Então, seguem H linhas, cada linha com 4 inteiros xi, yi, xf e yf (0 ≤ xi,xf ≤ N; 0 ≤ yi,yf ≤ M ) descrevendo o canto inferior esquerdo e o canto superior direito de um buraco. Depois vem um inteiro Q (1 ≤ Q ≤ 100), o número de queries. As próximas Q linhas, cada uma com 4 inteiros xi, yi, xfe yf (0 ≤ xi,xf ≤ N; 0 ≤ yi,yf ≤ M ), os quais são o começo e o fim como descrito acima. Entre casos de testes consecutivos, haverá uma linha em branco. É garantido que em um mapa, todos os buracos são disjuntos e terá sempre pelo menos um jeito de sair."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "2082",
        "saida": "Para cada instância imprima uma linha contendo a soma dos custos das ligações que devem ser removidas.",
        "descricao": "Albert Einstein nasceu na Alemanha, mas foi na Suíça, trabalhando como funcionário público, que escreveu em 1905 os trabalhos que revolucionaram a Física moderna e o tornaram famoso. Em 1921 ganhou o prêmio Nobel de Física pela descoberta da lei do efeito fotoelétrico. Muitos acham seus trabalhos sobre a Teoria da Relatividade os mais importantes de sua carreira, entretanto não foram os que renderam o valioso prêmio. Einstein gostava muito de fazer “experimentos mentais” para avaliar suas teorias. Um desses experimentos é muito famoso e descreve um elevador caindo com um relógio dentro. A ideia de viagens no tempo acabaram surgindo como possíveis, desde que se descobrisse como construir máquinas que pudessem viajar em velocidades maiores do que a velocidade da luz. Certamente, num futuro não muito distante, isso será possível e poderemos viajar livremente entre as eras e ver eventos como o descobrimento do Brasil em 1500, a chegada da Família Real em 1808 ou o Corinthians campeão da Libertadores em 2962 ao vivo. Com as constantes viagens no tempo, será importante regular o serviço. As máquinas do tempo estarão espalhadas por toda a História e os viajantes terão de pegá-las para viajar para o presente ou para o futuro. Devido a restrições técnicas destas máquinas, não será possível viajar para qualquer instante do tempo diretamente, mas apenas para outros momentos históricos, de onde uma nova máquina poderá ser usada para seguir viagem. No entanto, estando em um momento histórico, você consegue ir para qualquer outro momento viajando por uma ou mais máquinas. Juntamente com os viajantes do tempo, também surgirão os piratas da História, que tentarão roubar tesouros, inverter acontecimentos e mudar a história com os objetivos mais maldosos. Isso acarretará na criação da Polícia do Tempo. No ano de 2850 (antes do Corinthians ganhar sua primeira Libertadores) a Polícia do Tempo resolve isolar acontecimentos históricos, desabilitando ligações entre algumas máquinas. Cada ligação tem um custo associado para ser desabilitado, e sua tarefa é encontrar, dado um conjunto de momentos históricos, um conjunto de ligações – de custo mínimo – que ao serem desconectadas isolam os acontecimentos, ou seja, estando em uma máquina não será possível viajar para algumas das outras máquinas.",
        "titulo": "Viagens no Tempo",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros N e M (1 ≤ N ≤ 100 e 1 ≤ M ≤ N*(N-1)/2) indicando o número de máquinas e o número de ligações, respectivamente. Cada uma das M linhas seguinte possui três inteiros u, v e c (1 ≤ u, v ≤ N, 1 ≤ c ≤ 100) que representam a existência de uma ligação entre a máquina u e v com custo c. Tal ligação pode ser usada para viajar da máquina u para máquina v e também da máquina v para máquina u."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1502",
        "saida": "Para cada caso de teste imprima uma única linha contendo a menor diferença absoluta possível entre as somas inicial e final dos postes.",
        "descricao": "Twilight e seus amigos estão tentado impedir Discord de criar caos. Enquanto passavam por um corredor muito comprido em direção a Canterlot, eles se depararam com um labirinto de lasers mortais que bloquearam seu caminho! O corredor tem largura W. O labirinto de lasers consiste de N postes energizados com uma energia não-negativa Pi. Cada poste é capaz de criar um quadrado de lasers mortais centrado no poste com comprimento igual ao dobro do quadrado de sua energia e um par de lados paralelos às paredes do corredor. Note que quadrados podem se sobrepor, e que pode haver mais de um poste numa mesma posição. Twilight planeja usar sua magia para alterar as energias dos postes para alguns valores inteiros não-negativos de forma que seja possível atravessar o corredor e continuar sua jornada sem serem descobertos. Desligar todos os postes pode causar suspeitas, portanto Twilight decidiu modificar as energias dos postes de forma que a travessia seja possível e que a diferença absoluta da energia total do sistema antes e depois da travessia seja a mínima possível. Alterar as energias enquanto seus amigos atravessam pode ser perigoso, por isso Twilight decide que fará todas as alterações de antemão, e não fará nenhuma outra mudança durante ou depois da travessia, já que não podem perder tempo. Ajude Twilight a terminar sua jornada encontrando o menor valor possível para a diferença absoluta da soma das energias da configuração inicial e final do labirinto.",
        "titulo": "Travessia",
        "entrada": "Cada caso de teste contém uma linha com dois inteiros W e N (1 ≤ W ≤ 1000, 1 ≤ N ≤ 15). Em seguida há N linhas, cada uma contendo três inteiros Xi, Yi e Pi, descrevendo a posição e a energia inicial de cada poste (0 ≤ Xi ≤ W, 0 ≤ Yi ≤ 1000, 0 ≤ Pi ≤ 200). As paredes dos corredores estão nas posições x = 0 e x = W. O último caso de teste é seguido de uma linha contendo dois zeros."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1778",
        "saida": "Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é o número de monstros que conseguiram chegar ao castelo com vida.",
        "descricao": "Tower Defense é um famoso jogo de estratégia onde o jogador deve posicionar torres de defesa para proteger algo - seja um castelo, um tesouro ou até você mesmo - contra uma horda de monstros. Há várias variações do jogo: em alguns tipos, o mapa se assemelha a um tabuleiro, e os monstros tem um caminho especifico a seguir; em outros tipos, o mapa é aberto e os monstros podem chegar ao destino final por vários meios diferentes. Graph Defense é uma variação do Tower Defense comum. Aqui, o mapa é representado como um grafo de N vértices e M arestas. Cada vértice é uma posição em que um monstro ou uma torre (ou ambos) podem estar, em um dado momento, e as arestas representam conexões bidirecionais entre esses vértices (i.e. se há uma aresta de u para v, um monstro que está no vértice u em um dado momento pode ir para o vértice v no momento seguinte e vice-versa). O castelo, que você deseja proteger, se encontra no vértice F. Cada torre i possui um alcance Ci, um ataque Ai e está no vértice Vi. Todos os vértices que estão a no máximo Ci arestas de distância de Vi receberão Ai de dano a cada unidade de tempo. As torres não se movem, e existem desde o início do jogo. O castelo possui um escudo mágico protetor que faz com que nenhuma torre consiga atacar o vértice F onde ele se encontra, tampouco propagar o ataque, ou seja, o vértice F é uma barreira e nada passa por ele, a não ser os monstros, possivelmente. Cada monstro i surge durante o decorrer do jogo em um vértice Ki e possui Hi pontos de vida. Os monstros nunca ficam parados e, a cada unidade de tempo, se movem para um vértice adjacente. Eles sempre vão seguir para o destino final, o castelo, pelo caminho que causará o menor dano possível. Os monstros morrem quando alcançam 0 ou menos pontos de vida. Um monstro só consegue invadir o castelo quando chega ao destino F vivo. Se houver uma torre que alcança a posição inicial Ki do monstro, ela irá inflingir dano já no primeiro instante em que o monstro surge. Um monstro pode surgir já no castelo. Você foi contratado para fazer uma simulação do jogo. Depois de todas as aparições de monstros, quantos conseguiram invadir o castelo ainda com vida?",
        "titulo": "Defesa ao Grafo",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com três inteiros N (1 ≤ N ≤ 1000), M (0 ≤ M ≤ (N*(N-1))/2) e F (1 ≤ F ≤ N), o número de vértices, arestas e o vértice em que se encontra o castelo, respectivamente. A seguir há M linhas, cada uma com dois inteiros u (1 ≤ u ≤ N) e v (1 ≤ v ≤ N e v != u), indicando a existência de uma aresta que liga os vértices u e v. Não haverá mais de uma aresta entre um mesmo par de vértices. A seguir há um número P (0 ≤ P ≤ 100), indicando o número de torres. Cada uma das próximas P linhas conterá três inteiros Vi (1 ≤ Vi ≤ N e Vi != F), Ai (1 ≤ Ai ≤ 10⁵), e Ci (1 ≤ Ci ≤ 1000), indicando que a i-ésima torre se encontra no vértice Vi com Ai de ataque e Ci de alcance, conforme explicado na descrição do problema. Pode haver mais de uma torre no mesmo vértice, e não haverá nenhuma torre no vértice F. Por fim, haverá um inteiro Q (1 ≤ Q ≤ 10⁴), indicando o número de monstros. Cada uma das próximas Q linhas contém dois inteiros Ki (1 ≤ Ki ≤ N) e Hi (1 ≤ Hi ≤ 10⁸), indicando o vértice onde o i-ésimo monstro nasce e a quantidade de pontos de vida que ele tem no começo, respectivamente. É garantido que existe pelo menos um caminho que, não fosse pelos ataques das torres, o monstro conseguiria chegar ao castelo."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1344",
        "saida": "Para cada caso de teste da entrada, seu programa deverá imprimir uma única linha, contendo o tamanho do maior conjunto de empresas encontrado pelo seu programa.",
        "descricao": "A ICPC, uma companhia de telecomunicação internacional, quer melhorar sua relação com as empresas que utilizam os seus serviços, oferecendo a estas descontos nas ligações feitas para um determinado conjunto de telefones, sendo este selecionado por cada empresa cliente. Para ajudar a ICPC a decidir o custo para este novo serviço, as empresas clientes da ICPC fizeram uma busca em suas bases de dados e produziram uma lista de chamadas telefônicas feitas de uma empresa para a outra no último ano. Se uma empresa se comunicou com outra (efetuando ou recebendo uma chamada) durante o último ano, diremos que estas são Parceiras de Negócios. Você foi contratado pela ICPC para processar a lista de ligações do último ano e determinar o tamanho (em número de empresas) do maior conjunto de empresas que são Parceiras de Negócios de pelo menos K outras empresas neste mesmo conjunto e que todas as empresas desse conjunto possam fazer tratos de negócios diretamente ou indiretamente com qualquer outra empresa nesse conjunto (uma empresa pode fazer tratos diretamente com outra, se forem parceiros de negócios e as duas estiverem no conjunto). Isto é, você deve encontrar um conjunto S de empresas tal que toda empresa que pertence a S tem pelo menos K parceiros de negócios que também estão em S (e possivelmente parceiros que estão fora de S), onde K é um parâmetro definido pela ICPC.",
        "titulo": "Parceiros de Telecomunicação",
        "entrada": "Seu programa deverá processar diversos casos de teste. A primeira linha de um caso de teste contém três inteiros N, P e K. N representa o número total de empresas clientes da ICPC (1 ≤ N ≤ 1000); empresas são identificadas por um número entre 1 e N. P representa o total de pares de parceiros de negócios produzidos pela lista de ligações do último ano; e K é o número mínimo de parceiros que uma empresa necessita para pertencer ao conjunto final (1 ≤ K ≤ N-1), como descrito acima. As próximas P linhas descrevem cada par de parceiros de negócios, representados por dois inteiros X e Y, onde X e Y são empresas (1 ≤ X ≤ N, 1 ≤ Y ≤ N e X ≠ Y). O valor N = 0 indica o fim da entrada."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1529",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma linha contendo o menor custo possível para viajar da cidade 1 até a cidade N. Caso não for possível viajar entre as cidades, imprima -1.",
        "descricao": "No ano de 2042, após o surgimento da malévola União das Repúblicas Independentes (URI), a humanidade se deparou com uma grande escassez de recursos. Água e gasolina se tornaram bens muito valiosos, sendo que boa parte da tecnologia se perdeu após a URI tomar o poder mundial. Você faz parte de um grupo da resistência, que tem o objetivo de tirar o poder da URI. Max, o herói da resistência, precisa realizar várias missões que envolvem viagens de carro entre cidades. Existem postos de gasolina em cada cidade, apesar dos altos e variados preços. Como os recursos financeiros da resistência são limitados, você foi convocado a escrever um programa que calcule qual a quantidade mínima de créditos da união necessários para completar cada uma das missões de Max.",
        "titulo": "Max, o Louco",
        "entrada": "A entrada é composta por vários casos de teste. Casa caso de teste é iniciado por três inteiros, N, M e T, (1 ≤ N ≤ 10, 1 ≤ M ≤ 20, 1 ≤ T ≤ 50) correspondentes ao número de cidades na rota, o número de estradas e a capacidade do tanque do carro de Max, em litros. A entrada acaba quando N = M = T = 0. As M linhas na sequência descrevem as ligações entre as cidades. Cada linha contém os inteiros A, B e C, (1 ≤ C ≤ 1000) que indicam a existência de uma rota (ida e volta) entre as cidades A e B, com um consumo de C litros de gasolina. Devido ao estado precário das estradas, é possível que determinadas cidades sejam inacessíveis. Não existe mais de uma rota direta entre qualquer par de cidades. As próximas N linhas descrevem o custo, em créditos da união por litro, da gasolina em cada cidade. A primeira linha descreve o custo da gasolina na primeira cidade, a segunda linha descreve o custo na segunda cidade, e assim por diante."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2190",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir uma lista dos ramos de redes que devem ser construídos. A lista deve ser precedida de uma linha que identifica o conjunto de teste, no formato \"Teste n\", onde n é numerado a partir de 1. A lista é composta por uma sequência de ramos a serem construídos, um ramo por linha. Um ramo é descrito por um par de tabas X e Y , com X < Y. Os ramos de rede podem ser listados em qualquer ordem, mas não deve haver repeti- ção. Se houver mais de uma solução possível, imprima apenas uma delas. O final de uma lista de ramos deve ser marcado com uma linha em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "descricao": "Os caciques da região de Tutuaçu pretendem integrar suas tribos à chamada “aldeia global”. A primeira providência foi a distribuição de telefones celulares a todos os pajés. Agora, planejam montar uma rede de fibra ótica interligando todas as tabas. Esta empreitada requer que sejam abertas novas picadas na mata, passando por reservas de flora e fauna. Conscientes da necessidade de preservar o máximo possível o meio ambiente, os caciques encomendaram um estudo do impacto ambiental do projeto. Será que você consegue ajudá-los a projetar a rede de fibra ótica? Vamos denominar uma ligação de fibra ótica entre duas tabas de um ramo de rede. Para possibilitar a comunicação entre todas as tabas é necessário que todas elas estejam interligadas, direta (utilizando um ramo de rede) ou indiretamente (utilizando mais de um ramo). Os caciques conseguiram a informação do impacto ambiental que causará a construção dos ramos. Alguns ramos, no entanto, nem foram considerados no estudo ambiental, pois sua construção é impossível. Sua tarefa é escrever um programa para determinar quais ramos devem ser construídos, de forma a possibilitar a comunicação entre todas as tabas, causando o menor impacto ambiental possível.",
        "titulo": "Rede Ótica",
        "entrada": "A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém dois números inteiros positivos N (0 ≤ N ≤ 100) e M (1 ≤ M ≤ N(N-1)/2) que indicam, respectivamente, o número de tabas e o número de ramos de redes possíveis. As tabas são numeradas de 1 a N. As M linhas seguintes contêm três inteiros positivos X, Y e Z (1 ≤ X,Y,Z ≤ 100), que indicam que o ramo de rede que liga a taba X à taba Y tem impacto ambiental Z. Com os conjuntos de teste dados sempre é possível interligar todas as tabas. O final da entrada é indicado quando N = 0."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1490",
        "saida": "Para cada caso de teste, imprima uma linha com um inteiro representando o número máximo de torres que podem ser colocados nos quadrados sem que possam se atacar.",
        "descricao": "Problemas inspirados no Xadrez são uma fonte comum de exercícios nas aulas de algoritmos. Começando com o conhecido problema das 8 rainhas, várias generalizações e variações foram feitas. Uma deles é o problema N-torres, que consiste na colocação de N torres em um tabuleiro N x N de tal modo que elas não se ataquem. Professor Anand apresentou o problema N-torres aos seus alunos. Uma vez que as torres só atacam umas às outras quando elas compartilham uma linha ou coluna, eles logo descobriram que o problema pode ser facilmente resolvido colocando as torres ao longo da diagonal principal da placa. Então, o professor decidiu complicar o problema adicionando alguns peões no tabuleiro. Em um tabuleiro com peões, duas torres se atacam se e somente se elas compartilham uma linha ou coluna e não há nenhum peão colocado entre elas. Além disso, os peões ocupam algumas posições, o que dá uma restrição adicional às posições nas quais as torres podem ser colocadas. Dado o tamanho do tabuleiro e a localização dos peões, diga ao Professor Anand o número máximo de torres que podem ser colocadas em quadrados vazios tais que dois deles não possam se atacar.",
        "titulo": "Torres que Atacam",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 100) representando o número de linhas e colunas do tabuleiro. Cada uma das próximas N linhas contém uma seqüência de N caracteres. Na enésima linha desta string, o enésimo caractere reresenta o quadrado na coluna i, j do tabuleiro. O caractere será o \".\" (Ponto) ou a letra maiúscula \"X\", indicando, respectivamente, um quadrado vazio ou um quadrado contendo um peão."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "2131",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima sim se é possível e não, caso contrário.",
        "descricao": "Já comentamos as festas da Sra. Montagny à beira do Lake Louise em Banff. Nas suas festas ela se compromete a resolver um outro problema que faz tremer organizadores de jantares em todo o mundo: onde sentar os convidados. A magnata simplifica bastante o problema pedindo aos convidados, no mesmo questionário já comentado, que anote na lista dos convidados aqueles que desejariam ter à sua frente na mesa do jantar. A ideia é ter seus amigos sempre à sua frente, para que a conversa possa fluir melhor. A habilidade da socialite é tamanha que ela foi contratada pelo Fairmont Banff Springs hotel (hotel em que vão ocorrer as finais mundiais do ICPC em 2008: http://en.wikipedia.org/wiki/Banff Springs Hotel) para trabalhar no arranjo de mesas de banquete. Sua tarefa neste problema é auxiliar novamente a magnata. Dados os desejos dos convidados, seu programa deve decidir se é possível dispô-los numa mesa de forma que cada convidado tenha todos os seus amigos no lado oposto da mesa.",
        "titulo": "Mesa da Sra. Montagny!",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância contém dois inteiros n (1 ≤ n ≤ 100) e m (0 ≤ m ≤ n(n-1)/2), onde n é o número de convidados e m é o número de relações de amizade. Cada uma das m linhas seguintes contém dois inteiros u e v indicando que u é amigo de v e v é amigo de u, onde 1 ≤ u, v ≤ n. A entrada termina com final de arquivo."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1792",
        "saida": "Para cada caso de teste imprima uma linha, contendo a palavra “possivel” caso seja possível atacar todos os postos respeitando as restrições dadas, ou “impossivel” caso contrário.",
        "descricao": "Você é o líder de uma equipe de soldados de elite, e acaba de descobrir que os soldados que você enviou recentemente para atacar os postos inimigos foram capturados e mantidos como refém. Sua estratégia agora é recuperar sua tropa sem perder um soldado em batalha, e sem nunca deixar que o inimigo soe o alarme. Existem N postos inimigos e M linhas de visão entre eles, de tal modo que se existe uma linha de visão do posto A ao posto B, os soldados do posto A saberiam quando o posto B fosse atacado e soariam o alarme. Como seu objetivo é total descrição você decidiu que só atacaria um posto quando todos os postos que tem linha de visão sobre ele tivessem sido atacados anteriormente, o que impossibilitaria que o alarme fosse soado. Inicialmente você tem S soldados em sua tropa. Em cada posto inimigo há E soldados inimigos e F soldados reféns. Para garantir que cada ataque seja um sucesso, você decidiu que só vai atacar um posto quando o número de soldados em sua tropa for maior que o número de soldados inimigos daquele posto. Após cada ataque, os soldados reféns daquele posto são adicionados à sua tropa para os próximos ataques. O plano parece bom, mas é preciso ter absoluta certeza de que é possível completá-lo. Com os dados sobre os postos trazidos pelo seu espião, descubra se é possível atacar todos os postos inimigos seguindo as duas restrições acima.",
        "titulo": "Ataque Programado",
        "entrada": "Haverá no máximo 30 casos de teste. Cada caso de teste inicia com três inteiros, N, M e S, indicando o número de postos, o número de linhas de visão e o número inicial de soldados de elite em sua equipe, respectivamente (1 ≤ N ≤ 104, 0 ≤ M ≤ 105, 1 ≤ S ≤ 100). Em seguida haverá uma linha com N inteiros ei, onde o i-ésimo inteiro indica quantos soldados inimigos há no posto i (1 ≤ ei ≤ 106, para todo 1 ≤ i ≤ N). Em seguida haverá uma linha com N inteiros fi, onde o i-ésimo inteiro indica quantos soldados reféns há no posto i (0 ≤ fi ≤ 100, para todo 1 ≤ i ≤ N). Em seguida haverá M linhas, cada uma contendo dois inteiros A e B, indicando que o posto A tem uma linha de visão sobre o posto B (1 ≤ A, B ≤ N, A B). O último caso de teste é indicado quando N = M = S = 0, o qual não deverá ser processado."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1655",
        "saida": "Para cada instância, calcule a probabilidade do caminho mais seguro da interseção 1 (o Hotel Palace) até a interseção n (o Honorável Centro Richard J. Daley em Chicago). Você pode supor que exista ao menos um caminho entre as interseções 1 e n. Imprima a probabilidade como uma porcentagem com exatamente 6 dígitos depois da vírgula. O valor precentual será considerado correto se difeir no máximo 10-6 da saída do juíz. Use o formato mostrado abaixo e imprima uma linha por instância.",
        "descricao": "No filme \"Os Irmãos Cara de Pau\", o orfanato onde Elwood e Jake foram criados pode ser vendido para o Conselho de Educação se eles não pagarem 5000 dólares em impostos no Gabinete do Assessor do Condado de Cook em Chicago. Depois de dar um show no salão de baile do Hotel Palace para ganhar esses 5000 dólares eles têm de achar um caminho para Chicago. No entanto isso não é fácil e parece que eles estão perseguidos pela polícia, uma banda country e um grupo de nazistas. Mais que isso, eles estão a 106 milhas de Chicago, está escuro e eles estão usando óculos escuros. Como eles estão em uma missão Divina você deve ajudá-los a achar o caminho mais seguro para Chicago. Neste problema o caminho mais seguro é considerado a rota que maximiza a probabilidade deles não serem pegos.",
        "titulo": "106 Milhas Para Chicago",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância contém dois inteiros n e m (2 ≤ n ≤ 100 , 1 ≤ m ≤ n*(n-1)/2). n é o número de interseções, m é o número de ruas a ser considerado. As próximas m linhas contém a descrição das ruas. Cada rua é descrita por uma linha contendo 3 inteiros a, b e p (1 ≤ a, b ≤ n , a ≠ b, 1 ≤ p ≤ 100): a e b são dois pontos finais de uma rua e p é a probabilidade dos irmãos Blues conseguirem usar essa rua sem serem pegos. Cada rua pode ser usada nas duas direções. Você pode supor que há no máximo uma rua entre dois pontos finais. A última instância é seguida por um zero. Obs.: O caminho mais seguro a ser seguido no exemplo de entrada é 1 -> 4 -> 3 -> 5"
    },
    {
        "nivel": "2",
        "assunto": "7",
        "numero": "1610",
        "saida": "Para cada caso, imprima SIM caso exista pelo menos um loop e NAO caso contrário.",
        "descricao": "Dudu precisa de um documento para finalizar uma tarefa em seu trabalho. Após pesquisar um pouco, ele descobre que este documento depende de outros documentos que, por sua vez, necessitam de outros documentos e assim por diante. Dudu chegou a uma lista final com todos os documentos que deverá precisar. Com essa lista em mãos, ele suspeita que a mesma possui loops. Por exemplo, se um documento A depende do documento B que por sua vez depende do documento A, tornaria a tarefa interminável. Veja que neste caso o loop tem apenas dois documentos, pode haver loops com três ou mais! Dada a lista das dependências entre os documentos, ajude Dudu a saber se um dia conseguirá todos os documentos, ou seja, se não existe um loop na lista.",
        "titulo": "Dudu Faz Serviço",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso teremos os números inteiros N (2 ≤ N ≤ 100* ou 2 ≤ N ≤ 104**) e M (1 ≤ M ≤ 300* ou 1 ≤ M ≤ 3*104​**), indicando o número de documentos e as dependências existentes. Em cada uma das M linhas seguintes, terão dois inteiros A (1 ≤ A) e B (B ≤ N, com A != B), indicando que o documento A depende do documento B. Pode haver dependências repetidas! *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1227",
        "saida": "Seu programa deve imprimir uma única linha, contendo a probabilidade de o turista chegar ao hotel barato antes de chegar ao hotel caro, com 6 casas decimais.",
        "descricao": "Numa cidade da Nlogônia, o sistema viário é composto de N rotatórias e N−1 ruas, sendo que cada rua liga duas rotatórias distintas. Utilizando o sistema viário, é possível ir de qualquer rotatória para qualquer outra rotatória da cidade. A cidade possui apenas dois hotéis: um barato, localizado na rotatória B, e um caro, localizado na rotatória C. Um turista veio à cidade para celebrar o aniversário de um amigo, cuja festa está sendo realizada em um clube localizado na rotatória A. Como o turista não fez reserva em nenhum dos hotéis e a noite está agradável, após a festa ele decidiu passear a pé pelas ruas e rotatórias até encontrar um dos hotéis (ele também decidiu hospedar-se no primeiro hotel que encontrar). Seu plano foi dificultado porque como ele não conhece a cidade e bebeu um pouco além da conta, todas as ruas lhe parecem iguais. Assim, ele decidiu usar a seguinte estratégia: a cada rotatória ele escolhe, com probabilidade uniforme, uma das ruas que saem da rotatória, e usa essa rua para ir a uma outra rotatória, até chegar à rotatória onde um dos hotéis está localizado. Note que como o turista não consegue distinguir as ruas, pode ocorrer de ele escolher a mesma rua pela qual chegou à rotatória. Você deve escrever um programa que, dadas a descrição do sistema viário, a localização A da festa de aniversário, a localização B do hotel barato e a localização C do hotel caro, determine a probabilidade de o turista chegar ao hotel barato antes de chegar ao hotel caro.",
        "titulo": "Perdido na Noite",
        "entrada": "A primeira linha de um caso de teste contém quatro inteiros N (3 ≤ N ≤ 100), A (1 ≤ A), B e C (C ≤ N), indicando respectivamente o número de rotatórias do sistema viário, a rotatória onde a festa de aniversário foi realizada, a rotatória onde o hotel barato está localizado, e a rotatória onde o hotel caro está localizado. Cada uma das N−1 linhas seguintes contém dois inteiros X (1 ≤ X) e Y (Y ≤ N), indicando que existe uma rua que liga as rotatórias X e Y. Nota: B != C, A != B, A != C e X != Y"
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1806",
        "saida": "Imprima a quantidade mínima de criminosos que Bino vai eliminar no caminho.",
        "descricao": "Uma organização criminosa da cidade está ficando mais poderosa a cada dia, e para tentar acompanhar esse avanço, a organização protetora da cidade está investindo muito no treinamento dos seus homens. Bino, também conhecido como Agente 004, é o melhor agente da organização protetora, então ele foi designado para uma missão especial. A missão especial de Bino é entregar uma mensagem secreta de uma sede de treinamento de agentes especiais para outra. Porém a cidade está cheia de criminosos, e todos eles querem interceptar Bino na sua missão. Bino não conhece muito bem as rotas da cidade, pois passou a maior parte do tempo de sua vida sendo treinado em campos especiais, diferentemente dos criminosos, que passam maior parte das suas vidas nas ruas, e conhecem todas as rotas possíveis. Como Bino é o melhor agente do mundo, ele sabe que é capaz de eliminar qualquer quantidade de criminosos que estão no mesmo local dele instantaneamente. Os criminosos podem interceptar Bino em qualquer lugar da cidade(Em todas as rotas e em tudos os lugares, inclusive, nos lugares onde estão as sedes de treinamento inicial e a destino). Bino e os criminosos se deslocam com velocidade de 12 m/s. Bino sempre utiliza o caminho que encontrará menos criminosos, porém, os criminosos sempre utilizam os melhores caminhos para interceptar Bino. Sua tarefa é descobrir qual a quantidade mínima de criminosos que Bino terá que eliminar para entregar uma mensagem secreta de uma sede de treinamento para outra. É garantindo que existirá um caminho entre qualquer lugar na cidade para qualquer outro lugar.",
        "titulo": "Agente 004",
        "entrada": "A primeira linha contém 4 inteiros,  N(1 ≤ N ≤ 10000), C(1 ≤ C ≤ 50000), S(1 ≤ S ≤ 50000) e B (1 ≤ B ≤ 10000), representando respectivamente o número de lugares na cidade, o número de rotas conhecidas pelo Bino, o número de rotas conhecidas somente pelos criminosos  e o número de criminosos. Cada uma das próximas C linhas contém três inteiros a(1 ≤ a ≤ N), b(1 ≤ b ≤ N) e v(1 ≤ v ≤ 1000), representando que existe uma rota entre os lugares a e b com distância de v metros. Cada uma das próximas S linhas contém três inteiros a(1 ≤ a ≤ N), b(1 ≤ b ≤ N), v(1 ≤ v ≤ 1000), representando que existe uma rota secreta entre os lugares a e b com distância de v metros. A próxima linha contém B inteiros li(1 ≤ li ≤ N) representando que o criminoso i está inicialmente no lugar l. A última linha do caso de teste contém 2 inteiros K(1 ≤ K ≤ 10000),  e F(1 ≤ F ≤ 10000), representando respectivamente o lugar inicial do Bino e o lugar onde ele vai ter que entregar a mensagem secreta."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1972",
        "saida": "Imprima uma linha contendo unicamente a quantidade mínima de energia necessária para Hércules chegar até Euterpe. Se não é possível a Hércules chegar até Euterpe, imprima uma linha contendo unicamente a palavra ARTSKJID.",
        "descricao": "Nêmesis, a deusa da vingança, irou-se contra Euterpe, a musa dos prazeres, e a pôs num labirinto infestado de bestas. Agora, apenas Hércules poderá salvar Euterpe. Iniciando sua jornada em alguma posição do labirinto, Hércules só pode avançar para uma posição do labirinto guardada por uma besta se matar a besta. Embora terrível, uma besta nunca deixa a posição que guarda. Ainda, bestas diferentes podem exigir de Hércules quantias diferentes de energia para serem mortas. Ajude Hércules a salvar Euterpe gastando o mínimo de energia possível, sabendo que ele só pode se mover nas direções horizontal e vertical e, apesar de ser um herói invencível e de possuir energia infinita, Hércules não consegue destruir as paredes do labirinto.",
        "titulo": "Nêmesis",
        "entrada": "A primeira linha da entrada consiste de dois inteiros, N e M (2 ≤ N, M ≤ 500), os quais representam o número de linhas e o número de colunas no labirinto. As próximas N linhas descrevem o labirinto e possuem exatamente M caracteres cada, os quais podem ser: H, se aquela é a posição onde Hércules começa sua jornada; E, se aquela é a posição onde Euterpe está presa; ., se aquela posição é uma posição livre; #, se aquela posição é uma parede; um inteiro X entre 1 e 9, se aquela posição é guardada por uma besta que requer X de energia hercúlea para ser morta."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1201",
        "saida": "Cada linha de entrada, com exceção das linhas que contém os comandos \"I\" ou \"R\", deve produzir uma linha de saída. A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, caso contrário, sua submissão receberá Presentation Error.",
        "descricao": "Marcela nem terminou de fazer o programa anterior e o professor já lhe pediu um novo programa, com aprimoramentos sobre o programa anterior. Este novo programa é a implementação de uma Árvore Binária de Pesquisa (ou Busca) mas utilizando números inteiros agora, e que deve aceitar um comando extra (R) com relação ao programa anterior: I n: Insere na árvore binária de pesquisa o elemento n. INFIXA: lista os elementos já inseridos segundo o percurso infixo PREFIXA: lista os elementos já inseridos segundo o percurso prefixo POSFIXA: lista os elementos já inseridos segundo o percurso posfixo P n: Pesquisa se o elemento n existe ou não na árvore. R n: Remove o elemento n da árvore, caso ele exista. A qualquer momento pode-se inserir um elemento, visitar os elementos previamente inseridos na ordem infixa, prefixa ou posfixa, procurar por um elemento na árvore para saber se o elemento existe ou não ou ainda retirar um elemento. Nota: Se um elemento com duas sub-árvores (direita e esquerda) for removido, o antecessor (o elemento maior de sub-árvore esquerda, deve ocupar o seu lugar e ao tentar retirar um elemento que não existe, nenhuma mensagem deve ser apresentada.",
        "titulo": "Operações em ABP II",
        "entrada": "A entrada contém N operações utilizando números inteiros (1-106) sobre uma árvore binária de Busca, que inicialmente se encontra vazia. A primeira linha de entrada contém a inserção de algum elemento. As demais linhas de entrada podem conter quaiquer um dos comandos descritos acima, conforme exemplo abaixo. O final da entrada é determinado pelo final de arquivo (EOF). Saída Cada linha de entrada, com exceção das linhas que contém os comandos \"I\" ou \"R\", deve produzir uma linha de saída. A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, caso contrário, sua submissão receberá Presentation Error. Exemplo de Entrada Exemplo de Saída I 5 I 2 I 4 I 1 INFIXA PREFIXA POSFIXA P 3 P 1 INFIXA R 1 INFIXA 1 2 4 5 5 2 1 4 1 4 2 5 3 nao existe 1 existe 1 2 4 5 2 4 5"
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1862",
        "saida": "Se a informação dada pelo espião é inconsistente e não é possível determinar o número de casas, imprima uma linha contendo o inteiro -1. Caso contrário, imprima duas linhas. A primeira linha contém um inteiro K, o número de casas. A segunda linha contém K inteiros, o número de pessoas em cada casa. Os inteiros devem ser impressos em ordem não crescente. Imprima um espaço entre dois inteiros consecutivos.",
        "descricao": "Daenerys: \"Lannister, Targaryen, Baratheon, Stark, Tyrell. Estão todos em uma mesma roda\". As casas nobres de Westeros estão lutando constantemente pelo Trono de Ferro. Para vencer a Guerra dos Tronos, deve-se sempre saber quantas casas existem no continente. Também é importante saber o tamanho de cada casa, uma vez que casas com muitas pessoas são, normalmente, mais fortes que casas com poucos membros. Existem N pessoas em Westeros. Para cada par de pessoas, um espião lhe informou se elas pertencem à mesma casa ou não. Se a informação obtida pelo espião for consistente, sua tarefa é determinar quantas casas existem em Westeros, e quantas pessoas pertencem a cada casa.",
        "titulo": "Casas de Westeros",
        "entrada": "A primeira linha contém um inteiro N (1 ≤ N ≤ 1000), o número de pessoas. Considere que as pessoas são numeradas de 1 a N. As próximas N linhas contém N caracteres cada. O j-ésimo caractere na i-ésima linha (1 ≤ i, j ≤ N) é S se as pessoas i e j pertencem à mesma casa, ou D se as pessoas i e j pertencem a casas diferentes. É garantido que, para todo 1 ≤ i, j ≤ N, o j-ésimo caractere na i-ésima linha é igual ao i-ésimo caractere na j-ésima linha. Além disso, para todo 1 ≤ i ≤ N, o i-ésimo caractere na i-ésima linha é sempre S."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1994",
        "saida": "Para cada caso, imprima a saída em uma única linha com um número inteiro representando o número mínimo de anos de modo que um único império possa dominar todas as fortalezas.",
        "descricao": "A ambição de conquista e expansão é uma doença muito conhecida no planeta Terra... E também em todo o universo. No planeta \"Imperius\" várias fortalezas foram construídas uma de cada vez e cada uma delas, menos a primeira, estavam ligadas no momento da sua construção para uma fortaleza previamente construída por um caminho direto, para fins comerciais. Imperius estava se tornando um dos planetas mais pacífico e próspero no universo, até que eles pararam de construir mais fortalezas. Naquele momento, surgiram N diferentes impérios (numeradas de 1 a N), cada um deles dominando uma fortaleza diferente. E a sede de conquista se apoderou de Imperius. Assim, a cada ano, exatamente um dos impérios vivos conquista cada império vizinho, e domina cada fortaleza pertencente a eles. Dois impérios são considerados vizinhos se existem duas fortalezas unidas por um caminho, cada uma dominada por um império diferente destes dois. Eventualmente um único império vai dominar cada fortaleza. Sua tarefa é encontrar o número mínimo de anos que isso pode acontecer. Como um exemplo, no lado esquerdo da figura abaixo um cenário possível é mostrado, onde seis fortalezas são inicialmente dominadas por seis impérios diferentes. Cada fortaleza é identificada com o número do império que a domina. Se o império 2 conquistou cada vizinho no primeiro ano, a situação seria como na figura central. Finalmente, se o império 5 conquistou seus impérios vizinhos, ele acabaria dominando cada fortaleza, como pode ser visto no lado direito da figura.",
        "titulo": "Imperialismo",
        "entrada": "A entrada contém vários casos de teste. Cada teste é descrito em duas linhas. A primeira linha contém um inteiro N (2 <= N <= 104) representando o número de fortalezas no planeta Imperius. A linha seguinte contém N-1 inteiros P_i indicando que a fortaleza i + 1 foi ligada a fortaleza P_i (1 <= P_i <= i para 1 <= i <= N-1). A última linha da entrada contém um único -1 e não deve ser processado como um caso de teste."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1330",
        "saida": "Para cada caso de teste de entrada seu programa deverá produzir uma saída, contendo um valor inteiro representando o número máximo de propriedades que podem ser vendidas.",
        "descricao": "Seu velho tio herdou um pedaço de terra de seu tetravô. Originalmente, a propriedade tinha forma retangular. Contudo, a muito tempo atrás, seu tetravô decidiu dividir a terra em uma grade de pequenos quadrados. Ele transformou alguns dos quadrados em lagos, porque ele adorava caçar patos e procurava atraí-los para sua propriedade. (Você não tem certeza, pois ainda não foi ao local, mas ele pode ter feito tantos lagos que a terra agora pode se consistir em várias ilhas desconectadas.) Seu tio Tom quer vender a terra herdada, mas regras locais regulamentam a venda de imóveis. Seu tio foi informado que, a pedido do seu tetravô, uma lei estabelece que a propriedade só possa ser vendida em partes retangulares do tamanho de dois quadrados da propriedade do seu tio. Além disso, não é permitido vender os lagos da propriedade. Seu tio pediu a você para ajudar a determinar o maior número de propriedades que ele poderia vender (os quadrados restantes tornariam-se parques de recreação).",
        "titulo": "A Terra Herdada por Tio Tom",
        "entrada": "A entrada deverá incluir diversos casos de teste. A primeira linha do caso de teste contém dois inteiros N e M, repesentando respectivamente, o número de linhas e colunas da terra (1 ≤ N, M ≤ 100). A segunda linha contém um inteiro K indicando o número de quadrados que foi transformados em lagos ((N x M) - K ≤ 50). Cada uma das próximas K linhas contém dois inteiros X e Y que descrevem a posição dos quadrados que se transformaram em lagos (1 ≤ X ≤ N e 1 ≤ Y ≤ M). O fim da entrada é indicado por N = M = 0."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1314",
        "saida": "Para cada caso de teste imprima Q + 1 linhas. Na i-ésima linha escreva a resposta para a i-ésima consulta. Se as salas formam um bom desafio, então escreva o caractere 'Y' (maiúsculo). Caso contrário escreva o caractere 'N' (maiúsculo). Imprima uma linha contendo um único caractere '-' (hífen) depois de cada caso de teste.",
        "descricao": "A Rainha da Nlogônia é uma fã de labirintos, e então os arquitetos do reino construiram vários labirintos em volta do palácio da Rainha. Todo labirinto construido para a Rainha é feito de salas conectadas por corredores. Cada corredor conecta um par diferente de salas distintas e pode ser atravessado em ambas as direções. A Rainha ama passear pelas salas e corredores do labirinto nos finais de tarde. Seus serventes escolhem um desafio diferente todo dia, que consiste em encontrar um caminho simples de uma sala inicial até uma sala final no labirinto. Um caminho simples é uma sequência de salas distintas tal que cada par de salas consecutivas é conectado por um corredor. Neste caso a primeira sala da sequência deve ser a sala inicial, e a última sala deve ser a sala final. A Rainha acha que um desafio é bom quando, dentre as rotas da sala inicial até a sala final, exatamente uma delas é um caminho simples. Você pode ajudar os serventes da Rainha a escolher um desafio que agrada a Rainha? Para tal, escreva um programa que dados a descrição de um labirinto e uma lista de consultas definindo a sala inicial e a sala final, determina para cada consulta se aquela escolha é um bom desafio ou não.",
        "titulo": "Labirintos de Cerca Viva",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém três inteiros R, C e Q representando respectivamente o número de salas do labirinto (2 ≤ R ≤ 104), o número de corredores (1 ≤ C ≤ 105), e o número de consultas (1 ≤ Q ≤ 1000). As salas são identificadas por inteiros de 1 até R. Cada uma das próximas C linhas descreve um corredor usando dois inteiros distintos A e B, indicando que existe um corredor conectando as salas A e B (1 ≤ A, B ≤ R). Após isso, cada uma das próximas Q linhas descreve uma consulta usando dois inteiros distintos S e T indicando respectivamente as salas inicial e final do desafio (1 ≤ S, T ≤ R). Você pode assumir que em cada caso de teste existe no máximo um corredor conectando cada par de salas, e não haverá duas consultas iguais. O último caso de teste será seguido por uma linha contendo três zeros."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1415",
        "saida": "Para cada caso de teste, seu programa deve imprimir R + 1 linhas. A primeira linha deve estar vazia; cada uma das R linhas seguintes deve ter C caracteres. Os caracteres impressos devem representar o estado de cada posição da grade quando o motor é ligado. Imprima um \".\" se não existem engrenagens na posição; um \"(\" se existe uma engrenagem girando em sentido horário; um \")\" se existe uma engrenagem girando em sentido anti-horário; um \"F\" maiúsculo se existe uma engrenagem que está livre e um \"B\" maiúsculo se existe uma engrenagem bloqueada.",
        "descricao": "O famoso bruxo está de volta. Depois de matar um incrível número de monstros para achar um tesouro escondido, Zak Galou decidiu comprar vinhedos na Borgonha e se aposentou. Tudo estava calmo em sua nova vida, até que um dia seu trator parou de funcionar. O motor de seu trator funciona baseado em um mecanismo de rodas dentadas. O motor pode ser representado por uma grade bidimensional. No máximo uma roda dentada pode ser presa a cada posição da grade. Todas as engrenagens são idênticas e podem engrenar com as rodas adjacentes. Nessa grade, uma roda dentada pode ter até seis engrenagens adjacentes, veja a figura abaixo: Em condições normais, quando o trator é ligado, algumas das engrenagens são inicialmente ativadas e tentam giram em sentido horário. Quando uma engrenagem tenta girar em um sentido, todas as outras adjacentes tentam girar no sentido oposto. Quando Zak Galou abriu o motor ele percebeu que ele havia sido sabotado (provavelmente por um caçador de tesouros que não conseguiu achar o tesouro). Algumas das engrenagens foram removidas do motor e outras adicionadas. Como consequência, algumas engrenagens estavam imóveis. Uma engrenagem pode estar imóvel tanto quando ela está livre ou está bloqueada. Uma engrenagem está livre quando ela não é ativada inicialmente e não tem nenhuma engrenagem adjacente tentando girar. Uma engrenagem está bloqueada quando ela está tentando girar em ambos sentidos ao mesmo tempo. Por exemplo, considere que existam três engrenagens no motor como mostrado na figura abaixo. Se qualquer uma delas é ativada inicialmente, todas estarão bloqueadas. Se nenhuma delas é ativada inicialmente, todas estarão livres. ​ Como parte do trabalho para consertar seu trator, Zak Galou pede sua ajuda para resolver o seguinte problema. Dada a descrição do motor e das engrenagens que estão ativadas inicialmente em sentido horário, ele quer saber para cada uma delas qual o seu estado quando o trator é ligado: girando no sentido horário, girando no sentido horário, livre ou bloqueado.",
        "titulo": "Galou Está de Volta!",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros R e C, separados por um espaço, representando respectivamente o número de fileiras e colunas da grade do motor (1 ≤ R, C ≤ 100). As próximas R linhas descrevem o motor. A i-ésima linha representa a i-ésima fileira do motor e contém C caracteres. O caractere \".\" indica que não existem engrenagens naquela posição, o caractere \"*\" indica que existe uma engrenagem que não é ativada inicialmente e um \"I\" indica que existe uma engrenagem que é inicialmente ativada quando o motor é ligado. Perceba que, por razões de simplicidade, o paralelogramo representando a grade do motor é descrito na entrada como se fosse um retângulo com cada fileira alinhada à esquerda. O final da entrada é indicado por R = C = 0."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1695",
        "saida": "Para cada caso de teste imprima uma única linha contendo as respostas para as perguntas na ordem em que aparecem na entrada, cada resposta deve ser seguida por um único espaço (mesmo para a última consulta).",
        "descricao": "É sabido que o Conde de Limãograb é o cara mais estranho no reino doce, mas a sua mais recente obsessão foi longe demais: ele está tentando descobrir a ordem de todas as coisas! Até agora ele tem tido sucesso em um monte de problemas de ordenação, mas ele está ficando louco, porque ele encontrou um problema que não pode resolver: dada uma árvore com raiz que consiste de N vértices, onde cada vértice i tem um valor Vi, ele tentou descobrir a ordem crescente de todos os valores na subárvore com raiz no vértice X. Ele resolveu facilmente para algumas sub-árvores, mas depois ele se cansou e notou que ninguém seria capaz de realizar essa tarefa em curto espaço de tempo. A fim de aliviar sua frustração, ele pediu-lhe para responder a M consultas: para um dado vértice X lhe dizer qual é o K-ésimo menor valor da subárvore com raiz no vértice X.",
        "titulo": "Ordenando Árvores",
        "entrada": "A primeira linha contém um número inteiro T (1 ≤ T ≤ 35), o número de casos de teste. A primeira linha de cada caso de teste contém dois inteiros N e M (1 ≤ N, M ≤ 105), o número de vértices e o número de consultas, respectivamente. Vamos supor que os vértices das árvores são identificados por inteiros de 1 a N, e que a raiz da árvore é o vértice 1. A próxima linha contém uma seqüência de números inteiros V1, V2, ..., VN (1 ≤ Vi ≤ 109), os valores de cada vértice. Cada uma das próximas N - 1 linhas contém dois inteiros Ai e Bi (1 ≤ Ai, Bi ≤ N), os pares de vértices conectados por uma aresta na árvore. A árvore é conectada e válida. As próximas M linhas contêm as consultas, cada linha contendo dois inteiros X e K (1 ≤ X, Ki ≤ N), que é, encontrar o K-ésimo menor valor na subárvore com raiz em X. É garantido que cada consulta é válida."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1152",
        "saida": "Para cada caso de teste imprima uma linha contendo a máxima quantidade diária de dólares de Byteland que o governo pode economizar.",
        "descricao": "Nestes dias se pensa muito em economia, mesmo em Byteland. Para reduzir custos operacionais, o governo de Byteland decidiu otimizar a iluminação das estradas. Até agora, todas as rotas eram iluminadas durante toda noite, o que custava 1 Dólar Byteland por metro a cada dia. Para economizar, eles decidiram não iluminar mais todas as estradas e desligar a iluminação de algumas delas. Para ter certeza que os habitantes de Byteland continuem a se sentirem seguros, eles querem otimizar o sistema de tal forma que após desligar a iluminação de algumas estradas à noite, sempre existirá algum caminho iluminado de qualquer junção de Byteland para qualquer outra junção. Qual é a quantidade máxima de dinheiro que o governo de Byteland pode economizar, sem fazer os seus habitantes sentirem-se inseguros?",
        "titulo": "Estradas Escuras",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com dois números m (1 ≤ m ≤ 200000) e n (m-1 ≤ n ≤ 200000), que são o número de junções de Byteland e o número de estradas em Byteland, respectivamente. Seguem n conjuntos de três valores inteiros, x, y e z, especificando qual será a estrada bidirecional entre x e y com z metros (0 ≤ x, y < m e x ≠ y). A entrada termina com m=n=0. O grafo especificado em cada caso de teste é conectado. O tamanho total de todas as estradas em cada caso de teste é menor do que 231."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1417",
        "saida": "Para cada caso de teste da entrada imprima uma única linha, contendo a letra maiúscula \"Y\", caso seja possível selecionar um subgrupo de heróis para formar a Liga da Justiça de acordo com as restrições, ou a letra maiúscula \"N\", caso contrário.",
        "descricao": "Trinta e cinco anos atrás, um grupo de super heróis foi escolhido para formar a Liga da Justiça, com o propósito de proteger o planeta Terra dos vilões. Depois de todos esses anos ajudando a humanidade, seus membros estão se aposentando e está na hora de escolher novos membros para a Liga da Justiça. Para manter sua identidade secreta em segredo, super heróis normalmente usam um número inteiro para se identificar. Existem H super heróis na Terra, identificados por números inteiros de 1 até H. Com uma olhada rápida num jornal qualquer um pode descobrir se dois super heróis já trabalharam juntos numa missão. Se isso aconteceu, dizemos que os dois super heróis têm um relacionamento. Só se pode ter uma Liga da Justiça no mundo, que pode ser formada por qualquer número de super heróis (até mesmo apenas um). Além disso, para quaisquer dois heróis na nova Liga, eles têm que ter um relacionamento. Considere também o grupo de heróis não escolhidos para entrar na Liga da Justiça. Para quaisquer dois heróis desse grupo, eles não podem ter um relacionamento. Isso previne a formação de outras Ligas da Justiça não oficiais. Você trabalha para uma agência responsável por criar a nova Liga da Justiça. A agência não sabe se é ou não possível criar a Liga com todas as restrições dadas, e pediu ajuda às suas habilidades em programação. Dado um grupo de super heróis e seus relacionamentos, determine se é possível selecionar um subgrupo para formar a Liga da Justiça conforme as restrições dadas acima.",
        "titulo": "Liga da Justiça",
        "entrada": "A entrada é composta por vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros separados por um espaço, H (2 ≤ H ≤ 50000) e R (1 ≤ R ≤ 100000), indicando, respectivamente, o número de super heróis e o número de relacionamentos. Cada uma das R linhas seguintes contém dois inteiros separados por um espaço, A e B (1 ≤ A < B ≤ H), indicando que o super herói A tem um relacionamento com o super herói B. Note que se A tem um relacionamento com B, então B tem um relacionamento com A. Um relacionamento nunca é informado duas vezes num caso de teste. O final da entrada é indicado por H = R = 0."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1111",
        "saida": "Para cada questão, responda “Impossible”, se não existe um caminho válido entre as esquinas (respeitando as regras de direções para esquinas), ou o custo mínimo, se há caminho(s). Imprima uma linha em branco após cada caso de teste.",
        "descricao": "A cidade de Desrugenstein é uma bagunça completa. Olhando para o mapa ela parece organizada, já que foi criada na forma de uma grade quadrada, mas não há padrões de direções. Cada esquina diz para onde você pode ir a partir de lá (norte, sul, leste, oeste). O prefeito Daniel Cobra é cabeça-dura e preguiçoso o suficiente para deixar tudo como está e proibir qualquer tentativa de mudança. Incapaz de fazer muito, o Conselheiro Espiritual Mestre de Desrugenstein, Giordano Marfyn, te pediu, Conselheiro Espiritual Nível XVII de Desrugenstein, programador-chefe de Desrugenstein, para escrever um programa para calcular o custo de ir de uma esquina (x, y) a outra esquina (z, w), considerando as ruas bagunçadas.",
        "titulo": "Desrugenstein",
        "entrada": "O arquivo de entrada possui vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10) que representa altura e largura da grade quadrada que mapeia a cidade (uma grade N x N). A entrada termina quando N = 0, caso que não deve ser processado. Cada uma das próximas N linhas representa uma rua da cidade, começando da mais ao norte (N – 1) até a mais ao sul. Em cada uma destas linhas há 4*N inteiros, 4 para cada esquina: A (norte) B (sul) C (oeste) D (leste). Cada um é 0 se não é possível seguir na respectiva direção a partir daquela esquina, ou 1 se é possível. Depois do mapa da cidade, seu programa deve ler um inteiro P (1 ≤ P ≤ 100). As próximas P linhas contém 4 inteiros cada, x0 y0 x1 y1 representando a questão: “Qual o custo mínimo de ir da esquina (x0 , y0) até a esquina (x1 , y1)?”. O custo de ir de uma esquina para a esquina mais próxima em qualquer direção é 1."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1302",
        "saida": "Para cada caso de teste imprima Q linhas. Na enésima ( i-th ) linha escreva um inteiro com a resposta para a enésima (i-th) consulta. Se o casal correspondente pode se encontrar através de viagens aéreas, escreva o número mínimo total de vôos que o casal deve tomar para encontrar-se. Se for impossível para o casal encontrar-se por viagens aéreas, escreve o número \"-1\".",
        "descricao": "Regulamentos de tráfego aéreo na Nlogônia exigem que cada cidade deve registrar exatamente um vôo de saída para outra cidade. Os passageiros podem usar esse vôo somente na direção registrada, ou seja, pode haver um vôo registrado da cidade X para a cidade Y e nenhum vôo registrado da cidade Y para a cidade X. Assim, o número de vôos registados é igual ao número de cidades. Esta regra, como se pode imaginar, torna as viagens aéreas um pouco complicadas, mas a tradição e uma decisão forte da Rainha torna qualquer alteração difícil. Além disso, algumas empresas até tem lucro por causa dos problemas causados ​​pela regra. A Associação para a Correspondência de Casal (ACM) é a criação de um novo serviço para ajudar os clientes a encontrarem as suas  almas gêmeas: o Programa Internet para conexão de Casais (ICPC). O serviço consiste em calcular o número mínimo total de vôos que um casal precisa tomar para se encontrarem (talvez em uma cidade onde nenhum deles viva). Assumindo que as cidades de partida do casal são A e B , a agência vai tentar encontrar uma cidade C tal que C é acessível por transporte aéreo de ambos A e B , e a soma do número de voos necessários para ir de A para C e do número de voos necessárias para ir de B para , C é minimizado. Note que C pode ser igual a A ou B ou igual a ambos. Você terá a lista de todos os voos disponíveis e uma lista de consultas consistindo de pares de cidades onde os indivíduos de cada casal vivem. Para cada consulta, você deve calcular o número mínimo total de vôos que são necessárias para que eles se encontram.",
        "titulo": "Juntando Casais",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém um inteiroN representando o número de cidades ( 2 ≤ N ≤ 105). Cidades são identificadas por diferentes inteiros de 1 até N. A segunda linha contém N inteiros Fi, onde Fi indica que o vôo de saida registrado da cidade i é para a cidade Fi ( 1 ≤ Fi ≤ N, Fi = i for i = 1, 2,..., N). A terceira linha contém um inteiro Q representando o número de consultas ( 1 ≤ Q ≤ 105). Cada uma das próximas Q linhas descreve uma consulta com dois inteiros A e B indicando a cidade inicial do casal( 1 ≤ A, B ≤ N). Em cada caso de teste, se for possível viagar por via aérea da cidade X até a cidade Y, o número máximo de vôos necessários deverá ser 104."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1653",
        "saida": "Para cada expressão dada, imprima a expressão com o resultado equivalente quando processada pelo algoritmo com fila ao invés de pilha. Para que a solução seja única, você não deve assumir que os operadores sejam associativos ou comutativos.",
        "descricao": "Expressões aritméticas geralmente são escritas com os operadores entre os dois operandos (chamada de notação infixa). Por exemplo, (x + y) * (z - w) é uma expressão aritmética em notação infixa. Entretanto, é mais fácil escrever um programa que avalie uma expressão se ela estiver escrita na forma pós-fixa (também conhecida como notação polonesa reversa). Na notação pós-fixa um operador é escrito atrás de seus dois operandos, que podem ser expressões. Por exemplo, x y + z w - * é a expressão dada anteriormente escrita em notação pós-fixa. Note que nesse caso os parênteses não são necessários. Para avaliar uma expressão escrita na forma pós-fixa pode ser utilizado um algoritmo que usa pilha. Uma pilha é uma estrutura de dados que suporta duas operações: 1. push (empilhar): um número é inserido no topo da pilha 2. pop (desempilhar): o número do topo da pilha é retirado Uma expressão é avaliada da esquerda para a direita. Se um número for encontrado, ele é empilhado. Se um operador for encontrado, os dois números do topo da pilha são desempilhados, o operador é aplicado sobre eles e o resultado é empilhado de volta na pilha. Mais especificamente, o seguinte pseudocódigo mostra como tratar o caso em que um operador O é encontado: a := pop(); b := pop(); push(b O a); O resultado da expressão ficará como o único número na pilha. Agora imagine que se use uma fila ao invés da pilha. Uma fila também tem operações de push e pop, mas seu significado é diferente: 1. push: um número é inserido no fim da fila 2. pop: o número da frente da fila é retirado Você consegue reescrever a expressão dada de modo que o resultado do algoritmo usando a fila seja o mesmo que o resultado da expressão original processada pelo algoritmo com pilha?",
        "titulo": "Expressões",
        "entrada": "A primeira linha da entrada contém um número T (T ≤ 200). Cada uma das T linhas seguintes contêm uma expressão em notação pós-fixa. Operadores aritméticos são representados por letras maiúsculas e números são representados por letras minúsculas. Você pode assumir que o comprimento de cada expressão é menor que 10000 caracteres."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1747",
        "saida": "Aprezente uma linha com um inteiro que representa o número de inteiros k tal que existe um plano de viagem para que Endre acaba levando k crianças na viagem.",
        "descricao": "Endre tem muitos sobrinhos e sobrinhas. Uma vez por ano, ele leva alguns deles em uma viagem para um arquipélago onde um barco empresa opera serviços bidirecionais entre alguns pares de ilhas. Como Endre e as crianças podem voar e retornar diretamente de ou para qualquer uma das ilhas, qualquer viagem pode ser descrita como uma seqüência não vazia i1, i2,..., in de ilhas, de tal modo que cada par consecutivo de ilhas ij e ij + 1 têm um serviço de barco entre eles. A primeira e as última ilha de uma viagem pode ou não ser a mesma ilha, e as ilhas podem ser visitadas mais de uma vez durante a viagem. Cada ilha do arquipélago produz uma diferente variedade peculiar de doces, e recebe os seus visitantes dando a cada grupo que chega um determinado número de peças de doces. Endre não gosta de doces, mas as crianças comem todos quase que instantaneamente. Para evitar brigas, cada vez que o grupo chega a uma ilha e recebe doces, ele distribui uniformemente eles entre os filhos. Você pode se perguntar como Endre sempre consegue distribuir uniformemente os doces que recebem em cada ilha. Bem, a resposta é realmente muito simples. A cada ano, a agência de viagens envia-lhe o plano de viagem (a seqüência i1, i2,..., in ) de antemão. Como ele quer viajar com a maior quantidade de seus sobrinhos e sobrinhas possíveis, ele calcula o número máximo de crianças k ele pode levar para a viagem sem violar a regra sobre a distribuição uniforme de doces. Observe que cada plano de viagem determina exclusivamente o número de crianças a serem tomadas. Isso vem acontecendo há anos, e cada vez Endre acaba levando um número diferente de crianças na viagem. Ele gostaria de saber quantos números diferentes de crianças, ele pode levar em uma viagem, ou seja, o número de inteiros k tal que existe um plano de viagem para a qual ele acaba levando k crianças na viagem. Agora Endre está ocupado preparando a viagem deste ano. Você pode ajudá-lo com a resposta?",
        "titulo": "Distribuição Igual",
        "entrada": "A primeira linha contém dois números inteiros I e S (1 ≤ I, S ≤ 104), que representam, respectivamente, o número de ilhas e o número de serviços de barco entre eles. Ilhas são identificados com números inteiros distintos de 1 a I. A segunda linha contém I inteiros C1, C2,. . . , CI, onde Ci indica o número de doces o grupo recebe ao chegar a ilha i (1 ≤ Ci ≤ 105 para i = 1, 2,..., I). Cada uma das próximas linhas S descreve um serviço de barco diferente, com dois inteiros A e B (1 ≤ A < B ≤ I), o que representa que é possível viajar da ilha A para ilha B e da ilha B para a ilha A. Não existem dois serviços de barco permitem viajar entre o mesmo par de ilhas."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1821",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir possivel se for possível realizar os casamentos entre os n rapazes e as n garotas sem que parentes se casem, e imprimir impossivel em caso contrário. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "São notórios os problemas que a China vem enfrentando ao longo do tempo para controlar a explosão populacional que aflige o país. Para piorar a situação, no interior, os casamentos costumam ser tradicionalmente arranjados nas famílias, aumentando as chances do nascimento de crianças com pais aparentados. Ciente do problema, o governo chinês resolveu criar uma agência oficial de matrimônios. Esta agência deve receber as informações dos jovens que pretendem se casar e decidir se é possível realizar casamentos entre eles que evitem uniões de parentes e de tal forma que nenhum dos jovens termine solteiro. Como em muitos outros países do mundo, na China são permitidos apenas casamentos monogâmicos entre rapazes e garotas. Sua tarefa neste problema é auxiliar o governo, escrevendo um programa para descobrir se é possível realizar casamentos em dados grupos de jovens.",
        "titulo": "Miai Chinês",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversos grupos de jovens, doravante denominados instâncias. Cada instância tem a estrutura que segue. Na primeira linha são fornecidos inteiros n (0 ≤ n ≤ 100), que representa o número de rapazes e garotas, e m (0 ≤ m ≤ 1000) que representa o número de parentescos existentes entre eles. Não foram incluídos em m parentescos entre um mesmo sexo, pois isso é irrelevante ao problema. Nas próximas m linhas são fornecidos m pares de números entre 1 e n, inclusive, um par por linha. O primeiro número representa um rapaz e o segundo uma garota que são parentes. Valores n = m = 0 indicam o final das instâncias e não devem ser processados."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1993",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um número racional que representa a distância mínima que Humberto tem que andar a fim de chegar, a partir do ponto de partida, ao destino, usando alguma ou nenhuma das catapultas. Arredonde a resposta para o numero mais próximo com dois dígitos decimais. Em caso de empate, arredondar o número para cima. Imprimir exatamente dois dígitos depois do ponto decimal, mesmo que isso signifique acabar com o número 0.",
        "descricao": "Como todos sabemos, Humberto é realmente preguiçoso. Ele é tão preguiçoso que ele coloca o nariz para fora da janela para o vento soprar para ele. Obviamente, ele nunca trabalhou em toda a sua vida. No entanto, ele teve sorte e ganhou um monte de dinheiro na loteria. Com parte desse dinheiro ele comprou um terreno vazio, e construiu várias casas no interior do mesmo, para onde se mudou com sua família e amigos. Assim, Humberto pode ir em linha reta a partir de qualquer ponto em seu terreno a qualquer outro, sem ter que fazer desvios por causa do desenho urbano (por uma questão de simplicidade, consideramos os objetos no terreno de Humberto como pontos, para que eles não interfiram no caminho do Humberto). Infelizmente, isso não foi suficiente para Humberto, por isso, para caminhar menos ele decidiu instalar algumas catapultas em pontos estratégicos de seu terreno. Cada catapulta pode enviar-lhe a partir do ponto em que está instalada para qualquer ponto a uma certa distância fixa (que depende do alcance da catapulta). Mas, apesar de simplificar a sua vida, as catapultas fizeram a escolha do caminho no terreno uma verdadeira dor de cabeça, porque Humberto quer andar menos possível. Cansado dos seus problemas, ele decidiu usar o resto do seu dinheiro para contratá-lo para lhe dizer a distância mínima que tem que caminhar para se deslocar de um determinado ponto para outro no terreno.",
        "titulo": "Ele é Preguiçoso",
        "entrada": "A entrada contém vários casos de teste. Cada teste é descrito em várias linhas. A primeira linha contém cinco inteiros N, P_X, P_Y, L_X e L_Y. N representa o número de catapultas no terreno (1 <= N <= 100). O par (P_X, P_Y) indica as coordenadas no plano XY do ponto de partida para Humberto, enquanto o par (L_X, L_Y) indica o ponto de destino (1 <= P_X, P_Y, L_X, L_Y <= 109). Cada uma das próximas N linhas descreve uma catapulta diferente, utilizando três inteiros C_X, C_Y e F, que indicam o ponto (C_X, C_Y) onde a catapulta de força F está instalada. Isto significa que Humberto pode se mover, sem andar, a partir do ponto (C_X, C_Y) para qualquer ponto do plano que está a uma distância de exatamente F de (C_X, C_Y). Assume-se que em cada caso de teste todos os pontos indicados no plano são diferentes. O fim da entrada é indicado por uma única linha que contém o número -1 cinco vezes, e não deve ser processado como um caso de teste."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2039",
        "saida": "Para cada consulta de cada caso de teste, imprima uma linha com o número de passos da ramificação que produziu o sorvete.",
        "descricao": "Durante sua aventura em Imaginalândia, Alan Leopold \"Butters\" Stotch Turing inventou sua famosa máquina de fazer sorvete. Basta dizer para a máquina o sabor, que ela faz um sorvete delicioso! Fonte da imagem: http://southpark.cc.com/avatar Neste momento, Butters está preocupado com uma coisa. Ele é capaz de construir sua máquina de muitas maneiras diferentes; e está fazendo experimentos para determinar qual é a melhor. Você decidiu ajudá-lo, pois está ansioso por um sorvete de creme. Dada a descrição de uma máquina e uma série de Q consultas de sabores, Butters quer saber quantos passos esta máquina leva para fabricar o sorvete de cada consulta. Uma máquina de sorvete é uma configuração com um estado (um número inteiro), uma cadeia e uma posição nesta cadeia. Para cada configuração , um passo é gerar uma nova configuração: atualiza-se o estado, atualiza-se o símbolo que está na posição atual; e move-se a posição atual para uma posição adjacente (à esquerda, ou à direita). Caso o comando movimente a posição para uma posição além dos limites da cadeia, deve ser concatenado um espaço em branco no respectivo extremo; e a posição da nova configuração deve apontar para este espaço em branco. A máquina começa na configuração , onde sabor é uma cadeia e o segundo 1 indica a primeira posição desta cadeia. A máquina termina de fazer o sorvete quando atinge uma configuração cujo estado é o inteiro S, de sorvete. O truque mágico é que, para cada configuração , a máquina de Butters é capaz de executar vários passos distintos, de modo que ela pode terminar de fazer o sorvete mais rapidamente. Sempre que a máquina chega a uma configuração que leva a múltiplas novas configurações, a máquina cria cópias de si mesma, de modo que cada cópia segue independentemente. Há uma nova cópia para cada nova configuração. Após gerar as cópias para as novas configurações, a máquina morre. Caso uma configuração não gere novas cópias, ela só morre. O processo termina quando alguma cópia termina de fazer o sorvete. É garantido que alguma ramificação da máquina terminará de fazer o sorvete.",
        "titulo": "Programadores Devem Aprender Teoria da Computação",
        "entrada": "A entrada é composta por vários casos de teste e termina com fim de arquivo. A primeira linha de um caso de teste contém os inteiros N, S e Q, onde 0 ≤ N ≤ 25 e 1 ≤ S,Q ≤ 10. As próximas N linhas descrevem os comandos da máquina a ser testada. Cada linha está no formato q a t b c, indicando que se uma configuração estiver no estado q e o símbolo na posição atual for a, então deve-se gerar uma nova configuração com estado t, atualizar o símbolo na posição atual para b e deve-se mover a posição na direção c, de acordo com a descrição do enunciado. Note que 1 ≤ q,t ≤ S. O dado a pode ser uma letra minúscula, '0', ou '~' seguido de uma cadeia não-vazia w, que pode conter letras minúsculas ou '0'. No terceiro caso, o comando deve ser executado quando o símbolo na posição atual não aparecer em w. O dado b pode ser uma letra minúscula, '0', ou '*'. No terceiro caso, o símbolo na posição atual não deve ser atualizado. O dado c vale 'E' (esquerda), ou 'D' (direita). O símbolo '0' significa espaço em branco. As próximas Q linhas descrevem as consultas. Cada linha é uma cadeia sabor de letras minúsculas, com no mínimo 1 e no máximo 20 letras."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1208",
        "saida": "Para cada instância imprima uma linha contendo um único número inteiro, que é o número mínimo de текущий necessários para particionar todos os imperadores daquela instância.",
        "descricao": "São Petersburgo foi fundada no dia 27 de maio de 1703 pelo czar Pedro, o Grande, e foi capital imperial da Rússia por um período curto logo após (de 1713 a 1728) e depois por quase dois séculos, de 1732 a 1918. Neste último período o trono imperial russo acabou sendo ocupado por diversos imperadores, muitas vezes de linhas de dinastia diferentes. Na tradição imperial russa chama-se de текущий (lê-se текущий 1*) uma sequência de descendentes dentro de uma dinastia, ou seja, um elemento, seu filho, seu neto, e assim por diante. A determinação destas текущий é fundamental quando se deseja determinar o sucessor do atual imperador, uma vez que o próximo imperador é o elemento vivo de uma текущий que esteja mais próxima do atual imperador. É claro que uma árvore genealógica pode ser dividida em текущий de várias formas diferentes. O interessante é encontrar uma partição que minimize o número de текущий necessário para cobrir todos os elementos da dinastia. Sua tarefa neste problema é determinar, dada a árvore genealógica da família imperial russa, o menor número de текущий que particionam toda a família imperial, isso é, todos os imperadores tem que pertencer à exatamente uma текущий e essas têm que ser o menor número possível.",
        "titulo": "As dinastias de São Petersburgo",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 1000) e (M 0 ≤ M ≤ 10000) representando, respectivamente, a quantidade de imperadores e o número de relações de filiação naquela instância. Os imperadores são identificados por números de 1 à N. Cada uma das próximas M linhas contém dois inteiros Pi (1 ≤ Pi < Fi) e Fi (Pi < Fi ≤ N), indicando que Pi é pai de Fi. Uma particularidade da da árvore genealógica dada é que em caso de dúvidas de paternidade, todos os possíveis pais eram indicados, ou seja, uma pessoa pode ter qualquer número de pais."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1910",
        "saida": "Para cada caso, exiba uma única linha, a menor quantidade de cliques nos botões necessária para ir do canal de origem ao destino ou -1 caso seja impossível chegar ao canal de destino devido as restrições de Clotilde.",
        "descricao": "Clotilde ama assistir novelas, porém o controle da sua televisão não é nada convencional. Ele possui apenas seis botões, o botão liga/desliga e cinco botões para mudar de canal. Os botões de mudança de canal funcionam da seguinte maneira: +1 (avança um canal), -1(volta um canal), x2(vai para o dobro do canal atual), x3(vai para o triplo do canal atual) e /2(vai para a metade do canal atual, esse botão só funciona se o canal atual for par). Eis o famoso controle de Clotilde. Os vizinhos de Clotilde costumam visitar sua casa nos finais de semana, assistem televisão e não voltam ao canal de sua novela, assim fazendo com que Clotilde perca muito tempo tentando achar o canal de seu interesse novamente. Sua tarefa é, dado o número do canal atual e o número do canal de interesse de Clotilde, você deve calcular a menor quantidade de cliques nos botões necessária para sair de um e chegar no outro. Lembrando que como Clotilde é uma pessoa séria, ela não gosta de passar por alguns canais específicos, mesmo que tenha que apertar mais botões para chegar no canal destino. Outra restrição é, não existe canal menor igual a 0 ou maior que 105. Ex: Se está no canal 55000, você não pode apertar o botão x2 nem o x3.",
        "titulo": "Ajude Clotilde",
        "entrada": "Haverá diversos casos de testes. Cada caso inicia com três inteiros, O, D e K (1 ≤ O, D ≤ 105, 0 ≤ K ≤ 100), representando, respectivamente, o canal de origem, destino, e a quantidade de canais que Clotilde não quer passar. A segunda linha conterá os K canais proibidos por Clotilde. É garantido que o canal de origem e destino nunca serão proibidos. A entrada termina com O = D = K = 0, a qual não deve ser processada."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1423",
        "saida": "Para cada caso de teste na entrada imprima uma linha contendo um único inteiro indicando o tempo mínimo necessário para ir para casa com a bela princesa. É garantido que Super Mario pode sempre ir para casa.",
        "descricao": "Depois de resgatar a bela princesa, Super Mario precisa achar o caminho de casa - com a princesa é claro :-). Ele é familiarizado com \"Mundo de Super Mario\", então ele não precisa de uma mapa, precisa apenas da melhor rota a fim de ganhar tempo. Existem A Vilas e B Castelos neste mundo. Vilas são numeradas 1..A, e Castelos são numerados A+1..A+B. Mario vive na Vila 1, e o Castelo que ele começa é numerado A+B. Também, existem uma via de mão dupla conectando-os. Dois lugares são conectados no máximo por uma rua e um lugar jamais tem uma rua conectando-o a si mesmo. Mario já mediu o comprimento de cada rua, mas não quer caminhar todo o percurso, já que ele se move uma unidade tempo para cada unidade de distância (que lento!). Por sorte, Mário encontrou botas mágicas no Castelo onde havia salvado a princesa. Se ele as utilizar, poderá fazer uma super-corrida de um lugar a outro EM TEMPO ZERO. (Não se preocupe com a princesa, Mario encontrou um jeito de levá-la em sua super-corrida, mas ele não contará a você:-P). Uma vez que existem armadilhas nos Castelos, Mario NUNCA faz uma super-corrida através de um Castelo. Ele sempre para quando há um Castelo no caminho. Ele também começa/para suas super-corrridas SOMENTE em Vilas e Castelos. Infelizmente, as botas mágicas são velhas, então Mário não pode usar mais que L quilômetros de uma vez, e não pode usar mais que K vezes no total. Quando chegar em casa, ele pode repará-las e usá-las novamente.",
        "titulo": "A aventura de Super Mario",
        "entrada": "A primeira linha da entrada contém um único inteiro T, indicando o número de casos de teste (1 ≤ T ≤ 20). Casa caso de teste começa com cinco inteiros A, B, M, L e K - o número de Vilas, o número de Castelos (1 ≤ A, B ≤ 50), o número de ruas, a distância máxima que pode ser coberta de uma vez (1 ≤ L 500), e o número de vezes as botas podem ser usadas (0 ≤ K ≤ 10). As próximas M linhas, cada uma contém três inteiros Xi, Yi, Li. Isso significa que há uma rua conectando os lugares Xi e Yi. A distância é Li, então o tempo de caminhada é também Li (1 ≤ Li ≤ 100)."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2155",
        "saida": "Para cada caso de teste imprima a palavra Caso, seguida por um espaço, o número do caso e dois pontos. Na linha seguinte, imprima o percurso feito, saindo de casa e voltando para lá, de modo que tenha obtido o menor caminho, separando cada local visitado por um hífen e um sinal de maior, dando uma ideia de seta, seguido de dois pontos, um espaço, e a distância do percurso total, com cinco casas decimais. Caso o menor caminho tenha mais de uma possibilidade, imprima o caminho lexicograficamente menor. Ou seja, se tem um percurso saindo de casa e indo para o icosaedro de uma estrela, e outro indo para o de duas estrelas, opte por ir na de uma estrela primeiro, desde que ambos os caminhos tenham a mesma distância.",
        "descricao": "Reza a lenda que os Icosaedros do Lagarto são cristalinos e podem invocar o Lagarto Shen Long Int, que tem a habilidade de conceder desejos para quem conseguir juntar os sete icosaedros. Os icosaedros vêm em conjuntos de sete com cada mostrando o número de estrelas. Estes são difíceis de encontrar porque eles se dispersam ao redor do planeta, e se desativam por um ano a cada desejo, se transformando em pedras. Para ter a oportunidade de invocar o Lagarto, um tem que viajar ao redor do globo para encontrá-las. Certo dia, Kogu ganha o icosaedro de quatro estrelas de seu avô, Hogan. Ao saber da lenda, Kogu resolve ir atrás dos outros icosaedros, para que possa perder o medo de injeção. Como a tecnologia progrediu, isso ficou mais fácil, e bem simples com a invenção de sua amiga Mulba, o Radar do Lagarto. Só que, para ganharem tempo, precisam saber qual ordem de busca dos icosaedros eles devem seguir, de modo que percorram a menor distância possível, com a sua nuvem voadora. Escreva um programa que, dadas as coordenadas dos icosaedros, informe o caminho de menor distância, saindo de sua casa, capture todos os icosaedros e volte para casa, além de informar a distância de tal caminho.",
        "titulo": "Os Icosaedros do Lagarto",
        "entrada": "A primeira linha terá um valor inteiro C indicando o número de casos de teste. Para cada caso de teste, haverá uma linha com dois inteiros, X e Y, indicando as coordenadas da casa de Kogu, de posse do icosaedro de quatro estrelas. Depois haverá mais seis linhas, cada uma com três inteiros, N, XN e YN, representando o icosaedro de N estrelas, e as coordenadas onde tal icosaedro se encontra."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1826",
        "saida": "Para cada caso de teste, imprima uma linha com a palavra \"vazia\" se a GLC não gera nenhuma cadeia de terminais, ou a palavra \"finita\" se a GLC gera alguma, mas não infinitas cadeias de terminais, ou a palavra \"infinita\" se a GLC gera infinitas cadeias de terminais.",
        "descricao": "Gramática livre-do-contexto – GLC – é uma estrutura matemática utilizada para gerar cadeias, que são sequências finitas de símbolos terminais. Dizemos que o conjunto de todas as cadeias que podem ser geradas por uma GLC G é a linguagem de G, escrito L(G). Neste problema, dada uma GLC G, você deve determinar se L(G) é um conjunto vazio, finito, ou infinito. Uma GLC é uma 4-upla (V, Σ, R, S), onde V é um conjunto finito e não-vazio cujos elementos chamamos de variáveis. Σ é um conjunto finito e não-vazio, disjunto de V, cujos elementos chamamos de símbolos terminais. R é um conjunto regras. Uma regra tem a forma A → U1U2...Uk onde A ∈ V, k ≥ 0 e Ui ∈ V ∪ Σ para i = 1,2,...,k. S ∈ V é a variável inicial. Para gerar uma cadeia utilizando uma GLC, realizamos o seguinte procedimento. Primeiro, escrevemos a variável inicial S. Em seguida, escolhemos uma regra para substituir S, digamos, S → U1U2...Uk. Após esta escolha, apagamos o S e escrevemos em seu lugar a cadeia de variáveis e/ou terminais U1U2...Uk. Repetimos este processo até que não restem variáveis escritas. Se não é possível gerar uma cadeia sem variáveis partindo apenas da variável inicial, dizemos que a linguagem da GLC é vazia. Por exemplo, seja a GLC abaixo, onde S é a variável inicial. S → aSa S → bSb S → a S → b S → Utilizando a GLC acima, podemos gerar qualquer palíndromo feito de a's e b's. Por exemplo: S → aSa → abSba → abba Observe que a cadeia vazia é uma cadeia válida. Logo, se uma GLC G gera, por exemplo, apenas a cadeia vazia, L(G) é finita, mas não é vazia. Neste problema, as variáveis serão palavras feitas somente de letras maiúsculas, ou seja, caracteres entre A e Z. Os símbolos terminais serão letras minúsculas, ou seja, caracteres entre a e z. As regras serão dadas conforme descrito na próxima seção. A variável inicial será sempre a primeira variável do caso de teste.",
        "titulo": "A Linguagem é Infinita?",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste fornece a descrição de uma gramática livre-do-contexto. A primeira linha de um caso de teste contém dois inteiros v e r, onde v é a quantidade de variáveis da GLC, r é a quantidade de regras, 1 ≤ v ≤ 102 e 0 ≤ r ≤ 2·102. Cada uma das próximas v linhas contém uma palavra feita somente de letras maiúsculas, ou seja, uma variável da GLC. A variável da primeira linha é a variável inicial. Cada uma das próximas r linhas descreve uma regra da GLC. É dada uma palavra de letras maiúsculas, um inteiro 0 ≤ k ≤ 102 e uma sequência de k elementos, onde cada elemento é uma variável, ou um símbolo terminal."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1951",
        "saida": "Imprima uma linha contendo unicamente o.o se o circuito descrito na entrada é válido ou u.u caso contrário.",
        "descricao": "O Prof. Padilha pediu um trabalho para a componente curricular de Circuitos Digitais e agora está todo mundo desesperado! Os calouros precisam construir um circuito combinacional usando apenas circuitos de uma lista de circuitos publicados pelo professor. No entanto, devido a alguns problemas com tamanho, eles mal estão conseguindo determinar se os circuitos que eles construíram são válidos, quanto mais decidir se estão corretos. Cabe agora a você, veterano, fazer um programa para validar os circuitos construídos pelos calouros. Você pode ajudá-los? A propósito, de acordo com o que o Prof. Padilha pediu, um circuito C é válido se: para toda entrada de C e toda saída de um circuito menor usado internamente na construção de C existe ao menos um caminho até alguma saída de C; para toda saída de C existe ao menos um caminho que vem de alguma entrada de C; não há ciclos em C. Todos os circuitos publicados pelo professor possuem só uma saída cada, embora os circuitos construídos pelos calouros possam ter várias saídas. É óbvio que os circuitos publicados pelo professor são todos válidos.",
        "titulo": "Validador de Circuitos",
        "entrada": "A entrada contém a descrição de um circuito C, o qual se deseja validar. A primeira linha da entrada consiste de três inteiros, I, N e O (1 ≤ I, N, O ≤ 104), os quais representam respectivamente o número de entradas de C, o número de circuitos publicados pelo professor usados internamente na construção de C e o número de saídas de C, de modo que as entradas são identificadas pelos inteiros 1, …, I, os circuitos internos pelos inteiros I + 1, …, I + N, e as saídas identificadas pelos inteiros I + N + 1, …, I + N + O. Cada uma das próximas N linhas descreve como é alimentado cada um dos circuitos internos, seguindo a ordem I + 1, …, I + N, e consiste de um inteiro K (1 ≤ K ≤ 102), o qual representa o número de entradas no circuito interno, seguido por K inteiros, os quais identificam a origem do sinal alimentado em cada entrada. A última linha da entrada consiste de O inteiros, identificando a origem do sinal devolvido por cada saída de C, seguindo a ordem I + N + 1, …, I + N + O. A figura abaixo ilustra o circuito C descrito pelo primeiro exemplo de entrada."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1723",
        "saida": "Para cada caso de teste, imprima uma linha contendo algum ancestral comum ideal ótimo e os custos totais mínimos.",
        "descricao": "Entre outras coisas, Biologia Molecular Computacional lida com o processamento de seqüências genéticas. Considerando a relação evolutiva de duas seqüências, podemos dizer que eles estão intimamente relacionados, se eles não diferem muito. Podemos representar a relação por uma árvore, colocando seqüências de ancestrais acima de seqüências de seus descendentes. Tais árvores são chamadas árvores filogenéticas. Considerando que uma tarefa da filogenia é inferir uma árvore a partir de seqüências de dados, vamos simplificar um pouco as coisas e proporcionar uma estrutura de árvore - esta será uma árvore binária completa. Você receberá as n folhas da árvore. Claro que você sabe, n é sempre uma potência de 2. Cada folha é uma sequência de aminoácidos (designadas pelos códigos compostos de um caractere que você pode ver na figura). Todas as sequências serão de igual comprimento l. Sua tarefa é derivar a seqüência de um ancestral comum com custos mínimos. Aminoácido Alanine AlaA ArginineArgR AsparagineAsnN Aspartic Acid AspD CysteineCysC Glutamine GlnQ Glutamic Acid GluE Glycine GlyG Histidine HisH Isoleucine IleI Aminoácido Leucine LeuL Lysine LysK Methionine MetM Phenylalanine PheF Proline ProP Serine SerS Threonine ThrT Tryptophan TrpW Tyrosine TyrY Valine ValV Os custos são determinados como se segue: cada nó interior da árvore é marcado com uma sequência de comprimento L. O custo de uma extremidade da árvore é o número de posições nas quais as duas sequências diferem nas extremidades. O total custo é a soma dos custos em todas as bordas. A seqüência de um ancestral comum de todas as sequências é então encontrado na raiz da árvore. Um antepassado comum ideal é um ancestral comum com os custos totais mínimos.",
        "titulo": "Árvores Filogenéticas Herdadas",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com dois números inteiros N e L, denota o número de sequências para as folhas e do seu comprimento, respectivamente. A entrada é terminada por N = L = 0. Caso contrário, 1 ≤ N ≤ 1024 e 1 ≤ L ≤ 1000. Em seguida, siga N palavras de comprimento L sobre o alfabeto dos aminoácidos. Eles representam as folhas de uma árvore binária completa, a partir da esquerda para a direita."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1076",
        "saida": "O arquivo de saída contém um valor para cada caso de teste de entrada. Este valor é a quantidade de movimentos de caneta que devem ser feitos para desenhar o labirinto do caso de teste, considerando que o início e o fim são sempre a partir do mesmo ponto (nodo) e que não é possível levantar a caneta do papel.",
        "descricao": "Pedro gosta muito de desenhar labirintos, e teve uma idéia recentemente: quantos movimentos com a caneta ele precisa fazer, no mínimo, para desenhar um labirinto, saindo sempre da mesma posição e finalizando no mesmo ponto? Para a brincadeira ficar interessante, Pedro decidiu que não é permitido levantar a caneta do papel. Os modelos para construção do labirinto são sempre quadrados, ou seja, 3 x 3 , 4 x 4 , 5 x 5 até no máximo de 7 x 7. Para cada exemplo, Pedro vai especificar de onde o desenho deve começar e é tarefa sua determinar a quantidade de movimentos necessários para desenhar o labirindo como Pedro deseja. Pedro ainda lembra que você não precisa se preocupar com ciclos, pois não haverá nenhum ciclo em nenhum dos casos de teste. Se existir uma entrada 4 1, isso não impede a existência de outra entrada 1 4 no mesmo caso de teste, ou seja, outra linha ligando estes mesmos dois nodos. De qualquer forma isto não fará diferença no desenho do labirinto, pois se Pedro traçar as duas linhas entre 1 e 4 ou apenas uma delas, a quantidade de movimentos deverá ser a mesma. Somente neste caso, a utilização da segunda linha por Pedro é opcional. Veja os exemplos abaixo, No labirinto A (4 x 4), Pedro deseja sair do nodo 0, desenhar todas as linhas e retornar ao nodo 0. Para isso, o mínimo de movimentos possíveis é 30. No labirinto B (3 x 3), Pedro deseja sair do nodo 1, desenhar  todas as linhas e retornar para o nodo 1. Neste caso, ele precisa de 10 movimentos para fazer este desenho.",
        "titulo": "Desenhando Labirintos",
        "entrada": "A primeira linha de entrada é um inteiro T (T < 100) que indica o número total de casos de teste. Cada caso inicia com uma linha contendo um inteiro N (N < X2, onde X é a largura em nodos do labirinto, que pode variar de 3 até 7). Este N é o ponto (nodo) no qual o desenho deve ser iniciado e também é onde o desenho deve ser terminado. Na próxima linha há duas informações V e A que são respectivamente a quantidade de vértices e arestas do desenho. Uma quantidade A de linhas vem a seguir, cada uma descrevendo um segmento de linha que Pedro tem disponível para para desenhar o labirinto desejado."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1135",
        "saida": "Para cada caso de teste, imprima uma única linha com Q inteiros, os comprimentos do menor caminho entre os dois formigueiros de cada consulta. Escreva os resultados para cada consulta na mesma ordem em que aparecem na entrada.",
        "descricao": "Um grupo de formigas está muito orgulhoso pois construíram uma grande e magnífica colônia. No entanto, seu enorme tamanho tem se tornado um problema, pois muitas formigas não sabem o caminho entre algumas partes da colônia. Elas precisam de sua ajuda desesperadamente!   A colônia de formigas foi criada como uma série de N formigueiros conectados por túneis. As formigas, obssessivas como são, numeraram os formigueiros sequencialmente à medida que os construiam. O primeiro formigueiro, numerado 0, não necessitava nenhum túnel, mas para cada um dos formigueiros subsequentes, 1 até N-1, as formigas também construíram um único túnel que conectava o novo formigueiro a um dos formigueiros existentes. Certamente, esse túnel era suficiente para permitir que qualquer formiga visitasse qualquer formigueiro já construído, possivelmente passando através de outros formigueiros pelo percurso, portanto elas não se preocupavam em fazer novos túneis e continuavam construindo mais formigueiros.   O seu trabalho é: dada a estrutura de uma colônia e um conjunto de consultas, calcular, para cada uma das consultas, o menor caminho entre pares de formigueiros. O comprimento do caminho é a soma dos comprimentos de todos os túneis que necessitam ser visitados.",
        "titulo": "Colônia de Formigas",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém um inteiro N representando a quantidade de formigueiros na colônia (2 ≤ N ≤ 105). Cada uma das próximas N-1 linhas contém dois inteiros que descrevem um túnel. A linha i, para 1 ≤ i ≤ N-1, contém Ai e Li, indicando que o formigueiro i foi conectado diretamente ao formigueiro Ai por um túnel de comprimento Li (0 ≤ Ai ≤ i-1 e 1 ≤ Li ≤ 109). A próxima linha contém um inteiro Q representando o número de consultas que seguem (1 ≤ Q ≤ 105). Cada uma das Q linhas seguintes descreve uma consulta e contém dois inteiros distintos S e T (0 ≤ S,T ≤ N-1), representando, respectivamente, os formigueiros de origem e destino.   O último caso de teste é seguido por uma linha contendo apenas um zero."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1835",
        "saida": "Para cada caso de teste deverá ser impressa ou a mensagem \"Caso #t: ainda falta(m) E estrada(s)\" ou a mensagem \"Caso #t: a promessa foi cumprida\", conforme for o caso, onde t é o número do caso de teste (cuja contagem tem início no número um) e E é o número mínimo de estradas que devem ser construídas para que a promessa seja cumprida. Ao final de cada mensagem deve ser impressa uma quebra de linha.",
        "descricao": "Durante sua campanha eleitoral, o prefeito do município de Barro Bravo prometeu que, até o fim de seu mandato, os cidadãos conseguiriam se locomover entre os principais pontos do município sem passar por nenhum trecho de estrada de terra (quando assumiu o cargo, não era possível ir a lugar algum sem passar pelo barro...). A primeira providência que tomou foi finalizar as diversas vias de ligação que haviam sido parcialmente construídas, mas não terminadas. Assim que concluiu esta etapa, já com o orçamento reduzido, o prefeito precisava determinar se a promessa já fora cumprida ou não, e caso não tem sido, quantas estradas ainda deveriam ser construídas para que a promessa se concretizasse. Escreva, portanto, um programa que auxilie o prefeito a obter sua resposta.",
        "titulo": "Promessa de Campanha",
        "entrada": "A entrada consiste em uma série de casos de teste. O número T (T ≤ 100) de casos de teste é indicado na primeira linha da entrada. Cada caso de teste é composto por várias linhas. A primeira e a segunda linha do caso de teste contém, respectivamente, os valores N (1 ≤ N ≤ 100) e M (0 ≤ M ≤ N(N - 1)/2), onde N é o número de pontos principais da cidade e M o número de estradas já construídas. Os principais pontos da cidade são identificados sequencialmente por números inteiros, a partir do número um. As M linhas seguintes contém pares de valores X e Y (1 ≤ X, Y ≤ N), que indicam que existe uma estrada que liga o ponto X ao ponto Y."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2086",
        "saida": "Para cada consulta seu programa deverá imprimir uma linha com a maior distância, conforme explicado acima.",
        "descricao": "Como todos já sabem, as eleições para prefeito estão chegando. Neste ano nossa cidade possui excelentes candidatos, todos com propostas incríveis de governo. Um dos candidatos pretende implementar um sistema de transporte revolucionário, onde as ruas serão removidas e trocadas por ciclofaixas. Esta ideia parece ser a solução de todos os problemas que nossa cidade vem enfrentando. Porém, há um falha: a desidratação quando andamos por muito tempo de bicicleta. Para solucionar esse problema, o candidato pretende fornecer água gelada para toda a população. Sua ideia é colocar pontos de distribuição em todas interseções das ciclofaixas. Porém como água é um recurso que está se esgotando, a quantidade que ele fornecerá será fixa, independente da distância percorrida pelo indivíduo. Na intenção de validar sua ideia, o candidato contratou você para o ajudar. Sua tarefa é simples: será fornecido o mapa da cidade com todas as interseções e as distâncias entre elas. Em seguida, você deverá responder várias consultas do candidato, onde ele irá informar duas interseções, A e B, e seu programa deverá mostrar qual a maior distância que será percorrida por uma pessoa sem água entre A e B. Com essas informações o candidato conseguirá ver se a quantidade que ele pretende fornecer será suficiente. Não esqueça que o candidato pretende diminuir essa distância, então o seu programa deve informar a maior distância no melhor trajeto. Como as ruas de nossa cidade são bem largas, todas as ciclofaixas serão de mão dupla.",
        "titulo": "Ciclofaixa",
        "entrada": "A entrada possui diversos casos de teste. Cada caso de teste começa com dois inteiros N (1 ≤ N ≤ 100) e M (1 ≤ M ≤ 4950), indicando respectivamente o número de interseções no mapa da cidade e quantas ciclofaixas serão criadas. Nas próximas M linhas serão fornecidos três inteiros U , V (1 ≤ U, V ≤ N ) e W (0 ≤ W ≤ 2000), que indicam que existe uma ciclofaixa entre a interseção U e V com uma distância W . Na próxima linha terá um inteiro Q (1 ≤ Q ≤ 50), que representa a quantidade de consultas que o candidato deseja fazer. Segue Q linhas com dois inteiros A, B (1 ≤ A, B ≤ N), indicando o par de interseções para o qual deve ser feita a consulta. A entrada termina quando N = M = 0 e não deve ser processada."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1675",
        "saida": "Cada linha de cada caso de teste deve conter uma treap com os nós especificados. Uma treap é impressa como (/) As sub-treaps são impressas recursivamente e omitidas se forem folhas.",
        "descricao": "Leia o enunciado do problema G para as definições sobre heaps. A seguir nós definimos a terminologia básica de heaps. Uma heap é uma árvore cujos nós internos tem, cada um, uma prioridade (definida por um número) sendo que a prioridade de cada nó interno é menor que a prioridade de seu nó-pai. Como consequência, a rais será o nó de maior prioridade da árvore. Isso é uma das razões pelas quais heaps podem comumente ser usadas para a implemantação de filas de prioridade e para ordenações. Uma árvore binária na qual cada nó interno tem ambos um rótulo e uma prioridade, e é tanto uma arvore binária de busca com atenção para rótulos; quanto uma fila com atenção para prioridades, é chamada de treap(árvore-heap). A sua tarefa é: Dado um conjunto de pares de rótulos e prioridades, com rótulos únicos e prioridades únicas, construir uma treap com essas informações.",
        "titulo": "Construção de Procura Binária de Heap",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa com um inteiro n. Você pode assumir que 1≤ n ≤ 50000. Então segue n pares de strings e números rótulo1/prioridade1 , ... , rótulon/prioridaden. As strings são não-nulas e em caixa-baixa, e os números são inteiros não-negativos. O último caso de teste é seguido por um zero."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1394",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo um único caractere, 'Y' se seu time pode ser campeão ou 'N' caso contrário.",
        "descricao": "Futebol é o esporte mais popular da América Latina (e do mundo). \"Hooligan\" é uma palavra usada para descrever um fã agressivo de futebol. Em Linearonia, está sendo realizado um campeonato de futebol. Lá o rank funciona assim: para cada jogo o campeão ganha dois pontos e o perdedor não ganha nenhum; em caso de empate cada time recebe um ponto. O campeão é o time com o maior número de pontos. Cada par de times diferentes disputam uma partida um contra o outro um número igual de vezes, chamado de número correspondente. Você tem seu time favorito, seu time dos sonhos, e você pondera se é possível o seu time ser o campeão. Você sabe o número de times, o número correspondente e o resultado de alguns jogos que já foram jogados. Escreva um programa que informe se ao fim do campeonato seu time poderá ser o único campeão, extritamente com mais pontos que qualquer outro time.",
        "titulo": "Hooligan",
        "entrada": "A entrada contém vários casos de teste, cada caso consiste um uma ou mais linhas. A primeira linha contém três inteiros, N, M e G, separados por um espaço cada, representando respectivamente o número de times diputando o campeonato (2 ≤ N ≤ 40), o número correspondente (1 ≤ M ≤ 4) e o número de jogos já concluídos (1 ≤ G). Seu time é identificado pelo número 0, os outros times são identificados pelos inteiros 1, 2,..., N - 1. Cada uma das próximas G linhas, descreve os jogos já disputados. A linha contém um inteiro I, um caractere C e um inteiro J, separados por um espaço cada. inteiros I e J são os times que jogaram tal jogo (I ≠ J e 0 ≤ I, J ≤ N - 1). O caractere C será '<' se o time I perder para o time J, ou '=' se terminar empatado. O último caso de teste é seguido por uma linha contendo três zeros separados por um espaço cada."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1677",
        "saida": "Para cada caso a saída de teste imprima a base do grafo especificado em uma única linha. Para este fim, imprima os números de todos os nós que são bases na ordem de classificação, separadas por um único caractere de espaço. Se a base estiver vazia, imprima uma linha vazia.",
        "descricao": "Usaremos as seguintes definições padrão de teoria dos grafos. Seja V um conjunto finito não vazio e, seus elementos sendo chamados vértices (ou nós). Seja E um subconjunto do produto cartesiano V × V, seus elementos sendo chamado bordas. Então G = (V, E) é chamado um grafo direcionado. Seja N um inteiro positivo, e P = (e1, ..., en) uma sequência de comprimento N de arestas, e ei ∈ E de modo que ei = (vi, vi +1) para uma seqüência de vértices (v1, ..., vn+1). Então P é caminho de vértice v1 ao vértice vn +1 em G e dizemos que vn +1 é acessível a partir de v1, escrevendo (v1 → vn +1). Aqui estão algumas novas definições. Um nó v em um grafo G = (V, E) é chamado de sorvedouro, se para cada nó W em G que é acessível a partir de v, v também é acessível a partir de W. A base de um grafo é o subconjunto de todos os nós que são sorvedouros, ou seja, base(G) = {v ∈ V | ∀w ∈ V: (v → W) ⇒ (W → v)}. Você tem que calcular base de certos grafos.",
        "titulo": "A Base de um Grafo",
        "entrada": "A entrada contém vários casos de teste, cada um dos quais corresponde a um grafo orientado G. Cada um caso de teste inicia-se com um número inteiro v, que denota o número de vértices de G = (V, E), em que cada vértice é identificado por um inteiro no conjunto V = {1, ..., v}. Você pode assumir que v(1 ≤ v ≤ 5000). Isto é seguido por um número e inteiro não negativo e, a partir daí, e pares de vértice identificadores v1W1, ..., veWe, com o significado de que (vi, Wi) ∈ E. Não há outras arestas além das especificadas por estes pares. O último caso de teste é seguido por um zero."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1442",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha contendo um caractere que descreve o que a prefeitura deve fazer para respeitar o decreto real após o fechamento da rua para reformas: '-': não é necessário qualquer tipo de alteração nas outras ruas. '*': é impossível respeitar o decreto real, independente de quaisquer mudanças nas outras ruas. '1': é possível cumprir o decreto real apenas invertendo as mãos de algumas das ruas de mão única. '2': é possível cumprir o decreto real, mas é necessário converter algumas ruas de mão única para mão dupla.",
        "descricao": "A prefeitura de uma grande cidade da Nlogônia iniciou um programa de recuperação do asfalto de suas ruas. Na Nlogônia, cada rua liga diretamente dois cruzamentos, e pode ter mão única ou mão dupla. Por determinação de um antigo decreto real, sempre existe ao menos um caminho entre dois pontos quaisquer da cidade. No programa de recuperação, uma única rua será recuperada por vez, e para isso a rua será fechada para o tráfego. Esse fechamento pode causar caos no trânsito local ao violar o decreto real, impedindo vários cidadãos de voltarem para casa dos seus trabalhos e vice-versa. A prefeitura pode converter algumas das ruas de mão única em mão dupla, mas prefere evitá-lo pois ruas de mão dupla tendem a causar acidentes mais graves; a prefeitura prefere criar desvios apenas invertendo as mãos das ruas de mão única já existentes. O Rei da Nlogônia solicitou seus préstimos para escrever um programa que, dada a descrição das ruas de uma cidade, determine se, quando uma dada rua é interditada para recuperação, continua existindo um caminho entre quaisquer dois pontos da cidade, mesmo que seja necessário alterar as mãos de direção de outras ruas.",
        "titulo": "Desvio de Rua",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 105), representando respectivamente o número de cruzamentos e o número de ruas da cidade. Os cruzamentos são identificados por inteiros de 1 a N e as ruas são identificadas por números inteiros de 1 a M. Cada uma das M linhas seguintes descreve uma rua e contém três inteiros A (1 ≤ A), B (B ≤ N) e T (1 ≤ T ≤ 2), onde A e B são os cruzamentos que a rua liga diretamente, e T indica a mão de direção da rua: se T = 1 a rua tem mão única na direção de A para B; se T = 2 a rua tem mão dupla. A primeira rua descrita será interditada para recuperação."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1925",
        "saida": "Imprima a linha e a coluna da cadeira que Ordan deve sentar separados por vírgula.",
        "descricao": "Ordan está no grandioso Shopping de Campina Grande, ele vai participar de um evento de games e animes. Hoje é o primeiro dia do evento e a abertura já está prestes a acontecer, ela será no salão de palestras do Shopping. Algumas pessoas já estão acomodadas no salão, há muitos boe e muitas novinhas também, para a alegria de Ordan. Ele quer sentar em um lugar do salão em que haja o maior número de novinhas juntas, para ele poder aplicar nelas, é claro. O salão pode ser visto como um grid de 2 dimensões, e as cadeiras do salão são identificadas por um par de números inteiros, o número da linha e da coluna onde a mesma se encontra. Se houver ‘n’ na cadeira então é uma novinha que lá está sentada, se houver um ‘b’ então é um boe que lá está sentado, caso haja um ‘*’, então essa cadeira está vazia.     1 2 3 4 1  n n n n 2  b n * n 3  n b * b 4  b b n b Nesse exemplo, há duas cadeiras vazias, caso Ordan sente na cadeira (2, 3) ele estará perto de 6 novinhas que estão juntas, caso ele sente na cadeira (3, 3) ele estará perto de apenas uma novinha. Dessa forma, ele deve sentar na cadeira (2, 3). Sua tarefa é determinar qual a cadeira vazia que Ordan deve sentar para que ele esteja próximo do maior número de novinhas juntas, caso haja dois ou mais lugares que podem ser a resposta, escolha aquele que tem o menor número da linha, se ainda assim houver mais de uma cadeira que pode ser a resposta, escolha aquela que tenha o menor número da coluna. É garantido que sempre haverá pelo menos uma cadeira livre.",
        "titulo": "Ordan e as Novinhas",
        "entrada": "A primeira linha da entrada irá conter dois inteiros 1 ≤ l, c ≤ 103, que representam o número de linhas e de colunas do salão, respectivamente. Cada uma das próximas l linhas irá conter c caracteres. Os caracteres podem ser ('n','b','*')."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1773",
        "saida": "Se for possível visitar todas as salas deste castelo imprima a palavra “sim”, caso contrário imprima a palavra “nao”.",
        "descricao": "Você está preso em um castelo com N salas e M corredores. As salas são enumeradas com números entre 1 e N, e você inicialmente está na sala de número 1. Cada um dos M corredores liga duas salas distintas. Para tentar encontrar a saída você decidiu visitar todas as salas deste castelo. Todas estas salas, com exceção da sala de número 1 onde você está, precisam de uma chave para que possam ser visitadas. Para sua sorte, você encontrou algumas anotações no chão, dizendo onde estão todas estas chaves. Por exemplo, sejam S e D duas salas distintas do castelo, para visitar a sala D é preciso antes visitar a sala S que contém a chave que abre a sala D. Dadas as informacões sobre as salas, corredores e as posições das chaves, descubra se é possível visitar todas as salas do castelo.",
        "titulo": "Preso no Castelo",
        "entrada": "Haverá no máximo 70 casos de tests. Cada caso de teste inicia com dois inteiros N e M, indicando o número de salas e corredores do castelo (2 ≤ N ≤ 103, 1 ≤ M ≤ 104). Em seguida haverá M linhas contendo dois inteiros A e B cada, indicando que há um corredor que liga a sala A e B, o qual pode ser atravessado em ambas as direções (1 ≤ A, B ≤ N). Em seguida haverá N-1 inteiros k2, k3, …, kN, indicando que na sala ki você pode encontrar a chave que abre a sala i (1 ≤ ki ≤ N, para todo 2 ≤ i ≤ N). Note que não é dada a sala que contém a chave da sala 1, pois tal sala já está aberta. A entrada termina com final de arquivo (EOF)."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1402",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma linha, contendo um valor real representando o tamanho da placa de madeira que Indiana Jones deve carregar. O tamanho deve ser impresso como um número real com 2 casas decimais, e o último valor decimal deve ser arredondado. A entrada não conterá casos de teste onde as diferenças de arredondamento são significativas.",
        "descricao": "Indiana Jones está numa cidade deserta, aniquilada durante uma guerra. Os telhados de todas as casas foram destruídos e apenas alguns pedaços de parede ainda estão de pé. O solo tem tantas minas que a única maneira segura de se locomover pela cidade é andando sobre as poucas paredes restantes. A missão de nosso herói é salvar uma pessoa que está presa na cidade. Para se locomover entre duas paredes não conectadas Indiana Jones pensou em levar consigo uma placa de madeira, que ele poderia colocar entre as duas paredes e assim passar sobre a placa de uma para a outra. Fig. 1: Mapa da cidade com a rota usada por Indiana Jones As posições iniciais de Indiana Jones e da pessoa presa estão em algum ponto das paredes. Além disso, as paredes têm apenas a direção Norte-Sul (vertical) ou Oeste-Leste (horizontal). Você receberá um mapa com as ruínas da cidade. Sua missão é determinar o menor tamanho da placa de madeira que Indiana Jones precisa carregar para chegar à pessoa.",
        "titulo": "Será Que Indiana Jones Chega Lá?",
        "entrada": "Seu programa deve processar vários casos de teste. Cada caso de teste começa com um inteiro N indicando o número de porções de paredes restantes na cidade (2 ≤ N ≤ 1000). Cada uma das N linhas seguintes descrevem uma porção de parede. A primeira porção de parede é a porção em que Indiana Jones se localiza inicialmente. A segunda porção é aquela em que a pessoa presa se localiza. Cada descrição de porção de parede consiste de três inteiros X, Y e L (-10000 ≤ X, Y, L ≤ 10000), onde X e Y definem ou o ponto mais próximo do Sul (para porções verticais) ou o ponto mais próximo do Oeste (para porções horizontais). O valor de L determina o tamanho e a direção da porção: se L ≥ 0, a porção é horizontal, de comprimento L; se L < 0, a seção é vertical, com comprimento |L|. O final da entrada é indicado por N = 0."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1482",
        "saida": "Para cada caso de teste, seu programa deverá produzir uma linha contendo o número máximo de museus que podem ser visitados durante a noite.",
        "descricao": "A cidade de Viena é chamada “cidade da cultura“ porque, entre outras coisas, abriga uma grande quantidade de museus, mais de 100. Como consequência, é muito difícil e caro visitar todos os museus, não importando o tempo que ficar na cidade. Entretanto, tem uma noite especial, chamada “Noite no Museu”, que se permite a visita a vários museus com apenas um ingresso, das 18:00h até a 01:00h da manhã do próximo dia. Porém, é impossível visitar todos os museus da cidade por duas razões principais. A primeira razão é que alguns museus em Viena não entram nessa promoção porque fecham às 17:00 h. A segunda razão é que não há tempo suficiente para visitar os museus, e TODOS os seus interiores, no tempo de 7 horas. Sua tarefa é construir um programa que dado o número de museus participantes, o tempo necessário para visitar cada museu e o tempo que leva para ir de um museu ao outro, encontre o melhor “tour” para os visitantes, ou seja, visitar o maior número de museus nessa noite.",
        "titulo": "Noite no Museu",
        "entrada": "A entrada contém vários casos de testes. A primeira linha de um caso de teste contém um inteiro N, que indicará o número de museus participantes na promoção (1 ≤ N ≤ 20). Cada museu tem um identificador único variando de 1 a N. A segunda linha contém N inteiros indicando o tempo, em minutos, necessário para visitar cada museu, de 1 a N. Então, teremos mais N linhas descrevendo o tempo para ir de um museu para todos os outros. A i-ésima linha contém N inteiros Mk (1 ≤ k ≤ N) representando o tempo, em minutos, para ir de um museu i para um museu k. Assuma que o i-ésimo inteiro na i-ésima linha é igual a 0. O final da entrada é indicado por N = 0."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1462",
        "saida": "Para cada instância imprima, em uma única linha, possivel se é possível que todos os membros da comunidade estejam falando a verdade, ou impossivel caso contrário.",
        "descricao": "Hoje em dia todos estão conectados, participam do Facebook, publicam suas fotos no Instagram, seus vídeos no Youtube, e assim por diante. Até mesmo sistemas como GPS hoje se baseiam em redes sociais, tornando tudo mais divertido (e talvez mais difícil de entender, mas isso é outra conversa). Ser popular no Facebook é quase uma necessidade. Uma pessoa com menos de 700, 800 amigos pode ser considerado quase como um pária nessa nova realidade. Talvez por isso algumas pessoas costumam exagerar quando dizem o número de amigos que possuem. Considere uma comunidade com N pessoas, e para cada uma delas, considere que sabemos o número de amigos que cada pessoa diz ter na comunidade. Sua tarefa neste problema é determinar se de fato é possível que todos os membros da comunidade estejam falando a verdade. Lembre que uma pessoa não pode ser amiga de si mesma, e duas pessoas não podem ser amigas várias vezes.",
        "titulo": "Popularidade no Facebook",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 105). A segunda linha possui N inteiros, ai (0 ≤ ai ≤ 105), separados por um espaço em branco, correspondendo ao número de amigos que a pessoa i diz ter na comunidade."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1974",
        "saida": "Se não é possível satisfazer as condições da Pikachu S. A., imprima uma linha contendo unicamente a carinha :[. Senão, imprima duas linhas: a primeira contendo unicamente a carinha :]; e a segunda contendo três valores, representando respectivamente o número de estagiários necessários, o número de funcionários efetivos e o custo mínimo necessário para restaurar a infraestrutura.",
        "descricao": "E esta foi a 3ạ Maratona de Programação Júnior da UFFS! Esperamos sinceramente que você tenha se divertido! Se porventura você não conseguiu resolver algum problema, discuta-o depois com seus colegas e professores, estude os conteúdos que você ainda não domina, e encare o problema novamente. Todos os problemas desta competição estarão disponíveis no URI Online Judge assim que possível. Se você nunca havia participado de uma Maratona de Programação antes e gostou, venha participar do Clube de Programação para se aperfeiçoar, aprender mais e treinar! Mas antes de dizermos adeus, temos ainda mais uma tarefa para você. O oeste catarinense está na escuridão total, pois um tornado devastou a região. Antes, a infraestrutura elétrica da região era maravilhosa, de modo que duas torres de energia eram conectadas diretamente por cabos de energia se e somente se entre essas torres existia uma estrada. O tornado não danificou as estradas, apenas as torres e cabos de energia. De todas as empresas que se propuseram a restaurar a infraestrutura elétrica da região, a que apresentou a melhor proposta foi a Pikachu S. A. Para começar os trabalhos, a Pikachu S. A. exigiu do Governo algumas informações. Se essas informações não satisfizerem algumas condições, a Pikachu S. A. rescindirá o contrato e o Governo terá de contratar uma empresa, para nossa tristeza. A saber, as condições exigidas pela Pikachu S. A. são: A empresa não construirá nenhuma torre nova, apenas restaurará todas as torres antigas. A empresa não conectará duas torres por cabos de energia se essas torres não eram antes conectadas. A empresa fará apenas o mínimo de conexões entre torres necessário para que as torres estejam todas interconectadas, direta ou indiretamente, e gastará o mínimo possível de metros de cabeamento. Cada torre que for restaurada precisará receber um funcionário da Pikachu S. A. para monitorar a torre diariamente. Este funcionário pode ser um funcionário efetivo ou um estagiário. Se os funcionários que duas torres receberem forem estagiários, então deve existir uma estrada conectando as duas torres diretamente. Se os funcionários que duas torres receberem forem efetivos, então não deve existir uma estrada conectando as duas torres diretamente. O número de funcionários efetivos deve ser o menor possível. Uma curiosidade acerca da infraestrutura antiga é que a cada torre havia sido atribuído um código binário, de modo que a conexão entre duas torres, se existisse, custasse, em metros de cabeamento, exatamente o comprimento do maior subcódigo binário comum aos códigos de ambas as torres. Por exemplo, se os códigos de duas torres eram respectivamente 000011 e 001100, o custo da conexão entre essas duas torres era, e continua sendo, 4.",
        "titulo": "Além da Escuridão",
        "entrada": "A primeira linha da entrada contém dois inteiros, N e M (2 ≤ N ≤ 103, 0 ≤ M ≤ 105), os quais representam respectivamente o número de torres e o número de conexões na infraestrutura antiga, sendo cada conexão descrita numa das M linhas seguintes por dois inteiros, i e j (1 ≤ i, j ≤ N), os quais identificam as torres que eram conectadas. Por fim, a i-ésima das N últimas linhas da entrada descreve o código binário, de comprimento positivo não maior que 100, da torre i."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2088",
        "saida": "Para cada caso de teste imprima a distância mínima que João percorrerá, com duas casas decimais.",
        "descricao": "Depois que João descobriu que estava com dengue, ele ficou muito irritado. Como nos últimos dias ele não saiu de casa, o mosquito que o picou só podia ser de algum foco de dengue perto de sua casa. Foi então quando ele teve uma ideia. Assim que estiver um pouco melhor, João irá acabar com todos os focos de mosquitos que existem por perto de sua casa. Para realizar essa tarefa ele conseguiu um mapa, que pode ser visto como um plano cartesiano, onde sua casa e cada foco possuem uma coordenada distinta. Como a dengue é uma doença que deixa o corpo bem debilitado, João necessita de sua ajuda nessa tarefa. João gostaria de saber qual a distância total mínima que ele gastará para sair de sua casa, visitar todos os focos de dengue exatamente uma vez e voltar para casa. Você consegue ajudar João em sua missão?",
        "titulo": "Combate à Dengue",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste terá um inteiro N (1 ≤ N ≤ 15),representando a quantidade de focos de mosquito no mapa. Segue uma linha contendo dois inteiros X e Y (−100 ≤ X, Y ≤ 100), representando a coordenada da casa de João. Em seguida terão N linhas, cada uma contendo dois inteiros X e Y (−100 ≤ X, Y ≤ 100), representando a coordenada de um foco de dengue. A entrada termina quando N = 0 e não deve ser processada."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1764",
        "saida": "Para cada caso de teste de entrada, seu programa deverá imprimir um único valor, indicando a soma de todas as distâncias ou rotas existentes no seu mapa.",
        "descricao": "Antes de Papai Noel começar a fazer as suas viagens de trenó pelo Brasil para entregar os presentes de Natal, ele solicitou que você o ajudasse a desenhar um mapa com todas as cidades que deverá visitar. A regra para desenhar este mapa é a seguinte: a soma de todas rotas (distâncias entre duas cidades) existentes no mapa deve ser a menor possível e deve-se poder chegar em qualquer cidade, independente de onde se esteja partindo. Noel não se importa de passar por uma determinada cidade mais de uma vez, contanto que ele utilize apenas as rotas desenhadas no mapa.",
        "titulo": "Itinerário do Papai Noel",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros, M (2 ≤ M < 40000) e N (1 ≤ N < 50000), que indicam respectivamente a quantidade de cidades e a quantidade de caminhos existentes ligando estas cidades. A entrada é terminada por M = N = 0. Seguem N conjuntos de três valores X (0 ≤ X), Y (Y < M) e Z (1 ≤ Z ≤ 999), especificando que há uma rota bidirecional entre X e Y com distância de Z kilômetros, sendo que X ≠ Ye a soma total de todas as rotas de cada mapa é menor do que 231."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1469",
        "saida": "Para cada instrução de pergunta seu programa deve imprimir uma linha contendo um único inteiro, a idade da pessoa mais jovem que gerencia (direta ou indiretamente) o empregado nomeado na pergunta. Se o empregado nomeado não possui um gerente, imprima o caractere ‘*’ (asterisco).",
        "descricao": "Todos conhecem Iks, a última moda em redes sociais, que fez tanto sucesso que competidores como Facebook e Google+ estão começando a ter dificuldades financeiras. Assim como muitas companhias “.com”, Iks surgiu em uma pequena garagem, mas hoje emprega milhares de pessoas no mundo todo. O sistema de gerência utilizado em Iks é bem diferente do padrão. Por exemplo, não há diretorias ou superintendências. No entanto, como é usual em outras companhias, há uma cadeia (ou melhor, várias cadeias) de comando: uma pessoa pode gerenciar outras pessoas, e pode ser gerenciada por outras pessoas. As figuras abaixo mostra a cadeia de comando para alguns empregados, junto com suas idades. Uma pessoa P1 pode gerenciar outra pessoa P2 diretamente (quando P1 é o superior imediato de P2) ou indiretamente (quando P1 gerencia diretamente uma pessoa P3 que gerencia P2 direta ou indiretamente). Por exemplo, na figura (a) acima, Alice gerencia David diretamente e Clara indiretamente. Uma pessoa não gerencia a si própria, nem direta nem indiretamente. Um folclore que apareceu em Wall Street é que Iks é tão bem sucedido porque em sua rede de comando um(a) gerente é sempre mais jovem do que as pessoas que ele(a) gerencia. Como podemos ver na figura acima, isso não é verdade. Mas esse folclore incentivou Iks a desenvolver uma ferramenta para analisar o seu sistema de gerenciamento, e estudar se tem alguma influência no sucesso da empresa. Você foi contratado para trabalhar nessa ferramenta. Dadas a descrição da cadeia de comando na Iks e as idades de seus empregados, escreva um programa que execute uma série de instruções. Instruções podem ser de dois tipos: trocas de gerência e perguntas. Uma instrução de troca de gerência faz dois empregados A e B trocarem suas posições na cadeia de comando. Como exemplo, a figura (b) acima mostra a cadeia de comando resultante quando David e George trocam suas respectivas posições na cadeia de comando. Uma instrução de pergunta identifica um empregado A e deseja saber a idade do mais jovem gerente (direto ou indireto) de A na cadeia de comando. Por exemplo, no cenário da figura (a) acima a idade do(a) gerente mais jovem de Clara é 18 anos; já no cenário da figura (b), a idade do(a) gerente mais jovem de Clara é 21 anos.",
        "titulo": "Chefe",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto de várias linhas. A primeira linha contém três inteiros N (1 ≤ N ≤ 500), M(0 ≤ M ≤ 60 × 103) e I(1 ≤ I ≤ 500), indicando respectivamente o número de empregados, o número de relações de gerência direta e o número de instruçõoes. Empregados são identificados por números de 1 a N. A segunda linha contém N inteiros Ki(1 ≤ Ki ≤ 100, para 1 ≤ i ≤ N), onde Ki indica a idade do empregado de número i. Cada uma das M linhas seguintes contém dois inteiros X e Y(1 ≤ X, Y ≤ N, X != Y) , indicando que X gerencia Y diretamente. Seguem-se I linhas, cada uma descrevendo uma instrução. Uma instruçãao de troca de gerência é descrita em uma linha contendo o identificador T seguido de dois inteiros A e B(1 ≤ A,B ≤ N), indicando os dois empregados que devem trocar seus lugares na cadeia de comando. Uma instrução de pergunta é descrita em uma linha contendo o identificador P seguido de um inteiro E(1 ≤ E ≤ N), indicando um empregado. A última instrução será sempre do tipo pergunta. O final da entrada é determinado por EOF (fim de arquivo)."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2073",
        "saida": "Para cada instância imprima uma linha contendo um único inteiro, o número máximo de itens que você pode comprar.",
        "descricao": "A sua equipe já está fazendo planos para a visita ao Egito. Um dos locais que querem conhecer é o famoso mercado do Cairo. Para economizar tempo, vocês decidiram que vão entrar pela porta no canto sudoeste do mercado e sair pela porta no canto nordeste. Além disso, vocês vão caminhar sempre em direção à saída, ou seja, só vão se deslocar para o norte ou para o leste. Os vendedores egípcios tem uma regra peculiar. Se você comprar algo de um deles, só poderá comprar novamente de um outro vendedor que seja mais velho. A punição por desrespeitar essa regra é perder uma mão. É claro que isso pode prejudicar sua equipe na final do ICPC. Por este motivo, você acha melhor seguir as tradições locais. Como não é nada elegante dar o mesmo tipo de lembrança para todos seus amigos, você decidiu que, além de seguir as regras do mercado, vai comprar no máximo uma lembrança de cada vendedor. Isto lhe ajudará a ter uma boa variedade de presentes. O mercado é bem organizado. Os vãos onde as barracas podem ser colocadas possuem a mesma altura e largura. Cada vão é identificado por uma coordenada (x,y) que indica a coluna e linha do mercado que ele se encontra. De uma vista aérea é possível perceber que todos os vãos estão organizados como um quadriculado. As barracas do mercado foram montadas apenas em vãos válidos (e respeitam rigorosamente as medidas do vão). Estando em uma barraca é possível ir para as barracas que ficam estritamente ao norte, ao leste e a nordeste. Sabendo a idade dos vendedores e a posição da barraca onde cada um trabalha, determine o número máximo de itens que você pode comprar.",
        "titulo": "Mercado do Cairo",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 100000), indicando o número de vendedores no mercado. Cada uma das próximas N linhas contém dois inteiros cada, xi e yi (1 ≤ xi, yi ≤ 1 000), indicando as coordenadas da barraca em que o i-ésimo vendedor trabalha. Os vendedores estão listados em ordem de idade, do mais novo para o mais velho. Dois ou mais vendedores podem dividir uma mesma barraca. Nesse caso você pode negociar (ou deixar de negociar) com eles em qualquer ordem. Ir para o norte significa aumentar o valor de y e ir para o leste significa aumentar o valor de x. Todas as barracas se encontram dentro do mercado."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1954",
        "saida": "Seu programa deve imprimir uma linha contendo um único número inteiro, o qual representa o número de caminhos evolucionários possíveis da espécie à qual pertence o indivíduo S para a espécie à qual pertence o indivíduo T. Como esse número pode ser muito grande, seu programa deve apenas imprimir o resto que esse número deixa quando dividido por 109 + 7.",
        "descricao": "— Já que a senhora é bióloga, poderia nos definir o conceito de ‘espécie’? — Senhora, senhora, volta aqui! Laura é uma bióloga muito interessada em Computação. Recentemente ela escreveu um programa que, dados os códigos genéticos de dois indivíduos A e B, decide se A é um possível pai genético de B, o que significa que não há nada nos códigos genéticos de ambos os indivíduos que nos permita afirmar com certeza que B não foi gerado por A. Note que, se A é um possível pai genético de B, isso não significa que B seja da mesma espécie que A, pois pode ter ocorrido uma mutação durante a geração de B. Naturalmente, dizemos que um indivíduo A é um possível ancestral genético de um indivíduo B se existe uma sequência de k indivíduos I1, I1, …, Ik tais que I1 = A, Ik = B e, para todo j ∈ {1, …, k - 1}, Ij é um possível pai genético de Ij + 1. Laura está estudando os fósseis encontrados mês passado em Chapecó para determinar, através dos códigos genéticos extraídos, as espécies que habitavam a região. Mas o conceito de ‘espécie’ é muito polêmico. Laura, que não quer viver situações como a da senhora da imagem acima, preferiu adotar a seguinte definição: dois indivíduos A e B pertencem à mesma espécie se e somente se A é um possível ancestral genético de B e B é um possível ancestral genético de A. O diagrama abaixo ilustra uma situação com 7 indivíduos fossilizados, em que um arco de um indivíduo A para um indivíduo B representa que A é um possível pai genético de B. No exemplo, podemos identificar 3 espécies: I, II e III. Dados as informações fornecidas pelo programa de Laura, ajude-a a calcular o número de caminhos evolucionários possíveis da espécie de um indíviduo S para a espécie de um indivíduo T. Um caminho evolucionário possível de uma espécie E1 para uma espécie Ek é uma sequência de k espécies E1, E2, …, Ek tal que, para todo j ∈ {1, …, k - 1}, existe algum indivíduo B da espécie Ij + 1 que tem um possível pai genético da espécie Ij.",
        "titulo": "Caminhos Evolucionários Possíveis",
        "entrada": "A primeira linha da entrada consiste de 4 inteiros, N, M, S e T (1 ≤ N ≤ 105, 0 ≤ M ≤ 106, 1 ≤ S, T ≤ N), sendo N o número de indivíduos fossilizados, designados pelos inteiros de 1 a N, cujos códigos genéticos foram obtidos por Laura. Cada uma das próximas M linhas consiste de 2 inteiros, A e B (1 ≤ A, B ≤ N), representando que o programa de Laura considera o indivíduo A um possível pai genético de B."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1194",
        "saida": "Para cada conjunto de entrada, você deve imprimir uma linha contendo o percurso posfixo da corrente árvore.",
        "descricao": "Um problema comum em estrutura de dados é determinar o percurso transversal de uma árvore binária. Há tres formas clássicas de fazer isto: Prefixa: Você deve visitar a raiz, sub-árvore esquerda e sub-árvore direita. Infixa: Você deve visitar a sub-árvore esquerda, a raiz e a sub-árvore direita. Posfixa: Você deve visitar a sub-árvore esquerda, a sub-árvore direita e a raiz. Veja a figura abaixo: O percurso prefixo, infixo e posfixo são, respectivamente ABCDEF, CBAEDF and CBEFDA. Neste problema, você deve computar a forma posfixa da árvore dados os percursos infixo e prefixo",
        "titulo": "Prefixa, Infixa e Posfixa",
        "entrada": "A primeira linha de entrada contém um número positivo C (C ≤ 2000), que indica o número de casos de teste. Seguem C linhas, uma para cada caso de teste. Cada caso de teste inicia com um número N (1 ≤ N ≤ 52), o número de nodos da árvore binária. Depois haverá duas strings S1 e S2 que descrevem o percurso prefixo e infixo da árvore. Os nodos da árvore são nomeados com diferentes caracteres dentro do intervalo a..z e A..Z. O valor de N, S1 e S2 são separados por um espaço em branco."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1525",
        "saida": "Para cada caso de teste deverá ser impressa uma linha, contendo a palavra “Sim” caso seja possível posicionar o personagem em uma das células da borda do mapa de tal forma que ele seja guiado até a célula de destino, fazendo no máximo K inversões de setas, ou “Nao” caso contrário.",
        "descricao": "Rafael gostava tanto de um jogo que jogava quando criança, que decidiu desenhar um mapa com as características do jogo e ver se conseguia completá-lo. O mapa consiste de N linhas e M colunas, que divide o mapa em uma grade de N * M células. Cada uma dessas células, com exceção da célula central, contém uma seta desenhada, que indica para uma de quatro direções – Esquerda, Cima, Direita ou Baixo. O objetivo do jogo é posicionar o personagem em alguma das células que constituem a borda do mapa, e fazer que o mesmo chegue até o centro do mapa, marcado com um x. As regras para se mover no jogo seguem a lógica das setas: O personagem só pode mover na direção que a seta aponta. Ou seja, se o personagem está na célula [x, y] (linha x, coluna y), e nesta célula há uma seta apontada para a direita, a única célula que ele poderá alcançar dali será a célula [x, y+1], caso a mesma esteja dentro dos limites do mapa (caso não esteja, ele sairá do mapa, e perde o jogo). Para facilitar, Rafael decidiu que ele poderia fazer K inversões de setas. Ao inverter uma seta, a mesma passa a apontar a direção oposta a qual ela apontava. Ou seja, se ela apontava para a Direita, ela apontará para a Esquerda, e vice-versa. O mesmo vale para Cima e Baixo. Rafael agora pediu sua ajuda: É possível posicionar o personagem em alguma borda do mapa, e fazer com que ele chegue até a célula central, fazendo no máximo K inversões de setas?",
        "titulo": "Gruntz",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros N, M e K (3 ≤ N, M < 100, 0 ≤ K ≤ 100, N e M são ímpares), representando, respectivamente, a quantidade de linhas e a quantidades de colunas do mapa, e o número máximo de inversões permitidas. A seguir haverá N linhas, cada uma contendo M caracteres, que representarão o mapa que Rafael desenhou. O caractere da linha i e coluna j indica que na célula [i, j] do mapa há: '>' – Uma seta apontando para a Direita. '<' – Uma seta apontando para a Esquerda. '^' – Uma seta apontando para a Cima. 'v' – Uma seta apontando para a Baixo. 'x' – A célula de destino (a qual estará sempre no centro do mapa). O último caso de teste é identificado quando N = M = K = 0, o qual não deve ser processado."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1671",
        "saida": "Para cada caso de teste especificado pela saída n, uma linha que contém uma sequência de 10n + n - 1 dígitos que contém cada sequência de n dígitos exatamente uma vez.",
        "descricao": "KEY Inc., empresa líder em hardware de segurança, desenvolveu um novo tipo de seguro. Para desbloqueá-lo, você não precisa de uma chave, mas é necessário que você digite o código de n dígitos correto em um teclado (como se isso fosse algo novo!). Existem vários modelos disponíveis, de cofres de brinquedo para crianças (com um código de 2 dígitos) para a versão militar (com um código de 6 dígitos). O cofre se abrirá assim que o último dígito do código correto for digitado. Não há nenhuma tecla \"enter\". Quando você entra com mais de n dígitos, somente os n últimos dígitos são significativos. Por exemplo (na versão de 4 dígitos), se o código correto é 4567, e você pretende entrar com a sequência de dígitos 1234567890, a porta será aberta assim que você pressionar a tecla 7. O software para criar esse efeito é bastante simples. Na versão com n dígitos do cofre a chave está sempre em um dis 10n-1 estados internos. O estado atual do seguro representa simplesmente os últimos n-1 dígitos que foram inseridos. Um desses estados (no exemplo acima, o estado 456) é marcado como o estado desbloqueado. Se o cofre estiver no estado desbloqueado e, em seguida, a tecla correta (no exemplo acima, 7) é pressionado, a porta é aberta. Caso contrário, o estado muda para o novo estado correspondente. Por exemplo, se o seguro está em estado de 456 e, em seguida, você pressionar 8, o seguro entra em estado 568. Uma estratégia trivial para abrir o cofre é introduzir todos os códigos possíveis, um após o outro. No pior dos casos, no entanto, isto vai exigir n * 10n teclas. Ao escolher uma sequência boa de dígitos, é possível abrir o cofre em, no máximo, 10n + n - 1 teclas. Tudo que você tem a fazer é encontrar uma sequência de dígitos que contém todas as sequência s de n dígitos exatamente uma vez. KEY Inc. afirma que para a versão militar (n = 6) os computadores mais rápidos disponíveis hoje precisaria de bilhões de anos para encontrar uma tal sequência - mas, aparentemente, eles não sabem do que alguns programadores são capazes.",
        "titulo": "Código",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é especificado por um número inteiro n. Você pode assumir que 1 ≤ n ≤ 6. O último caso de teste é seguido por um zero."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1506",
        "saida": "Imprima T linhas, uma para cada caso de teste. Se Rabito tem uma estratégia que irá garantir a sua vitório imprima \"Yes\", caso contrário imprima \"No\".",
        "descricao": "Rabito e Rayito estão jogando um jogo legal. Eles começam com um grafo conexo bidirecional com pesos (todos os pesos são positivos) e um conjunto de K ossos colocados em alguns dos vértices. Eles começam se revezando com Rabito jogando por primeiro. O jogo consiste em deslocar os ossos através do grafo até o vértice 1. Em sua vez, um dos jogadores pega um subconjunto de pelo menos 1 e no máximo P dos ossos (que não atingiram o vértice 1) e move estes ossos através de uma ou mais das arestas do grafo (os movimentos dos ossos são independentes uns do outros) sujeito a esta condição: ele pode usar uma aresta específica para um osso se, eventualmente, o osso atingir o vértice 1 usando o mínimo possível de tempo (leva A unidades de tempo para mover um osso através de uma aresta de peso A) e se a aresta faz com que este osso, eventualmente, atinja o vértice 1 com a maior quantidade de arestas. Há um osso enorme esperando o vencedor do jogo, assim que sua tarefa é decidir qual dos dois cães vai triunfar neste jogo e ter uma boa refeição (assumindo que ambos os cães jogam com uma estratégia ideal). O perdedor do jogo é, obviamente, o cão que não se pode fazer um movimento.",
        "titulo": "Rabito e Bones",
        "entrada": "A primeira linha contém um único inteiro T (T <= 100) que representa a quantidade de casos de teste descritas a seguir. Um caso de teste inicia com uma linha contendo dois inteiros N, M (1 <= N <= 100, 1 <= M <= 2000) que denotam o número de vértices e arestas do grafo, em seguida há M linhas, cada uma com três inteiros u, v, w (1 <= u, v <= N) (0 < w <= 1000000) que representam os vértices da n-ésima aresta e seus pesos. Segue uma linha com dois inteiros K (0 < K <= 1000) e P (0 < P) denotando o número de ossos inicialmente colocados no grafo e o parâmetro P descrito na expecificação do problema. Finalmente uma única linha contendo K inteiros descreventos as posições iniciais dos K ossos."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1749",
        "saida": "Apresente uma linha com um inteiro que representa o número mínimo de pontos que um subconjunto pode ter em uma boa separação.",
        "descricao": "A galáxia de Andrômeda está prevista para colidir com a nossa Via Láctea, em cerca de 3,8 bilhões de anos. A colisão será, provavelmente, uma fusão das duas galáxias, sem duas estrelas, na verdade, colidindo. Isso porque a distância entre as estrelas em ambas as galáxias é tão grande. Professor Andrew está construindo um modelo computacional para prever os possíveis resultados da colisão e precisa de sua ajuda! Um conjunto de pontos nos dois plano dimensional é dada, representando estrelas em uma determinada região das galáxias já incorporadas. Ele não sabe quais estrelas vieram originalmente de qual galáxia; mas ele sabe que, para esta região, se duas estrelas vieram da mesma galáxia, então a distância entre elas é maior do que 5 anos-luz. Uma vez que cada estrela nesta região veio ou de Andrômeda ou da Via Láctea, o professor também sabe que um dado conjunto de pontos pode ser separado em dois subconjuntos disjuntos, um compreendendo as estrelas de Andromeda e outro as estrelas da Via Láctea, ambos subconjuntos com a propriedade de que a distância mínima entre dois pontos no subconjunto é maior do que 5 anos-luz. Ele chama isso de uma boa separação, mas a má notícia é que pode haver diversas boas separações. Contudo, entre todos as possíveis boas separações existe um número mínimo de estrelas que um subconjunto deve conter, e este é o número que o seu programa tem de calcular. Por exemplo, a figura ilustra um dado conjunto de seis pontos. Professor Andrew não pode dizer que as estrelas vieram de Andromeda, mas note que há quatro possíveis boas separações: {{1, 2, 4, 5}, {3, 6}}; {{1, 2, 3, 4}, {5, 6}}; {{1, 4, 5}, {2, 3, 6}}; {{1, 3, 4}, {2, 5, 6}}. Portanto, pelo menos duas estrelas devem ter vindo de Andrômeda, uma vez que este é o número mínimo de pontos que um subconjunto pode ter em uma boa separação.",
        "titulo": "Colisão Galática",
        "entrada": "A primeira linha contém um número inteiro N (1 ≤ N ≤ 5 × 104) que representa o número de pontos no conjunto. Cada uma das próximas N linhas descreve um ponto diferente, com dois inteiros X e Y (1 ≤ X, Y ≤ 5 × 105), indicando as suas coordenadas, em anos-luz. Não há pontos coincidentes, e o conjunto admite pelo menos uma boa separação."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1757",
        "saida": "Para cada caso de teste imprima uma única linha contendo o inteiro que representa a menor quantidade de rotas visíveis que Donkey deverá usar.",
        "descricao": "Donkey Kong tem alguns assuntos pendentes a resolver ao redor do país e como está com muita pressa, optou por se deslocar de um local à outro através do SUTVB (Sistema Unificado de Transporte Via Barril). Cada uma das cidades possui um único barril que consegue disparar para o barril de qualquer outra cidade que o \"passageiro\" desejar ir. Donkey quer fazer uma viagem discreta e pediu sua ajuda para encontrar um conjunto de rotas que minimize a quantidade de disparos em que ele é visto. O conjunto de rotas que Donkey deseja encontrar depende do posicionamento das nuvens. Como mostra a figura acima, os barris ficam imediatamente acima das nuvens. O plano de Donkey é utilizar as nuvens para esconder seu trajeto. Pra facilitar seu trabalho, Donkey te emprestou um radar que mostra quais rotas podem ser visualizadas do solo em um dado momento. Sua tarefa é dizer a Donkey qual a menor quantidade de rotas visíveis que ele precisará usar de modo que consiga chegar a qualquer cidade que deseje. Cada rota é considerada apenas uma vez na contagem, independente da direção em que for usada. Em outras palavras, Se a rota A-B é visível e ele usar 10 vezes essa rota, só será contabilizado como 1 rota visível.",
        "titulo": "Viagem Barril",
        "entrada": "A primeira linha da entrada conterá um inteiro T (1 ≤ T ≤ 100) indicando o número de casos de teste. A primeira linha de cada caso de teste contém os inteiros N (1 ≤ N ≤ 100) e V (0 ≤ V < N2/2), a quantidade de cidades e a quantidades de rotas visíveis do solo, respectivamente. As próximas V linhas conterão os inteiros Ai e Bi (Ai ≠ Bi; 0 ≤ Ai, Bi < N) , indicando que a rota entre os barris das cidades Ai e Bi​ encontra-se visível do solo. Em nenhum caso de teste o par Ai, Bi aparecerá mais que uma vez."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1733",
        "saida": "Para cada caso de teste, você deve imprimir na primeira linha, “Test Case #.”, indicando o número do caso de teste. Na linha seguinte você deve imprimir “Vladimir needs # litre(s) of blood.” indicando quantos litros de sangue ele necessita para realizar a(s) rota(s) ou “There is no route Vladimir can take.” caso não exista rota(s) válida(s).",
        "descricao": "Vladimir tem a pele branca, dentes muito longos e tem 600 anos, mas isso não é problema, porque Vladimir é um vampiro. Vladimir nunca teve qualquer problema por ser um vampiro. Na verdade, ele é um médico bem sucedido no turno da noite, e tem feito muitos amigos entre os colegas. Ele tem um truque muito impressionante, que sempre mostra em jantares. Ele pode dizer o grupo sanguíneo de uma amostra de sangue apenas pelo seu gosto. Vladimir adora viajar, mas por ser um vampiro, ele passa por três problemas sempre que vai viajar: Primeiro, ele só pode viajar de trem, porque ele tem que levar seu caixão com ele. Mas viaja sempre de primeira classe, pois tem investido muito dinheiro em ações de longo prazo. Segundo, ele só pode viajar do anoitecer até o amanhecer, ou seja, das 6 da noite até às 6 da manhã. Durante o dia, ele tem que ficar dentro da estação de trem. Terceiro, ele tem que ter algo para comer com ele. Ele precisa de um litro de sangue por dia, que ele bebe ao meio-dia, 12:00, dentro de seu caixão. Você deve ajudar Vladimir encontrar rotas mais curtas entre duas cidades, para que ele possa viajar com uma quantidade mínima de sangue, pois do contrário, as pessoas podem acabar fazendo perguntas, como, “O que você vai fazer com todo esse sangue?”.",
        "titulo": "Vladimir o Vampiro",
        "entrada": "A primeira linha da entrada contém um único número que diz a quantidade de casos de testes. A segunda linha começa com um único número que diz quantas especificações de rotas haverá seguir, ou seja, quantas conexões, válidas ou não, serão feitas até o seu destino. As linhas seguintes indicam as rotas (conexões entre duas cidades). Cada rota consiste nos nomes de duas cidades, a hora de partida e tempo total de viagem. Os tempos são em horas. Note que, Vladimir não pode usar as rotas que partem antes das 18h ou cheguem depois das 6h. Haverá no máximo 100 cidades, e menos do que 1000 conexões. Nenhuma conexão demora menos que 1 hora ou mais que 24 horas. Lembre-se, Vladimir tem no máximo 12 horas para realizar cada trajetoria, entre o anoitecer e o amanhecer. Todos os nomes de cidades devem ser menores que 32 caracteres. A última linha de cada caso de teste contém dois nomes de cidades. O primeiro nome é a cidade de partida de Vladimir, o segundo é o nome do destino."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1085",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir um único inteiro, o comprimento da menor seqüência que satisfaça as restrições de Joãozinho, ou impossivel (em minúsculas, sem acento) caso não seja possível.",
        "descricao": "Joãozinho e Mariazinha são dois irmãos que estão muito empolgados com suas aulas de idiomas, cada um está fazendo vários diferentes cursinhos. Ao chegar em casa comentam sobre gramática, vocabulário, cultura dos países etc. Numa dessas conversas perceberam que algumas palavras são comuns a mais de um idioma, mesmo que não necessariamente tenham o mesmo significado. Por exemplo, “amigo” existe em português e espanhol e tem o mesmo significado, enquanto que “date” é uma palavra comum entre francês e inglês mas que pode ter significados diferentes, uma vez que “date” também se refere a um encontro em inglês, além de “data” de calendário. Já “red” em espanhol se refere a uma rede, enquanto que em inglês se refere à cor vermelha. Outro exemplo seria “actual” que, em inglês significa algo real e, em espanhol, tem o significado de presente, atual (como em português). Empolgados com essas descobertas, resolveram escrever num caderno todas as palavras em comum que conseguiram pensar, associando cada uma a um par de idiomas. Observador como é, Joãozinho propˆos um desafio a Mariazinha: dados um idioma de origem e um de destino, escrever uma série de palavras sendo que a primeira necessariamente deveria pertencer ao idioma de origem e a última ao de destino. Duas palavras adjacentes nessa seqüência deveriam necessariamente pertencer a um mesmo idioma. Por exemplo, se o idioma de origem fosse português e o de destino francês, Mariazinha poderia escrever a seqüência amigo actual date (português/espanhol, espanhol/inglês, inglês/francês). Para a surpresa de Joãozinho, Mariazinha conseguiu resolver o problema com muita facilidade. Irritado com o sucesso de sua irmã, ele resolveu complicar ainda mais o problema com duas restrições: Mariazinha deve encontrar a solução que tenha o menor comprimento da seqüência total não contando os espaços entre as palavras e duas palavras consecutivas não podem ter a mesma letra inicial. Sendo assim, a solução anterior passa a ser inválida, pois “amigo” e “actual” têm a mesma letra inicial. é possível, porém, encontrar outra solução, que no caso seria amigo red date, cujo comprimento total é 12. Joãozinho fez uma extensa pesquisa na internet e compilou uma enorme lista de palavras e desafiou Mariazinha a resolver o problema. Como é possível que haja mais de uma solução, ele pediu para que ela apenas respondesse o comprimento da seqüência encontrada dadas as restrições ou se não há solução possível. Você seria capaz de ajudar Mariazinha?",
        "titulo": "Babel",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro M (1 ≤ M ≤ 2000), representando o total de palavras compiladas por Joãozinho. A segunda linha contém duas cadeias de caracteres distintas O e D, separadas por um espaço em branco, indicando os idiomas de origem e destino respectivamente. Cada uma das M linhas seguintes contém três cadeias de caracteres I1, I2 e P, separadas por um espaço em branco, representando dois idiomas e uma palavra comum entre ambos (I1 e I2 são sempre diferentes). Todas as cadeias de caracteres terão tamanho mínimo 1 e máximo 50 e conterão apenas letras minúsculas. Um mesmo par de idiomas pode ter várias palavras diferentes associadas a ele, porém uma mesma palavra P nunca será repetida. O final da entrada é indicado por uma linha que contém apenas um zero."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1328",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha, contendo um inteiro representando o valor a ser deduzido do cartão GoEasy do viajante.",
        "descricao": "O prefeito de uma cidade pretende introduzir um novo sistema de transporte para simplificar a vida de seus habitantes. Isso será feito através da utilização de um cartão de débito, que o prefeito nomeou \"GoEasy\". Há dois meios de transporte na cidade: trens e ônibus. O sistema de trem é \"baseado em zonas\", enquanto o sistema de ônibus é \"baseado em jornadas\". A tarifa para a viagem é calculada como segue: Primeiramente há uma taxa de duas unidades monetárias para entrar no sistema de transporte, independentemente do meio inicial de transporte. Quando viajar de trem um cliente paga quatro unidades monetárias para cada mudança de zona. Ao viajar de ônibus a cliente paga uma unidade monetária a cada vez que ele/ela embarca num ônibus. Um mapa do sistema de transporte irá proporcionar informações sobre as estações pertencentes a cada zona, e a seqüência de estações para cada itinerário de ônibus e trem. Ônibus e trens se movem em ambas as direções em cada itinerário, e nenhum trem ou ônibus passa pela mesma estação duas vezes durante uma única viagem através de um itinerário. É sempre possível ir de qualquer estação a qualquer outra estação usando trens e/ou ônibus. As regras para as tarifas de computação são rígidas: se durante uma viagem de trem um cliente entra em uma determinada zona duas vezes, ele/ela é cobrado(a) duas vezes, da mesma forma, se durante uma viagem de ônibus o cliente utiliza duas vezes o ônibus para o mesmo itinerário, ele/ela é cobrado(a) duas vezes. ​ No mapa do transporte acima um cliente pode viajar da estação 2 para a estação 4 pagando apenas duas unidades monetárias, usando a linha T1, uma vez que elas estão na mesma zona. Mas se o cliente precisa ir da estação 2 à 5, então o melhor é tomar o ônibus B3 para a estação 10 e, em seguida, tomar o ônibus B2 para a estação 5, pagando um total de quatro unidades monetárias. Ao invés de rastrear toda a viagem de cada passageiro, a idéia do prefeito é que máquinas sejam colocadas em todas as estações, e os viajantes devem passar seu cartão pessoal GoEasy apenas no começo e término de toda a viagem. Uma vez que todas as máquinas são interligadas em rede, com base na saída e entrada do sistema de estações, pode-se calcular o custo mínimo possível para a viagem, e qual o valor será cobrado do cartão de débito do viajante. Tudo o que falta é um sistema de computador para fazer os cálculos para a tarifa a ser deduzida. Assim, dado o mapa do sistema de transporte na cidade, você deve escrever um programa para calcular a tarifa mínima que o cliente deve pagar para viajar entre duas paradas/estações dadas.",
        "titulo": "Vá com Calma",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros Z e S, que indicam, respectivamente, o número de zonas (1 ≤ Z ≤ 30) e o número de estações de trem/ônibus na cidade (1 ≤ S ≤ 100). Cada estação tem um único número de identificação variando de 1 a S, e cada estação pertence exatamente a uma zona. Cada uma das seguintes Z linhas descreve as centrais pertencentes a uma zona. A descrição de uma zona começa com um K inteiro que indica o número de estações (1 ≤ K ≤ S) na zona, seguido de K inteiros representando as estações na zona. Depois disso vem uma linha com dois números inteiros T e B, representando, respectivamente, o número de itinerários de trem (1 ≤ T ≤ 50) e o número de itinerários de ônibus (1 ≤ B ≤ 50). Em seguida, vem T linhas descrevendo itinerários de trem, seguido por B linhas descrevendo itinerários de ônibus. A descrição de cada itinerário é composto de uma linha contendo L um inteiro que indica o número de estações (2 ≤ L ≤ S) no itinerário, seguido por L inteiros especificando a seqüência de estações no itinerário. Finalmente, vem uma linha com dois inteiros X e Y (1 ≤ X ≤ S, 1 ≤ Y ≤ S e X ≠ Y), especificando que o cliente viajou da estação X para a estaçãoY. O final da entrada é indicado por Z = S = 0."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2085",
        "saida": "Imprima uma única linha contendo um número inteiro, que representa o nível máximo de alternativas para um caminho da casa de Chapeuzinho Vermelho para a casa de sua avó.",
        "descricao": "Era uma vez uma menina muito alegre, que foi chamada de Chapeuzinho Vermelho, porque ela sempre usava um capuz vermelho. Chapeuzinho Vermelho gostava muito de passeios na floresta, em que colhia frutos em sua pequena cesta para oferecê-los a sua avó, que era conhecida por preparar as mais deliciosas tortas de toda a região. No entanto, Chapeuzinho Vermelho definitivamente não gostava dos perigos da floresta, em particular o Lobo Mal, que estava sempre com fome e esperando. Um dia, Chapeuzinho Vermelho decide ir de sua casa até a de sua avó, coletando frutos no caminho e tentando fazer com que sua viagem da forma mais segura possível. A casa de Chapeuzinho Vermelho está em uma clareira no ponto mais ocidental do bosque, a casa de sua avó está em outra clareira no ponto mais oriental, e no interior da floresta entre elas há algumas outras clareiras com árvores de fruta. As madeiras são muito densas, por isso a única maneira de passar por eles será usando os caminhos entre as clareiras, que felizmente Chapeuzinho Vermelho conhece muito bem. Para não se perder, Chapeuzinho Vermelho sempre se move através de caminhos que ira levá-la para um ponto estritamente para o leste do ponto onde ela está. Para não ser pega pelo lobo, Chapeuzinho Vermelho considera essencial evitar uma emboscada, e por isso ela sempre tem em mente o número de diferentes caminhos que a levam de sua posição atual para a casa de sua avó. Um caminho na floresta é uma sequência de clareiras ordenadas de oeste para leste, de tal forma que cada clareira está conectada com a próxima por uma via. Um caminho para a casa da avó de Chapeuzinho Vermelho é simplesmente um caminho cujo ultima clareira contem a casa da avó. Para cada clareira, seu nível de alternativas é o número de caminhos que vão dele para a casa da avó de Chapeuzinho Vermelho. Por sua vez, o nível de alternativas de um caminho é a soma dos níveis de alternativas de todas as clareiras que compõem esse caminho. Para não ser capturada pelo lobo, Chapeuzinho Vermelho quer encontrar o caminho com um nível máximo de alternativas, a partir de sua casa e terminar na casa de sua avó. Você pode ajudá-la?",
        "titulo": "Chapeuzinho Vermelho",
        "entrada": "A primeira linha contém dois números inteiros N e S, que indicam, respectivamente, o número de clareiras e o número de caminhos na floresta (3 ≤ n ≤ 3 × 104 e 2 ≤ S ≤ 105). As clareiras são identificadas por diferentes números inteiros entre 1 e N, e são ordenadas de oeste para leste, de modo que se 1 ≤ i < j ≤ N, então a clareira i está a oeste da clareira j. A casa da Chapeuzinho Vermelho é na clareira 1, enquanto a casa de sua avó está na clareira N. Cada uma das S seguintes linhas descrevem um caminho utilizando dois números inteiros I e J, que indicam que existe um caminho entre a clareira I e J (1 ≤ I < J ≤ N). Há pelo menos um caminho da casa de Chapeuzinho Vermelho para a casa de sua avó, e o nível máximo de alternativas entre o conjunto de todos esses caminhos não é maior do que 1018."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "2103",
        "saida": "Para cada instância imprima a soma dos comprimentos dos caminhos que ligam todos os pares (não-ordenados) de esculturas. A resposta dada deve ser módulo 1300031.",
        "descricao": "Harbin é uma cidade organizada, mas construída de forma bastante econômica. Todas as ruas são de mão dupla, e é possível ir de qualquer ponto da cidade a qualquer outro, sempre passando apenas por ruas asfaltadas, mas não existem dois caminhos asfaltados diferentes ligando quaisquer dois pontos da cidade. O prefeito responsável pelo asfaltamento das ruas diz ter aplicado inclusive um algoritmo de um certo holandês, mas nunca ninguém entendeu o nome do algoritmo para poder verificar se ele de fato dizia a verdade. Na época do festival das estátuas de gelo de Harbin são espalhadas em vários pontos da cidade, e, os turistas são convidados a percorrer as ruas asfaltadas da cidade de forma a visitar todas elas. Sempre pensando na economia, o prefeito deseja saber qual é o comprimento total, em quilômetros, dos caminhos que ligam todos os pares de esculturas (cada par deve ser contado uma só vez, ou seja, se você já contou o caminho de A até B, não deve contar o caminho de B até A ). Sua tarefa neste problema é, dadas as posições das estátuas e os comprimentos das ruas asfaltadas que ligam as estátuas, determinar este comprimento total.",
        "titulo": "Harbin é Muita Grana!",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 10000) representando o número de estátuas. As estátuas são enumeradas de 1 a N. Cada uma das N−1 linha seguintes contém três inteiros A, B e C (1 ≤ A, B ≤ N, 1 ≤ C ≤ 50), indicando que a rua asfaltada que liga as estátuas A e B tem comprimento C."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1850",
        "saida": "Imprima uma linha contendo um único inteiro, o qual deve representar o tempo mínimo, em segundos, de que Arya precisa para deixar o labirinto. Se não é possível Arya deixar o labirinto, imprima uma linha contendo dois caracteres - (hífen), representando os olhos cerrados com que Arya precisará conviver até deixar de ser Arya.",
        "descricao": "Nunca tome uma das faces da Casa do Preto e Branco se você não é ‘Ninguém’, ainda que seja para matar Meryn Trant, ou você ficará cego, além de receber várias outras punições. Talvez você veja você mesmo se tornar ‘Ninguém’. Talvez seja isto que esteja acontecendo com Arya. Ou não. Fato é que agora ela está cega e foi colocada num labirinto cheio de portas trancadas. Você pode ajudá-la? As fechaduras das portas presentes no labirinto onde está Arya são de 7 tipos: A, B, C, D, E, F e G. Há também algumas cópias de chaves espalhadas pelo labirinto, as quais podem ser dos tipos a, b, c, d, e, f ou g. Uma chave do tipo a abre uma porta do tipo A, uma chave do tipo b abre uma porta do tipo B etc. É claro que, uma vez que Arya tenha aberto uma porta com uma chave, a porta permanece aberta, e Arya pode levar a chave consigo para abrir tantas portas quantas quiser daquele tipo. No labirinto há exatamente uma saída: um buraco no chão através do qual Arya pode entrar no túnel que a conduzirá em segurança à saída da Casa do Preto e Branco.",
        "titulo": "O Labirinto de Ninguém",
        "entrada": "A entrada representa o labirinto e é composta por no máximo 100 linhas com no máximo 100 caracteres diferentes de fim de linha cada, e o número de caracteres por linha é sempre o mesmo. A posição onde Arya está é identificada pelo caractere @, a saída pelo caractere *, as paredes do labirinto são identificadas pelo caractere #, as portas por caracteres no conjunto {A, …, G}, as chaves por caracteres no conjunto {a, …, g}, e as demais posições livres pelo caractere . (ponto). O total de caracteres no labirinto diferentes de # e de . é no máximo 100, e há exatamente um caractere * e um caractere @. Arya sempre gasta 1 segundo para se mover de uma posição a outra, e só se move na horizontal ou na vertical, pois tem medo de bater o dedinho na quina de uma parede, já que as paredes são quadradas. A entrada termina em fim de arquivo."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2079",
        "saida": "Para cada instância imprima uma inteiro indicando o número máximo de bases que a Cruz Vermelha consegue construir levando-se em consideração as restrições descritas anteriormente.",
        "descricao": "O Comitê Internacional da Cruz Vermelha, organização sem fins lucrativos cujo objetivo é defender e amparar as vítimas de guerras (ou melhor, vítimas do capital) ou catástrofes naturais, ganhou os prêmios Nobel de 1917, 1945 e 1963 pelo seu importantíssimo trabalho. Como é de se imaginar, a Cruz Vermelha sempre teve problemas de locomoção no meio da guerra. Muitas ligações (estradas, ferrovias, etc.) entre cidades de países em guerra podem ser destruídas por bombardeios ou dominadas por tiranos. O departamento de inteligência da Cruz Vermelha está empenhado em criar um programa de computador que auxilie as operações da Cruz Vermelha no futuro. A ideia é, dado um mapa da região que será ajudada, determinar em quais cidades devem ser feitas as bases da Cruz Vermelha. Inicialmente, o Departamento está interessado em testar a primeira versão do programa em cidades com as seguintes características: (a) sempre existe um caminho entre duas cidades que passa por uma ou mais ligações; (b) não existem dois caminhos diferentes entre duas cidades quaisquer. Apesar dos recursos da Cruz Vermelha geralmente serem limitados, eles querem escolher o maior número possível de bases, e garantir que ou existe uma base na cidade ou existe uma base em uma cidade vizinha, com a restrição adicional de que não é permitido criar bases em duas cidades vizinhas. Esta última restrição é dada pelo fato de que se estivesse em período de guerra, a Cruz Vermelha, como sabemos deve ter livre acesso nas cidades, e com isso pode surgir a suspeita de espionagem, o que pode comprometer o objetivo principal da organização. Sua tarefa é escrever a primeira versão do programa que o Departamento quer testar.",
        "titulo": "Produto de Guerra",
        "entrada": "A primeira linha de um caso de teste possui um inteiro T que indica o número de instâncias seguintes. A primeira linha de cada instância possui um inteiro N (1 ≤ N ≤ 6000) indicando o número de cidades do mapa. As cidades são identificadas por 1, 2, ..., N. As próximas N-1 linhas possuem dois inteiros u e v (1 ≤ u, v ≤ N, u ≠ v) que indicam uma ligação entre as cidades u e v (considere que tais ligações permitem acesso de u até v e de v até u)."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1713",
        "saida": "Seu programa deve produzir uma única linha, contendo um único inteiro, que deve ser igual a r módulo 104 , onde r é o número de sequências distintas de L botões que levam o usuário da nave S para a nave T.",
        "descricao": "A Confederação Galática instalou um novo sistema de teletransporte em suas naves espaciais. Cada nave recebeu uma cabine de teletransporte, na qual há um painel com quatro botões. Cada botão é rotulado com uma letra diferente A, B, C ou D e com um número que indica a nave destino para a qual o usuário será transportado, instantaneamente, se o respectivo botão for pressionado (como todos sabem, as naves da Confederação são identificadas por inteiros de 1 a N ). Para usar o sistema, o usuário deve adquirir um bilhete para cada viagem que deseja realizar (uma viagem corresponde a pressionar um botão). Note que como o número botões no painel é pequeno comparado com o número de naves da Confederação, pode ser necessário que o usuário tenha que comprar um bilhete múltiplo de L viagens para ir de uma dada nave S para uma outra nave T. Por exemplo, para as naves da figura abaixo, se o usuário está na cabine de teletransporte da nave 3 e pressiona o botão B ele é transportado para a nave 2. Se ele tem um bilhete múltiplo e pressiona novamente o botão B ele é então transportado para a nave 1. Sua tarefa neste problema é, dados a nave de partida S, a nave de chegada T e o número de viagens L do bilhete, determinar quantas sequências distintas de L botôes levam o usuário da nave S para a nave T . Por exemplo, para as naves da figura acima, existem quatro sequências distintas de L = 2 botôes que levam um usuário da nave S = 3 para a nave T = 1: CD, DA, AB, e BB.",
        "titulo": "Teletransporte",
        "entrada": "A primeira linha da entrada contém dois inteiros N (1 ≤ N ≤ 100) e L (0 ≤ L < 230 ), indicando respectivamente o número de naves e o número de viagens do bilhete. A segunda linha da entrada contém dois inteiros S e T (1 ≤ S, T ≤ N ), indicando respectivamente a nave de partida e a nave de chegada. Cada uma das N linhas seguintes descreve o painel da cabine de teletransporte de uma nave. A i-ésima dessas linhas, 1 ≤ i ≤ N , contém quatro inteiros A, B, C e D (1 ≤ A, B, C, D ≤ N ), que representam os números escritos nos quatro bot ̃oes da cabine de teletransporte da nave de número i."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1384",
        "saida": "Para cada caso de entrada, seu programa deve produzir uma linha da saída, contendo o mínimo de calorias consumidas por Sr. Sapo para ir de sua casa até a de Srta. Toad. Se for impossível que ele chegue até a casa dela, seu programa deve imprimir \"impossible\" (impossível).",
        "descricao": "O Sr. Sapo mora num pântano com formato de grade retangular, composto por quadrados de mesmo tamanho, tais que alguns são secos e outros molhados. Sr. Sapo mora num quadrado seco e só pode pular de um quadrado seco para outro quando vai passear pelo pântano. Ele quer visitar sua namorada, Srta. Toad, que também mora num quadrado seco no mesmo pântano. Mas Sr. Sapo é preguiçoso, e quer gastar o mínimo de energia pulando até a casa dela. Ele sabe a quantidade de energia que ele gasta em qualquer um de seus pulos. Para cada pulo único, Sr. Sapo sempre usa a figura a seguir para determinar quais são os possíveis quadrados para os quais ele pode pular da posição em que ele se encontra (o quadrado marcado com F), e a energia correspondente gasta nos pulos, em calorias. Qualquer outro quadrado não é alcançável por Sr. Sapo dessa posição com um único pulo. Seu trabalho é determinar qual é a mínima quantidade de energia que o Sr. Sapo tem que gastar para ir da sua casa à casa da Srta. Toad.",
        "titulo": "Sapo Preguiçoso",
        "entrada": "A entrada possui vários casos de teste. A primeira linha de um caso de teste contém dois inteiros, C e R, indicando o número de colunas e o mímero de linhas do pântano (1 ≤ C, R ≤ 1000). A segunda linha de um caso de teste contém quatro inteiros Cf, Rf, Ct e Rt, onde (Cf, Rf) indica o local da casa do Sr. Sapo e (Ct, Rt) indica o local da casa de Srta. Toad (1 ≤ Cf,Ct ≤ C; 1 ≤ Rf,Rt ≤ R). A terceira linha de um caso de teste contem um inteiro W (0 ≤ W ≤ 1000) indicando o número de lugares molhados no pântano. Cada uma das W linhas seguintes contêm quatro inteiros C1, R1, C2 e R2 (1 ≤ C1 ≤ C2 ≤ C; 1 ≤ R1 ≤ R2 ≤ R), descrevendo um espaço retangular molhado compreendendo os qudrados que possuem coordenadas (x,y) tais que C1 ≤ x ≤ C2 e R1 ≤ y ≤ R2. O final da entrada é indicado por C = R = 0."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1562",
        "saida": "Para cada teste, a saída é composta por uma linha. Caso seja impossível formar as duplas do jeito que a professora quer, imprima \"IMPOSSIBLE\". Caso haja solução, imprima em ordem os parceiros de cada aluno (o parceiro do aluno 1, do aluno 2, assim por diante). Caso haja mais de uma solução, deve se priorizar o desejo dos alunos de menor índice, ou seja, sempre que possível deve-se atender o desejo do aluno 1, depois tentar atender o desejo do aluno 2, e assim por diante. Lembre-se que o problema pede para formar duplas, se o parceiro do aluno X é igual a Y, o parceiro do aluno Y deve ser igual a X. No último caso de entrada do exemplo, os pares são (1,3), respeitando o desejo do aluno 1, e também (2,4), respeitando o desejo do aluno 4.",
        "descricao": "Uma professora quer dividir todos os alunos de uma sala em duplas para a realização de um trabalho em grupo. Nessas horas, há muita briga entre os alunos para escolher as duplas, porque muitos alunos querem fazer dupla com os melhores alunos da sala. A professora decidiu dessa vez escolher as duplas de uma forma diferente. Cada aluno poderá dizer à professora um outro aluno com o qual queira fazer uma dupla. Após isso, a professora escolherá as duplas de forma com que todas as duplas satisfaçam pelo menos o desejo de um dos alunos da dupla. Agora acho que você já sabe qual será seu trabalho neste problema. Dada a lista de desejos dos alunos, imprima a lista de duplas que a professora deve escolher.",
        "titulo": "Escolhendo as Duplas",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 10000) igual ao número de alunos da sala de aula. A segunda linha contém os desejos de todos os alunos em ordem (a pessoa escolhida pelo aluno 1, pelo aluno 2, assim por diante). Nenhum aluno irá escolher a si próprio."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1195",
        "saida": "Cada linha de entrada produz 3 linhas de saída. Após construir a árvore binária de busca com os elementos de entrada, você deverá imprimir a mensagem \"Case n:\", onde n indica o número do caso de teste e fazer os três percursos da árvore: prefixo, infixo e posfixo, apresentando cada um deles em uma linha com uma mensagem correspondente conforme o exemplo abaixo, separando cada um dos elementos por um espaço em branco. Obs: Não deve haver espaço em branco após o último item de cada linha e há uma linha em branco após cada caso de teste, inclusive após o último.",
        "descricao": "Em computação, a árvores binária de busca ou árvore binária de pesquisa é uma estrutura baseada em nós (nodos), onde todos os nós da subárvore esquerda possuem um valor numérico inferior ao nó raiz e todos os nós da subárvore direita possuem um valor superior ao nó raiz (e assim sucessivamente). O objetivo desta árvore é estruturar os dados de forma flexível, permitindo a busca binária de um elemento qualquer da árvore. A grande vantagem das árvores de busca binária sobre estruturas de dados convencionais é que os algoritmos de ordenação (percurso infixo) e pesquisa que as utilizam são muito eficientes. Para este problema, você receberá vários conjuntos de números e a partir de cada um dos conjuntos, deverá construir uma árvore binária de busca. Por exemplo, a sequência de valores: 8 3 10 14 6 4 13 7 1 resulta na seguinte árvore binária de busca:",
        "titulo": "Árvore Binária de Busca",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro C (C ≤ 1000), indicando o número de casos de teste que virão a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um inteiro N (1 ≤ N ≤ 500) que indica a quantidade de números que deve compor cada árvore e a segunda linha contém N inteiros distintos e não negativos, separados por um espaço em branco."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1903",
        "saida": "Imprima uma linha com a mensagem \"Bolada\" (sem aspas) se a cadeia for uma Cadeia Bolada, ou \"Nao Bolada\" caso contrário.",
        "descricao": "Na viagem de Bino, ele desenhou algumas cadeias alimentares dos seres de Binox. Porém ele notou que em algumas cadeias, todos os pares de espécies se relacionavam (diretamente ou indiretamente). Ele denominou essas cadeias de Cadeias Boladas. Representando a cadeia alimentar como um grafo, todos os pares de espécies (u, v) se relacionam se existe um caminho de u para v OU um caminho de v para u. Dado uma cadeia alimentar, Bino quer saber se ela é uma Cadeia Bolada ou não.",
        "titulo": "Cadeia Alimentar",
        "entrada": "A entrada consiste em múltiplas linhas. A primeira linha contém dois inteiros N (1 ≤ N ≤ 100000) e M (1 ≤ M ≤ 1000000), representando a quantidade de espécies e o número de relações respectivamente. As próximas M linhas contêm dois inteiros U (1 ≤ U ≤ N) e V (1 ≤ V ≤ N), representando que existe uma relação unidirecional entre U e V."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2118",
        "saida": "Para cada localização de um aluno que deseja se matricular no Farias Brito, imprima o identificador da melhor sede que o aluno deve se matricular. Caso não exista sede que seja acessível pelo aluno utilizando as ruas de Fortaleza, imprima “Noic”.",
        "descricao": "Em Fortaleza, todos os estudantes pretendem estudar em alguma sede do Colégio Farias Brito, porém como existem muitas sedes na cidade, alguns estudantes ficam em dúvida em qual sede se matricular. Um estudante opta por estudar na sede mais próxima de onde ele mora. Caso existam sedes com mesma distância de onde ele mora, o estudante opta por estudar na sede que obteve mais medalhas em olimpíadas. Caso ainda permaneça o empate, o estudante opta pela sede mais antiga. O mapa de Fortaleza pode ser desenhado como um grafo, em que os vértices representam os locais, e as arestas representam as ruas (Conectando dois locais). A distância entre dois locais X e Y é determinada pelo número mínimo de ruas que se deve utilizar para chegar em Y a partir de X. O grande chefe Parcelo Mena ordenou que o estagiário Nhalyson Tepomuceno fizesse um programa que indique qual a melhor sede para os alunos.",
        "titulo": "Qual a Sede?",
        "entrada": "A entrada é composta por múltiplas linhas. A primeira linha da entrada contém quatro inteiros L, S, Q (1 ≤ L, S, Q ≤ 105) e A (1 ≤ A ≤ 106), representando o número de locais, o número de sedes, o números de estudantes e o número de ruas. Cada uma das próximas S linhas contém três inteiros Pi, Mi e Ti (1 ≤ Mi, Ti ≤ 109), representando o local onde a sede está localizada, o número de medalhas da sede e o número de dias que a sede foi construída. Cada uma das próximas A linhas contém dois inteiros X e Y cada, representando que existe uma rua que conecta os locais X e Y. Cada uma das próximas Q linhas contém a localização de cada aluno que deseja se matricular no Farias Brito. É garantido que para quaisquer duas sedes distintas, elas não foram construídas no mesmo dia."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1207",
        "saida": "Para cada instância imprima, em uma única linha, o maior valor que pode ser obtido da soma dos benefícios das categorias adquiridas menos o custo dos tipos de vodkas compradas.",
        "descricao": "São Peterburgo é conhecida como a capital da cerveja russa e abriga diversas cervejarias importantes. Dizem que a qualidade da água da cidade é responsável por uma cerveja de excelente qualidade. Além de fábricas tradicionais, como a Heineken, algumas marcas locais são destacadas, como a Tinkoff e a Baltika. Também na cidade são produzidas algumas das melhores vodkas do mundo. A mais antiga, chamada Liviz, data de 1897. Esta destilaria produz vodkas de  excelente qualidade, medida por padrões internacionais. Curiosamente, alguns tipos de vodkas, quando consumidos juntos, acabam tendo, segundo os  especialistas, sabor muito melhor. Dessa forma, alguns tipos de vodka são reunidos em categorias que, quando compradas totalmente pelo consumidor, trazem um benefício agregado medido segundo padrões internacionais de qualidade. Cada uma das vodkas tem um preço associado, e sua tarefa é encontrar uma compra que maximize o benefício total menos o custo das vodkas adquiridas. Reescrevendo, cada vodka tem um custo Cj e existem M categorias diferentes, cada qual com um benefício Bi. Um benefício só é computado se todos os tipos de vodka que compõem a categoria são adquiridos. Uma mesma garrafa de vodka pode participar de mais de uma categoria para computar o benefício. Sua tarefa é determinar quais tipos de vodka comprar de forma a maximizar a soma dos benefícios adquiridos menos o custo dos itens  comprados. Você pode supor que foi à Russia com dinheiro suficiente para comprar todos os tipos de vodka produzidos pela Liviz (oba!! :D).",
        "titulo": "Os Benefícios da Vodka",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 600) e M (1 ≤ M ≤ 400) representando, respectivamente, a quantidade de tipos diferentes de vodka a venda e o número de categorias existentes. Os tipos de vodka são identificados por números de 1 a N e as categorias por números de 1 a M. A linha seguinte contém N inteiros, Cj (1 ≤ Cj ≤ 1000) para (1 ≤ j ≤ N), separados por espaço, correspondendo ao custo da vodka j. Na próxima linha existem M inteiros, Pi (1 ≤ Pi ≤ N) para (1 ≤ i ≤ M), separados por espaço, indicando quantos tipos diferentes de vodkas compõe a categoria i. Cada uma das M linhas seguintes descreve uma categoria começando com um inteiro, Bi (1 ≤ Bi ≤ 1000) para (1 ≤ i ≤ M), indicando seu benefício, seguido pelos tipos de vodka que a compõe, separados por espaços."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1979",
        "saida": "Para cada caso de teste, deverá ser impressa uma linha contendo a resposta \"SIM\", caso seja possível dispor os alunos de forma que não hajam dois amigos realizando a prova na mesma sala, e \"NAO\", caso contrário.",
        "descricao": "Luiz é um coordenador muito dedicado do curso de ciência da computação. Ele sabe a importância de incentivar seus alunos a esforçarem-se em algoritmos, por isso decidiu realizar uma competição de programação individual entre estes, com direito a premiação. Luiz gostaria de evitar ao máximo a possibilidade de fraude na competição, e por isso não gostaria que houvessem dois candidatos amigos na mesma sala durante a realização da prova. Infelizmente Luiz só dispõe de duas salas para a realização da prova, mas felizmente conhece muito bem seus alunos, e sabe dizer com facilidade quem é amigo de quem. Entretanto, ele precisa saber se será possível, apenas com as duas salas disponíveis, combinar os alunos da forma que deseja e para isso solicitou a você, aluno dedicado do curso, que crie um programa para ajudá-lo.",
        "titulo": "Salas Separadas",
        "entrada": "A entrada é composta de diversos casos de teste. A primeira linha de cada caso de teste consiste em um inteiro N (2 ≤ N ≤ 100) indicando o número de alunos que irão realizar a prova. Cada N par de linhas seguintes descreve as relações de amizade de cada participante, de forma que a primeira linha consiste no identificador do participante, e a linha seguinte consiste em uma lista descrevendo uma quantidade M de alunos (1 ≤ M < N) com os quais aquele participante possui uma relação de amizade. Considere que não é relevante o número de pessoas dispostas em cada sala, e que, se existe uma relação de amizade entre alunos x e y, existe uma relação de amizade entre y e x. A entrada termina quando N = 0, e não deve ser processada."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2127",
        "saida": "Para cada instância, você deverá imprimir um identiﬁcador \"Instancia K\", onde K é o número da instância atual. Na linha seguinte imprima o custo de um sistema que atenda os requisitos descritos acima. Após cada instância imprima uma linha em branco.",
        "descricao": "Os pesquisadores do departamento de pesquisa operacional da Universidade da Columbia Britânica foram contratados para uma estranha tarefa. Vários países da África resolveram se unir e utilizar oﬁcialmente o meio de transporte que ﬁcou mundialmente conhecido nos ﬁlmes do Tarzan: o cipó. Há milhões de cipós na África e é surpreendente com que velocidade e eﬁciência uma pessoa pode se deslocar na selva utilizando esse meio de transporte. Só surgiu um pequeno problema. Os cipós são dominados por três grandes tribos: os makelelês, os malouhdás e os abedis. As tribos exigem ser pagas por cipó usado no sistema de transporte. Como eles ainda não sabem o signiﬁcado de palavras como cartel, cada uma fez o seu preço, e divergiram bastante. Enquanto os makelelês exigem 1235 bongôs por cipó usado, os malouhdás exigem 8977 e os abedis 10923 (a Jane ainda está viva, e ajudou a intermediar a negociação para esta tribo). Os pesquisadores foram contratados para escolher os cipós que comporão o primeiro sistema cipoviário do mundo. Os contratantes construíram milhões de “pontos de cipó” pela selva africana e desejam que os cipós sejam escolhidos de tal forma que seja possível ir de qualquer ponto a qualquer outro usando os cipós contratados (você pode ter de trocar de cipó algumas vezes, como fazia o Tarzan). Você deve dizer qual o custo de um sistema que atenda estes requisitos e seja o mais barato possível. Você pode supor que existam cipós suﬁcientes na selva para que sempre exista um sistema cipoviário que atenda os requisitos.",
        "titulo": "Sistema Cipoviário",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 2000000), onde N é o número de \"pontos de cipó\" e M é o número de cipós. Cada uma das M linhas seguintes contém três inteiros U, V e C indicando que existe um cipó que vai do ponto U e até o ponto V com custo C, onde 1 ≤ U, V ≤ N e C ∈ {1235,8977,10923}. A entrada termina com ﬁnal de arquivo."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1948",
        "saida": "A saída consistirá sempre de somente 1 linha: OK No caso de ser possível compilar. Compilation error No caso de não ser possível.",
        "descricao": "Depois do ataque dos alienígenas que acabou com quase toda a tecnologia avançada da humanidade, você foi designado a participar da força tarefa para reconstruir. Depois de muita tentativa e erro, foi descoberto que os computadores que tinham apenas 2 registradores fonte e um destino eram imunes as radiações alienígenas. O problema agora é que nenhum programa escrito até então funcionava nestes computadores, e muito menos um compilador adequado. Você está de posse de um dos últimos computadores de verdade que ainda funcionam, e sua tarefa será escrever o compilador. Mas como tempo é dinheiro, e tempo de CPU é muito mais dinheiro, antes de compilar o programa inteiro, você deve apenas checar se é possível compilar o programa desejado.",
        "titulo": "Compilador",
        "entrada": "Cada entrada consiste de um programa. O programa só contem 2 tipos de instruções. Uma para declarar o valor de uma variável e outra para executar uma soma. As instruções de declaração são no formato: A := B Onde A é um nome de variável válido e B é um inteiro positivo. As instruções de soma são no formato: A := B + C Onde A é um nome de variável válido e B ou C são ou um nome de variável válido ou um inteiro positivo. Os tokens deste programa são sempre separados por espaço e as instruções são separadas por uma quebra de linha. São nomes de variáveis válidos todas as combinações de até 8 letras minúsculas. Os programas tem, no máximo, 2000 instruções. Variáveis recebem uma atribuição, seja através de uma soma ou de uma declaração, no máximo, 1 vez."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1056",
        "saida": "Para cada caso, imprima o número do caso de teste, seguido pela resposta, conforme exemplo abaixo.",
        "descricao": "Serão fornecidos a você, dois conjuntos de valores de entrada. Vamos chamá-los de conjuntos A e B. O conjunto A contém n elementos e o conjunto B contém m elementos. Você deverá remover k1 elementos do conjunto A e k2 elementos do conjunto B de forma que nenhum dos valores inteiros que restarem no conjunto B seja múltiplo de algum inteiro do conjunto A. k1 deverá estar no intervalo [0,n] e k2 no intervalo [0,m]. Você deverá encontrar o valor de (k1+k2) tal que (k1+k2) seja tão baixo quanto possível. P é um múltiplo de Q se houver algum inteiro K tal que P = K * Q. Suponha que o conjunto A seja {2,3,4,5} e o conjunto B seja {6,7,8,9}. Se forem removidos 2 e 3 do conjunto A e 8 do conjunto B, nós tempos os conjuntos {4,5} e {6,7,9}. Aqui nenhum dos inteiros 6, 7 ou 9 é um múltiplo de 4 ou 5. Portanto, para este caso a resposta é 3, que é a quantia de elementos eliminados (2 elementos do conjunto A e 1 elemento do conjunto B).",
        "titulo": "Fatores e Múltiplos",
        "entrada": "O primeiro valor da entrada é um inteiro T ( T < 50 ) que determina o número de casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha inicia com n seguida pelos n inteiros. A segunda linha inicia com m seguido pelos m inteiros. Ambos, n e m estarão no intervalo [1,100]. Todos os elementos destes dois conjuntos devem caber em um inteiro com sinal de 32 bits."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1931",
        "saida": "Uma única linha deve ser impressa, contendo um único inteiro, o custo total de pedágios para Patrícia ir da cidade 1 à cidade C, pagando um número par de pedágios, ou, se isso não for possível, o valor −1.",
        "descricao": "Patrícia é uma ótima desenvolvedora de software. No entanto, como quase toda pessoa brilhante, ela tem algumas manias estranhas, e uma delas é que tudo que ela faz tem que ser em número par. Muitas vezes essa mania não atrapalha, apesar de causar estranhamento nos outros. Alguns exemplos: ela tem que fazer diariamente um número par de refeições; no café da manhã toma duas xícaras de café, duas torradas e duas fatias de queijo; sempre que vai ao cinema compra dois bilhetes de entrada (felizmente sempre tem um amigo ou amiga lhe acompanhando); e toma dois banhos por dia (ou quatro, ou seis...). Mas algumas vezes essa mania de Patrícia atrapalha. Por exemplo, ninguém gosta de viajar de carro com ela, pois se no trajeto ela tem que pagar pedágios, o número de pedágios que ela paga tem que ser par. Patrícia mora em um país em que todas as estradas são bidirecionais e têm exatamente um pedágio. Ela precisa ir visitar um cliente em uma outra cidade, e deseja calcular o mínimo valor total de pedágios que ela tem que pagar, para ir da sua cidade à cidade do cliente, obedecendo à sua estranha mania de que o número de pedágios pagos tem que ser par.",
        "titulo": "Mania de Par",
        "entrada": "A entrada consiste de diversas linhas. A primeira linha contém 2 inteiros C e V, o número total de cidades e o número de estradas (2 ≤ C ≤ 104 e 0 ≤ V ≤ 50000). As cidades são identificadas por inteiros de 1 a C. Cada estrada liga duas cidades distintas, e há no máximo uma estrada entre cada par de cidades. Cada uma das V linhas seguintes contém três inteiros C1, C2 e G, indicando que o valor do pedágio da estrada que liga as cidades C1 e C2 é G (1 ≤ C1, C2 ≤ C e 1 ≤ G ≤ 104). Patrícia está atualmente na cidade 1 e a cidade do cliente é C."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1463",
        "saida": "Para cada caso de teste, seu programa deverá imprimir várias linhas de saída correspondentes aos níveis da árvore de expressão e contendo todos os elementos presentes em cada um destes níveis, da esquerda para a direita. Estas linhas devem iniciar sempre com a mensagem \"Nivel n: \", conforme o exemplo fornecido abaixo. Imprima uma linha em branco entre dois casos de teste.",
        "descricao": "A árvore binária de expressão aritmética é uma aplicação específica de uma árvore binária para avaliar expressões. Ela pode ser usado para representar uma expressão algébrica ou booleana, como por exemplo, a expressão 4 * a - ( 6 + b ) + 8 / ( 9 - 7 )  que é apresentada na figura abaixo. Essas árvores podem representar expressões que contêm operadores unários e binários. As ávores de expressão são implementadas como árvores binárias, principalmente porque permitem ao usuário encontrar rapidamente o que está procurando. O limite superior de passos necessários para encontrar a informação requerida em árvores binárias igual a log2N, em que N indica o número de todos os nós de uma árvore. A fim de fazer um exercício diferente, o professor pediu para listar uma expressão armazenada em uma árvore binária, nível a nível, iniciando no primeiro nível (zero) e terminando no nível n.",
        "titulo": "Árvore Binária de Expressão",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de uma expressão aritmética contendo no mínimo dois operandos e uma operação simples e no máximo até 100 elementos. Esta expressão poderá conter letras maiúsculas, letras minúsculas, números, parênteses e operações aritméticas básicas (+, -, *, /) conforme o exemplo abaixo. Cada operando pode ter apenas um dígito ('0 '- '9') ou letra ('a', 'B', etc). O final da entrada é indicado pelo fim de arquivo (EOF). O final da entrada é indicado por final de arquivo (EOF)."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1752",
        "saida": "Apresente uma linha com N - 1 inteiros que representam o custo mínimo de cada etapa de sua viagem, ou o valor -1 se é impossível viajar usando o sistema de transporte escoltado do ICPC para aquela etapa. Mais precisamente, para k = 1, 2,. . . , N - 1, o k-ésimo número deve ser o custo mínimo dos carros que você tem que alugar para ir da província pk para província pk + 1, utilizando o sistema escoltado de transporte do ICPC , ou o valor -1 se é impossível viajar da província pk para província pk + 1 com este sistema.",
        "descricao": "O reino de Quadradônia é dividido em províncias que formam um padrão de grade de R linhas e C colunas. Diz a lenda que muitas coisas maravilhosas esperam ser descobertas em algumas das províncias, embora não esteja claro se você pode realmente encontrar a forma sólida indescritível de histórias de água chamada de \"gelo\", ou se são apenas dragões. Você está planejando uma viagem através do reino para descobrir, mas as estradas são perigosas por isso você tem que ter muito cuidado. Para ir de uma província para outra que você gostaria de usar o sistema de transporte conveniente escoltado, gerido pela Interprovincial Communication & Peregrination Company (ICPC). Em cada província, o ICPC fornece uma carruagem fortemente guardada para você viajar para qualquer outra província em um retângulo que a contém, com a mesma taxa fixa (que pode no entanto variar de uma província para outra). Mais formalmente, na província na linha i-ésima e coluna j-ésima você pode alugar um carro escoltado por um custo de Vij, que lhe permite viajar com segurança para qualquer província na maioria das linhas Rij de distância da linha i, e na maioria das colunas Cij de distância da coluna j (isto é, ter número da linha i' e coluna j' com número | i - i' | ≤ Rij e | j - j' | ≤ Cij). Em sua jornada você deseja visitar N províncias p1, p2,. . . , pN, nessa ordem. Andando à procura de aventuras é um negócio caro e seu orçamento é limitado, então você gostaria de gastar o mínimo possível no transporte. Portanto, você gostaria de calcular o custo mínimo de cada etapa de sua viagem, ou seja, o custo mínimo dos carros que você tem que alugar para ir da província pk para a província pk + 1, para k = 1, 2,. . . , N - 1.",
        "titulo": "Jornada Pelo Reino",
        "entrada": "A primeira linha contém três inteiros R, C e N, representando respectivamente o número de linhas, o número de colunas e o número de províncias que deseja visitar (1 ≤ R, C ≤ 500 e 2 ≤ N ≤ 5). As linhas são numeradas de 1 a R e colunas são numeradas de 1 a C. As próximas 3 × R linhas descrevem o sistema de transporte escoltado do ICPC por meio de três grupos de R linhas cada, com cada linha contendo C inteiros. Na i-ésima linha do primeiro grupo, o j-ésimo número representa o custo Vij de alugar um carro na província de linha i e coluna j, enquanto os números correspondentes no segundo e terceiro grupo representam, respectivamente, Rij e Cij (1 ≤ Vij ≤ 1000, 0 ≤ Rij ≤ R e 0 ≤ Cij ≤ C, para i = 1, 2,..., R e j = 1, 2,..., C). As N linhas seguintes descrevem as províncias p1, p2,. . . , pN que você quer visitar, na mesma ordem que você quiser visitá-los. O k-ésimo número dessas linhas descreve a província pk com dois inteiros Ik e Jk, indicando que pk esta na linha Ik e coluna Jk (1 ≤ Ik ≤ R e 1 ≤ Jk ≤ C para k = 1 , 2,..., N)."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2048",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir (com cinco casas decimais) a probabilidade mínima de interferência calculada para tal instância. Uma linha em branco deve separar a saída de cada instância.",
        "descricao": "No dia primeiro de julho de 1947, um estranho objeto foi detectado por radares da força aérea americana instalados em Roswell, White Sands e Alamogordo. A tremenda velocidade e os movimentos erráticos do objeto indicaram que ele não era um avião ou meteorito. Quatro dias depois um pastor de ovelhas e um grupo de arqueólogos encontram restos de um objeto acidentado ao norte de Roswell. A partir daí, autoridades americadas entram em cena e transportam os restos de tal objeto para Fort Worth no Texas. Elas disseram que os destroços encontrados eram simplesmente restos de um balão meteorológico experimental. Muitas pessoas, no entanto, acharam que se tratavam dos restos de um objeto voador não identificado (UFO). Muitos anos se passaram desde então, e o caso continua atraindo atenção e gerando polêmica. Um grupo de ufólogos radicado em San Antonio, uma cidade texana situada a sul-sudoeste de Fort Worth, está convencido de que seres extraterrestres têm visitado a região com frequência desde então. Após muita pesquisa, os ufólogos descobriram que poderiam construir uma rede de comunicação alternativa para tentar contactar os ETs. Tal rede utilizaria resquícios do antigo sistema de telégrafos existentes no deserto do Texas e o fato de sua alternatividade advém da tentativa de evitar, segundo eles, a intromissão das autoridades supra citadas. Após um minucioso levantamento (que identificou postes, fiações, condensadores, transformadores, etc.), os ufólogos perceberam que informações transmitidas em certos trechos da antiga estrutura dos telégrafos apresentavam qualidade pior do que em outros. Baseados em amostras estatísticas, levantaram, para alguns pares de pontos u e v da antiga rede, uma probabilidade puv de haver interferência nas informações transmitidas entre u e v. Sabendo que você estaria na região em abril do ano que vem, eles pediram a você que construísse um programa para identificar o menor conjunto de trechos a serem utilizados, de forma que (i) todos os pontos por eles desejados estejam interligados (mesmo que indiretamente), e tal que (ii) a probabilidade total de interferência nas mensagens enviadas nesta rede alternativa seja mínima. Ávido de interesse em descobrir a verdade (que \"está lá fora...\"), você prontamente atendeu à solicitação.",
        "titulo": "Houston, Nós Temos Um Problema!",
        "entrada": "Seu programa deve estar preparado para lidar com diversas instâncias. Cada instância possui o formato que segue. Na primeira linha, são especificados dois inteiros 0 ≤ n ≤ 100 e 0 ≤ m ≤ n(n-1)/2 que representam, respectivamente, o número de pontos na rede alternativa e o número de pares desses pontos para os quais as probabilidades de haver interferência foram medidas. Nas m linhas seguintes, são dados (em cada linha) dois inteiros 1 ≤ u,v ≤ n e um racional 0 ≤ puv ≤ 1 representando que entre os dois pontos u e v, a probabilidade de interferência é puv. Um valor n = 0 indica o término das instâncias e não deve ser processado. Você pode supor que sempre será possível satisfazer a restrição (i)."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2121",
        "saida": "Para cada instância imprima a dificuldade total mínima da rota desejada. Se for impossível obter uma rota da forma desejada, imprima “impossivel”.",
        "descricao": "Muitos podem pensar: “O que vou fazer em Ecaterimburgo? Essa cidade é no fim do mundo!!!”. Entretanto, muitas coisas interessantes ocorreram na cidade, possuindo vários monumentos e locais históricos. Para citar alguns, Ecaterimburgo tem um monumento que é um grande teclado de computador localizado na beira do rio Izet; um monumento a Michael Jackson (!!); na mansão Ipatiev foram assassinados os Romanovs (o czar Nicolau, sua esposa, quatro filhas e filho); lá houve um vazamento de antraz em 1979; um piloto de U2 americano foi capturado e condenado por espionagem; entre outros. Ou seja, existe muito há fazer nos dias em que a cidade for visitada. A central de turismo de Ecaterimburgo construiu um mapa com as principais atrações turísticas da cidade, assim como os belos passeios ligando esses caminhos. Esse mapa também mostra um nível de dificuldade de cada passeio (relacionado à duração, pavimentação da via, relevo etc.) e o sentido no qual ele deve ser feito. Eles desejavam construir uma rota que passasse por todas as atrações turísticas e os passeios. Foi idealizado, então, um concurso que visava fazer esta rota e, ao mesmo tempo, homenageava uma das cidades irmãs de Ecaterimburgo: Caliningrado, cujo nome até o final da segunda guerra mundial era Königsberg. A ideia era construir uma rota em que se partisse de uma das atrações, e passando por todos os passeios se retornasse ao ponto de partida. Sabemos que, como no caso das pontes de Königsberg, nem sempre é possível construir uma rota assim. Por isso a central permitiu que, se necessário, os passeios poderiam ser feitos mais de uma vez. No entanto, ela exigiu que a dificuldade total da rota (soma das dificuldades de cada passeio multiplicado pelo número de vezes que ele é feito) fosse mínima. Dessa forma, o concurso consistia de propor, a partir de uma rota inicial, quais passeios deveriam ser percorridos mais de uma vez e quantas vezes, para se obter uma rota como a desejada pela central.",
        "titulo": "Turismo em Ecaterimburgo",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros N (2 ≤ N ≤ 50) e M (0 ≤ M ≤ N2+103), o número de atrações da cidade e o número de passeios respectivamente. As próximas M linhas contém três inteiros, ai, bi, di (1 ≤ ai, bi ≤ N) indicando que o passeio i começa em ai, termina em bi e tem dificuldade di (1 ≤ di ≤ 3x104)."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1389",
        "saida": "Para cada caso de teste na entrada, seu programa deverá imprimir uma única linha, contendo o inteiro -1 caso não seja possível satisfazer os requisitos ou um inteiro representando a cidade onde Poly, o Sapateiro, pode começar sua jornada. Se existir mais de uma resposta, imprima a menor.",
        "descricao": "Era uma vez um reino muito pacífico chamado Nlogônia. Naquela época, Poly, o Sapateiro, podia vir ao país e viajar livremente de cidade em cidade sem nenhuma preocupação. Essa tarefa era fácil, já que todas cidades na Nlogônia tinham uma estrada direta para todas outras cidades no país. Ele podia então viajar facilmente por todo país visitando cada cidade exatamente uma vez e consertando os sapatos de todos. Mas isso não é mais verdade. Os tempos mudaram e a guerra chegou à Nlogônia. A época em que as pessoas podiam viajar livremente acabou. Confederações identificadas por cores foram formadas entre as cidades por todo o país, e agora cada cidade pertence a pelo menos uma e no máximo duas confederações. Ao tentar entrar em uma cidade, você deve dar ao guarda de fronteira um tíquete de uma das confederações a que essa cidade pertence. Ao sair da cidade, você recebe um tíquete da outra confederação a que a cidade pertence (diferente do que você deu ao entrar) ou da mesma confederação se a cidade pertencer a apenas uma. Como Poly, o Sapateiro, é amigo de longa data da Nlogônia, ele pode escolher o tíquete e a cidade que ele deseja entrar como a primeira cidade do país, mas depois disso ele deve obedecer as regras da confederação. Ele quer fazer a mesma rotina que ele fazia antes, visitando cada cidade exatamente uma vez em Nlogônia, mas agora não é fácil para ele fazer isso, apesar de ele poder escolher onde começar sua jornada. Por exemplo, suponha que existam quatro cidades, númeradas de 0 a 3. A cidade 0 pertence às confederações vermelha e verde; a cidade 1 pertence apenas à vermelha; a cidade 2 pertence à verde e à amarela; e a cidade 3 pertence à azul e à vermelha. Se Poly, o Sapateiro, escolher começar na cidade 0, ele pode entrar nela carregando tanto o tíquete vermelho quanto o amarelo e sair recebendo o outro. Caso ele decida escolher o tíquete vermelho, ele vai sair com um tíquete verde, e então ele pode ir apenas para a cidade 2. Ao sair da cidade 2 ele recebe o tíquete amarelo e agora não pode ir a mais nenhum lugar. Se ele tivesse escolhido o tíquete verde como primeiro ele teria recebido o vermelho ao sair, e então poderia viajar para as cidade 1 ou 3. Se ele escolher a cidade 3, ao sair ele receberá o tíquete azul e novamente não poderá ir a lugar algum. Se ele escolher a cidade 1, ele recebe o tíquete vermelho de novo ao sair (a cidade 1 pertence apenas à confederação vermelha) e pode viajar apenas para a cidade 3 e nunca chegará à cidade 2. Portanto, não é possível visitar cada cidade exatamente uma vez começando na cidade 0. É possível, entretanto, começando na cidade 2 com um tíquete amarelo, sair da cidade com um tíquete verde, então visitar a cidade 0, sair com um tíquete vermelho, então visitar a cidade 1, sair com um tíquete vermelho novamente e, por fim, visitar a cidade 3. Como você pode ver, se tornou realmente difícil para Poly, o Sapateiro, cumprir a tarefa, então ele pede que você o ajude. Ele quer saber se é possível escolher uma cidade para começar tal que ele possa visitar todas cidades da Nlogônia uma vez. Você pode ajudar Poly, o Sapateiro?",
        "titulo": "O Problema do Sapateiro Viajante",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros N e C, separados por um espaço, indicando respectivamente o número de cidades (1 <= N <= 500) e confederações (1 <= C <= 100) no país. Cada uma das próximas C linhas descreve uma confederação. Ela começa com um inteiro K (0 <= K <= N) e então K inteiros representando as cidades que pertencem a essa confederação. Todos inteiros são separados por espaços simples e cidades são numeradas de 0 a N - 1. Cada cidade vai aparecer pelo menos uma vez e no máximo duas vezes e nenhuma cidade vai ser repetida na mesma confederação. O final da entrada é indicado por uma linha contendo dois zeros separados por um espaço."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1584",
        "saida": "Imprima para cada caso de teste o número de padrões de desbloqueio possíveis com exatos K segmentos considerando-se um grid N × N. Como esse número pode ser muito grande, imprima o resto que ele deixa por 109 + 7.",
        "descricao": "A UFFS (União Federal dos Fabricantes de Selulares[sic]), uma empresa 100% brasileira, do grupo MEC (Mercado da Espanção[sic] Comercial), acaba de lançar o Espertofone, para competir com os smartphones importados. Os Espertofones rodam um sistema operacional próprio, batizado de Androido. Quando um usuário liga um Espertofone com Androido, aparece uma tela de desbloqueio com um grid de N × N botões. O usuário deve, então, sem desencostar seu dedo da tela, deslizá-lo pelos botões de modo a desenhar seu padrão de desbloqueio gravado anteriormente e, dessarte, liberar o aparelho para uso. O sistema sempre mantém na tela um segmento de reta com um extremo no último botão tomado e outro sob o dedo do usuário, e considera que o usuário toma um botão B se e somente esse segmento intercepta o centro de B. Diferentemente do que ocorre com o sistema da concorrência, no Androido o usuário pode repetir botões, desde que isso seja possível. A Figura ilustra um padrão de desbloqueio com K = 8 segmentos num grid 4 × 4, enumerando os segmentos. Perceba que, num grid 4 × 4, não é possível que o botão (3, 3) suceda o botão (1, 1) num padrão de desbloqueio, pois obrigatoriamente o segmento passaria pelo centro do botão (2, 2). Obviamente, nunca é possível também que um botão suceda a si próprio. Neste problema, considere que o dedo do usuário é tão fino quanto necessário para conectar botões que podem teoricamente suceder um ao outro. A UFFS quer agora provar que seu sistema é melhor que o da concorrência, calculando o número de padrões de desbloqueio possíveis com K segmentos.",
        "titulo": "Espertofone",
        "entrada": "A entrada é composta por vários casos de teste, cada um numa linha e por sua vez constituído apenas de dois números inteiros: N e K (2 ≤ N ≤ 5, 0 ≤ K ≤ 1015)."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1334",
        "saida": "Para cada caso de teste imprima Q + 1 linhas. Na i-ésima linha escreva a resposta para a i-ésima consulta. Se a informação dada pelas medições é suficiente para prever a anomalia no ponto consultado, então escreva um inteiro representando a anomalia no ponto consultado. Caso contrário escreva o caractere '*' (asterisco). Imprima uma linha contendo um único caractere '-' (hífen) após cada caso de teste.",
        "descricao": "Sortônia é a capital da província da Logônia do Norte. A cidade é definida com quase todas as suas ruas em uma grade quadrada alinhadas na direção Norte-Sul ou na direção Oeste-Leste. A única exceção é a Avenida Merge que vai na direção Sudoeste-Nordeste, dividindo os blocos da cidade ao longo de suas diagonais. Sortônia é também uma das cidades mais verdes da Nlogônia. A universidade local desenvolveu uma tecnologia para aproveitar o campo magnético da Terra para geração de energia. Como consequência, todas as interseções da Avenida Merge possuem geradores de força instalados, abastecendo todas as casas e comércios da cidade. A tecnologia foi elogiada pelos ambientalistas na época por ter eliminado a emissão de carbono da Sortônia, mas logo após sua introdução, milhares de abelhas e pássaros foram encontrados mortos na cidade. Confusa, a Rainha da Nlogônia ordenou os biofísicos do reino que investigassem o fenômeno. Após muito meses de estudos, eles descobriram que os geradores usados pelos Sortonianos criaram anomalias no campo magnético local. Os pássaros e abelhas que usam o campo magnético da Terra para guiar seu voo foram confundidos por essas anomalias, começaram a voar em círulos e eventualmente morreram por exaustão. De acordo com os modelos teóricos dos biofísicos, cada gerador cria uma anomalia que é representada por um valor inteiro. Cada anomalia propaga indefinidamente nas quatro direções cardeais. Pontos que não estão diretamente ao norte, sul, oeste ou leste do gerador não são afetados por ele. Por outro lado, se um ponto está alinhado com dois geradores então a anomalia naquele ponto é a soma das duas anomalias produzidas por esses geradores. Por exemplo, considere a figura abaixo que representa uma certa porção da Sortônia. A anomalia no ponto R é apenas aquela produzida pelo gerador naquele ponto enquanto a anomalia no ponto T é a soma das anomalia produzidas pelos geradores no ponto R e no ponto S. ​ Os biofísicos gostariam de medir as anomalias para algumas das interseções da cidade, mas essas medições requerem equipamentos caros e perícia técnica. Então eles planejam medir apenas um subconjunto das interseções da cidade e extrapolar os outros dados a partir deles. Prever uma anomalia a partir de um conjunto de medições pode requerer combinar várias delas de modos complicados. Então, a Rainha da Nlogônia ordenou que você escrevesse um programa que prevê as anomalias em certas interseções dadas as medidas préviamente feitas.",
        "titulo": "Poluição Elétrica",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeia linha contém cois inteiros M e Q representando respectivamente o número de medições e o número de consultas (1 ≤ M, Q ≤ 104). Cada uma das próximas M linhas descreve uma medição usando três inteiros X, Y e A, indicando que a anomalia medida no ponto (X, Y) é A (-107 ≤ X, Y ≤ 107 e -104 ≤ A ≤ 104). Após isso, cada uma das próximas Q linhas descreve uma consulta usando dois inteiros X' e Y', indicando que a anomalia no ponto (X', Y') deve ser prevista (-107 ≤ X', Y' ≤ 107). Todas as posições são medidas em blocos da cidade; o primeira coordenada aumenta de Oeste para Leste, enquanto a segunda coordenada aumenta de Sul para Norte. O ponto (0,0) está localizado na Avenida Merge. Você pode assumir que em cada caso de teste cada ponto não será medido mais de uma vez. Da mesma maneira, cada ponto não será consultado mais de uma vez. Você pode assumir que todas as medições são consistentes. O último caso de teste é seguido por uma linha contendo dois zeros."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1907",
        "saida": "Imprima uma linha contendo um único inteiro que represente o número de cliques necessários para colorir toda a figura descrita na entrada.",
        "descricao": "O Prof. Fernando Bevilacqua está muito preocupado com os cenários do seu mais novo jogo. Os contornos dos cenários já foram desenhados por um artista, restando ao Prof. Fernando apenas colori-los. No momento, cada cenário é uma imagem em que cada pixel está preto ou branco. Assim, quando o Prof. Fernando, em seu programa de coloração de imagens, clica num pixel branco para ser colorido com uma cor α, toda a região branca em que está o pixel selecionado recebe a cor α. Dizemos que um pixel branco A está na mesma região branca que um pixel branco B se existe um caminho entre A e B que passa apenas por pixels brancos e que considera as adjacências apenas nos sentidos horizontal e vertical. Por exemplo, são necessários 6 cliques para colorir a figura da esquerda.",
        "titulo": "Coloração de Cenários de Jogos",
        "entrada": "A primeira linha da entrada consiste de dois inteiros positivos N e M (N, M ≤ 1.024), os quais representam a resolução da imagem. Cada uma das N linhas seguintes contém M caracteres, os quais podem ser . (ponto) ou o (letra ‘o’ minúscula), representando respectivamente um pixel branco ou um pixel preto."
    },
    {
        "nivel": "2",
        "assunto": "7",
        "numero": "1669",
        "saida": "Para cada caso de teste imprima uma linha com o número mínimo de mudanças requeridas para instalar todos os pacotes. Por conveniência, o drive de DVD está vazio antes da instalação e a inserção inicial de um disco conta como uma mudança. Da mesma forma, a remoção final de um disco conta como uma mudança, deixando o drive de DVD vazio após a instalação.",
        "descricao": "Sistemas operacionais são grandes artefatos de software compostos de muitos pacotes. Você provavelmente lembra do tempo onde seu sistema operacional favorito era entregue em 21 disquetes, ou, alguns anos depois, em 6 CDs. Hoje em dia, será entregue em vários DVDs, cada um contendo dezenas de milhares de pacotes. A instalação de cada pacote talvez requeira que outros pacotes já estejam instalados. Assim sendo, se os pacotes fores distribuídos na mídia de forma inadequada, a instalação do sistema operacional completo requererá que você faça diversas mudanças na mídia, sendo que há apenas um dispositivo de leitura disponível, e.g, um drive de DVD-ROM. Uma vez que você tem que começar a instalação de alguma forma, haverá com certeza um ou mais pacotes que podem ser instalados independentemente de todos os outros pacotes. Dada uma distribuição de pacotes e uma lista de dependências entre os pacotes, você tem que calcular o número mínimo de mudanças na mídia requeridas para instalar todos os pacotes. Para sua conveniência, você pode assumir que o sistema operacional vem em exatamente 2 DVDs.",
        "titulo": "Todos os Discos Considerados",
        "entrada": "A entrada contém vários casos de teste. Cada teste começa com três inteiros N1,N2, D. Você pode assumir que 1 ≤ N1,N2≤ 50000 e 0 ≤ D≤ 100000. O primeiro DVD contém N1 pacotes, identificados pelos números 1,2, ...,N1. O segundo DVD contém N2 pacotes, identificados pelos números N1+1,N1+2, ..., N1+N2. Então seguem D especificações de dependências, cada uma consistindo de dois inteiros, xi,yi. Você pode assumir que 1 ≤ xi,yi ≤ N1+N2 para 1 ≤ i ≤ D. A especificação de dependência significa que a instalação do pacote xi requer a instalação prévia do pacote yi. Você pode assumir que não há dependência circular. O último caso de teste é seguido por três zeros."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1391",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo -1 se não for possível cumprir os requisitos ou um inteiro representando a extensão do quase menor caminho encontrado.",
        "descricao": "Achar um caminho que vai de um ponto inicial até um ponto de destino dados um conjunto de pontos e a extensão das rotas que os conectam é um problema já bem conhecido, e já até é parte de nosso dia-a-dia, uma vez que programas de caminho mínimo estão largamente distribuídos hoje em dia. A maioria das pessoas normalmente gosta bastante dessas aplicações já que elas tornam suas vidas mais fáceis. Bem, talvez nem tão mais fáceis. Agora que quase todo mundo tem acesso a aparelhos de GPS capazes de calcular os caminhos mais curtos a maioria das rotas que formam o caminho mais curto estão ficando lentas devido ao tráfego pesado. Como a maioria das pessoas tenta seguir o mesmo caminho, não vale mais a pena seguir essas direções. Com isso em mente, seu chefe pediu a você que desenvolvesse uma nova aplicação à qual somente ele vai ter acesso, poupando tempo sempre que ele tiver uma reunião ou qualquer evento urgente. Ele pede a você que o programa não deve dizer o menor caminho, mas o quase menor caminho. Ele define o quase menor caminho como o menor caminho que vai de um ponto inicial até um um ponto de destino de forma que nenhuma rota entre dois pontos consecutivos pertence a qualquer caminho mínimo entre o ponto de partida e o de destino. Por exemplo, suponha que a figura abaixo representa o mapa dado, com círculos representando localizações e linhas representando rotas diretas, de mão única com as distâncias indicadas. O ponto de partida está marcado como S e o de destino está marcado como D. As linhas em negrito pertencem a um caminho mínimo (nesse caso existem dois caminhos mínimos, cada um com extensão 4). Logo, o quase menor caminho seria o indicado com linhas pontilhadas (extensão 5), já que nenhuma rota entre dois pontos consecutivos pertence a nenhum caminho mínimo. Note que poderia existir mais de uma resposta possível, por exemplo, se a rota com extensão 3 tivesse extensão 1. Bem como poderia inexistir uma resposta certa.",
        "titulo": "Quase Menor Caminho",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N (2 <= N <= 500) e M (1 <= M <= 104), separados por um espaço, indicando, respectivamente, o número de pontos no mapa e o número de rotas de mão única conectando dois pontos diretamente. Cada ponto é identificado por um único inteiro entre 0 e N - 1. A segunda linha contém dois inteiros S e D, separados por um único espaço, indicando, respectivamente, os pontos de partida e de destino (S != D; 0 <= S, D < N). Cada uma das M linhas seguintes contém três inteiros U, V e P (U != V; 0 <= U, V < N; 1 <= P <= 103), separados por espaço, indicando a existência de uma rota de U para V com distância P. Existe no máximo uma rota de um ponto U até um ponto V, mas perceba que a existência de uma rota de U para V não implica a existência de uma rota de V para U e, se tal estrada existir, ela pode ter extensão diferente. O fim da entrada é indicado por uma linha contendo apenas dois zeros separados por um espaço."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1123",
        "saida": "Para cada caso de teste, o seu programa deve imprimir uma única linha, contendo um único inteiro T, o custo total mínimo necessário, em termos de pedágio, para que o veículo chegue ao destino.",
        "descricao": "O sistema rodoviário de um país interliga todas as suas N cidades de modo que, a partir de uma cidade qualquer, é possível chegar a cada uma das outras cidades trafegando pelas estradas existentes. Cada estrada liga duas cidades distintas, tem mão dupla e um único posto de pedágio (o pedágio é pago nos dois sentidos de tráfego). As estradas não se intersectam a não ser nas cidades. Nenhum par de cidades é interligado por duas ou mais estradas. A Transportadora Dias oferece um serviço de transporte de encomendas entre as cidades. Cada encomenda deve ser levada de uma cidade A para uma outra cidade B. A direção da Transportadora Dias define, para cada encomenda, uma rota de serviço, composta por C cidades e C−1 estradas: a primeira cidade da rota de serviço é a origem da encomenda, a última o destino da encomenda. A rota de serviço não passa duas vezes pela mesma cidade, e o veículo escolhido para fazer o transporte de uma encomenda pode trafegar apenas pela rota de serviço definida. Certo dia, no entanto, o veículo que executava uma entrega quebrou e precisou ser levado para conserto em uma cidade que não está entre as cidades de sua rota de serviço. A direção da Transportadora Dias quer saber qual é o menor custo total, em termos de pedágio, para que o veículo entregue a encomenda na cidade destino, a partir da cidade em que foi consertado, mas com uma restrição adicional: se em algum momento o veículo passar por uma das cidades que compõem a sua rota de serviço, ele deve voltar a obedecer a rota de serviço.",
        "titulo": "Desvio de Rota",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém quatro inteiros N, M, C e K (4 ≤ N ≤ 250, 3 ≤ M ≤ N×(N−1)/2, 2 ≤ C ≤ N−1 e C ≤ K ≤ N−1), representando, respectivamente, o número de cidades do país, o número de estradas, o número de cidades na rota de serviço e a cidade em que o veículo foi consertado. As cidades são identificadas por inteiros de 0 a N−1. A rota de serviço é 0, 1, ... , C−1, ou seja, a origem é 0, de 0 passa para 1, de 1 para 2 e assim por diante, até o destino C−1. As M linhas seguintes descrevem o sistema rodoviário do país. Cada uma dessas linhas descreve uma estrada e contém três inteiros U, V e P (0 ≤ U, V ≤ N−1, U ≠ V, 0 ≤ P ≤ 250), indicando que há uma estrada interligando as cidades U e V com custo de pedágio P. O último caso de teste é seguido por uma linha contendo quatro zeros separados por espaço em branco."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1200",
        "saida": "Cada linha de entrada, com exceção das linhas que contém o comando \"I\", deve produzir uma linha de saída. A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, caso contrário, sua submissão receberá Presentation Error.",
        "descricao": "Marcela recebeu como trabalho de Algoritmos a tarefa de fazer um programa que implemente uma Árvore Binária de Pesquisa (ou Busca). O Programa deve aceitar os seguintes comandos: I n: Insere na árvore binária de pesquisa o elemento n. INFIXA: lista os elementos já cadastrado segundo o percurso infixo PREFIXA: lista os elementos já cadastrado segundo o percurso prefixo POSFIXA: lista os elementos já cadastrado segundo o percurso posfixo P n: pesquisa se o elemento n existe ou não. A qualquer momento pode-se inserir um elemento, visitar os elementos previamente inseridos na ordem infixa, prefixa ou posfixa ou ainda procurar por um elemento na árvore para saber se o elemento existe ou não.",
        "titulo": "Operações em ABP I",
        "entrada": "A entrada contém N operações utilizando letras (A-Z,a-z) sobre uma árvore binária de Busca, que inicialmente se encontra vazia. A primeira linha de entrada contém a inserção de algum elemento. As demais linhas de entrada podem conter quaiquer um dos comandos descritos acima, conforme exemplo abaixo. O final da entrada é determinado pelo final de arquivo (EOF). Obs: Considere que não serão inseridos elementos repetidos na árvore."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1191",
        "saida": "Para cada caso de teste, imprima uma linha com o percurso posfixo (sub-árvore esquerda, sub-árvore direita, raíz).",
        "descricao": "A pequena Valentina gostava muito de brincar com árvores binárias. Seu jogo favorito era construir árvores binárias aleatórias com letras em maiúsculo nos nodos. Este é um exemplo de uma de suas criações:   D / \\ /   \\ B     E / \\     \\ /   \\     \\ A     C     G           /         /       F   Para salvar suas árvores para uso futuro, ela escreveu duas strings para cada árvore: o percurso prefixo (raíz, sub-árvore esquerda, sub-árvore direita) e o percurso infixo (sub-árvore esquerda, raíz, sub-árvore direita). Para o desenho acima o percurso prefixo é DBACEGF e o infixo é ABCDEFG. Agora, anos depois, olhando para as strings, ela notou que reconstruir as árvores era realmente possível, mas só porque ela não havia usado a mesma letra duas vezes na mesma árvore. Reconstruir a árvore a mão tornou-se chato. Então agora ela pede que você escreva um programa que faça o trabalho por ela!",
        "titulo": "Recuperação da Árvore",
        "entrada": "A entrada irá conter um ou mais casos de teste. Cada caso de teste consiste em uma linha contendo duas strings representando o percurso prefixo e infixo de uma árvore binária. Ambas as strings consistem de letras maiúsculas, sem repetir. (Então elas não são maiores de 26 caracteres.) Entrada termina com EOF (fim de arquivo)."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2032",
        "saida": "Para cada caso de teste imprima a mensagem \"Quantidade minima de passos = X\", onde X é o total necessário, seguido por todos os passos feitos para solucionar, cada passo deve ser separado por uma linha em branco, para melhor visualização de João. Caso não seja possível solucionar o problema imprima: \"Problema sem solucao\".",
        "descricao": "João é um menino que adora brincar com jogos de lógica, ele passa diversas horas de seu dia solucionando puzzles. Atualmente o jogo que ele está gastando mais horas brincando é o Sliding puzzle, também conhecido como Jogo dos Oito, no qual ele tem em mãos um tabuleiro de 3 linhas e 3 colunas, onde cada elemento desse tabuleiro possui um número ou um espaço em branco. O objetivo desse jogo é simples, dado um tabuleiro embaralhado (Figura 1), João deve deixá-lo ordenado (Figura 2) e o único movimento possível para solucionar o problema é mover algum número para o espaço em branco. Resolver o brinquedo não é um problema para João, ele já está fazendo isso sem dificuldades, porém ele ficou intrigado em saber qual é quantidade mínima de movimentos necessários para resolver. Figura 1 - Figura 2 O que você precisa fazer para ajudar João na sua curiosidade é simples, ele te dará a configuração inicial do tabuleiro e você deverá mostrar, caso exista, a menor quantidade de passos possíveis para solucionar o brinquedo e quais passos são necessários para encontrar a solução.",
        "titulo": "Jogo dos Oito",
        "entrada": "A entrada é composta por vários casos de teste, cada caso terá 3 linhas cada uma com 3 números de 0 a 8, onde o número zero um representa o espaço em branco. Assuma que o brinquedo sempre estará embaralhado. A entrada termina com o final do arquivo."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1057",
        "saida": "Para cada caso, imprima o número do caso seguido do menor tempo requerido. Se for impossível movê-los como descrito, imprima ‘trapped’ ao invés de imprimir o tempo. Note que o primeiro caso de teste corresponde à figura acima.",
        "descricao": "Você está jogando um jogo de computador no qual três robôs (Aneed, Ben e Cindy) estão presos em um labirinto. Inicialmente todos os três estão situados em três localizações diferentes no labirinto. Existem três saídas através das quais os robôs têm que sair. Como esperado, há vários obstáculos no labirinto e os robôs não podem passar por eles. O labirinto pode ser modelado como uma grade quadrada, com células NxN. Os robôs são colocados em três diferentes células no labirinto. Você pode comandá-los a se mover. Um único comando será ativado para os três robôs simultaneamente. Um robô irá mover-se para uma nova posição se for uma célula vazia dentro do labirinto ou se for uma das células alvo. Caso contrário, o comando será ignorado para aquele robô. A sua tarefa é comandá-los de forma  que todos eles cheguem nas três células alvo (em qualquer ordem). Cada movimento leva 1 unidade de tempo e consiste em: Move North - O robô se move uma célula para o norte. Move East - O robô se move uma célula para o leste. Move South - O robô se move uma célula para o sul. Move West - O robô se move uma célula para o oeste. Cada célula consiste em um dos seguintes caracteres: A – Posição Inicial de Aneed B – Posição Inicial de Ben C – Posição Inicial de Cindy . – Célula vazia # - Obstáculo X – Célula alvo Assuma que para todo labirinto cada uma das três letras  (A B C) aparecerá exatamente uma vez e cada X aparecerá 3 vezes.",
        "titulo": "Chegando Junto",
        "entrada": "A primeira linha de entrada é um inteiro T (T < 50), que indica o número de casos de testes. Cada caso inicia com um inteiro N (2 < N < 10).  Cada uma das próximas N linhas contém N caracteres cada que preencherão o labirinto."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1956",
        "saida": "A linha da saída deve consistir apenas de dois valores, separados por um espaço em branco, de modo que o primeiro represente o número de famílias élficas que habitam a floresta de acácias e o segundo represente o custo mínimo necessário para reconstruir as pontes visando satisfazer a tradição antiga.",
        "descricao": "Talvez você não saiba, mas nem todos os elfos foram embora para Valinor. Há lendas segundo as quais alguns noldor vivem numa floresta de acácias ao norte de Chapecó, embora mortal algum jamais os tenha visto, pois sobre suas habitações paira um encantamento de ocultação entoado pela Senhora Galadriel pouco antes de tomar o último barco para as Terras Imortais. Cada habitação está construída na copa de uma acácia, e há várias pontes de corda élfica conectando pares de habitações, satisfazendo a seguinte tradição antiga: se dois elfos pertencem à mesma família mas moram em casas diferentes, então é possível sair da habitação onde um mora e chegar na habitação onde o outro mora tomando um caminho composto apenas de pontes de corda élfica. Reciprocamente, se dois elfos não pertencem à mesma família, eles não moram na mesma casa, e qualquer modo de sair da casa de um e chegar na casa do outro precisa obrigatoriamente passar pelo chão. A Terra já enfrentou ameaças terrível, como as de Morgoth e de Sauron. Porém, nenhuma se compara com a ameaça que os próprios homens estão sendo para a Terra. Pois noutro dia um fumante descuidado jogou uma bituca de cigarro próximo à floresta de acácias e o fogo se alastrou. Os elfos conseguiram salvar suas habitações, mas todas as pontes foram destruídas. Agora, eles querem reconstruir as pontes, mas não todas, já que as cordas élficas dos antigos noldor lhes são muitíssimo preciosas. Eles querem reconstruir apenas as pontes que realmente são necessárias para que a tradição antiga mencionada seja novamente satisfeita, e utilizando o mínimo possível de corda élfica. A tarefa de decidir quais pontes devem ser reconstruídas foi designada a você. Se você não encontrar um meio, ninguém mais encontrará.",
        "titulo": "Acácias",
        "entrada": "A primeira linha da entrada consiste de um único inteiro N (1 ≤ N ≤ 104), o qual representa o número de habitações élficas na floresta de acácias, as quais são designadas pelos inteiros de 1 a N. Cada i-ésima (1 ≤ i ≤ N - 1) das N - 1 linhas seguintes consiste de um inteiro não-negativo k seguido por k pares de inteiros j e cij (i < j ≤ N, 1 ≤ cij ≤ 106), indicando que havia uma ponte entre as moradias i e j e que reconstruí-la custa cij metros de corda élfica. Cada ponte é descrita exatamente uma vez na entrada e não há mais de 106 pontes ao todo."
    }
]