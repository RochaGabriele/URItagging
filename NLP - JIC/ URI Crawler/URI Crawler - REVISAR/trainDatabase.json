[
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1541",
        "saida": "Você deverá informar um número inteiro, o qual representa a medida do lado do terreno. Este valor deverá ser truncado caso necessário.",
        "entrada": "A entrada é composta de vários casos de testes. Cada caso de teste é composto de três números inteiros A, B e C ( > 0 e ≤ 1000) separados por um espaço. Estes números representam as medidas da casa (A e B) e o percentual máximo liberado para construir nesse bairro (C). Um único valor igual a 0 indica o fim das entradas.",
        "titulo": "Construindo Casas",
        "descricao": "Sr Pi é um construtor famoso na cidade de Programolândia. Ele precisa de sua ajuda para encontrar, os melhores terrenos da cidade, para os vários projetos que ele possui, para a construção de casas. Considere que ele tenha por exemplo, um projeto para construir uma casa de 8 metros por 10 metros e a legislação do município permite construir no máximo de 100% do terreno. Como todos os terrenos nesta cidade são perfeitamente quadrados e o valor dos lados da casa são apenas uma referência para a área total a ser construída (80 metros quadrados), o sr PI precisaria de um terreno de 8.994 metros, o que truncado daria como resultado 8 metros e o tamanho real da casa seria 64 metros quadrados. Se a legislação permitisse construir em 50% do terreno, o terreno teria que ter 160 metros para que 50% dele fosse 80 metros quadrados, o suficiente para uma casa de 8 x 8 metros (64 metros quadrados). No primeiro caso de teste, como o percentual para construir é de apenas 20%, o terreno teria que ter 20 metros de lado para que 1/5 deste terreno tenha tamanho de 80 metros quadrados. Ajude o sr PI a determinar o tamanho minimo do terreno."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1075",
        "saida": "Imprima todos valores que quando divididos por N dão resto = 2, um por linha.",
        "entrada": "A entrada contém um valor inteiro N (N < 10000).",
        "titulo": "Resto 2",
        "descricao": "Leia um valor inteiro N. Apresente todos os números entre 1 e 10000 que divididos por N dão resto igual a 2."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1190",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um único caractere Maiúsculo O ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.",
        "titulo": "Área Direita",
        "descricao": "Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média considerando somente aqueles elementos que estão na área direita da matriz, conforme ilustrado abaixo (área verde)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1172",
        "saida": "Para cada posição do vetor, escreva \"X[i] = x\", onde i é a posição do vetor e x é o valor armazenado naquela posição.",
        "entrada": "A entrada contém 10 valores inteiros, podendo ser positivos ou negativos.",
        "titulo": "Substituição em Vetor I",
        "descricao": "Faça um programa que leia um vetor X[10]. Substitua a seguir, todos os valores nulos e negativos do vetor X por 1. Em seguida mostre o vetor X."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1789",
        "saida": "Para cada caso de teste, imprima uma única linha indicando o nível de velocidade da lesma mais veloz do grupo.",
        "entrada": "A entrada consiste de múltiplos casos de teste, e cada um consiste em duas linhas: A primeira linha contém um inteiro L (1 ≤ L ≤ 500) representando o número de lesmas do grupo, e a segunda linha contém L inteiros Vi (1 ≤ Vi ≤ 50) representando as velocidades de cada lesma do grupo. A entrada termina com o fim do arquivo (EOF).",
        "titulo": "A Corrida de Lesmas",
        "descricao": "A corrida de lesmas é um esporte que cresceu muito nos últimos anos, fazendo com que várias pessoas dediquem suas vidas tentando capturar lesmas velozes, e treina-las para faturar milhões em corridas pelo mundo. Porém a tarefa de capturar lesmas velozes não é uma tarefa muito fácil, pois praticamente todas as lesmas são muito lentas. Cada lesma é classificada em um nível dependendo de sua velocidade: Nível 1: Se a velocidade é menor que 10 cm/h . Nível 2: Se a velocidade é maior ou igual a 10 cm/h e menor que 20 cm/h . Nível 3: Se a velocidade é maior ou igual a 20 cm/h . Sua tarefa é identificar qual nível de velocidade da lesma mais veloz de um grupo de lesmas."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1113",
        "saida": "Para cada caso de teste imprima “Crescente”, caso os valores tenham sido digitados na ordem crescente, caso contrário imprima a mensagem “Decrescente”.",
        "entrada": "A entrada contém vários casos de teste. Cada caso contém dois valores inteiros X e Y. A leitura deve ser encerrada ao ser fornecido valores iguais para X e Y.",
        "titulo": "Crescente e Decrescente",
        "descricao": "Leia uma quantidade indeterminada de duplas de valores inteiros X e Y. Escreva para cada X e Y uma mensagem que indique se estes valores foram digitados em ordem crescente ou decrescente."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1101",
        "saida": "Para cada dupla de valores, imprima a sequência do menor até o maior e a soma deles, conforme exemplo abaixo.",
        "entrada": "O arquivo de entrada contém um número não determinado de valores M e N. A última linha de entrada vai conter um número nulo ou negativo.",
        "titulo": "Sequência de Números e Soma",
        "descricao": "Leia um conjunto não determinado de pares de valores M e N (parar quando algum dos valores for menor ou igual a zero). Para cada par lido, mostre a sequência do menor até o maior e a soma dos inteiros consecutivos entre eles (incluindo o N e M)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1040",
        "saida": "Todas as respostas devem ser apresentadas com uma casa decimal. As mensagens devem ser impressas conforme a descrição do problema. Não esqueça de imprimir o enter após o final de cada linha, caso contrário obterá \"Presentation Error\".",
        "entrada": "A entrada contém quatro números de ponto flutuante correspendentes as notas dos alunos.",
        "titulo": "Média 3",
        "descricao": "Leia quatro números (N1, N2, N3, N4), cada um deles com uma casa decimal, correspondente às quatro notas de um aluno. Calcule a média com pesos 2, 3, 4 e 1, respectivamente, para cada uma destas notas e mostre esta média acompanhada pela mensagem \"Media: \". Se esta média for maior ou igual a 7.0, imprima a mensagem \"Aluno aprovado.\". Se a média calculada for inferior a 5.0, imprima a mensagem \"Aluno reprovado.\". Se a média calculada for um valor entre 5.0 e 6.9, inclusive estas, o programa deve imprimir a mensagem \"Aluno em exame.\". No caso do aluno estar em exame, leia um valor correspondente à nota do exame obtida pelo aluno. Imprima então a mensagem \"Nota do exame: \" acompanhada pela nota digitada. Recalcule a média (some a pontuação do exame com a média anteriormente calculada e divida por 2). e imprima a mensagem \"Aluno aprovado.\" (caso a média final seja 5.0 ou mais ) ou \"Aluno reprovado.\", (caso a média tenha ficado 4.9 ou menos). Para estes dois casos (aprovado ou reprovado após ter pego exame) apresente na última linha uma mensagem \"Media final: \" seguido da média final para esse aluno."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1049",
        "saida": "Imprima o nome do animal correspondente à entrada fornecida.",
        "entrada": "A entrada contém 3 palavras, uma em cada linha, necessárias para identificar o animal segundo a figura acima, com todas as letras minúsculas.",
        "titulo": "Animal",
        "descricao": "Neste problema, você deverá ler 3 palavras que definem o tipo de animal possível segundo o esquema abaixo, da esquerda para a direita.  Em seguida conclua qual dos animais seguintes foi escolhido, através das três palavras fornecidas."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1117",
        "saida": "Se uma nota inválida  for lida, deve ser impressa a mensagem \"nota inválida\". Quando duas notas válidas forem lidas, deve ser impressa a mensagem \"média = \" seguido do valor do cálculo. O valor deve ser apresentado com duas casas após o ponto decimal.",
        "entrada": "A entrada contém vários valores reais, positivos ou negativos. O programa deve ser encerrado quando forem lidas duas notas válidas.",
        "titulo": "Validação de Nota",
        "descricao": "Faça um programa que leia as notas referentes às duas avaliações de um aluno. Calcule e imprima a média semestral. Faça com que o algoritmo só aceite notas válidas (uma nota válida deve pertencer ao intervalo [0,10]). Cada nota deve ser validada separadamente."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1179",
        "saida": "Imprima a saída conforme o exemplo abaixo.",
        "entrada": "A entrada contém 15 números inteiros.",
        "titulo": "Preenchimento de Vetor IV",
        "descricao": "Neste problema você deverá ler 15 valores colocá-los em 2 vetores conforme estes valores forem pares ou ímpares. Só que o tamanho de cada um dos dois vetores é de 5 posições. Então, cada vez que um dos dois vetores encher, você deverá imprimir todo o vetor e utilizá-lo novamente para os próximos números que forem lidos. Terminada a leitura, deve-se imprimir o conteúdo que restou em cada um dos dois vetores, imprimindo primeiro os valores do vetor impar. Cada vetor pode ser preenchido tantas vezes quantas for necessário."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1115",
        "saida": "Para cada caso de teste mostre em qual quadrante do sistema cartesiano se encontra a coordenada lida, conforme o exemplo.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste contém 2 valores inteiros.",
        "titulo": "Quadrante",
        "descricao": "Escreva um programa para ler as coordenadas (X,Y) de uma quantidade indeterminada de pontos no sistema cartesiano. Para cada ponto escrever o quadrante a que ele pertence. O algoritmo será encerrado quando pelo menos uma de duas coordenadas for NULA (nesta situação sem escrever mensagem alguma)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1079",
        "saida": "Para cada caso de teste, imprima a média ponderada dos 3 valores, conforme exemplo abaixo.",
        "entrada": "O arquivo de entrada contém um valor inteiro N na primeira linha. Cada N linha a seguir contém um caso de teste com três valores com uma casa decimal cada valor.",
        "titulo": "Médias Ponderadas",
        "descricao": "Leia 1 valor inteiro N, que representa o número de casos de teste que vem a seguir. Cada caso de teste consiste de 3 valores reais, cada um deles com uma casa decimal. Apresente a média ponderada para cada um destes conjuntos de 3 valores, sendo que o primeiro valor tem peso 2, o segundo valor tem peso 3 e o terceiro valor tem peso 5."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1959",
        "saida": "A saída é o perímetro P do polígono regular em uma única linha.",
        "entrada": "A entrada tem dois inteiros positivos: N e L, que são, respectivamente, o número de lados e o comprimento de cada lado de um polígono regular (3 ≤ N ≤ 1000000 and 1 ≤ L ≤ 4000).",
        "titulo": "Polígonos Regulares Simples",
        "descricao": "Na geometria Euclidiana, um polígono regular é um polígono em que todos os ângulos são iguais e todos os lados tem o mesmo comprimento. Um polígono simples é aquele cujos segmentos de reta não se interceptam. Abaixo pode-se ver vários mosaicos feitos por polígonos regulares. Você deve escrever um programa que, dados o número e o comprimento dos lados de um polígono regular, mostre seu perímetro."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1096",
        "saida": "Imprima a sequencia conforme exemplo abaixo",
        "entrada": "Não há nenhuma entrada neste problema.",
        "titulo": "Sequencia IJ 2",
        "descricao": "Você deve fazer um programa que apresente a sequencia conforme o exemplo abaixo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1864",
        "saida": "Imprima os N primeiros caracteres da citação de Søren Kierkegaard definida pelas letras que foram sublinhadas no enunciado deste problema. Preste atenção, pois nenhum espaço foi sublinhado — você é que deve adivinhar o número e a localização dos espaços na frase. A única linha da saída deve consistir apenas de letras maiúsculas e espaços e ser finalizada por fim de linha.",
        "entrada": "A entrada consiste de um único inteiro N (1 ≤ N ≤ 34) numa linha.",
        "titulo": "Nossos Dias Nunca Voltarão",
        "descricao": "E aí? Curtiu a Escola de Inverno deste ano? Para que esta Escola acontecesse, foram muitos que trabalharam, seja na elaboração dos problemas, na configuração do Portal, na logística do evento ou na captação dos recursos. Nosso agradecimento especial deste ano vai para o Prof. Ricardo Oliveira, que não somente aceitou vir ministrar as oficinas como também participou ativamente na organização da Escola. Temos certeza que a experiência e a carreira dele no ICPC como competidor e como coach motivaram e inspiraram todos nós. Esperamos que você tenha gostado desses últimos dias em Essos e em Westeros, que tenha aprendido bastante e que tenha se divertido. Mas não é só em Essos e em Westeros que você deve se divertir. Aqui, em Além da Muralha, programar também é divertido. Continue estudando, continue treinando, e cada vez mais. O importante é o caminho que você vai trilhar daqui para frente. Nosso conselho é que você procure sempre aproveitar ao máximo cada momento, cada oficina, cada escola, cada treino, cada tempo de prática ou estudo em casa. Nossos dias nunca voltarão."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1133",
        "saida": "Imprima todos os valores conforme exemplo abaixo, sempre em ordem crescente.",
        "entrada": "O arquivo de entrada contém 2 valores inteiros quaisquer, não necessariamente em ordem crescente.",
        "titulo": "Resto da Divisão",
        "descricao": "Escreva um programa que leia 2 valores X e Y e que imprima todos os valores entre eles cujo resto da divisão dele por 5 for igual a 2 ou igual a 3."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2029",
        "saida": "Para cada teste, a saída contém na primeira linha a mensagem \"ALTURA = \", com um espaço depois de ALTURA e outro depois do símbolo de igualdade, seguido do valor da altura do recipiente com duas casas decimais após a vírgula e na segunda linha a mensagem \"AREA = \", também com um espaço depois de AREA e outro depois do símbolo de igualdade, seguido do valor da area da boca(entrada) do recipiente com duas casas decimais após a vírgula. - Não esqueça da quebra de linha ao final da saída,caso contrário você receberá \"Presentation Error\".",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de duas linhas contendo em cada uma um valor de ponto flutuante de dupla precisão com duas casas decimais após a vírgula, sendo um V (1.00 ≤ V ≤ 10000.00) e outro D (1.00 ≤ D ≤ 100.00), representando respectivamente o volume e o diâmetro do recipiente.",
        "titulo": "Reservatório de Mel",
        "descricao": "Seu Júlio é proprietário de um grande apiário situado no interior da paraíba. Todo ano, semestralmente, seu Júlio coleta o mel produzido pelas abelhas da sua propriedade e armazena-o em um recipiente de formato CILÍNDRICO para que facilite o transporte do mel para os estabelecimentos que encomendam esse produto natural para a comercialização. Certa vez seu Júlio percebeu que devido a um crescimento na produção do mel, em relação ao semestre anterior, o recipiente que possuia não suportaria o volume de mel produzido por suas abelhas. Seu Júlio precisa agora que você faça um programa que informado o volume de mel em cm3 e o diâmetro da parte interna do recipiente em cm, calcule e mostre: - Qual deve ser a altura(em cm) da parte interna do recipiente; - A área(em cm2) da boca(entrada) do recipiente. Obs.: Considere π = 3.14"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2176",
        "saida": "Imprima uma linha contendo a mensagem S adicionada do bit extra B.",
        "entrada": "Cada caso de teste consiste em uma linha contendo a mensagem S, a qual consiste em no mínimo 1 e no máximo 100 bits.",
        "titulo": "Paridade",
        "descricao": "A popularização das redes WiFi aumentou a taxa de perda de informações sendo transferidas, uma vez que diversos fatores do meio ambiente podem facilmente comprometer os dados durante o tráfego. A URI, Unidade de Recuperação de Informações, tem como principal objetivo identificar e corrigir erros em mensagens enviadas via redes WiFi. A técnica utilizada pela URI para identificação de erros é o teste de paridade, o qual pode ser descrito da seguinte forma: Seja S uma mensagem que será enviada de um dispositivo para outro. Antes de S ser enviada, um bit extra B é adicionado no final da representação binária de S. Se a mensagem S tiver um número par de bits de valor 1, o bit extra B terá valor 0. Caso contrário, se S tiver um número ímpar de bits de valor 1, B terá valor 1. Desta forma, após a inserção do bit B, a mensagem S terá um número par de bits de valor 1. Quando o destinatário recebe a mensagem S ele faz a contagem de bits de valor 1. Se a quantidade for par, significa que a mensagem chegou com sucesso. Caso contrário, significa que a mensagem sofreu uma alteração e não está correta. Sua tarefa é escrever um algoritmo que faça a inserção do bit B na mensagem S, de forma que após a inserção a mensagem S tenha um número par de bits de valor 1."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1097",
        "saida": "Imprima a sequencia conforme exemplo abaixo.",
        "entrada": "Não há nenhuma entrada neste problema.",
        "titulo": "Sequencia IJ 3",
        "descricao": "Você deve fazer um programa que apresente a sequencia conforme o exemplo abaixo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1157",
        "saida": "Escreva todos os divisores de N, um valor por linha.",
        "entrada": "O arquivo de entrada contém um valor inteiro.",
        "titulo": "Divisores I",
        "descricao": "Ler um número inteiro N e calcular todos os seus divisores."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1041",
        "saida": "A saída deve apresentar o quadrante em que o ponto se encontra.",
        "entrada": "A entrada contem as coordenadas de um ponto.",
        "titulo": "Coordenadas de um Ponto",
        "descricao": "Leia 2 valores com uma casa decimal (x e y), que devem representar as coordenadas de um ponto em um plano. A seguir, determine qual o quadrante ao qual pertence o ponto, ou se está sobre um dos eixos cartesianos ou na origem (x = y = 0). Se o ponto estiver na origem, escreva a mensagem “Origem”. Se o ponto estiver sobre um dos eixos escreva “Eixo X” ou “Eixo Y”, conforme for a situação."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1035",
        "saida": "Mostre a respectiva mensagem após a validação dos valores.",
        "entrada": "Quatro números inteiros A, B, C e D.",
        "titulo": "Teste de Seleção 1",
        "descricao": "Leia 4 valores inteiros A, B, C e D. A seguir, se B for maior do que C e se D for maior do que A, e a soma de C com D for maior que a soma de A e B e se C e D, ambos, forem positivos e se a variável A for par escrever a mensagem \"Valores aceitos\", senão escrever \"Valores nao aceitos\"."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1052",
        "saida": "Imprima por extenso o nome do mês correspondente ao número existente na entrada, com a primeira letra em maiúscula.",
        "entrada": "A entrada contém um único valor inteiro.",
        "titulo": "Mês",
        "descricao": "Leia um valor inteiro entre 1 e 12, inclusive. Correspondente a este valor, deve ser apresentado como resposta o mês do ano por extenso, em inglês, com a primeira letra maiúscula."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1827",
        "saida": "Para cada caso de teste, imprima a matriz correspondente conforme o exemplo abaixo. Após cada caso de teste, imprima uma linha em branco.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF (fim de arquivo. Cada caso de teste consiste de um valor inteiro ímpar N (5 ≤ N ≤ 101) que é o tamanho da matriz.",
        "titulo": "Matriz Quadrada IV",
        "descricao": "Neste programa seu trabalho é ler um valor inteiro que será o tamanho da matriz quadrada (largura e altura) que será preenchida da seguinte forma: a parte externa é preenchida com 0, a parte interna é preenchida com 1, a diagonal principal é preenchida com 2, a diagonal secundária é preenchida com 3 e o ponto central contém o valor 4, conforme os exemplos abaixo. Obs: o quadrado com '1' sempre começa na posição tamanho/3, tanto na largura quanto quanto na altura. A linha e a coluna começam em zero (0)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1145",
        "saida": "Cada sequência deve ser impressa em uma linha apenas, com 1 espaço em branco entre cada número, conforme exemplo abaixo. Não deve haver espaço em branco após o último valor da linha.",
        "entrada": "O arquivo de entrada contém dois valores inteiros, (1 < X < 20) e (X < Y < 100000).",
        "titulo": "Sequência Lógica 2",
        "descricao": "Escreva um programa que leia dois valores X e Y. A seguir, mostre uma sequência de 1 até Y, passando para a próxima linha a cada X números."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1174",
        "saida": "Para cada valor do vetor menor ou igual a 10, escreva \"A[i] = x\", onde i é a posição do vetor e x é o valor armazenado na posição, com uma casa após o ponto decimal.",
        "entrada": "A entrada contém 100 valores, podendo ser inteiros, reais, positivos ou negativos.",
        "titulo": "Seleçao em Vetor I",
        "descricao": "Faça um programa que leia um vetor A[100]. No final, mostre todas as posições do vetor que armazenam um valor menor ou igual a 10 e o valor armazenado em cada uma das posições."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1828",
        "saida": "Para cada caso de teste deverá ser impressa a mensagem \"Caso #t: R\", onde t é o número do caso de teste (cuja contagem se inicia no número um) e R é uma das três reações possíveis de Sheldon: \"Bazinga!\", \"Raj trapaceou!\", ou \"De novo!\".",
        "entrada": "A entrada consiste em uma série de casos de teste. A primeira linha contém um inteiro positivo T (T ≤ 100), que representa o número de casos de teste. Cada caso de teste é representado por uma linha da entrada, contendo as escolhas de Sheldon e Raj, respectivamente, separadas por um espaço em branco. As escolha possíveis são as personagens do jogo: pedra, papel, tesoura, lagarto e Spock.",
        "titulo": "Bazinga!",
        "descricao": "No oitavo episodio da segunda temporada do seriado The Big Bang Theory, The Lizard-Spock Expansion, Sheldon e Raj discutem qual dos dois é o melhor: o filme Saturn 3 ou a série Deep Space 9. A sugestão de Raj para a resolução do impasse é uma disputa de Pedra-Papel-Tesoura. Contudo, Sheldon argumenta que, se as partes envolvidas se conhecem, entre 75% e 80% das disputas de Pedra-Papel-Tesoura terminam empatadas, e então sugere o Pedra-Papel-Tesoura-Lagarto-Spock. As regras do jogo proposto são: a tesoura corta o papel;o papel embrulha a pedra;a pedra esmaga o lagarto;o lagarto envenena Spock;Spock destrói a tesoura;a tesoura decapita o lagarto;o lagarto come o papel;o papel contesta Spock;Spock vaporiza a pedra;a pedra quebra a tesoura. Embora a situação não se resolva no episódio (ambos escolhem Spock, resultando em um empate), não é difıcil deduzir o que aconteceria se a disputa continuasse. Caso Sheldon vencesse, ele se deleitaria com a vitória, exclamando \"Bazinga!\"; caso Raj vencesse, ele concluiria que \"Raj trapaceou!\"; caso o resultado fosse empate, ele exigiria nova partida: \"De novo!\". Conhecidas as personagens do jogo escolhido por ambos, faça um programa que imprima a provável reação de Sheldon."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1165",
        "saida": "Para cada caso de teste de entrada, imprima a mensagem “X eh primo” ou “X nao eh primo”, de acordo com a especificação fornecida.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N (1 ≤ N ≤ 100), indicando o número de casos de teste da entrada. Cada uma das N linhas seguintes contém um valor inteiro X (1 < X ≤ 107), que pode ser ou não, um número primo.",
        "titulo": "Número Primo",
        "descricao": "Na matemática, um Número Primo é aquele que pode ser dividido somente por 1 (um) e por ele mesmo. Por exemplo, o número 7 é primo, pois pode ser dividido apenas pelo número 1 e pelo número 7."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1181",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um número L (0 ≤ L ≤ 11) indicando a linha que será considerada para operação. A segunda linha de entrada contém um único caractere Maiúsculo T ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz, sendo que a mesma é preenchida linha por linha, da linha 0 até a linha 11, sempre da esquerda para a direita.",
        "titulo": "Linha na Matriz",
        "descricao": "Neste problema você deve ler um número, indicando uma linha da matriz na qual uma operação deve ser realizada, um caractere maiúsculo, indicando a operação que será realizada, e todos os elementos de uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média dos elementos que estão na área verde da matriz, conforme for o caso. A imagem abaixo ilustra o caso da entrada do valor 2 para a linha da matriz, demonstrando os elementos que deverão ser considerados na operação."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1037",
        "saida": "A saída deve ser uma mensagem conforme exemplo abaixo.",
        "entrada": "O arquivo de entrada contém um número com ponto flutuante qualquer.",
        "titulo": "Intervalo",
        "descricao": "Você deve fazer um programa que leia um valor qualquer e apresente uma mensagem dizendo em qual dos seguintes intervalos ([0,25], (25,50], (50,75], (75,100]) este valor se encontra. Obviamente se o valor não estiver em nenhum destes intervalos, deverá ser impressa a mensagem “Fora de intervalo”. O símbolo ( representa \"maior que\". Por exemplo: [0,25]  indica valores entre 0 e 25.0000, inclusive eles. (25,50] indica valores maiores que 25 Ex: 25.00001 até o valor 50.0000000"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1144",
        "saida": "Imprima a saída conforme o exemplo fornecido.",
        "entrada": "O arquivo de entrada contém um número inteiro positivo N (1 < N < 1000).",
        "titulo": "Sequência Lógica",
        "descricao": "Escreva um programa que leia um valor inteiro N. N * 2 linhas de saída serão apresentadas na execução do programa, seguindo a lógica do exemplo abaixo. Para valores com mais de 6 dígitos, todos os dígitos devem ser apresentados."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2167",
        "saida": "A saída é o índice da medida em que houve a primeira queda de velocidade no teste. Caso não aconteça uma queda de velocidade a saída deve ser o número zero.",
        "entrada": "A entrada é um teste do motor e é dada em duas linhas. A primeira tem o número N de medidas de velocidade do motor (1 < N ≤ 100). A segunda linha tem N inteiros: o número de RPM (rotações por minuto) Ri de cada medida (0 ≤ Ri ≤ 10000, para todo Ri, tal que 1 ≤ i ≤ N). Uma medida é considerada uma queda se é menor que a medida anterior.",
        "titulo": "Falha do Motor",
        "descricao": "Ao observar a curva de velocidade de um motor, o engenheiro Zé percebeu que sempre ocorria uma queda quando as medidas eram feitas em intervalos de 10 ms. Mas esta queda acontecia em medidas diferentes a cada novo teste do motor. Zé ficou curioso com essa falta de padrão e quer saber, para cada teste do motor, qual a primeira medida em que ocorre uma queda de velocidade."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2143",
        "saida": "Seu programa deverá imprimir a soma da quantidade de pedidos de cada pessoa. Não haverá linha em branco entre os casos de teste.",
        "entrada": "A entrada é composta por T (1 ≤ T ≤ 100) indicando a quantidade de casos de teste e então, T inteiros N (3 ≤ N ≤ 104), indicando a quantidade de pessoas. A mesa é retangular e haverá pelo menos e no máximo uma pessoa em uma das pontas, isto é, se uma ponta estiver vazia, a outra deve ser ocupada, ou senão, as duas pontas estarão ocupadas, mas o número de pessoas que não estão nas pontas sempre será par. O final da entrada é indicado por T = 0.",
        "titulo": "A Volta do Radar",
        "descricao": "Todo ano após a competição que ocorre na cidade de Taxilândia, os participantes e os coaches vão para o célebre restaurante Radar. Porém, os garçons (sempre muito gentis e educados) ficam sobrecarregados devido à quantidade de pessoas, e consequentemente, acabam demorando um pouco para atender a um pedido. Os participantes ou coaches que sentam nas pontas são os privilegiados, pois são atendidos com somente um pedido, mas os demais precisam sempre pedir duas vezes, pois os garçons (apesar de gentis e educados) são desatentos e se esquecem facilmente dos pedidos. Além disso, há uma superstição entre os participantes e coaches de que se não houver um número par de pessoas que não sentam nas pontas, na próxima competição nenhuma equipe da universidade conseguirá vencer. Portanto, sua tarefa é determinar a soma da quantidade de pedidos de cada um para saber se vale a pena ir ao Radar. Mas apesar do resultado, lembre-se: sempre vale a pena ir ao Radar!"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1131",
        "saida": "Após cada leitura dos gols, deve ser impressa a mensagem \"Novo grenal (1-sim 2-nao)\". Quando o algoritmo for encerrado deve ser mostrado as estatísticas conforme a descrição apresentada acima. Obs: a palavra \"Gremio\" deve ser impressa sem acento, conforme o exemplo abaixo.",
        "entrada": "O arquivo de entrada contém 2 valores inteiros, correspondentes aos gols marcados pelo Inter e pelo Grêmio respectivamente. Em seguida háverá um inteiro (1 ou 2), correspondente à repetição do programa.",
        "titulo": "Grenais",
        "descricao": "A Federação Gaúcha de Futebol contratou você para escrever um programa para fazer uma estatística do resultado de vários GRENAIS. Escreva um programa para ler o número de gols marcados pelo Inter e pelo Grêmio em um GRENAL. Logo após escrever a mensagem \"Novo grenal (1-sim 2-nao)\" e solicitar uma resposta. Se a resposta for 1, o algoritmo deve ser executado novamente solicitando o número de gols marcados pelos times em uma nova partida, caso contrário deve ser encerrado imprimindo: - Quantos GRENAIS fizeram parte da estatística. - O número de vitórias do Inter. - O número de vitórias do Grêmio. - O número de Empates. - Uma mensagem indicando qual o time que venceu o maior número de GRENAIS (ou \"Nao houve vencedor\", caso termine empatado)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1006",
        "saida": "Imprima a variável MEDIA conforme exemplo abaixo, com 1 dígito após o ponto decimal e com um espaço em branco antes e depois da igualdade. Assim como todos os problemas, não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá \"Presentation Error\".",
        "entrada": "O arquivo de entrada contém 3 valores com uma casa decimal, de dupla precisão (double).",
        "titulo": "Média 2",
        "descricao": "Leia 3 valores, no caso, variáveis A, B e C, que são as três notas de um aluno. A seguir, calcule a média do aluno, sabendo que a nota A tem peso 2, a nota B tem peso 3 e a nota C tem peso 5. Considere que cada nota pode ir de 0 até 10.0, sempre com uma casa decimal."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1013",
        "saida": "Imprima o maior dos três valores seguido por um espaço e a mensagem \"eh o maior\".",
        "entrada": "O arquivo de entrada contém três valores inteiros.",
        "titulo": "O Maior",
        "descricao": "Faça um programa que leia três valores e apresente o maior dos três valores lidos seguido da mensagem “eh o maior”. Utilize a fórmula:"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1044",
        "saida": "A saída deve conter uma das mensagens conforme descrito acima.",
        "entrada": "A entrada contém valores inteiros.",
        "titulo": "Múltiplos",
        "descricao": "Leia 2 valores inteiros (A e B). Após, o programa deve mostrar uma mensagem \"Sao Multiplos\" ou \"Nao sao Multiplos\", indicando se os valores lidos são múltiplos entre si."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1016",
        "saida": "Imprima o tempo necessário seguido da mensagem \" minutos\".",
        "entrada": "O arquivo de entrada contém um número inteiro.",
        "titulo": "Distância",
        "descricao": "Dois carros (X e Y) partem em uma mesma direção. O carro X sai com velocidade constante de 60 Km/h e o carro Y sai com velocidade constante de 90 Km/h. Em uma hora (60 minutos) o carro Y consegue se distanciar 30 quilômetros do carro X, ou seja, consegue se afastar um quilômetro a cada 2 minutos. Leia a distância (em Km) e calcule quanto tempo leva (em minutos) para o carro Y tomar essa distância do outro carro."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1933",
        "saida": "Seu programa deve produzir uma única linha com um inteiro representando o valor da carta que maximiza a probabilidade de o jogador ganhar a partida.",
        "entrada": "A entrada consiste de uma ´unica linha que contém dois inteiros, A (1 ≤ A ≤ 13) e B (1 ≤ B ≤ 13) indicando os valores das duas primeiras cartas recebidas.",
        "titulo": "Tri-du",
        "descricao": "Tri-du é um jogo de cartas derivado do popular jogo de Truco. O jogo utiliza um baralho normal de 52 cartas, com treze cartas de cada naipe, mas os naipes são ignorados. Apenas o valor das cartas,considerados como inteiros de 1 a 13, são utilizados. No jogo, cada jogador recebe três cartas. As regras são simples: Um trio (três cartas de mesmo valor) ganha de uma dupla (duas cartas de mesmo valor). Um trio formado por cartas de maior valor ganha de um trio formado por cartas de menor valor. Uma dupla formada por cartas de maior valor ganha de uma dupla formada por cartas de menor valor. Note que o jogo pode não ter ganhador em muitas situações; nesses casos, as cartas distribuídas são devolvidas ao baralho, que é embaralhado e uma nova partida é iniciada Um jogador já recebeu duas das cartas que deve receber, e conhece seus valores. Sua tarefa é escrever um programa para determinar qual o valor da terceira carta que maximiza a probabilidade de esse jogador ganhar o jogo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1865",
        "saida": "Para cada caso de teste imprima um caractere ‘Y’, caso a pessoa tenha conseguido levantar , ou ‘N’, caso não tenha conseguido.",
        "entrada": "Um número inteiro C será informado, que será a quantidade de casos de teste. Cada caso de teste inicia com uma palavra, que é o primeiro nome de quem está tentando levantar o Mjölnir, e um inteiro N (1 ≤ N ≤ 25000), indicando a força aplicada para cima, em Newtons, ao puxar o martelo, de modo a tentar levantá-lo.",
        "titulo": "Mjölnir",
        "descricao": "Odin criou para Thor a mais fiel e poderosa arma possível, o martelo Mjölnir. Feito de um minério místico especial chamado Uru e forjado no coração de uma estrela pelos Deuses ferreiros de Asgard, Brokk e Eitri, os lendários ferreiros. Um dia, Thor desafiou seus amigos para ver quem conseguia levantar o Mjölnir. Escreva um programa que, dado um nome, e a força, em Newtons, aplicado ao tentar levantar o Mjölnir, informar se a pessoa conseguiu ou não levantá-lo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1007",
        "saida": "Imprima a mensagem DIFERENCA com todas as letras maiúsculas, conforme exemplo abaixo, com um espaço em branco antes e depois da igualdade.",
        "entrada": "O arquivo de entrada contém 4 valores inteiros.",
        "titulo": "Diferença",
        "descricao": "Leia quatro valores inteiros A, B, C e D. A seguir, calcule e mostre a diferença do produto de A e B pelo produto de C e D segundo a fórmula: DIFERENCA = (A * B - C * D)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1070",
        "saida": "A saída será uma sequência de seis números ímpares.",
        "entrada": "A entrada será um valor inteiro positivo.",
        "titulo": "Seis Números Ímpares",
        "descricao": "Leia um valor inteiro X. Em seguida apresente os 6 valores ímpares consecutivos a partir de X, um valor por linha, inclusive o X ser for o caso."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1143",
        "saida": "Imprima a saída conforme o exemplo fornecido.",
        "entrada": "O arquivo de entrada contém um número inteiro positivo N.",
        "titulo": "Quadrado e ao Cubo",
        "descricao": "Escreva um programa que leia um valor inteiro N (1 < N < 1000). Este N é a quantidade de linhas de saída que serão apresentadas na execução do programa."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1159",
        "saida": "Imprima a saida conforme a explicação acima e o exemplo abaixo.",
        "entrada": "O arquivo de entrada contém muitos valores inteiros. O último valor do arquivo é zero.",
        "titulo": "Soma de Pares Consecutivos",
        "descricao": "O programa deve ler um valor inteiro X indefinidas vezes. (O programa irá parar quando o valor de X for igual a 0). Para cada X lido, imprima a soma dos 5 pares consecutivos a partir de X, inclusive o X , se for par. Se o valor de entrada for 4, por exemplo, a saída deve ser 40, que é o resultado da operação: 4+6+8+10+12, enquanto que se o valor de entrada for 11, por exempo, a saída deve ser 80, que é a soma de 12+14+16+18+20."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1847",
        "saida": "Imprima uma linha contendo uma carinha feliz ou triste, representando como fica o humor do povo de Westeros de acordo com as tendências climáticas.",
        "entrada": "A entrada consiste apenas de três inteiros, A, B e C (-100 ≤ A, B, C ≤ 100), os quais representam respectivamente as temperaturas registradas no 1º, no 2º e no 3º dias.",
        "titulo": "Bem-vindos e Bem-vindas ao Inverno!",
        "descricao": "Bem-vindos e bem-vindas à Escola de Inverno da Maratona de Programação 2015 de Erechim! Esperamos sinceramente que vocês aprendam muito nestes dias para que tenham muito sucesso nas competições de Programação ainda por vir, mas sobretudo esperamos que vocês curtam a Escola, pois quando nos divertimos e temos prazer em estudar e programar, o treino deixa de ser um fardo e se torna um hobby. Então, divirtam-se! O inverno é uma estação maravilhosa, não é mesmo? Todos nós amamos vestir um poncho, participar de uma roda de chimarrão, assar pinhões no fogão a lenha… Mas nem todos gostam do inverno, especialmente em lugares onde o inverno costuma ser muito cruel. Em Westeros, por exemplo, o humor das pessoas é definido de acordo com as tendências climáticas. Com base nas temperaturas dos três últimos dias, as pessoas podem ficar tristes ou felizes, ficando mais propensas a fazer guerra ou fazer amor, respectivamente. E, sejamos sinceros, é justamente por causa das cenas de amor e de guerra que amamos Game of Thrones! Se a temperatura desceu do 1º para o 2º dia, mas subiu ou permaneceu constante do 2º para o 3º, as pessoas ficam felizes (primeira figura). Se a temperatura subiu do 1º para o 2º dia, mas desceu ou permaneceu constante do 2º para o 3º, as pessoas ficam tristes (segunda figura). Se a temperatura subiu do 1º para o 2º dia e do 2º para o 3º, mas subiu do 2º para o 3º menos do que subira do 1º para o 2º, as pessoas ficam tristes (terceira figura). Se a temperatura subiu do 1º para o 2º dia e do 2º para o 3º, mas subiu do 2º para o 3º no mínimo o tanto que subira do 1º para o 2º, as pessoas ficam felizes (quarta figura). Se a temperatura desceu do 1º para o 2º dia e do 2º para o 3º, mas desceu do 2º para o 3º menos do que descera do 1º para o 2º, as pessoas ficam felizes (quinta figura). Se a temperatura desceu do 1º para o 2º dia e do 2º para o 3º, mas desceu do 2º para o 3º no mínimo o tanto que descera do 1º para o 2º, as pessoas ficam tristes (sexta figura). Se a temperatura permaneceu constante do 1º para o 2º dia, as pessoas ficam felizes se subiu do 2º para o 3º dia ou tristes caso contrário (respectivamente, sétima e oitava figuras)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1960",
        "saida": "A saída é o número N escrito na numeração romana em uma única linha. Use sempre letras maiúsculas.",
        "entrada": "A entrada é um número inteiro positivo N (0 < N < 1000).",
        "titulo": "Numeração Romana para Números de Página",
        "descricao": "A ECI (Editio Chronica Incredibilis ou Editora de Crônicas Incríveis) é muito tradicional quando se trata de numerar as páginas de seus livros. Ela sempre usa a numeração romana para isso. E seus livros nunca ultrapassam as 999 páginas pois, quando necessário, dividem o livro em volumes. Você deve escrever um programa que, dado um número arábico, mostra seu equivalente na numeração romana. Lembre que I representa 1, V é 5, X é 10, L é 50, C é 100, D é 500 e M representa 1000."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2139",
        "saida": "Se for Natal, imprima \"E natal!\"; se faltar somente um dia, imprima \"E vespera de natal!\"; se já passou, imprima \"Ja passou!\". Caso contrário, imprima \"Faltam X dias para o natal!\", sendo X o número de dias que faltam para o Natal.",
        "entrada": "A entrada é composta por vários casos de teste. Cada linha contém o mês e o dia do ano de 2016 (ano bissexto). A entrada termina com fim de arquivo.",
        "titulo": "Natal de Pedrinho",
        "descricao": "Pedrinho é um garoto que adora festas em família, principalmente o Natal, quando ganha presente dos pais e dos avós. Esse ano, seu pai lhe prometeu um PS4, mas somente se Pedrinho conseguir resolver alguns desafios ao longo do ano, sendo um deles, escrever um programa que calcule quantos dias faltam para o Natal. Entretanto, Pedrinho tem somente 9 anos e não tem noção alguma de programação, mas sabe que você, primo dele, mexe com \"coisas de computador\", e dessa forma, pediu para você escrever o programa para ele. Não somente isso, mas prometeu que deixaria você jogar todo final de semana e por quanto tempo quiser!"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1957",
        "saida": "A saída é o mesmo número V na base 16 em uma única linha (não esqueça do caractere de fim-de-linha). Use letras maiúsculas, conforme os exemplos.",
        "entrada": "A entrada é um número inteiro positivo V na base 10 (1 ≤ V ≤ 2 x 109).",
        "titulo": "Converter para Hexadecimal",
        "descricao": "Os dados armazenados no computador estão em binário. Uma forma econômica de ver estes números é usar a base 16 (hexadecimal). Sua tarefa consiste em escrever um programa que, dado um número natural na base 10, mostre sua representação em hexadecimal."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1047",
        "saida": "Mostre a seguinte mensagem: “O JOGO DUROU XXX HORA(S) E YYY MINUTO(S)” .",
        "entrada": "Quatro números inteiros representando a hora de início e fim do jogo.",
        "titulo": "Tempo de Jogo com Minutos",
        "descricao": "Leia a hora inicial, minuto inicial, hora final e minuto final de um jogo. A seguir calcule a duração do jogo. Obs: O jogo tem duração mínima de um (1) minuto e duração máxima de 24 horas."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1173",
        "saida": "Para cada posição do vetor, escreva \"N[i] = X\", onde i é a posição do vetor e X é o valor armazenado na posição i. O primeiro número do vetor N (N[0]) irá receber o valor de V.",
        "entrada": "A entrada contém um valor inteiro (V<=50).",
        "titulo": "Preenchimento de Vetor I",
        "descricao": "Leia um valor e faça um programa que coloque o valor lido na primeira posição de um vetor N[10]. Em cada posição subsequente, coloque o dobro do valor da posição anterior. Por exemplo, se o valor lido for 1, os valores do vetor devem ser 1,2,4,8 e assim sucessivamente. Mostre o vetor em seguida."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1001",
        "saida": "Imprima a variável X conforme exemplo abaixo, com um espaço em branco antes e depois da igualdade. Obs: O X está em maiúsculo e deve ter um espaço antes e um espaço depois do sinal de igualdade.",
        "entrada": "A entrada contém 2 valores inteiros.",
        "titulo": "Extremamente Básico",
        "descricao": "Leia 2 valores inteiros e armazene-os nas variáveis A e B. Efetue a soma de A e B atribuindo o seu resultado na variável X. Imprima X conforme exemplo apresentado abaixo. Não apresente mensagem alguma além daquilo que está sendo especificado e não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá \"Presentation Error\"."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1154",
        "saida": "A saída contém um valor correspondente à média de idade dos indivíduos. A média deve ser impressa com dois dígitos após o ponto decimal.",
        "entrada": "A entrada contém um número indeterminado de inteiros. A entrada será encerrada quando um valor negativo for lido.",
        "titulo": "Idades",
        "descricao": "Faça um algoritmo para ler um número indeterminado de dados, contendo cada um, a idade de um indivíduo. O último dado, que não entrará nos cálculos, contém o valor de idade negativa. Calcular e imprimir a idade média deste grupo de indivíduos."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1177",
        "saida": "Para cada posição do vetor, escreva \"N[i] = x\", onde i é a posição do vetor e x é o valor armazenado naquela posição.",
        "entrada": "A entrada contém um valor inteiro T (2 ≤ T ≤ 50).",
        "titulo": "Preenchimento de Vetor II",
        "descricao": "Faça um programa que leia um valor T e preencha um vetor N[1000] com a sequência de valores de 0 até T-1 repetidas vezes, conforme exemplo abaixo. Imprima o vetor N."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2164",
        "saida": "A saída é o valor de Fibonacci(n) com 1 casa decimal utilizando a fórmula de Binet dada.",
        "entrada": "A entrada é um número natural n (0 < n ≤ 50).",
        "titulo": "Fibonacci Rápido",
        "descricao": "A fórmula de Binet é uma forma de calcular números de Fibonacci. Sua tarefa é, dado um natural n, calcular o valor de Fibonacci(n) usando a fórmula acima."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1048",
        "saida": "Imprima 3 linhas na saída: o novo salário, o valor ganho de reajuste e o percentual de reajuste ganho, conforme exemplo abaixo.",
        "entrada": "A entrada contém apenas um valor de ponto flutuante, com duas casas decimais.",
        "titulo": "Aumento de Salário",
        "descricao": "A empresa ABC resolveu conceder um aumento de salários a seus funcionários de acordo com a tabela abaixo: Leia o salário do funcionário e calcule e mostre o novo salário, bem como o valor de reajuste ganho e o índice reajustado, em percentual."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1921",
        "saida": "Imprima um número inteiro, que será a quantidade de barbantes que Guilherme terá que utilizar para tornar a pipa de n lados estável.",
        "entrada": "A entrada será composta por uma única linha, que contém um inteiro 3 ≤ n ≤ 105, representando o número de lados da pipa.",
        "titulo": "Guilherme e Suas Pipas",
        "descricao": "Guilherme adora brincar com pipas, pipas de várias cores, formas e tamanhos. Ele tem percebido que para as pipas possuírem maior estabilidade, e dessa forma voarem mais alto, elas devem possuir um barbante bem esticado ligando todos os pares de pontas não vizinhas. Apesar de ser uma criança bastante criativa e astuta, Guilherme não sabe como determinar a quantidade de barbantes que ele terá que utilizar para tornar uma pipa de n lados, estável. Você pode ajudá-lo?."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1015",
        "saida": "Calcule e imprima o valor da distância segundo a fórmula fornecida, com 4 casas após o ponto decimal.",
        "entrada": "O arquivo de entrada contém duas linhas de dados. A primeira linha contém dois valores de ponto flutuante: x1 y1 e a segunda linha contém dois valores de ponto flutuante x2 y2.",
        "titulo": "Distância Entre Dois Pontos",
        "descricao": "Leia os quatro valores correspondentes aos eixos x e y de dois pontos quaisquer no plano, p1(x1,y1) e p2(x2,y2) e calcule a distância entre eles, mostrando 4 casas decimais após a vírgula, segundo a fórmula: Distancia ="
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1973",
        "saida": "Imprima uma linha contendo dois inteiros, de modo que o primeiro represente o número de Estrelas atacadas pelo irmão louco e o segundo represente o número total de carneiros não roubados.",
        "entrada": "A primeira linha da entrada consiste de um único inteiro N (1 ≤ N ≤ 106), o qual representa o número de Estrelas. A segunda linha da entrada consiste de N inteiros, de modo que o i-ésimo inteiro, Xi (1 ≤ Xi ≤ 106), representa o número inicial de carneiros em Estrela i.",
        "titulo": "Jornada nas Estrelas",
        "descricao": "Após comprar vários sítios adjacentes na região do oeste catarinense, a família Estrela construiu uma única estrada que passa por todos os sítios em sequência. O primeiro sítio da sequência foi batizado de Estrela 1, o segundo de Estrela 2, e assim por diante. Porém, o irmão que vive em Estrela 1 acabou enlouquecendo e resolveu fazer uma Jornada nas Estrelas para roubar carneiros das propriedades de seus irmãos. Mas ele está definitivamente pirado. Quando passa pelo sítio Estrela i, ele rouba apenas um carneiro daquele sítio (se o sítio tem algum) e segue ou para Estrela i + 1 ou para Estrela i - 1, dependendo se o número de carneiros em Estrela i era, respectivamente, ímpar ou par. Se não existe a Estrela para a qual ele deseja seguir, ele interrompe sua jornada. O irmão louco começa sua Jornada em Estrela 1, roubando um carneiro do seu próprio sítio."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1985",
        "saida": "Você deve imprimir o valor da compra com duas casas decimais.",
        "entrada": "A primeira entrada informada é a quantidade de produtos comprados (1 <= p <= 5). Para cada produto segue a quantidade (1 <= q <= 500) que o consumidor comprou. Obs.: não poderão ser informados números de produtos repetidos.",
        "titulo": "MacPRONALTS",
        "descricao": "O MacPRONALTS está com uma super promoção, exclusivo para os competidores da primeira Seletiva do MaratonaTEC. Só que teve um problema, todos os maratonistas foram tentar comprar ao mesmo tempo, com isso gerou uma fila muito grande. O pior é que a moça do caixa estava sem calculadora ou um programa para ajudá-la a calcular com maior agilidade, eis que surge você para fazer um programa para ajudar a coitada e aumentar a renda do MacPRONALTS. Segue o cardápio do dia contendo o número do produto e seu respectivo valor. 1001 | R$ 1.50 1002 | R$ 2.50 1003 | R$ 3.50 1004 | R$ 4.50 1005 | R$ 5.50"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1149",
        "saida": "A saída contém apenas um valor inteiro.",
        "entrada": "A entrada contém somente valores inteiros, podendo ser positivos ou negativos. Todos os valores estão na mesma linha.",
        "titulo": "Somando Inteiros Consecutivos",
        "descricao": "Faça um algoritmo para ler um valor A e um valor N. Imprimir a soma dos N números a partir de A(inclusive). Enquanto N for negativo ou ZERO, um novo N(apenas N) deve ser lido."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2146",
        "saida": "Para cada caso de teste, imprima a senha correspondente. Em todos os casos, a fórmula será a mesma, igual aos exemplos abaixo.",
        "entrada": "A entrada terá diversos casos de teste. A cada caso de teste, terá um número N, que representa o número escrito no papel (1001 ≤ N ≤ 9999). A entrada termina com o fim do arquivo.",
        "titulo": "Senha",
        "descricao": "Sr. Amnésio tinha uma grande dificuldade em guardar senhas. Para lembrá-las, ele sempre usava números, e as escrevia em pedaços de papel, que também perdia com facilidade, fazendo com que ele precisasse modificar a senha cada vez que isto acontecia. Cansado, ele pensou em uma forma mais prática: colocava no papel um número próximo da senha, depois ele usava sempre uma mesma conta para lembrar a senha, baseada no número escrito no papel. Mas ele também esquecia a fórmula, por isto, pediu para você escrever um programa que, dado o número do papel, informe a senha correspondente. Escreva um programa que, dado um número, informe a respectiva senha."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1151",
        "saida": "Os valores devem ser mostrados na mesma linha, separados por um espaço em branco. Não deve haver espaço após o último valor.",
        "entrada": "O arquivo de entrada contém um valor inteiro N (0 < N < 46).",
        "titulo": "Fibonacci Fácil",
        "descricao": "A seguinte sequência de números 0 1 1 2 3 5 8 13 21... é conhecida como série de Fibonacci. Nessa sequência, cada número, depois dos 2 primeiros, é igual à soma dos 2 anteriores. Escreva um algoritmo que leia um inteiro N (N < 46) e mostre os N primeiros números dessa série."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1014",
        "saida": "Apresente o valor que representa o consumo médio do automóvel com 3 casas após a vírgula, seguido da mensagem \"km/l\".",
        "entrada": "O arquivo de entrada contém dois valores: um valor inteiro X representando a distância total percorrida (em Km), e um valor real Y representando o total de combustível gasto, com um dígito após o ponto decimal.",
        "titulo": "Consumo",
        "descricao": "Calcule o consumo médio de um automóvel sendo fornecidos a distância total percorrida (em Km) e o total de combustível gasto (em litros)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1002",
        "saida": "Apresentar a mensagem \"A=\" seguido pelo valor da variável area, conforme exemplo abaixo, com 4 casas após o ponto decimal. Utilize variáveis de dupla precisão (double). Como todos os problemas, não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá \"Presentation Error\".",
        "entrada": "A entrada contém um valor de ponto flutuante (dupla precisão), no caso, a variável raio.",
        "titulo": "Área do Círculo",
        "descricao": "A fórmula para calcular a área de uma circunferência é: area = π . raio2. Considerando para este problema que π = 3.14159: - Efetue o cálculo da área, elevando o valor de Raio ao quadrado e multiplicando por π."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1038",
        "saida": "O arquivo de saída deve conter a mensagem \"Total: R$ \" seguido pelo valor a ser pago, com 2 casas após o ponto decimal.",
        "entrada": "O arquivo de entrada contém dois valores inteiros correspondentes ao código e à quantidade de um item conforme tabela acima.",
        "titulo": "Lanche",
        "descricao": "Com base na tabela abaixo, escreva um programa que leia o código de um item e a quantidade deste item. A seguir, calcule e mostre o valor da conta a pagar."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2166",
        "saida": "A saída é o valor aproximado da raiz quadrada com 10 casas decimais.",
        "entrada": "A entrada é um número natural N (0 ≤ N ≤ 100), que indica o número de repetições do denominador na fração continuada.",
        "titulo": "Raiz Quadrada de 2",
        "descricao": "Uma das formas de calcular a raiz quadrada de um número natural é pelo método das frações periódicas continuadas. Esse método usa como denominador uma repetição de frações. Essa repetição pode ser feita uma quantidade específica de vezes. Por exemplo, ao repetir 2 vezes a fração continuada para calcular a raiz quadrada de 2, temos a fórmula abaixo. Sua tarefa é, dado o número N de repetições, calcular o valor aproximado da raiz quadrada de 2."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1589",
        "saida": "Em cada caso, imprima o menor raio possível em uma única linha",
        "entrada": "Na primeira linha teremos um inteiro T (T ≤ 10000), indicando o número de casos de teste. Na única linha de cada caso teremos dois números inteiros R1 e R2, indicando os respectivos raios. Os inteiros serão positivos e todas as contas caberão em um inteiro normal de 32 bits.",
        "titulo": "Bob Conduite",
        "descricao": "Você tem em mãos dois cabos circulares de energia. O primeiro cabo tem raio R1 e o segundo raio R2. Você precisa comprar um conduite circular (veja a imagem abaixo que ilustra um conduite) de maneira a passar os dois cabos por dentro dele: Qual o menor raio do conduite que você deve comprar? Em outras palavras, dado dois círculos, qual o raio do menor círculo que possa englobar ambos os dois?"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1072",
        "saida": "Para cada caso, imprima quantos números estão dentro (in) e quantos valores estão fora (out) do intervalo.",
        "entrada": "A primeira linha da entrada contém um valor inteiro N (N < 10000), que indica o número de casos de teste. Cada caso de teste a seguir é um valor inteiro X (-107 < X <107).",
        "titulo": "Intervalo 2",
        "descricao": "Leia um valor inteiro N. Este valor será a quantidade de valores inteiros X que serão lidos em seguida. Mostre quantos destes valores X estão dentro do intervalo [10,20] e quantos estão fora do intervalo, mostrando essas informações."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1065",
        "saida": "Imprima a mensagem conforme o exemplo fornecido, indicando a quantidade de valores pares lidos.",
        "entrada": "O arquivo de entrada contém 5 valores inteiros quaisquer.",
        "titulo": "Pares entre Cinco Números",
        "descricao": "Faça um programa que leia 5 valores inteiros. Conte quantos destes valores digitados são pares e mostre esta informação."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2165",
        "saida": "A saída é dada em uma única linha. Ela deve ser \"TWEET\" (sem as aspas) se a linha de texto T tem até 140 caracteres. Se T tem mais de 140 caracteres, a saída deve ser \"MUTE\".",
        "entrada": "A entrada é uma linha de texto T (1 ≤ |T| ≤ 500).",
        "titulo": "Tuitando",
        "descricao": "O microblog Twitter é conhecido por limitar as postagens em 140 caracteres. Conferir se um texto vai caber em um tuíte é sua tarefa."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1146",
        "saida": "Para cada número N do arquivo de entrada deve ser impressa uma linha de 1 até N, conforme o exemplo abaixo. Não deve haver espaço em branco após o último valor da linha.",
        "entrada": "O arquivo de entrada contém vários números inteiros. O último número no arquivo de entrada é 0.",
        "titulo": "Sequências Crescentes",
        "descricao": "Este programa deve ler uma variável inteira X inúmeras vezes (deve parar quando o valor no arquivo de entrada for igual a zero). Para cada valor lido imprima a sequência de 1 até X, com um espaço entre cada número e seu sucessor. Obs: cuide para não deixar espaço em branco após o último valor apresentado na linha ou você receberá Presentation Error."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1011",
        "saida": "A saída deverá ser uma mensagem \"VOLUME\" conforme o exemplo fornecido abaixo, com um espaço antes e um espaço depois da igualdade. O valor deverá ser apresentado com 3 casas após o ponto.",
        "entrada": "O arquivo de entrada contém um valor de ponto flutuante (dupla precisão), correspondente ao raio da esfera.",
        "titulo": "Esfera",
        "descricao": "Faça um programa que calcule e mostre o volume de uma esfera sendo fornecido o valor de seu raio (R). A fórmula para calcular o volume é: (4/3) * pi * R3. Considere (atribua) para pi o valor 3.14159. Dica: Ao utilizar a fórmula, procure usar (4/3.0) ou (4.0/3), pois algumas linguagens (dentre elas o C++), assumem que o resultado da divisão entre dois inteiros é outro inteiro."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2152",
        "saida": "Para cada caso de teste, imprima o horário da ocorrência, no devido formato, seguido de um espaço, um hífen e um espaço, e da frase “A porta abriu!” ou “A porta fechou!”, conforme a ocorrência registrada.",
        "entrada": "A primeira linha contém a quantidade de casos de teste. Cada linha de um caso de teste possui três inteiros H, M e O, sendo a hora, o minuto da ocorrência, e a própria ocorrência (zero se a porta fechou ou um se a porta abriu).",
        "titulo": "Pepe, Já Tirei a Vela!",
        "descricao": "Um dia, o grande herói Chapolout foi ajudar um cientista, que criou muitas invenções. Uma destas invenções é um sistema que abre a porta secreta do laboratório. O sistema consiste em retirar uma vela do candelabro do lado da porta, que a mesma se abre, e, ao colocar a vela de volta ao candelabro, a porta se fecha. Porém, Chapolout descobriu que a vela era só uma desculpa. Na verdade, o assistente do cientista, chamado Pepe, é que abria a porta do laboratório, por dentro. Um tempo depois, o sistema foi modificado, para funcionar igualmente ao projeto inicial. Colocaram um sensor de pressão embaixo da vela do candelabro, de modo que a retirada da vela ativa o sistema. Este sistema emite um relatório de log por cada vez que a porta abriu ou fechou, mas o log está bem confuso. A cada registro, três números inteiros são cadastrados, sendo a hora e o minuto que o evento ocorreu e um valor que representa se a porta abriu ou fechou naquele momento. Pepe pede a sua ajuda para converter os dados do log em dados mais legíveis para ele. Escreva um programa que, dado um registro de log, este seja convertido em textos mais legíveis."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1759",
        "saida": "A saída é composta por todos \"Ho\" que Papai Noel deve falar separados por um espaço. Após o último \"Ho\" deve ser apresentado um \"!\" encerrando o programa.",
        "entrada": "A entrada é composta por um único inteiro N (0 < N ≤ 106) representando quantos \"Ho\" serão falados por Noel.",
        "titulo": "Ho Ho Ho",
        "descricao": "Papai Noel está brincando com seus duendes para entretê-los durante a véspera do Natal. A brincadeira consiste nos elfos escreverem números em pedaços de papel e colocarem no gorro do Papai Noel. Após todos terminarem de colocar os números Noel sorteia um papel e aquele número representa quantos \"Ho\" o Noel deve falar. Seu trabalho é ajudar o Papai Noel montando um problema que mostre todos os \"Ho\" que ele deve falar dado o número sorteado."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1043",
        "saida": "O resultado deve ser apresentado com uma casa decimal.",
        "entrada": "A entrada contém três valores reais.",
        "titulo": "Triângulo",
        "descricao": "Leia 3 valores reais (A, B e C) e verifique se eles formam ou não um triângulo. Em caso positivo, calcule o perímetro do triângulo e apresente a mensagem: Perimetro = XX.X Em caso negativo, calcule a área do trapézio que tem A e B como base e C como altura, mostrando a mensagem Area = XX.X"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2060",
        "saida": "Imprima a quantidade de números múltiplos de 2, 3, 4 e 5 presentes na lista. Observe a formatação da saída nos exemplos, pois ela deve ser seguida rigorosamente.",
        "entrada": "A primeira linha da entrada consiste em um inteiro N (1 ≤ N ≤1000), representando a quantidade de números na lista de Bino. A segunda linha contém N inteiros Li (1 ≤ Li ≤ 100), representando os números da lista de Bino.",
        "titulo": "Desafio de Bino",
        "descricao": "Bino e Cino são colegas inseparáveis. Bino gosta de criar desafios matemáticos para Cino resolver. Desta vez, Bino gerou uma lista de números e perguntou ao Cino quantos números da lista são múltiplos de 2, 3, 4 e 5. Esse desafio pode parecer simples, porém, quando a lista contém muitos números, Cino se confunde e acaba errando alguns cálculos. Para ajudar Cino, faça um programa para resolver o desafio de Bino."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1073",
        "saida": "Imprima o quadrado de cada um dos valores pares, de 1 até N, conforme o exemplo abaixo. Tome cuidado! Algumas linguagens tem por padrão apresentarem como saída 1e+006 ao invés de 1000000 o que ocasionará resposta errada. Neste caso, configure a precisão adequadamente para que isso não ocorra.",
        "entrada": "A entrada contém um valor inteiro N (5 < N < 2000).",
        "titulo": "Quadrado de Pares",
        "descricao": "Leia um valor inteiro N. Apresente o quadrado de cada um dos valores pares, de 1 até N, inclusive N, se for o caso."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1958",
        "saida": "A saída é o número X em uma única linha na notação científica detalhada acima. Veja os exemplos abaixo.",
        "entrada": "A entrada é um número em ponto flutuante de dupla precisão X (de acordo com o padrão IEEE 754-2008). Nunca haverá um número com mais de 110 caracteres nem com mais de 6 casas decimais.",
        "titulo": "Notação Científica",
        "descricao": "Números em ponto flutuante podem ser bastante extensos para mostrar. Nesses casos, é conveniente usar a notação científica. Você deve escrever um programa que, dado um número em ponto flutuante, mostre este número na notação científica: sempre mostre o sinal da mantissa; sempre mostre 4 casas decimais na mantissa; use o caractere 'E' para separar a mantissa do expoente; sempre mostre o sinal do expoente; e mostre o expoente com pelo menos 2 dígitos."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1930",
        "saida": "Seu programa deve produzir uma única linha contendo um único número inteiro, indicando o número máximo de aparelhos que podem ser conectados à energia num mesmo instante.",
        "entrada": "A entrada consiste de uma linha com quatro números inteiros T1, T2, T3, T4, indicando o número de tomadas de cada uma das quatro réguas (2 ≤ Ti ≤ 6).",
        "titulo": "Tomadas",
        "descricao": "Finalmente, o time da Universidade conseguiu a classificação para a Final Nacional da Maratona de Programação da SBC. Os três membros do time e o técnico estão ansiosos para bem representar a Universidade, e além de treinar muito, preparam com todos os detalhes a sua viagem a São Paulo, onde será realizada a Final Nacional. Eles planejam levar na viagem todos os seus vários equipamentos eletrônicos: celular, tablet, notebook, ponto de acesso wifi, câmeras, etc, e sabem que necessitarão de várias tomadas de energia para conectar todos esses equipamentos. Eles foram informados de que ficarão os quatro no mesmo quarto de hotel, mas já foram alertados de que em cada quarto há apenas uma tomada de energia disponível. Precavidos, os três membros do time e o técnico compraram cada um uma régua de tomadas, permitindo assim ligar vários aparelhos na única tomada do quarto de hotel; eles também podem ligar uma régua em outra para aumentar ainda mais o número de tomadas disponíveis. No entanto, como as réguas têm muitas tomadas, eles pediram para você escrever um programa que, dado o número de tomadas em cada régua, determine o número máximo de aparelhos que podem ser conectados à energia num mesmo instante."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1182",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um número C (0 ≤ C ≤ 11) indicando a coluna que será considerada para operação. A segunda linha de entrada contém um único caractere Maiúsculo T ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.",
        "titulo": "Coluna na Matriz",
        "descricao": "Neste problema você deve ler um número que indica uma coluna de uma matriz na qual uma operação deve ser realizada, um caractere maiúsculo, indicando a operação que será realizada, e todos os elementos de uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média dos elementos que estão na área verde da matriz, conforme for o caso. A imagem abaixo ilustra o caso da entrada do valor 5 para a coluna da matriz, demonstrando os elementos que deverão ser considerados na operação."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1158",
        "saida": "Imprima a soma dos consecutivos números ímpares a partir do valor X.",
        "entrada": "A primeira linha de entrada é um inteiro N que é a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste em uma linha contendo dois inteiros X e Y.",
        "titulo": "Soma de Ímpares Consecutivos III",
        "descricao": "Leia um valor inteiro N que é a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste de dois inteiros X e Y. Você deve apresentar a soma de Y ímpares consecutivos a partir de X inclusive o próprio X se ele for ímpar. Por exemplo: para a entrada 4 5, a saída deve ser 45, que é equivalente à: 5 + 7 + 9 + 11 + 13 para a entrada 7 4, a saída deve ser 40, que é equivalente à: 7 + 9 + 11 + 13"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1435",
        "saida": "Para cada inteiro da entrada imprima a matriz correspondente, de acordo com o exemplo. Os valores das matrizes devem ser formatados em um campo de tamanho 3 justificados à direita e separados por espaço. Após o último caractere de cada linha da matriz não deve haver espaços em branco. Após a impressão de cada matriz deve ser deixada uma linha em branco.",
        "entrada": "A entrada consiste de vários inteiros, um valor por linha, correspondentes as ordens das matrizes a serem construídas. O final da entrada é marcado por um valor de ordem igual a zero (0).",
        "titulo": "Matriz Quadrada I",
        "descricao": "Escreva um algoritmo que leia um inteiro N (0 ≤ N ≤ 100), correspondente a ordem de uma matriz M de inteiros, e construa a matriz de acordo com o exemplo abaixo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1019",
        "saida": "Imprima o tempo lido no arquivo de entrada (segundos), convertido para horas:minutos:segundos, conforme exemplo fornecido.",
        "entrada": "O arquivo de entrada contém um valor inteiro N.",
        "titulo": "Conversão de Tempo",
        "descricao": "Leia um valor inteiro, que é o tempo de duração em segundos de um determinado evento em uma fábrica, e informe-o expresso no formato horas:minutos:segundos."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1071",
        "saida": "O programa deve imprimir um valor inteiro. Este valor é a soma dos valores ímpares que estão entre os valores fornecidos na entrada que deverá caber em um inteiro.",
        "entrada": "O arquivo de entrada contém dois valores inteiros.",
        "titulo": "Soma de Impares Consecutivos I",
        "descricao": "Leia 2 valores inteiros X e Y. A seguir, calcule e mostre a soma dos números impares entre eles."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1005",
        "saida": "Calcule e imprima a variável MEDIA conforme exemplo abaixo, com 5 dígitos após o ponto decimal e com um espaço em branco antes e depois da igualdade. Utilize variáveis de dupla precisão (double) e como todos os problemas, não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá \"Presentation Error\".",
        "entrada": "O arquivo de entrada contém 2 valores com uma casa decimal cada um.",
        "titulo": "Média 1",
        "descricao": "Leia 2 valores de ponto flutuante de dupla precisão A e B, que correspondem a 2 notas de um aluno. A seguir, calcule a média do aluno, sabendo que a nota A tem peso 3.5 e a nota B tem peso 7.5 (A soma dos pesos portanto é 11). Assuma que cada nota pode ir de 0 até 10.0, sempre com uma casa decimal."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1099",
        "saida": "Imprima a soma de todos valores ímpares entre X e Y.",
        "entrada": "A primeira linha de entrada é um inteiro N que é a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste em uma linha contendo dois inteiros X e Y.",
        "titulo": "Soma de Ímpares Consecutivos II",
        "descricao": "Leia um valor inteiro N que é a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste de dois inteiros X e Y. Você deve apresentar a soma de todos os ímpares existentes entre X e Y."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1186",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um único caractere Maiúsculo O ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.",
        "titulo": "Abaixo da Diagonal Secundária",
        "descricao": "Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média considerando somente aqueles elementos que estão abaixo da diagonal Secundária da matriz, conforme ilustrado abaixo (área verde)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1848",
        "saida": "A saída são três linhas, cada linha com um número da loteria.",
        "entrada": "A entrada descreve, em cada linha, em sequência, ou um grito ou uma piscada do corvo. Um grito é representado pela string caw caw Uma piscada é representada por três caracteres * ou -, representando, respectivamente, um olho aberto ou um olho fechado, da esquerda para a direita. Lembre-se que o corvo tem 3 olhos. Os números sorteados na loteria não excedem 1000.",
        "titulo": "Corvo Contador",
        "descricao": "Como se sabe, existe um corvo com três olhos. O que não se sabia é que o corvo com três olhos pode prever o resultado da loteria de Westeros. Enquanto todos os outros corvos coletam as apostas, o corvo de três olhos já sabe o resultado, e quando Bran sonha com o corvo, o corvo conta o resultado. O problema é que Bran apesar de lembrar do sonho, não consegue interpretá-lo sozinho em tempo hábil. A sua tarefa é fazer um programa para interpretar o sonho de Bran e calcular o resultado da loteria. Durante o sonho, o corvo pisca diversas vezes e grita apenas 3 vezes. A cada grito um número do resultado da loteria é calculado. Cada piscada do corvo comunica um número em binário. Um olho aberto significa 1 e um olho fechado significa 0. O olho da esquerda é o mais significativo e o da direita é o menos significativo. A cada piscada, este número deve ser somado, e quando o corvo grita, essa soma é um resultado."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2031",
        "saida": "A saída deve conter o seguinte: “Jogador 1 venceu”: se o Jogador Um tiver vencido a partida “Jogador 2 venceu”: se o Jogador Dois tiver vencido a partida “Ambos venceram”: se os dois jogadores tiverem vencido a partida “Sem ganhador”: se não houver ganhador “Aniquilacao mutua”: se ocorrer Aniquilação Mútua Cada saída de um caso de teste deve estar em uma linha.",
        "entrada": "A entrada consiste de N (1 ≤ N ≤ 1000) casos de teste. N deve ser lido na primeira linha da entrada. Cada caso de teste é composto por duas linhas, cada uma contendo uma string. A primeira string representa o sinal escolhido pelo jogador 1 e a segunda string representa o sinal escolhido pelo jogador 2. Essas strings podem ser: “ataque”: para representar o Ataque Aéreo “pedra”: para representar a Pedra “papel”: para representar o Papel",
        "titulo": "Pedra, Papel, Ataque Aéreo",
        "descricao": "Pedra, Papel, Ataque Aéreo é um jogo infantil muito popular, em que duas ou mais crianças formam um círculo e fazem gestos com a mão na tentativa de obter a vitória. As regras são surpreendentemente complexas para um jogo de crianças, mas mesmo assim é bastante popular por todo o mundo. As partidas são muito simples. Os jogadores podem escolher entre o sinal de uma Pedra (o punho), o sinal de um Papel (a palma aberta), e o sinal para o Ataque Aéreo (igual o do Papel, mas com apenas o polegar e o mindinho estendidos). Uma partida, com dois jogadores, possuem as seguintes regras para se definir um vencedor: Ataque Aéreo vs. Pedra: Neste caso, o jogador com o Ataque Aéreo derrota o jogador com a Pedra, por razões óbvias. Pedra vs. Papel: Neste caso, o jogador com a Pedra derrota o com Papel, poque a Pedra machuca muito mais. Papel vs. Ataque Aéreo: Aqui o Ataque Aéreo ganha, porque Ataque Aéreo sempre ganha e o Papel é patético. Papel vs. Papel: Nesta variação, ambos os jogadores ganham, porque o Papel é inútil e ninguém que enfrenta o Papel pode perder. Pedra vs. Pedra: Para este caso não há ganhador, porque depende do que os jogadores decidem fazer com a Pedra e normalmente não fazem nada. Ataque Aéreo vs. Ataque Aéreo: Quando isto acontece, todos os jogadores perdem, devido a Aniquilação Mútua. Sua tarefa é escrever um programa que, dada as escolhas de dois jogadores, informe quem venceu o jogo."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1003",
        "saida": "Imprima a variável SOMA com todas as letras maiúsculas, com um espaço em branco antes e depois da igualdade seguido pelo valor correspondente à soma de A e B. Como todos os problemas, não esqueça de imprimir o fim de linha após o resultado, caso contrário, você receberá \"Presentation Error\".",
        "entrada": "O arquivo de entrada contém 2 valores inteiros.",
        "titulo": "Soma Simples",
        "descricao": "Leia dois valores inteiros, no caso para variáveis A e B. A seguir, calcule a soma entre elas e atribua à variável SOMA. A seguir escrever o valor desta variável."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2172",
        "saida": "Para cada caso, seu programa deverá mostrar um valor E, referente ao novo EXP do monstro.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste contém dois valores X (0 < X ≤ 3) indicando o valor de aumento da EXP dos monstros e M (10 ≤ M ≤ 232-1) indicando o valor de EXP do monstro. A entrada termina com os valores X == 0 e M == 0, nos quais não devem ser processados.",
        "titulo": "Evento",
        "descricao": "Prog e Cackto começaram recentemente a jogar um jogo de RPG chamado Fortaleza. Neste, para o jogador evoluir de nível o mesmo precisa derrotar monstros, nos quais dá um valor de experiência (XP) para o jogador. A produtora do jogo, Jogos Extremos, anunciou que na próxima semana irá realizar o primeiro evento XP no qual aumentará a experiência dos monstros em X vezes. Como Prog e Cackto estão em um nível muito alto no qual os monstros tem um valor muito alto de pontos de experiência, eles estão tendo dificuldades de calcular a quantidade de pontos de experiência que os monstros terão durante o evento. Você pode ajudá-los?"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1078",
        "saida": "Imprima a tabuada de N, conforme o exemplo fornecido.",
        "entrada": "A entrada contém um valor inteiro N (2 < N < 1000).",
        "titulo": "Tabuada",
        "descricao": "Leia 1 valor inteiro N (2 < N < 1000). A seguir, mostre a tabuada de N:       1 x N = N      2 x N = 2N        ...       10 x N = 10N"
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1008",
        "saida": "Imprima o número e o salário do funcionário, conforme exemplo fornecido, com um espaço em branco antes e depois da igualdade. No caso do salário, também deve haver um espaço em branco após o $.",
        "entrada": "O arquivo de entrada contém 2 números inteiros e 1 número com duas casas decimais, representando o número, quantidade de horas trabalhadas e o valor que o funcionário recebe por hora trabalhada, respectivamente.",
        "titulo": "Salário",
        "descricao": "Escreva um programa que leia o número de um funcionário, seu número de horas trabalhadas, o valor que recebe por hora e calcula o salário desse funcionário. A seguir, mostre o número e o salário do funcionário, com duas casas decimais."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1153",
        "saida": "A saída contém um valor inteiro, correspondente ao fatorial de N.",
        "entrada": "A entrada contém um valor inteiro N (0 < N < 13).",
        "titulo": "Fatorial Simples",
        "descricao": "Ler um valor N. Calcular e escrever seu respectivo fatorial. Fatorial de N = N * (N-1) * (N-2) * (N-3) * ... * 1."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1142",
        "saida": "Imprima a saída conforme o exemplo fornecido.",
        "entrada": "O arquivo de entrada contém um número inteiro positivo N.",
        "titulo": "PUM",
        "descricao": "Escreva um programa que leia um valor inteiro N. Este N é a quantidade de linhas de saída que serão apresentadas na execução do programa."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2057",
        "saida": "Imprima um inteiro que indica a hora local prevista no destino, conforme os exemplos abaixo.",
        "entrada": "A entrada contém 3 inteiros: S (0 ≤ S ≤ 23), T (1 ≤ T ≤ 12) e F (-5 ≤ F ≤ 5), separados por um espaço, indicando respectivamente a hora da saída, o tempo de viagem e o fuso horário do destino com relação à origem.",
        "titulo": "Fuso Horário",
        "descricao": "Paulo e Pedro fizeram uma longa jornada desde que partiram do Brasil para competir na Final Mundial da Maratona, em Phuket, Tailândia. Notaram que a cada escala que faziam, tinham que ajustar seus relógios por causa do fuso horário. Assim, para melhor se organizarem para as próximas viagens, eles pediram que você faça um aplicativo para celular que, dada a hora de saída, tempo de viagem e o fuso do destino com relação à origem, você informe a hora de chegada de cada vôo no destino. Por exemplo, se eles partiram às 10 horas da manhã para uma viagem de 4 horas rumo a um destino que fica à leste, em um fuso horário com uma hora a mais com relação ao fuso horário do ponto de partida, a hora de chegada terá que ser: 10 horas + 4 horas de viagem + 1 hora de deslocamento pelo fuso, ou seja, chegarão às 15 horas. Note que se a hora calculada for igual a 24, seu programa deverá imprimir 0 (zero)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2162",
        "saida": "A saída é dada em uma única linha. Caso a paisagem tenha o mesmo padrão da Nlogônia, deve ser mostrado o número 1. Caso contrário, mostra-se o número 0.",
        "entrada": "A entrada é dada em duas linhas. A primeira tem o número N de medidas da paisagem (1 < N ≤ 100). A segunda linha tem N inteiros: a altura Hi de cada medida (-10000 ≤ Hi ≤ 10000, para todo Hi, tal que 1 ≤ i ≤ N). Uma medida é considerada um pico se é maior que a medida anterior. Uma medida é considerada um vale se é menor que a medida anterior.",
        "titulo": "Picos e Vales",
        "descricao": "Ao observar a paisagem da Nlogônia, o professor MC percebeu que a cada intervalo de 100 metros existe um pico. E que exatamente na metade de dois picos há um vale. Logo, a cada 50 metros há um vale ou um pico e, ao longo da paisagem, não há um pico seguido por outro pico, nem um vale seguido por outro vale. O professor MC ficou curioso com esse padrão e quer saber se, ao medir outras paisagens, isso se repete. Sua tarefa é, dada uma paisagem, indicar se ela possui esse padrão ou não."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1185",
        "saida": "Imprima o resultado solicitado (a soma ou média), com 1 casa após o ponto decimal.",
        "entrada": "A primeira linha de entrada contem um único caractere Maiúsculo O ('S' ou 'M'), indicando a operação (Soma ou Média) que deverá ser realizada com os elementos da matriz. Seguem os 144 valores de ponto flutuante que compõem a matriz.",
        "titulo": "Acima da Diagonal Secundária",
        "descricao": "Leia um caractere maiúsculo, que indica uma operação que deve ser realizada e uma matriz M[12][12]. Em seguida, calcule e mostre a soma ou a média considerando somente aqueles elementos que estão acima da diagonal secundária da matriz, conforme ilustrado abaixo (área verde)."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2147",
        "saida": "Para cada caso de teste, imprima um número T, que é o tempo gasto, em segundos, para digitar a palavra do respectivo caso de teste, com aproximação de duas casas decimais.",
        "entrada": "Um número inteiro C será informado, que será a quantidade de casos de teste. Cada caso tem uma palavra, de, no mínimo, 9 e, no máximo 10000 letras.",
        "titulo": "Galopeira",
        "descricao": "Certo dia, os irmãos Little Chitão e Xor Or Oh, exímios digitadores, fizeram um desafio, para ver quem era o melhor na digitação. Para isto, conseguiram um computador que não processa teclas pressionadas, ou seja, se for para digitar a mesma letra duas vezes seguidas, precisa pressionar a tecla duas vezes, visto que, pressionar a tecla por mais tempo, não adianta. Também mediram o tempo de uma tecla pressionada, que foi de, exatamente, um centésimo de segundo. O desafio seria quem digitasse a palavra “galopeira”, formada por mais letras e, mas ambos eram muito bons, e chegava num ponto que não era possível contar quantas letras haviam sido digitadas. Então, pediram a sua ajuda para escrever um programa que verifique a palavra digitada e veja quanto tempo foi gasto para a digitação. Escreva um programa que, dada uma palavra digitada, informe quanto tempo foi gasto para ser digitada."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1858",
        "saida": "Imprima uma linha contendo o número da pessoa que Theon deve dizer ser seu algoz. Se existe mais de uma resposta possível, imprima a menor.",
        "entrada": "A primeira linha contém um inteiro N (1 ≤ N ≤ 100). A segunda linha contém N inteiros T1, T2, ..., TN (0 ≤ Ti ≤ 20).",
        "titulo": "A Resposta de Theon",
        "descricao": "Ramsay: \"(...) você vence se conseguir adivinhar quem eu sou e por que estou torturando você.\" Theon deve pensar rápido e adivinhar quem é seu algoz! Entretanto, Ramsay já decidiu o que ele irá fazer depois que Theon der sua resposta. Theon pode dizer que seu algoz é alguma dentre N pessoas. Considere que as pessoas são numeradas de 1 a N. Se Theon responder que seu algoz é a pessoa i, Ramsay irá atingi-lo Ti vezes. Sua tarefa é ajudar Theon a determinar qual deve ser sua resposta de forma a minimizar o número de vezes que ele será atingido."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "2160",
        "saida": "A saída é dada em uma única linha. Ela deve ser \"YES\" (sem as aspas) se a linha de texto L tem até 80 caracteres. Se L tem mais de 80 caracteres, a saída deve ser \"NO\".",
        "entrada": "A entrada é uma linha de texto L (1 ≤ |L| ≤ 500).",
        "titulo": "Nome no Formulário",
        "descricao": "Preencher formulários é uma tarefa simples. Mas é preciso conferir se o espaço reservado para os dados é suficiente. Sua tarefa é, dada uma linha de texto, indicar se ele cabe ou não cabe em um formulário com 80 caracteres."
    },
    {
        "nivel": "1",
        "assunto": "1",
        "numero": "1984",
        "saida": "Imprimir o número lido invertido. Não esqueça de imprimir a quebra de linha (\\n) no final, caso contrário você receberá (Presentation Error).",
        "entrada": "O arquivo contém apenas uma linha de teste que é o número encontrado (0 < n < 9999999999). Obs.: Perceba que o número lido é muito alto para armazenar em uma variável do tipo int, logo você irá precisar utilizar o tipo long, que para a leitura e impressão em C, você deve utilizar o %llu.",
        "titulo": "O Enigma do Pronalândia",
        "descricao": "Os cientistas da NASA descobriram um novo exoplaneta que fica a 1 bilhão de anos luz da terra. O nome desse planeta foi batizado de Pronalândia em homenagem aos novos cientistas que estão sendo formados no PRONATEC. Só que o mais incrível ainda está por vir. Ao observar melhor o planeta eles conseguiram identificar que os habitantes da Pronalândia estavam querendo se comunicar por uma numeração. Só que a numeração que encontraram está invertida e como encontraram muitas delas chamaram você para conseguir automatizar esse processo. Logo, dado um número grande, sua tarefa é imprimir esse número invertido."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2187",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. Na segunda linha devem aparecer quatro inteiros I, J, K e L que representam o resultado encontrado pelo seu programa: I indica o número de cédulas de B$50,00, J indica o número de cédulas de B$10,00, K indica o número de cédulas de B$5,00 e L indica o número de cédulas de B$1,00. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "entrada": "A entrada é composta de vários conjuntos de teste. Cada conjunto de teste é composto por uma única linha, que contém um número inteiro positivo V (0 ≤ V ≤ 10000), que indica o valor solicitado pelo cliente. O final da entrada é indicado por V = 0.",
        "titulo": "Bits Trocados",
        "descricao": "As Ilhas Weblands formam um reino independente nos mares do Pacífico. Como é um reino recente, a sociedade é muito influenciada pela informática. A moeda oficial é o Bit; existem notas de B$ 50,00, B$10,00, B$5,00 e B$1,00. Você foi contratado(a) para ajudar na programação dos caixas automáticos de um grande banco das Ilhas Weblands. Os caixas eletrônicos das Ilhas Weblands operam com todos os tipos de notas disponíveis, mantendo um estoque de cédulas para cada valor (B$ 50,00, B$10,00, B$5,00 e B$1,00). Os clientes do banco utilizam os caixas eletrônicos para efetuar retiradas de um certo número inteiro de Bits.  Sua tarefa é escrever um programa que, dado o valor de Bits desejado pelo cliente, determine o número de cada uma das notas necessário para totalizar esse valor, de modo a minimizar a quantidade de cédulas entregues. Por exemplo, se o cliente deseja retirar B$50,00, basta entregar uma única nota de cinquenta Bits. Se o cliente deseja retirar B$72,00, é necessário entregar uma nota de B$50,00, duas de B$10,00 e duas de B$1,00."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1918",
        "saida": "Para cada caso de teste, se for possível chegar a Acapulco antes que a promoção finalize, imprima duas linhas. Na primeira linha a palavra “POSSIBLE” (sem aspas) e na segunda linha a menor data possível no seguinte formato: “DD/MM/AAAA – hh:mm:ss”. Caso não seja possível chegar até a data limite, imprima apenas uma linha com a palavra “IMPOSSIBLE” (sem aspas).",
        "entrada": "A primeira linha de entrada contém um único inteiro QT (1 ≤ QT ≤ 100), indicando a quantidade de casos de teste que vem a seguir. A primeira linha de cada caso de teste é composta por 2 inteiros N (2 ≤ N ≤ 105) e M (1 ≤ M ≤ 3x105), representando respectivamente a quantidade de cidades e a quantidade de rotas que ligam essas cidades. A segunda linha de cada caso de teste é composta pela data e o horário que os moradores da vila pretendem sair e a terceira linha de cada caso é composta pela data e o horário limite que o hotel de Acapulco estará em promoção. As datas e os horários estão descritos na seguinte notação: “DD/MM/AAAA – hh:mm:ss”, onde DD (1 ≤ DD ≤ 31) representa o dias do mês, MM (1 ≤ MM ≤ 12) representa o mês do ano, AAAA (1970 ≤ AAAA ≤ 2100) representa o ano, hh (0 ≤ hh ≤ 23) representa as horas, mm (0 ≤ mm ≤ 59) representa os minutos, ss (0 ≤ ss ≤ 59) representa os segundos. Seguem M linhas, cada linha contêm 2 inteiros a e b e uma data, indicando que existe uma rota bidirecional entre a cidade a (0 ≤ a ≤ N-1) e b (0 ≤ b ≤ N-1), e a data no formato “DD-hh-mm-ss”, representando o tempo necessário para ir de a para b e vice-versa. Considere que a vila fica na cidade de número 0 e a cidade de Acapulco é a cidade de número N-1.",
        "titulo": "Viagem para Acapulco",
        "descricao": "Após terem realizado uma grande viagem para Acapulco há algum tempo atrás, o moradores da vila fizeram uma grande reunião e decidiram se unir para viajar novamente para aquela linda cidade. Apesar de Seu Madruga ter tido uma grande sorte e ganhado a viagem passada com todas as despesas pagas, o gasto geral entre todos os moradores da vila foi gigantesco e dessa vez eles estão querendo economizar o máximo possível, ainda mais porque ninguém da vila ganhou a viagem paga novamente. Acontece que eles foram informados por um desconhecido, que o melhor hotel da cidade (o mesmo que eles se hospedaram na viagem passada) estará com uma promoção por um tempo limitado, então como eles desejam economizar, estão querendo chegar a tempo de pegar a promoção. Seu Barriga responsável por administrar o dinheiro gasto é um homem que entende bem de números e agora quer utilizar o poder da tecnologia para conseguir algumas informações úteis antes de realizar a viagem. Como ele já conhece suas habilidades como matemático e programador, ele contratou você para desenvolver um programa que dado todas as informações sobre as cidades e rotas disponíveis, a data e o horário que eles pretendem sair da vila e a data e o horário limite da promoção do hotel em Acapulco, informe se é possível chegar a Acapulco antes que a promoção termine, e qual a menor data e horário possível, ou se não é possível chegar a tempo de pegar a promoção."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1483",
        "saida": "Para cada um dos casos de teste seu programa deve imprimir uma linha contendo um número real, com duas casas decimais, representando o valor do prêmio correspondente à aposta dada.",
        "entrada": "A entrada contém vários casos de teste. Cada caso consiste em apenas uma linha, contendo um número real V e dois inteiros N e M, representando respectivamente o valor da aposta com duas casas decimais (0.01 ≤ V ≤ 1000.00), o número escolhido para a aposta (0 ≤ N ≤ 1000000) e o número sorteado (0 ≤ M ≤ 1000000). O final da entrada é indicado por uma linha contendo V = M = N = 0.",
        "titulo": "Jogo do Bicho",
        "descricao": "Em um país muito distante, as pessoas são viciadas em um jogo de apostas bastante simples. O jogo é baseado em números e é chamado jogo do bicho. O nome do jogo deriva do fato que os números são divididos em 25 grupos, dependendo do valor dos dois últimos dígitos (dezenas e unidades), e cada grupo recebe o nome de um animal. Cada grupo é associado a um animal da seguinte forma: o primeiro grupo (burro) consiste nos números 01, 02, 03 e 04; o segundo grupo (águia) é composto dos números 05, 06, 07 e 08; e assim em diante, até o ultimo grupo contendo os números 97, 98, 99 e 00. As regras do jogo são simples. No momento da aposta, o jogador decide o valor da aposta V e um número N (0 ≤ N ≤ 1000000). Todos os dias, na praça principal da cidade, um número M é sorteado (0 ≤ M ≤ 1000000). O prêmio de cada apostador é calculado da seguinte forma: Se M e N têm os mesmos quatro últimos dígitos (milhar, centena, dezena e unidade), o apostador recebe V × 3000 (por exemplo, N = 99301 e M = 19301); Se M e N têm os mesmos três últimos dígitos (centena, dezena e unidade), o apostador recebe V × 500 (por exemplo, N = 38944 e M = 83944); Se M e N têm os mesmos dois últimos dígitos (dezena e unidades), o apostador recebe V × 50 (por exemplo, N = 111 e M = 552211); Se M e N têm os dois últimos dígitos no mesmo grupo, correspondendo ao mesmo animal, o apostador recebe V × 16 (por exemplo, N = 82197 and M = 337600); Se nenhum dos casos acima ocorrer, o apostador não recebe nada. Obviamente, o prêmio dado a cada apostador é o máximo possível de acordo com as regras acima. No entanto, não é possível acumular prêmios, de forma que apenas um dos critérios acima deve ser aplicado no cálculo do prêmio. Se um número N ou M com menos de quatro dígitos for apostado ou sorteado, assuma que dígitos 0 devem ser adicionados na frente do numero para que se torne de quatro dígitos; por exemplo, 17 corresponde a 0017. Dado o valor apostado, o número escolhido pelo apostador, e o número sorteado, seu programa deve calcular qual o prêmio que o apostador deve receber."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1414",
        "saida": "Para cada um dos casos de teste seu programa deve imprimir uma única linha contendo um número inteiro, representando a quantidade de jogos que terminaram empatados até o momento.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros T e N, indicando respectivamente o número de times participantes (2 ≤ T ≤ 200) e o número de partidas jogadas (0 ≤ N ≤ 10000). Cada uma das T linhas seguintes contém o nome de um time (uma cadeia de máximo 10 letras e dígitos), seguido de um espaço em branco, seguido do número de pontos que o time obteve até o momento. O final da entrada é indicado por T = 0.",
        "titulo": "Copa do Mundo",
        "descricao": "Uma Copa do Mundo de futebol de botões está sendo realizada com times de todo o mundo. A classificação é baseada no número de pontos ganhos pelos times, e a distribuição de pontos é feita da forma usual. Ou seja, quando um time ganha um jogo, ele recebe 3 pontos; se o jogo termina empatado, ambos os times recebem 1 ponto; e o perdedor não recebe nenhum ponto. Dada a classificação atual dos times e o número de times participantes na Copa do Mundo, sua tarefa é de determinar quantos jogos terminaram empatados até o momento."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1030",
        "saida": "Para cada caso de teste de entrada será apresentada uma linha de saída no seguinte formato: Case n: m tendo sempre um espaço antes do n e do m.",
        "entrada": "Haverá NC (1 ≤ NC ≤ 30 ) casos de teste. Em cada caso de teste de entrada haverá um par de números inteiros positivos n (1 ≤ n ≤ 10000 ) e k (1 ≤ k ≤ 1000). O  número n representa a quantidade de pessoas no círculo, numeradas de 1 até n. O número k representa o tamanho do salto de um homem até o próximo homem que será morto. Segue um exemplo com 5 homens e um salto = 2. Neste exemplo o elemento que restará após as eliminações é 3.",
        "titulo": "A Lenda de Flavious Josephus",
        "descricao": "O problema de Josephus é assim conhecido por causa da lenda de Flavius Josephus, um historiador judeu que viveu no século 1. Segundo o relato de Josephus do cerco de Yodfat, ele e seus companheiros (40 soldados) foram presos em uma caverna, cuja saída foi bloqueada pelos romanos. Eles preferiram suicidar-se a serem capturados, e decidiram que iriam formar um círculo e começar a matar-se pulando de três em três. Josephus afirma que, por sorte ou talvez pela mão de Deus, ele permaneceu por último e preferiu entregar-se aos romanos a suicidar-se."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1975",
        "saida": "Para cada saída, você deverá imprimir o nome do aluno que teve mais aparições no quadro, em caso de empate seu programa deverá mostrar todos os alunos com mais aparições separados por vírgulas em ordem alfabética.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiros P, A e R (1 ≤ P, A, R ≤ 104), indicando respectivamente, o número de pérolas, número de alunos e a quantidade de respostas dadas por cada aluno. Segue P linhas com as pérolas escritas no quadro que terão no máximo 1000 caracteres. Em seguida terão A alunos, para cada aluno a primeira linha será seu nome com no máximo 100 caracteres minúsculos de 'a' até 'z', seguindo as R linhas mostrando suas respostas. A entrada termina quando P = A = R = 0, e não deve ser processada.",
        "titulo": "Pérolas",
        "descricao": "VI é uma professora de cálculo muito excêntrica, sempre que corrige as provas dos alunos (Que por sinal são provas dificílimas), ela anota todas as pérolas que encontra enquanto corrige, para que no dia da entrega ela possa escrever todas no quadro, para deixar os alunos envergonhados e que eles nunca mais errem as mesmas coisas. Sempre que a bronca termina e as provas são entregues, os alunos tentam descobrir quem foi que teve mais pérolas no quadro. Como a cada prova os números de pérolas aumentam e os alunos tem que estudar muito pois a cada semana acontece uma nova prova de cálculo, eles não tem tempo para verificar todas as provas e ver quem apareceu mais vezes no quadro. Sabendo que você é programador eles pediram sua ajuda para mostrar qual foi o aluno que teve mais pérolas escritas no quadro naquele dia."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1105",
        "saida": "Para caso de teste, seu programa deve imprimir uma única linha, contendo um único caractere: 'S', se for possível liquidar todos as debêntures sem intervenção do Banco Central da Nlogônia, e 'N', se algum banco precisar de empréstimos do governo para liquidar suas debêntures.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros B e N, indicando respectivamente o número de bancos (1 ≤ B ≤ 20) e o número de debêntures emitidas pelos bancos (1 ≤ N ≤ 20). Os bancos são identificados por inteiros entre 1 e B. A segunda linha contém B inteiros Ri separados por espaços, indicando as reservas monetárias de cada um dos B bancos (0 ≤ Ri ≤ 104, para 1 ≤ i ≤ B). As N linhas seguintes contêm cada uma três inteiros separados por espaços: um inteiro D, indicando o banco devedor (1 ≤ D ≤ B), um inteiro C, indicando o banco credor (1 ≤ C ≤ B e D ≠ C), e um inteiro V, indicando o valor da debênture (1 ≤ V ≤ 104). O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.",
        "titulo": "Sub-prime",
        "descricao": "A mais recente crise econômica foi em parte causada pela forma como os bancos faziam empréstimos para pessoas que não tinham capacidade de honrá-los e revendiam tais empréstimos para outros bancos (debêntures). Obviamente, quando as pessoas pararam de pagar os empréstimos, o sistema inteiro entrou em colapso. A crise foi tão profunda que acabou atingindo países do mundo inteiro, inclusive a Nlogônia, onde o honrado primeiro ministro Man Dashuva ordenou que o presidente do Banco Central procurasse uma solução para o problema. Esse, por sua vez, teve uma idéia brilhante: se cada banco fosse capaz de liquidar seus empréstimos somente com suas reservas monetárias, todos os bancos sobreviveriam e a crise seria evitada. Entretanto, com o elevado número de debêntures e bancos envolvidos, essa tarefa é extremamente complicada, e portanto ele pediu a sua ajuda para escrever um programa que, dados os bancos e as debêntures emitidas, determine se é possível que todos os bancos paguem suas dívidas, utilizando suas reservas monetárias e seus créditos."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1753",
        "saida": "Apresente uma linha com um inteiro que representa o número de distribuições distintas dos K cavaleiros ao redor da mesa. Este número pode ser bastante grande, por isso imprima o resto da divisão por 109 + 7.",
        "entrada": "A primeira linha contém dois inteiros K (1 ≤ K ≤ 106) e D (1 ≤ D ≤ 105), representando, respectivamente, o número de cavaleiros e o número de cavaleiros distraídos. Cada uma das linhas próximas D descreve um cavaleiro distraído diferente com dois inteiros A e B (1 ≤ A, B ≤ K), indicando que o cavaleiro que foi atribuído o assento A na verdade sentou-se no assento B. É garantido que não há dois cavaleiros que se sentaram no mesmo assento.",
        "titulo": "Cavaleiros Da Tàvola Redonda",
        "descricao": "Todos os meses o Rei Arthur celebra uma reunião do Conselho Superior. Os K cavaleiros que participam desses encontros são conhecidos como Os Cavaleiros da Távola Redonda, provavelmente porque eles se sentam em uma enorme mesa de carvalho redonda tendo K lugares e um grande trono com uma espada e uma pedra esculpidas em sua parte traseira. Para a reunião de hoje, cada cavaleiro recebeu um número entre 1 e K que indica o assento que ele deve tomar durante a reunião. Os assentos são numerados no sentido horário de 1 a K, sendo o assento numerado 1 o primeiro a esquerda do grande trono. Obviamente, o próprio rei não foi dado um número, porque ele se senta no trono. O escudeiro do Rei Arthur garantiu que não há dois cavaleiros com o mesmo número portanto não deverá haver nenhum problema. Como de costume, o rei foi o primeiro a entrar na sala do conselho hoje. De acordo com as regras de protocolo, ele sentou-se no seu trono e preparou-se para receber os K cavaleiros que devem entrar e sentar-se um a um. Após os D primeiros cavaleiros chegarem, o rei observou que alguns deles poderiam ter-se sentado em assentos errados, porque eles estavam distraídos falando sobre quem iria ganhar o próximo torneio. Que confusão! O escudeiro do Rei Arthur prontamente interveio e deu instruções para o restante K - D cavaleiros. Cada um deles deve entrar na sala do conselho e tentar sentar-se em seu assento legítimo; se sua cadeira já está ocupada, o cavaleiro deve caminhar no sentido horário ao redor da mesa e sentar no primeiro assento desocupado que ele encontra. Assim, a distribuição final de cavaleiros em torno da mesa depende da ordem em que entram na sala. Rei Arthur está agora interessado em saber o número de distribuições distintas dos K cavaleiros ao redor da mesa, dadas as cadeiras ocupadas pelos primeiros D cavaleiros. Duas distribuições são consideradas distintas quando há pelo menos um cavaleiro que se sente em diferentes lugares em ambas as distribuições. Como o Royal Advisor in Combinatorics and other Mathematics (ou Real ACM) a tarefa é atribuída a você. Você precisa dar uma resposta dentro de cinco horas em risco de perder o favor do rei. Anda logo!"
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1445",
        "saida": "A cada conjunto de relação, imprima o número total de participantes na festa, incluindo o anfitrião. O total da festa, uma por linha. Na entrada 0 não escreva nada.",
        "entrada": "Para cada festa, haverá um número de relação entre os convidados. Este é um valor N escrito antes das relações que seguem em pares do tipo (x, y) = (y, x). Onde x é o nome de um amigo e y o seu convidado. Os valores de x e y são numerados de 1 a 1000, e o anfitrião é sempre o número 1. A leitura de 0 na entrada indica fim de festa! O formato dessas entradas seguem os padrões abaixo.",
        "titulo": "Quem Vai à Festa?",
        "descricao": "A garoa fina que caiu na última semana levou o professor Claudius Virux ficar saudoso de seus tempos de Campina Grande – Pb, como estudante na UFCG. Lá, o inverno é um período marcado por uma chuvinha igual a de Joinville, com noites frias. Na universidade, as festinhas dos estudantes, que ocorriam em quase todas as sextas-feiras e sábados, eram um programa e tanto. O mais interessante é que se encontravam as figuras mais inusitadas, poetas, cantores, professores, e outros artistas, além, é claro, dos estudantes. Sempre havia algum motivo para organizar uma festa, quando não, a ideia era celebrar a semana dura da universidade que se passou. O mais curioso era a sistemática de como o anfitrião fazia o convite. O dono(a) da casa (em seus tempos se chamava de república) convidada os seus amigos imediatos, estes por sua vez convidavam outros, e assim, sucessivamente. Chegado o dia da festa, o anfitrião queria conhecer os seus novos amigos, a fim de verificar como tal corrente de convite tinha se propagada. Para controlar quantos e como os convidados vieram à festa, o anfitrião solicitou a cada um que chegasse, escrevesse seu nome, e quem o convidou. Sua tarefa é contar quantos convidados estão presentes em cada festa, dada apenas a relação imediata entre convidado e um amigo."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "2015",
        "saida": "Saída de uma linha com dois números inteiros representando o volume da peça Carol e Carla terá, em nessa ordem, se ambos tomam suas decisões de forma otimizada.",
        "entrada": "A primeira linha contém um inteiro N representando o número de vértices da face de topo poligonal do bolo (4 ≤ N ≤ 105). Cada uma das N linhas seguintes descreve um vértice do polígono com dois inteiros X e Y, que indica as coordenadas do vértice no plano XY (-108 ≤ X, Y ≤ 108). Vértices são dadas em sentido anti-horário e definir um polígono convexo simples. Nenhum de três pontos na entrada são colineares.",
        "titulo": "Fatia do Bolo",
        "descricao": "Carol e Carla são companheiras de quarto. Ontem elas tiveram uma grande festa e hoje eles têm um bolo parcialmente comido que eles querem dividir. Uma vez que as pessoas foram descuidados ao cortar-se de uma fatia, o bolo é agora a forma de um prisma com as suas faces superior e inferior sendo a mesma polígono convexo simples. Para adicionar um pouco de diversão para o processo de dividir o bolo, as meninas vieram com o jogo seguinte. Carol escolhe um vértice v da face superior do bolo. Carla escolhe outro vértice w da face superior que não é adjacente ao v. Em seguida, cortam o bolo em dois pedaços em sentido para baixo ao segmento vw, de modo a obter duas peças separadas de bolo, cada um na forma de um prisma. Por fim, Carol escolhe a peça que ela prefere, e Carla começa o outro. Carla imediatamente viu que este sistema dá uma vantagem Carol. Carla quer saber exatamente o quanto da vantagem Carol tem. É lhe dado um polígono que representa tanto as faces superior e inferior do bolo. A altura do bolo é 2, de modo que o volume de uma parte de bolo é de 2 vezes a área da sua face superior. Assumindo que o bolo é dividido conforme explicado, e que ambas as meninas tomam suas decisões para maximizar o volume da peça que eles têm no final, calcule o volume da peça que cada menina vai conseguir."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1849",
        "saida": "A saída deve ser um número A, que indica a área do maior quadrado possível de se formar com os dois retângulos dados.",
        "entrada": "A entrada é composta por 4 inteiros positivos LD, CD, LV, CV separados por espaço, que representam a largura e o comprimento do retângulo a ser incendiado por Drogon e a largura e o comprimento do retângulo a ser incendiado por Viserion, respectivamente. Nenhum dos inteiros excede o valor de 10000.",
        "titulo": "Dracarys!",
        "descricao": "Daenerys Targaryen, a filha da tempestade, tem 3 dragões: Drogon, Viserion e Rhaegal. Ela os utiliza com frequência em batalhas e os faz cuspir fogo ao dizer \"Dracarys!\". Ocorre que quando os dragões lançam fogo em superfícies planas, o fogo queima sempre uma área retangular. As dimensões dessas áreas dependem de diversos fatores, mas Daenerys consegue indicar com precisão para Drogon e Viserion qual a largura e o comprimento do retângulo que vai ser incendiado. Daenerys requer sua ajuda para que indique qual o maior tamanho de superfície plana quadrada é possível queimar dadas as dimensões dos retângulos que Drogon e Viserion conseguem fazer."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1867",
        "saida": "Para cada caso de teste, imprima uma linha, contendo um inteiro, indicando 1 se o primeiro número for o maior de um algarismo, 2 se o segundo número for o maior de um algarismo ou 0 se ambos os números possuírem o mesmo valor de um algarismo.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (0 ≤ N ≤ 10100, 0 ≤ M ≤ 10100), indicando os dois números a serem comparados. O último caso de teste é indicado quando N = M = 0, sendo que este caso não deverá ser processado.",
        "titulo": "Maior Número de Um Algarismo",
        "descricao": "Os habitantes do planeta Uno possuem um terrível problema de detecção de números com mais de um algarismo, de modo que, para tudo que vão fazer, transformam qualquer valor inteiro em um número de um algarismo, realizando somas sucessivas do número até o mesmo ser reduzido a um algarismo. Por exemplo, o número 999999999991, no planeta Uno, soma-se todos os algarismos, resultando em 9+9+9+9+9+9+9+9+9+9+9+1 = 100. Como o número 100 tem mais de um algarismo, o processo se repete, resultando em 1+0+0 = 1 Uma das grandes dificuldades que os habitantes possuem está em comparar dois números e verificar qual deles é o maior, segundo as regras do planeta. Escreva um programa que, dados dois números inteiros, identifique qual deles é o maior número de um algarismo."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1136",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um único caractere 'Y' se for possível anunciar todos os números de 0 até N, inclusive, ou um único caractere 'N' caso contrário.",
        "entrada": "Cada caso de teste é dado em exatamente duas linhas. A primeira linha contém dois inteiros N e B. O significado de N foi descrito acima (1 ≤ N ≤ 90), enquanto B representa o número de bolas que permaneceram no globo (2 ≤ B ≤ N+1). A segunda linha contém B inteiros distintos bi, indicando as bolas que permaneceram no globo (0 ≤ bi ≤ N). O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Bingo!",
        "descricao": "Albert, Charles e Mary inventaram uma nova versão do clássico jogo de Bingo. Na versão tradicional, o jogo é presidido por um não-jogador conhecido como caller. No começo de cada partida, cada jogador recebe uma carta contendo uma única combinação de números de 0 até N dispostos em colunas e linhas. O caller opera um globo contendo N+1 bolas numeradas de 0 até N. Em cada turno, o caller sorteia uma bola do globo, anuncia o número sorteado aos jogadores e não a coloca novamente no globo. Cada jogador procura pelo número em sua carta e o marca caso o encontre. O primeiro jogador que marcar um padrão pré-definido completo em sua carta (uma linha horizontal, por exemplo) ganha um prêmio.   Na versão Albert-Charles-Mary, em cada turno, o caller sorteia uma primeira bola, coloca-a de volta no globo, sorteia uma segunda bola, coloca-a de volta no globo, e então anuncia a diferença absoluta entre os números das duas bolas. Para aumentar o entusiasmo, antes do início da partida, um subconjunto possivelmente vazio de bolas é retirado do globo, de forma que ao menos duas bolas permaneçam no globo. Eles gostariam de saber se cada número de 0 até N podem ainda ser anunciados utilizando a nova regra de sorteio e considerando apenas as bolas que permaneceram dentro do globo."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1638",
        "saida": "Para cada caso de teste imprima uma linha contendo os custos resultantes de uma escolha ideal do tamanho da porção de alimentos. Imprimir cada valor como uma fração reduzida. Se o resultado for um número inteiro, não imprima o denominador 1. Veja o exemplo de saída para mais detalhes.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um inteiro N, (1 ≤ N ≤ 1000), que corresponde o número de alunos que comem na cantina. A próxima linha contém o valor de A e B (1 ≤ A, B ​​≤ 10). A terceira linha de cada caso de teste consiste de N inteiros Y1 , ..., Yn (1 ≤ Yi ≤ 100), onde Yi é a quantidade de comida estudante I consome. A entrada é terminada por N=0. OBS: Na primeira entrada, o tamanho ideal porção de alimentos é de 4,5. Note que o tamanho da porção de alimento, de 3 renderia um custo menor de 16, o quinto estudante, no entanto, teria que buscar comida 4 vezes.",
        "titulo": "Tamanho da Porção de Comida",
        "descricao": "A cantina da universidade não quer nenhum estudante deixe a cantina com fome. Portanto, enquanto um aluno estiver com fome, ele pode obter uma outra porção de comida de graça. A cantina usa um tamanho fixo de porção de alimentos, porque levaria muito tempo para pergunta a um estudante a quantidade de comida que ele quer. Pode acontecer que um aluno não terminar a sua última porção de comida e o restante seja jogado fora. Para minimizar os custos, o gerente da cantina quer determinar um tamanho fixo de porção de alimentos S de tal forma que a quantidade de comida que é desperdiçada seja pequena, mas também o número de vezes que os alunos têm de buscar outra porção da comida não seja muito grande. Note que esses dois objetivos podem ser conflitantes: Ao escolher um tamanho muito pequeno da porção de alimentos, não se desperdiçar comida, mas ao mesmo tempo o número de vezes que os alunos voltam para buscar mais comida é grande. Ao escolher um tamanho muito grande da porção de alimentos, pode-se assegurar que cada aluno tem de buscar apenas uma porção, mas, ao mesmo tempo, pode acontecer que uma grande quantidade de comida seja desperdiçada. O gerente da cantina coletou dados sobre quanto cada aluno consome. O problema a ser resolvido pode agora ser formulado matematicamente como se segue: Seja X a quantidade de alimentos que é desperdiçado, e Y o número de vezes que os estudantes vão buscar alimentos. Então, o objetivo é o de minimizar A × X + B x Y, em que A, B ​​são pesos que representam a importância relativa dos dois objetivos em conflito. Note-se que X e Y dependem do tamanho da porção de alimento S e as quantidades de alimentos cada aluno consome. Nós impomos a restrição adicional de que nenhum estudante deveria ter que passar mais de 3 vezes para buscar alimentos."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1891",
        "saida": "Para cada instância, imprima em uma linha Y se for possível remover todas as moedas, ou N caso contrário. Se for possível remover todas as moedas, a linha seguinte deve conter uma lista de N inteiros separados por espaços, cada qual representando o número de uma moeda, indicando a sequência em que elas devem ser removidas. Caso haja mais de uma sequência possível, imprima a lexicograficamente menor.",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é dada por um inteiro N (0 ≤ N ≤ 105), representando o número de moedas, seguido por uma cadeia de comprimento N, formada pelos caracteres 'B' (face branca exposta) e 'D' (face dourada exposta), representando uma configuração inicial.",
        "titulo": "Removendo Moedas no Kem Kradãn",
        "descricao": "Andréh e Andréas são dois amigos multiperitos que gostam muito de jogos. Sabendo que vários de seus amigos anseiam por uma viagem a Phuket, na Tailândia, Andréh e Andréas querem desafiar seus amigos em um tradicional jogo tailandês, o Kem Kradãn. Kem Kradãn (เกมกระดาน) é um jogo de tabuleiro tailandês existente desde o século II a.C. As peças do jogo são N moedas em que uma das faces é dourada e a outra é branca. Inicialmente as moedas são dispostas em linha sobre o tabuleiro e numeradas de 1 a N, da esquerda para a direita. Quando uma moeda de número i está com a face dourada exposta, ela pode ser retirada da mesa. Ao fazê-lo, as moedas de números i-1 e i+1, caso existam e ainda estejam no tabuleiro, são revertidas. Isto é, se estavam com a face dourada exposta, passam a ficar com a face branca exposta e vice-versa. O jogo consiste em tentar remover todas as moedas da mesa. Antes de desafiar seus amigos, Andréh e Andréas querem ter certeza que as configurações escolhidas para o desafio têm solução. Para ajudá-los, dada uma configuração inicial, você deve determinar se é possível remover todas as moedas e, se possível, mostrar como fazer isso."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "2142",
        "saida": "Seu programa deve imprimir o percurso do pombo. O símbolo '*' indica o momento em que o pombo é alcançado e o símbolo '!', o momento em que ele é capturado. Caso ele saia da área de ação da esquadrilha, imprima: \"Raios! Raios Duplos! Raios Triplos!\". Não deve haver espaço em branco somente após o último caractere da última linha da matriz, que deve ser justificada.",
        "entrada": "A entrada tem vários casos de teste. Em cada, você deverá informar a área de ação da esquadrilha (25 ≤ A < 106), isto é, sempre um quadrado perfeito, e o momento em que o turbo é ativado. A entrada termina com fim de arquivo. O voo do pombo e da esquadrilha são espirais e iniciam sempre a partir do elemento central, que é o número 1.",
        "titulo": "Pegue o Pombo!",
        "descricao": "A Esquadrilha Abutre está cansada de tentar caçar o pombo Doodle. Em vista disso, Dick Vigarista elaborou um plano de caça infalível, pelo menos em sua concepção. Toda vez que eles acionam o turbo de velocidade em suas máquinas voadoras, eles alcançam o pombo viajando uma quantidade a mais do que já viajaram, e conseguem finalmente pegá-lo quando viajam mais metade de onde já estão. Porém, se o pombo sair da área de ação da esquadrilha e, dessa forma, não for capturado, Dick Vigarista se irrita e resmunga, dizendo: \"Raios! Raios Duplos! Raios Triplos!\"."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1717",
        "saida": "Seu programa deve imprimir uma linha contendo um número real, com precisão de 4 casas decimais. O número deve ser o peso de uma decomposição de peso mínimo do polígono dado.",
        "entrada": "A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100). As 2N linhas seguintes contém cada uma dois números reais X e Y (0 ≤ X, Y ≤ 10000), com precisão de 4 casas decimais: as coordenadas dos 2N pontos, em sentido anti-horário, do polígono convexo.",
        "titulo": "Corte",
        "descricao": "Todo polígono convexo, com 2N vértices, pode ser decomposto em N − 1 quadril ́ateros, fazendo-se N − 2 cortes em linha reta entre certos pares de vértices. A figura abaixo ilustra três diferentes decomposiçõoes do mesmo polígono com N = 5. O peso da decomposição é a soma dos comprimentos de seus N − 2 cortes. Seu programa deve computar o peso de uma decomposição de peso mínimo!"
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1585",
        "saida": "Para cada caso de teste de entrada, imprima um valor inteiro (desconsiderando a parte decimal) correspondente a àrea da pipa criada, em cm2, seguido de um espaço e do texto \"cm2\", sem as aspas.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de pipas que serão construídas. Cada uma das N linhas a seguir contém dois valores inteiros x (10 ≤ x ≤ 100) e y (10 ≤ y ≤ 100) que indicam o tamanho dos dois bambus utilizados para construir a pipa.",
        "titulo": "Fazendo Pandorgas",
        "descricao": "Anastácia adora construir pipas (ou pandorgas) para seus amigos. Pedro, que sabe disso, separou vários retalhos de bambus da fábrica de móveis de seu tio que seriam descartados para dar a Anastácia. Ao entregar os bambus à Anastácia, Pedro perguntou a ela qual era a maior pipa que poderia ser construída com aqueles retalhos de bambus. Anastácia, então, que não é muito boa em calcular, quer que você a ajude nesta tarefa. Obs.: Cada pipa é construída com dois pedaços de bambus amarrados em forma de cruz, formando um losango."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1893",
        "saida": "Baseado nos dois percentuais observados por Jade, imprima na tela a fase na qual a lua se encontrava na noite anterior, conforme o exemplo abaixo. Não esqueça de imprimir o caractere de fim de linha após a saída :).",
        "entrada": "A entrada é composta por uma única linha contendo dois valores inteiros. O primeiro valor corresponde ao percentual observado por Jade na noite de dois dias atrás. O segundo valor corresponde ao percentual observado por jade na noite anterior.",
        "titulo": "Fases da Lua",
        "descricao": "Jade ganhou de presente de aniversário um telescópio e ficou muito feliz, pois adora olhar a lua à noite. Ela sempre foi uma estudante muito boa, e só analizando a lua por duas noites seguidas, já consegue identificar as mudanças que ocorreram na iluminação e o percentual aproximado da lua que está iluminada. Você, que é amigo da Jade e estuda Computação, resolveu fazer um pequeno programa que, baseado nesta avaliação que ela fez nas duas últimas noites, informa a fase na qual a lua se encontra. Se a porção visível da lua no momento estiver entre 0 e 2%, por exemplo, é lua nova, se for entre 3 e 96% é lua crescente, se for entre 97 e 100% é lua cheia e se for entre 96 e 3% (diminuindo) é lua minguante."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1772",
        "saida": "Para cada caso de teste imprima uma linha contendo 3 inteiros separados por espaço: RES MAX MIN, onde RES representa o número N após as permutações, MIN representa o menor valor intermediário e MAX representa o maior valor intermediário. (MAX e MIN também devem considerar também os valores inicial e final de N).",
        "entrada": "A primeira linha de um caso de teste contém os inteiros N (0 ≤ N ≤ 232 - 1)e K (1 ≤ K ≤ 100), representando o número inicial e a quantidade de permutações, respectivamente. As K linhas seguintes conterão dois inteiros A e B separados por espaço (0 ≤ A, B ≤ 31), indicando que deve haver a permutação entre os bits A e B do número N. A entrada encerra com N = K = 0.",
        "titulo": "Embaralhamento de Bits",
        "descricao": "Para descobrir se seus alunos realmente entenderam a aula de representação binária de números inteiros, o professor Marcelo mostrou o seguinte problema: “Dado um número inteiro e uma sequência de permutações dos bits de sua representação binária, encontre 3 números: o resultado final após todas as permutações, o maior e o menor valor encontrado durante as permutações”. O professor prometeu um ponto extra na média pra quem resolvesse o problema primeiro. Como ele nunca fez isso na vida (dar ponto extra), você se apressou pra resolver o mais rápido possível com medo que o professor mudasse de ideia."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1320",
        "saida": "Para cada caso de teste, imprima uma única linha contendo as respostas para as Q consultas, na mesma ordem em que as consultas aparecem na entrada e separadas por um espaço em branco. Para cada consulta, você deve imprimir um caractere 'Y' se for possível chegar ao destino a partir da estação inicial usando o metrô, ou 'N' caso contrário.",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros T e Q indicando, respectivamente, o número de teletransportadores (1 ≤ T ≤ 105) e o número de consultas (1 ≤ Q ≤ 10). A segunda linha contém T inteiros distintos ti indicando a posição do i-ésimo teletransportador (-107 ≤ ti ≤ 107). Cada uma das Q linhas seguintes descreve uma consulta e contém dois inteiros distintos S e D indicando a posição das estações inicial e final (-107 ≤ S, D ≤ 107). ​O último caso de teste é seguido de uma linha contendo dois zeros.",
        "titulo": "Metrô Engenhoso",
        "descricao": "O Rei da Logônia em breve irá inaugurar um novo e revolucionário metrô, baseado numa invenção dos Engenheiros Reais, que permite teletransporte. O novo metrô consiste de um longo túnel com uma estação a cada quilômetro. Existem também T teletransportadores, que estão localizados em algumas das estações. Em cada estação existe um teclado com T teclas, onde cada tecla corresponde a um teletransportador. A figura abaixo ilustra um sistema de metrô com três teletransportadores localizados nas estações marcadas como A, B e C. O metrô funciona da seguinte maneira: o usuário vai até uma estação (a estação inicial) e pressiona a tecla correspondente ao teletransportador que ele quer usar. O usuário então é teletransportado para a estação que está à mesma distância do teletransportador que a estação inicial, mas do lado oposto ao teletransportador. Mais precisamente, se a localização da estação inicial é i e o usuário pressiona a tecla correspondente ao teletransportador localizado na posição j, ele será levado à estação localizada na posição 2 x j - i. Por exemplo, se o usuário está na estação 6 e quer ir até a estação -2, ele pode usar o teletransportador C (e ir do 6 ao 10) e depois o teletransportador A (e ir do 10 ao -2). ​ O Rei, no entanto, sabe que é possível que não exista uma sequência de teletransportadores que leve um usuário de uma estação X até uma estação Y. Para evitar que os usuários tentem ir para um lugar inacessível, ele quer criar um programa disponível na Internet para os ajudar. O Rei quer que você escreva um programa que, dadas as posições de cada teletransportador, responda uma sequência de consultas. Para cada consulta, as estações inicial e final são dadas, e seu programa deve determinar se é possível para um usuário ir da estação inicial até a estação final."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2179",
        "saida": "A saída consiste em 2 linhas. A primeira linha contém uma lista contendo as células da vizinhança, ordenadas pelo percurso que Batuke e separadas por um espaço em branco. A segunda linha mostra o número total de células percorridas por Batuke.",
        "entrada": "A entrada consiste em três números inteiros: N (2 < N ≤ 10 ), F e C. N é o número de linhas na vizinhança (células enumeradas em 1..NxN, por linhas, da esquerda para a direita). F e C indica linha e coluna aonde Batuke inicia o seu percurso.",
        "titulo": "Batuke",
        "descricao": "Batuke é um cachorro com comportamento repetitivo que tem uma rotina particular quando sai para caminhar na sua vizinhança. A vizinhança também é de certa forma particular: uma matriz N x N que batuke percorre rotineiramente em espiral. Batuke inicia percorrendo: 1 célula à direita, uma abaixo, seguida por duas à esquerda, duas acima, então 3 à direita, 3 para baixo, então 4, e assim por diante. Lucas (o dono de Batuke), leva Batuke de carro para a célula inicial e o cão sempre segue sua rotina de corrida pelas células de sua vizinhança. Por exemplo, se a vizinhança tem tamanho N = 4, as células são enumeradas como segue: e o percurso feito por Batuke, iniciando na célula 1,1 (célula superior esquerda é 0,0) é: 6,7,11,10,9,5,1,2,3,4,8,12,16,15,14,13 Neste caso, a rotina de Batuke o faz caminhar por 16 células no total. Mas Batuke não compreende nada sobre fronteiras e ele sempre faz sua rotina (mesmo se ele tem que caminhar por diversas células a mais), para atravessar todas as células da vizinhança. Se a célula inicial for 2,2 por exemplo, a travessia em espiral (apenas as células da vizinhança são mostradas) é: 11,12,16,15,14,10,6,7,8,13,9,5,1,2,3,4. Neste caso, Batuke caminha por 24 células no total. Lucas sabe que você está estudando Computação e ele pediu a você um programa para resolver este problema: dado a vizinhança de N linhas por N colunas e uma célula inicial, você deverá mostrar o percurso em espiral e o total células percorridas."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1883",
        "saida": "Para cada instância, imprima uma linha contendo um único caractere. Imprima 'Y' se a pessoa teve alguma chance de ter sido perdoada; caso contrário, imprima 'N'.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de diversas linhas. A primeira linha contém dois inteiros, N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 103) . A seguintes N linhas contêm exatamente M símbolos representando, como descrito no enunciado, uma sala onde uma pessoa foi presa.",
        "titulo": "Fuga de Ayutthaya",
        "descricao": "Ayutthaya foi um dos primeiros reinos da Tailândia. Ele existiu entre os anos 1351 e 1767. A organização de Investigadores de Mistérios Extraordinários (IME) tem um grande interesse em revelar os segredos dessa antiga civilização. Um dos historiadores mais renomeados dessa instituição é Márcio \"o imprescindível\" Himura. Atualmente, ele está investigando as regras de conduta e os castigos que eram impostos na época do rei Ramathibodi I, fundador de Ayutthaya. Descobertas recentes mostram uma forma de punição dada aos habitantes de Ayutthaya que não se convertiam ao budismo theravada, religião que foi adotada pelo rei Ramathibodi I. Esse castigo consistia em deixar a pessoa presa em uma sala que tinha uma única saída, e onde era aceso fogo em diferentes lugares. Se a pessoa conseguia chegar à saída antes de ser atingida pelo fogo, sua vida era perdoada. Márcio tem acesso a diferentes registros que mostram a estrutura de algumas salas onde eram feitos esses castigos. Porém, não existem documentos onde se registre se a pessoa punida foi perdoada ou não. Márcio gostaria de saber se para cada uma dessas pessoas existe alguma chance de ela ter sido perdoada. Para isso, Márcio representou cada sala como uma grade de N linhas e M colunas onde cada posição contém um símbolo com o seguinte significado onde \"início\" se refere à posição da pessoa dentro da sala quando o fogo foi aceso. Além disso, Márcio impôs as seguintes restrições para modelar cada situação: O fogo se propaga nas quatro direções cardinais (N, S, E, O) à velocidade de uma célula por minuto. A pessoa presa também se move em essas quatro direções com essa mesma velocidade. Nem o fogo e nem a pessoa presa podem ultrapassar uma parede. Se a pessoa e o fogo chegarem a ocupar a mesma posição no mesmo instante de tempo, então considera-se que essa pessoa morre instantaneamente. Você é um membro do IME e Márcio quer saber se você merece tal distinção. Por isso, encarregou a você a tarefa de determinar se um preso teve a chance de ser perdoado."
    },
    {
        "nivel": "9",
        "assunto": "2",
        "numero": "1339",
        "saida": "Para cada caso de teste seu programa deverá imprimir uma linha. Se seu avô estiver correto, imprima “Yes grandpa!”, caso contrário imprima “No, you are wrong!”.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha da entrada é um inteiro que indica o número de testes. Cada descrição do teste contém dez linhas de entrada. As primeiras nove linhas do teste irão descrever a configuração inicial, no formato mostrado na Figura 3a. A próxima linha irá conter uma lista de rotações, terminando com o valor 0.",
        "titulo": "O Cubo Mágico do Avô",
        "descricao": "O famoso brinquedo/passatempo, chamado Cubo Mágico, consiste em um cubo como mostrado na Figura 1a, onde letras representam cores (e.g. B para azul, R para vermelho). O objetivo do jogo é rotacionar as faces do cubo de modo que no final cada face do cubo contenha uma cor diferente, como mostrado na Figura 1b. Note que,   (a) Embaralhado                               (b) Posição vencedora Figura 1: Cubo Mágico quando uma face é rotacionada, as configurações das cores em todas as faces adjacentes trocam. Figura 2a ilustra a rotação de uma das faces. Dada uma configuração embaralhada, chegar até a posição final pode ser bem desafiador, como você já deve saber. Figura 2: Exemplo de rotação Mas seu avô tem muitos anos de experiência, e diz que, dada qualquer configuração do Cubo Mágico, ele consegue apresentar uma sequência de rotações que levam a uma configuração vencedora. Para que todas as faces do cubo estejam visíveis, nós iremos representar o cubo como mostrado na Figura 3a. As seis cores são Amarelo, Vermelho, Azul, Verde, Branco e Magenta, representadas pelas respectivas letras, Y, R, B, G, W e M. Você receberá uma configuração inicial e uma lista de rotações. Uma rotação será representada por um valor inteiro, indicando a face que será rotacionada e a direção da rotação (um valor positivo significa rotação no sentido horário, um valor negativo significa rotação no sentido anti-horário). As faces do cubo são numeradas como mostrado na Figura 3b. Você deverá escrever um programa que checa se a lista de rotações irá levar a uma configuração vencedora.         (a) Cores                                                    (b) Identificadores de face para rotação Figura 3: Representação do cubo"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1919",
        "saida": "Para cada caso, exiba lexicograficamente o(s) conjunto(s) de valores {a, b, c, d, e} que resolvem o enigma do professor Girafales, ou “impossivel” caso não exista solução. Deixe uma linha em branco após cada caso de teste. Observe a formatação de saída.",
        "entrada": "A primeira linha da entrada possui um inteiro T, indicando a quantidade de casos de testes. Cada uma das T linhas a seguir contém um inteiro K (1 ≤ K ≤ 107), como descrito acima.",
        "titulo": "Ajude Nhonho",
        "descricao": "Depois de Professor Girafales descobrir que Nhonho faltava às aulas e pedia para Chaves assinar seu nome na lista de presença em troca de um pão com presunto, Nhonho começou a receber toda semana um desafio especial do professor, e se ele não os resolvesse, seria dedurado para seu pai. O desafio dessa semana se chama “Soma permutada”, e consiste em resolver o seguinte enigma: abc + acb + bac + bca + cab + cba = K, dado um valor de K, sem que ocorram repetições de dígitos (a ≠ b ≠ c). Com K = 1332, uma das possíveis soluções seria usar a = 1, b = 2 e c = 3, somando suas permutações: 123 + 132 + 213 + 231 + 312 + 321 = 1332. Outra solução seria: a = 0, b = 1, c = 5: 015 + 051 + 105 + 150 + 501 + 510 = 1332. As explicações acima usaram apenas 3 dígitos para maior facilidade de entendimento, o problema real, que Professor Girafales passou a Nhonho e você terá que ajudá-lo a resolver, consiste em 5 dígitos, e deverá ser somada todas suas permutações (abcde + abced + ..... + edcba), sem repetição de dígitos (a ≠ b ≠ c ≠ d ≠ e). Dado o valor de K, exiba, lexicograficamente, todos os possíveis conjuntos de números que satisfaçam o enigma de Girafales."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2125",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, em que k é o número da instância atual. Imprima a lista de todas ocorrências linha coluna (o canto superior esquerdo é a posição 0 0) do quadrado m × m no quadrado n × n. A saída deve estar ordenada primeiro pelas colunas e em seguida pelas linhas. Caso não tenha nenhuma ocorrência, imprima uma linha com nenhuma ocorrência.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em dois inteiros n (1 ≤ n ≤1000) e m (1 ≤ m ≤ 60 e m < n), indicando os tamanhos dos quadrados. Nas n linhas seguintes temos n caracteres \"|\" ou \"_\" que representam os caracteres do quadrado n × n. Nas m linhas seguintes temos m caracteres \"|\" ou \"_\" que representam os caracteres do quadrado m × m.",
        "titulo": "Construtores de Totens",
        "descricao": "Várias civilizações pré-colombianas habitaram a região de Alberta, Canadá. Pouco restou destas culturas, dizimadas pelo frio intenso, pelos ursos e, finalmente, pelos invasores ingleses e franceses que chegaram depois do descobrimento. Hoje, pesquisadores da Universidade de Alberta tentam desvendar os mistérios destes povos, estudando os totens produzidos na região. Estudos do departamento de artes da universidade mostraram que os construtores de totens gostavam de marcá-los com várias cópias de suas assinaturas. A assinatura do artista era feita com sulcos verticais “|” e horizontais “_”. Estudiosos imaginam que o símbolo era uma representação do mal na cultura primitiva e, portanto, tabu, construindo um padrão quadrado. Já foram identificadas várias assinaturas de artistas daquela época. Sua tarefa neste problema é fazer um programa que recebe o desenho de um totem, através de um padrão quadrado de tamanho n × n de sulcos verticais e horizontais, e uma assinatura quadrada de tamanho m × m com um padrão do mesmo tipo, e encontrar todas as ocorrências da assinatura no totem."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2193",
        "saida": "For each test case, display its case number followed by one of the following three messages: “equivalent solutions” to indicate that there are one or more valid transformations, and all of them have the same effect on the whole drawing (no matter what the whole drawing looks like). “inconsistent solutions” to indicate that there are several valid transformations, but in general not all of them map the entire drawing in the same way (some drawing is mapped differently by two valid transformations). “no solution” to indicate that neither of the first two cases occurs. A valid transformation is a combination of rotation, translation and scaling (or rotation, scaling and translation) which satisfies the restrictions described above and maps the initial set of red dots to the final set (occupying all three final locations). Follow the format of the sample output.",
        "entrada": "The input contains several test cases. Each test case consists of six pairs of integers xi and yi (−500 ≤ xi , yi ≤ 500 for 1 ≤ i ≤ 6), three pairs per input line. The first three pairs represent the distinct initial locations of the three red dots. The last three pairs represent the distinct final locations of the three dots. The indexing of the pairs in each group of three is not significant: for example, (x1, y1) could have been mapped to any of (x4, y4), (x5, y5) or (x6, y6). The last test case is followed by a line with six zeros.",
        "titulo": "Affine Mess",
        "descricao": "Tess L. Ation ran into a little problem last week when she demonstrated the beta version of her new drawing software. On the screen she had an elegant demonstration design that illustrated every feature of her program; it had taken her hours to produce it. She was just putting the finishing touches on it as a group of potential investors entered the room to see the demonstration. The presentation went well. Near the end, Tess clicked on a control panel button and told her audience, “This is the ‘snap to grid’ control. It forces control points, such as vertices, to jump to the nearest grid point. Here, let me show you,” and she placed three bright red dots on the screen. Each one appeared at the grid point nearest to where she clicked. (“Luckily all control points in my demo design were already at integer coordinates. But I will have to remember to delete these three red dots before I save my diagram,” she thought to herself.) “Now I’ll step into the next room and get out of your way so you can discuss the system among yourselves and get a closer look at the screen, but please don’t touch anything, since I haven’t saved that file yet.” A few minutes later, the group joined Tess. One of the visitors stepped up to Tess and said, “I hope you don’t mind, but I wanted to try it myself. Don’t worry, I just played with the x-scale and y-scale controls a little bit.” The next person said, “Sorry if this is a problem, but I really wanted to get a feel for the speed of display, so I just played around with the translation tool.” And a third person said, “I couldn’t resist just one tiny test: I rotated the image just so I could see all of the vertices snap to the nearest grid points after the rotation.” The person who played with the rotation tool remembered going first, but the other two could not recall their order. The three remembered only a few details of the changes. The x- and y-scaling factors had been (possibly negative) nonzero integers; the center of scaling was the origin (0, 0). The x- and y-translation amounts had been integers. Rotation had been specified by a point with integer coordinates (x, y) on the perimeter of a square of width 20 centered at the origin (hence, −10 ≤ x, y ≤ 10 and the absolute value of x or y or both was 10). The tool rotated the drawing around the origin such that the positive x-axis would pass through (x, y) afterwards. Snapping took place after this rotation (coordinates with a fractional part of 0.5 were rounded away from zero). After they left, Tess looked at her design – it was completely changed! She had not yet implemented the “undo” feature, and she had not saved the diagram prior to giving the demonstration. However, the three identical red dots were still there (transformed to other integer grid locations, of course), and Tess could remember the integer coordinates where she had originally placed them. Obviously, someone else might have altered the drawing without saying anything to her, but she could write a program to see if it was possible to reconstruct the sequence of alterations. Can you too?"
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1546",
        "saida": "Para cada caso de teste você deve imprimir o nome do membro da equipe responsável por responder o feedback.",
        "entrada": "O primeiro valor a ser lido é o número de casos de teste N (1 < N < 100). Cada caso de teste representa um dia de trabalho respondendo feedbacks. Cada caso de teste inicia com K (1 < K < 50), indicando o número de feedbacks recebidos naquela data. Seguem K linhas indicando a categoria de cada um dos feedbacks, conforme mostrado acima (1, 2, 3 ou 4).",
        "titulo": "Feedback",
        "descricao": "Muitos alunos de diversas universidades conhecem o portal de programação IRU. Este portal possui milhares de problemas de programação disponíveis. Diariamente a equipe do IRU recebe diversos feedbacks (elogios, bugs, dúvidas, sugestões, ...) que precisam primeiramente ser atribuídos para membros da equipe resolver. Como a equipe é muito ocupada e não tem tempo para classificar estes feedbacks, você foi convidado a escrever um programa que faça isso e mostre quem será o membro responsável por resolver e responder o feedback. Os membros responsáveis em cada setor são: Elogios: Rolien Bugs: Naej Dúvidas: Elehcim Sugestões: Odranoel"
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1899",
        "saida": "Imprima uma única linha contendo Y se é possível acertar o alvo, ou N caso contrário.",
        "entrada": "A primeira linha contém o inteiro N (0 ≤ N ≤ 1000). As próximas N linhas contém três inteiros cada, descrevendo as paredes. A linha i (1 ≤ i ≤ N) contém os inteiros Di, Ai e Bi (1 ≤ Di ≤ 104, 1 ≤ Ai < Bi ≤ 104). A última linha contém três inteiros DT, AT e BT (1 ≤ DT ≤ 104, 1 ≤ AT < BT ≤ 104). Você pode assumir que D1 < D2 < ... < DN < DT.",
        "titulo": "Acerte o Alvo!",
        "descricao": "\"Acerte o Alvo!\" é um jogo muito popular na Nlogônia.  As regras do jogo são muito simples. Há uma bola no chão. Além disso, existe uma parede a DT metros de distância da bola, a qual contém um alvo. O alvo começa a AT metros do chão, e termina a BT metros do chão (logo, o comprimento do alvo é de BT-AT metros). Você deve chutar a bola em alguma direção. A bola irá seguir uma linha reta na direção em que for chutada. O objetivo do jogo é chutar a bola em uma direção tal que ela acerte qualquer ponto do alvo. Entretanto, há também N paredes entre a bola e o alvo. A parede i (1 ≤ i ≤ N) está a Di metros de distância da bola. Existe apenas uma abertura em cada parede. A parede i tem uma abertura começando a Ai metros do chão e terminando a Bi metros do chão. Naturalmente, a bola deve passar por todas as aberturas e acertar o alvo. No caso da bola passar exatamente em um ponto no qual uma abertura começa ou termina (isto é, a Ai ou Bi metros do chão), considere que a bola passa pela abertura com sucesso. Dependendo das posições das paredes e das aberturas, pode não haver uma maneira de acertar o alvo. Sua tarefa é determinar se é possível acertar o alvo ou não. A imagem a seguir mostra o primeiro exemplo de entrada e uma rota possível para a bola, provando que é possível acertar o alvo neste caso."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1431",
        "saida": "Para cada caso de teste, imprima uma única linha com um único inteiro representando o menor valor para a diferença acumulada se T for escolhido de forma ótima.",
        "entrada": "A entrada contém vários casos de teste. Cada caso é dado em várias linhas. A primeira linha de cada caso de teste contém um único inteiro N (1 ≤ N ≤ 104), o número de divisões na escola. 2 x N linhas seguem, com cada divisão sendo descrita em duas linhas consecutivas. A primeira linha de cada par contém um único inteiro Ki (1 ≤ Ki ≤ 104), o número de estudantes na divisão i. A segunda linha contém Ki inteiros entre 0 e 1000, inclusive, separados por espaços simples, representando as notas de cada um dos estudantes da divisão i. Você pode assumir que o número total de estudantes em cada caso de teste (ou seja, a soma de todos Ki) não é maior que 105. O último caso de teste é seguido de uma linha contendo um único zero.",
        "titulo": "Níveis de Klingon",
        "descricao": "No ensino médio da América Latina, Klingon se tornou tão popular que muitos dos estudantes começaram a aprender essa língua artificial por conta própria. Após tomar conhecimento da situação, os diretores deciriram implementar cursos formais de Klingon. O problema é que as crianças possuem diferentes níveis iniciais da linguagem. Sendo assim, os diretores decidiram oferecer dois níveis de curso: básico e avançado. A escola possui diversas divisões, com cada estudante pertencendo a exatamente uma divisão. Devido à burocracia e conflitos de agenda, estudantes de divisões diferentes não podem fazer parte do mesmo curso. Além disso, para ser justo, os níveis básico e avançado devem ser oferecidos a todas as divisões, e ter o mesmo nível de dificuldade em uma divisão. Sendo assim, cada divisão será particionada em dois grupos: um grupo será associado ao nível básico e o outro grupo ao nível avançado. É possível que uma divisão não possua nenhum estudante em um dos níveis. Para definir os grupos, um teste de Klingon foi aplicado previamente a todos os estudantes da escola, cada um tirando uma nota entre 0 e 1000, inclusive. Os diretores da escola decidiram que todos os estudantes com uma nota maior ou igual a algum valor T serão matriculados no nível avançado, e todos os estudantes com nota menor que T serão matriculados no nível básico. No entanto, eles não conseguiram decidir o melhor valor de T. Eles gostariam de um valor que dividisse igualmente todas as divisões. Para isso, eles bolaram uma métrica: eles querem o valor de T que minimize a diferença acumulada, ou seja, a soma da diferença entre o número de estudantes nos dois grupos (básico e avançado) em cada divisão. Por exemplo, se a escola possui duas divisões, onde uma divisão possui 10 estudantes no nível básico e 20 no nível avançado, enquanto a outra possui 17 e 15, respectivamente, a diferença acumulada seria |10 - 20| + |17 - 15| = 12;"
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1553",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de perguntas que serão adicionadas na nova sessão do site.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e K (1 ≤ N ≤ 1000, 1 ≤ K ≤ 100), indicando o número de perguntas realizadas, e o número de vezes que uma pergunta deve ser feita para ser considerada “frequente”, respectivamente. Em seguida haverá N inteiros P (1 ≤ P ≤ 100), cada um indicando o número de uma determinada pergunta. O último caso de teste é indicado quando N = K = 0, o qual não deverá ser processado.",
        "titulo": "Perguntas mais Frequentes",
        "descricao": "Muitos sites na internet adicionam uma sessão chamada “Perguntas mais Frequentes” que, como o nome já diz, contém as perguntas mais feitas pelos usuários que utilizam o site. O portal do URI costuma receber muitas perguntas de seus usuários, então Neilor imaginou que seria uma boa ideia adicionar uma sessão de Perguntas mais Frequentes no site. Como o Neilor anda muito ocupado ultimamente, ele pediu a sua ajuda para adicionar essa sessão. Dados os identificadores de perguntas feitas pelos usuários, diga o número de perguntas que serão adicionadas na nova sessão do site. Uma pergunta é classificada como “frequente” quando ela é feita ao menos K vezes."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1884",
        "saida": "Para cada instância, imprima uma linha contendo 'Y' se for possível que Nai Khanom Tom vença todos os Rajasis; imprima 'N' caso contrário.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém 3 inteiros, N (1 ≤ N ≤ 2000), H (0 ≤ H < 109) e K (1 ≤ K ≤ 2000), onde H representa o valor inicial dos pontos de vida. Cada uma das N linhas seguintes contém 2 inteiros, xi e yi (1 ≤ xi, yi < 109).",
        "titulo": "Lutando Contra os Rajasi",
        "descricao": "O Muay Thai é uma arte marcial originária da Tailândia. Muitos praticantes dessa arte são considerados lendas pelo povo tailandês. Dentre todos eles, Nai Khanom Tom é considerado o \"pai\" do muay thai. A seguinte história faz parte da lenda desse lutador. O rei Mangra da Birmânia organizou uma luta entre um preso de guerra tailandês e um guerreiro birmano para decidir qual tinha o melhor estilo de luta. Nai Khanom Tom foi escolhido para lutar e derrotou com muita facilidade seu adversário. Porém, o árbitro da luta alegou que isso aconteceu pela dança (Ram Muay) feita por Nai Khanom Tom. Por isso, o rei mandou a que Nai lutasse contra dez guerreiros birmanos, um após o outro. Ainda assim, o resultado foi o mesmo, Nai Khanom Tom venceu todos. Após ver as habilidades de Nai, o rei Mangra concedeu-lhe a liberdade. Essa história passou de geração a geração. Existem até pessoas que acreditam que Nai Khanom Tom podia vencer qualquer quantidade de adversários, incluindo seres da mitologia tailandesa. Você é um grande fã do muay thai e deseja testar a veracidade dessa afirmação. Suponha que Nai Khanom Tom possui H pontos de vida e tem que lutar contra N Rajasis. Cada um deles possui xi pontos de vida e yi pontos de recuperação. Para vencer uma luta, os pontos de vida de Nai devem de ser maiores do que os pontos de vida do Rajasi. Após lutar, Nai perde xi pontos de vida e recupera yi pontos em seguida. Além disso, pelo seu treinamento Nai conhece K feitiços que podem ser usados para derrotar um Rajasi instantaneamente. Porém, nesse caso, ele não perde nem ganha os pontos de vida como o caso anterior. Agora, chegou a sua oportunidade de provar essa hipótese. Dada a descrição de um conjunto de N Rajasis, você deve responder se Nai Khanom Tom pode vencer todos eles. Note que Nai Khanom Tom pode lutar com os Rajasis na ordem que ele quiser."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "2010",
        "saida": "Para cada caso de teste na entrada, há a saída de uma linha com um inteiro que representa a quantidade mínima de dinheiro do jogo que é necessário para concluir todos os níveis de N no jogo. Se é impossível completar todos os níveis, escreva o valor \"-1\".",
        "entrada": "A entrada contém vários casos de teste; cada caso de teste é formatado como segue. A primeira linha contém dois inteiros N e M, representando respectivamente o número de níveis e o número de lojas no jogo (1 ≤ N, M ≤ 105). A segunda linha contém N inteiros E1, E2. . . , EN, onde Ei é a energia necessária para completar o nível i-th (1 ≤ Ei ≤ 104 para i = 1, 2,. . . , N). Cada uma das próximas M linhas descreve uma loja com três inteiros L, S e C, que representam, respectivamente, o nível em que a loja está localizada, a força e o custo da energia vendida (1 ≤ L ≤ N, 1 ≤ S ≤ 109 e 1 ≤ C ≤ 104).",
        "titulo": "Mantenha Isso Energizado",
        "descricao": "A Incrível Companhia de Produção de Consoles (ICPC) está agora a projetar o seu mais novo console de videogame modelo, o Super-Arcade Reloaded (SAR). O lançamento do SAR será acompanhado pela liberação de um jogo carro-chefe, que só estará disponível para os seus usuários. Este jogo, que, aliás, será chamado \"Aventuras do Capitão Mikado (ACM)\" e o mesmo dispõe de uma moeda do jogo que pode ser convenientemente comprado com o dinheiro do mundo real! O ACM é um jogo muito simples que consiste em níveis de N numerados 1, 2,. . . , N. O nível i-th requer exatamente Ei unidades de energia para ser concluída. Isto significa que, a fim de completar esse nível, o utilizador deve ter pelo menos Ei de energia, e depois de fazê-lo, vai diminuir exatamente esse montante. Para ganhar o jogo o usuário deve completar todos os níveis, em ordem crescente, começando no nível 1 e continuando até nível N, sem nunca voltar para algum nível já concluído. Inicialmente, o usuário começa com nenhuma energia, e, a fim de obter alguma ele deve comprar pacotes de energia das lojas distribuídas entre os N níveis. Há M lojas. Cada loja vende um pacote de energia tendo um teor S e um custo C que variam a cada loja. O usuário só pode comprar pacotes de energia das lojas do nível que ele está atualmente antes de começar a completar esse nível. O efeito de uma compra de pacote de energia de força S é que a energia do usuário se transforma imediatamente em S, independentemente do valor que tinha antes. A fim de aumentar ainda mais as suas vendas, o ICPC tem o pensamento de uma promoção revolucionária: ela vai reembolsar o custo total da SAR para quem completa o jogo ACM usando o mínimo de quantidade de dinheiro no jogo. Dada a descrição do jogo, você pode ajudá-los a descobrir o que é a quantidade mínima de dinheiro necessário para terminar o jogo?"
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1127",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um caractere: ‘S’ caso o trecho realmente tenha sido plagiado pela música ou ‘N’ caso contrário.",
        "entrada": "A entrada é composta por vários casos de teste. A primeira linha de um caso de teste contém dois inteiros M e T (1 ≤ M ≤ 100000, 1 ≤ T ≤ 10000, T ≤ M ), indicando respectivamente o número de notas da música e do trecho suspeito de ter sido plagiado. As duas linhas seguintes contém M e T notas, respectivamente, indicando as notas da música e do trecho suspeito. As notas em cada linha são separadas por espaço; cada nota é uma dentre ‘A’, ‘B’, ‘C’, ‘D’, ‘E’, ‘F’ ou ‘G’, possivelmente seguida de um modificador: ‘#’ para um sustenido ou ‘b’ para um bemol. O último caso de teste é seguido por uma linha que contém apenas dois números zero separados por um espaço em branco.",
        "titulo": "Plágio Musical",
        "descricao": "As notas musicais são unidades básicas da música ocidental tradicional. Cada nota está associada a uma frequência. Duas notas musicais cujas frequêcias fundamentais tenham uma relação de potência de 2 (uma metade da outra, uma duas vezes a outra, etc.) são percebidas como muito similar. Por isso, todas as notas com esse tipo de relação recebem o mesmo nome, como descrito a seguir. Há doze notas básicas, em uma sequência crescente de frequências, cada nota separada da anterior por uma mesma distância na escala musical (essa distância é chamada de meio-tom). Sete dessas doze notas são representadas por letras do alfabeto (A, B, C, D, E, F e G). A tabela abaixo mostra a distância, em meio-tons, entre essas notas. Note que há cinco notas que não são representadas pelas letras do alfabeto: as que estão entre A e B, entre C e D, entre D e E, entre F e G e entre G e A. As notas podem ser modificadas por duas alterações cromáticas: sustenido e bemol, representadas respectivamente pelos símbolos ‘#’ e ‘b’. Sustenido altera a nota em meio tom para cima, e bemol altera a nota em meio tom para baixo. Uma nota com alteração cromática é denotada pelo nome da nota seguida pelo símbolo da alteração. Note que com esse esquema conseguimos representar todas as doze notas. A figura abaixo ilustra o nome das notas, segundo o esquema descrito acima, em um trecho de teclado de piano. Uma melodia pode ser representada por uma sequência de notas musicais. Por exemplo, A   A   D   C#   C#   D   E   E   E   F#   A   D   G#   A é uma melodia muito conhecida. Note no entanto que, como as distâncias entre os meios-tons são sempre iguais, a mesma melodia pode ser escrita iniciando em outra nota (dizemos que a melodia está em outro tom): B   B   E   D#   D#   E   Gb   Gb   Gb   G#   B   E   A#   B Sua vizinha é uma famosa compositora que suspeita que tenham plagiado uma de suas músicas. Ela pediu a sua ajuda para escrever um programa que, dada a sequência de notas da melodia de sua música, e a sequência de notas de um trecho de melodia suspeito, verifique se o trecho supeito ocorre, em algum tom, na música dada."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1426",
        "saida": "Para cada caso de teste, a saída deve ser formada por 9 linhas descrevendo os números de todos os tijolos da parede. Assim, a i-ésima linha deve conter os números correspondentes aos i tijolos da i-ésima linha da parede, da esquerda para a direita, separados por um espaço.",
        "entrada": "A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste. Esta linha é seguida pelos casos de teste. Cada caso é descrito por 5 linhas. Essas linhas correspondem às linhas ímpares da parede, de cima para baixo, como descrito acima. Cada linha contém os números nos tijolos já rotulados da linha correspondente na parede, da esquerda para a direita, separados por um espaço em branco. Você pode assumir que todo caso de teste é correto, isto é, existe uma solução para o problema descrito.",
        "titulo": "Coloque Tijolos na Parede",
        "descricao": "Não, não é \"mais um tijolo na parede\", é apenas um problema sobre somar números. Suponha que você tem uma parede com o formato de um triângulo, como a mostrada abaixo. A parede tem 9 linhas, e a i-ésima linha tem exatamente i tijolos, considerando que a linha mais acima é a 1ª e que a mais abaixo é a 9ª. Alguns tijolos são rotulados com um número, enquanto os demais estão em branco. Os tijolos rotulados aparecem apenas em linhas ímpares, e ocupam posições ímpares dentro das suas linhas. ​ O problema que você deve resolver consiste em rotular os tijolos em branco com números, de tal forma que a seguinte regra seja satisfeita: O número de um tijolo é igual à soma dos números dos dois tijolos abaixo dele. Obviamente, esta regra não é aplicada à 9ª linha. Todos os números devem ser inteiros. Nota: O exemplo de entrada contém dois casos de teste. O primeiro dele corresponde à parede mostrada acima."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1574",
        "saida": "Para cada caso de teste, imprima a posição final do robô. Note que após processar cada caso de teste, o robô deve ter sua posição inicial resetada para a origem.",
        "entrada": "A primeira linha contém o número de casos de testes T (T <= 100). Cada caso de teste inicia com um inteiro n ( 1 <= n <= 100), o número de instruções. Cada uma das n linhas seguintes contém uma instrução.",
        "titulo": "Instruções do Robô",
        "descricao": "Você possui um robô na origem do eixo x. O robô receberá algumas instruções. Sua tarefa é predizer sua posição depois de executar todas as instruções. LEFT: move uma unidade para a esquerda (diminui p em 1, onde p é a posição do robô antes de mover) RIGHT: move uma unidade para a direita (incrementa p em 1) SAME AS i: executa a mesma ação que na i-ésima instrução. É garantido que i é um inteiro positivo não maior que o número de instruções já executadas."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1091",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma linha contendo: a palavra divisa se a residência encontra-se em cima de uma das linhas divisórias (norte-sul ou leste-oeste); NO se a residência encontra-se na Nlogônia do Noroeste; NE se a residência encontra-se na Nlogônia do Nordeste; SE se a residência encontra-se na Nlogônia do Sudeste; SO se a residência encontra-se na Nlogônia do Sudoeste.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro K indicando o número de consultas que serão realizadas (0 < K ≤ 103). A segunda linha de um caso de teste contém dois números inteiros N e M representando as coordenadas do ponto divisor (-104 < N, M < 104). Cada uma das K linhas seguintes contém dois inteiros X e Y representando as coordenadas de uma residência (-104 ≤ X, Y ≤ 104).Em todas as coordenadas dadas, o primeiro valor  corresponde à direção leste-oeste, e o segundo valor corresponde à direção norte-sul. O final da entrada é indicado por uma linha que contém apenas o número zero.",
        "titulo": "Divisão da Nlogônia",
        "descricao": "Depois de séculos de escaramuças entre os quatro povos habitantes da Nlogônia, e de dezenas de anos de negociações envolvendo diplomatas, políticos e as forças armadas de todas as partes interessadas, com a intermediação da ONU, OTAN, G7 e SBC, foi finalmente decidida e aceita por todos a maneira de dividir o país em quatro territórios independentes. Ficou decidido que um ponto, denominado ponto divisor, cujas coordenadas foram estabelecidas nas negociações, definiria a divisão do país, da seguinte maneira. Duas linhas, ambas contendo o ponto divisor, uma na direção norte-sul e uma na direção leste-oeste, seriam traçadas no mapa, dividindo o país em quatro novos países. Iniciando no quadrante mais ao norte e mais ao oeste, em sentido horário, os novos países seriam chamados de Nlogônia do Noroeste, Nlogônia do Nordeste, Nlogônia do Sudeste e Nlogônia do Sudoeste. A ONU determinou que fosse disponibilizada uma página na Internet para que os habitantes pudessem consultar em qual dos novos países suas residências estão, e você foi contratado para ajudar a implementar o sistema."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2058",
        "saida": "A saída é o número mínimo de triângulos necessários para compor um polígono regular de N lados.",
        "entrada": "A entrada é composta por um número N (3 ≤ N ≤ 109), que indica o número de lados de um polígono regular.",
        "titulo": "Triângulos e Polígonos Regulares",
        "descricao": "O professor Rafael adora computação gráfica. Ele gosta muito de renderizar objetos, especialmente bonecas. Mas ele não gosta de desenhar polígonos regulares usando triângulos. Fazer isso consiste em compor um polígono regular usando apenas triângulos, de forma que os triângulos não se interceptem e se utilize o menor número possível de triângulos na composição. Veja um quadrado e um pentágono com os triângulos na figura. O professor Rafael pediu para você calcular qual o número mínimo de triângulos necessários para compor um polígono regular de N lados."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1817",
        "saida": "Para cada par de sequências, doravante denominadas instância, você deverá imprimir um identificador \"Instância h\", em que h é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir o número de vezes que a sequência menor ocorre como subsequência da maior. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "São dados vários pares de sequências. Para cada par é dado o número 0 ≤ m ≤ 100 de caracteres na sequência menor ou igual e o número 0 ≤ n ≤ 1000 de caracteres na sequência maior. Nas linhas seguintes são dadas as duas sequências, uma por linha, primeiro a menor e depois a maior. Valores m = n = 0 indicam o final dos dados.",
        "titulo": "Arqueólogos de Tsing Ling",
        "descricao": "A região de Tsing Ling é internacionalmente famosa por grandes achados arqueológicos. Alguns desses achados, como as ruínas de Tsé Lung Zhao, desafiam os melhores cientistas do mundo. Encravados nessas ruínas foram encontrados vários pares de sequências de caracteres de significados desconhecidos, e tal fato tornou-se o maior enigma de Tsing Ling. Cada par tem uma sequência menor e uma maior. Acima do portal do mosteiro de Tsing Ling está escrito que aquele que descobrir o significado das sequências terá a resposta para todas as perguntas do universo. O arqueólogo alemão Harry Thanan Gruber acha que descobriu o enigma, mas para isso precisa da ajuda de vocês neste problema. Ele acha que a solução do enigma dos caracteres de Tsé Lung Zhao fornecerão os números para decifrar o livro de Tsin Wu, achado na mesma região pelo seu orientador, Dr. Cauchy-Schwartz, no fim do século XIX. Segundo a conjectura de Herr Gruber, a sequência de números que deve ser usada para decifrar o enigma é dada pelo número de vezes em que cada sequência menor ocorre na maior como subsequência."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1652",
        "saida": "Imprima N linhas na saída, onde a i-ésima linha é a forma plural da i-ésima palavra de entrada.",
        "entrada": "A primeira linha do arquivo de entrada consiste de dois inteiros L e N (0 ≤ L ≤ 20, 1 ≤ N ≤ 100). As seguintes L linhas contém a descrição das palavras irregulares e sua forma plural. Cada linha é composta de duas palavras separadas por um caractere de espaço, onde a primeira palavra é o singular, a segunda palavra é a forma plural de uma palavra irregular. Depois da lista de palavras irregulares, as N linhas seguintes contém uma palavra cada, que você tem que transformar para o plural. Você pode assumir que cada palavra é composta de no máximo 20 letras minúsculas do alfabeto Inglês ('a' a 'z').",
        "titulo": "Deli Deli",
        "descricao": "Sra. Deli está trabalhando em uma casa de mercearias finas \"Deli Deli\". No ano passado, a Sra. Deli decidiu expandir seu negócio e construir uma loja online. Ela contratou um programador que implementou a loja online. Recentemente alguns de seus novos clientes online reclamaram das notas fiscais eletrônicas. O programador esqueceu-se de usar o plural, no caso em que um item é comprado várias vezes. Infelizmente o programador da Sra. Deli está de férias e agora é sua tarefa de implementar esse recurso para a Sra. Deli. Aqui está uma descrição de como fazer o plural: Se a palavra está na lista de palavras irregulares substitua-a com o plural dado. Senão se a palavra termina em uma consoante seguida por \"y\", substitua \"y\" por \"ies\". Senão se a palavra termina em \"o\", \"s\", \"ch\", \"sh\" ou \"x\", acrescente \"es\" à palavra. Senão acrescente \"s\" à palavra."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1639",
        "saida": "Para cada caso de teste, imprimir uma linha contendo o número de diferentes valores ai gerados por este gerador de números aleatórios quando inicializado com um valor a0. Note que a0 também deve ser contabilizado.",
        "entrada": "A entrada contém vários casos de teste. Cada teste consite de uma linha contendo a0 (0 < a0 < 10000). Possivelmente, os números podem ter zeros à esquerda de forma a deixar cada número com exatamente 4 dígitos. A entrada é finalizada com uma linha contendo o valor 0. Obs.: Note que o terceiro caso de teste possui a maior quantidade de números diferentes gerados entre as entradas possíveis.",
        "titulo": "Gerando Números Aleatórios",
        "descricao": "John von Neumann propôs em 1946 um método de criação de sequências de números pseudo-aleatórios. Sua ideia é conhecida como o método do meio do quadrado e funciona da seguinte forma: Escolhe-se um valor inicial a0 que possui um comprimento de no máximo n em sua representação decimal. Multiplica-se o valor de a0 por ele mesmo, adiciona-se zeros a esquerda para obter uma representação decimal de comprimento 2 × n e toma-se os n dígitos centrais para formar ai. Repete-se o processo para cada ai com i > 0. Para este problema será utilizado n = 4. Exemplo 1: a0=5555, a02=30858025, a1=8580,... Examplo 2: a0=1111, a02=01234321, a1=2343,... Infelizmente, este gerador de números aleatórios não é muito bom. Dado um valor inicial, ele não produz todos os outros números com a mesma quantidade de dígitos. Sua tarefa é checar quantos números diferentes são produzidos para um valor inicial a0."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1743",
        "saida": "Apresente uma linha com um caractere que representa se os conectores são compatíveis ou não. Se eles são compatíveis escrever a letra maiúscula \"Y\"; caso contrário, escrever a letra maiúscula \"N\".",
        "entrada": "A primeira linha contém cinco números inteiros Xi (0 ≤ Xi≤ 1 para i = 1, 2,..., 5), que representa os pontos de conexão do primeiro conector do par. A segunda linha contém cinco números inteiros Yi (0 ≤ Yi ≤ 1 para i = 1, 2,..., 5), que representa os pontos de conexão do segundo conector. Na entrada, um 0 representa uma tomada e um 1 representa um plugue.",
        "titulo": "Máquina de Verificação Automatizada",
        "descricao": "A Internet Computer Parts Company (ICPC) é uma loja on-line que vende peças de computador. Pares de conectores elétricos em linha estão entre as peças mais populares que ICPC vende. No entanto, elas também são uma das peças que são devolvidos com mais freqüência por clientes insatisfeitos, porque devido a erros na embalagem os conectores enviados para os clientes podem não ser compatíveis.. Um conector em-linha é constituído por cinco pontos de ligação, marcadas de 1 a 5. Cada ponto de ligação de um conector pode ser ou um plugue ou uma tomada. Dizemos dois conectores são compatíveis se, para cada rótulo, um ponto de conexão é um plugue e outro ponto de ligação é uma tomada (em outras palavras, dois conectores são compatíveis se, para cada ponto de conexão com o mesmo rótulo, um plugue e uma tomada se encontram quando os dois conectores estão conectados). A figura abaixo mostra exemplos de dois conectores que são compatíveis e dois conectores que não são compatíveis. ICPC está introduzindo uma Máquina de Verificação Automártica (ACM) de última geração, com um verificador óptico, que vai verificar se os dois conectores embalados para um cliente são realmente compatíveis. O complexo e caro hardware do ACM está pronto, mas eles precisam de sua ajuda para terminar o software. Dadas as descrições de um par de conectores em linha, sua tarefa é determinar se os conectores são compatíveis."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2041",
        "saida": "A saída de cada caso de teste é apenas uma linha contendo o enésimo número da sequência.",
        "entrada": "A entrada é composta de vários casos de teste. Cada caso de teste é composto de uma linha contendo um número inteiro N, que representa o enésimo número da sequência que deve ser calculado, com 0<N< = 40.",
        "titulo": "Sequência de Gödelito",
        "descricao": "Gödelito é fascinado por questões lógicas e matemáticas e passa muito tempo brincando em tentar descobrir a semântica por traz das sequencias matemáticas. O mais divertido para Gödelito não é tanto encontrar o próximo número da sequência, mas entender os axiomas que determinam o formato das sequencias. Muitas sequencias são ditadas por regras matemáticas, por exemplo a sequência de Fibonacci cujo axioma é que cada número é a soma dos dois anteriores. Outras sequencias envolvem axiomas mais semânticos, por exemplo a sequência: 2, 10, 12, 16, 17, 18, 19, 200..., no qual axioma é: números cujo nome começa com a letra D. Gödelito se deparou atualmente com uma sequência bem interessante. Depois de algum tempo ele descobriu que o axioma da sequência é semântico (ele tentou muitas contas matemáticas primeiro, o que só o deixou mais feliz quando descobriu o significado da sequência). A sequência é a mostrada abaixo: 3 13 1113 3113 132113 1113122113 311311222113 ... Gödelito ficou impressionado com o quanto essa sequência cresce rapidamente. E como não quer gastar as folhas do seu caderno para calcular todos os números que quer, pediu a sua ajuda para criar um algoritmo para encontrar os outros números da sequência. Mas ele te explicou o significado da sequência primeiro para facilitar a sua vida: Cada número da sequência é gerado através da leitura do número anterior, por exemplo, o segundo número é 13 porque a linha de cima contém um (1) número três (3). O terceiro número é 1113, porque a linha de cima contém um (1) número um (1) e um (1) número três (3). O quarto número da sequência é 3113, pois a linha de cima contém três (3) números um (1) e um (1) número três (3). Acho que deu para entender a ideia, não é?"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2188",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir três linhas na saída. A primeira linha deve conter um identificador do conjunto de teste, no formato “Teste n”, onde n é numerado a partir de 1. A segunda linha deve conter as coordenadas do retângulo de interseção encontrado pelo seu programa, no mesmo formato utilizado na entrada. Caso a interseção seja vazia, a segunda linha deve conter a expressão “nenhum”. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "entrada": "Seu programa deve ler vários conjuntos de teste. A primeira linha de um conjunto de teste contém um inteiro não negativo, N (0 ≤ N ≤ 10000), que indica o número de regiões (o valor N = 0 indica o final da entrada). Seguem-se N linhas, cada uma contendo quatro números inteiros X, Y, U e V (-10000 ≤ X,Y,U,V ≤ 10000)que descrevem uma região: o par X, Y representa a coordenada do canto superior esquerdo e o par U, V representa a coordenada do canto inferior direito de um retângulo.",
        "titulo": "Macaco-prego",
        "descricao": "O macaco-prego é um animal irrequieto e barulhento, merecedor também dos adjetivos desordeiro e despudorado. A sua cabeça, encimada por uma densa pelagem negra ou marrom-escura, semelhante a um gorro, torna seu aspecto inconfundível. Apesar de ser o macaco mais comum nas matas do país, uma de suas sub-espécies encontra-se seriamente ameaçada de extinção: o macacoprego-do-peito-amarelo, que se distingue das demais pela coloração amarelada do peito e da parte anterior dos braços. Um grande esforço foi feito pelos primatologistas para aumentar a população dos macacos-pregodo-peito-amarelo. Sabe-se que eles se alimentam de plantas, das quais consomem preferencialmente frutos e brotos. Alimentam-se também de muitos animais, preferencialmente lesmas, lagartas e rãs, e preferem as florestas mais densas. Para determinar o melhor local do país para criar uma nova reserva ambiental para os macacos-prego-do-peito-amarelo, o governo fez um levantamento das regiões no país onde as condições preferidas desses animais ocorrem: regiões de floresta densa, regiões com frutos, regiões com muitos brotos, etc. Ajude a salvar os macacos-pregodo-peito-amarelo. As regiões propícias para o macaco-prego-do-peito-amarelo foram determinadas como retângulos cujos lados são todos verticais ou horizontais. Sua tarefa é encontrar o local ideal para a reserva ambiental, definida como a interseção de todas as regiões dadas. As regiões foram divididas de tal forma que uma região não tangencia qualquer outra região. Assim, a interseção entre quaisquer duas regiões ou é um retângulo ou é vazia."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1619",
        "saida": "Para cada caso de teste, imprima uma linha contendo apenas o valor absoluto do número de dias entre as duas datas.",
        "entrada": "A entrada começa com uma linha contendo um único inteiro N, que representa o número de casos de teste (0 < N ≤ 10000). Em seguida, há N linhas, cada uma descrevendo um caso de teste. Cada uma dessas linhas possui duas datas separadas por um espaço. As datas estão no formado AAAA-MM-DD, onde AAAA é o ano, MM é o mês, e DD é o dia. Você pode supor que todas as datas são válidas (i.e., nãoo existem datas como 2013-02-31 na entrada). Todas as datas estãoo entre 1970 e 2014 (inclusive). Mês e dia são sempre dados com dois dí­gitos; 3 de fevereiro de 2014 é representado como 2014-02-03.",
        "titulo": "Diferença entre Datas",
        "descricao": "Joana está trabalhando na nova versão do blog de sua empresa. Uma das coisas que ela quer mudar é a forma como as datas são mostradas no blog. Na versão atual, as datas são mostradas como ano-mês-dia (por exemplo, 2014-05-23). Ela deseja que, em vez disso, seja mostrado o número de dias que se passaram desde a publicação do post até hoje (por exemplo, se hoje é 9 de agosto de 2014, então a data 2014-05-23 seria mostrada como \"78 dias atrás\" e a data 2014-08-07 seria \"2 dias atrás\"). Joana está ocupada com alguns problemas mais complexos relacionados ao blog e pediu que você a ajudasse com essa parte. Dadas duas datas, calcule o número de dias que se passaram entre elas. Observações Tome cuidado com anos bissextos (que possuem o dia 29 de fevereiro, e, portanto, 366 dias no total). Um ano é bissexto se seu número é um múltiplo de 400 ou se é um múltiplo de 4, mas não de 100."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1935",
        "saida": "Seu programa deve produzir uma única linha com dois inteiros L e C representando as coordenadas do último grão de feijão.",
        "entrada": "A entrada contém apenas uma linha com dois inteiros, N e B, onde 1 ≤ N ≤ 230 e 1 ≤ B ≤ N2 .",
        "titulo": "Espiral",
        "descricao": "Dado um tabuleiro de dimensões N × N, gostaríamos de colocar feijões, um grão em cada quadrado, seguindo uma espiral como mostrado na figura. Começando do canto superior esquerdo, com coordenadas (1, 1), e depois indo para a direita enquanto possível, depois para baixo enquanto possível, depois para esquerda enquanto possível e depois para cima enquanto possível. Repetimos esse padrão, direita-baixo-esquerda-cima, até que B grãos de feijão sejam colocados no tabuleiro. O problema é: dados N e B, em que coordenadas será colocado o último grão de feijão? Na figura, para N = 8 e B = 53, o último grão foi colocado no quadrado de coordenadas (4, 6)."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1104",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um numero inteiro, indicando o número máximo de cartas que Alice e Beatriz podem trocar entre si.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros A e B, separados por um espaço em branco, indicando respectivamente o número de cartas que Alice e Beatriz possuem (1 ≤ A ≤ 104 e 1 ≤ B ≤ 104). A segunda linha contém A números inteiros Xi, separados entre si por um espaço em branco, cada número indicando uma carta do conjunto de Alice (1 ≤ Xi ≤ 105). A terceira linha contém B números inteiros Yi, separados entre si por um espaço em branco, cada número indicando uma carta do conjunto de Beatriz (1 ≤ Yi ≤ 105). As cartas de Alice e Beatriz são apresentadas em ordem não decrescente. O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.",
        "titulo": "Troca de Cartas",
        "descricao": "Alice e Beatriz colecionam cartas de Pokémon. As cartas são produzidas para um jogo que reproduz a batalha introduzida em um dos mais bem sucedidos jogos de videogame da história, mas Alice e Beatriz são muito pequenas para jogar, e estão interessadas apenas nas cartas propriamente ditas. Para facilitar, vamos considerar que cada carta possui um identificador único, que é um número inteiro. Cada uma das duas meninas possui um conjunto de cartas e, como a maioria das garotas de sua idade, gostam de trocar entre si as cartas que têm. Elas obviamente não têm interesse emtrocar cartas idênticas, que ambas possuem, e não querem receber cartas repetidas na troca.Além disso, as cartas serão trocadas em uma única operação de troca: Alice dá para Beatriz um sub-conjunto com N cartas distintas e recebe de volta um outro sub-conjunto com N cartas distintas. As meninas querem saber qual é o número máximo de cartas que podem ser trocadas. Por exemplo, se Alice tem o conjunto de cartas {1, 1, 2, 3, 5, 7, 8, 8, 9, 15} e Beatriz o conjunto {2, 2, 2, 3, 4, 6, 10, 11, 11}, elas podem trocar entre si no máximo quatro cartas. Escreva um programa que, dados os conjuntos de cartas que Alice e Beatriz possuem, determine o número máximo de cartas que podem ser trocadas."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1786",
        "saida": "Para cada sequência informada, você deverá exibir a sequência informada mais os dígitos verificadores, formatados na forma padrão do CPF, ou seja a1a2a3.a4a5a6.a7a8a9-b1b2",
        "entrada": "A entrada contém um número desconhecido de sequências na forma: a1a2a3a4a5a6a7a8a9 Cada sequência representa os 9 primeiros dígitos de algum CPF.",
        "titulo": "CPF 2",
        "descricao": "As Indústrias Udilandenses (INUDIL) precisam outra vez de sua ajuda! Depois de criar um programa que verifica se um CPF é válido ou não, agora querem que você crie um programa que exiba o CPF do cliente conhecendo apenas os 9 primeiros dígitos. O setor de Recursos Humanos gentilmente te informou como funciona um CPF: Dos 11 dígitos do CPF, os dois últimos são verificadores e dependem dos 9 dígitos anteriores. Vamos introduzir alguma notação. Considere um CPF com os seguintes dígitos a1 a2 a3 . a4 a5 a6 . a7 a8 a9 - b1 b2 Para descobrirmos o dígito b1, procedemos da seguinte maneira: MUltiplicamos o primeiro por 1, o segundo por 2, o terceiro por 3, o quarto por 4 e vamos assim até multiplicarmos o nono por 9. Então, somamos tudo isto. Após termos somado tudo, dividimos por 11. O dígito b1 será o resto da divisão (ou 0, caso o resto seja 10). Para o segundo dígito verificador, temos o seguinte: Multiplicamos o primeiro por 9, o segundo por 8, o terceiro por 7, o quarto por 6 e vamos assim até multiplicarmos o nono por 1. Então, somamos tudo isto e dividimos por 11. O dígito b2 será o resto da divisão (ou 0, caso o resto seja 10)."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1879",
        "saida": "Para cada instância, imprima uma linha contendo um único inteiro, correspondente ao número máximo de vazas que a dupla NS pode ganhar.",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância inicia com uma linha contendo uma string (dentre H,S, C, D, NT) indicando o trunfo da partida e um inteiro R (1 ≤ R ≤ 4) indicando o número de cartas que os jogadores têm. Cada uma das próximas 4 linhas contém uma lista de R cartas separadas por espaços. Uma carta é representada como uma cadeia XY, onde X está dentre A, K, Q, J, T (representando 10), 9, 8, 7, 6, 5, 4, 3, 2, e Y representa o naipe (dentre H, S, C, D). As 4 linhas contêm as cartas dos jogadores N, E, S e W, nessa ordem. Note que não existe carta repetida!",
        "titulo": "Bridge",
        "descricao": "Bridge é um grande jogo de cartas! O mundial juvenil de bridge foi realizado na Tailândia em 2006, mesmo país da final mundial da ICPC em 2016! Vamos falar sobre as regras do jogo. Ele é jogado com um baralho de 52 cartas, 13 de cada naipe (copas, espadas, paus e ouros). As cartas têm uma ordenação (A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2), onde ás é a maior carta e 2 a menor. Existe também um trunfo pré definido (H = copas, S = espadas, C = paus, D = ouros, NT = não há trunfo). Um naipe definido como trunfo vale mais que os outros. O jogo é jogado por 4 jogadores (N, E, S, W), como mostrado na figura, e consiste de várias rodadas, chamadas de vazas. Um jogador começa a rodada/vaza jogando uma carta. Em seguida, cada jogador, em sentido horário, joga uma carta até que todos os jogadores tenham jogado. Nesse momento, acaba a vaza. O jogador que começa a vaza pode jogar a carta que quiser; o naipe dessa carta é definido como o naipe da vaza. Todo jogador que não for o jogador que começou a vaza é obrigado a jogar uma carta com o mesmo naipe da vaza atual, a não ser que ele não tenha nenhuma tal carta. Nesse caso, pode jogar qualquer carta. O vencedor de uma vaza é definido da seguinte forma: se uma carta de trunfo tiver sido jogada na vaza, ganha o jogador que jogou a maior carta de trunfo. Caso contrário, ganha a maior carta do naipe da vaza. O jogador que ganhou a vaza começa a seguinte. O jogador N inicia a primeira vaza. Os jogadores N e S formam uma dupla, enquanto E e W formam outra. O objetivo do jogo é ganhar o maior número possível de vazas. Nesse problema, cada jogador tem R cartas e queremos saber quantas vazas a dupla NS consegue ganhar se todos jogarem de forma ótima."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1122",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha com N caracteres. O i-ésimo caractere deve ser ‘+’, se for possível afirmar com certeza que a i-ésima operação foi uma entrada, ‘-’, se for possível afirmar com certeza que a i-ésima operação foi uma saída, e ‘?’, se não for possível determinar com certeza qual o tipo da operação. Caso não exista uma sequência de entradas e saídas que totalize o fluxo de caixa indicado, imprima uma única linha contendo o caractere ‘*’.",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha da entrada contém dois inteiros N e F, indicando respectivamente o número de operações na página (2 ≤ N ≤ 40) e o fluxo de caixa para esta página (−16000 ≤ F ≤ 16000). Cada uma das N linhas seguintes contém um inteiro Ti indicando o valor da i-ésima transação (1 ≤ Ti ≤ 1000). O ultimo caso de teste é seguido por uma linha que contém apenas dois zeros separados por espaços em branco.",
        "titulo": "Livro-Caixa",
        "descricao": "A FCC (Fundação de Combate à Corrupção) desmontou um grande esquema de corrupção na Nlogônia. Durante a operação, foram apreendidos diversos cadernos e livros com anotações documentando as transações ilícitas realizadas pelo esquema. Vários desses livros contém páginas com os valores de várias transações em nilogos (a moeda local da Nlogônia, cujo símbolo é N$) e o fluxo de caixa resultante dessas transações. Por exemplo, se em uma página foi registrada uma entrada de N$ 7, uma entrada de N$ 2, uma saída de N$ 3, uma entrada de N$ 1 e outra saída de N$ 11, o fluxo de caixa nesta página é 7 + 2 − 3 + 1 − 11 = −4. No entanto, para dificultar o trabalho da polícia, os contraventores não anotaram em seus livros qual o tipo de cada transação. No exemplo acima, as anotaçõs na página seriam apenas 7, 2, 3, 1 e 11 (sem indicação se elas são entradas ou saídas). O fluxo de caixa de cada página sempre é anotado normalmente, com o sinal (no caso, -4). Para obter a condenação dos contraventores, os promotores precisam poder afirmar com certeza se cada operação foi uma entrada ou uma saída. No exemplo acima, a transação de N$ 7 certamente foi uma entrada, e a transação de N$ 11 certamente foi uma saída. Mas, não se pode afirmar nada sobre as transações de N$ 2, N$ 3, e N$ 1. As transações de N$ 2 e N$ 1 poderiam ter sido entradas e a transação de N$ 3 uma saída, ou N$ 2 e N$ 1 poderiam ter sido saídas e a transação de N$ 3 uma entrada. Muitos cadernos possuem números relativamente grandes, com muitas transações, então é difícil para a polícia reconstruir o histórico de operações. Por isso, eles precisam de um programa que o faça de forma eficiente."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1714",
        "saida": "Seu programa deve imprimir uma linha contendo um inteiro, o comprimento de um caminho consistente mínimo. Se não houver um caminho consistente, imprima -1.",
        "entrada": "A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100), o tamanho do parque. As N linhas seguintes contêm, cada uma, uma sequência de N letras, definindo o parque.",
        "titulo": "Letras",
        "descricao": "Os parques na Cidade da Lógica são reticulados de N × N quadrados (2 ≤ N ≤ 100), onde cada quadrado contém uma das 10 primeiras letras ASCII, abcdefghijABCDEFGHIJ, em caixa minúscula ou maiúscula. As pessoas na Cidade da Lógica têm orgulho de seguir apenas caminhos consistentes quando cruzam os parques. Por exemplo, se eles passam por um c minúsculo, eles não vão se permitir, mais adiante, passar por um C maiúsculo. Para definir isso mais precisamente, um caminho consistente é uma sequência de quadrados satisfazendo: quadrados consecutivos na sequência são adjacentes ortogonalmente; nenhuma letra ocorre na sequência tanto minúscula quanto maiúscula. Quer dizer, ou a letra não está na sequência, ou ela ocorre apenas em caixa minúscula, ou somente em caixa maiúscula. Você deve escrever um programa para ajudar as pessoas da Cidade da Lógica a computar o comprimento do menor caminho consistente entre o quadrado de coordenadas (1, 1), no canto superior esquerdo, e o quadrado de coordenadas (N, N ), no canto inferior direito. Por exemplo, para o parque acima, o menor caminho consistente tem comprimento 13."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1811",
        "saida": "Você devera imprimir um cabeçalho indicando o número da instância que está tratando (Instancia #i) e na linha seguinte o numero de ator/atriz que está com maior risco de sofrer um infarto. O risco para o infarto cresce com o número de observações consecutivas em que o numero de batimentos cresceu. Caso haja empate neste critério, devolva o ator que apresenta a maior diferença entre a primeira e a última medição do intervalo em que os batimentos foram aumentando. Se persistir o empate, o risco será maior para aquele com o maior batimento no fim do intervalo. Se ainda não houver decisão, retorne o de menor índice. Obs: deve ser impressa uma linha em branco após cada instância.",
        "entrada": "São dadas várias instâncias. A primeira linha de cada instância contem o número 0 ≤ n ≤ 1000 de atores/atrizes monitorados (que serão identificados pelos números 1, 2, ..., n) e o numero 0 ≤ m ≤ 100 de batimentos observados nestes atores. A seguir, em cada um das próximas n linhas são dadas as m medições (o batimento cardíaco é um inteiro entre 0 e 200). O caso em que n = 0 representa o final do arquivo e não deve ser processado.",
        "titulo": "O Óscar Vai Para...",
        "descricao": "Não há momento de maior angústia entre as estrelas do cinema que a cerimônia de entrega das estatuetas no Kodak Theatre. Não são raros os atores e atrizes que veem suas pulsações atingirem níveis alarmantes. Os riscos de um enfarto crescem muito quando os batimentos se tornam mais e mais rápidos em períodos consecutivos, caracterizando um período de grande ansiedade. Preocupada com este fato, a Academia de Artes e Ciências de Hollywood resolveu monitorar em intervalos regulares os batimento cardíacos dos vários candidatos a receber a estatueta. Com estes dados pretende-se fazer um programa que alerte os médicos de plantão caso um dos famosos esteja à beira de um ataque cardíaco. Sua tarefa neste problema é auxiliar a Academia nesta nobre missão."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1379",
        "saida": "Para cada caso de teste, imprima uma linha que contenha o mínimo inteiro possível C, de forma que a média e a mediana de A, B e C sejam iguais.",
        "entrada": "Cada caso de teste é dado em uma única linha que contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109). O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Problema com Mediana e Média",
        "descricao": "A média de três inteiros A, B e C é (A + B + C)/3. A mediana de três números inteiros seria então aquela que estaria no meio, se forem ordenados em ordem não decrescente. Dados dois números inteiros A e B, retornar o mínimo inteiro possível C, tal que a média e a mediana de A, B e C, sejam iguais."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1609",
        "saida": "Imprima o número de carneirinhos distintos para cada caso.",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100*) indicando o número de casos de teste. Na primeira linha de cada caso teremos o número inteiro N (1 ≤ N ≤ 100* ou 1 ≤ N ≤ 104​**), indicando o número de carneirinhos. Na próxima linha teremos N inteiros separados por espaço indicando a sequência de carneirinhos. Os identificadores dos carneiros irão de 0 até 109, inclusive. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste.",
        "titulo": "Contando Carneirinhos",
        "descricao": "Para dormir você resolveu contar carneirinhos. O sono está demorando muito para vir e você percebeu que alguns carneirinhos estão se repetindo! Cada um deles é identificado por um número inteiro único, desta forma você vai evitar contar os repetidos. Dado a sequência dos carneirinhos, imprima quantos de verdade você contou, ou seja, imprima o número de carneirinhos distintos."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1343",
        "saida": "Para cada instancia do problema da entrada, seu programa deve imprimir uma única linha, contendo a resposta para o problema. Se houver uma sequencia de movimentos para o cavalo que capture todos os peões (e sem que o cavalo seja capturado por um peão), o programa deve imprimir o comprimento da menor sequencia de movimentos possível. Caso contrário, seu programa deve imprimir a palavra 'impossivel'.",
        "entrada": "A entrada contém várias instâncias do problema, uma por linha. Cada exemplo começa com um inteiro P que representa o número de peões (0 ≤ P ≤ 8), seguido por P inteiros (1 ≤ A1, A2, ..., Ap ≤ 64) que descrevem a posição inicial de cada peão seguido de um inteiro H (1 ≤ H ≤ 64) que representa a posição inicial do cavalo. O fim da entrada é indicado quando P = 0.",
        "titulo": "Runner Pawns",
        "descricao": "O jogo \"Runner Pawns\" é uma variante do clássico Xadrez que é jogado por apenas uma pessoa. O tabuleiro usado nesse jogo é semelhante ao tabuleiro do Xadrez, dividido em 8x8 quadrados. Como no Xadrez, cada quadrado pode conter apenas uma peça por vez. As peças do jogo são uma série de peões (os \"Runner Pawns\"), e um único cavalo, que é a única peça que o jogador comanda. O objetivo é capturar todos os peões antes de chegarem a ultima linha e se tornarem reis. Possíveis movimentos do cavalo Os movimentos do cavalo são ditos em forma de 'L', uma vez que o cavalo sempre anda dois quadrados em uma direção e mais um quadrado perpendicular a essa direção. A figura acima ilustra os movimentos do cavalo, onde o caractere 'H' indica a posição atual do cavalo e o caractere '•' indica um possível movimento do cavalo. Nota-se que a representação usando quadrados pretos e brancos do tabuleiro de Xadrez não é distinguida.          01 02 03 04 05 06 07 08          09 10 11 12 13 14 15 16          17 18 19 20 21 22 23 24          25 26 27 28 29 30 31 32                   Da posição 22, o cavalo pode se mover para as posições 05,          33 34 35 36 37 38 39 40                   07, 12, 16, 28, 32, 37 ou 39. Da posição 57, o cavalo pode se          41 42 43 44 45 46 47 48                   mover para as posições 42 ou 51.          49 50 51 52 53 54 55 56          57 58 59 60 61 62 63 64 O tabuleiro com as células numeradas Os movimentos dos peões são um pouco diferentes do Xadrez, uma vez que o peão só pode se mover um quadrado para frente e todos os outros peões se movem ao mesmo tempo. Eles nunca se movem em diagonal. As casas do tabuleiro são numeradas de 1 a 64, como mostrado acima. Os peões se movem na direção vertical de cima para baixo, de modo que os quadrados numerados 57-64 são os objetivos dos peões. Cada rodada do jogo é composta por um movimento do cavalo seguido por um movimento simultâneo de todos os peões ainda não capturados. A fim de capturar um peão, o jogador deve mover o cavalo para o quadrado onde está o peão. O peão capturado deixa o tabuleiro e somente os peões restantes avançam para a próxima rodada. Para vencer o jogo, o jogador deve capturar todos os peões. Se um peão conseguir chegar a última linha, torna-se um rei. Com isso o cavalo tem apenas mais um movimento para captura-lo. Se isso não acontecer, o rei se move e isso significa que o jogo acaba e o jogador perde. Além disso, se o cavalo se mover para um quadrado que vai ser ocupado por um peão, no próximo movimento dos peões o cavalo é capturado pelo peão e o jogador perde. Sua tarefa é escrever um programa que analise um tabuleiro de \"Runner Pawns\" e responda se existe uma sequencia de movimentos para o cavalo vencer. Se for possível, o programa deve determinar o número mínimo de movimentos necessários para o cavalo capturar todos os peões."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1575",
        "saida": "Para cada caso de teste, a saída deve seguir a descrição abaixo. A saída de dois casos de teste consecutivos deverá ser separada por uma linha em branco. A saída consiste de uma linha dizendo \"Yes\", caso a rota que Giovanni está dizendo aos aldeões é uma rota segura, e \"No\" caso contrário. Lembre-se que a rota não é segura somente se os aldeões puderem encontrar Leporello no mesmo lugar ao mesmo tempo; a rota é segura mesmo se os aldeões encontrarem Leporello no destino (porque a missão dele foi realizada).",
        "entrada": "A entrada inicia com um simples inteiro positivo em apenas uma linha, indicando o número de casos de teste que seguem, cada um deles como descrito abaixo. Esta linha é seguida por uma linha em branco, e também haverá uma linha em branco entre duas entradas consecutivas. É dado a você a atual posição de Don Giovanni (que também é a posição de Masetto e dos aldeões), e a posição atual de Leporello, em duas linhas separadas. Cada linha tem dois números: o número da rua e o número da avenida. Você pode assumir que as ruas são grids quadrados regulares, com linhas sendo ruas numeradas a partir de um, iniciando no norte, e as colunas sendo avenidas numeradas a partir de um, iniciando no oeste. Portanto, a distância entre ruas e avenidas adjacentes é sempre a mesma. O resto da entrada possui dois conjuntos de rotas, com o primeiro conjunto sendo de Leporello e o segundo conjunto sendo a rota que Giovanni irá contar para os outros. Cada conjunto inicia com um número indicando a quantidade de paradas na rota, seguido pela lista de paradas. Cada parada é especificada como uma localização, onde Leporello pode mudar a direção. Entre paradas há sempre uma linha reta na direção paralela tanto para ruas quanto para avenidas, que Leporello e os aldeões irão viajar. Leporello viaja na mesma velocidade que os aldeões. Você pode assumir que o número máximo da rua/avenida é 1000000, e não haverá mais do que 100 paradas.",
        "titulo": "Perseguindo Don Giovanni",
        "descricao": "No Ato II, Masetto está liderando um grupo de aldeões para perseguir Don Giovanni. Giovanni, que acaba de trocar suas roupas com Leporello e está disfarçado como ele, é questionado por Masetto sobre aonde \"seu mestre\" foi. Para evitar problemas, \"Leporello\" (disfarçado por Giovanni) quer enganar os aldeões para que eles não consigam encontrar \"Don Giovanni\" (disfarçado por Leporello). Giovanni sabe a rota que Leporello está tomando, e ele tem uma rota segura (uma rota que os aldeões não encontrariam Leporello) em mente. Ele quer ter certeza de que a rota que ele tomou é de fato segura."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2078",
        "saida": "Para cada instância imprima uma linha contendo N inteiros que indicam quantos fornos estão à distância no máximo D dos fornos 1, 2, ..., N.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância possui dois inteiros N e D (1 ≤ N, D ≤ 100000) representando o número de fornos e uma distância, respectivamente. Cada uma das próximas N linhas possui dois inteiros x e y (0 ≤ x, y ≤ 100000) que indicam a posição de um forno.",
        "titulo": "Paz Verde! Hipocrisia Mundial!",
        "descricao": "Albert Arnold Gore Jr é o nome completo do ex-vice-presidente dos Estados Unidos, Al Gore, ganhador do prêmio Nobel da Paz de 2007 pelo seu trabalho incessante de conscientizar a população mundial para as mudanças climáticas causadas pelo homem. O documentário “An Inconvenient Truth” vencedor do Oscar, mostra os efeitos causados pelo aquecimento global na paisagem do planeta e prevê um futuro catastrófico para a humanidade se a tendência de usurpar os recursos do planeta não for mudada. Al Gore cresceu em Washington DC uma vez que seu pai foi deputado e depois senador pelo Tenessee. Graduou-se em Harvard em 1969 e foi um ativista contra a guerra do Vietnam e chegou a apoiar o líder Martin Luther King na sua luta contra a segregação racial. Sua atuação como vice-presidente dos Estados Unidos na administração de Bill Clinton também foi excepcional. Apesar de ter tido mais votos que o concorrente do partido republicano, perdeu as eleições presidenciais e afastou-se da disputa da presidência. Um dos seus trabalhos mais importantes diz respeito ao posicionamento ótimo de fornos em produção de tijolos. O processo de fabricação de tijolos é bastante poluente, e exige a queima em alta temperatura do barro a fim de que o tijolo atinja a consistência desejada. A queima consome grandes quantidades de madeira, produzida em fazendas para este fim. Estudos da Universidade de Harvard mostram que há uma distância máxima para o posicionamento nesses fornos: se estiverem muito distantes, a dispersão do calor não permite que a queima seja feita por igual, trazendo prejuízos à produção de tijolos e também ao meio ambiente. Uma vez que os fornos são posicionados no meio da floresta (que é cortada para a queima), as distâncias são medidas usando a métrica de Manhattan, ou seja, a distância entre dois pontos é dada pela soma dos valores absolutos das diferenças das coordenadas. Sua tarefa é, dada a localização de vários fornos numa fazenda, e uma distância D, determinar, para cada um dos fornos, quantos fornos estão à distância no máximo D. Com estes dados será possível determinar quais fornos precisam ser acesos simultaneamente sem prejuízos econômico ou ambiental."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1583",
        "saida": "Para cada mapa, imprima uma estimação da contaminação futura. Esta estimação deverá corresponder ao mapa original (como visto na entrada), porém trocando as células com água que foram contaminadas pelo caractere T. Deixe uma linha em branco após cada mapa (incluindo o último mapa).",
        "entrada": "A entrada é composta por vários mapas, sendo que a descrição de cada mapa começa com uma linha contendo dois inteiros N e M, correspondente ao número de linhas e de colunas do mapa. As N linhas a seguir descrevem o mapa, cada linha contendo M caracteres, além do pulo de linha. Os caracteres possíveis são: A, que representa uma célula contendo água, X, que representa uma célula com rocha e T que representa uma célula com agente contaminante. A entrada termina quando N = M = 0, caso que não deve ser processado. Em todos os mapas, N e M são menores ou iguais a 50.",
        "titulo": "Contaminação",
        "descricao": "Estamos no ano 2241, e a colonização de outros planetas já é uma realidade. Você trabalha no centro de controle de recursos, no planeta URI-942, controlando principalmente os estoques de água. A água é armazenada em tanques subterrâneos, protegida das altas temperaturas da superfície. Porém, seus colegas Márcio e Ana descobriram falhas nas paredes de alguns tanques, o que pode levar a contaminação do estoque de água. Seus colegas conseguiram identificar os pontos com falhas onde pode haver a infiltração de contaminantes. Sabendo que os agentes contaminantes se espalham por todo o tanque de água afetado, sua tarefa é estimar a contaminação da água de acordo com os mapas fornecidos por seus colegas. Os mapas foram discretizados em células, sendo que as células podem corresponder a uma região com rocha, água (tanque) ou agente contaminante. Devido as rachaduras, uma célula com agente contaminante contamina as células adjacentes (esquerda, direita, acima e abaixo) contendo água, porém a contaminação é barrada por células de rocha."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1536",
        "saida": "Para cada caso de teste, imprima uma linha contendo \"Time 1\" (sem aspas) caso o Time 1 seja o vencedor do mata-mata, \"Time 2\" (sem aspas) caso o Time 2 seja o vencedor do mata-mata e \"Penaltis\" (sem aspas) caso não seja possível identificar o vencedor no tempo convencional.",
        "entrada": "A primeira linha de entrada indica o número de casos de teste N (1 ≤ N ≤ 100). Cada caso de teste é composto por dois placares: o resultado da partida 1 e o resultado da partida 2. O placar é representado pelo formato M x V, onde M (1 ≤ M ≤ 100) é o número de gols do time mandante da partida e V (1 ≤ V ≤ 100) é o número de gols do time visitante. Como em cada caso de teste existem 2 partidas, considere que o Time 1 é sempre o mandante da primeira e o visitante da segunda e vice-versa para o Time 2.",
        "titulo": "Libertadores",
        "descricao": "A Copa Libertadores da América é a principal competição de futebol entre clubes profissionais da América do Sul, organizada pela Confederação Sul-Americana de Futebol (CONMEBOL). Ela é conhecida por ter um regulamento muito complicado, principalmente nas fases das oitavas, quartas e semi-final. Nessas fases são jogadas partidas de ida e volta no sistema mata-mata. Ganha quem fizer a maior pontuação no acumulado das duas partidas, sendo 3 pontos para vitória e 1 ponto em caso de empate, ambos por partida. Em caso de igualdade na pontuação, são critérios de desempate: 1) saldo de gols (número de gols a favor menos o número de gols contra). 2) mais gols marcados na casa do adversário. 3) disputa por pênaltis. Todos os critérios devem ser aplicados considerando o acumulado das duas partidas. Será que você consegue elaborar um algoritmo que, dados os resultados das partidas de ida e de volta, ele identifica o time vencedor?"
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1351",
        "saida": "Para cada sessão de compra da entrada, seu programa deve produzir uma linha de saída,  contendo o menor custo que Sr. Jones pode conseguir. Se não é possível comprar todos os itens da sessão, imprima “Impossible”. O custo deve ser impresso como um número real com precisão de duas casas decimais, e o último dígito decimal deve ser arredondado. A entrada não vai conter casos de teste onde diferenças de arredondamento são significantes.",
        "entrada": "Seu programa deverá processar dados para diversos casos de teste (sessões de compra). A primeira linha na descrição de uma sessão de compra contém dois inteiros M e N; M indica o número de itens na lista da Sra. Jones (1 ≤ M ≤ 100) e N representa o número total de produtos disponíveis no supermercado (1 ≤ N ≤ 100,000). A próxima linha contém M inteiros Xi, representando a lista de produtos da lista da Sra. Jones (1 < Xi ≤ 100000, 1 ≤ i ≤ M). Seguem N linhas, representando os produtos do supermercado na ordem em que eles aparecem no caminho do Sr. Jones. Cada uma destas linhas contém um inteiro K e um número real P, que representam, respectivamente, um identificador de produto e seu preço (1 ≤ K ≤ 100,000). O fim da entrada é indicado por M = N = 0.",
        "titulo": "Supermercado",
        "descricao": "Sr. Jones é um marido exemplar. Todo sábado de manhã a Sra. Jones lhe dá uma lista de itens a serem comprados no supermercado e ele compra exatamente o que lhe foi pedido, sempre escolhendo as marcas com os menores preços. Mas Sr. Jones odeia ir ao mercado nos sábados, visto que seus corredores estão lotados de carregadores. Ele deseja mudar o jeito com que ele faz compras. Ao invés de ir para lá e para cá para comprar os produtos na lista de sua esposa, ele vai tentar comprar os itens passando apenas uma vez por cada corredor, pegando os produtos na ordem exata dada na lista. Então ele pediu a você para escrever um programa que o ajude com seu novo estilo de fazer compras. Dada as informações sobre os produtos disponíveis no supermercado junto com seus preços na ordem em que aparecem na lista de Sr. Jones e a lista de produtos dada pela sua mulher, seu programa deve determinar o menor preço que ele pagaria. Sr. Jones compra os produtos na ordem em que eles aparecem em sua lista e ele nunca volta atrás enquanto anda pelos corredores. Portanto, se ele compra o i-ésimo produto no seu caminho para o j-ésimo item da lista, o próximo produto a ser comprado é o (j+1)-ésimo item da lista – e deve ser comprado dos produtos que vem depois de i em seu caminho. A figura abaixo mostra um exemplo onde produtos são identificados por inteiros. Note que diferentes marcas do mesmo produto poder aparecer separadamente. No exemplo Sr. Jones deve comprar os produtos 1, 1, 2, 20 (note que o produto 1 aparece duas vezes na lista). Para o exemplo, o custo mínimo que Sr. Jones pode conseguir, seguindo suas limitações, é 21.30. Note também que com esse novo estilo de fazer comprar pode ser impossível para Sr. Jones comprar todos os itens da sua lista; neste caso, seu programa deve alertar Sr. Jones. (a) Lista da Sra. Jones   (b) Lista de produtos com seus respectivos preços e ordem em que aparecem na direção de Sr. Jones pelos corredores."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1787",
        "saida": "Para cada caso de teste imprima uma única linha contendo o nome do jogador que tenha a maior quantidade de pontos. Caso haja empate no primeiro lugar, imprima o nome do jogo \"URI\" (sem aspas).",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um único inteiro N indicando o número de rodadas (1 ≤ 10⁵), cada uma das N linhas seguintes contem 3 números inteiros Ui, Ri, Ii (1 < Ui, Ri, Ii ≤ 10⁹), representando respectivamente o número de Uilton, Rita e Ingred na i-ésima rodada. O final da entrada é indicado quando N = 0.",
        "titulo": "URI",
        "descricao": "Uilton, Rita e Ingred criaram um novo jogo para decidir quem não pagará sua parte da pizza do próximo final de semana e deram o nome de \"URI\" para o jogo (talvez eles decidiram unir as iniciais de seus nomes para formar o nome do jogo). O URI consiste de N rodadas, a cada rodada, cada um dos três jogadores falam um número, não é permitido números iguais em uma rodada. Se o número que o jogador falar for uma potência de 2, o mesmo ganha 1 ponto, e se além de ser uma potência de 2, for o maior número da rodada, o jogador ganha mais 1 ponto, se o número não for potência de 2 o jogador não ganha nenhum ponto. Sua tarefa é criar um programa que os ajude a contabilizar a pontuação e informar o vencedor, dado a quantidade de rodadas, e os números de cada rodada. Considere que as 4 primeiras potências de 2 são: 2, 4, 8, 16."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1363",
        "saida": "Para cada caso de teste, a saída será uma única linha com um “Y” maiúsculo se de acordo com Martin, Isa for a vencedora, ou um “N” se Martin for o vencedor. A saída deve ser impressa na saída padrão.",
        "entrada": "A entrada contém vários casos de teste. Cada caso contém uma única linha que contém duas Strings SM, e SI, e um inteiro C, separados por um único espaço. SM é a String de 7 caracteres enviada pelo Martin, SI é a String de 7 caracteres respondida pela Isa, que é gerada pelo seu gerador de números randômicos. C é o número de confiança do Martin (1 ≤ C ≤ 109). O fim da entrada é indicado por SM = SI = \"*\" e C = 0. A entrada deve ser lida da entrada padrão.",
        "titulo": "Competição de Placas de Carros",
        "descricao": "Martin e Isa são muito competitivos. A nova competição que eles criaram é sobre observar placas de carros. Cada vez que um deles vê uma placa de carro na rua, ele ou ela manda uma mensagem SMS para o outro com o conteúdo da placa; Quem ver a placa mais nova é o líder da competição. Como o Departamento De Transito (DDT) registra seqüencialmente as placas em ordem crescente, eles conseguem comparar as placas e descobrir quem é o vencedor. Martin tem uma percepção muito boa, e ele esteve na liderança por várias semanas. Talvez ele fique olhando para a rua ao invés de trabalhar, ou talvez ele fique o dia todo em frente á uma revendedora de carros, esperando os carros novos saírem com as placas novas. Isa, cansada de ficar sempre atrás, escreveu um programa que gera uma placa aleatória, então a próxima vez que Martin mandar mensagem para ela, ela irá responder com essa placa que foi gerada. Dessa forma ela espera deixar Martin um bom tempo tentando ganhar dela. No entanto, Martin ficou desconfiado, e ele quer determinar se Isa está mesmo vendo o carro com a placa que ela mandou. Dessa forma ele irá saber se Isa está na liderança da competição. Ele sabe alguns fatos sobre como as placas são registradas pelo DDT. Cada placa é uma combinação de 7 caracteres, onde pode ser letras maiúsculas (A–Z), ou números (0–9). Existem dois tipos de placas: a antiga, usada por muitos anos, e a nova, que está em uso há alguns meses, quando as combinações da antiga acabaram. Nas placas antigas, os primeiros três caracteres eram letras, e os últimos quatro eram números, então as placas iam de AAA0000 até ZZZ9999. Nas placas novas, os primeiros cinco caracteres são letras, e os dois últimos são números. Infelizmente o chefe do DDT estragou o sistema da impressora enquanto estava tentando criar o pôster da sua próxima campanha para presidente, e a impressora não imprimi mais as letras A, C, M, I, e P. Então agora a primeira placa é BBBBB00 ao invés de AAAAA00. As placas são registradas em ordem seqüencial. Em um caso particular, a última placa do esquema antigo é seguido pela primeira placa do esquema novo. Como Isa não está ciente disso, ela apenas se certificou que a placa gerada pelo seu programa, é consistente com os sete caracteres, onde os três primeiros são letras maiúsculas, e os dois últimos caracteres são números, e que cada um do quarto ou quinto caractere pode ser uma letra maiúscula ou um número (possivelmente pode gerando uma combinação ilegal, mas ela não está preocupada com isso). É claro que Martin não irá considerar Isa a vencedora se ele receber uma combinação ilegal, ou se ele receber uma placa válida, mas que é igual ou mais velha que a dele. Mas isso não é tudo. Desde que Martin sabe que uma placa nova não é gerada tão rápida, ele não irá acreditar que Isa viu um carro com uma placa mais nova que a que ele mandou, mas muito maior sequencialmente. Por exemplo, se Martin mandar DDDDD45, e receber ZZZZZ45, ele não irá acreditar que Isa viu um carro com essa placa, porque ele sabe que o DDT ao consegue imprimir tantas placas para chegar no ZZZZZ45 no tempo de ele receber a resposta. Então Martin decidiu considerar Isa vencedora apenas se ele receber uma placa válida, nova que a dele, e mais velha ou igual a C placa consecutiva após a que ele enviou. Ele chama C seu número de confiança. Por exemplo, se Martin mandar ABC1234, e seu número de confiança for 6, ele irá declarar Isa vencedora apenas se ele receber alguma placa mais nova que ABC1234, mas mais velha ou igual a ABC1240."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "2102",
        "saida": "Para cada instância imprima as entradas não nulas da matriz soma. Para cada entrada não nula da matriz, imprima a linha, coluna e valor correspondente, separados por espaço. A saída não precisa estar ordenada. Entre duas instâncias imprima uma linha em branco.",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros, N e L representando respectivamente a dimensão das matrizes e o número total de entradas não nulas. As L linhas seguintes contêm quatro inteiros Pk, lk, ck e vk indicando que a matriz Pk tem valor vk na posição de linha lk e coluna ck.",
        "titulo": "Contando em Chinês",
        "descricao": "A China é um dos maiores países do mundo e o mais populoso. Realizar um censo no país é quase uma operação de guerra. O governo envia para cada um dos pequenos distritos imensas matrizes, que devem ser preenchidas com as características de todos os cidadãos. Cada uma dessas matrizes tem o mesmo tamanho: nas linhas estão as várias etnias (são milhares) e nas colunas as características que se deseja medir (pode chegar a milhões). Sabemos que poucos elementos de cada uma dessas matrizes são de fato preenchidos com valores diferentes de zero. O trabalho da empresa governamental que faz o censo é, então, receber as P matrizes M × N (1 ≤ N ≤ 100), cada uma dada através de seus elementos não nulos e calcular a matriz soma das várias matrizes."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1337",
        "saida": "Para cada caso de teste imprima uma única linha. Se existe um set ou um par que derrota a mão dada, escreva a menor mão que o faz. A mão vencedora deve ser escrita especificando as categorias de suas cartas, em ordem não-descrescente. Se nenhum set ou par derrota a mão dada, escreva o caractere '*' (asterisco).",
        "entrada": "Cada caso de teste é descrito usando uma única linha. A linha contém três inteiros A, B e C representando as categorias das cartas entregues na mão (1 ≤ A, B, C ≤ 13). O último caso de teste é seguido por uma linha contendo três zeros.",
        "titulo": "Poker do Rei",
        "descricao": "Poker é um dos jogos de cartas mais jogados, e o Poker do Rei é uma das suas variações. O jogo é jogado com um baralho normal de 52 cartas. Cada carta tem um dos quatro naipes e uma das 13 categorias. Entretanto, no Poker do Rei os naipes das cartas não são relevantes, enquanto as categorias são Ás (categoria 1), 2, 3, 4, 5, 6, 7, 8, 9, 10, Valete (categoria 11), Rainha (categoria 12) e Rei (categoria 13). O nome do jogo vem do fato de que no Poker do Rei, o Rei é a carta com a categoria mais alta. Mas esta não é a única diferença entre o Poker regular e o Poker do Rei. Aos jogadores do Poker do Rei são distribuídos uma mão de apenas três cartas. Existem três tipos de mãos: Um set, feito de três cartas da mesma categoria. Um par, que contém duas cartas da mesma categoria, com a outra carta sem correspondente. Um não-par, onde não tem-se duas cartas da mesma categoria. As mão são classificadas usando as seguintes regras: Qualquer set derrota qualquer par e não-par. Qualquer par derrota qualquer não-par. Um set formado com cartas de categoria maior derrota qualquer set formado com cartas de categoria menor. Se as cartas emparelhadas de dois pares têm categorias diferentes, então o par com as cartas emparelhadas de maior categoria derrota o par com as cartas emparelhadas de menor categoria. Se as cartas emparelhadas de dois pares têm a mesma categoria, então a cartas não emparelhadas de ambos os pares são comparadas; o par com carta não emparelhada de maior categoria derrota o par com carta não emparelhada de menor categoria, a menos que ambas as cartas não emparelhadas sejam da mesma categoria, caso no qual temos um empate. Uma nova empresa de software quer oferecer jogos de Poker do Rei no seu site de jogos, e precisa de um software que, dada uma mão de Poker do Rei, determine o set ou o par com menor categoria que derrota a mão dada. Você pode codificá-lo?"
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1518",
        "saida": "Para cada caso de teste imprima um inteiro, representando a quantidade mínima de tempo necessária para capturar todas as tartarugas, na ordem desejada por Rafael.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste é iniciado com dois inteiros x e y (1 ≤ x, y ≤ 1000), indicando que Rafael está na posição [x, y] do plano. A seguir haverá três linhas, cada uma contendo dois inteiros xi e yi (1 ≤ xi, yi ≤ 1000), indicando que a i-ésima tartaruga está na posição [xi, yi], e um caractere ci, indicando a direção que a i-ésima tartaruga está correndo: 'D' – Direita, ou 'C' – Cima. O plano em que Rafael e as tarturugas estão se estende da posição [1, 1] (canto inferior esquerdo) até a posição [10⁵, 10⁵] (canto superior direito), portanto há bastante espaço para a perseguição. Duas tartarugas nunca estarão no mesmo lugar ao mesmo tempo. O último caso de teste é indicado por x = y = 0, o qual não deverá ser processado.",
        "titulo": "Tartarugas",
        "descricao": "Rafael, em seu primeiro dia de trabalho no zoológico da cidade, foi incubido da tarefa aplicada a todos os novatos: cuidar das tartarugas. Rafael achou aquilo tão fácil que resolveu tirar um cochilo em seu turno, porém quando acordou se viu em uma situação complicada, uma vez que as tartarugas estavam fugindo. Como está em seu primeiro dia de trabalho, Rafael não quer decepcionar o chefe do zoológico, portanto está decidido a parar todas as tartarugas na menor quantidade de tempo possível. O terreno em que eles estão pode ser visto como um plano, e Rafael está na posição [x, y]. A cada segundo, Rafael consegue se mover no máximo duas posições no sentido horizontal ou vertical, ou no máximo uma posição no sentido diagonal. Rafael tem que parar três tartarugas, as quais estão nas posições [x1, y1], [x2, y2] e [x3, y3], respectivamente. As tartarugas, por sua vez, podem se mover apenas uma posição por segundo, e em apenas uma direção predeterminada: Cima ([xi, yi+1]) ou Direita ([xi+1, yi]). Elas estão sempre se movendo. Para parar uma tartaruga Rafael precisa estar na mesma posição que tal tartaruga. Rafael pode escolher parar as tartarugas na ordem que ele desejar. Descubra a menor quantidade de tempo necessário para que ele pare as três tartarugas."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1129",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir N linhas, cada linha correspondendo a uma questão. Se a resposta à questão foi corretamente preenchida na folha de resposta, a linha deve conter a alternativa marcada (‘A’, ‘B’, ‘C’, ‘D’ ou ‘E’). Caso contrário, a linha deve conter o caractere ‘*’ (asterisco).",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um número inteiro N indicando o número de questões da folha de respostas (1 ≤ N ≤ 255). Cada uma das N linhas seguintes descreve a resposta a uma questão e contém cinco números inteiros A, B, C, D e E, indicando os valores de nível de cinza médio para cada uma das alternativas da resposta (0 ≤ A, B, C, D, E ≤ 255). O ultimo caso de teste é seguido por uma linha que contém apenas um número zero.",
        "titulo": "Leitura Ótica",
        "descricao": "O professor João decidiu aplicar somente provas de múltipla escolha, para facilitar a correção. Em cada prova, cada questão terá cinco alternativas (A, B, C, D e E), e o professor vai distribuir uma folha de resposta para cada aluno. Ao final da prova, as folhas de resposta serão escaneadas e processadas digitalmente para se obter a nota de cada aluno. Inicialmente, ele pediu ajuda a um sobrinho, que sabe programar muito bem, para escrever um programa para extrair as alternativas marcadas pelos alunos nas folhas de resposta. O sobrinho escreveu uma boa parte do software, mas não pode terminá-lo, pois precisava treinar para a Maratona de Programação. Durante o processamento, a prova é escaneada usando tons de cinza entre 0 (preto total) e 255 (branco total). Após detectar os cinco retângulos correspondentes a cada uma das alternativas, ele calcula a média dos tons de cinza de cada pixel, retornando um valor inteiro correspondente àquela alternativa. Se o quadrado foi preenchido corretamente o valor da média é zero (preto total). Se o quadrado foi deixado em branco o valor da média é 255 (branco total). Assim, idealmente, se os valores de cada quadrado de uma questão são (255, 0, 255, 255, 255), sabemos que o aluno marcou a alternativa B para essa questão. No entanto, como as folhas são processadas individualmente, o valor médio de nível de cinza para o quadrado totalmente preenchido não é necessariamente 0 (pode ser maior); da mesma forma, o valor para o quadrado não preenchido não é necessariamente 255 (pode ser menor). O prof. João determinou que os quadrados seriam divididos em duas classes: aqueles com média menor ou igual a 127 serão considerados pretos e aqueles com média maior a 127 serão considerados brancos. Obviamente, nem todas as questões das folhas de resposta são marcadas de maneira correta. Pode acontecer de um aluno se enganar e marcar mais de uma alternativa na mesma questão, ou não marcar nenhuma alternativa. Nesses casos, a resposta deve ser desconsiderada. O professor João necessita agora de um voluntário para escrever um programa que, dados os valores dos cinco retângulos correspondentes às alternativas de uma questão determine qual a alternativa corretamente marcada, ou se a resposta à questão deve ser desconsiderada."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1138",
        "saida": "Para cada caso de teste, imprima uma única linha com 10 inteiros representando o número de vezes que cada dígito é usado ao escrever todos os inteiros entre A e B, inclusive, na base decimal e sem zeros à esquerda. Escreva a contagem de cada dígito em ordem crescente do 0 até o 9.",
        "entrada": "Cada caso de teste é dado em uma única linha que contém dois inteiros A e B (1 ≤ A ≤ B ≤ 108). O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Contagem de Dígitos",
        "descricao": "Diana escreverá uma lista com todos os inteiros positivos entre A e B, inclusive, na base decimal e sem zeros à esquerda. Ela quer saber quantas vezes cada um dos dígitos irá ser usado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1192",
        "saida": "Para cada caso de teste, deve ser impressa uma linha com um valor inteiro que representa a solução da sequência proposta por Paula.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro N, indicando o número de casos de teste que virão a seguir. Cada caso de teste é uma sequência de três caracteres criada por Paula. Esta sequência contém na primeira posição um caractere de '0' a '9', na segunda posição uma letra maiúscula ou minúscula do alfabeto e na terceira posição outro caractere de '0' a '9'.",
        "titulo": "O jogo Matemático de Paula",
        "descricao": "Paula simplesmente adora matemática. Seu maior passatempo é ficar inventando jogos ou atividades que a envolvam para brincar com seus amiguinhos. Obviamente, nem todos eles não são tão apaixonados assim por matemática e têm muita dificuldade para resolver as brincadeiras propostas por ela. Agora Paula inventou um pequeno passatempo que envolve 3 caracteres: um dígito numérico, uma letra e outro dígito numérico. Se a letra for maiúscula, deve-se subtrair o primeiro dígito do segundo. Se a letra for minúscula, deve-se somar ambos os dígitos e se os DÍGITOS forem iguais, deve-se desconsiderar a letra e mostrar o produto entre os dois dígitos. Ela pediu para seu amigo Marcelo, que é bom em programação, para criar um programa para que encontre a solução para cada uma das sequências que Paula lhe apresentar."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1470",
        "saida": "A saída de cada caso de teste conterá uma única linha contendo a letra “S” caso exista uma sequência de dobraduras que transforme a fita de entrada na fita de saída e “N” em caso contrário.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por 4 linhas. As primeiras duas linhas referem-se à entrada fornecida à Máquina Dobradora e as duas seguintes referem-se à saída fornecida pela Máquina. A primeira linha da entrada contém um único inteiro N (M ≤ N ≤ 15), descrevendo o tamanho da fita de entrada. A linha seguinte conterá N inteiros v1, . . . , vN, correspondentes ao conteúdo da fita de entrada. A terceira linha contém um inteiro M (1 ≤ M ≤ N), o tamanho da fita de saída e a última linha conterá inteiros w1, . . . ,wM, correspondentes ao conteúdo da fita de saída. O final da entrada é indicado por EOF (fim de arquivo). Nota: 0 ≤ vi, wj ≤ 108 para 1 ≤ i ≤ N e 1 ≤ j ≤ M.",
        "titulo": "Máquina Dobradora",
        "descricao": "Uma das principais ferramentas de uma Máquina de Turing, que possibilita que seu poder de computação seja maior do que de outros modelos mais simples, é uma fita infinita, dividida em células, onde informações de um alfabeto ficam armazenadas. Uma Máquina Dobradora é uma máquina inspirada na Máquina de Turing, onde a fita é finita, os dados armazenados são números inteiros e, ao invés do mecanismo de funcionamento tradicional de Turing, a máquina utiliza operações de dobras da fita para fazer computações. Para efetuar uma dobra, a máquina escolhe uma posição entre células adjacentes e, ao realizar a dobra, ela soma os valores das células que se sobrepuseram, como pode ser visto na figura abaixo. Observe também que a dobra pode ser feita em uma posição anterior ao centro da fita, como ilustrado a seguir. Note também que, com isso, podem ser feitas dobras também no início e no final da fita, invertendo a ordem desta. A empresa Science of Bends Company vem desenvolvendo versões comerciais da Máquina Dobradora e a produção tem aumentado recentemente. Infelizmente o último lote de Máquinas Dobradoras produzidas está com problemas e algumas máquinas não estão funcionando corretamente. Assim, testes são necessários para evitar a venda de produtos com defeito, o que poderia denegrir a imagem da empresa. Para testar as máquinas, um conjunto de testes é dado e, para cada fita, a máquina devolve o resultado da computação. Assim os engenheiros responsáveis pelos testes tomam nota do resultado e podem verificar se este está correto. Mas os engenheiros esqueceram-se de tomar nota de qual computa ção foi feita em cada conjunto de teste. Para evitar a necessidade de testar todas as máquinas novamente, os engenheiros estariam satisfeitos em descobrir se pelo menos existe uma sequência de dobras coerente para um par de fitas de entrada e saída. Para isso, eles contrataram você para desenvolver um programa que verifique, para cada fita de entrada, se existe uma sequência de dobraduras que leve a uma fita de saída."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1739",
        "saida": "Para cada caso de teste imprima uma linha contendo o N-ésimo termo da série de Threebonacci.",
        "entrada": "Cada caso de teste contém um inteiro N (1 ≤ N ≤ 60 ). A entrada termina com o fim de arquivo (EOF).",
        "titulo": "Sequência de Threebonacci",
        "descricao": "Um número pertence à sequência de Threebonacci caso pertença à sequência de Fibonacci (assuma que o primeiro termo da série é o 1) e atenda pelo menos um dos últimos critérios abaixo: 1 – A representação do número possui pelo menos um dígito 3. 2 – O número é múltiplo de 3."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1026",
        "saida": "Para cada linha de entrada, o programa deverá fornecer uma linha de saída, que é o valor após somar dois números no modo “Mofiz”.",
        "entrada": "Em cada linha de entrada haverá um par de inteiros separado por um único espaço. A entrada termina com EOF.",
        "titulo": "Carrega ou não Carrega?",
        "descricao": "6+9=15 parece ok. Mas como pode estar certo 4+6=2? Veja só. Mofiz trabalhou duro durante seu curso de Eletrônica Digital, mas quando lhe foi solicitado que implementasse um somador de 32 bits como exame no laboratório, ele acabou fazendo algum erro na parte de projeto. Depois de vasculhar seu projeto por uma hora e meia, ele encontrou seu erro. Ele estava fazendo soma de bits, mas seu carregador de bit (carry) sempre apresentava como saída o valor zero. Portanto, 4  = 00000000 00000000 00000000 00000100 +6 = 00000000 00000000 00000000 00000110 ---------------------------------------- 2  = 00000000 00000000 00000000 00000010 Claro que já é uma boa coisa ele finalmente ter encontrado o seu erro, mas isso foi muito tarde. Considerando seu esforço durante o curso, o instrutor deu a ele mais uma chance: Mofiz teria que escrever um programa eficiente que pegaria 2 valores decimais de 32 bits sem sinal como entrada e deveria produzir um número de 32 bits sem sinal como saída, ou seja, somando do mesmo modo como o circuito faz."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1420",
        "saida": "Seu programa deverá identificar na saída cada previsão por um número sequencial na primeira linha, e nas cinco seguintes deverá escrever os cinco horários completos referentes à previsão efetuada, no mesmo formato utilizado na entrada para o horário de processamento da previsão. Você deve também pular uma linha ao final de cada previsão.",
        "entrada": "A entrada consiste de várias previsões referentes a diferentes pessoas. A primeira linha de cada previsão contém o momento exato em que os 5 números (que correspondem aos 5 momentos importantes) foram impressos pelo programa. Este momento segue o formato: ,::: onde é a abreviação do dia da semana correspondente, composto pela sequencia de 3 caracteres maiúsculos correspondentes aos dias da semana de domingo a sábado, respectivamente, tais sejam: DOM, SEG, TER, QUA, QUI, SEX ou SAB. é o dia do mês, escrito com 2 dígitos, zero à esquerda se for o caso. é a abreviação do mês correspondente, composto pela sequencia de 3 caracteres maiúsculos correspondentes aos meses de Janeiro a Dezembro, respectivamente, tais sejam: JAN, FEV, MAR, ABR, MAI, JUN, JUL, AGO, SET, OUT, NOV ou DEZ. é o ano, escrito com 4 dígitos. , e escrito com 2 dígitos, zero à esquerda se for o caso. Nas linhas seguintes vem os 5 momentos previstos, um por linha, 5 linhas por previsão. Cada momento consiste no número d de segundos (0 < d < 2.000.000.000) a contar do momento do processamento. Após o último caso de teste, uma linha iniciada por 'FIM' indica o final do arquivo de entrada. Você pode assumir que o programa desenvolvido em 01 de Março de 2002, de modo que nenhuma data de previsão será anterior a esta. Outro fato importante é que as moças de Torrinha só vão usar o programa até as 23:59:59 de 31/12/2099 quando uma delas acha que vai morrer, pois, isso foi previsto por outro programa elaborado pelo departamento de intuição feminina da Unitor (Universidade de Torrinha).",
        "titulo": "Contando os Segundos",
        "descricao": "Através da pesquisa e do desenvolvimento espetacular de técnicas revolucionárias de computação, estatística e intuição, um grupo de mulheres da Universidade de Torrinha desenvolveram um software capaz de prever o futuro. Na verdade, o programa não consegue descrever exatamente o que vai acontecer, mas através da análise da resposta a uma série de perguntas sobre a pessoa, ele consegue identificar quando acontecerão os próximos cinco eventos mais importantes na vida dela. O programa apresenta dois pequenos problemas. O primeiro é que a pessoa sobre a qual se quer adivinhar o futuro precisa passar centenas de horas ininterruptas na frente do computador, respondendo às perguntas feitas pelo software, para que ele consiga fazer a previsão. O segundo é que as previsões são feitas em número de segundos, a contar do término do processamento da precisão. As moças de Torrinha estão empenhadas na solução do primeiro problema, e pediram aos concorrentes da Maratona de Programação uma ajuda para resolver o segundo."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1691",
        "saida": "Para cada caso teste imprima uma única linha com \"Case #A: B\" onde A é o número do caso teste (começando de 1) e B é o menor P possível de forma que o nível ainda seja possível de ser completado. B deve ser arredondado para 4 dígitos após o ponto decimal. A entrada será de tal forma que erros até 10-5 ainda darão a resposta correta.",
        "entrada": "A primeira linha contém T (T ≤ 100) – o número de casos teste. Após essa linha, haverá T casos teste. A primeira linha de um caso teste contém um inteiro N (1 ≤ N ≤ 104) – o número de conjuntos de paredes. As próximas N linhas contém a descrição de um conjunto de paredes da seguinte forma: Primeiro o número K (0 ≤ K ≤ 10) – o número de paredes que esse conjunto possui. Após isso, K tuplas de números de ponto flutuante da seguinte forma: X,Y (0 ≤ X, Y < 2π) – A parede começa no ângulo X e estende ao longo da circunferência em sentido horário até o ângulo Y. Paredes do mesmo conjunto nunca se intersectam. Nenhum dos conjuntos será uma circunferência completa. Quando o jogo começa, o primeiro conjunto atinge o centro após P segundos e o ponto preto pode começar em qualquer posição. A figura acima ilustra o primeiro teste de exemplo.",
        "titulo": "Super Circunferência",
        "descricao": "Skyrk desenvolveu um jogo chamado Super Circunferência. Sua simplicidade é contrastada por sua grande dificuldade. O objetivo de Super Circunferência é controlar um ponto que se desloca ao redor uma circunferência central tentando evitar contato com as paredes circulares que se aproximam. O ponto preto circula ao redor da circunferência vermelha a uma velocidade de uma revolução completa por segundo. Um nível tem vários conjuntos de paredes circulares que se aproximam, com as quais o ponto deve evitar o contato. Uma parede se aproximando pode ser interpretada como um setor de uma circunferência. O conjunto de paredes se aproxima do centro na velocidade de um conjunto a cada P segundos. O jogador consegue vencer se ele desviar de todas as paredes com sucesso. Um novo nível foi criado com N conjuntos de paredes. Para ajustar a sua dificuldade corretamente, você deve encontrar o menor valor de P que ainda torne o nível possível de ser completado."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1403",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo o identificador do jogador que é o segundo melhor, em número de aparições nos rankings. Se há um empate para segundo lugar, imprima os identificadores de todos os segundo colocados, em ordem crescente. Cada identificador produzido deve ser seguido por um espaço em branco.",
        "entrada": "A entrada contém diversos casos de teste. Jogadores são identificados por inteiros de 1 a 10000. A primeira linha de um caso de teste contém dois inteiros N e M, indicando, respectivamente, o número de rankings disponíveis (2 ≤ N ≤ 500) e o número de jogadores em cada ranking (2 ≤ M ≤ 500). Cada uma das próximas N linhas contém a descrição de um ranking semanal. Cada descrição é composta por uma sequência de M inteiros, separados por um espaço em branco, identificando os jogadores que apareceram naquele ranking semanal. Você pode assumir que: em cada caso de teste há exatamente um melhor jogador e ao menos um segundo melhor jogador, cada ranking semanal consiste de M jogadores distintos. O final da entrada é indicado por N = M = 0.",
        "titulo": "Meu Avô é Famoso",
        "descricao": "A família toda ficou excitada pela novidade. Todos sabiam que o meu avô tinha sido um excelente jogador de bridge por décadas, mas quando foi anunciado que ele estaria no Guinness Book, o livro dos recordes, como o jogador de bridge de maior sucesso de todos os tempos, wow, aquilo foi surpreendente. A Associação Internacional de Bridge (AIB) tem mantido, por diversos anos, um ranking semanal dos melhores jogadores do mundo. Considerando que cada aparição em um ranking semanal constitui um ponto para o jogador, meu avô foi nominado o melhor jogador de todos os tempos porque ele conseguiu o maior número de pontos. Tendo muitos amigos que também estavam competindo com ele, meu avô está extremamente curioso para saber que jogador(es) ficou(aram) com o segundo lugar. Ele precisa de um programa, o qual, dada uma lista com os ranking semanais, descubra que jogador(es) ficou(aram) com o segundo lugar, de acordo com o número de pontos."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1547",
        "saida": "Para cada caso de teste, seu programa deve imprimir um número inteiro que indica a posição do ganhador da camiseta, conforme as regras descritas acima.",
        "entrada": "A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste, ou de camisetas que serão sorteadas. Cada caso de teste é composto por duas linhas. A primeira linha contém dois valores inteiros QT (4 ≤ QT ≤ 10) e S (1 ≤ S ≤ 100) separados por um espaço, que indicam respectivamente a quantidade de alunos do grupo e o número secreto que deve ser adivinhado. A segunda linha contém cada um dos QT valores, separados por um espaço.",
        "titulo": "Adivinha",
        "descricao": "O professor Genesio recebeu várias camisetas da OBI (Organização dos Bacharéis Intelectuais) para doar a seus alunos de Ciência da Computação. Para fazer a distribuição destas camisetas ele organizou os alunos de cada turma do curso em pequenos grupos (de no máximo 10 pessoas) e definiu que faria o sorteio de uma camiseta para cada um dos grupos. Como Genesio não quer perder muito tempo com este sorteio, ele pediu que você o ajudasse com um programa que determinasse quem foi o aluno ganhador de acordo com a seguinte regra: O primeiro de cada grupo a acertar um número escolhido pelo professor obviamente ganha a camiseta, mas se ninguém acertar este número, ganha a camiseta o primeiro que chegar o mais próximo deste número. Não faz diferença quem do grupo o professor escolhe para tentar iniciar a adivinhação. Este sempre será o aluno número 1, e assim sucessivamente."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1622",
        "saida": "Para cada consulta imprima uma linha, contendo N caracteres cada, onde o i-ésimo caractere indica o estado da i-ésima lâmpada, estado ela ligada (caractere \"o\") ou desligada (caractere \"x\").",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e Q (3 ≤ N ≤ 100, 1 ≤ Q ≤ 1000), representando o número de lâmpadas e o número de consultas, respectivamente. Em seguida haverá uma linha com N caracteres, representando o estado das N lâmpadas. O i-ésimo caractere indica o estado da i-ésima lâmpada, estando ela ligada (caractere \"o\") ou desligada (caractere \"x\"), para todo 1 ≤ i ≤ N. Em seguida haverá Q linhas, cada uma com dois inteiros K e M (1 ≤ K < N, 1 ≤ M ≤ 10⁶), indicando o tamanho do “salto” que seu interruptor dá (conforme o enunciado), e o número de vezes que o mesmo foi pressionado, respectivamente. A cada consulta o interruptor inicia na posição 1. O último caso de teste é indicado quando N = Q = 0, o qual não deverá ser processado.",
        "titulo": "Lâmpadas",
        "descricao": "No último trabalho da escola, você desenvolveu um projeto um tanto quanto curioso. Trata-se de N lâmpadas dispostas uma ao lado da outra, enumeradas de 1 até N, da esquerda para a direita, e de um único interruptor. Quando este interruptor é pressionado, ele troca o estado de uma das lâmpadas (se está ligada, ela desliga, e vice-versa). O diferencial do seu projeto está no comportamento desse interruptor. Em vez de trocar o estado de apenas uma lâmpada em particular, ele intercala entre as lâmpadas em que ele vai agir, funcionando da seguinte maneira: na primeira vez ele troca o estado da lâmpada número 1; na segunda, e nas próximas vezes, ele troca o estado da lâmpada que está K posições à direita da anterior. Se ele chegar no final da sequência, ele continua a contar da posição 1. Ou seja, seja N = 8 e K = 3, se pressionarmos o interruptor 4 vezes ele vai agir nas lâmpadas 1, 4, 7 e 2, respectivamente. Você ficou um pouco intrigado com sua própria invenção, e resolveu fazer alguns testes. Dado o estado inicial de cada uma das N lâmpadas (ligado ou desligado), o valor de K e um número M de vezes que o interruptor foi pressionado, diga o estado final das N lâmpadas."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2192",
        "saida": "For each test case, display its case number followed by the best program as described above. Display the word “empty” if the best program uses no operations. Display the word “impossible” if there is no program meeting the specifications. Display the program as a sequence of space-separated strings, alternating between strings of the form “nA” and strings of the form “nM”, where n > 0. Strings of the former type indicate n consecutive A operations, and strings of the latter type indicate n consecutive M operations. Follow the format of the sample output.",
        "entrada": "The input contains several test cases. Each test case is given by a line with the six integers a, m, p, q, r, and s as described above (1 ≤ a, m, p, q, r, s ≤ 109 , p ≤ q and r ≤ s). The last test case is followed by a line with six zeros.",
        "titulo": "To Add or to Multiply",
        "descricao": "The Industrial Computer Processor Company offers very fast, special purpose processing units tailored to customer needs. Processors of the a-C-m family (such as the 1-C-2 and the 5-C-3) have an instruction set with only two different operations: A add a M multiply by m The processor receives an integer, executes a sequence of A and M operations (the program) that modifies the input, and outputs the result. For example, the 1-C-2 processor executing the program AAAM with the input 2 yields the output 10 (the computation is 2 → 3 → 4 → 5 → 10), while the 5-C-3 processor yields 51 with the same program and input (2 → 7 → 12 → 17 → 51). You are an a-C-m programmer assigned to a top secret project. This means that you have not been told the precise computation your program should perform. But you are given particular values p, q, r, and s and the following conditions: The input is guaranteed to be a number between p and q. The output must be some number between r and s. Given an a-C-m processor and the numbers p, q, r, and s, your job is to construct the shortest a-C-m program which, for every input x such that p ≤ x ≤ q, yields some output y such that r ≤ y ≤ s. If there is more than one program of minimum length, choose the one that come first lexicographically, treating each program as a string of As and Ms."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1410",
        "saida": "Para cada caso de teste na entrada imprima uma linha contendo um único caractere: \"Y\" (maiúsculo) se existe um jogador atacante impedido, e \"N\" (maiúsculo) caso contrário.",
        "entrada": "O arquivo de entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros A e D separados por um espaço indicando, respectivamente, o número de jogadores atacantes e defensores envolvidos na jogada (2 ≤ A, D ≤ 11). A próxima linha contém A inteiros Bi separados por um espaço, indicando as distâncias dos jogadores atacantes até a linha do gol (1 ≤ Bi ≤ 104). A próxima linha contém D inteiros Cj separados por um espaço, indicando as distâncias dos defensores até a linha do gol (1 ≤ Cj ≤ 104). O final da entrada é dado por A = D = 0.",
        "titulo": "Ele Está Impedido!",
        "descricao": "A Rede do Hemisfério é a maior rede de televisão de Tumbolia, um pequeno país situado a leste da América do Sul (ou sul da América do Leste). O esporte mais popular em Tumbolia, obviamente, é o futebol; muitos jogos são transmitidos toda semana em Tumbolia. A Rede do Hemisfério recebe muitos pedidos para repassar lances polêmicos; normalmente esses acontecem quando um jogador é dito impedido pelo juíz. Um jogador atacante está impedido se ele está mais próximo da linha do gol do oponente do que o penúltimo adversário. Um jogador não está impedido se ele está na mesma linha que o penúltimo adversário ou ele está na mesma linha que os dois últimos adversários. Através do uso de tecnologia de computação gráfica, a Rede do Hemisfério consegue tirar uma foto do campo e determinar as distâncias dos jogadores até a linha do gol do time defensor, mas eles ainda precisam de um programa que, dadas essas distâncias, decida se um jogador está impedido."
    },
    {
        "nivel": "9",
        "assunto": "2",
        "numero": "1139",
        "saida": "Para cada caso de teste, imprima Q+1 linhas. A linha i das primeiras Q linhas devem conter dois inteiros representando a linha e a coluna da localização que foi atribuída ao número pi. A última linha de cada caso deve conter um único caractere '-' (hífen).",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém três inteiros N, M e P, representando o número de linhas e colunas da grade (1 ≤ N,M  ≤ 109) e o número de estações de força (1 ≤ P ≤ 20). Cada uma das P linhas seguintes contém dois inteiros R e C representando a linha e a coluna de uma estação de força (1 ≤ R ≤ N e 1 ≤ C  ≤ M). Em cada caso de teste, todas as estações de força estão em células distintas. A próxima linha contém um único inteiro Q representando o número de consultas (1 ≤ Q ≤ 50). Então segue uma linha com Q inteiros p1, ... , pQ representando as posições da lista priorizada (1 ≤ pi ≤ N x M - P).   O último caso de teste é seguido de uma linha contendo três zeros.",
        "titulo": "Necessidades Elétricas",
        "descricao": "Você irá construir uma nova fábrica na sua cidade. Já que você necessida de muita energia elétrica, ter a fábrica posicionada perto de uma estação de força é importante. Você quer construir uma lista priorizada das possíveis localizações.   A área onde a fábrica precisa ser construída pode ser representada como uma grade retangular de N linhas e M colunas de células. Algumas dessas células contem uma estação de força. A nova fábrica ocupa exatamente uma célula, e pode ser construída em qualquer célula livre (ou seja, qualquer célula que não contém uma estação de força).   Numerando as linhas de 1 até N e as colunas de 1 até M, a localização de uma célula pode ser descrita por dois inteiros. A célula ( i , j ) é a célula na linha i e coluna j. A distância entre as células (i0 , j0) e (i1 , j1) é max( |i0 - i1| , |j0 - j1| ) onde | x | representa o valor absoluto de x. A prioridade elétrica de uma localização é a menor distância até qualquer estação de força.   Com isso em mente, você vai numerar todas as possíveis localizações com inteiros consecutivos começando de 1. Você fará isso em ordem crescente de prioridade elétrica. Dentre locais com a mesma prioridade elétrica, você vai numerá-los em ordem crescente de seu índices de linha. Dentre locais com mesmas prioridade elétrica e índice de linha, você vai listá-los em ordem crescente de seu índices de coluna.   Na figura abaixo você pode ver uma grade 4 x 7. Células pretas são as células onde há uma estação de força. Células cinza escuras possuem prioridade elétrica 1, cinza claras prioridade elétrica 2 e células brancas prioridade elétrica 3. O número dentro de cada célula é o número atribuído por você à célula.     Você receberá inúmeras consultas sobre a lista construída. Em cada consulta será dado um número representando a posição na lista final e você deverá dizer a qual célula foi atribuída a posição dada."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1540",
        "saida": "Para cada caso de teste deverá ser impresso a taxa de crescimento anual com apenas duas casas decimais, separadas por vírgula e truncadas, ou seja, sem arredondamentos.",
        "entrada": "A primeira linha da entrada contém um número inteiro N (1 ≤ N ≤ 1000) representando o total de casos de testes. As N linhas seguintes são compostas de 4 números inteiros A, B (B > 0), C, D (D > 0) separados por espaço. O número A representa o ano, o número B representa o consumo do ano A. O número C representa um outro ano e o número D representa o consumo de C.",
        "titulo": "Planejando a Energia",
        "descricao": "Você está participando de um comitê que irá ajudar a planejar o crescimento da energia elétrica no Brasil, garantindo assim que as usinas consigam fornecer a energia necessária no futuro. Para isso você tem as seguintes informações: durante o ano de 2010 o consumo médio do brasileiro foi de 104.326 GWh. em 2013 o consumo foi de 127.755 GWh. Você deve determinar a taxa de crescimento anual para diferentes situações e previsões futuras, considerando o fato deste crescimento ser linear. Nesse caso, a taxa foi de 7.809,66 GWh/ano."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1732",
        "saida": "Você deverá imprimir a coordenada de Maja para os números de Willi, cada uma em uma linha separada.",
        "entrada": "A entrada é composta por um ou mais inteiros que representam os números de Willi. Cada linha contém apenas um número, seguido por nova linha. Os números dos favos são todos menos que 100 000.",
        "titulo": "Abelha Maja",
        "descricao": "Maja é uma abelha. Ela mora em uma colméia de abelhas, com milhares de outras abelhas. Esta colméia é composta de muitos favos hexagonais, onde o mel é armazenado dentro destes. Mas abelha Maja tem um problema. Willi disse a ela onde pode encontrá-lo, mas pelo fato de Willi ser um drone masculino e Maja uma trabalhadora, eles têm diferentes sistemas de coordenadas. Sistema de Coordenadas de Maja Maja, que muitas vezes precisa voar diretamente a um hexágono especial de mel, usa um sistema avançado, bidimensional, ao longo de toda a colméia. Sistema de Coordenadas de Willi Willi que é mais preguiçoso, anda apenas em torno de células numeradas no sentido horário a partir de 1, no meio da colméia. Ajude Maja a converter o sistema de Willi para o dela. Escreva um programa que dado um número de favo (hexágono) de mel localizado na colméia de Willi, determine suas coordenadas no sistema de Maja."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1561",
        "saida": "Para cada teste, a saída é composta por um desenho do relógio no horário dado na entrada (o desenho deve seguir o mesmo formato dos desenho dos exemplos). Imprima uma linha em branco após cada desenho.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha conténdo um horário no formato HH:MM (0 ≤ HH < 12 e 0 ≤ MM < 60). A entrada termina com final de arquivo (EOF).",
        "titulo": "Relógio Binário",
        "descricao": "Alguns programadores gostam de ser estranhos e usam relógios binários como o relógio da imagem abaixo: Há também programadores que gostam de inventar questões para competições online, porém não gostam de escrever textos detalhados e longos para as questões. Sua tarefa nesse problema é desenhar o relógio da imagem em um dado horário."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1342",
        "saida": "Para cada teste em sua entrada, seu programa deve apresentar um único inteiro: o número representando o jogador. A saída deve ser escrita de uma forma padrão.",
        "entrada": "Seu programa deve processar vários casos de teste. A primeira linha de um teste contém dois inteiros P e S representando respectivamente o número de jogadores e o número de quadrados na trilha (1 <= P <= 10 e 3 <= S <= 10000). A segunda linha descreve as armadilhas, representadas por três inteiros diferentes T1, T2 e T3, mostrando suas posições na trilha (1 <= T1, T2, T3 <= S). A terceira linha contém um único inteiro N indicando o número de rolagem de dados no teste. Cada uma das N linhas seguintes contém dois inteiros D1 e D2 (1 <= D1, D2, <= 6), representando os resultados da rolagem dos dados. O fim da entrada é indicado por P = S = 0. O conjunto de rolagem dos dados em um teste será sempre um número exato necessário para que um jogador ganhe o jogo. Um jogador é identificado por um número de 1 até P. Os jogadores jogam em uma rodada de uma forma sequencial de 1 para P. A entrada deve ser lida de uma forma padrão.",
        "titulo": "Dado",
        "descricao": "Um simples jogo de tabuleiro que gerações de crianças jogaram consiste em um tabuleiro contendo uma trilha de quadrados e um conjunto de peças coloridas. No começo do jogo cada peça é atribuída a um jogador; todas as peças são inicialmente posicionadas antes do primeiro quadrado da trilha. O jogo procede em rodadas. A cada rodada, jogadores lançam um par de dados e movem suas peças um número de quadrados para frente igual ao resultado rolado. Os jogadores jogam os dados sempre na mesma ordem (jogador A, depois jogador B, etc.) em cada rodada. Maioria dos quadrados no tabuleiro são quadrados planos (ou quadrados vazios), mas alguns são “armadilhas”. Se a peça de um jogador cair em um quadrado armadilha no fim de seu movimento, o jogador perde sua próxima jogada. Ou seja ele/ela não pode jogar os dados, e seu/sua peça fica uma rodada sem se movimentar. Haverá exatamente três armadilhas na trilha: O vencedor do jogo é o jogador que sua peça chega no fim da trilha primeiro. O fim da trilha é depois do último quadrado do tabuleiro. Considere, por exemplo, o tabuleiro da imagem acima, que tem quadrados numerados de 1 à 48. No começo, as peças são posicionadas no local marcado “Begin (início)” na figura, ou seja, antes do quadrado de número 1. Portanto, se um jogador rola um 7 (dados mostrando 2 e 5 por exemplo) seu/sua peça estará posicionada no quadrado de número 7 no fim da primeira rodada do jogo. Além disso, se a peça de um jogador está posicionada no quadrado de número 41, o jogador precisa de um resultado de no mínimo 8 para chegar ao fim da trilha e ganhar o jogo. Note também que não haverá empate no jogo. Será dado a você um número de jogadores, o número de quadrados na trilha, o local das armadilhas e uma lista de resultados jogados nos dados. Você deve escrever um programa que determina o ganhador."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2205",
        "saida": "For each test case, display a single line containing the case number and the number of times that the relay system needs to be set up or modified.",
        "entrada": "Each test case starts with a line containing an integer n (2 ≤ n ≤ 50) indicating the number of asteroid bases. Following this are n lines, each containing six integers x, y, z, vx, vy, vz. The first three specify the initial location of an asteroid (−150 ≤ x, y, z ≤ 150), and the last three specify the x, y, and z components of that asteroid’s velocity in space units per time unit (−100 ≤ vx, vy, vz ≤ 100).",
        "titulo": "Asteroid Rangers",
        "descricao": "The year is 2112 and humankind has conquered the solar system. The Space Ranger Corps have set up bases on any hunk of rock that is even remotely inhabitable. Your job as a member of the Asteroid Communications Ministry is to make sure that all of the Space Ranger asteroid bases can communicate with one another as cheaply as possible. You could set up direct communication links from each base to every other base, but that would be prohibitively expensive. Instead, you want to set up the minimum number of links so that everyone can send messages to everyone else, potentially relayed by one or more bases. The cost of any link is directly proportional to the distance between the two bases it connects, so this doesn’t seem that hard of a problem. There is one small difficulty, however. Asteroids have a tendency to move about, so two bases that are currently very close may not be so in the future. Therefore as time goes on, you must be willing to switch your communication links so that you always have the cheapest relay system in place. Switching these links takes time and money, so you are interested in knowing how many times you will have to perform such a switch. A few assumptions make your task easier. Each asteroid is considered a single point. Asteroids always move linearly with a fixed velocity. No asteroids ever collide with other asteroids. Also, any relay system that becomes optimal at a time t ≥ 0 will be uniquely optimal for any time s satisfying t < s < t+10−6 . The initial optimal relay system will be unique."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1209",
        "saida": "Para cada instância imprima uma única linha contendo a lista das pessoas a serem convidadas separadas por um espaço em branco. A lista deve estar ordenada em ordem crescente. Caso ninguém possa ser convidado, imprima o número 0.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém três inteiros N (1 ≤ N ≤ 1000), M e K (O ≤ K ≤ N) representando respectivamente o número de pessoas na comunidade, o número de relações de amizade nessa comunidade e o número mínimo de amigos convidados uma pessoa precisa ter para ser convidada. Cada pessoa da comunidade é identificada por números de 1 a N. Cada uma das próximas M linhas contém um par de pessoas indicando que elas são amigas na rede social.",
        "titulo": "Festas de São Petersburgo",
        "descricao": "São Petersburgo tornou-se após o fim da cortina de ferro, no início dos anos 90, uma das principais cidades da cena alternativa em todo o mundo. Grupos de punks, diversas bandas de hardcore e outros representantes da cena alternativa mudaram-se para a cidade, atraídas pela grande quantidade de jovens. Com o surgimento das comunidades virtuais, alguns anos mais tarde, notou-se o enorme potencial do uso destas comunidades para combinar encontros, festas, raves, etc. Nestas festas de São Petersburgo é sempre muito importante que cada um dos participantes tenha pelo menos um certo número de amigos na rede social. E, ao mesmo tempo, desejamos convidar o maior número possível de pessoas de São Petersburgo desde que a restrição com relação ao número de amigos seja satisfeita. Tal restrição diz que, para ser convidada a festa, a pessoa precisa ter pelo menos um número K de amigos na lista de convidados. Sua tarefa neste problema é, dado o conjunto de pessoas da comunidade e a lista de suas relações, determinar quais devem ser chamadas para que a festa tenha a maior quantidade possível de participantes satisfazendo a restrição."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2210",
        "saida": "For each test case, display the case number followed by the minimal number of key attach/detach operations and the minimal number of ring connect/disconnect operations. If there is no way to split the keys as requested, display the case number and the word 'impossible' instead of the two integers.",
        "entrada": "Each test case contains one or more lines, each containing a two letter string. Lowercase letters (a - z) represent key rings and uppercase letters (A - Z) represent keys. The two letters on a line specify either a key attached to a ring or two rings connected together. The end of each test case is denoted by a line containing the digit zero. Keys denoted by letters A through M remain with Adam, and keys denoted by letters N through Z are given to Brenda. No line contains two uppercase letters. No pair of letters are specified more than once in the same test case. Each key is connected to exactly one ring. There are no “circles” in the ring configurations (disconnecting any two rings will increase the number of connected groups). All existing keys and rings are mentioned at least once.",
        "titulo": "Keys",
        "descricao": "Adam carries a bunch of keys attached to key rings, some of which may be connected to each other. The rings are common key rings, so a key can be attached to or detached from a ring by sliding along the spiral. In the same way, two rings can be connected or disconnected. Adam wants to give some of the keys to Brenda. Since manipulating the keys and rings is often an annoying task (and also dangerous to one’s fingernails), Adam is looking for a way to minimize the number of key and ring operations. Every key attachment, key detachment, ring connection, or ring disconnection is considered one operation. Since manipulating two rings is significantly easier than sliding a key, we first want to minimize the number of keys being detached and attached. Among solutions with the same minimal number of key operations, you need to find the one with the minimal number of ring connections and disconnections. When all the operations are complete, Adam and Brenda must each carry one connected group of rings and keys. The only exception is when either of them would have no keys at all—in such a case, no ring is needed. Each key must be attached to exactly one ring. Some rings (but not keys) may be considered leftovers and may remain disconnected from the two groups. The left side of the following figure shows an initial configuration consisting of four keys on three rings. Adam wishes to give Brenda the two keys labeled N and R. This can be accomplished by two key operations and one ring operation, resulting in the configuration shown on the right side of the figure."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2151",
        "saida": "Para cada caso de teste, a saída deve aparecer a palavra Parede, seguida por um espaço, pelo número do caso e por dois pontos. A partir da linha seguinte deve mostrar a parede, formada por M linhas e N colunas, separadas por um espaço, descrevendo como ficou a parede após o soco.",
        "entrada": "A primeira linha da entrada contém um inteiro C (1 ≤ C ≤ 100), indicando o número de casos de teste. Esta linha é seguida pelos casos de teste. Cada caso é descrito por quatro números inteiros M, N, X e Y (1 ≤ X ≤ M ≤ 100 e 1 ≤ Y ≤ N ≤ 100), representando a quantidade de linhas e colunas da parede, e as coordenadas onde o soco foi dado. Em seguida, seguem M linhas, com N números inteiros Z (1 ≤ Z ≤ 90), separados por um espaço, representando os valores originais de cada bloco da parede.",
        "titulo": "Soco do Rulk",
        "descricao": "Certo dia, um grupo de cientistas resolveu calcular o poder de destruição do soco do super-herói Rulk, dos Programadores. Constataram que o soco em si afetaria qualquer parede, desde as menores até as gigantes. Assim, conseguiram sintetizar este efeito da seguinte forma: Converteram as paredes em uma matriz MxN, no seu estado de destruição atual, definindo valores inteiros a cada coordenada da parede, sendo 0 para menos destruída, indo até para 100, mais destruída. Além disso, determinaram qual seria a coordenada exata do soco. Constataram que o valor da coordenada do soco aumentaria em 10 pontos em seu estado de destruição, ficando mais frágil; e as coordenadas adjacentes a este ponto aumentariam em 9 pontos; as coordenadas adjacentes a estes aumentariam em 8 pontos; e assim sucessivamente. E quando chegasse a 1 ponto, todo o restante da parede também aumentaria em um ponto, afetando toda a parede."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2212",
        "saida": "For each test case, display the case number and the length of the desired route, accurate to two decimal places.",
        "entrada": "Each test case starts with a line containing the number of vertices N of the polygon (3 ≤ N ≤ 100) and the integer coordinates Px and Py of the robot’s starting point (−10 000 ≤ Px, Py ≤ 10 000). This is followed by N lines, each containing two integers x, y (−10 000 ≤ x, y ≤ 10 000) defining a vertex of the polygon. Vertices are given in counterclockwise order, all interior angles are less than 180 degrees, the polygon does not self-intersect, and the robot’s starting point is strictly inside the polygon",
        "titulo": "Room Service",
        "descricao": "You are working for a company designing cute, funny robot vacuum cleaners. At a high level, the robots’ behavior is divided into three modes: Exploration Vacuuming Rampant Killing Unfortunately, while consumer testing shows that the last two modes are working perfectly, the exploration mode still has bugs. You’ve been put in charge of debugging. At the beginning of the exploration mode, the robot is placed into a convex polygonal room. It has sensors that should tell it where all the walls are. Your job is to write a program that verifies that these readings are correct. To do this, the robot needs to physically touch every wall in the room. Your problem is this: given the shape of a convex polygonal room with N walls and a starting point P inside it, determine the shortest route that touches each wall and then returns to P. Touching a corner counts as touching both incident walls."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "2011",
        "saida": "Saída de uma linha com um número racional, que representa o imposto total máximo que ACM pode coletar. O resultado deve ser saída como um número racional com exatamente cinco dígitos após o ponto decimal, arredondado, se necessário.",
        "entrada": "A primeira linha contém dois inteiros N e M, representando, respectivamente, o número de escritórios ACM na rede e o número de conexões (2 ≤ N ≤ 1000 e 1 ≤ M ≤ 102). São escritórios ACM os identificados com inteiros distintos de 1 a N, sendo 1 o escritório fonte ACM e N o escritório destino ACM. Cada uma das próximas linhas M descreve uma conexão com quatro inteiros I, J, A e B, indicando que há uma conexão bidirecional entre escritório I e o escritório J (1 ≤ I < J ≤ N), de tal forma que o fiscal de uma transação executada entre escritório I e escritório J no tempo t é definido pelo fórmula A × t + B (−100 ≤ A ≤ 100 e 0 ≤ B ≤ 10^6). Os impostos são não-negativo, então um A × t + B ≥ 0, para 0 ≤ t ≤ 24 × 60. E no máximo uma conexão entre cada par de escritórios ACM, e há pelo menos um caminho entre o fonte de gabinete ACM e o escritório ACM de destino.",
        "titulo": "Impostos Galácticos",
        "descricao": "O ano é 2115. O Centro Interplanetário de Planejamento Comercial (da sigla em inglês, ICPC) é suportado pelo Ministério de Comunicação Autônoma (ACM). Uma operação comercial é realizada executando transações entre escritórios ACM conectados ao longo da galáxia. A execução de uma transação entre dois escritórios conectados à ACM envolve um fiscal não-negativo, cujo valor aumenta ou diminui, continuamente como uma função linear A × t + B de tempo t, onde t é um número real medido em minutos durante o dia (0 ≤ t ≤ 24 × 60). O imposto total de uma operação comercial realizada entre um escritório fonte ACM e um escritório destino ACM em algum momento t, é calculada como a mínima soma possível dos impostos das transações executadas entre os escritórios ACM visitados ao longo de algum caminho a partir do escritório fonte ACM para o escritório destino ACM. O imposto de cada transação é calculado ao mesmo tempo t. Desde que o imposto das transações entre escritórios ACM conectados está mudando continuamente durante a dia, seria melhor executar a operação comercial em algum horário específico do dia, em ordem para maximizar o imposto recolhido. Naquela época, ACM decidiu realizar a operação comercial, e não antes ou depois. Sua tarefa é escrever um programa que recebe como entrada a descrição da rede de escritório ACM e retorna como saída o imposto total máximo da operação comercial que pode ser alcançado durante o dia, ou seja, o imposto total máximo que ACM pode coletar."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1769",
        "saida": "Se o CPF informado for válido, escreva \"CPF valido\". Caso contrário, escreva \"CPF invalido\".",
        "entrada": "A entrada contém um número desconhecido de CPFs, que não excede 10000 casos. Em cada linha, um CPF na forma d1d2d3.d4d5d6.d7d8d9-d10d11",
        "titulo": "CPF 1",
        "descricao": "Você foi contratado pelas Indústrias Udilandenses (INUDIL) para desenvolver uma maneira de verificar se o Cadastro de Pessoa Física (CPF) indicado por um cliente era válido ou não. Conversando com amigos, você chegou à conclusão de que um CPF seria válido se a soma de todos os seus dígitos resultasse em número múltiplo de 11. Após verificação minuciosa, você descobriu que essa maneira só funciona em cerca de 80% dos casos, e você precisa de mais do que isso para garantir a qualidade do seu trabalho. Após pesquisar mais, você descobriu que dos 11 dígitos do CPF, os dois últimos são verificadores e dependem dos 9 dígitos anteriores. Vamos introduzir alguma notação. Considere um CPF com os seguintes dígitos a1a2a3.a4a5a6.a7a8a9-b1b2 Para descobrirmos o dígito b1, procedemos da seguinte maneira: multiplicamos o primeiro por 1, o segundo por 2, o terceiro por 3, o quarto por 4 e vamos assim até multiplicarmos o nono por 9. Então, somamos tudo isto. Após termos somado tudo, dividimos por 11. O dígito b1 será o resto da divisão (ou 0, caso o resto seja 10). Para o segundo dígito verificador, temos o seguinte: multiplicamos o primeiro por 9, o segundo por 8, o terceiro por 7, o quarto por 6 e vamos assim até multiplicarmos o nono por 1. Então, somamos tudo isto e dividimos por 11. O dígito b2 será o resto da divisão (ou 0, caso o resto seja 10). Sabendo que isso vale para 100% dos CPFs, sua missão é implementar um programa que, dado um CPF, diga se ele é válido ou não."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2123",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima o número máximo de policiais que podem ter um cavalo para montar em uma atribuição. Após cada instância imprima uma linha em branco.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em três inteiros n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 100) e k (1 ≤ k ≤ 1000) indicando o número de cavalos, o número de soldados e o número de afinidades. A linha seguinte contêm n inteiros c1, c2, .., cn indicando que no i-ésimo cavalo pode montar ci (1 ≤ ci ≤ 100) soldados. Nas k linhas seguintes temos dois inteiros u (1 ≤ u ≤ n) e v (1 ≤ v ≤ m) indicando que existe afinidade entre o cavalo u e o soldado v. A entrada termina com final de arquivo.",
        "titulo": "A Lei Vai a Cavalo!",
        "descricao": "A Polícia Montada Real Canadense (Royal Canadian Mounted Police) é uma instituição muito famosa, cujas origens remontam ao século XIX. Sua tarefa é levar a lei aos locais mais longínquos do país continental. Hoje a polícia montada tem um efetivo de 25000 homens e cerca de 5000 cavalos. Cada sede da RCMP tem uma fazenda de cavalos em que os animais são muito bem cuidados, e designados aos policiais com quem têm mais afinidade. Esta afinidade é inferida em observações dos oficiais com vários anos de experiência, observando os policiais montando os animais disponíveis. No Fairmont Banff Springs Stables, onde ficam os cavalos montados pelos policiais da região de Banff Springs, é necessário resolver o problema de decidir quais soldados montarão quais cavalos. Note que um cavalo pode ser montado por vários policiais, mas um policial só monta um determinado cavalo. Cada cavalo tem um limite de policiais que podem montá-lo. Ou seja, de posse da afinidade dos vários policiais com os animais que montou nos últimos tempos, deseja-se encontrar uma atribuição dos cavalos aos vários policiais, de tal forma que o maior número possível de policiais tenham um cavalo para montar."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1107",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número inteiro, indicando o número de vezes que o laser deve ser ligado para esculpir o bloco na forma indicada.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha de um caso de teste contém dois números inteiros A e C, separados por um espaço em branco, indicando respectivamente a altura (1 ≤ A ≤ 104) e o comprimento (1 ≤ C ≤ 104) do bloco a ser esculpido, em milímetros. A segunda linha contém C números inteiros Xi, cada um indicando a altura final, em milímetros, do bloco entre as posições i e i + 1 ao longo do comprimento (0 ≤ Xi ≤ A, para 0 ≤ i ≤ C - 1). Considere que a cada varredura uma camada de espessura 1 milímetro é removida do bloco ao longo dos pontos onde o laser está ligado. O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.",
        "titulo": "Escultura à Laser",
        "descricao": "Desde a sua invenção, em 1958, os raios laser têm sido utilizados em uma imensa variedade de aplicações, como equipamentos eletrônicos, instrumentos cirúrgicos, armamentos, e muito mais. A figura acima mostra um diagrama esquemático de um equipamento para esculpir, com laser, um bloco de material maciço. Na figura vemos um emissor laser que se desloca horizontalmente para a direita e para a esquerda com velocidade constante. Quando o emissor é ligado durante o deslocamento, uma camada de espessura constante é removida do bloco, sendo vaporizada pelo laser. A figura abaixo ilustra o processo de escultura a laser, mostrando um exemplo de (a) um bloco, com 5 mm de altura por 8 mm de comprimento, no início do processo, (b) o formato que se deseja que o bloco esculpido tenha, e (c) a sequência de remoção das camadas do bloco durante o processo, considerando que a cada varredura uma camada de espessura de 1 mm é removida. Na primeira varredura, o pedaço numerado como 1 é removido; na segunda varredura, o pedaço numerado como 2 é removido, e assim por diante. Durante o processo de remoção, o laser foi ligado um total de 7 vezes, uma vez para cada pedaço de bloco removido. Escreva um programa que, dados a altura do bloco, o comprimento do bloco, e a forma final que o bloco deve ter, determine o número total vezes de que o laser deve ser ligado para esculpir o bloco."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1945",
        "saida": "A saída consiste de apenas 1 linha, contendo apenas um número inteiro, referente ao valor a última variável atribuída, seja por uma atribuição direta ou por uma soma.",
        "entrada": "Cada entrada consiste de um programa. O programa só contem 2 tipos de instruções. Uma para atribuir uma variável e outra para executar uma soma. As instruções de declaração são no formato: A := B Onde A é um nome de variável válido e B é um inteiro positivo. As instruções de soma são no formato: A := B + C Onde A é um nome de variável válido e B ou C são ou um nome de variável válido ou um inteiro positivo. Os tokens deste programa são sempre separados por espaço e as instruções são separadas por uma quebra de linha. São nomes de variáveis válidos todas as combinações de até 8 letras minúsculas. Os programas tem, no máximo, 2000 instruções. Variáveis são atribuídas, no máximo, 1 vez.",
        "titulo": "Simulador",
        "descricao": "Séculos após a invasão alienígena, quando a humanidade já está completamente reconstruída, foram encontrados um conjunto de programas escritos em uma linguagem obsoleta, chamada Java++. Por curiosidade histórica, você foi designado a tentar entender oque estes programas faziam. Sua tarefa é escrever um simulador para estes programas, e como teste inicial, o simulador deve ser capaz de calcular o resultado da última variável atribuída de cada programa."
    },
    {
        "nivel": "9",
        "assunto": "2",
        "numero": "1109",
        "saida": "Para cada questão descrita anteriormente, responda “Y” (sem aspas) se a resposta é “sim” ou “N” (sem aspas) se a resposta é “não”. Imprima uma linha em branco após cada caso de teste, inclusive após o último.",
        "entrada": "A entrada é formada por vários casos de teste. A primira linha de um caso de teste contém uma regex (0 < tamanho da regex < 150). A próxima linha contém um inteiro P (1 ≤ P ≤ 100). Cada uma das próximas P linhas contém uma palavra (tamanho < 50) formada por 'a's e 'b's que representa a seguinte questão: “Esta palavra é reconhecida pela regex dada?”.",
        "titulo": "Burlando a Maratona",
        "descricao": "Pela primeira vez a Escola Livre de Matemática, Filosofia e Lingüística de Skyrim vai receber a Maratona de Expressões Regulares (regex) (RegExCon). A maratona acontece da seguinte forma: os participantes competem sempre contra 1 oponente. Um ganha um perde. No final, só o campeão restará. Em uma disputa os participantes recebem uma lista com várias expressões regulares e para cada uma os participantes devem calcular se várias palavras dadas são reconhecidas ou não por tal regex. Como membro da Escola Livre você está participando, e quer ganhar. Para garantir sua vitória, você deve escrever um programa para resolver o problema e deixá-lo rodando na sua Máquina Calculadora de Coisas Legais em casa. Como um mago, especialista em Alteração e Ilusão, você pode facilmente controlar sua máquina com a mente, então você consegue usar o programa durante a maratona. É proibido utilizar magia na maratona, mas coincidentemente a Escola de Winterhold vai sediar um Congresso de Magos, então você não precisa se preocupar, use sua magia. Uma expressão regular é utilizada para descrever uma linguagem (um conjunto de palavras). Considere que o alfabeto de todas linguagens neste problema é {a, b}. Uma regex R é válida se: 1) R é “a” ou “b”; 2) R é “(P.S)” onde P e S são expressões regulares; 3) R é “(P|S)” onde P e S são expressões regulares; 4) R é “(P*)” onde P é uma expressão regular. Expressões regulares podem ser aninhadas. Não há operação ternária com os operadores “.” e “|”, nem operação binária com o operator “*”. Palavras sempre comçam com “(“ e terminam com “)”. O conjunto L de palavras reconhecidas por R é formado seguindo estas regras: 1) Se R é “(a)”, L = {a}; 2) Se R é “(b)”, L = {b}; 3) Se R é “(P.S)”, L = todas palavras que podem ser obtidas a partir da concatenação das palavras p e s, onde p é reconhecida por P e s por S; 4) Se R é “(P|S)”, L = união dos conjuntos de palavras reconhecidas por P e S; 5) Se R é “(P*)”, R reconhece a concatenação de 0 ou mais palavras reconhecidas por P."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2201",
        "saida": "For each test case, display its case number followed by the pyramids to be built. The pyramids should be ordered with the largest first. Pyramids are specified by the length of their base followed by an L for low pyramids or an H for high pyramids. If two differenct pyramids have the same number of cubes, list the high pyramid first. Print “impossible” if it is not possible to meet the requirements of the pharaoh.",
        "entrada": "The input consists of several test cases, each one on a single line. A test case is an integer c, where 1 ≤ c ≤ 106 , giving the number of cubes available. The last test case is followed by a line containing a single zero.",
        "titulo": "Pyramids",
        "descricao": "It is not too hard to build a pyramid if you have a lot of identical cubes. On a flat foundation you lay, say, 10 × 10 cubes in a square. Centered on top of that square you lay a 9 × 9 square of cubes. Continuing this way you end up with a single cube, which is the top of the pyramid. The height of such a pyramid equals the length of its base, which in this case is 10. We call this a high pyramid. If you think that a high pyramid is too steep, you can proceed as follows. On the 10 × 10 base square, lay an 8 × 8 square, then a 6 × 6 square, and so on, ending with a 2 × 2 top square (if you start with a base of odd length, you end up with a single cube on top, of course). The height of this pyramid is about half the length of its base. We call this a low pyramid. Once upon a time (quite a long time ago, actually) there was a pharaoh who inherited a large number of stone cubes from his father. He ordered his architect to use all of these cubes to build a pyramid, not leaving a single one unused. The architect kindly explained that not every number of cubes can form a pyramid. With 10 cubes you can build a low pyramid with base 3. With 5 cubes you can build a high pyramid of base 2. But no pyramid can be built using exactly 7 cubes. The pharaoh was not amused, but after some thinking he came up with new restrictions. All cubes must be used. You may build more than one pyramid, but you must build as few pyramids as possible. All pyramids must be different. Each pyramid must have a height of at least 2. Satisfying the above, the largest of the pyramids must be as large as possible (i.e., containing the most cubes). Satisfying the above, the next-to-largest pyramid must be as large as possible. And so on... Drawing figures and pictures in the sand, it took the architect quite some time to come up with the best solution. Write a program that determines how to meet the restrictions of the pharaoh, given the number of cubes."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1285",
        "saida": "Para cada caso de teste imprima um valor inteiro que representa a quantidade máxima possível de números de casa entre N e M inclusive, sem dígitos repetidos.",
        "entrada": "Cada teste é descrito usando uma linha. A linha contém dois inteiros N e M, conforme descrito acima (1 ≤ N ≤ M ≤ 5000).",
        "titulo": "Dígitos Diferentes",
        "descricao": "Os habitantes de Nlogônia são muito supersticiosos. Uma de suas crenças é que os números das casas de rua que têm um dígito repetido traz sorte ruim para os moradores. Portanto, eles nunca iriam viver em uma casa que tem o número 838 ou 1004, por exemplo. A rainha de Nlogônia ordenou a construção de uma nova avenida à beira-mar e quer atribuir para as novas casas apenas números sem dígitos repetidos, para evitar desconforto entre os seus súditos. Você foi nomeado por Sua Majestade para escrever um programa que, dado dois inteiros N e M, determine a quantidade máxima possível de casas que podem assumir um número entre N e M inclusive, sem que ocorram dígitos repetidos nestes números."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1986",
        "saida": "Somente a mensagem traduzida",
        "entrada": "Ele terá um número n (1<=n<=100) indicando o tamanho da palavra, e \"n\" vezes de duas casas hexadecimais, na qual significa uma letra. Veja o exemplo abaixo:",
        "titulo": "Perdido em Marte",
        "descricao": "No filme \"Perdido em Marte\", o astronauta Mark Watney está presumidamente morto depois de ter sido apanhado numa tempestade, onde é deixado para trás enquanto o resto da equipe planejam evacuar o planeta e regressar à Terra. Watney encontra-se assim sozinho e abandonado, com algumas provisões e a sua sagacidade, destreza e espírito para sobreviver e encontrar uma maneira de enviar um sinal para casa, sabendo que mesmo que saibam que ele está vivo, é muito vaga a hipótese de um salvamento. Watner, ainda vivo, necessitava entrar em contato com a NASA para informar que ainda estava vido, porém no lugar onde estava não tinha um meio de comunicação com a Terra, foi então que ele lembrou da missão da Pathfinder. que a nave aterrou no Planeta Vermelho a 4 de Julho de 1997 e libertou um pequeno rover com seis rodas, chamado Sojourner, para estudar o terreno vizinho. A missão tinha a duração de umas poucas semanas mas acabou por durar quase três meses. A nave comunicou pela última vez com as equipas na Terra a 27 de Setembro. Ele analisando no mapa percebeu que o Pathfinder ficou próximo de sua \"estação\", então o mesmo pensou em usá-lo como comunicação. Porém a única comunicação que existia era uma câmera que rotacionava 360 graus em seu próprio eixo, para registrar fotos em Marte e mandar para a NASA, como a distância da Terra para Marte são de 55,76 milhões de km (Não é exato, pois depende da posição da rotação com a terra, como referência o SOL), uma mensagem que é enviado da terra para Marte dura um tempo de 30 minutos (tecnologia da época), hoje é menor, e acredite, a mensagem andava na velocidade da luz, quando se criar a Dobra(Star Trek) isso será tranquilo. Watner Teve uma ideia, como a Câmera gira 360 Graus, ele estabeleceu em cada ponto, equidistante, no círculo, um valor Hexadecimal, na qual a Câmera iria apontar o código desejado, numa fração de segundos, E Watner iria anotar e verificar a lestra correspondente na sua tabela ASCII, conforme a figura abaixo. Você foi selecionado para trabalhar na NASA e terá que ajudar Watner a sobreviver, faça um programa que converta em hexadecimal para caracter para traduzir a msensagem, as letras só serão de \"a-z\" 26 caracteres. Exemplo: n=3, depois teremos três duplas de hexadecimais \"6F 6C 61\", e se verificar na tabela as letras correspondentes a 6F =o, 6C=l e 61=a, transformando em \"ola\"."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1758",
        "saida": "Para cada aluno imprima uma única linha contendo a média obtida pelo aluno após o arredondamento do professor. A média deve ter exatamente dois dígitos após o ponto decimal.",
        "entrada": "A primeira linha da entrada contém o inteiro T ( 1 ≤ T ≤ 5000) que indica a quantidade de casos de teste. A primeira linha de um caso de teste contém os inteiros P (2 ≤ P ≤ 5) e N (2 ≤ N ≤ 50), indicando a quantidade de provas que o professor realizou e a quantidade de alunos matriculados na turma, respectivamente. As N linhas seguintes conterão P números de ponto flutuante com um dígito após o ponto decimal, indicando as notas (0.0 ≤ nota ≤ 10.0) obtidas pelo i-ésimo aluno em cada uma das provas aplicadas pelo professor.",
        "titulo": "Pontos Extras",
        "descricao": "A instituição em que o professor Charles ensina possui o seguinte critério para decidir a aprovação de um aluno: média ≥ 7.0 = APROVADO 4.0 ≤ média < 7.0 = PROVA FINAL média < 4.0 = REPROVADO O professor Charles resolveu dar uma bonificação aos seus alunos com base no seu desempenho e estabeleceu os seguintes critérios: 1 - Arredondamentos que prejudiquem o aluno serão desconsiderados, permanecendo a nota original. 2 - Nenhum arredondamento deve modificar a situação do aluno (APROVADO, FINAL, REPROVADO). 3 - Se o aluno foi aprovado ou se tem nota suficiente para realizar a prova final, a média desse aluno será substituida pela maior nota obtida nas provas. 4 - Os alunos reprovados foram preguiçosos e não devem receber nenhuma pontuação extra. A aplicação da regra 3 deve ocorrer sempre que possível, desde que não viole as regras 1 ou 2. Escreva um programa que recebe as notas que os alunos obtiveram em cada prova e calcule a sua média conforme os critérios do professor."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1331",
        "saida": "Para cada caso de teste, imprima o número do caso de teste e a maior pontuação possível.",
        "entrada": "A primeira linha contém o número de casos de teste t (1 ≤ t ≤ 15). Cada caso contém duas linhas. A primeira linha contém um inteiro n (1 ≤ n ≤ 200), o número de caixas. A segunda linha contém n inteiros, representando as cores de cada caixa. Os inteiros estão no intervalo 1~n.",
        "titulo": "Blocos",
        "descricao": "Alguns de vocês já podem ter jogado um jogo chamado \"blocos\". Há n blocos em uma linha, cada caixa tem uma cor. Aqui está um exemplo: Ouro, Prata, Prata, Prata, Bronze, Prata, Bronze, Ouro, Bronze. Veja a imagem correspondente abaixo: Se algumas caixas adjacentes são da mesma cor, e tanto a caixa para sua esquerda (se existir) e para sua direita (se existir), são de alguma outra cor, nós a chamamos de \"segmento de caixa\". Há quatro segmentos de caixa. Ou seja: ouro, prata, bronze, ouro. Existem 1, 4, 3, 1 caixa(s), no segmento, respectivamente. Todo o tempo, você pode clicar em uma caixa, então todo o segmento que contém essa caixa DESAPARECE. Se esse segmento é composto de k caixas, você vai ganhar k * k pontos. Por exemplo, se você clicar em uma caixa prata, o segmento prata desaparece e você ganha 4 * 4 = 16 pontos. Agora vejamos a figura abaixo: A primeira opção é a ideal. Encontre a maior pontuação que você pode obter, dado um estado inicial do jogo."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2171",
        "saida": "Para cada linha de entrada, você deverá imprimir quanta comida ficou com Fink e Pica-Pau ao final da divisão, separadas por um espaço.",
        "entrada": "A entrada consistirá de uma série de linhas, cada uma contendo o número de comidas N (1 ≤ N ≤ 100000). O fim da entrada é indicado pelo número zero (0).",
        "titulo": "Dividindo com Fink",
        "descricao": "A raposa Fink, muito esperta, precisa dividir meio a meio algumas comidas entre ele e Pica-Pau, mas ele está com muita fome e pensou em algo muito sagaz para sair ganhando nessa, a divisão vai ser da seguinte forma: Primeiro ele coloca tudo sobre a mesa e começa a dividir: Um pra você. Um pra mim. Dois pra você. Um, dois pra mim. Três pra você. Um, dois, três pra mim... Dessa forma, se a quantidade inicial de comida fosse 12, ele terminaria com 10 e Pica-Pau com 2. Obs: Caso Fink não consiga terminar a última divisão, ele pode roubar do Pica-Pau."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1895",
        "saida": "Imprima uma linha com dois inteiros A e B separados por um espaço, onde A é a pontuação final de Alice, e B é a pontuação final de Bob.",
        "entrada": "A primeira linha contém três inteiros N, T0 e L (1 ≤ N < 60, N é impar, 1 ≤ T0 ≤ N, 1 ≤ L ≤ 10), o número de cartas, a carta inicialmente na mesa, e o limite L. As próximas N-1 linhas contém um inteiro Si cada (1 ≤ Si ≤ N). Estes inteiros descrevem as cartas na pilha, em ordem. A primeira carta dada na entrada é a carta no topo da pilha. Todas as cartas usadas no jogo são distintas.",
        "titulo": "Jogo do Limite",
        "descricao": "Alice e Bob decidiram jogar um jogo simples para passar o tempo. Este jogo é jogado com um baralho contendo N cartas, numeradas de 1 a N. Uma carta está inicialmente na mesa. Além disso, há uma pilha contendo todas as outras cartas do baralho. Alice começa retirando uma carta do topo da pilha. Ela então verifica se a diferença absoluta entre a carta que está atualmente na mesa e a carta retirada da pilha é no máximo um limite L. Em outras palavras, se a carta atualmente na mesa for T e a carta retirada da pilha for S, então ela verifica se |T-S| ≤ L. Se isto for verdade, ela substitui a carta na mesa pela carta removida, e marca |T-S| pontos. Se isto não for verdade, ela não faz nada -- a carta na mesa não é alterada, e ela não marca nenhum ponto. Bob então joga fazendo a mesma coisa. Ele remove uma carta da pilha, a compara com a carta atualmente na mesa e age de acordo. Alice então joga novamente, seguida de Bob, seguido novamente de Alice, e assim por diante. Eles continuam jogando até que a pilha de cartas esteja vazia. Sua tarefa é determinar a pontuação final de ambos os jogadores."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1936",
        "saida": "Seu programa deve produzir uma única linha com um inteiro representando a menor quantidade de números fatoriais cuja soma é igual ao valor de N.",
        "entrada": "A entrada consiste de uma única linha que contém um inteiro N (1 ≤ N ≤ 105).",
        "titulo": "Fatorial",
        "descricao": "O fatorial de um número inteiro positivo N, denotado por N!, é definido como o produto dos inteiros positivos menores do que ou iguais a N. Por exemplo 4! = 4 × 3 × 2 × 1 = 24. Dado um inteiro positivo N, você deve escrever um programa para determinar o menor número k tal que N = a1! + a2! + ... + ak!, onde cada ai, para 1 ≤ i ≤ k, é um número inteiro positivo. Por exemplo, para N = 10 a resposta é 3, pois é possível escrever N como a soma de três números fatoriais: 10 = 3! + 2! + 2!. Para N = 25 a resposta é 2, pois é possível escrever N como a soma de dois números fatoriais: 25 = 4! + 1!."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1939",
        "saida": "Para cada desafio, imprima uma linha contendo X, onde X é a solução do Ominobox.",
        "entrada": "A primeira linha contém T (T ≤ 200) — o número de desafios, após essa linha haverá T desafios. Cada desafio começa com uma linha com quatro inteiros R, C, H e N (1 ≤ R, C, H ≤ 30; 1 ≤ N ≤ 10) — as dimensões da superfície da caixa são R × C, a altura é H, e a ordem dos ominos é N. Cada uma das próximas R linhas contém C inteiros Hij (0 ≤ Hij ≤ H) — o número de cubos no quadrado (i, j) da grade.",
        "titulo": "Ominobox",
        "descricao": "O planeta de Skyrk nunca vai conhecer a paz enquanto o malvado Mago estiver livre. Dessa vez, o malicioso plano do Mago foi armar uma bomba no meio da maior cidade do planeta. Mago aprecia observar o caos, então, ao invés de explodir a bomba imediatamente, ele colocou um temporizador na bomba e a deixou junto com um desafio. A bomba tem um teclado, e a solução do desafio desarma a bomba. O desafio se chama Omnibox; ele consiste de uma caixa retangular com alguns cubos unitários dentro e de uma coleção de todos os possíveis N-ominos. Skyrk deve soltar todo omino em algum lugar da caixa para ganhar pontos. A pontuação máxima é a solução do Ominobox. Um N-omino é uma coleção de N quadrados unitários arranjados com lados coincidentes. Um 1-omino é um quadrado unitário, e um N-omino é um (N − 1)-omino com pelo menos um dos seus lados ligados a um quadrado unitário. Os seis possíveis 3-ominos. Some of the 19 possible 4-omnis. A caixa tem uma superfície retangular e paredes verticais; cada um dos quadrados de um sistema Cartesiano de coordenadas em grade colocado na superfície da caixa possui uma pilha não negativa de cubos unitários. Os cubos não podem ser movidos. Skyrk irá alinhar cada omino com os quadrados da grade, e soltá-lo na caixa. O omino irá cair até tocar um cubo ou o fundo. Não é permitido que Skyrk reflita ou rotacione o omino, e ele deve situar-se completamente dentro dos limites da caixa. O número de pontos obtidos após soltá-lo é a distância entre o omino e o topo da caixa. Após soltá-lo, Skyrk anota o número de pontos, remove o omino, e solta o próximo. A pontuação final é a soma de todos os pontos. O tempo está passando e a contagem regressiva na bomba diz 5:00 (cinco horas!). Você consegue descobrir a pontuação máxima que Skyrk pode obter para desarmar a bomba e salvar o destino do planeta das mãos do vil Mago?"
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1437",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma única linha da saída, indicando a direção para a qual o recruta deve ter sua face voltada após executar a série de comandos, considerando que no início o recruta tem a face voltada para o norte. A linha deve conter uma letra entre 'N', 'L', 'S' e 'O', representando respectivamente as direções norte, leste, sul e oeste. A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N que indica o número de comandos emitidos pelo sargento (1 ≤ N ≤ 1000)). A segunda linha contém N caracteres, descrevendo a série de comandos emitidos pelo sargento. Cada comando é representado por uma letra: 'E' (para \"Esquerda, volver!\") e 'D' (para \"direita, volver!\"). O final da entrada é indicado por N = 0. A entrada deve ser lida da entrada padrão.",
        "titulo": "Esquerda, Volver!",
        "descricao": "Este ano o sargento está tendo mais trabalho do que de costume para treinar os recrutas. Um deles é muito atrapalhado, e de vez em quando faz tudo errado – por exemplo, ao invés de virar à direita quando comandado, vira à esquerda, causando grande confusão no batalhão. O sargento tem fama de durão e não vai deixar o recruta em paz enquanto este não aprender a executar corretamente os comandos. No sábado à tarde, enquanto todos os outros recrutas estão de folga, ele obrigou o recruta a fazer um treinamento extra. Com o recruta marchando parado no mesmo lugar, o sargento emitiu uma série de comandos \"Esquerda, Volver!\" e \"Direita, Volver!\". A cada comando, o recruta deve girar sobre o mesmo ponto e dar um quarto de volta na direção correspondente ao comando. Por exemplo, se o recruta está inicialmente com o rosto voltado para a direção norte, após um comando de \"esquerda volver!\" ele deve ficar com o rosto voltado para a direção oeste. Se o recruta está inicialmente com o rosto voltado para o leste, após um comando \"Direita, volver!\" ele deve ter o rosto voltado para o sul. No entanto, durante o treinamento, em que o recruta tinha inicialmente o rosto voltado para o norte, o sargento emitiu uma série tão extensa de comandos, e tão rapidamente, que até ele ficou confuso, e não sabe mais para qual direção o recruta deve ter seu rosto voltado após executar todos os comandos. Você pode ajudar o sargento?"
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1953",
        "saida": "Seu programa deve imprimir 3 linhas contendo o numero de alunos que são de EPR, EHD, e INTRUSOS no formato: “sigla: quantidade”. ( Ver exemplo de saída ).",
        "entrada": "A primeira linha da entrada um inteiro n ( 1<=n<=100000 ) que indicam o numero de alunos na sala. As n linhas seguintes contem o numero de matricula e a sigla do curso. A leitura do programa deve acabar com fim de arquivo.",
        "titulo": "Roberto e a Sala Desenfreada",
        "descricao": "Roberto precisava coletar o numero de matricula dos alunos da sua turma de engenharia de produção e engenharia hídrica para a chamada. Logo, ele teve a excelente ideia de falar para todos os seus alunos gritarem os números de chamada para seus assistentes anotarem. Obviamente, isso não deu certo, e logo a sala entrou em colapso. Todos queriam falar ao mesmo tempo, e com a competição para ver quem conseguia ir embora mais rápido, houve um principio de tumulto, com cadeiras sendo jogadas nos colegas, puxões de cabelo, e socos na cara. Júnior como é um cara pacífico, está tentando atender todos rapidamente. Porem, como são muitas requisições, está ficando sobrecarregado. Ele então, lembrou que você sabe programar e decidiu dar uma ideia. Todos os alunos da sala deverão dar os nomes de matricula e a sigla do curso em uma folha, e a chamada sera computada posteriormente. Ele precisa saber quantos alunos de cada curso compareceram. Ele tem os dados, mas infelizmente, não tem a proeficiencia necessária em programação para “codar” isso. Você poderia ajuda-lo a saber, dada uma lista de alunos, quantos são de EPR, quantos são de EHD e quantos são intrusos?"
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1508",
        "saida": "Para cada caso de teste imprima uma linha com o número de diferentes subconjuntos não vazios de pontos que podem ser mortos.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste é descrito utilizando várias linhas. A primeira linha contém dois inteiros N e W (1 <= N <= 103, 1 <= W <= 109) que representam respectivamente o número de pontos e a langura máxima do raio laser. Cada uma das próximas N linhas descreve as coordenadas xi, yi do n-ésimo ponto (0 <= xi, yi <= 109). O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Raio Laser",
        "descricao": "Certa vez haviam N pontos em um plano com coordenadas inteiras distintas. Eles costumavam viver em perfeita paz, até que, um dispositivo a laser selvagem e sobrenatural apareceu. Esta enorme máquina emite um poderoso raio laser que irá matar todos os pontos em seu alcance. Mais especificamente, o alcance do raio é um retângulo com altura infinita mas de largura limitada, que pode assumir qualquer valor positivo inferior ou igual a W. Felizmente, o feixe pode ser disparado apenas verticalmente ou horizontalmente (isto é, paralelo ao eixo Ox ou Oy). Qualquer ponto localizado dentro da área do feixe (incluindo suas bordas) é imediatamente queimado. Os pobres pontos estão preocupados com quais deles serão mortos. Calcule o número de diferentes subconjuntos não vazios de pontos que o laser pode queimar ao disparar um único feixe. Dois subconjuntos são consideradas diferentes se houver um ponto pertencente a um deles, mas não a outro."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1578",
        "saida": "Imprima o “quadrado” de cada matriz da entrada, conforme o que Atrapalhilton entende pelo “quadrado” de uma matriz. Antes de imprimir cada “quadrado”, imprima a linha “Quadrado da matriz #x:” (sem as aspas), para ajudar Atrapalhilton a não se perder na hora de passar a limpo os resultados para o caderno. Comece a contagem em x = 4, afinal, Atrapalhilton já calculou os “quadrados” das 3 primeiras matrizes. Adicione tantos espaços em branco à esquerda de cada valor quanto necessários para que os valores de uma mesma coluna fiquem todos alinhados à direita, de modo que haja ao menos um valor em cada coluna não precedido por espaços em branco além do espaço em branco obrigatório que separa colunas consecutivas. Imprima também uma linha em branco entre “quadrados” de matrizes consecutivas.",
        "entrada": "A primeira linha da entrada é constituída por um único inteiro positivo N (N ≤ 100), o qual designa o número de matrizes cujos “quadrados” ainda não foram calculados. Em seguida ocorre a descrição de cada uma das N matrizes. A primeira linha da descrição de uma matriz consiste de um único inteiro M (1 ≤ M ≤ 20), o qual representa o número de linhas e o número de colunas da matriz. Seguem, então, M linhas, cada uma com M inteiros aij (0 ≤ aij ≤ 232-1, 1 ≤ i,j ≤ M), os quais correspondem às células da matriz, de modo que valores consecutivos numa mesma linha são separados por um espaço em branco.",
        "titulo": "Matriz de Quadrados",
        "descricao": "Atrapalhilton é um estudante muito dedicado, embora muito, muito atrapalhado. Na semana passada, seu professor de Matemática, o Sr. Sabetudilton, recomendou à classe uma lista de exercícios sobre matrizes. Atrapalhilton, aplicado como é, dediciu fazer os exercícios no mesmo dia, tão logo chegou em casa, embora apenas após assistir o episódio vespertino de A Galinha Listradinha, seu programa de TV favorito. O enunciado de um dos exercícios dizia: Calcule o quadrado de cada uma das matrizes abaixo… No entanto, Atrapalhilton fez uma baita duma confusão. Para ele, o quadrado de uma matriz quadrada A é a matriz dos quadrados dos valores da matriz A. Por exemplo, o quadrado da matriz 1 3 5 7 para ele não é 16 24 40 64 mas 1 9 25 49 Atrapalhilton conseguiu calcular o “quadrado” da primeira matriz, da segunda, da terceira e percebeu que já estava muito tarde, que não ia conseguir terminar de calcular os “quadrados” de todas as N matrizes da lista. Então, decidiu escrever um programa que fizesse o serviço para ele."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1089",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo apenas um inteiro, o número de picos existentes no loop musical de Fernandinha.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N, representando o número de amostras no loop musical de Fernandinha (2 ≤ N ≤ 104). A segunda linha contém N inteiros Hi, separados por espaços, representando a sequência de magnitudes das amostras(-104 ≤ Hi ≤ 104 para 1 ≤ i ≤ N, H1 ≠ HN e Hi ≠ Hi+1 para 1 ≤ i < N). Note que H1 segue HN quando o loop é reproduzido. O final da entrada é indicado por uma linha que contém apenas o número zero.",
        "titulo": "Loop Musical",
        "descricao": "Um loop musical é um trecho de música que foi composto para repetir continuamente (ou seja, o trecho inicia novamente toda vez que chega ao final), sem que se note descontinuidade. Loops são muito usados na sonorização de jogos, especialmente jogos casuais pela internet. Loops podem ser digitalizados por exemplo utilizando PCM. PCM, do inglês Pulse Code Modulation, é uma técnica para representação de sinais analógicos, muito utilizada em áudio digital. Nessa técnica, a magnitude do sinal é amostrada a intervalos regulares de tempo, e os valores amostrados são armazenados em sequência. Para reproduzir a forma de onda amostrada, o processo é invertido (demodulação). Fernandinha trabalha para uma empresa que desenvolve jogos e compôs um bonito loopmusical, codificando-o em PCM. Analisando a forma de onda do seu loop em um software de edição de áudio, Fernandinha ficou curiosa ao notar a quantidade de “picos” existentes. Um pico em uma forma de onda é um valor de uma amostra que representa um máximo ou mínimo local, ou seja, um ponto de inflexão da forma de onda. A figura abaixo ilustra (a) um exemplo de forma de onda e (b) o loop formado com essa forma de onda, contendo 48 picos. Fernandinha é uma amiga muito querida e pediu sua ajuda para determinar quantos picos existem no seu loop musical."
    },
    {
        "nivel": "9",
        "assunto": "2",
        "numero": "1130",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha contendo um único caractere: ‘S’ caso Maria possua uma estratégia vencedora e ‘N’ caso contrário.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de caso de teste contém um inteiro N, indicando o tamanho do tabuleiro (3 ≤ N ≤ 104). A linha seguinte contém uma sequência de N caracteres indicando quais casas do tabuleiro já foram ocupadas: um ‘.’ indica que a casa correspondente está vazia, enquanto um ‘X’ indica que a casa já teve uma cruz desenhada sobre ela. A entrada nunca contém três ‘X’ consecutivos. O ultimo caso de teste é seguido por uma linha que contém um único número zero.",
        "titulo": "Jogo da Velha",
        "descricao": "O jogo da velha é um dos jogos mais antigos da humanidade; os primeiros registros dele são do século I antes de Cristo, no Império Romano. João e Maria jogam bastante jogo da velha, mas depois de algum tempo eles decidiram jogar uma variante do jogo da velha tradicional, o jogo da velha 1-D. O jogo da velha 1-D é um jogo disputado por dois jogadores em um tabuleiro 1 × N; inicialmente, todas as casas do tabuleiro estão vazias. Os jogadores alternam-se desenhando uma cruz sobre uma casa vazia. O primeiro jogador a completar uma sequência de três ou mais cruzes em casas consecutivas ganha o jogo. Maria logo percebeu que, dependendo da situação do jogo, sendo sua vez de jogar, ela pode sempre garantir a vitória, independente das jogadas de João. Isto é relativamente fácil para tabuleiros menores, mas para tabuleiros maiores, mesmo após várias jogadas, esta tarefa é mais difícil; por isso, ela pediu que você escrevesse um programa que, dada a situação do tabuleiro, decide se ela tem uma estratégia vencedora."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1383",
        "saida": "Para cada instância seu programa deverá imprimir uma linha dizendo \"Instancia k\", onde k é o número da instância atual. Na segunda linha, seu programa deverá imprimir \"SIM\" se a matriz for a solução de um problema de Sudoku, e \"NAO\" caso contrário. Imprima uma linha em branco após cada instância.",
        "entrada": "São dadas várias instâncias. O primeiro dado é o número n > 0 de matrizes na entrada. Nas linhas seguintes são dadas as n matrizes. Cada matriz é dada em 9 linhas, em que cada linha contém 9 números inteiros.",
        "titulo": "Sudoku",
        "descricao": "O jogo de Sudoku espalhou-se rapidamente por todo o mundo, tornando-se hoje o passatempo mais popular em todo o planeta. Muitas pessoas, entretanto, preenchem a matriz de forma incorreta, desrespeitando as restrições do jogo. Sua tarefa neste problema é escrever um programa que verifica se uma matriz preenchida é ou não uma solução para o problema. A matriz do jogo é uma matriz de inteiros 9 x 9 . Para ser uma solução do problema, cada linha e coluna deve conter todos os números de 1 a 9. Além disso, se dividirmos a matriz em 9 regiões 3 x 3, cada uma destas regiões também deve conter os números de 1 a 9. O exemplo abaixo mostra uma matriz que é uma solução do problema."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "2009",
        "saida": "A saída deve conter uma linha com Q números inteiros, de tal modo que o número inteiro de i-th representa o número de diferentes listas apenas um pouco ordenadas classificadas de n inteiros positivos não superiores a Ki (para i = 1, 2,..., Q). Uma vez que este número pode ser muito grande, o restante de saída dividindo-o por 109 + 7.",
        "entrada": "A primeira linha contém dois inteiros N e Q, representando respectivamente o número de elementos nas listas apenas um pouco ordenadas e o número de consultas para responder (1 ≤ N ≤ 5000 e 1 ≤ Q ≤ 1000). A segunda linha contém Q inteiros K1, K2,. . . , KQ, indicando que as listas que você deve contar na consulta i-th não pode conter valores maiores do que Ki i (1 ≤ Ki ≤ 109 for i = 1, 2, . . . , Q).",
        "titulo": "Apenas um Pouco Classificadas",
        "descricao": "Jurgen Guntherswarchzhaffenstrassen é conhecido por sua forma virtuosa de tocar guitarra e os métodos crueis de ensino que emprega com seus alunos. O que a maioria das pessoas ignora sobre ele é que ele também é um fã de números. Ultimamente Jurgen vem estudando listas ordenadas, mas ele está ficando entediado. Ele acha que estas listas são muito previsível e não muito abundantes, então ele decidiu apimentar as coisas um pouco. Jurgen diz que uma lista l de N não necessariamente de diferentes inteiros positivos é apenas um pouco sortido se, e somente se, para cada inteiro positivo x > 1 que ocorrido em l, o número x - 1 aparece pelo menos uma vez antes da última ocorrência de x em l. Por exemplo: • [2, 3, 1, 2] é um pouco sortida porque um 1 aparece antes do último 2 e um 2 aparece antes do último 3; • [2, 3, 4, 3, 2, 1, 3, 4] não é apenas um pouco ordenada porque cada 1 aparece depois do último 2; • [1, 1, 3, 1, 3, 3, 1, 3] não é apenas um pouco classificadas porque nenhum 2 aparece antes do último 3 (e o 2 não aparece em nenhum momento nesta lista). Jurgen está tentando descobrir quantas listas um poucos ordenadas, diferentes de N inteiros positivos e não superiores a K, existem. Duas listas são diferentes se, e apenas se, houver pelo menos uma posição em que as listas têm elementos distintos. Você pode ajudar Jurgen na contagem do número de listas diferentes?"
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1593",
        "saida": "Imprima o número de 1’s na representação binária para cada caso em uma única linha.",
        "entrada": "Na primeira linha terá um inteiro T (T = 100) indicando o número de casos de teste. Para cada caso, haverá apenas uma linha com o número I (1 ≤ I < 1018* ou 1 ≤ I < 101000**).O número da entrada não começará com um ou mais zeros. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes.",
        "titulo": "Função Binária",
        "descricao": "Definimos a paridade de um inteiro como a soma dos seus bits em sua representação binária computada módulo dois. Como exemplo, o número 2110 = 101012 possui três 1’s na sua representação binária e portanto ele teria paridade ímpar. Neste problema, você deverá calcular o número de bits 1 em um inteiro I dado, ou seja, calcular a quantidade de 1’s na representação binária dele."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1845",
        "saida": "Imfrima o tefto da entrada confertido fara a Língua do Dinofauro.",
        "entrada": "A entrada é comfofta for fáriaf linhaf de tefto. Não famof refelar o número fofitifo de linhaf nem tamfouco o limite de caracteref for linha de tefto.",
        "titulo": "Efílogo",
        "descricao": "E aí, goftou da nofa tarde funtof? Fem melhor que ir ao foológico, não é mefmo? A 4ạ Maratona de Frogramação da UF eftá infelifmente acafando, maf eferamof que efte fim fignifique fara focê, quem fafe, um nofo começo: um começo de uma carreira de muito fucefo! E a fórmula do fucefo não é muito difícil: faça aquilo que focê realmente gofta de fafer, algo com que focê fe difirta e fe mantenha motifado. Afinal, o que é fucefo fenão fentir-fe realifado e felif configo mefmo? Fara encerrar a comfetição, efcrefa maif um frograminha, uma faideira. Efcrefa um frograma que conferte teftof fara a Língua do Dinofauro. Na Língua do Dinofauro, frimeiramente trocamof algumaf confoantef fela letra F (minúfcula ou maiúfcula quando for o cafo) e defoif eliminamof qualquer ocorrência de refetiçõef confecutifaf da letra F. Não famof difer quaif fão efaf confoantef. Focê defe adifinhá-laf (ou dedufi-laf)."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1542",
        "saida": "Para cada caso de teste deverá ser impresso a quantidade de páginas do livro. (Utilize o plural corretamente e não use acentos). Este número deverá ser um inteiro, o qual representa a quantidade de página. Este valor deverá ser truncado caso necessário.",
        "entrada": "A entrada é composta de vários casos de testes. Cada caso de teste é composto de três números Q (0 < Q < 20), D (0 < D < 20) e P (0 < P < 20) separados por um espaço. Sendo que Q é a quantidade de páginas lidas por dia. D é o número de dias que você adiantaria a leitura caso estivesse lendo a quantidade de páginas informada pelo número P. Um único valor zero indica o fim da entrada.",
        "titulo": "Lendo Livros",
        "descricao": "Você começou a competir com seu amigo para ver quem consegue ler mais livros em menos tempo. Seu amigo lia muito mais que você, até o dia que você percebeu que ele lia somente livros muito finos. Então você resolveu contar as páginas dos livros, aumentando também a quantidade de páginas lidas por dia. Agora você lê 5 páginas por dia e termina 16 dias antes do que se estivesse lendo 3 páginas por dia. Neste cenário, quantas páginas tem o livro?"
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1710",
        "saida": "Seu programa deve produzir uma única linha contendo apenas um número inteiro, o número de planetas na região que contém o maior número de planetas.",
        "entrada": "A primeira linha da entrada contém dois inteiros M (1 ≤ M ≤ 500) e N (1 ≤ N ≤ 10000), indicando respectivamente o número de planos e número de planetas. As M linhas seguintes contêm cada uma quatro inteiros A, B, C e D (−10000 ≤ A, B, C, D ≤ 10000), os coeficientes e o termo livre da equação Ax + By + Cz = D que define cada um dos planos. A seguir, cada uma das N linhas seguintes contém três inteiros X, Y e Z (−10000 ≤ X, Y, Z ≤ 10000), indicando a posição (X, Y, Z) de um planeta.",
        "titulo": "Confederação",
        "descricao": "A Confederação Galática resolveu fazer uma reforma administrativa, para melhor distribuir os recursos de sua frota. Para isso, ela dividiu todo o espaço em regiões. Para definir as regiões, inicialmente um conjunto de planos infinitos foi especificado, e as regiões foram definidas pelos cortes desses planos. Note que algumas regiões são ilimitadas, mas que também podem existir regiões limitadas. O conjunto de planos foi escolhido de tal maneira que nenhum dos planos intercepta a órbita de um planeta, e portanto cada planeta transita por apenas uma região durante sua órbita (ou seja, um planeta dentro de uma região nunca cruzará um plano para outra região). Sua tarefa consiste em determinar, dadas as equações dos planos e as posições dos planetas, quantos planetas existem na região com o maior número de planetas (em outras palavras, qual o número máximo de planetas dentro de uma região)."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1217",
        "saida": "Para cada caso de teste, imprima quantos kg de frutas dona Parcinova comprou em cada dia, com mensagem correspondente em inglês, conforme exemplo abaixo. No final, apresente o consumo médio em kg por dia com 2 casas decimais seguido da mensagem correspondente e a média de gasto por dia com as frutas, também em inglês e com mensagem correspondente, conforme o exemplo abaixo. Obs.: Todas as letras da saída devem ser impressas em minúsculas, com exceção do \"R\" de \"R$\"",
        "entrada": "A primeira linha de entrada contém um inteiro N (1 ≤ N ≤ 365) que indica o número de casos de teste que vem a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um valor de ponto flutuante V (0.10 ≤ V ≤ 20.00) indicando o valor gasto no dia e a segunda linha contém o nome de cada uma das frutas que dona Parcinova comprou.",
        "titulo": "Getline Two - Frutas",
        "descricao": "Dona Parcinova, mãe de Mangojata, pediu a ela que ajudasse a calcular o consumo de frutas da casa e a quantidade gasta por dia nestas frutas. Mangojata agora deve então fazer um programa a partir de uma tabela que sua mãe estava utilizando para anotações há quase um ano. Nesta tabela, dona Parcinova anotou a quantidade de dias e depois o valor gasto cada dia e as frutas compradas naquele dia, sempre na quantidade de um KG por tipo de fruta."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2051",
        "saida": "Para cada caso, você deverá apresentar a mensagem “Mapa de Karnaugh”, seguido pelo mesmo conforme o exemplo abaixo, após apresentar o mapa você deverá identificar se é \"Tautologia\",\"Contradicao\" ou \"Contingencia\", uma linha em branco deverá separar os casos de teste, cuidado com os espaços, os valores no mapa deverão ser alinhados com o primeiro dígito da coluna.",
        "entrada": "A primeira linha do arquivo de entrada contém um inteiro N (0 <= N <= 50) que indica o número de casos de testes, na primeira linha do caso de teste contém um inteiro V [2, 3, 4] que indica a quantidade de variáveis que serão utilizadas, as próximas 2^V linhas conterão a tabela verdade.",
        "titulo": "Mapas de Karnaugh I",
        "descricao": "Mapa de Karnaugh é uma tabela montada para facilitar o processo de minimização das expressões lógicas. Eles permitem simplificações com 2, 3, 4 ou mais variáveis, nesse problema utilizaremos no máximo expressões com 4 variáveis. Sua tarefa é simples, dado a tabela verdade você deverá  imprimir o respectivo Mapa de Karnaugh e dizer se a expressão é uma \"Tautologia\", uma \"Contradicao\" ou uma \"Contingencia\"."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1573",
        "saida": "Para cada entrada, você deve imprimir um único inteiro que deve ser truncado,representando o tamanho da aresta do chocolate em forma de cubo.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiros A, B e C (1 ≤ A, B, C ≤ 103), indicando os tamanhos das arestas do chocolate em formato de paralelepípedo. A entrada termina quando A = B = C = 0, e não deve ser processado.",
        "titulo": "Fábrica de Chocolate",
        "descricao": "Uma fábrica produz barras de chocolates no formato de paralelepípedos e de cubos, com o mesmo volume. Porém, como a máquina que produz os chocolates em formato de cubo está apresentando alguns problemas, os donos da fábrica pediram a sua ajuda para resolver este problema. Sua tarefa é, dadas as dimensões das arestas do chocolate em formato de paralelepípedo, dizer qual é o tamanho que a aresta em formato de cubo deve ter."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2008",
        "saida": "Para cada caso de teste na entrada, a saída deve conter dois números inteiros representando o número máximo de congressistas que podem pertencer a DSP usando o orçamento dado e, da mesma forma, o número máximo dos congressistas que pode pertencer a PPP usando o orçamento dado.",
        "entrada": "A entrada contém vários casos de teste; cada caso de teste é formatado como segue. A primeira linha contém quatro inteiros D, P, R e B, que representam, respectivamente, o número de congressistas que, inicialmente, pertencem a DSP (1 ≤ D ≤ 100), o número de congressistas que, inicialmente, pertencem a PPP (1 ≤ P ≤ 100), o número de rivalidades entre os membros do congresso (1 ≤ R ≤ 2,000), e o orçamento do jornalista expresso em Nlogmoney (1 ≤ B ≤ 104). Os membros do DSP são identificados com números inteiros de 1 a distintas D, enquanto os membros do PPP são identificados com inteiros distintos de 1 a P. A segunda linha contém D inteiros S1, S2, ..., SD, indicando que i membro de DSP mudará de partido se oferecido Si Nlogmoney (1 ≤ Si ≤ 100 para i = 1, 2, ..., D). A terceira linha contém inteiros P T1, T2, ..., TP, indicando que j membros de PPP vão mudar de partido, se for oferecido Tj Nlogmoney (1 ≤ Tj ≤ 100 para j = 1, 2, ..., P). Cada uma das próximas R linhas descreve uma rivalidade com dois inteiros X e Y, onde X representa o membro de DSP e Y o de PPP que são rivais (1 ≤ X ≤ D e 1 ≤ Y ≤ P).",
        "titulo": "Expondo a Corrupção",
        "descricao": "O Comitê Central em Nlogônia é formado por muitos membros do congresso. Como o sistema político é dicotômico, cada membro do congresso pertence a um dos dois partidos: o Partido Sério Mortal e o Partido Festa! Festa!. Por tradição, chamam-os de DSP e PPP, respectivamente. Edward é um jornalista investigativo. Ele descobriu que os congressistas são corruptos e vai mudar de partido, se for oferecido à ele uma determinada quantidade de Nlogmoney. Cada membro do Congresso tem o seu preço específico, mas todos eles têm um preço. Como de costume na política, existem rivalidades entre alguns pares de congressistas. Rivais nunca aceitariam estar no mesmo partido. Edward tem um orçamento e quer usá-lo para fazer alguns congressistas mudarem de partido e assim coletar provas irrefutáveis ​​para sua investigação. Ao fazer isso, ele tem que respeitar rivalidades: depois que todos os políticos envolvidos aceitarem sua proposta, os rivais devem ser colocados em diferentes partidos. Edward quer causar o máximo impacto. Você pode ajudá-lo a descobrir o número máximo de congressistas que podem pertencer a DSP se ele usar no máximo todo o seu orçamento para esse objetivo? Da mesma forma, o que é o número máximo de membros do Congresso que pode pertencer a PPP sob o mesmo restrições?"
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1533",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, representando o indice do assassino, de acordo com o método citado.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (2 ≤ N ≤ 1000), representando o número de suspeitos. Em seguida haverá N inteiros distintos, onde o i-ésimo inteiro, para todo 1 ≤ i ≤ N, representa o quão suspeita a i-ésima pessoa é, de acordo com a classificação dada por John Watson. Seja V o valor do i-ésimo inteiro, 1 ≤ V ≤ 10000. O último caso de teste é indicado quando N = 0, o qual não deverá ser processado.",
        "titulo": "Detetive Watson",
        "descricao": "John Watson, mesmo após anos trabalhando ao lado de Sherlock Holmes, nunca conseguiu entender como ele consegue descobrir quem é o assassino com tanta facilidade. Em uma certa noite, porém, Sherlock bebeu mais do que devia e acabou contando o segredo a John. “Elementar, meu caro Watson”, disse Sherlock Holmes. “Nunca é o mais suspeito, mas sim o segundo mais suspeito”. Após descobrir o segredo, John decidiu resolver um crime por conta própria, só para testar se aquilo fazia sentido ou se era apenas conversa de bêbado. Dada uma lista com N inteiros, representando o quanto cada pessoa é suspeita, ajude John Watson a decidir quem é o assassino, de acordo com o método citado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1267",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir uma linha de saída, contendo ou a palavra ‘yes’, no caso de existir existe pelo menos um alumnus/alumna que participou de todas as jantares, ou a palavra ‘no’ caso contrário. A saída deve ser escrita na saída padrão. Alumna: um ex-aluno do sexo feminino de uma escola particular, faculdade ou universidade. Alumnus: um ex-aluno do sexo masculino de uma escola particular, faculdade ou universidade. Alumni: os ex-alunos de ambos os sexos de uma determinada escola, faculdade ou universidade.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e D, respectivamente, indicando o número de Alumni e o número de jantares (dinners em inglês) organizados (1 ≤ N ≤ 100 e 1 ≤ D ≤ 500). Alumni são identificados por inteiros de 1 a N. Cada uma das próximas D linhas descreve os participantes de um jantar, e contém N inteiros Xi indicando se o alumnus/alumna participará (Xi = 1) ou não (Xi = 0) daquele jantar. O fim da entrada é determinado por N = D = 0.",
        "titulo": "Biblioteca Pascal",
        "descricao": "A Universidade Pascal é uma das mais antigas do país e precisa renovar seu edifício da biblioteca, porque depois de todos esses séculos o edifício começou a mostrar os efeitos de suportar o peso da enorme quantidade de livros que abriga. Para ajudar na renovação, a Associação de Antigos Alunos da Universidade decidiu organizar uma série de jantares para angariação de fundos, para os quais todos os alunos foram convidados. Estes eventos provaram ser um enorme sucesso e vários foram organizados durante o ano passado. (Uma das razões para o sucesso desta iniciativa parece ser o fato de que os alunos que passaram pelo sistema de ensino Pascal tem boas lembranças daquele tempo e gostariam de ver a Biblioteca da Universidade renovada.) Os organizadores mantiveram uma planilha indicando quais alunos participaram de cada jantar. Agora eles querem sua ajuda para determinar se algum aluno ou aluna participou de todos os jantares."
    },
    {
        "nivel": "8",
        "assunto": "2",
        "numero": "1092",
        "saida": "Para cada um dos casos de teste da entrada seu programa deve imprimir uma única linha, contendo o número de elementos da maior submatriz que, quando linearizada, resulta em uma seqüência crescente.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N e M indicando as dimensões da matriz (1 ≤ N, M ≤ 600). Cada uma das N linhas seguintes contém M inteiros, separados por um espaço, descrevendo os elementos da matriz. O elemento Xi,j da matriz é o j-ésimo inteiro da i-ésima linha da entrada(-106 ≤ Xi,j ≤ 106). O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.",
        "titulo": "Maior Subseqüência Crescente",
        "descricao": "Determinar a subseqüência (contígua) crescente de maior comprimento em uma lista de números é um problema já clássico em competições de programação. Este é o problema que você deve resolver aqui, mas para não deixar você bocejando de tédio enquanto o soluciona, introduzimos uma pequena modificação: a lista de números é dada na forma de uma matriz bidimensional e a seqüência de comprimento máximo está “embutida” em uma submatriz da matriz original. Vamos definir mais precisamente o problema. A linearização de uma matriz bidimensional é a justaposição de suas linhas, da primeira à última. Uma submatriz é uma região retangular (de lados paralelos aos da matriz) de uma matriz. O tamanho de uma submatriz é seu número de elementos. Você deve escrever um programa que, dada uma matriz de números inteiros, determine a maior submatriz que, quando linearizada, resulta em uma seqüência crescente. A figura abaixo mostra alguns exemplos de submatrizes de tamanho máximo que contêm subseqüências crescentes. Note que mais de uma submatriz que contém uma subseqüência de comprimento máximo pode estar presente em uma mesma matriz. Note ainda que numa seqüência crescente não pode haver elementos repetidos: 22, 31, 33 é uma seqüência crescente, ao passo que 22, 31, 31, 33 não é."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1407",
        "saida": "Para cada caso de teste, seu programa deve escrever uma linha de saída, contendo o conjunto de números que foram sorteados o menor número de vezes. Este conjunto deve ser impresso como uma lista em ordem crescente. Deixe um espaço em branco entre dois números consecutivos na lista.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém três inteiros N, C e K que indicam, respectivamente, o número de sorteios que já aconteceram (1 ≤ N ≤ 10000), quantos números compõem uma aposta (1 ≤ C ≤ 10) e o valor máximo que pode ser escolhido numa aposta (C < K ≤ 100). Cada uma das próximas N linhas contém C inteiros distintos Xi indicando os números sorteados em cada concurso prévio (1 ≤ Xi ≤ K, para 1 ≤ i ≤ C). O fim da entrada é indicado por N = C = K = 0.",
        "titulo": "Loteria de Fim de Semana",
        "descricao": "Algumas pessoas são contra loterias por motivos morais, alguns governos as proíbem, mas com a criação da internet essa popular forma de aposta, que teve início na China e ajudou a financiar a Grande Muralha, está prosperando. Mas as chances de se ganhar em uma loteria nacional são pequenas, por conta disso seus colegas de classe decidiram organizar uma loteria particular, cujo sorteio se realiza toda sexta-feira. A loteria é baseada em um estilo popular: um estudante que quer apostar escolhe C números distintos entre 1 e K e paga US$ 1.00 (note que as loterias tradicionais como a US National Lotto usam C=6 e K=49). Na sexta-feira durante o almoço, C números (também de 1 a K) são sorteados. O estudante que acertar a maior quantidade de números sorteados recebe o montante coletado nas apostas. O montante é dividido no caso de empates e acumulado para a próxima semana se ninguém acertar qualquer um dos números sorteados. Alguns de seus colegas não acreditam nas leis da probabilidade e pediram para você para escrever um programa que determine os números que foram sorteados o menor número de vezes considerando todos os sorteios prévios, para que eles possam apostar nesses números."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2004",
        "saida": "Imprima a maior quantidade de gramas de alimentos que Enisvaldo deve consumir.",
        "entrada": "A primeira linha da entrada contém um valor Q, que representa a quantidade de casos teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1000) que representa a quantidade de alimentos diferentes no supermercado. Cada uma das próximas N contém dois inteiros T (1 ≤ T ≤ 100) e P ( 1 ≤ P ≤ 1000 ), representando o tipo e o peso do alimento respectivamente.",
        "titulo": "Enisvaldo Com Fome",
        "descricao": "Enisvaldo sempre foi um menino muito magrinho. Ele sempre comia pouco, e só comia pão com ovo. Certo dia, ele foi ao médico e descobriu que possuía uma pedra no rim que precisou ser removida cirurgicamente. Ele decidiu que era hora de mudar sua alimentação, e comer corretamente. Ele foi ao nutricionista, que lhe deu várias dicas. É prejudicial a saúde consumir mais de 100g ou menos de 10g de um mesmo tipo de alimento por dia. Mas se não puder consumir a quantidade ideal, ele deve preferencialmente comer o máximo possível do tipo de alimento. O nutricionista também falou que é muito importante comer o máximo possível de tipos diferentes de alimentos. A mãe de Enisvaldo sempre fazia as compras pra ele, mas dessa vez ele quis fazer as compras para escolher os alimentos que ele vai comer nesse dia. Enisvaldo foi fazer as compras mas percebeu que possuía pouco dinheiro, então ele só poderia comprar um alimento de cada tipo, mas ele queria consumir a maior quantidade de alimentos possíveis. Como Enisvaldo não está conseguindo descobrir a quantidade em gramas de alimentos que ele conseguirá consumir, ajude-o. Dada uma lista de alimentos, cada alimento com seu respectivo tipo e peso, diga a quantidade máxima em gramas que Enisvaldo deve consumir. Lembrem-se, Enisvaldo pode comer apenas um alimento de cada tipo."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1802",
        "saida": "Imprima o valor da soma dos valores dos K conjuntos distintos de livros mais caros.",
        "entrada": "A entrada consiste em 6 linhas: A primeira linha contém um inteiro P (5 ≤ P ≤ 10), representando que Bino tem P tipos diferentes de livros de português, seguido por P inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de português.  A segunda linha contém um inteiro M (5 ≤ M ≤ 10), representando que Bino tem M tipos diferentes de livros de matemática, seguido por M inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de matemática. A terceira linha contém um inteiro F (5 ≤ F ≤ 10), representando que Bino tem F tipos diferentes de livros de física, seguido por F inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de física. A quarta linha contém um inteiro Q (5 ≤ Q ≤ 10), representando que Bino tem Q tipos diferentes de livros de química, seguido por Q inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de química. A quinta linha contém um inteiro B (5 ≤ B ≤ 10), representando que Bino tem B tipos diferentes de livros de biologia, seguido por B inteiros vi ( 1 ≤ vi ≤ 1000), representando os valores de cada livro de biologia. A sexta linha contém um inteiro K (1 ≤ K ≤ P*M*Q*F*B), representando a quantidade de conjuntos distintos de livros que o catálago de livros terá.",
        "titulo": "Catálogo de Livros",
        "descricao": "Bino está elaborando um catálogo de livros escolares. Ele está organizando um catálogo com conjuntos distintos de livros para vender em sua loja online. Cada conjunto de livros é formado por 5 livros, sendo um de cada matéria (português, matemática, física, química e biologia). Dois conjuntos de livros são considerados distintos se existe pelo menos um livro que está em um e não está no outro. Bino quer expor no site apenas os conjuntos distintos mais caros, e pediu sua ajuda. O valor de um conjunto é a soma dos valores de cada livro que está nele. Sua tarefa é informar qual a soma dos valores dos K conjuntos distintos de livros mais caros. Em caso de empate entre conjuntos mais caros, Bino escolhe qualquer um dos conjuntos empatados."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1715",
        "saida": "Seu programa deve produzir uma única linha, contendo um único inteiro, o número de jogadores que fizeram gols em todas as partidas.",
        "entrada": "A primeira linha da entrada contém dois inteiros N e M (1 ≤ N ≤ 100 e 1 ≤ M ≤ 100), indicando respectivamente o número de jogadores e o número de partidas. Cada uma das N linhas seguintes descreve o desempenho de um jogador: a i-ésima linha contém M inteiros Xj (0 ≤ X j ≤ 100, para 1 ≤ j ≤ M ), informando o número de gols do i-ésimo jogador em cada partida.",
        "titulo": "Handebol",
        "descricao": "Frustrado e desanimado com os resultados de sua equipe de futebol, o Super Brasileiro Clube (SBC) resolveu investir na equipe de handebol. Para melhor avaliar os atletas, os técnicos identificaram que seria útil analisar a regularidade dos jogadores. Especificamente, eles estão interessados em saber quantos jogadores fizeram gols em todas as partidas. Como o volume de dados é muito grande, eles gostariam de ter um programa de computador para realizar essa contagem."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1569",
        "saida": "Para cada jogador, imprima uma linha contendo um texto na forma: Position of player N is P., onde N será substituído pelo número do jogador e P será substituído pela posição final de cada jogador.",
        "entrada": "A primeira linha contém o número de casos de teste. O formato de cada caso de teste é o seguinte: A primeira linha de cada caso contém três inteiros positivos: o número a de jogadores, o número b de escorregadores e escadas, e o número c de jogadas do dado. Não haverão mais do que 1000000 jogadores e não mais do que 1000000 jogadas do dado. Cada uma das b linhas seguintes contêm dois inteiros especificando um escorregador ou uma escada. O primeiro inteiro indica a posição contendo o topo de um escorregador ou o início de uma escada. O segundo inteiro indica a posição contendo o fim do escorregador ou o topo da escada. As próximas c linhas contêm cada uma um inteiro dando o número exibido em cada jogada do dado.",
        "titulo": "Sobe e Desce",
        "descricao": "Sobe e Desce é um jogo de tabuleiro jogado em um grid de 10 por 10. As posições do grid são numerados de 1 a 100. Cada jogador possui uma peça colorida que o representa. No começo do jogo, cada jogador coloca sua peça na posíção 1 do tabuleiro. No turno de cada jogador, ele deve jogar um dado que lhe dará um número randômico entre 1 e 6. Depois de jogar o dado, o jogador deve avançar sua peça a quantidade de posições exibidas no dado. Se isso fizer com que sua peça ultrapasse a posição 100, o jogador deve deixá-la exatamente na posição 100 do tabuleiro. Depois de avançar, se a peça estiver em uma posição contendo o início de uma escada, a peça deve avançar para a posição contendo o topo da escada. Da mesma forma, se a peça estiver em uma posição contendo o topo de um escorregador, a peça deve ser movida para a posição contendo o fim do escorregador. Nenhuma posição contém mais de um final de qualquer escorregador ou escada. A posição 100 não contém o topo de um escorregador ou o início de uma escada. Um jogador vence quando sua peça alcança a posição 100. Nesse ponto, o jogo termina. Dada uma configuração de escorregadores e escadas sobre o tabuleiro e uma sequência de jogadas do dado, você precisa determinar as posições de todas as peças no tabuleiro. A sequência de jogadas do dado não precisa ser completa, ou seja, nenhum jogador precisa sair vitorioso (chegar até a posição 100). A sequência de jogadas do dado também pode continuar após o fim do jogo; neste caso, as jogadas após o jogo terminar devem ser ignoradas."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2012",
        "saida": "Saída de uma linha com um inteiro representando o número de faces do poliedro representados por o Height Map de entrada.",
        "entrada": "A primeira linha contém dois inteiros R e C, representando, respectivamente, o número de linhas e colunas do Height Map (1 ≤ R, C ≤ 100). Cada uma das linhas próximas R contém inteiros C; o número inteiro de ordem j na linha de ordem i é o valor Vi, J localizado na linha i-ésimo e j-ésimo coluna da matriz (1 ≤ Vi, J ≤ 109 para i = 1, 2,... , R e j = 1, 2,..., C).",
        "titulo": "Altura do Mapa",
        "descricao": "Um Height Map é uma matriz bidimensional de inteiros positivos que representa um poliedro. Cada célula da matriz com o valor V representa uma coluna em forma de paralelepípedo 1 × 1 × V que é colocada sobre um dos seus 1 × 1 virado para a célula. Isso cria um poliedro com um único rosto no fundo compo de todas as para baixo de frente para 1 × 1 rostos combinados, e possivelmente várias faces no topo e nos lados. Por exemplo, uma matriz de 2 x 2 com todos os valores iguais a 2 representa um cubo do lado 2. No entanto, se a pessoa dos valores é 1, o poliedro representado é o mesmo cubo com um canto cortado. Os seguintes imagem representa ambas as alternativas. Embora nem todos os poliedro pode ser representado desta forma, há vários que pode. Aqui estão um par de outros exemplos. Dado um Mapa, você está convidado a contar o número de faces do poliedro representados. Note-se que uma face é definido como um polígono simples que descreve um limite máximo de contígua e poliedro. Como você pode ver nos dois últimos exemplos, é possível que duas faces coplanares diferentes compartilhar um vértice comum, ou mesmo um lado, ou porções de um lado."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1780",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #X: Y\", onde X é o número do caso atual, iniciando em 1, e Y é a string “Challenge Accepted!”, se for possível organizar os robôs do jeito que Heitor quer, ou “Run for your life!”, caso contrário.",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 1000), o número de casos de teste. Cada caso começa com uma linha com um número N (1 ≤ N ≤ 100), o número de cores diferentes. Em seguida, há uma linha com N inteiros Ai (1 ≤ Ai ≤ 1000), o número de robôs com a i-ésima cor.",
        "titulo": "Formação de Robôs",
        "descricao": "A inventora de Heitor Ado, a doutora Ruína Balística, terminou a construção de um novo exército de robôs, e ele está pronto para ser enviado para conquistar o mundo. Os robôs possuem N cores diferentes, cada uma demonstrando o tipo de armamento que ele usa. Heitor mandou você, um de seus lacaios, organizá-los em formação, ou seja, em várias fileiras lado a lado, formando uma matriz. Heitor lhe deu certas regras para isso: Deve haver no mínimo duas fileiras Todas as fileiras devem ter a mesma quantidade de robôs Considerando as cores dos robôs, toda a formação deve ser simétrica em relação a um eixo central paralelo às fileiras As imagens acima mostram duas possíveis organizações dos robôs para diferentes quantidades de cores. As fileiras são dispostas verticalmente, e na primeira imagem o eixo simétrico paralelo às fileiras passa entre as duas fileiras do centro; já na segunda imagem, o eixo simétrico passa pelo centro da fileira central. Se você não for capaz de organizar os robôs da forma como Heitor pediu, a doutora Ruína irá dissecá-lo e transformá-lo em um deles. Dadas as quantidades de robôs de cada cor, decida se você pode cumprir a ordem dele ou se deve fugir enquanto ainda há tempo."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2178",
        "saida": "Imprima uma única linha contendo a quantidade mínima de voltas completas na lagoa que Bino deve realizar para capturar todas as aves.",
        "entrada": "A primeira linha contém dois inteiros A (1 < A ≤ 103) e P (1 < P ≤ 109), representando respectivamente o número de aves e o número de locais. Em seguida serão apresentadas A linhas. Cada linha iniciará com um inteiro Ni (1 ≤ Ni ≤ 103), representando a quantidade de locais que a ave i vai tentar fugir, em seguida, serão apresentados Ni inteiros, representando a lista de locais par onde a ave vai fugir.",
        "titulo": "Lagoa Azul",
        "descricao": "A Lagoa Azul é uma lagoa redonda, onde várias aves vivem tranquilamente (ou nem tanto). Bino, um garoto malino, quer capturar todas as aves que vivem na Lagoa Azul. Existem P locais na lagoa onde alguma ave pode ficar, como ilustrado na figura abaixo para P = 8. Bino sabe que as aves se cansam, e não querem sair da lagoa em nenhum momento. Cada ave pode realizar um determinado número de voos, após isso ficara cansada demais para voar novamente. Bino vai iniciar na posição 0, e seguir sempre na direção horária, até conseguir capturar todas as aves. Cada ave tem uma lista ordenada de locais para onde ela prefere fugir caso Bino chegue ao local onde ela está. Por exemplo, para o primeiro caso de teste, existe apenas uma ave que começa no local 1, quando Bino chega em 1, ela foge para 2, quando Bino chega em 2, ela foge para 3, e quando Bino chega em 3, ela já está cansada e é capturada. Sua tarefa é descobrir qual a quantidade mínima de voltas completas na lagoa que Bino deve realizar para capturar todas as aves. Em uma volta completa, Bino visita todos os locais, e retorna para a posição 0 (revisitando a posição 0). É garantido que nenhuma ave comece na posição 0, e também que nenhuma ave tente fugir para o mesmo local onde ela está."
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1359",
        "saida": "Para cada caso de teste seu programa deverá produzir apenas uma linha, contendo o valor total mínimo de taxas de divisão, como um número real com precisão de dois dígitos.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém um inteiro N e um número real F, indicando respectivamente, o número de terrenos (1 ≤ N ≤ 200) e o fator da taxa de divisão (com precisão de dois dígitos decimais, 0 < F ≤ 5.00). A segunda linha de um caso de teste contém N inteiros Xi, representando as áreas dos contínuos terrenos do desenvolvimento habitacional (0 < Xi ≤ 500, para 1 ≤ i ≤ N); além disso, Xk é vizinho de Xk+1 para 1 ≤ k ≤ N-1, e Xn é vizinho de X1. O final da entrada é indicado por N = F = 0.",
        "titulo": "Taxa de Divisão de Terreno",
        "descricao": "Companhia Internacional de Projetos Concretos (CIPC) é uma companhia especializada in construção de casas para o mercado de alta qualidade. CIPC está planejando um desenvolvimento habitacional para casas ao redor de um lago. As casas serão construídas em terrenos de diferentes tamanhos, mas todos os terrenos estão na costa do lago. Adicionalmente, cada terreno terá exatamente dois vizinhos no desenvolvimento habitacional: um à esquerda e um à direita. Figura 1: Plano de desenvolvimento indicando os tamanhos dos terrenos (em unidades de área) do novo desenvolvimento habitacional. CIPC possui os direitos do terreno em volta do lago e precisa dividir ele em terrenos de acordo com o plano do desenvolvimento habitacional. Porém, o Conselho do Condado tem curiosas regulamentações no que diz respeito a taxas de terrenos, pretendendo a desencorajar a criação de pequenos terrenos: um terreno pode apenas ser dividido usando uma sequência de divisões de terreno; a divisão de um terreno é uma operação que divide um pedaço de terreno em dois pedaços de terreno; e para cada divisão de terreno, uma taxa de divisão de terreno deve ser paga. Seja A a área do maior terreno resultante da divisão, o valor da taxa da divisão do terreno é A x F, onde F é o fator da taxa de divisão definido anualmente pelo Conselho do Condado. Note que graças a (2), para dividir um pedaço de terreno em N terrenos, N – 1 divisões de terreno deverão ser feitas e, portanto, N – 1 pagamentos deverão ser realizados ao Conselho do Condado. Por exemplo, considere a figura acima, se o fator da taxa de divisão for 2.5 e a primeira divisão do terreno separa o terreno de 500 unidades de área de outros terrenos, a taxa de divisão de terreno a ser paga por essa divisão será 2.5 x (300 + 200 + 100 + 100 + 100). Se a próxima divisão de terreno separar o terreno de 300 unidades junto com o terreno de 100 unidades, do conjunto de terrenos restantes, um adicional 2.5 x (300 + 100) deverá ser pago em taxa, e por ai vai. Note também que algumas divisões de terrenos não são possíveis, graças a (2). Por exemplo, após a primeira divisão de terreno mencionada acima, não é possível realizar uma divisão de terreno para separar o terreno de 300 unidades com o terreno de 200 unidades dos três terrenos restantes, porque mais de duas partes resultariam de tal operação. Dada a área de todos os terrenos em volta ao lago e o valor atual do fator de taxa de divisão, você deverá escrever um programa que determine a menor taxa de divisão que deveria ser paga para dividir o terreno de acordo com o plano de desenvolvimento habitacional."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1932",
        "saida": "Seu programa deve produzir uma única linha com um inteiro representando o lucro máximo do investidor, em reais.",
        "entrada": "A primeira linha contém dois inteiros, N e C (1 ≤ N ≤ 2 × 105 e 0 ≤ C ≤ 30). A segunda linha contém as N cotações P1, P2, . . . , PN , dos dias 1, 2, . . . , N, respectivamente. Cada cotação Pi satisfaz as desigualdades 1 ≤ Pi ≤ 1000.",
        "titulo": "Bolsa de Valores",
        "descricao": "Um investidor principiante deseja aprender a investir na bolsa de valores. Como ele não tem experiência, selecionou uma única empresa, e acompanhou os valores diários das ações dessa empresa, durante N dias. Ficou curioso quanto teria ganhado se tivesse investido nesse período em que acompanhou os valores. Na verdade, o investidor é milionário e tem muito dinheiro, suficiente para comprar qualquer quantidade de ações da empresa. Entretanto, como é um investidor cuidadoso, decidiu que nunca teria mais do que uma ação da empresa. Como sempre há intermediários, a corretora de valores cobra uma taxa fixa de C reais a cada compra de uma ação da empresa. Você deve calcular qual o lucro máximo que o investidor poderia ter auferido, investindo durante alguns dos N dias, podendo inclusive decidir não investir."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1087",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo um número inteiro, indicando o menor número de movimentos necessários para a dama chegar em sua casa de destino.",
        "entrada": "A entrada contém vários casos de teste. A primeira e única linha de cada caso de teste contém quatro inteiros X1, Y1, X2 e Y2 (1 ≤ X1, Y1, X2, Y2 ≤ 8). A dama começa na casa de coordenadas (X1, Y1), e a casa de destino é a casa de coordenadas(X2, Y2). No tabuleiro, as colunas são numeradas da esquerda para a direita de 1 a 8 e as linhas de cima para baixo também de 1 a 8. As coordenadas de uma casa na linha X e coluna Y são (X, Y ). O final da entrada é indicado por uma linha contendo quatro zeros.",
        "titulo": "Dama",
        "descricao": "O jogo de xadrez possui várias peças com movimentos curiosos: uma delas é a dama, que pode se mover qualquer quantidade de casas na mesma linha, na mesma coluna, ou em uma das duas diagonais, conforme exemplifica a figura abaixo: O grande mestre de xadrez Kary Gasparov inventou um novo tipo de problema de xadrez: dada a posição de uma dama em um tabuleiro de xadrez vazio (ou seja, um tabuleiro 8 × 8, com 64 casas), de quantos movimentos, no mínimo, ela precisa para chegar em outra casa do tabuleiro? Kary achou a solução para alguns desses problemas, mas teve dificuldade com outros, e por isso pediu que você escrevesse um programa que resolve esse tipo de problema."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1836",
        "saida": "Para cada caso de teste, a saída deve ser composta de cinco mensagens, uma por linha: Caso #t: P nível LHP: HPCAT: ATCDF: DFCSP: SPC onde P é o nome do pokémon, L o nível e SC o atributo calculado para o nível L, conforme as expressões apresentadas, e t é o número do caso de teste, cuja contagem tem início no número um.",
        "entrada": "A entrada consiste em uma série de casos de teste. A quantidade de casos de teste T (T ≤ 1.000) é indicada na primeira linha da entrada. Cada caso de teste consiste em cinco linhas. A primeira linha contém o nome do pokémon P e o seu nível L (1 ≤ L ≤ 99), separados por um espaço em branco. O nome do pokémon contém apenas caracteres alfanuméricos. As quatro linhas seguintes contém três inteiros cada uma: BS (1 ≤ BS ≤ 255), IV (1 ≤ IV ≤ 15) e EV (1 ≤ EV ≤ 262.140), separados por um espaço em branco, para cada um dos quatro atributos: HP, AT, DF e SP.",
        "titulo": "Pokémon!",
        "descricao": "Na primeira geração, as criaturas do jogo Pokémon tinham quatro atributos básicos: vitalidade (HP), ataque (AT), defesa (DF) e velocidade (SP), que aumentavam de valor a medida que o pokémon evoluía (ganhava níveis de experiência) através de batalhas e itens especiais. O valor de cada um destes atributos, para um determinado nível (o qual varia entre 1 e 99), pode ser computado através das expressões: e onde BS é o valor base do atributo (vitalidade, ataque, defesa e velocidade), EV é o valor dos esforços do pokémon (que depende de quantas e quais batalhas ele participou), IV é o valor individual do pokémon no referido atributo (equivalente ao \"gene\" do pokémon) e L é o nível. Os atributos EV e IV faz com que dois pokémons de mesmo tipo evoluam de forma diferente. Como o atributo deve ter um valor inteiro, a parte decimal deve ser descarada ao final do cálculo da fração. Dado um determinado pokémon, os valores base de seus atributos e seu nível, determine seus respectivos atributos."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1765",
        "saida": "Para cada caso de teste apresente o valor de sorvete usado, em cm2, para cada um dos tamanhos. Após cada caso de teste, imprima uma linha em branco.",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de cada caso de teste começa com um inteiro T (0 ≤ T ≤ 50) indicando quantos tamanhos diferentes haverá nessa fornada. As T linhas seguintes contém 3 valores, um inteiro Q (0 ≤ Q ≤ 50) indicando a quantidade de trapézios feitos com as medidas A e B (0 ≤ A,B ≤ 50) ambos de dupla precisão antecedidos por Q. A entrada termina quando T for zero.",
        "titulo": "Trapézios de Natal",
        "descricao": "Jorge era um cara muito determinado a criar trapézios doces de Natal. Os trapézios são feitos de fios de balas puxa-puxa e recheados com sorvete. Após assados eles assumem uma perfeita forma bidimensional de um trapézio. Por padrão, todos os trapézios possuem a mesma altura, 5cm, mas as suas bases podem alterar de tamanho dependendo da disponibilidade de balas puxa-puxa que Jorge possui. Um dia Jorge estava curioso para saber quanto de sorvete ele estava ocupando para cada tamanho de trapézio que fazia, então ele chamou você para ajudá-lo. Você deve fazer um programa que dados quantos tamanhos diferentes de trapézios vão ser feitos, quantos trapézios daquele tamanho serão produzidos e as medidas das bases de puxa-puxa, você diga quantos cm2 de soverte serão ocupados por cada tamanho."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1271",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir Q + 1 linhas de saída. A primeira linha deve conter a string \"Genome\", seguido do número do caso de teste. As seguintes Q linhas devem conter um número inteiro, cada um representando as respostas das consultas.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de genes no genoma (1 ≤ N ≤ 50000). Você pode supor que o ordem inicial dos genes é a sequência de números inteiros de 1 a N em ordem crescente. A segunda linha de um caso de teste contém um inteiro R (0 ≤ R ≤ 1000) que indica o número de inversões a serem aplicadas ao genoma. Então, R linhas seguem, cada uma contendo dois inteiros i, j (1 ≤ i ≤ j ≤ N), separados por um único espaço, o qual indicam os dois índices que definem a inversão correspondente. Após a descrição das inversões há uma linha contendo um inteiro Q (0 ≤ Q ≤ 100), que indica o número de consultas para os genes, seguido de Q linhas, onde cada linha contém um inteiro representando um gene cuja posição final você deve determinar. O final da entrada é indicada por N = 0.",
        "titulo": "Onde estão meus Genes",
        "descricao": "Uma maneira que os cientistas tem para tentar medir como uma espécie evoluiu para outra é investigando como o genoma do ancestral se modificou para se transformar nesta outra espécie. Espécies intimamente relacionadas têm vários genes em comum e verifica-se que uma boa maneira de compará-las é através da comparação de como os genes comuns mudaram de lugar. Uma das mutações mais comuns que alteram a ordem dos genes de genomas é a inversão. Se modelarmos um genoma como uma sequência de N genes sendo cada gene um número inteiro de 1 a N,então uma inversão é uma mutação que altera o genoma revertendo a ordem de um bloco de genes consecutivos. A inversão pode ser descrita por dois índices (i, j), (1 ≤ i ≤ j ≤ N), indicando que ela inverte a ordem dos genes dentro de índices de i até j. Assim, quando isto é aplicado para um genoma [g1,. . . , gi-1, gi , gi+1,. . . , gj-1, gj , gj+1,. . . , gN], obtém-se o genoma [g1,. . . , gi-1, gj , gj-1,. . . , gi+1, gi , gj+1,. . . , gN]. Como um exemplo, a inversão de (3, 6), aplicado à genoma [1, 2, 3, 4, 5, 6, 7] dá [1, 2, 6, 5, 4, 3, 7]. Se depois que a inversão (1, 3) é aplicada, obtém-se o genoma [6, 2, 1, 5, 4, 3, 7]. Um cientista que está estudando a evolução de uma espécie deseja tentar uma série de inversões no genoma desta espécie. Em seguida, ele quer consultar a posição final de vários genes. Será que você aceita o desafio de ajudá-lo?"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1882",
        "saida": "Para cada instância, imprima um número real arredondado para 3 casas decimais com o valor mínimo esperado. O número deve sempre ser impresso com as 3 casas decimais.",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância inicia com 3 inteiros, N, M (1 ≤ N, M ≤ 100.000) e K (1 ≤ K ≤ 1000), representando o número de ilhas, a quantidade de barqueiros e o custo da viagem de avião. As próximas M linhas contêm 3 inteiros cada, A, B, C (1 ≤ C ≤ 1.000), indicando que existe um barqueiro cobrando C baht para ir da ilha A para a B, ou da ilha B para a A. Entre cada par de ilhas existe no máximo um barqueiro.",
        "titulo": "Passeios Aleatórios pela Tailândia",
        "descricao": "A Tailândia tem algumas centenas de ilhas. Todas as ilhas de tamanho razoável têm pequenas pistas de voo, onde aviões de pequeno porte operam. O sistema de transporte, no entanto, é bastante estranho às vistas de um estrangeiro... Os barqueiros são muito confiáveis. Partindo, por exemplo, de Ko Khang Khao (เกาะค้างคาว), você consegue um barco para as ilhas vizinhas a preços razoáveis: Ko Sichang (เกาะสีชัง), Ko Kham Yai (เกาะขามใหญ่), Ko Kham Noi (เกาะขามน้อย), Ko Ram Dok Mai (เกาะร้ามดอกไม้), Ko Prong (เกาะปรง), ou Ko Yai Thao (เกาะใหญ่ท้าว) (sim, Ko significa ilha em tailandês). Os pilotos de avião, por sua vez, são muito temperamentais. Você pega o avião e ele deixa você em uma ilha aleatória, que ele decide de acordo com sua própria vontade. Toda ilha tem a mesma probabilidade de ser escolhida pelo piloto, inclusive a ilha de origem. Apesar de o destino ser incerto, toda viagem de avião tem o mesmo preço fixo. Assim, quando você quer ir de uma ilha a outra tem sempre duas opções. Pegar um barco para uma ilha vizinha, cujo preço varia de acordo com o trecho percorrido, ou arriscar e pegar um avião, pagando o preço fixo de K baht. Considere que as ilhas são numeradas de 1 a N. Sua tarefa neste problema é determinar o valor mínimo esperado de uma viagem a ser feita da ilha 1 para a ilha N."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1472",
        "saida": "Seu programa deve produzir uma única linha para cada caso de teste, contendo um único inteiro, o número de triângulos equiláteros distintos que podem ser construídos utilizando os pontos dados como vértices.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um número inteiro N ( 3 ≤ N ≤ 105), o número de pontos dados. A segunda linha contém N inteiros Xi (1 ≤ Xi ≤ 103) para 1 ≤ i ≤ N, representando os comprimentos dos arcos entre dois pontos consecutivos na circunferˆencia: para 1 ≤ i ≤ (N − 1), Xi representa o comprimento do arco entre os pontos i e i + 1; XN representa o comprimento do arco entre os pontos N e 1. O final da entrada é determinado por EOF (fim de arquivo).",
        "titulo": "Triângulos",
        "descricao": "São dados N pontos em uma circunferência. Você deve escrever um programa que determine quantos triângulos equiláteros distintos podem ser construídos usando esses pontos como vértices. A figura abaixo ilustra um exemplo; (a) mostra um conjunto de pontos, determinados pelos comprimentos dos arcos de circunferência que têm pontos adjacentes como extremos, e (b) mostra os dois triângulos que podem ser construídos com esses pontos."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1750",
        "saida": "Apresente uma linha com um inteiro que representa o mínimo da diferença total de tempo entre todas as partições possíveis do conjunto de candidatos em casais.",
        "entrada": "A primeira linha contém um inteiro par N (2 ≤ N ≤ 1000) representando o número de candidatos que serão acoplados. A segunda linha contém N inteiros T1, T2,. . . , TN (-11 ≤ Ti ≤ 12 para i = 1, 2,..., N), indicando os fusos horários dos candidatos.",
        "titulo": "Ajude o Cupido",
        "descricao": "O trabalho de Cupido está ficando mais difícil, por isso ele está adotando novas tecnologias para ajuda-lo com sua difícil tarefa de combinar pessoas em casais felizes. Ele nomeou os melhores programadores em sua equipe para um novo projeto chamado Advanced Couples Matching (ACM). Para este projeto, os programadores precisam produzir um algoritmo que leva um conjunto de um número par de N pessoas solitárias e combina-los em N/2 casais, de modo que cada pessoa esteja exatamente em um casal. Infelizmente, os dados disponíveis sobre cada pessoa são limitados. Neste mundo moderno, usando de gênero, etnia, idade ou nacionalidade como critério para formar casais não é uma opção sensata, de modo que os programadores só podem utilizar os dados sobre a conexão à internet de cada candidato. Eles decidiram concentrar-se em fusos horários nesta fase. As pessoas que vivem em zonas de tempo mais próximas são mais propensos a encontrar tempo para interagir uns com os outros. Assim, os programadores decidiram criar casais de modo a minimizar a diferença de tempo total. Cada fuso horário é identificado por um número inteiro entre -11 e 12, inclusive, representando a sua diferença em horas de um fuso horário especial chamado Tempo Universal Coordenado (ou UTC). A diferença de tempo de duas pessoas que vivem em zonas de tempo representados por números inteiros i e j é o mínimo entre | i - j | e 24 - | i - j |. Dada uma partição de um conjunto de um mesmo número N de candidatos em N/2 casais, a sua diferença de tempo total é a soma da diferença de tempo de cada casal. Você está convidado a escrever um programa que recebe como entrada os fusos horários de um conjunto de N candidatos. A saída do programa deve ser o mínimo da diferença total de tempo entre todas as partições possíveis do conjunto para casais."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1716",
        "saida": "Seu programa deve produzir uma única linha, contendo um único inteiro M, 1 ≤ M < N , a mensagem original.",
        "entrada": "A única linha da entrada contém três inteiros N, E, e C, onde 15 ≤ N ≤ 109 , 1 ≤ E < N e 1 ≤ C < N, de forma que N e E constituem a chave pública do algoritmo RSA descrita acima e C é uma mensagem criptografada com essa chave pública.",
        "titulo": "RSA",
        "descricao": "O algoritmo RSA é um dos algoritmos de criptografia mais utilizados e é considerado uma das alternativas mais seguras existentes. Seu funcionamento básico é descrito a seguir. Dois números primos ímpares P e Q são escolhidos e calcula-se N = PQ. A seguir é calculada a função totiente φ(N) = (P − 1)(Q − 1) e um inteiro e satisfazendo 1 < E < φ(N) é escolhido de forma que mdc(φ(N), e) = 1. Finalmente é calculado o inteiro D, o inverso multiplicativo de e módulo φ(N), ou seja, o inteiro D satisfazendo DE = 1 (mod φ(N)). Assim obtemos a chave pública, formada pelo par de inteiros N e E, e a chave secreta, formada pelos inteiros N e D. Para criptografar uma mensagem M, com 0 < M < N, calcula-se C = Me (mod N), e C é a mensagem criptografada. Para descriptografá-la, ou seja, para recuperar a mensagem original, basta calcular M = Cd (mod n). Note que, para isso, a chave secreta deve ser conhecida, não sendo suficiente o conhecimento da chave pública. Note ainda que a expressão x = 1 (mod y) usada acima equivale a dizer que y é o menor natural tal que o resto da divisão de x por y é 1. Neste problema você deve escrever um programa para quebrar a criptografia RSA."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1699",
        "saida": "Para cada caso de teste imprima, em uma única linha, Annie ou Garen, o vencedor do jogo.",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste é descrito em duas linhas. A primeira linha contém o inteiro n (1 ≤ n ≤ 105), representando o número de caixas. A segunda linha contém n inteiros, onde o i-ésimo número representa o rótulo x (1 ≤ x ≤ 1012) da i-ésima caixa. O último caso de teste é seguido por uma linha contendo um zero.",
        "titulo": "Jogo Entediante",
        "descricao": "Annie e Garen adoram jogos de computador mas eles não são muito bons em contar. Por isso, eles precisam da sua ajuda nesse jogo. O jogo consiste de n caixas, cada uma com um rótulo x. Em cada caixa são colocadas d bolas, onde d é o número de divisores positivos de x, o rótulo da caixa. Em cada turno, um jogador escolhe uma bola de qualquer caixa e a remove do jogo. O jogador que fizer o último movimento é o vencedor. Dados n e x para todas as caixas, eles querem saber quem vai vencer. Annie sempre é a primeira a jogar."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1218",
        "saida": "Para cada caso de teste imprima quatro linhas, conforme exemplo abaixo. A primeira linha deve apresentar a mensagem “Caso n:”, onde n é o número do caso de teste. A segunda linha deve informar quantos pares da caixa de calçados são iguais ao número que Overlaine quer encontrar, com mensagem correspondente. Seguem duas linhas com a quantidade respectiva de calçados Femininos (F) e Masculinos (M), com mensagem correspondente. Imprima uma linha em branco entre as saídas de dois casos de teste consecutivos.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF (Fim de Arquivo). Cada caso de teste consiste de duas linhas de entrada. A primeira linha contém uma numeração N (20 ≤ N ≤ 44) de calçado que Overlaine informa e a segunda linha contém o número de cada par que está dentro da caixa seguido de M ou F indicando se o par é de calçado Masculino ou Feminino.",
        "titulo": "Getline Three -  Calçados",
        "descricao": "Agora que Mangojata resolveu alguns problemas que utilizavam getline, acha que está apta a dar um passo adiante. Ela está prestes a fazer um novo programa para auxiliar a sua irmã, Overlaine. Overlaine é vendedora de calçados e por um acidente, misturou todos os pares de calçados que tinha para vender. Ela quer informar um número qualquer N e contar quantos calçados de uma determinada caixa são deste tamanho (N). O problema é que Overlaine não tem a menor idéia de quantos calçados existem em cada caixa. A única coisa que sabe é que cada calçado pode ter numeração de 20 a 44, podendo ser masculino ou feminino."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1881",
        "saida": "Para cada instância, imprima uma única linha contendo as coordenadas (x, y), em metros, da posição final do robô, após executar N vezes a instrução I(α, l). As coordenadas x e y devem ser arredondadas e impressas com 2 casas decimais.",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de uma única linha contendo o ângulo α (0 ≤ α ≤ 365), a distância l (0 ≤ l ≤ 10) racional e o número inteiro N (1 ≤ N ≤ 1.000.000.000) de vezes que a instrução I(α, l) deverá ser executada. Considere que α N são inteiros e l é racional.",
        "titulo": "Competição de Robótica",
        "descricao": "Malai participará da final tailandesa de robótica na próxima semana. Nessa competição, cada competidor dará ao seu respectivo robô uma instrução e o número de vezes que essa instrução deverá ser executada. No final da competição, o robô que se aproximar mais do alvo final será o campeão. Cada robô pode ser representado como um ponto (x, y) no plano cartesiano e sua posição inicial será a origem do plano. Cada instrução é definida por I(α, l), onde α representa um ângulo em graus e l uma distância em metros. Para executar a instrução I(α, l), o robô deve rotacionar α graus no sentido anti-horário em torno da origem e depois somar l metros na coordenada x da sua posição. Malai é iniciante nessa competição e precisa da sua ajudar para descobrir a posição final do robô."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1676",
        "saida": "Para cada caso de teste n, imprima uma única linha contendo o enésimo número da sorte.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de um inteiro n (0 ≤ n ≤ 3000). Um zero indica o fim da entrada.",
        "titulo": "Precisa-se de Ajuda",
        "descricao": "Após uma competição europeia de programação em 1998, que ocorreu em Ulm, na Alemanha, foi dada uma grande festa. Os organizadores da festa inventaram uma forma especial para escolher quais participantes iriam ajudar lavando as louças. Os competidores deveriam se organizar em uma fila, um atrás do outro. Cada um deles recebeu um número, começando com 2 para o primeiro, 3 para o segundo, 4 para o terceiro, etc. Então, o primeiro competidor na fila mostra o seu número (no caso, 2). Ele é liberado de ter que lavar as louças e pode curtir a festa, porém, cada segundo participante atrás dele deveria ir para a cozinha (aqueles com os números 4, 6, 8, etc). Depois, o próximo competidor na fila restante mostra seu número. Ele mostra o 3 e também é liberado de ter que lavar louças, mas todos os terceiros competidores atrás dele deveriam ajudar (aqueles com os números 9, 15, 21, etc). O próximo na fila mostra seu número (5) e é liberado, mas cada quinto participante atrás dele é selecionado para ajudar (números 19, 35, 49, etc). O próximo mostra o número 7 e é liberado, e então cada sétimo atrás dele é enviado para a cozinha, e assim sucessivamente. Vamos chamar o número dos competidores que não precisaram ajudar com as louças de um número da sorte. Continuando a seleção preparada pela organização, vemos que os números da sorte são 2, 3, 5, 7, 11, 13, 17, etc. Encontre os números da sorte para se dar bem na próxima festa."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1228",
        "saida": "Para cada caso de teste imprima uma linha contendo um único número inteiro, que indica o número mínimo de ultrapassagens necessárias para se chegar do grid de largada ao grid de chegada.",
        "entrada": "Cada caso de teste utiliza três linhas. A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 24) indicando o número de competidores. Cada competidor é identificado com um número de 1 a N. A segunda linha de cada caso tem os N competidores, em ordem do grid de largada. A terceira linha de cada caso tem os mesmos competidores, porém agora na ordem de chegada.",
        "titulo": "Grid de Largada",
        "descricao": "Na Nlogônia, vai ser realizada a sensacional final mundial da fórmula 17. Os competidores se alinham na largada e disputam a corrida. Você vai ter acesso aos grids de largada e de chegada. A questão é determinar o número mínimo de ultrapassagens que foram efetuadas durante a competição."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1321",
        "saida": "Para cada caso de teste, imprima uma única linha. Se existe uma carta que fará o Príncipe ganhar independente do modo como jogar, você deve imprimir a menor carta possível. Caso contrário, imprima -1.",
        "entrada": "Cada caso de teste é dado em uma única linha que contém cinco inteiros distintos A, B, C, X e Y, descrevendo as cartas já distribuídas aos jogadores. As primeiras três cartas são dadas à Princesa (1 ≤ A,B,C ≤ 52) e as últimas duas cartas são dadas ao Príncipe (1 ≤ X,Y ≤ 52). ​O último caso de teste é seguido de uma linha contendo cinco zeros.",
        "titulo": "Jollo",
        "descricao": "Jollo é um simples jogo de cartas que as crianças da Logônia adoram jogar. É um jogo entre dois jogadores usando um baralho normal de 52 cartas. No jogo, as cartas são ordenadas de acordo com seu valor e naipe, produzindo uma sequência de 52 valores distintos. ​O jogo é composto de três turnos, jogados em uma série melhor de três (um jogador deve ganhar dois turnos para ganhar o jogo). No início do jogo, o baralho é embaralhado e cada jogador recebe três cartas. Em cada turno, os jogadores mostram uma carta ao adversário e o jogador com a carta mais alta ganha o turno. As cartas usadas no turno são descartadas (ou seja, não podem ser usadas novamente). O filho do Rei adora jogar este jogo, mas ele não é muito esperto, perdendo frequentemente para sua irmã mais nova. E quando perde, ele chora tão alto que ninguém aguenta escutar. O criado que embaralha as cartas para o Príncipe e sua irmã tem medo de ser mandado para a prisão caso o Príncipe continue perdendo. O criado pode ver as cartas que ele entrega, e após distribuir cinco cartas (três à Princesa e duas ao Príncipe) quer saber qual a carta mais baixa que ele deve entregar ao Príncipe tal que não exista nenhuma possibilidade de ele perder o jogo, não importando a maneira como jogue."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2209",
        "saida": "For each test case, display its case number followed by the minimum number m of cells that must be infiltrated to obtain complete control of the ACM. Then display m numbers c1, . . . , cm in any order, indicating the list of cells to infiltrate (cells are numbered from 1 to n). If more than one set of m cells gives complete control, any one will be accepted.",
        "entrada": "The first line of a test case contains the number n of cells the ACM has (1 ≤ n ≤ 75). Each of the next n lines contains a binary string of length n where the ith character of the jth line is 1 if cell j controls cell i, and 0 otherwise (1 ≤ i, j ≤ n). The ith character of the ith line is 0 and for i != j, either the ith character of the jth line is 1 or the jth character of the ith line is 1, but not both.",
        "titulo": "Infiltration",
        "descricao": "Good morning, agent W-12. Your mission, should you choose to accept it, is as follows. We are infiltrating the ever so insidious Association of Chaos and Mischief (ACM) in order to take down their command structure. Unfortunately, they appear to be prepared for such an eventuality, and have given their command structure an annoyingly complex design which makes our infiltration quite difficult. The ACM command structure is divided into several cells. For each pair of cells A and B, either A controls B or B controls A. But this “control” relation can be cyclic, so it could happen that A controls B and B controls C and C controls A. We can send in agents to infiltrate any particular cell, which gives us control over that cell and the cells that it controls, but not any other cells. So in the example above, infiltrating A would give us control over A and B, but not C. For a successful infiltration of the ACM, we must obtain control over all of its cells, otherwise the cells that are out of our control will discover us and start causing some of their trademark chaos and mischief. As you know, we’re on a tight spending leash from higher authority these days, so we need to execute this mission as efficiently as possible. Your mission is to figure out the minimum number of cells we need to infiltrate in order to succeed. This mission briefing will self-destruct in five hours. Good luck!"
    },
    {
        "nivel": "7",
        "assunto": "2",
        "numero": "1418",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um único inteiro, a menor quantidade de trabalhadores que deve enviar uma petição de modo a fazer com que o dono da empresa receba uma petição.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é dado em exatamente duas linhas. A primeira linha contém dois inteiros N e T (1 ≤ N ≤ 105 e 1 ≤ T ≤ 100), separados por um espaço em branco. N indica o número de empregados da empresa (sem considerar o dono) e T é o parâmetro descrito acima. Cada um dos empregados é identificado por um inteiro entre 1 e N, inclusive. O dono é identificado pelo número 0. A segunda linha contém uma lista de inteiros separados por um espaço em branco. O inteiro Bi, na posição i dessa lista (começando de 1), indica o identificador do chefe direto do empregado i (0 ≤ Bi ≤ i - 1). O último caso de teste é seguido de uma linha contendo dois zeros separados por um espaço em branco.",
        "titulo": "Outra Crise",
        "descricao": "Há dois anos atrás, uma nova crise mundial teve início, deixando muitas pessoas com problemas econômicos. Alguns trabalhadores de uma empresa estão tentando pedir um aumento de salário. A empresa possui uma hierarquia restrita, onde cada empregado tem exatamente um chefe, com a excessão do dono da companhia que não tem chefe. Empregados que não são chefes de nenhum outro empregado são chamados trabalhadores. O resto dos empregadoe e o dono são chamados de chefes. Para pedir aumento, um trabalhador deve enviar uma petição ao seu chefe direto. Evidentemente, cada chefe é encorajado a tentar manter seus subordinados felizes com seu salário atual, tornando o lucro da empresa o maior possível. No entanto, quando ao menos T porcento de seus subordinados diretos fazem uma petição, o chefe será pressionado e não terá escolha a não ser enviar uma petição ele mesmo ao seu superior direto. Cada chefe envia no máximo uma petição para seu próprio chefe, independente do seu número de subordinatos que o enviaram. Um chefe somente considera seus subordinados diretos (os que fizeram a petição e os que não a fizeram) para calcular o a porcentagem da pressão. Note que um chefe pode ter trabalhadores e chefes como seus subordinados diretos ao mesmo tempo, e ele pode receber petições de ambos os tipos de empregados. Cada subordinado direto, independente de seu cargo, terá peso 1 ao realizar o balanço total. Quando uma petição chega ao dono da empresa, todos os salários são aumentados. O sindicato dos trabalhadores está desesperado tentando fazer isso acontecer, então eles precisam convencer alguns trabalhadores a enviar uma petição aos seus chefes. Dados a hierarquia da empresa e o parâmetro T, você deve encontrar o menor número de trabalhadores que deve enviar uma petição de forma a fazer com que o dono da empresa aumente os salários."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1684",
        "saida": "Imprima Yes, se a tarefa é possível, e No caso contrário.",
        "entrada": "A primeira linha contém um número T (1 ≤ T ≤ 100), indicando que se seguirão muitos casos de teste. Cada teste começa com um número, N (0 ≤ N ≤ 104), indicando o número de locais no reino, e M (0 ≤ M ≤ 105), o número de ruas. As seguintes linhas M contém dois números inteiros, a e b (0 ≤ a, b ​​≤ N-1), indicando que existe uma rua entre o local a e b. Pode haver ruas que ligam um local a si mesmo, e pode haver mais de uma rua que liga dois locais.",
        "titulo": "Maratona Doce",
        "descricao": "É hora das maratonas de corrida na Terra de Ooo novamente. Princesa Jujaba tem um mapa do reino doce, e agora ela tem que preparar as ruas para receber as competições. Sua tarefa é a seguinte: ela precisa separar as ruas do reino em circuitos disjuntos, ou seja, vários caminhos disjuntos que começam e terminam no mesmo local. Cada rua deve ser utilizada em exatamente um circuito, ou então uma grande fúria cairá sobre o reino. Ela não importa o número de circuitos gerados, contanto que exista pelo menos um, uma vez que a maratona pode ser ajustada de acordo com os recursos disponíveis. Jujuba acredita que, se qualquer tarefa é possível, ela pode fazê-lo. Assim, a pergunta é: podem ruas do reino se dividir em circuitos disjuntos?"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1889",
        "saida": "Para cada instância, imprima uma única linha contendo a área mínima para os dados da instância, arredondado para 2 casas decimais; se não for possível formar um triângulo com as larvas, imprima -1. .",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste de um inteiro N (1 ≤ N ≤ 2*103), representando o número de larvas, seguido de N números reais, representando seus comprimentos. O comprimento de cada larva é um número real entre 1 e 500.",
        "titulo": "Treinando com as Larvas de Phuket",
        "descricao": "A culinária tailandesa é conhecida mundialmente por tentar combinar especiarias de forma a sempre ter presente num prato os elementos doce (açúcar, frutas, pimentões), apimentado, azedo (vinagre, tamarindo, lima) e salgado (shoyu, molho de peixe). O prato mais exótico, que sempre é oferecido aos turistas, é o que contém larvas de inseto fritas. O paladar ocidental costuma rejeitar a ideia de comer larvas, mas elas são muito apreciadas na Tailândia e disputadas em festas e encontros. As crianças tailandesas costumam brincar com a comida e, em particular, adoram construir triângulos usando as larvas fritas como arestas. Marcos \"o resolvedor\" de Rubik ajuda no treinamento de alunos de sua universidade para uma famosa competição de programação de computadores. No ano que vem, a final mundial dessa competição será em Phuket, na Tailândia. De conhecimento desse costume das crianças tailandesas, Marcos teve uma ideia para um treino especial. A ideia é preparar uma grande quantidade de larvas fritas de diversos comprimentos. Cada um de seus amigos, em sequência, deve selecionar 3 delas para formar um triângulo e precisará comer uma quantidade de larvas fritas proporcional à área do triângulo formado. Marcos espera que, para comer menos larvas fritas possível, você escreva um programa para escolher as larvas que formam um triângulo de área mínima. Dessa forma, além de treinar suas habilidades de programação, você também estará treinando para enfrentar a culinária tailandesa. Caso goste dessa iguaria, você pode usar esse programa para ajudar seus amigos, fazendo com que mais larvas fritas sobrem na sua vez."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1947",
        "saida": "Para cada caso de teste imprima uma linha contendo um inteiro, indicando a menor distância possível de ser percorrida se o taxista iniciar no ponto 1, atender a todos os pedidos (um por vez), e voltar ao ponto 1.",
        "entrada": "Cada caso de teste inicia com três inteiros N, M e K (2 ≤ N ≤ 104, N-1 ≤ M ≤ 105, 1 ≤ K ≤ 15). Em seguida haverá M linhas, cada uma com três inteiros A, B e C, indicando que há uma rua que interliga os pontos A e B, a qual pode ser percorrida em ambas as direções, de comprimento C (1 ≤ A, B ≤ N, 1 ≤ C ≤ 100, A B). Em seguida haverá K linhas, cada uma com dois inteiros O e D, indicando que há um turista no ponto O que deseja chegar no ponto D (1 ≤ O, D ≤ N, O D).",
        "titulo": "Rota do Taxista",
        "descricao": "Um evento importante acontecerá hoje na sua cidade, e com isso há muitos turistas perdidos. Para que todos consigam chegar a seus destinos nessa cidade desconhecida eles costumam chamar táxis. Você foi contratado para ajudar os taxistas, que estão sobrecarregados com tantas chamadas. A cidade pode ser representada por N pontos de referências, e M ruas que interligam estes pontos. Cada rua tem um determinado comprimento, e sempre haverá um caminho entre quaisquer dois pontos distintos da cidade. O objetivo do taxista o qual você vai ajudar é atender a K pedidos. Cada pedido consiste de dois pontos no mapa, O e D (origem e destino), sendo que o turista atualmente está no ponto O e deseja chegar no ponto D. O taxista está inicialmente no ponto 1, pretende atender a apenas um pedido por vez (na ordem em que desejar), e após o último pedido deve voltar ao ponto 1. Por exemplo, considere uma cidade com N = 5 pontos de referência e K = 2 turistas, onde o primeiro turista deseja ir do ponto 4 ao ponto 3, e o segundo deseja ir do ponto 2 ao ponto 4. O taxista então tem duas opções de trajeto: 1 -> 4 -> 3 -> 2 -> 4 -> 1; ou 1 -> 2 -> 4 -> 3 -> 1. Note que A -> B representa um caminho entre os pontos A e B, contendo uma ou mais ruas. Confuso com tantas opções de trajeto e querendo economizar combustível, o taxista pediu que você calculasse qual trajeto teria a menor distância percorrida."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1779",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #X: Y\", onde X é o número do caso atual, iniciando em 1, e Y é o tamanho da maior sequência de provas que contém a maior média obtida por Guga.",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso começa com uma linha com um número N (1 ≤ N ≤ 10⁵), o número de provas que Guga realizou em toda sua vida acadêmica. Em seguida, há uma linha com N inteiros Pi (0 ≤ Pi ≤ 10000), o i-ésimo inteiro representa a nota da i-ésima prova.",
        "titulo": "Estimando a Média",
        "descricao": "Guga fez N provas em toda sua vida acadêmica. Agora, perto de se formar, ele quer saber qual foi o maior período de tempo contíguo em que ele possuiu a maior média aritmética."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1032",
        "saida": "A saída consistirá em linhas separadas relativos à posição da pessoa que a vida será salva.",
        "entrada": "Consiste em linhas separadas, contendo n [1 .. 3501], e termina com um 0.",
        "titulo": "O Primo de Josephus",
        "descricao": "O problema de Josephus é notoriamente conhecido. Para aqueles que não estão familiarizados com o problema, entre n pessoas numeradas 1,2 ... n, de pé em círculo cada um deve ser executado e só a vida do último que sobrar será preservada. Josephus foi esperto o suficiente para escolher a posição da última pessoa restante, poupando a sua vida. Apesar de muitos bons programadores poderem se salvar desde que Josephus espalhou essa informação (o lugar onde ficar para não ser executado), o primo de Josephus introduziu uma nova variante do jogo maligno. Este personagem insano é conhecido por suas idéias bárbaras e desejos para limpar o mundo de programadores. Tivemos de infiltrar alguns agentes os da ACM, a fim de conhecer o processo neste novo jogo mortal. A fim de salvar-se de esta prática mal, você deve desenvolver uma ferramenta capaz de prever qual será a pessoa salva. O processo destrutivo As pessoas são eliminados em uma ordem muito peculiar: m é uma variável dinâmica, que cada vez tem um valor diferente correspondente a sucessão dos números primos de (2,3,5,7 ...). Então, para matar a pessoa i, o primo de Josephus conta até o próximo m primo."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1441",
        "saida": "Para cada caso de teste, imprima uma linha com um inteiro representando o maior número na Sequência de Granizo que inicia com o número da entrada.",
        "entrada": "Cada caso de teste é descrito por uma única linha. A linha contém um inteiro H que representa o valor inicial para construir a sequência (1 ≤ H ≤ 500). O último caso de teste é composto por uma linha contendo um único zero.",
        "titulo": "Sequências de Granizo",
        "descricao": "Considere a sequência formada iniciando-se por um inteiro positivo h0 e iterando com n = 1, 2, . . . com a seguinte definição, até que hn = 1: hn​ = { ½ × hn-1 se hn-1 é par; hn​ = { 3 × hn-1 + 1 se hn-1 é ímpar. Por exemplo, se iniciarmos com h0 = 5 a seguinte sequência é gerada: 5, 16, 8, 4, 2, 1. Se começarmos com h0 = 11, a sequência gerada é 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1. Como você pode ver nos exemplos, os números aumentam e diminuem, mas eventualmente terminam em 1 (isto é verdade para pelo menos para todos os números que já foram testados). Estas sequências são chamadas de Sequências de Granizo porque são similares à formação do granizo, pois são carregados para cima pelos ventos várias vezes, até que finalmente caem no chão. Neste problema, dado um inteiro positivo, sua tarefa é computar o maior número na Sequência de Granizo que inicie com este o número dado."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1495",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro representando o número máximo total de pontos que o seu time pode obter após comprar os gols.",
        "entrada": "A entrada contém diversos casos de teste e termina com EOF. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 105) e G (0 ≤ G ≤ 106) representando respectivamente o número de partidas que o seu time jogou e o número de gols que o seu time pode comprar. Cada uma das próximas N linhas descrevem o resutado de uma partida com dois inteiros S e R (0 ≤ S, R, ≤ 100), indicando respectivamente os gols que o seu time marcou e sofreu na partida antes da compra de gols.",
        "titulo": "Futebol",
        "descricao": "O seu time de futebol favorito está jogando em um campeonato para caridade, que é parte de um esforço mundial para levantar fundos para ajudar crianças com dificuldades. Como em um campeonato normal, três pontos são dados ao time que vence um partida, e nenhum para o time que perdeu. Se o jogo termina em empate, cada time recebe um ponto. O seu time jogou N partidas durante a primeira fase do campeonato, que já terminou. Somente alguns times, os com mais pontos acumulados, irão avançar para a segunda fase do campeonato. Porém como o objetivo principal do campeonato é arrecadar dinheiro, antes de definir os times que passaram para a segunda fase, cada time pode comprar gols adicionais. Estes gols contam como gols marcados, e podem ser usados para alterar o resultado de qualquer partida que o time jogou. O orçamento do seu time é suficiente para comprar até G gols. Você pode informar o número máximo de pontos que o seu time pode obter após comprar os gols, supondo que os outros times não irão comprar nenhum gol?"
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2005",
        "saida": "Para cada caso de teste, imprima a quantidade de ratos saciados.",
        "entrada": "A entrada consiste em vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 1000), representando a quantidade de ratos e a quantidade de alimentos. A segunda linha de cada caso de teste contém N inteiros, representando os níveis de fome dos ratos (1 ≤ fi ≤ 1000). A terceira linha de cada caso de teste contém M inteiros, representando os níveis de sustento dos alimentos (1 ≤ si ≤ 1000). A entrada termina com final de arquivo (EOF).",
        "titulo": "Fracil Bolado",
        "descricao": "Fracil tem uma criação de N ratos e possui M alimentos para alimenta-los. Cada rato possui um nível de fome. Cada alimento possui um nível de sustento. Quando um rato com nível de fome f é alimentado com um alimento com nível sustento maior ou igual a f, o rato fica saciado e seu nível de fome é zerado. Quando um rato com nível de fome f é alimentado com um alimento com nível sustento menor que f, o novo nível de fome do rato é f-s. Para alimentar seus ratos, Fracil segue uma estratégia: Os alimentos serão fornecidos aos ratos de forma sequencial, primeiro é fornecido o alimento com índice 1, depois o de índice 2 e assim sucessivamente. Fracil tem preferência em alimentar os ratos que tenham o maior nível de fome e que possam ser saciados com a comida da vez. Caso não tenha nem um rato que possa ser saciado, Fracil tem preferência em alimentar os ratos com maior nível de fome. Cada alimento só poderá ser fornecido uma vez e sem divisão (não se pode fornecer partes de um alimento para ratos diferentes). Fracil quer saber quantos ratos vão estar saciados quando acabarem os alimentos."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1719",
        "saida": "Para cada caso de teste, dê como saída o valor final do acumulador em representação binária, novamente: bits mais significativos primeiro.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste especifica o conteúdo da memória antes da execução do programa. Byte 0 a 31 são dadas em linhas separadas em representação binária. Um byte é indicado por seus bits mais e menos significativos. A entrada é terminada por EOF.",
        "titulo": "Computadores Simples",
        "descricao": "Você escreverá um interpretador para um computador simples. Este computador usa um processador com um pequeno número de instruções de máquina. Além disso, é equipado com 32 bytes de memória, um acumulador de 8 bits (accu) e um contador de programa de 5 bits (pc). A memória contém dados, bem como código, que é a arquitetura habitual de von Neumann. O contador de programa contém o endereço da instrução a ser executada em seguida. Cada instrução tem um comprimento de 1 byte - os 3 bits mais significativos (bits mais a esquerda) definem o tipo de instrução e os 5 bits menos significativos definem um operando opcional que é sempre um endereço de memória (xxxxx). Para instruções que não precisam de um operando, os 5 bits menos significativos não têm significado (-----). Aqui está uma lista de instruções da máquina e a sua semântica: 000xxxxx   STA x   armazena o valor do acumulador no byte x da memória 001xxxxx   LDA x   carrega o valor do byte x da memória para o acumulador 010xxxxx   BEQ x   se o valor do acumulador for 0, carregue o valor x para o contador de programa 011-----   NOP     nenhuma operação 100-----   DEC     subtraia 1 do acumulador 101-----   INC     adicione 1 ao acumulador 110xxxxx   JMP x   carregue o valor de x para o contador de programa 111-----   HLT     finaliza o programa No início, o acumulador e o contador do programa são definidos como 0. Depois de buscar uma instrução, mas antes de sua execução, o contador de programa é incrementado. Você pode assumir que os programas serão encerrados."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1901",
        "saida": "Imprima uma linha contendo a quantidade de espécies diferentes que Bino coletou.",
        "entrada": "A entrada é contituida por multiplas linhas. A primeira linha contém um inteiro N (0 < N ≤ 200) representando o tamanho da floresta. As próximas N linhas contém N inteiros Kij (0 < Kij ≤ 1000) cada, representando qual espécie de borboleta presente em cada célula. As próximas N*2 linhas contém 2 inteiros cada, representando as células visitadas por Bino.",
        "titulo": "Borboletas",
        "descricao": "As florestas do planeta Binox possuem várias espécies raras de borboletas. Bino também é um caçador de borboletas, e quer coletar o máximo de espécies diferentes de borboletas. A floresta de Binox é representada por um grid quadrado de tamanho NxN, e cada célula 1x1 do grid pode conter uma borboleta. A imagem a seguir representa o primeiro exemplo de entrada. As espécies coletadas foram: 1, 2, 3, 4 e 8. Sua tarefa é determinar a quantidade de espécies de borboletas que Bino conseguirá coletar, conhecendo o mapa da floresta e todos os locais que Bino procurou por borboletas. Por algum motivo desconhecido, Bino sempre procura em 2*N posições da floresta."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1943",
        "saida": "Para cada caso de teste imprima uma linha contendo a frase “Top N”, e substitua a letra N pelo número da menor categoria que a colocação K pertence.",
        "entrada": "Cada caso de teste contém um inteiro K, representando uma colocação (1 ≤ K ≤ 100).",
        "titulo": "Top N",
        "descricao": "Recentemente aconteceu a fase regional da Maratona de Programação da SBC, onde mais de 600 times participaram em mais de 40 sedes diferentes pelo Brasil. Seu amigo participou da competição, e quando questionado sobre sua colocação lhe disse: “Ficamos no top 10”. Você ficou feliz pelo seu amigo, mas não pode deixar de ficar curioso sobre qual foi sua real colocação. “Top 10” poderia indicar qualquer posição entre primeiro e décimo colocado, porém se ele estivesse em primeiro provavelmente teria dito “Top 1”, se estivesse em segundo ou terceiro provavelmente teria dito “Top 3”, e se estivesse em quarto ou quinto provavelmente teria dito “Top 5”. Logo, sua real colocação foi entre sexto e décimo, pois as pessoas geralmente se colocam na menor categoria a qual pertencem. Você reuniu então todas as categorias de colocações que as pessoas mais usam: 1, 3, 5, 10, 25, 50 e 100. Dada uma colocação K, diga o número da menor categoria que esta colocação pertence."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1361",
        "saida": "Para cada caso, a saída será constituída por uma linha com o número de andares do edifício mais alto com as condições mencionadas.",
        "entrada": "O arquivo de entrada é constituído por uma primeira linha com p número de casos de teste para resolver. A primeira linha de cada caso de teste contém o número de pisos disponíveis. Então, o tamanho e a cor de cada andar aparece numa linha. Cada andar é representado por um número inteiro entre -999999 e 999999. Não há andar com o tamanho 0. Os números negativos representam pisos vermelhos e números positivos pisos azuis. O tamanho do andar é o valor absoluto do número. Não existem dois pisos, com o mesmo tamanho. O número máximo de andares para um problema é 500000.",
        "titulo": "Desenhando o Edifício",
        "descricao": "Um arquiteto quer projetar um edifício muito alto. A construção será composta por alguns andares, e cada andar terá um certo tamanho. O tamanho de um pavimento tem que ser maior do que o tamanho do piso imediatamente acima dele. Além disso, o designer (que é um fã de um famoso time de futebol espanhol) quer pintar o prédio em azul e vermelho, cada andar uma cor, e de tal forma que as cores dos dois andares consecutivos sejam diferentes. Para projetar o edifício o arquiteto tem n pisos disponíveis, com seus tamanhos e cores associadas. Todos os andares estão disponíveis em diferentes tamanhos. O arquiteto quer projetar o edifício mais alto possível, com estas restrições, usando os andares disponíveis."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1728",
        "saida": "Para cada caso de teste gere uma linha contendo a palavra \"True\" ou a palavra \"False\", se a equação é verdadeira ou falsa, respectivamente, na interpretação de Turing, ou seja, com os números escritos de trás para frente.",
        "entrada": "A entrada contém vários casos de teste. Cada caso especifica em uma única linha uma equação de Turing. Uma equação de Turing tem a forma \"a+b=c\", onde a, b, c são números compostos de dígitos 0,...,9. Cada número consiste de, no máximo, 7 dígitos. Isso inclui possíveis zeros à esquerda ou à direita. A equação \"0+0=0\" terminará a entrada e deve ser processada também. As equações não contêm espaços.",
        "titulo": "Difícil de Acreditar, Mas é Verdade!",
        "descricao": "A briga continua para decidir se é melhor armazenar números começando pelos seus dígitos mais significativos ou pelos seus dígitos menos significativos. Às vezes ela é chamada de \"Endian War\". Essa batalha teve início há muito tempo atrás, nos primórdios da Ciência da Computação. Joe Stoy, em seu (a propósito, excelente) livro \"Denotational Semantics\" (\"Semântica Denotacional\"), conta a história a seguir: \"A decisão sobre para que lado escrevermos os dígitos é, claro, matematicamente trivial. Entretanto, um dos primeiros computadores britânicos tinha números escritos da direita para a esquerda (porque o feixe de luz de um tubo de osciloscópio vai da direita para a esquerda, mas na lógica serial trata-se primeiro dos dígitos menos significativos). Turing costumava confundir seu público em palestras públicas quando, por acaso, ele entrava neste modo mesmo para aritmética decimal, e escrevia coisas como 73+42=16. A versão seguinte da máquina foi tornada mais convencional simplesmente invertendo os fios da deflexão no eixo X: isso, porém, preocupou os engenheiros, já que suas formas de onda ficaram todas ao contrário. Esse problema, por sua vez, foi resolvido criando uma pequena janela para que os engenheiros (que tendiam a ficar atrás do computador mesmo) pudessem ver a tela do osciloscópio de trás. [C.Strachey - comunicação privada.]\" Você vai fazer o papel do público e julgar se as equações de Turing são verdadeiras."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1876",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único inteiro N, que é o tamanho do maior filete de rabiola formado por este cipó.",
        "entrada": "A entrada possui múltiplos casos de teste. Cada caso de teste é dado em uma linha, que contém uma única palavra P composta apenas pelas letras ‘o’ ou ‘x’, representando um cipó. Essa palavra possui no máximo 100 caracteres. A entrada termina com o fim do arquivo.",
        "titulo": "Rabiola",
        "descricao": "Todo ano, os moradores da cidade de Pipacicaba organizam o campeonato municipal de pipas. Neste lugar, eles utilizam um tipo especial de cipó para usar como rabiola da pipa. Este cipó é formado por uma fita única, formado por folhas normais e folhas aderentes. Nos exemplos, as folhas normais serão representadas por uma letra ‘o’ e as folhas aderentes, formadas por uma letra ‘x’. Para aproveitar as diversas cores dos cipós, cada pipa do campeonato pode apenas colocar uma única fita. Cada folha aderente deverá ser colada em um ponto único na base da pipa. Com isto, filetes de folhas normais são formados. Os dois filetes mais externos ficam, normalmente, sem dobras. Os filetes internos, sempre formados por uma quantidade par de folhas, são dobrados: Abaixo, temos um exemplo de cipó, e sua colocação na pipa: Cipó: ooxooooooxo Após colar as folhas aderentes, a rabiola ficará assim: Os filetes aparecem separados na imagem para melhor visualização. Na verdade, os filetes ficam sobrepostos. Sua missão é fazer um algoritmo que, dado um cipó, informe o tamanho do maior filete de rabiola feito com o mesmo."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2134",
        "saida": "Para cada instância, você deverá imprimir um identificador \"Instancia K\", onde K é o número da instância atual. Na linha seguinte imprima o nome do infeliz reprovado. Após cada instância imprima uma linha em branco.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste em um inteiro N (1 ≤ N ≤ 100) indicando o número de alunos na competição. Cada uma das N linhas seguintes contém o nome do aluno e o número de problemas resolvidos por ele. O nome consiste em uma sequência de letras [a-z] com no máximo 20 letras e cada time resolve entre 0 à 10 problemas. A entrada termina com final de arquivo.",
        "titulo": "Quem Vai Ser Reprovado?",
        "descricao": "Prof. Wallywow da Universidade da Columbia Britânica está muito preocupado com a queda do nível de atenção de seus estudantes. Ele já tentou várias técnicas mundialmente conhecidas para incentivar os alunos a prestar atenção nas suas aulas e fazer as tarefas que ele passa para a turma: deu nota para os alunos mais participativos, ofereceu chocolates aos alunos, levou seu karaokê e cantava nas aulas etc. Como tais medidas não levaram a uma melhora no comparecimento às aulas (a ideia do karaokê, inclusive, mostrou-se bastante infeliz. . . na segunda aula com karaokê a turma reduziu-se a um aluno – que tinha problemas auditivos) ele teve uma brilhante ideia: faria uma competição entre os alunos. Prof. Wallywow passou um conjunto de problemas aos alunos, e deu um mês para que eles os resolvessem. No final do mês os alunos mandaram o número de problemas resolvidos corretamente. A promessa do brilhante didata era reprovar sumariamente o último colocado da competição. Os alunos seriam ordenados conforme o número de problemas resolvidos, com empates resolvidos de acordo com a ordem alfabética dos nomes (não há homônimos na turma). Isso fez com que alunos com nomes iniciados nas últimas letras do alfabeto se esforçassem muito nas tarefas, e não compartilhassem suas soluções com colegas (especialmente aqueles cujos nomes começassem com letras anteriores). Sua tarefa neste problema é escrever um programa que lê os resultados dos alunos do Prof. Wallywow e imprime o nome do infeliz reprovado. Qualquer semelhança entre o Prof. Wallywow e o Prof. Carlinhos é mera coincidência."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2208",
        "saida": "For each test case, display its case number followed by the number of occurrences of the bit pattern p in F(n). Occurrences may overlap. The number of occurrences will be less than 263 .",
        "entrada": "The first line of each test case contains the integer n (0 ≤ n ≤ 100). The second line contains the bit pattern p. The pattern p is nonempty and has a length of at most 100 000 characters.",
        "titulo": "Fibonacci Words",
        "descricao": "The Fibonacci word sequence of bit strings is defined as: $$F(n) =\\begin{cases} & \\text 0 \\\\ & \\text 1 \\\\ & \\text F(n-1)+F(n-2)\\\\ \\end{cases} \\begin{matrix} \\mathbf{if} n = 0 \\\\ \\mathbf{if} n = 1\\\\ \\mathbf{if} n \\geqslant 2 \\end{matrix}$$ Here + denotes concatenation of strings. The first few elements are: Given a bit pattern p and a number n, how often does p occur in F(n)?"
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "1031",
        "saida": "A saída consistirá de uma série de linhas, uma linha para cada linha de entrada. Cada linha consistirá de um m de acordo com o esquema acima apresentado.",
        "entrada": "A entrada consistirá de uma série de linhas, cada uma contendo o número de regiões N (13 ≤ N ≤ 100 ). O fim da entrada é indicado por uma linha consistindo de um valor zero (0).",
        "titulo": "Crise de Energia",
        "descricao": "Durante uma crise de energia na Nova Zelândia no inverno passado (causada por uma escassez de chuva e, consequentemente, por causa dos níveis baixos nas barragens hidrográficas), um esquema de contingência foi desenvolvido para desligar a energia para as áreas do país de forma sistemática, de uma forma totalmente justa. O país foi dividido em N regiões (Auckland seria a região número 1 e Wellington a número 13). Um número, m, seria escolhido randomicamente e a energia deveria ser desligada primeiro na região 1 (claramente o ponto de início mais justo) e então em cada m região após esta, indo de uma a outra região e ignorando as regiões já desligadas. Por exemplo, se N = 17 e m = 5, a energia deverá ser desligada em todas as regiões seguindo a seguinte ordem: 1,6,11,16,5,12,2,9,17,10,4,15,14,3,8,13,7. O problema é que, claramente seria mais justo desligar a região de Wellington por último (Isso porque é onde a sede da empresa se encontra). Portanto, para um dado N (regiões), o número aleatório m (salto) precisa ser cuidadosamente escolhido de forma que a região 13 seja a última região a ser escolhida. Escreva um programa que leia o número de regiões e determine o menor número m que assegure que Wellington (região 13) possa continuar funcionando enquanto o resto do país esteja desligado."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1121",
        "saida": "Para cada rali descrito na entrada seu programa deve imprimir uma única linha contendo um único inteiro, indicando o número de figurinhas que o robô colecionou durante o rali.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém três números inteiros N, M e S (1 ≤ N, M ≤ 100, 1 ≤ S ≤ 5 × 104 ), separados por espaços em branco, indicando respectivamente o número de linhas e o número de colunas da arena e o número de instruções para o robô. Cada uma das N linhas seguintes da entrada descreve uma linha de células da arena e contém uma cadeia com M caracteres. A primeira linha que aparece na descrição da arena é a que está mais ao Norte; a primeira coluna que aparece na descrição de uma linha de células da arena é a que está mais a Oeste. Cada célula da arena pode conter um dos seguintes caracteres: ‘.’ — célula normal; ‘*’ — célula que contém uma figurinha da Copa; ‘#’ — célula que contém uma pilastra; ‘N’, ‘S’, ‘L’, ‘O’ — célula onde o robô inicia o percurso (única na arena). A letra representa a orientação inicial do robô (Norte, Sul, Leste e Oeste, respectivamente). A ultima linha da entrada contém uma sequência de S caracteres dentre ‘D’, ‘E’ e ‘F’, representando as instruções do robô. O último caso de teste é seguido por uma linha que contém apenas três números zero separados por um espaço em branco.",
        "titulo": "Robô Colecionador",
        "descricao": "Um dos esportes favoritos na Robolândia é o Rali dos Robôs. Este rali é praticado em uma arena retangular gigante de N linhas por M colunas de células quadradas. Algumas das células estão vazias, algumas contêm figurinhas da Copa (muito apreciadas pelas inteligências artificiais da Robolândia) e algumas são ocupadas por pilastras que sustentam o teto da arena. Em seu percurso os robôs podem ocupar qualquer célula da arena, exceto as que contém pilastras, que bloqueiam o seu movimento. O percurso do robô na arena durante o rali é determinado por uma sequência de instruções. Cada instrução é representada por um dos seguintes caracteres: ‘D’, ‘E’ e ‘F’, significando, respectivamente, “gire 90 graus para a direita”, “gire 90 graus para a esquerda” e “ande uma célula para a frente”. O robô começa o rali em uma posição inicial na arena e segue fielmente a sequência de instruções dada (afinal, eles são robôs!). Sempre que o robô ocupa uma célula que contém uma figurinha da Copa ele a coleta. As figurinhas da Copa não são repostas, ou seja, cada figurinha pode ser coletada uma unica vez. Quando um robô tenta andar para uma célula onde existe uma pilastra ele patina, permanecendo na célula onde estava, com a mesma orientação. O mesmo também acontece quando um robô tenta sair da arena. Dados o mapa da arena, descrevendo a posição de pilastras e figurinhas, e a sequência de instruções de um robô, você deve escrever um programa para determinar o número de figurinhas coletadas pelo robô."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1368",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha contendo um único inteiro, correspondente ao numero de tipos de cubos no conjunto dado.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha do caso de teste contém um inteiro N especificando o número de cubos no conjunto (1 ≤ N ≤ 1000). As próximas 3 x N linhas descrevem os cubos do conjunto. Na descrição as cores serão identificadas pelos números de 0 a 9. A descrição de cada cubo será dada em três linhas mostrando as cores das seis faces do cubo “aberto”, no formato dado no exemplo abaixo. No exemplo abaixo, as faces do cubo tem cores de 1 a 6, a face com cor 1 está no lado oposto da face com a cor 3, e a face com cor 2 é vizinha das faces 1, 3, 4 e 6, e está no lado oposto da face com cor 5. 1 2 4 5 6 3 O final da entrada é indicado por N = 0.",
        "titulo": "Cubos Coloridos",
        "descricao": "Crianças adoram brincar com pequenos cubos. Elas passam horas criando ‘casas’, ‘prédios’, etc. O irmãozinho de Tomaz acabou de ganhar um conjunto de blocos coloridos no seu aniversário. Cada face de cada cubo é de uma cor. Como Tomaz é uma criança muito analítica, ele decidiu descobrir quantos “tipos” diferentes de cubos o seu irmãozinho ganhou. Você pode ajuda-lo? Dois cubos são considerados do mesmo tipo se for possível rotacionar um deles de forma que as cores nas faces respectivas dos dois blocos sejam iguais."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1906",
        "saida": "A única linha da saída deve consistir de apenas um único inteiro, representando o número de possibilidades para a nova senha do Prof. Antônio Neri, considerando que o teclado contém uma tecla para cada inteiro de 1 a N e que a nova senha é uma sequência de K números que aparecem consecutivamente numa sequência de Collatz.",
        "entrada": "A única linha da entrada consiste de dois inteiros positivos N e K (N, K ≤ 107).",
        "titulo": "Senhas de Collatz",
        "descricao": "Quando o Prof. Antônio Neri, mais jovem, conheceu a Conjectura de Collatz, ficou muito fascinado. Caso você ainda não conheça a Conjectura de Collatz, ela enuncia que, para qualquer inteiro positivo X, a sequência de Collatz para X eventualmente atinge 1. A propósito, a sequência de Collatz para um inteiro positivo X é definida como a sequência infinita a0, a1, a2… tal que a0 = X e, para todo i > 0, ai = ai-1 / 2 se ai-1 é par ou ai = 3 × ai-1 + 1 se ai-1 é ímpar. Por exemplo, para X = 7, os primeiros 20 termos da sequência de Collatz são: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1, 4, 2, 1… A Conjectura de Collatz ainda não foi provada, apesar de existirem vários matemáticos brilhantes neste mundo, como o Prof. Antônio Neri. Ele continua tão fascinado pelo assunto que, noutro dia, ao olhar para o teclado do sistema de alarme da sua casa, o qual contém uma tecla para cada inteiro de 1 a N, ele resolveu trocar sua senha para que a nova senha seja uma sequência de K números que apareçam consecutivamente numa sequência de Collatz. Por exemplo, se N = 20 e K = 5, há 11 possibilidades para a nova senha do Prof. Antônio Neri: 1, 4, 2, 1, 4 2, 1, 4, 2, 1 3, 10, 5, 16, 8 4, 2, 1, 4, 2 5, 16, 8, 4, 2 6, 3, 10, 5, 16 8, 4, 2, 1, 4 10, 5, 16, 8, 4 12, 6, 3, 10, 5 16, 8, 4, 2, 1 20, 10, 5, 16, 8"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1887",
        "saida": "Para cada instância, imprima Q linhas. A i-ésima linha desse grupo de Q linhas deve conter um único inteiro que representa o custo mínimo de manutenção do sistema após a adição da i-ésima via.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por diversas linhas. A primeira linha de cada instância contém três inteiros, N, M e Q (descritos no enunciado, 1 ≤ N, M, Q ≤ 3*104) separados por um espaço. As seguintes M linhas descrevem as vias iniciais do sistema. Cada via é representada por três inteiros a, b e c (1 ≤ a, b ≤ N e 1 ≤ c ≤ 3*104), onde a e b representam as cidades que são ligadas por essa via, e c é o custo de manutenção. As Q linhas seguintes representam as vias adicionadas ao sistema. A i-ésima linha desse grupo de Q linhas descreve a i-ésima via adicionada ao sistema através de três inteiros, como no caso anterior.",
        "titulo": "As Vias Férreas Kunming-Cingapura",
        "descricao": "A via férrea Kunming-Cingapura é um conjunto de vias (já construídas e em plano de construção) que têm como objetivo ligar diferentes cidades da Ásia. Esse projeto começou em 1900 com a proposta de construir uma via férrea que ligasse a cidade de Kunming (China) a Cingapura, por parte do império britânico. Depois, em 1918, essa via férrea foi conectada ao conjunto de vias de Tailândia mediante uma via férrea que ligava Bangkok e Cingapura. No ano 2000, a ASEAN (Associação de Nações do Sudeste Asiático) propôs completar esse sistema de vias férreas. O término desse projeto está previsto para o ano 2020. Devido à importância desse sistema para a integração do sudeste asiático, as empreiteiras responsáveis têm contactado você para calcular o custo mínimo para manter este sistema ao longo do tempo. Cada via (já construída e por construir) tem um custo de manutenção. O que se deseja é, dadas as N cidades que o sistema Kumming-Cingapura liga, as M vias iniciais do sistema e as Q vias que serão adicionadas ao longo do tempo, calcular o custo mínimo para manter o sistema conectado após construir cada uma dessas Q vias. Consideramos que o sistema está conectado se, para cada par de cidades existe um conjunto de vias que as ligam."
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1440",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha contendo um único inteiro, o número máximo de clientes que poderiam ter estado dentro dos refeitórios a qualquer momento.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de cartões coletados no experimento (2 ≤ N ≤ 64800). Cada uma das próximas N linhas contém a informação escrita em um cartão, que consiste da especificação da hora, seguida por um espaço em branco, seguida pela especificação do evento. A especificação da hora é dada no formato HH:MM:SS, onde HH representa horas (06 ≤ HH ≤ 23), MM representa minutos (00 ≤ MM ≤ 59) e SS representa segundos (00 ≤ SS ≤ 59). Em cada caso de teste, nenhum par de cartões representa o mesmo instante de tempo. A especificação de evento é um único caractere: 'E' para entrada, 'X' para saída e '?' para incerto. Informações podem estar faltando, mas as informações dadas sempre estão corretas (ou seja, o instante de tempo anotado no cartão é válido). Além disso, se um cartão descreve uma entrada, então um cliente realmente entrou no refeitório naquele momento; se um cartão descreve uma saída, então um cliente realmente saiu do refeitório naquele momento; se um cartão descreve um evento incerto, então um cliente realmente entrou ou saiu de um refeitório naquele momento. O último caso de teste é seguido de uma linha contendo um único zero.",
        "titulo": "Praça de Alimentação",
        "descricao": "A administração da Universidade planeja construir uma nova praça de alimentação para substituir os vários pequenos e inadequados refeitórios espalhados pelo campus. Para estimar o número de lugares necessários na nova praça de alimentação, foi realizado um experimento para medir o número máximo de clientes dentro dos refeitórios a qualquer instante. Eles contrataram vários estudantes como porteiros, e os posicionaram em cada entrada e saída de todos os refeitórios. A tarefa dos porteiros era anotar em pequenos cartões a hora que cada cliente entrou ou saiu do refeitório (um cartão para cada evento). Em cada carta, eles escreveram a hora, no formato HH:MM:SS, e o evento associado ('E' para entrada, 'X' para saída). O experimento teve início na manhã, antes do café-da-manhã, e terminou à noite, após do jantar. Os porteiros tinham seus relógios sincronizados, e os refeitórios estavam vazios tanto antes quanto depois do experimento (ou seja, não havia nenhum cliente antes do café-da-manhã e nenhum cliente permaneceu depois do jantar). Os porteiros escreveram exatamente um cartão para cada cliente que entrou e para cada cliente que saiu. Após o experimento, os cartões foram coletadas e enviadas à administração para serem processadas. A tarefa, no entanto, não foi tão fácil como planejada, pois dois problemas ocorreram. Primeiramente, os cartões foram amontoados de forma aleatória e portanto necessitavam ser ordenados; isso é bastante fácil mas demorado para ser feito à mão. Mas o pior é que, apesar dos cartões possuirem as horas corretas, alguns porteiros esqueceram de escrever a letra correspondente ao evento. A administração da Universidade decidiu que necessitava da ajuda de um expert! Dado um conjunto de cartões com horas e eventos (o evento pode estar faltando), escreva um programa que determine o número máximo de clientes que poderiam ter estado dentro dos refeitórios a qualquer momento."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "2175",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma única linha, contendo o nome do competidor vencedor, ou seja, o mais rápido. Caso haja empate e não for possível determinar um único vencedor, deverá imprimir a palavra “Empate”, sem aspas.",
        "entrada": "Cada caso de teste consiste em uma única linha contendo três números, separados por um espaço em branco, O (0 ≤ O ≤ 100), B (0 ≤ B ≤ 100) e I (0 ≤ I ≤ 100), representando respectivamente os tempos em segundos de Otavio, Bruno e Ian. Os tempos terão no máximo 3 casas decimais.",
        "titulo": "Qual o Mais Rápido?",
        "descricao": "Otavio, Bruno e Ian são amigos de infância, apaixonados por desafios e esportes aquáticos. Em época de olimpíadas eles desafiam uns aos outros, simulando algumas competições, como a natação. O problema é que na natação, por exemplo, eles treinam bastante juntos e algumas vezes a diferença de tempo entre eles é muito curta, devido a isso, na maioria dos casos eles ficam horas e horas discutindo quem venceu. Agora eles resolveram investir no desenvolvimento de um equipamento eletrônico a ser utilizado especificamente na natação, que identifica o tempo que cada um nadou e exibe quem foi o mais rápido. Você faz parte da equipe que desenvolverá o equipamento e sua tarefa no projeto é criar um programa para receber o tempo dos 3 amigos e informar quem foi o vencedor."
    },
    {
        "nivel": "6",
        "assunto": "2",
        "numero": "1937",
        "saida": "Seu programa deve produzir uma única linha, contendo um único número inteiro, a resposta do problema. Como essa resposta pode ser muito grande, imprima-a módulo 109 + 7.",
        "entrada": "A entrada consiste de uma única linha que contém dois números inteiros N (1 ≤ N ≤ 102) e K (1 ≤ K ≤ N).",
        "titulo": "Guardiões Curiosos",
        "descricao": "Oa é um dos mundos mais antigos do universo DC, é lá que habitam os guardiões do universo. Eles administram a tropa dos lanternas verdes, uma das maiores forças do universo! Todos sabem que os lanternas verdes sabem voar devido ao poder do anel, porém nem todos os habitantes de Oa fazem parte da tropa. Para esses habitantes está difícil se locomover entre as cidades, pois não há estradas! Os guardiões desejam conectar as cidades de Oa construindo algumas estradas. Existem N cidades em Oa, e eles desejam construir N−1 estradas de duas mãos, de tal forma que seja possível chegar de uma cidade até qualquer outra, direta ou indiretamente. Os guardiões também não desejam privilegiar demais nenhuma cidade, por isso eles estabeleceram que nenhuma cidade pode ter mais de K estradas. Por exemplo, se temos três cidades e K vale 2, temos as três opções: Os guardiões, porém, são muito curiosos, e perguntaram aos lanternas verdes se eles eram capazes de dizer de quantas formas é possível construir N−1 estradas obedecendo estas restrições. Sua tarefa, como membro da tropa dos lanternas verdes é, dados N e K, satisfazer a curiosidade dos guardiões."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1832",
        "saida": "Para cada linha da entrada a saída deve ser a mensagem decodificada para o padrão ASCII, seguida de uma quebra de linha.",
        "entrada": "A entrada consiste em vários casos de teste. Cada caso de teste é representado por uma única linha, que contém os valores de cada caractere EBCDIC, em números octais de três dígitos, separados por um espaço em branco. Pode-se considerar os códigos que aparecem nas mensagens correspondem apenas à caracteres alfanuméricos e espaços em branco.",
        "titulo": "EBCDIC",
        "descricao": "O EBCDIC (Extended Binary Coded Decimal Interchange Code) é um esquema de codificação de caracteres de 8 bits desenvolvido pela IBM nos anos 60. O EBCDIC tem origem nos esquemas de codificação dos cartões perfurados, e era utilizado nos mainframes da empresa. Apesar de utilizar um intervalo maior de codificação, o esquema é menos amigável ao programador do que o esquema ASCII de 7 bits, uma vez que as letras do alfabeto não ficam em posições contíguas. A tabela a seguir apresenta a codificação EBCDIC. Células em branco representam valores que não estão associados a um caractere em particular, e dois ou mais caracteres maiúsculos indicam caracteres não imprimíveis. O caractere BLANK é o espaço em branco. Escreva um programa que receba um texto em codificação EBCDIC e o traduza para a codificação ASCII."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1514",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro, representando quantas das características citadas foram alcançadas na competição.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (3 ≤ N, M ≤ 100), indicando, respectivamente, o número de participantes e o número de problemas. Em seguida, haverá N linhas com M inteiros cada, onde o inteiro da linha i e coluna j é 1 caso o competidor i resolveu o problema j, ou 0 caso contrário. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.",
        "titulo": "Competição",
        "descricao": "A maioria dos programadores que chegam a escrever competições com exercícios de programação concordam em quatro características que toda competição deve alcançar. Embora nem todas sejam sempre alcançadas, quanto mais melhor. As características são as seguintes: Ninguém resolveu todos os problemas. Todo problema foi resolvido por pelo menos uma pessoa (não necessariamente a mesma). Não há nenhum problema resolvido por todos. Todos resolveram ao menos um problema (não necessariamente o mesmo). Rafael organizou uma competição alguns dias atrás, e está preocupado com quantas dessas características ele conseguiu alcançar com a competição. Dadas as informações sobre a competição, com o número de participantes, número de problemas, e qual participante resolveu quais problemas, descubra o número de características que foram alcançadas nesta competição."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "2138",
        "saida": "Mostre o dígito mais frequente do número informado. Em caso de empate, mostre o maior dígito.",
        "entrada": "A entrada é composta por várias linhas, contendo um inteiro N (1 ≤ N ≤ 101000). A entrada termina com fim de arquivo.",
        "titulo": "Dígito Mais Frequente",
        "descricao": "Na Nlogônia, diversos programadores participam de uma competição de criptografia denominada \"Decrypt it!\", em que aquele que decifrar o maior número de mensagens vence. No meio da competição, você percebe que, para prosseguir e decifrar uma mensagem, deverá vencer o seguinte desafio: encontrar o dígito mais frequente de um número de até 1001 dígitos."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2040",
        "saida": "Para cada caso de teste na entrada, seu programa deve produzir uma linha de saída, contendo caso o Sport seja o campeão: \"O Sport foi o campeao com X pontos :D\", sendo X a quantidade total de pontos. Caso contrário, o seu programa deve produzir a seguinte linha: \"O Sport nao foi o campeao. O time campeao foi o S com X pontos :(\", sendo S o nome do time vencedor e X a quantidade total de pontos. Deixe uma linha em branco depois de cada caso de teste.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém um inteiro N (2 ≤ N ≤ 100) representando a quantidade de times a seguir que estão participando do campeonato. Seguem Ni linhas contendo o nome do time S e a pontuação do time P até então (0 ≤ P ≤ 100). Logo após, seguem N/2 linhas contendo o placar de cada jogo da última rodada, no formato \"TimeA golsA-golsB TimeB\", conforme ilustrado no exemplo abaixo. A entrada termina com N = 0, na qual não deve ser processada.",
        "titulo": "O Campeão",
        "descricao": "Thyago é um torcedor fanático do Sport Clube de Recife e sempre acompanha as finais dos campeonatos em que seu time está jogando. Como os jogos são geralmente à noite e Thyago está ocupado nesse horário trabalhando ou ministrando aula, ele não está com tempo de ver os jogos do seu time de coração e nem acompanhar a pontuação total do campeonato ao longo do dia, no qual está na rodada final. Deoclécio, que é amigo de Thyago e também gosta muito de futebol, está assistindo o campeonato e anotou a pontuação de todos os times até então e também o placar dos jogos da rodada final. Sua tarefa é ajudar Deoclécio fazendo um programa que, dado o nome dos times participantes do campeonato, a sua pontuação até então e o placar dos últimos jogos, determine qual foi o time campeão e a pontuação final desse time. Regras desse campeonato: Cada gol marcado valerá 3 pontos; Caso os times empatem, será adicionado +1 ponto para cada time da partida; O time vencedor de uma partida ganhará +5 pontos. Observações: É garantido que sempre haverá um time vencedor do campeonato; O time Sport sempre aparece nas entradas do problema; Não haverá empates de pontuação final entre dois ou mais times após os placares dados; O nome do time da entrada sempre terá apenas uma palavra; Os nomes dos times não se repetem e não contém caracteres especiais; Nenhum dos times joga mais de uma vez (mais de uma partida no mesmo caso de teste)."
    },
    {
        "nivel": "4",
        "assunto": "2",
        "numero": "2141",
        "saida": "Assim que o HP do combatente X chegar a 0 ou ficar abaixo de 0, imprima \"X is dead.\" e na linha seguinte, o HP, MP, ATK, MAG e DEF do sobrevivente.",
        "entrada": "Haverá somente um caso de teste. A primeira linha deve conter o nome do combatente 1 e a segunda linha, seu respectivo nível (inteiro: 1 ≤ N ≤ 99), HP, MP (ponto flutuante: 1 ≤ HP, MP ≤ 999), ATK, MAG e DEF (ponto flutuante: 1 ≤ ATK, MAG, DEF ≤ 40). A terceira e a quarta linha deverá conter o mesmo que a primeira e a segunda, mas para o combatente 2. O primeiro a atacar é o combatente 1, ou seja, no primeiro turno, o combatente 1 é o atacante atual e o combatente 2 é o defensor atual. No segundo turno, o atacante é o combatente 2 e o defensor é o combatente 1. A mesma lógica se aplica nos turnos seguintes.",
        "titulo": "P4 Simplificado",
        "descricao": "Você, fã da franquia de jogos eletrônicos \"A Verdadeira Reencarnação da Deusa\", foi contratado pela empresa desenvolvedora ATULS para ajudar na criação de uma versão simplificada do jogo Personalidade 4, um spin-off dessa franquia. Você será responsável pela implementação do sistema de batalha. A tabela a seguir contém as habilidades possíveis e suas respectivas características: .p4s { border:1px solid #C0C0C0; border-collapse:collapse; padding:5px; width: 100%; } .p4s th { border:1px solid #C0C0C0; padding:5px; background:#F0F0F0; } .p4s td { border:1px solid #C0C0C0; text-align:center; padding:5px; } Habilidade Tipo Poder Custo HP Custo MP Efeito MightySwing Físico 270 14% - - GiganticFist Físico 560 16% - - RainyDeath Físico 350 20% - - Agilao Mágico - Fogo 200 - 8 - Agidyne Mágico - Fogo 320 - 12 - Bufula Mágico - Gelo 200 - 8 - Bufudyne Mágico - Gelo 320 - 12 - Megidola Mágico 360 - 32 - Megidolaon Mágico 420 - 60 - BlackViper Mágico 440 - 64 - Tarukaja Suporte - - 12 Ataque Físico atual do atacante aumenta em 25% e fica ativo até que ele use um atk físico Rakukaja Suporte - - 12 Defesa atual do atacante aumenta em 25% e fica ativo até que ele sofra um atk qualquer Tarunda Suporte - - 12 Ataque Físico atual do defensor diminui em 25% e fica ativo até que ele use um atk físico Rakunda Suporte - - 12 Defesa atual do defensor diminui em 25% e fica ativo até que ele sofra um atk qualquer OBS.: As habilidades do tipo Suporte não acumulam e sempre consomem MP, mesmo não tendo mais efeito. Por exemplo, se o jogador usa a habilidade Rakunda 5 vezes seguida, a DEF do defensor ainda será 25% menor e o consumo de MP terá sido 60. Para testar a funcionalidade desse sistema, você deverá considerar uma batalha 1 vs. 1. Cada combatente terá nível, HP (pontos de vida), MP (pontos de magia) e os atributos ATK (ataque físico), MAG (ataque mágico) e DEF (defesa geral). A fórmula de dano é a seguinte: AT = Ataque do atacante atual. Se ataque físico, substitua por ATK, se ataque mágico, substitua por MAG. DF = Defesa geral do defensor atual, isto é, o atributo DEF. P = Poder do ataque. DIFF = Diferença entre o nível do atacante atual e o nível do defensor atual. Este valor não será menor do que -10 e nem maior do que 10."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1375",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir apenas uma linha, contendo o grid de largada reconstruído, com o número dos carros separados por um espaço. Se não foi possível reconstruir um grid de largada válido, a linha deve conter -1.",
        "entrada": "O arquivo de entrada contém vários casos de teste. A primeira linha do teste contém um valor inteiro N indicando o número de carros na corrida (2 ≤ N ≤ 10³). As próximas N linhas contém dois inteiros C e P, separados por um espaço, representando o número do carro (1 ≤ C ≤ 104) e o número de posições que o carro ganhou ou perdeu relativo ao grid de largada (-106 ≤ P ≤ 106), de acordo com o painel de posições. Todos os carros na corrida tem números diferentes. O último caso de teste é seguido por uma linha que contém apenas um número zero.",
        "titulo": "Painel de Posições",
        "descricao": "Em corridas de carro, sempre há um painel perto da linha de chegada da pista. Antes da corrida começar, o painel é usado para mostrar o grid de largada. O número do primeiro carro do grid é mostrado no topo do painel, o número do segundo carro é mostrado em baixo dele e assim por diante. Durante a corrida o painel é usado para mostrar as posições atuais de cada carro: o carro que está ganhando tem seu número a mostra no topo do painel, seguido do carro que está em segundo e assim por diante. Além de mostrar a posição atual do carro, o painel  também é usado para mostrar o número de posições que o carro ganhou ou perdeu relativo ao grid de largada. Isso é feito, mostrando do lado do número do carro, um número inteiro. Um valor positivo v do lado do número do carro no painel, que significa que o carro ganhou v posições relativo a sua posição inicial no grid. Um zero do lado do número do carro no painel, significa que ele não ganhou nem perdeu posições no grid (o carro está na mesma posição que iniciou a corrida). Nós estamos no meio do Grand Prix da Suécia, a última corrida do Campeonato Mundial. O diretor de prova, Dr. Shoo Makra, está ficando preocupado: houve algumas reclamações que o Software que controla o painel de posições é defeituoso, mostrando informações que não refletem a ordem correta de posições da corrida. Dr. Shoo Makra desenvolveu um jeito de checar se o sistema do painel de posições está funcionando corretamente. Dada a informação exibida no painel de posições, ele quer reconstruir o grid de largada da corrida. Se for possível reconstruir um grid de largada válido, ele planeja checar ele contra o grid de largada real. No entanto, se não for possível reconstruir um grid de largada valido, o sistema do painel de posições está mesmo defeituoso. Você pode ajudar o Dr. Shoo Makra?"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "2202",
        "saida": "For each test case, display its case number followed by the width of the smallest trash chute through which it can be dropped. Display the minimum width with exactly two digits to the right of the decimal point, rounding up to the nearest multiple of 1/100. Answers within 1/100 of the correct rounded answer will be accepted. Follow the format of the sample output.",
        "entrada": "The input contains several test cases. Each test case starts with a line containing an integer n (3 ≤ n ≤ 100), the number of points in the polygon that models the trash item. The next n lines then contain pairs of integers xi and yi (0 ≤ xi , yi ≤ 104 ), giving the coordinates of the polygon vertices in order. All points in one test case are guaranteed to be mutually distinct and the polygon sides will never intersect. (Technically, there is one inevitable exception of two neighboring sides sharing their common vertex. Of course, this is not considered an intersection.) The last test case is followed by a line containing a single zero.",
        "titulo": "Trash Removal",
        "descricao": "Allied Chute Manufacturers is a company that builds trash chutes. A trash chute is a hollow tube installed in buildings so that trash dropped in at the top will fall down and be collected in the basement. Designing trash chutes is actually highly nontrivial. Depending on what kind of trash people are expected to drop into them, the trash chute needs to have an appropriate size. And since the cost of manufacturing a trash chute is proportional to its size, the company always would like to build a chute that is as small as possible. Choosing the right size can be tough though. We will consider a 2-dimensional simplification of the chute design problem. A trash chute points straight down and has a constant width. Objects that will be dropped into the trash chute are modeled as polygons. Before an object is dropped into the chute it can be rotated so as to provide an optimal fit. Once dropped, it will travel on a straight path downwards and will not rotate in flight. The following figure shows how an object is first rotated so it fits into the trash chute. Your task is to compute the smallest chute width that will allow a given polygon to pass through."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1877",
        "saida": "Imprima uma linha contendo a palavra beautiful se o castelo dado é bonito, ou a palavra ugly caso contrário.",
        "entrada": "A primeira linha contém dois inteiros N e K (1 ≤ N ≤ 1000, 1 ≤ K ≤ N). A segunda linha contém N inteiros h1, h2, ..., hN (1 ≤ hi ≤ 100), as alturas das torres, em centímetros. A primeira e a última torre sempre terão 1 centímetro de altura. Duas torres consecutivas nunca terão a mesma altura.",
        "titulo": "O Castelo de Neve de Sansa",
        "descricao": "Robin: \"O que você está fazendo?\" Sansa: \"Estou construindo minha casa, Winterfell.\" Sansa está construindo um castelo de neve no jardim do Ninho da Águia. O castelo de neve é feito para parecer com o verdadeiro castelo de Winterfell. O castelo de neve pode ser descrito como uma sequência de N torres de neve, numeradas de 1 a N da esquerda para a direita. A altura da torre i (1 ≤ i ≤ N) é igual a hi centímetros. Sansa diz que o castelo é bonito se ele consiste em uma sequência de K \"picos\" alterados com K-1 \"vales\", como o castelo de Winterfell. Em outras palavras, o castelo é bonito se existe uma sequência de K torres T1 < T2 < ... < TK tal que: As alturas das torres no intervalo [1, T1] estão em ordem crescente; Existe um \"vale\" no intervalo [Ti, Ti+1], para todo 1 ≤ i < K; As alturas das torres no intervalo [TK, N] estão em ordem decrescente. Existe um \"vale\" em um intervalo [A, B] se B ≥ A+2 e existe alguma torre J, A ≤ J ≤ B, tal que as alturas das torres no intervalo [A,J] estão em ordem decrescente, e as alturas das torres no intervalo [J,B] estão em ordem crescente. Ajude Sansa a determinar se seu castelo é bonito ou não!"
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1627",
        "saida": "Para cada caso de teste imprima uma linha contendo um nome, sendo ele “Andre” caso este seja o último a atacar o monstro, ou “Beto” caso contrário.",
        "entrada": "A primeira linha contém um inteiro T, indicando o número de casos de teste a seguir. Cada caso de teste inicia com quatro inteiros At, Ad, Bt e Bd (1 ≤ At, Ad, Bt, Bd ≤ 100), indicando o dano de ataque e o tempo de espera entre dois ataques consecutivos de André e Beto, respectivamente. Em seguida haverá um inteiro H (1 ≤ H ≤ 10000), indicando o número de pontos de vida do monstro.",
        "titulo": "Último Dano",
        "descricao": "André e Beto estão jogando um jogo de computador que recompensa os jogadores de uma maneira bem particular: apenas aquele que der o último dano para derrotar um monstro leva todo o ouro que o mesmo deixar para trás. Isso implica que, mesmo que outros jogadores tenham ajudado a derrotar o monstro, apenas aquele que atacar por último será recompensado. André está intrigado com este sistema, e pediu sua ajuda. Dado o número de pontos de vida do monstro, o dano dado por André e Beto, e o tempo de espera necessário para que dois ataques sucessivos sejam realizados, descubra quem dará o último dano ao monstro, o derrotando e recebendo o ouro. No início ambos André e Beto irão atacar, infringindo At e Bt pontos de dano ao monstro, respectivamente. Após cada ataque, tanto André quanto Beto tem que esperar exatos Ad e Bd segundos, respectivamente, antes de atacar novamente. Sempre que André e Beto puderem atacar ao mesmo no tempo (como no início), André tem a prioridade e ataca primeiro. Um monstro é derrotado quando seus pontos de vida chegam a menor ou igual a zero."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1940",
        "saida": "Seu programa deve produzir uma única linha, contendo o inteiro correspondente ao jogador vencedor.",
        "entrada": "A entrada consiste de duas linhas. A primeira linha contém dois inteiros J e R, o número de jogadores e de rodadas respectivamente (1 ≤ J, R ≤ 500). A segunda linha contém J × R inteiros, correspondentes aos Pontos de Vitória em cada uma das jogadas feitas, na ordem em que aconteceram. Os Pontos de Vitória obtidos em cada jogada serão sempre inteiros entre 0 e 100, inclusive.",
        "titulo": "Jogo da Estratégia",
        "descricao": "Um jogo de estratégia, com J jogadores, é jogado em volta de uma mesa. O primeiro a jogar é o jogador 1, o segundo a jogar é o jogador 2 e assim por diante. Uma vez completada uma rodada, novamente o jogador 1 faz sua jogada e a ordem dos jogadores se repete novamente. A cada jogada, um jogador garante uma certa quantidade de Pontos de Vitória. A pontuação de cada jogador consiste na soma dos Pontos de Vitória de cada uma das suas jogadas. Dado o número de jogadores, o número de rodadas e uma lista representando os Pontos de Vitória na ordem em que foram obtidos, você deve determinar qual é o jogador vencedor. Caso mais de um jogador obtenha a pontuação máxima, o jogador com pontuação máxima que tiver jogado por último é o vencedor."
    },
    {
        "nivel": "1",
        "assunto": "2",
        "numero": "1998",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um único caractere. Este caractere deve ser a letra maiúscula 'S' se é possível ganhar o jogo; Caso contrário, deve-se a letra maiúscula 'N'.",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém um inteiro N, indicando o número de caixas (1 ≤ N ≤ 500). A segunda linha contém N números inteiros Pi, que representa o número de pedras nas caixas no início do jogo, a partir da caixa 1 para a caixa N, respectivamente (0 ≤ P_i ≤ 500 para i = 1, ..., N) . Em cada caso de teste que haja pelo menos uma caixa não vazia, isto é, existe i de 1 a N tal que Pi ≠ 0. O fim da linha de entrada é uma linha que contém o número -1.",
        "titulo": "Awari 2.0",
        "descricao": "Awari é um jogo de um jogador das Antilhas, que é jogado com caixas e pedras em vez de cartões. Outra versão de Awari é jogado com N caixas numeradas de 1 a N, cada uma contendo, no início do jogo, zero ou mais pedras. As regras deste jogo são muito simples, porque há apenas um tipo de movimento válido, que consiste em escolher uma caixa numerada i que contém exatamente i pedras, e em seguida, pegar essas pedras da caixa, a fim de usá-las para adicionar uma única pedra para cada caixa numerada de 1 a i-1; a pedra restante é mantida pelo jogador. Estes movimentos são aplicados em sucessão, desde que exista uma caixa i que contém exatamente i pedras. Quando isso não é mais verdade, o jogo termina. O jogador ganha se, nesta fase, cada caixa está vazia, e perde caso contrário. Na figura a seguir, no lado esquerdo há um possível estado inicial de um jogo com n = 5 caixas (os círculos) contendo P1 = 0, P2 = 1 , P3= 3, P4 = 0 e P5 = 2 pedras (os pontos pretos). Se a caixa de número 3, que contém P3 = 3 pedras, foi escolhida para dar o próximo passo, a configuração resultante seria a do mostrado no lado direito da figura. Além disso, para o jogador teria agora uma pedra em seu poder. Dado o estado inicial das caixas, você deve determinar se é possível ganhar o jogo, ou seja, se houver uma sequência de movimentos válidos que depois de todas as caixas são deixadas vazias."
    },
    {
        "nivel": "2",
        "assunto": "2",
        "numero": "1419",
        "saida": "Para cada caso de teste imprima uma linha com um caractere representando o resultado do jogo: \"M\" caso o vencedor seja Mark, \"L\" caso o vencedor seja Leti, ou \"T\" caso haja um empate (tie).",
        "entrada": "Cada caso de testo é descrito por três linhas. A primeira linha contém um inteiro R indicando o número de rodadas do jogo (1 ≤ R ≤ 10). A segunda linha contém R inteiros Mi indicando os monstros liberados por Mark a cada rodada (1 ≤ Mi ≤ 10, para 1 ≤ i ≤ R). A terceira linha contém R inteiros Li indicando os monstros liberados por Leti a cada rodada (1 ≤ Li ≤ 10, para 1 ≤ i ≤ R). O último caso de teste é composto por uma linha contendo zero.",
        "titulo": "Bakugan",
        "descricao": "Mark e Leti adoram brincar com suas bolas Bakugan. Essas bolas são pequenas esferas de plástico com um pequeno brinquedo-monstro dentro. Quando jogada ao chão, a bola Bakugan se abre, fazendo um som incrível e liberando um monstro Bakugan assustador. Mark e Leti adoram brincar com seus monstros, mas abrir as bolas Bakugan também é bem divertido. Cada um deles recebeu uma bolsa com bolas Bakugan e eles inventaram um jogo para abrir as bolas. Existem 10 monstros diferentes, e para o jogo Mark e Leti associaram cada monstro a um inteiro diferente de 1 a 10, de acordo com o nível de feiura do monstro. O jogo é composto de R rodadas. A cada rodada: Os dois jogadores jogam suas bolas ao chão simultaneamente; Cada jogador acumula um número de pontos coincidente com o número associado ao monstro liberado por sua bola; O primeiro (e apenas o primeiro) jogador que liberar o mesmo monstro em três rodadas consecutivas ganha 30 pontos adicionais; se essa condição acontecer na mesma rodada para ambos os jogadores então ninguém ganha pontos extras. O vencedor do jogo é o jogador que acumular mais pontos. Por favor ajude Mark e Leti anunciar o vencedor do jogo!"
    },
    {
        "nivel": "5",
        "assunto": "2",
        "numero": "1888",
        "saida": "Para cada instância, imprima um número real arredondado para 3 casas decimais com a diferença mínima esperada entre as duas inscrições. Imprima a resposta com exatamente 3 casas decimais.",
        "entrada": "A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância inicia com 3 inteiros, N, M (1 ≤ N, M ≤ 3.000), e K (0 ≤ K ≤ 100.000), onde N é o tamanho da primeira inscrição e M é o tamanho da segunda inscrição. As próximas duas linhas contém, respectivamente, a primeira e a segunda inscrição. Uma inscrição consiste de uma cadeia de caracteres de 'a' a 'z'.",
        "titulo": "Os chedis de Kamphaeng Phet",
        "descricao": "Um chedi (conhecido também como estupa, pagode ou dágaba) é um monumento geralmente em formato de torre cônica construído sobre os restos mortais de uma pessoa importante da religião budista. Alguns sítios históricos tailandeses contêm dezenas desses monumentos, muitos deles dedicados a monges ou líderes religiosos antigos (bhikkhu - ภิกษุณี, como são chamados na Tailândia). Vários desses monges dedicaram suas vidas à contemplação e oração a diferentes entidades. Para citar um exemplo, no sítio de Kamphaeng Phet encontram-se vários chedi em que as inscrições fazem referência a Garuda (ครุฑ) (não confunda com o personagem homônimo do Street Fighter). O mesmo se repete no sítio de Si Satchanalai e de Sukhothai. A língua tai tem diferenças muito sutis entre as diferentes letras, que torna a análise dos especialistas extremamente difícil. Por exemplo, quando qualquer símbolo da palavra correspondente ao deus Ramakien (รามเกียรติ์) é mudado, seu significado é completamente alterado. Lembrando que algumas dessas ruínas têm mais de 700 anos, estes escritos já sofrem a ação do tempo e de vândalos há séculos. Assim, o trabalho desses pesquisadores é muito complicado. Um outro exemplo é o par de inscrições abaixo encontrada em chedis diferentes. จัดษุตังขึ้นโดยพรภิะบมพุธานุญาษุ จัดตั้งขึ้โกดยพระบรมษุพุทธานญาต Os especialistas acreditam que se refiram à mesma entidade. Para chegar a essa conclusão, eles desenvolveram um método que chamam de análise da diferença probabilística mínima. Essa análise funciona da seguinte maneira. Sejam a = a1a2...aN e b = b1b2...bM duas inscrições com N e M caracteres, respectivamente. O valor do parâmetro chamado diferença é inicializado com zero. A cada passo, analisa-se um par de caracteres (ai, bj), com 1 ≤ i ≤ N + 1 e 1 ≤ j ≤ M + 1, começando por (a1,b1). Note que quando i = N + 1, ai é o caracter vazio e o mesmo vale para bj quando j = M + 1. Se ai = bj, pode-se considerar que existe uma correspondência entre tais caracteres nas inscrições e trocar o par atual por (ai+1, bj+1). Tal correspondência nunca existe se ai ≠ bj e um caracter de uma inscrição nunca pode corresponder a dois caracteres da outra inscrição. Se for considerado que não existe correspondência entre os caracteres do par, então o valor da diferença deve ser aumentada por uma das seguintes formas: adicionando 1 à diferença e trocando o par atual por (ai+1, bj) ou por (ai, bj+1); adicionado K à diferença e trocando o par atual por (ai+x, bj+y), onde x e y são escolhidos aleatoriamente com distribuição uniforme nos intervalos [1, N-i+1] e [1, M-j+1], respectivamente. Se i > N, apenas y varia aleatoriamente. Se j > M, apenas x varia aleatoriamente. A análise termina quando os caracteres ai e bj são ambos o caracter vazio. Note que o valor da diferença pode variar de acordo com as escolhas tomadas. Os especialistas consideram que quanto menor for a diferença obtida, maior será a correspondência entre as inscrições. Assim, eles pedem que você escreva um programa para encontrar a diferença mínima esperada entre duas inscrições."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1246",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha contendo um número inteiro representando o faturamento do estacionamento, em reais.",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de um caso de teste contém dois números inteiros C (1 ≤ C ≤ 1000) e N (1 ≤ N ≤ 10000) que indicam respectivamente o comprimento em metros do estacionamento e o número total de eventos ocorridos (chegadas e saídas de veículos). Cada uma das N linhas seguintes descreve uma chegada ou saída. Para uma chegada de veículo, a linha contém a letra 'C', seguida de dois inteiros P (1000 ≤ P ≤ 9999) e Q (1 ≤ Q ≤ 1000), todos separados por um espaço em branco. P indica a placa do veículo e Q o seu comprimento. Para uma saída de veículo, a linha contém a letra 'S' seguida de um inteiro P , separados por um espaço em branco, onde P indica a placa do veículo. As ações são dadas na ordem cronológica, ou seja, na ordem em que acontecem. No início de cada caso de teste o estacionamento está vazio. No arquivo de entrada, um veículo sai do estacionamento somente se está realmente estacionado, e a placa de um veículo que chega ao estacionamento nunca é igual a placa de um veículo já estacionado.",
        "titulo": "Estacionamento",
        "descricao": "Um estacionamento utiliza um terreno em que os veículos têm que ser guardados em fila única, um atrás do outro. A tarifa tem o valor fixo de R$ 10,00 por veiculo estacionado, cobrada na entrada, independente de seu porte e tempo de permanência. Como o estacionamento é muito concorrido, nem todos os veículos que chegam ao estacionamento conseguem lugar para estacionar. Quando um veículo chega ao estacionamento, o atendente primeiro determina se há vaga para esse veículo. Para isso, ele percorre a pé o estacionamento, do início ao fim, procurando um espaço que esteja vago e tenha comprimento maior ou igual ao comprimento do veículo. Para economizar seu tempo e energia, o atendente escolhe o primeiro espaço adequado que encontrar; isto é, o espaço mais próximo do início. Uma vez encontrada a vaga para o veículo, o atendente volta para a entrada do estacionamento, pega o veículo e o estaciona no começo do espaço encontrado. Se o atendente não encontrar um espaço adequado, o veículo não entra no estacionamento e a tarifa não é cobrada. Depois de estacionado, o veículo não é movido até o momento em que sai do estacionamento. O dono do estacionamento está preocupado em saber se os atendentes têm cobrado corretamente a tarifa dos veículos estacionados e pediu para você escrever um programa que, dada a lista de chegadas e saídas de veículos no estacionamento, determina o faturamento total esperado."
    },
    {
        "nivel": "3",
        "assunto": "2",
        "numero": "1357",
        "saida": "Para cada caso de teste imprima apenas os dígitos da tradução correspondente, no mesmo formato que a entrada (veja os exemplos para maiores explicações).",
        "entrada": "Cada caso de teste é descrito usando três ou cinco linhas. A primeira linha contém um inteiro D representando o número de dígitos em uma mensagem (1 ≤ D ≤ 100). A segunda linha contém uma única letra maiúscula 'S' ou 'B'. Se a letra é 'S', a próxima linha contém uma mensagem composta de D dígitos decimais que seu programa deve traduzir para o Braille. Se a letra é 'B', as próxima três linhas contém uma mensagem composta de D células Braille que seu programa deve traduzir do Braille. As células Braille são separadas por espaços simples. Em cada célula Braille uma posição relevada é denotada pelo caractere '*' (asterisco), enquanto uma não relevada é denotada por um caractere '.' (ponto). O último caso de teste é seguido por uma linha contendo um zero.",
        "titulo": "Em Braille",
        "descricao": "O sistema Braille, desenvolvido por Louis Braille em 1825, revolucionou a comunicação escrita para as pessoas cegas e visualmente debilitadas. Braille, um francês cego, desenvolveu uma linguagem tátil onde cada elemento é representado por uma célula com seis posições, arranjadas em três fileiras e duas colunas. Cada posição pode ser relevada ou não, permitindo 64 configurações diferentes que podem ser sentidas por dedos treinados. A figura abaixo mostra a representação Braille para os dígitos decimais (um ponto preto indica uma posição relevada). ​ De modo a desenvolver um novo sistema de software para ajudar professores a lidar com estudantes cegos ou visualmente debilitados, um módulo de dicionário Braille é necessário. Dada uma mensagem, composta apenas por dígitos, seu trabalho é traduzi-la para ou do Braille. Você pode ajudar?"
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1253",
        "saida": "Para cada caso de teste de entrada, imprima uma linha de saída com o texto decodificado (transformado novamente para o texto original) conforme as regras acima e o exemplo abaixo.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha contém uma string com até 50 caracteres maiúsculos ('A'-'Z'), que é a sentença após ela ter sido codificada através desta Cifra de César modificada. A segunda linha contém um número que varia de 0 a 25 e que representa quantas posições cada letra foi deslocada para a direita.",
        "titulo": "Cifra de César",
        "descricao": "Júlio César usava um sistema de criptografia, agora conhecido como Cifra de César, que trocava cada letra pelo equivalente em duas posições à direita no alfabeto (por exemplo, 'A' vira 'C', 'R' vira 'T', etc.). Ao fim do alfabeto nós voltamos para o começo, isto é 'Y' vira 'A'. Nós podemos, é claro, tentar trocar as letras com quaisquer número de posições."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1235",
        "saida": "Para cada linha de entrada deverá ser impressa uma linha de saída com a frase decifrada, conforme a especificação acima.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Seguem N linhas, cada uma com uma frase com no mínimo 2 e no máximo 100 caracteres de letras maiúsculas e espaços que deverá ser desembaralhada (decifrada) à partir da forma impressa para a sua forma original, conforme especificação acima.",
        "titulo": "De Dentro para Fora",
        "descricao": "A sua impressora foi infectada por um vírus e está imprimindo de forma incorreta. Depois de olhar para várias páginas impressas por um tempo, você percebe que ele está imprimindo cada linha de dentro para fora. Em outras palavras, a metade esquerda de cada linha está sendo impressa a partir do meio da página até a margem esquerda. Do mesmo modo, a metade direita de cada linha está sendo impressa à partir da margem direita e prosseguindo em direção ao centro da página. Por exemplo a linha: THIS LINE IS GIBBERISH está sendo impressa como: I ENIL SIHTHSIREBBIG S Da mesma foma, a linha \" MANGOS \" está sendo impressa incorretamente como \"NAM  SOG\". Sua tarefa é desembaralhar (decifrar) a string a partir da forma como ela foi impressa para a sua forma original. Você pode assumir que cada linha conterá um número par de caracteres."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1491",
        "saida": "Para cada caso de teste imprima N linhas, cada uma delas contendo um inteiro. Na enésima (i-th) linha escreva o número máximo de casos de compatibilidade das ocorrências de T nas enésimas (i-th) seleções de substring, considerando todas as inversões de case feitas pelas seleções anteriores. Se tal ocorrência não existir, imprima o valor −1.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF.  A primeira linha de um caso de teste contém um N (1 ≤ N ≤ 105 ) e uma string não vazia T com no máximo 5 letras, representando respectivamente o número de seleções de substring e a string a ser selecionadar. A segunda linha contém uma string não vazia P com no máximo 105 letras, indicando o texto original postado no blog. Posições do post são numerados com inteiros consecutivos da esquerda para a direita, sendo 1 a posição mais à esquerda e |P| a posição mais à direita. Cada uma das próximas N linhas descreve uma seleção de substring com 2 inteiros L e R (1 ≤ L ≤ R ≤ |P|) indicando que a substring inicia na posição L e termina na posição R, inclusive.",
        "titulo": "Linguagem de Blogger",
        "descricao": "Brenda, neta de Benjamin, tem um blog onde ela posta artigos sobre a escola, os amigos e outras questões da vida. Intrigado com suas opiniões, Benjamin tentou lê-lo, mas logo se deu conta de que era muito difícil de ler por causa das peculiaridades da escrita de Brenda. Brenda escreve sem espaços ou sinais de pontuação, e, além disso, ela usa letras minúsculas e maiúsculas de uma forma liberal e estranha. Por exemplo, uma das suas mensagens é \"PrOgRAMmINgiSgrEAt\". Benjamin tem dificuldade em perceber as palavras \"programming\", \"is\" e \"great\" quando são escritos desta forma. Para melhorar a sua compreensão, Benjamin decidiu fazer o seguinte: ele vai primeiro escolher uma determinada string T e um post do blog no qual ele está interessado e, em seguida, ele irá selecionar uma substring contígua do post e irá procurar T dentro da substring, de uma forma case-insensitive. Para cada ocorrência de T dentro da substring, ele vai calcular o número de incompatibilidade de case e, finalmente, ele vai obter o máximo entre todos esses valores. Por exemplo, se Benjamin escolhe \"GR\", como T e, em seguida, seleciona a substring \"“PrOgRAM\", ele iria encontrar uma ocorrência única \"gR\" para o qual o número de incompatibilidade de case é 1. Pela mesma subsequência, se \"r\" foi escolhido como T, ele teria encontrado duas ocorrências, \"r\" com 0 incompatibilidades e \"R\", com uma incompatibilidade, portanto, o número máximo de incompatibilidades seria 1. Para complicar mais as coisas, Brenda incluíu no blog um script que, depois da operação com a seleção de uma substring, inverte o \"case\" de todas as letras selecionadas. Isto significa que após selecionar “PrOgRAM” e proceder como explicado acima, o post exemplo seria lido como “pRoGrammINgiSgrEAt”. Se Benjamin seleciionar “ammINgi” como uma segunda substring, após calcular o seu resultado o post será deixado como “pRoGrAMMinGISgrEAt”, acumulando as duas inversões. Você receberá a string T e o texto original do post do blog escolhido por Benjamin. A você serão também fornecido uma lista com as seleções de substring feitas por Benjamin, a fim de fazê-las. Você precisa calcular, para cada seleção, o número máximo de cases incompatíveis das ocorrências de T na parte selecionada, considerando todas as inversões feitans pelas seleções anteriores. Observe que a inversão de case ocorre após o cálculo do resultado de cada seleção."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1781",
        "saida": "Para cada caso imprima “Caso #X:”, onde X é o número do caso atual, começando em 1. Para cada operação 2, imprima em uma nova linha como a string S se encontra depois de todas as operações anteriores terem sido executadas. A saída possui aproximadamente 3*10⁶ caracteres.",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. A primeira linha de cada caso de teste possui S (1 ≤ |S| ≤ 10⁴), a string que Guga possui. A segunda linha de cada caso possui Q (1 ≤ Q ≤ 10⁵) , o número de operações que Guga irá executar em S. Cada uma das próximas Q linhas possuem uma operação como explicado acima. Para cada operação, 0 ≤ x ≤ |S|.",
        "titulo": "Guga e a String",
        "descricao": "Guga tem uma string S contendo apenas letras minúsculas e quer fazer operações nela. Cada operação pode ser de um dos seguintes tipos: 0 x, deslocar cada vogal de S x posições da esquerda pra direita (voltando para o começo, caso necessário) 1 x, deslocar cada consoante de S x posições da esquerda pra direita (voltando para o começo, caso necessário) 2, imprimir como S se encontra atualmente As vogais que estamos considerando são as letras a, e, i, o e u. Uma operação do tipo 0 só desloca vogais por posições de S que possuem vogais. Uma operação do tipo 1 só desloca consoantes por posições de S que possuem consoantes. Por exemplo, A string “computador” após a operação 1 2 fica “dorcumapot”, ou seja, cada consoante vai para a posição em S da segunda próxima consoante. A string “abe” após a operação 0 1, fica “eba”."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "2049",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador \"Instancia h\" em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deverá imprimir \"verdadeira\" se a sequência de números contém a assinatura do artista ou \"falsa\" em caso contrário. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "São dadas várias instâncias de teste. Cada instância começa com um número inteiro positivo 0 ≤ a ≤ 1000000 que é a assinatura do artista. O inteiro 0 indica o fim dos dados. Na linha seguinte vem a sequência de números do painel, que poderá ter até 300000 algarismos.",
        "titulo": "Números de Ahmoc",
        "descricao": "Antes da colonização hispânica e depois inglesa, a região de San Antonio era dominada pelos índios ahmoc-axhozupeck, ancestrais dos sioux e dos apaches. A etnia foi completamente destruída pelos colonizadores, no século XVIII, tornando impossível a tarefa de decifrar seus grandes painéis. O Departamento de Arqueologia da Universidade Baylor dedica boa parte de sua pesquisa aos painéis dos índios Ahmoc. Surpreendentemente os índios já conheciam os algarismos hindus, mas não o usavam para cálculos (afinal não existia comércio naquela civilização). Os arqueólogos de Baylor suspeitam que os painéis repletos de números fossem apenas decorativos. Também suspeitam que alguns padrões que se repetiam eram assinaturas dos artistas, a fim de garantir a autenticidade do painel. Sua tarefa neste problema será verificar se os painéis são verdadeiros, ou seja, se, de fato, contêm a assinatura do artista que o arqueólogo suspeita ser o autor."
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "1607",
        "saida": "Para cada caso imprima o número mínimo de operações.",
        "entrada": "Na primeira linha terá um inteiro T (T ≤ 100) indicando o número de casos de teste. Para cada caso, na única linha teremos as duas strings A (1 ≤ |A| ≤ 100* ou 1 ≤ |A| ≤ 104** - sendo que |A| significa o tamanho da string A) e B (|B| = |A|* ou |B| = |A​|**) separadas por um espaço. Ambas as strings são compostas por letras do alfabeto minúsculas apenas e são do mesmo tamanho. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste.",
        "titulo": "Avance as Letras",
        "descricao": "É dado na entrada uma string A e outra B. Em uma operação você pode escolher uma letra da primeira string e avançar esta letra. Avançar uma letra significa transformá-la na próxima letra do alfabeto, veja que a próxima letra depois de z vem a letra a novamente! Por exemplo, podemos transformar a string ab em bd em no mínimo 3 operações: ab -> bb -> bc -> bd. Podemos aplicar operações nas letras em qualquer ordem, outra possibilidade seria: ab -> ac -> bc -> bd. Dadas as duas strings, calcule o mínimo número de operações necessárias para transformar a primeira na segunda."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1249",
        "saida": "Para cada linha da entrada, imprima uma linha na saída com a mensagem cifrada pelo método rot13.",
        "entrada": "A entrada contém vários casos de teste e termina com final de arquivo (EOF). Cada caso de teste consiste de uma linha que contém uma mensagem com no mínimo 1 no máximo 50 caracteres inclusive, contendo letras, números, e os símbolos: !@#$%^&*()-_=+[]{}|;':,./?\"",
        "titulo": "Rot13",
        "descricao": "Escreva um programa que receba uma mensagem \"secreta\" e retorne esta mensagem codificada. A mensagem é codificada com uma cifra chamada rot13. Rot13 funciona da seguinte maneira, é atribuido para cada letra um índice, baseado em sua posição no alfabeto. a = 1, b = 2, c = 3, ..., z = 26. Cada letra da mensagem deve ser deslocada 13 posições para a direita, se o fim do alfabeto for atingido, a contagem recomeça no primeiro caracter do alfabeto. Por exemplo, o caracter \"a\" (aspas apenas para evidenciar), seria mapeado para \"n\", \"y\" para \"l\", \"f\" para \"s\", e assim por diante. O mesmo processo é feito para letras maiúsculas também. Quaisquer caracteres não-alfabéticos devem ser repassados para a saída sem alterações."
    },
    {
        "nivel": "7",
        "assunto": "3",
        "numero": "1686",
        "saida": "Para cada caso de teste imprima uma linha com o valor máximo de uma seqüência de palíndromos com deslocamento D na string S.",
        "entrada": "Cada entrada é descrita por 2 linhas. A primeira linha contém dois inteiros N e D (1 <= N <=10^5), 1 <= D <=10^5) representando, respectivamente, o tamanho da string e o valor do deslocamento. A segunda linha contém N caracteres minúsculos formando a string S. A última entrada contém dois zeros.",
        "titulo": "Sequência de Palíndromos",
        "descricao": "Dada uma string s[1..N], definimos uma sequência de palíndromos de tamanho p e deslocamento d (1 = 1) substrings disjuntas em s (cada sequência sendo um palíndromo de tamanho p) e com distâncida d entre caracteres nos diferentes palíndromos. Formalmente, essas sequências disjuntas em S formam um conjunto : A= (s[i..i+p-1], s[i+d..i+d+p-1], s[i+2d..i+2d+p-1], ...) onde cada elemento de A é um palíndromo de tamanho p. Lembre-se que um palíndromo é uma sequência que pode ser lida do mesmo jeito do começo para o fim e do fim para o começo. O valor de uma sequência de palíndromos é o número total de caracteres usados de S (Se a sequência de k palíndromos de tamanho p, seu valor será k*p). Fixado um deslocamento D e dada uma string S, calcule a sequência de palíndromos de maior valor contida em S"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1335",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro representando o número de conjuntos não-vazios pesquisáveis.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém um inteiro F representando o número de arquivos do seu disco rígido (1 ≤ F ≤ 60). Cada uma das F linhas sequintes indica o conteúdo de um dos arquivos. O conteúdo de um arquivo é uma cadeia não-vazia de no máximo 104 caracteres; cada caracteres é uma das 26 letras minúsculas (de 'a' até 'z'). O último caso de teste é seguido por uma linha contendo um zero.",
        "titulo": "Recuperação de Arquivos",
        "descricao": "O sistema operacional do seu computador indexa os arquivos do seu disco rígido baseado no seu conteúdo, e provê busca textual sobre eles. O conteúdo de cada arquivo é uma cadeia não-vazia de caracteres minúsculos. Para realizar uma pesquisa, você especifica uma chave, que é também uma cadeia não-vazia de letras minúsculas. O resultado é uma lista de todos os arquivos que contém a chave como uma subcadeia. Uma cadeia s é uma subcadeia de uma cadeia t se t contém todos os caracteres de s como uma sequência contígua. Por exemplo, \"foofoo\", \"cafoo\", \"foota\" e \"foo\" todas contém \"foo\" como uma subcadeia, enquanto \"foa\", \"fofo\", \"fioo\" e \"oofo\" não contém. Você sabe o conteúdo de cada arquivo no seu disco rígido, e gostaria de saber se cada subconjunto dos arquivos é pesquisável. Um subconjunto dos arquivos é pesquisável se existe pelo menos uma chave que produz exatamente a lista desses arquivos como resultado. Dado os conteúdos dos arquivos on seu disco rígido, você deve computar o número de subconjuntos não-vazios pesquisáveis."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1239",
        "saida": "Para cada linha de entrada seu programa deve gerar uma linha de saída com o texto traduzido para HTML como demonstrado nos exemplos abaixo. Para tornar itálico um pedaço de texto no HTML, você deve iniciar este pedaço com a tag e terminá-lo com a tag . Para texto em negrito, inicie com e termine com . O final da entrada é determinado por EOF.",
        "entrada": "A entrada contem vários casos de teste. Cada caso de teste é composto por uma linha que contem uma string texto, com zero ou mais usos dos atalhos itálico e negrito. Cada texto tem de 1 a 50 caracteres, inclusive. Os únicos caracteres permitidos no texto são os caracteres alfabéticos (de 'a' a 'z' e de 'A' a 'Z'), o sublinhado ('_'), o asterisco ('*'), o caractere de espaço e os símbolos de pontuação ',', ';', '.', '!', '?', '-', '(' e ')'. O caractere sublinhado '_' ocorre no texto um número par de vezes. O asterisco '*' também aparece um número par de vezes no texto. Nenhuma substring do texto entre um par de sublinhados ou entre um par de asteriscos pode conter outros sublinhados ou asteriscos, respectivamente.",
        "titulo": "Atalhos Bloggo",
        "descricao": "Você está ajudando a desenvolver um sistema de gerenciamento de weblog chamado bloggo. Embora bloggo coloque todo o conteúdo direto no website em HTML, nem todos autores apreciam usar tags HTML em seus textos. Para tornar a vida deles mais fáceis, bloggo oferece uma sintaxe simples chamada atalhos para obter alguns efeitos textuais em HTML. Sua tarefa é, dado um documento escrito com atalhos, traduzi-lo para o HTML apropriado. Um atalho é usado para colocar texto em itálico. HTML faz isto com as tags e , mas no bloggo um autor pode simplesmente colocar um pedaço de texto entre dois caracteres de sublinhado, '_'. Portanto, onde um autor escreve You _should_ see the baby elephant at the zoo! bloggo vai publicar o seguinte: You should see the baby elephant at the zoo! Outro atalho serve para colocar texto em negrito, o que, em HTML, é feito com as tags e . Bloggo permite aos autores fazer o mesmo com pares do caractere asterisco, '*'. Quando um autor escreve o texto Move it from *Receiving* to *Accounts Payable*. ele vai sair no website assim: Move it from Receiving to Accounts Payable."
    },
    {
        "nivel": "6",
        "assunto": "3",
        "numero": "2097",
        "saida": "Escreva o número inteiro correspondente ao nome.",
        "entrada": "Em cada linha (cerca de 100000 linhas), há o nome de um número inteiro n, 0 ≤ n ≤ 1015-1.",
        "titulo": "Nome para Número",
        "descricao": "Dada uma lista de nomes de números, converta-os para inteiros. Talvez o problema  número 1846 do URI ajude você."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1262",
        "saida": "Para cada caso de teste determine e imprima o número mínimo de ciclos de máquina necessários para se processar o rastro informado. Vide exemplos abaixo.",
        "entrada": "A entrada contém diversos casos de testes. Cada caso é composto por duas linhas. A primeira linha contém o rastro de processamento em uma sequência de caracteres 'R' ou 'W' formando um String de 1 a 50 caracteres. A segunda linha contém um valor inteiro P (1 ≤ P ≤ 10), representando o número de processos, ou seja, uma indicação de quantas operações de leitura podem ser processadas simultaneamente. A entrada termina em EOF.",
        "titulo": "Leitura Múltipla",
        "descricao": "Em diversos sistemas de computação, vários processos podem ler de um mesmo recurso durante o mesmo ciclo de máquina, mas somente um processo pode escrever no recurso durante o ciclo de máquina. Leituras e gravações não podem se misturar em um mesmo ciclo de máquina. Dado um histórico de leituras e gravações que ocorreram durante a execução de um determinado processamento, e um número inteiro que representa o número de processos usados, calcule a duração mínima do processamento, em ciclos de máquina. O rastro de histórico representa cada leitura por uma letra 'R' e cada gravação por uma letra 'W'. Por exemplo, se o rastro de histórico é \"RWWRRR\" e o número de processos é 3, então o número mínimo de ciclos de máquina será 4: um para a primeira leitura, um para cada uma das gravações e apenas um para todo o último grupo de leituras."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1238",
        "saida": "Combine as duas cadeias de caracteres da entrada como mostrado no exemplo abaixo e exiba a cadeia resultante.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha contém um inteiro N que indica a quantidade de casos de teste que vem a seguir. Cada caso de teste é composto por uma linha que contém duas cadeias de caracteres, cada cadeia de caracteres contém entre 1 e 50 caracteres inclusive.",
        "titulo": "Combinador",
        "descricao": "Implemente um programa denominado combinador, que recebe duas strings e deve combiná-las, alternando as letras de cada string, começando com a primeira letra da primeira string, seguido pela primeira letra da segunda string, em seguida pela segunda letra da primeira string, e assim sucessivamente. As letras restantes da cadeia mais longa devem ser adicionadas ao fim da string resultante e retornada."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1364",
        "saida": "Para cada caso de teste, imprima exatamente uma linha contendo um único inteiro que indica o número mínimo de mudanças que você precisa fazer para ter certeza de que nenhum emoticon apareça no texto.",
        "entrada": "A entrada contém vários casos de teste. Cada teste consiste em várias linhas. A primeira linha de cada caso de teste conterá dois inteiros separados por um espaço: N, o número de emoticons a proibir, e M, o número de linhas que o texto tem. As próximas N linhas contém um emoticon cada, uma sequência (string) \"não vazia\" de no máximo quinze caracteres. Cada uma das últimas M linhas do caso de teste contém uma linha de texto de no máximo oitenta caracteres. Você pode assumir que 1 ≤ N, M ≤ 100. Caracteres válidos para emoticons são letras maiúsculas e minúsculas, dígitos e símbolos “!?.,:;-_’#$%&/=*+(){}[]” (aspas para demarcar). Cada linha do texto deve conter os mesmos caracteres com a adição de um caractere \"espaço\". A entrada é terminada por N = M = 0.",
        "titulo": "Emoticons :-)",
        "descricao": "Emoticons são usados em chats e conversações por e-mail para tentar expressar a emoção que palavras impressas não podem. Isso parece interessante para muitos, mas outros acham irritantes e querem se livrar deles. George é uma dessas pessoas. Ele odeia tanto emoticons que ele está preparando um plano para remover todos os emoticons de todos os e-mails do mundo. Já que você compartilha de seus planos visionários você está preparando um programa especial para ele. Seu programa receberá a lista de emoticons para banir. Cada emoticon será uma sequência de caracteres sem incluir qualquer espaço em branco. Você também receberá várias linhas de texto. O que você precisa fazer é mudar alguns caracteres do texto em espaço para certificar-se de que nenhum emoticom ficará no texto. Para um emoticon poder aparecer no texto, é necessário ter uma sequência especial de caracteres consecutivos. Para ajudar o plano de George a manter-se oculto o mais tempo possível, você precisa fazer seu trabalho com o mínimo possível de mudança nos caracteres."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1803",
        "saida": "A saída é dada em uma única linha e corresponde a string decodificada. Inclua o caractere de fim-de-linha após a string.",
        "entrada": "A entrada é uma matring, ou seja, uma matriz 4x(N+2) de dígitos (de 0 a 9) com 0 < N < 80.",
        "titulo": "Matring",
        "descricao": "Matring é uma mistura de Matriz e String. Ela foi desenvolvida pela UNILA (União dos Nerds para Integração da Lógica e da Aventura) para manter mensagens seguras de escutas. A primeira e última coluna de uma matring guarda a chave para traduzi-la na mensagem original. As colunas restantes de uma matring representam uma string codificada em ASCII, uma coluna por caractere. Para uma mensagem com N caracteres, a matring correspondente é uma matriz 4x(N+2) de dígitos. Cada coluna é lida como um número de 4 dígitos; uma sequência de dígitos de cima para baixo é o mesmo que uma sequência de dígitos da esquerda para a direita na horizontal. Seja o primeiro número F, o último número L e os restantes uma sequência de números Mi, onde 1 ≤ i ≤ N. A primeira coluna de uma matring é indexada por zero. Para decodificar uma matring para uma string, calculamos: Ci = (F * Mi + L) mod 257, onde Ci é o caractere em ASCII na posição i da mensagem original. Sua tarefa é desenvolver um algoritmo para decodificar matrings."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1278",
        "saida": "Para cada caso de teste imprima o texto com apenas um espaço entre as palavras, e inserindo tantos espaços quanto forem necessários à esquerda de cada linha do texto, para que elas apareçam alinhadas à margem direita daquele texto, e na mesma ordem da entrada. Deixe uma linha em branco entre os casos de testes. Não imprima espaços no final de cada linha, nem espaços desnecessários à esquerda, de modo que pelo menos uma das linhas impressa em cada texto inicie com uma letra.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100) que indica o número de linhas de texto que virão a seguir. Cada uma destas N linhas de texto contém de 1 a 50 letras maiúsculas (‘A’-‘Z’) ou espaços (‘ ’). Todas as linhas de texto contém no mínimo uma letra. Poderá haver mais de um espaço entre as palavras. É também possível haver espaços no início e no final da linha. O fim da entrada é indicado por N = 0.",
        "titulo": "Justificador II",
        "descricao": "Nós temos alguns textos e queremos formatá-los e justificá-los à direita, ou seja, alinhar suas linhas à margem direita de cada um. Crie um programa que, após ler um texto, reimprima esse texto com apenas um espaço entre as palavras e suas linhas justificadas à direita em todo o texto."
    },
    {
        "nivel": "8",
        "assunto": "3",
        "numero": "1853",
        "saida": "Imprima una única linha contendo Tyrion se Tyrion pode derrotar Daenerys, ou Daenerys caso contrário.",
        "entrada": "A primeira linha da entrada contém os inteiros D e L (D > 0, 2 ≤ L ≤ 10), onde D é o número de adjetivos Dothraki. Cada uma das próximas D linhas contém um adjetivo. A soma dos tamanhos de todos os adjetivos não será maior que 105. A próxima linha contém o número S (1 ≤ S ≤ 300). Cada uma das próximas S linhas contém uma string si e o inteiro Fi (1 ≤ Fi ≤ 50). A soma dos tamanhos de todas as strings si não será maior que 3×103. É garantido que nenhuma dessas strings contém um adjetivo Dothraki.  Além disso, todos os adjetivos e todas as strings si contém apenas letras do alfabeto Dothraki.",
        "titulo": "O Jogo da Confiança de Daenerys",
        "descricao": "Daenerys: \"(...) então eu deveria deixá-lo me servir porque você assassinou membros de sua própria família?\" Tyrion: \"Lhe servir? Majestade, nós acabamos de nos conhecer. É muito cedo para saber se você merece meus serviços.\" Para acertar as coisas com o anão, Daenerys decidiu desafiar Tyrion para um jogo de 2 jogadores que ela mesma inventou, quando estava no mar Dothraki. Se Tyrion vencê-la no jogo, ela irá fazer dele seu conselheiro, como ele queria. Caso contrário, ela irá mandar executá-lo. Este é um jogo com palavras. Neste jogo, considera-se apenas o alfabeto Dothraki, que consiste nas primeiras L letras minúsculas do nosso alfabeto. O jogo se inicia com uma lista de S strings s1, ..., sS. A partida é jogada por turnos, e Tyrion é o primeiro a jogar. Em cada turno, um jogador escolhe uma string da lista e adiciona uma letra (do alfabeto Dothraki) ao final da string, em seu lado direito.  Entretanto, um jogador não pode adicionar uma letra a uma string si (1 ≤ i ≤ S) se Fi letras já foram adicionadas à string durante o jogo. Um jogador também não pode adicionar uma letra a uma string se esta string, incluindo todas as letras adicionadas a ela durante o jogo (mas não a letra que o jogador quer adicionar), contém um adjetivo Dothraki como substring. Todos os adjetivos Dothraki são dados na entrada. Se um jogador não puder adicionar nenhuma letra a nenhuma string, ele perde o jogo. Tanto Daenerys quanto Tyrion jogam de forma ótima. Sua tarefa é decidir se Tyrion pode vencer Daenerys neste jogo. No primeiro exemplo, Tyrion pode vencer se adicionar a letra c à string s1: ela conterá um adjetivo e logo não poderá mais ser escolhida. Daenerys é forçada a adicionar uma letra à string s2. Tyrion então adicionará outra letra a s2.  Neste ponto, Daenerys não terá mais opções de jogadas, pois F2 = 2 letras já foram adicionadas à string s2."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1385",
        "saida": "Para cada caso de teste da entrada seu programa deve produzir um possível relatório de Maria. Cada linha da resposta deve ser alinhado à esquerda, com seus itens separados por um único espaço, e sem espaços a mais no final.",
        "entrada": "A entrada consiste em vários casos de teste. A primeira linha de entrada contém um número inteiro C especificando o número de casos de teste. A primeira linha de um relatório é uma linha de cabeçalho, contendo o código dos produtos P1, P2. . . PN e a palavra Totais, como descrito acima. A numeração dos produtos nesta linha de cabeçalho é consecutiva, de 1 a N, com 1 ≤ N ≤ 5. Depois, há um número de linhas, cada uma representando uma linha do relatório, como descrito acima. A última linha do relatório inicia com as letras TP e têm o formato descrito acima. Considere que cada vendedor tenha vendido menos de 1000 unidades de cada produto. Há não mais de 4 vendedores em cada caso de teste. Cada nome de vendedor não poderá exceder 10 caracteres (apenas letras maiúsculas e minúsculas).",
        "titulo": "Recuperação de Relatório",
        "descricao": "No final da semana, John pediu para Maria enviar-lhe um relatório urgente de vendas. Maria estava com pressa, porque estava saindo para suas férias. Ela, então, copiou e colou a folha de vendas em um e-mail, enviou para John e saiu. Ela não queria ser incomodada com questões de trabalho, de modo que ela saiu sem dizer a ninguém onde ela estaria. Ela anunciou simplesmente que não estaria disponível para as próximas duas semanas, desligou o celular e saiu. Quando João recebeu a mensagem, ele percebeu que o relatório não tinha nenhum espaço! Ele sabia que o relatório deveria ter uma linha de cabeçalho com códigos de produtos da forma P1, P2,. . ., PN e a palavra \"Totals\" (Totais) no final. Então haveria várias linhas de relatórios de vendas de produtos para os diferentes vendedores de escritório de Maria. Cada vendedor foi identificado com um nome composto por uma palavra (apenas caracteres alfabéticos). A linha correspondente a um vendedor deve começar com o seu nome, seguido do número de produtos vendidos, de acordo com as colunas do relatório. A última linha do relatório deve começar com as duas letras TP seguidos pelos totais de cada coluna no relatório (é claro, o nome de nenhum vendedor começa com as letras TP). John sabia que não havia números negativos no relatório, uma quantidade de zero foi avaliado como um único 0, e não há zeros à esquerda ao relatar uma quantidade positiva. Neste ponto, John decidiu reconstruir o relatório de Maria. Ele sabia que não poderia ser mais de um resultado possível, mas queria fazê-lo de qualquer maneira com a primeira solução consistente que ele poderia encontrar (talvez ele pudesse corrigir os erros quando Maria voltasse). Você poderia ajudar John com a recuperação de relatório de vendas de Maria?"
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "2137",
        "saida": "Seu programa deverá imprimir o cadastro dos códigos ordenado. Não haverá linha em branco entre os casos de teste.",
        "entrada": "A entrada contém vários casos de teste. Cada teste começa com um valor N (1 ≤ N ≤ 1000). Em seguida, N linhas terão os códigos dos livros, que estão sempre no formato \"xxxx\", isto é, não haverá o cadastro '1', por exemplo, mas \"0001\". A entrada termina com fim de arquivo.",
        "titulo": "A Biblioteca do Senhor Severino",
        "descricao": "Em uma pacata cidade do interior, o senhor Severino decidiu montar a própria biblioteca, já que coleciona vários livros desde sua juventude. Como ele não sabe programar, pediu ajuda ao neto para criar um programa que cadastre e ordene seus livros pelo código. Porém, seu neto ainda está no ensino fundamental, e como sabe muito pouco de programação, acabou criando um programa que somente cadastra os livros, mas não os ordena. Desse modo, o senhor Severino recorreu a você, pois sabe de suas habilidades com programação. Sua tarefa é simples: ordenar os cadastros dos códigos dos livros."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1287",
        "saida": "Para cada caso de teste, seu programa deverá imprimir um inteiro representado pela string n ou \"error\" se n não é um inteiro não-negativo válido. Nota: Uma string vazia não representa um inteiro válido.",
        "entrada": "Cada linha da entrada é um caso de teste e contém uma string n. n conterá entre 0 e 50, inclusive, letras, dígitos, espaços ou vírgulas",
        "titulo": "Processador Amigável de Inteiros",
        "descricao": "Computadores estão presentes em uma porcentagem significante de casas pelo mundo e, como programadores, somos responsáveis por criar interfaces que todos possam usar. Interfaces de usuário precisam ser flexíveis de forma que se um usuário comete um erro não fatal, a interface ainda pode deduzir o que o usuário queria dizer. Sua tarefa é escrever um programa que processe um texto de entrada representando um inteiro, porém, como esta é uma interface de usuário, não seremos muito rígidos com o usuário: 1. Se o usuário digita a letra \"O\" ou \"o\", assumimos que ele queria digitar o número \"0\". 2. Se o usuário digita a letra \"l\", assumimos que ele queria digitar o número \"1\". 3. Vírgulas e espaços são permitidos, porém não são processados (são ignorados). Se, mesmo com as regras acima, o usuário não entrou um número não-negativo, imprima a string \"error\". Overflow (um valor maior que 2147483647) é considerado inválido e \"error\" deve ser impresso."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1551",
        "saida": "Para cada caso de teste, imprima uma linha contendo uma das seguintes frases: “frase completa”, quando a frase é considerada completa; “frase quase completa”, quando a frase não é completa, mas é considerada quase completa; ou “frase mal elaborada”, quando ela não é completa e nem quase completa.",
        "entrada": "A primeira linha contém um inteiro N, indicando o número de casos de teste a seguir. Cada caso de teste contém uma linha, contendo letras minúsculas, espaços em branco e/ou vírgulas. O número de caracteres de cada linha é no mínimo 3 e no máximo 1000, contando com os espaços.",
        "titulo": "Frase Completa",
        "descricao": "Seu professor de português não para de trazer coisas novas para a sala, e hoje não foi diferente. Existe uma cidade, segundo seu professor, onde as pessoas levam muito a sério a forma como elas se comunicam. Em especial, quando duas pessoas estão conversando, elas pensam muito nas frases antes de dizê-las, de forma a garantir que tal frase seja uma “frase completa”, ou talvez uma “frase quase completa”. Considerando o nosso alfabeto de 26 letras, uma frase é dita “completa” quando ela contém todas as letras do alfabeto contidas nela. De modo semelhante, uma frase é dita “quase completa” se ela não é completa, porém contém ao menos metade das letras do alfabeto contidas nela. Quando uma frase não é “completa” e nem “quase completa”, ela é dita “mal elaborada”. Seu professor lhe deu uma tarefa muito difícil: dadas várias frases trocadas entre vários habitantes da cidade citada, diga em qual das categorias acima a frase se encaixa."
    },
    {
        "nivel": "5",
        "assunto": "3",
        "numero": "2035",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um número inteiro, o que representa o número máximo de letras que podem ser impressas em um conjunto de N camisetas válidas para serem utilizadas por ambas as equipes, como explicado na declaração do problema.",
        "entrada": "Cada caso de teste é descrito usando três linhas. A primeira linha contém um número inteiro N, indicando o número de jogadores em cada uma das duas equipes (1 ≤ N ≤ 104). A segunda linha contém os apelidos dos N jogadores na equipe sub-18, e a terceira linha contém os sobrenomes dos N jogadores na equipe sub-21. Cada sobrenome é uma string não vazia de no máximo 100 letras maiúsculas. Em cada caso de teste, o número total de caracteres nos 2N sobrenomes é, no máximo, 105, e dois ou mais jogadores do mesmo ou de diferentes equipes podem ter o mesmo sobrenome. O final da entrada e indicado por uma linha contendo -1.",
        "titulo": "Projetando Camisetas",
        "descricao": "O Rúgbi da Argentina está atualmente em um de seus melhores momentos de todos os tempos. Recentemente, os menores de 18 anos e as equipes sub-21 nacionais foram qualificados para seus campeonatos mundiais, de modo que os treinadores de ambas as equipes pediram à Incrível Comissão para a Produção de Roupas (ICPR) para fornecer as camisetas para esses eventos. Cada equipe é formada por N jogadores, mas porque as duas Copas do Mundo não ocorrem simultaneamente, a ICPR forneceria apenas N camisetas, para serem usadas por ambas as equipes. Por esta razão, as camisetas deve ser um conjunto válido de roupas para ambas as equipes. As regras das Copas do Mundo de Rúgbi determinam que cada jogador deve ir a campo com uma camiseta que tenha impresso um único número, juntamente com uma abreviação do sobrenome do jogador, não necessariamente único. Isto inclui os casos como camisetas sem abreviação de sobrenome (ou seja, um sobrenome de comprimento 0) e uma camiseta com um sobrenome completo. Os peritos do ICPR imediatamente perceberam que podiam simplesmente fornecer N camisetas com apenas números e sem sobrenomes, e cada uma delas seria uma camiseta válida para ser usado por qualquer jogador. No entanto, os treinadores preferem ter as camisetas com os mais longos sobrenomes possíveis, é claro, sem violar as regras da Copa do Mundo, porque desta forma é mais fácil para eles identificar os jogadores, enquanto os jogos estão ocorrendo. Sua tarefa é ajudar o ICPR encontrar o máximo de letras que podem ser impressas em um conjunto de N camisetas, de modo que este conjunto seja válido para ambas as equipes. Por exemplo, se temos N = 3 jogadores, a equipe sub-18 é composto por \"PEREZ\", \"GONZALEZ\" e \"LOPEZ\", enquanto que a equipe sub-21 é composto por \"GARCIA\", \"PERALTA\" e \"RODRIGUEZ\", a escolha ideal consiste em ter uma camiseta com 1 letra \"G\" (para ser usado por \"GONZALEZ\" e \"GARCIA\"), outra com 3 letras sobrenome \"PER\" (a ser utilizado por \"PEREZ\" e \"PERALTA\"), e a terceira camiseta com 0 letras (sendo utilizadas por \"LOPEZ\" e \"RODRIGUEZ\"). Desta forma, a resposta neste caso seria 1 + 3 + 0 = 4."
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "1871",
        "saida": "Para cada caso de teste, imprima o resultado da soma dos dois valores, sem os Zeros.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros M e N (1 ≤ M ≤ N ≤ 999.999.999). O último caso de teste é indicado quando N = M = 0, sendo que este caso não deve ser processado.",
        "titulo": "Zero vale Zero",
        "descricao": "Um dia o Prof. Humberto José Roberto fez o seguinte questionamento: Se o zero a esquerda de um número não tem valor algum, por que teria em outras posições de um número? Analisando da seguinte forma, ele pede sua ajuda para, ao somar dois valores inteiros, que o resultado seja exibido segundo o raciocínio dele, ou seja, sem os Zeros. Por exemplo, ao somar 15 + 5, o resultado seria 20, mas com esta nova ideia, o novo resultado seria 2, e, ao somar 99 + 6, o resultado seria 105, mas com esta nova ideia, o novo resultado seria 15. Escreva um programa que, dado dois números inteiros, sem o algarismo zero, some os mesmos e, caso o resultado tenha algum algarismo zero, que os retire antes de exibir."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1629",
        "saida": "Para cada linha compactada você deve exibir o dígito verificador descompactado.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 25), representando o número de dados dos visitantes daquele arquivo, sendo que cada linha representa um visitante. As N linhas seguintes são compostas por K dígitos (1 ≤ K ≤ 103) sem espaço representando a linha compactada. A parada é determinada por N igual a 0.",
        "titulo": "DescompactaFACE",
        "descricao": "Em 2013 a Feira FACE compactou os dados de seus visitantes com um compactador livre, infelizmente esta ferramenta se tornou paga e você foi convidado a criar um algoritmo para descompactar os dados. Os dados estão compactados em formato decimal, e para funcionar o descompactador você terá que encontrar o dígito verificador de cada linha compactada. A organização da FACE conseguiu uma documentação de como funcionava o processo, mas algumas informações de como chegar ao dígito não estão muito claras, o documento apenas disponibiliza alguns exemplos, conforme segue: Linha compactada composta por 54782 ao descompactar iria resultar na cadeia binária 00000111100000001111111100, com isso o valor do dígito ficaria 8. Linha compactada composta por 045 ao descompactar iria resultar na cadeia binária 111100000, com isso o valor do dígito ficaria 9."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1222",
        "saida": "Para cada caso de teste imprima uma única linha, contendo um único número inteiro, indicando o número mínimo de páginas que o conto de Machado ocupa, considerando as regras do concurso.",
        "entrada": "A primeira linha de um caso de teste contém três inteiros N (2 ≤ N ≤ 1000), L (1 ≤ L ≤ 30 ) e C (1 ≤ C ≤ 70) , que indicam, respectivamente, o número de palavras do conto de Machado, o número máximo de linhas por página e o número máximo de caracteres por linha. O conto de Machado é inovador e não contém nenhum caractere além de letras maiúsculas e minúsculas e espaços em branco, sem letras acentuadas e sem cedilha. A segunda linha contém o conto de Machado, composto de N palavras (1 ≤ comprimento de cada palavra ≤ C) separadas por espaços em branco; há espaço em branco somente entre duas palavras, e entre duas palavras há exatamente um espaço em branco. O final da entrada é determinado pelo final de arquivo (EOF).",
        "titulo": "Concurso de Contos",
        "descricao": "Machado gosta muito de escrever. Já escreveu muitos contos, resenhas, relatos de viagens que fez, além de um pequeno romance. Agora Machado quer participar de um concurso de contos, que tem regras muito rígidas sobre o formato de submissão do conto. As regras do concurso especificam o número máximo de caracteres por linha, o número máximo de linhas por página, além de limitar o número total de páginas. Adicionalmente, cada palavra deve ser escrita integralmente em uma linha (ou seja, a palavra não pode ser separada silabicamente em duas linhas). Machado quer escrever um conto com o maior número de palavras possível, dentro das regras do concurso, e precisa de sua ajuda. Dados o número máximo de caracteres por linha, o número máximo de linhas por página, e as palavras do conto que Machado está escrevendo, ele quer saber o número mínimo de páginas que seu conto utilizaria seguindo as regras do concurso."
    },
    {
        "nivel": "6",
        "assunto": "3",
        "numero": "1842",
        "saida": "Imprima uma linha composta unicamente da maior subcadeia de S com no mínimo 3 caracteres que se repete em S no mínimo uma vez. Se há mais de uma subcadeia que se repete com comprimento máximo, imprima a primeira delas em ordem lexicográfica, lembrando que o caractere ‘-’ aparece antes na tabela ASCII que o caractere ‘.’. Se não há subcadeias de S com comprimento no mínimo 3 que se repetem, a linha de saída deve ser composta unicamente do caractere ‘*’.",
        "entrada": "A entrada é composta por uma cadeia S de no mínimo 1 e no máximo 105 caracteres, finalizada por uma quebra de linha, a qual representa uma mensagem interceptada. Além da quebra de linha, apenas os caracteres ‘.’ (ponto) e ‘-’ (traço) compõem a entrada.",
        "titulo": "A Ordem da Fênix",
        "descricao": "Dentre as mais importantes rodovias que cruzam o estado de Santa Catarina estão a BR282, que o cruza de leste a oeste, e a BR153, que cruza praticamente o Brasil inteiro de norte a sul. O encontro entre essas duas rodovias é conhecido popularmente como Trevo de Irani, porque ocorre na cidade de Irani, ou Trevo da Fênix, porque sua forma, vista de cima, lembra a criatura mítica fênix, conforme mostra a Figura. A região do estado em que fica o Trevo da Fênix é chamada de Vale do Contestado, porque foi palco de uma das mais importantes guerras civis da história do Brasil: a Guerra do Contestado (1912–1916), entre rebeldes da população cabocla, sob a liderança notória do monge José Maria dentre outras, e tropas federais do Exército Brasileiro, sob a liderança notória do Cel. João Gualberto dentre outras. Conta-se que, certa vez, um grupo de rebeldes fugia desesperado das tropas do Exército e veio parar no Trevo da Fênix. Frustrado com a batalha que haviam perdido no dia, um deles chutou o pó da terra. O vento levantou o pó, o qual, na verdade, não era pó, mas cinzas, e por um momento os caboclos viram uma fênix, que lhes deu uma Ordem: “Morse!”. Tendo regressado ao acampamento no dia seguinte e contado a história ao monge José Maria, os caboclos passaram a estudar o Código Morse, a interceptar mensagens das tropas do Cel. João Gualberto e a tentar identificar padrões repetidos nessas mensagens."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1737",
        "saida": "Para cada caso de teste gere 5 linhas contendo os top 5 dígrafos juntamente com suas frequências absolutas e relativas. Imprima o último arredondado com uma precisão de seis casas decimais. Se dois dígrafos tiverem a mesma frequência, ordene-os em (ASCII) ordem lexicográfica. Imprima uma linha em branco após cada caso de teste.",
        "entrada": "A entrada contém vários casos de teste. Cada um começa com um número n em uma linha separada, indicando o número de linhas do caso de teste. A entrada é terminada por n = 0. Caso contrário, 1 ≤ n ≤ 64, e seguem n linhas, cada uma com um comprimento máximo de 80 caracteres. A concatenação dessas n linhas, onde os caracteres de fim de linha (end-of-line) são omitidos, dá o exemplo de texto que você tem que analisar. O texto irá conter apenas caracteres ASCII imprimíveis.",
        "titulo": "Etaoin Shrdlu",
        "descricao": "A frequência relativa de caracteres em textos de linguagem natural é muito importante para a criptografia. No entanto, as estatísticas variam para diferentes idiomas. Aqui estão os top 9 caracteres ordenados por suas frequências relativas para várias línguas comuns: Inglês: ETAOINSHR Alemão: ENIRSATUD Francês: EAISTNRUL Espanhol: EAOSNRILD Italiano: EAIONLRTS Finlandês: AITNESLOK Tão importante quanto as frequências relativas de caracteres simples são os de pares de caracteres, os chamados dígrafos. Dado vários exemplos de texto, calcule os dígrafos com as melhores frequências relativas."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1257",
        "saida": "Para cada caso de teste imprima o valor de hash que é calculado conforme o exemplo apresentado acima.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste inicia com um inteiro L (1 ≤ L ≤ 100) que indica a quantidade de linhas que vem a seguir. Cada uma destas L linhas contém uma string com até 50 letras maiúsculas ('A' - 'Z').",
        "titulo": "Array Hash",
        "descricao": "Você terá como uma entrada várias linhas, cada uma com uma string. O valor de cada caracter é computado como segue: Valor = (Posição no alfabeto) + (Elemento de entrada) + (Posição do elemento) Todas posições são baseadas em zero. 'A' tem posição 0 no alfabeto, 'B' tem posição 1 no alfabeto, ... O cálculo de hash retornado é a soma de todos os caracteres da entrada. Por exemplo, se a entrada for: CBA DDD então cada caractere deverá ser computado como segue: 2 = 2 + 0 + 0 : 'C' no elemento 0 posição 0 2 = 1 + 0 + 1 : 'B' no elemento 0 posição 1 2 = 0 + 0 + 2 : 'A' no elemento 0 posição 2 4 = 3 + 1 + 0 : 'D' no elemento 1 posição 0 5 = 3 + 1 + 1 : 'D' no elemento 1 posição 1 6 = 3 + 1 + 2 : 'D' no elemento 1 posição 2 O cálculo final de hash será 2+2+2+4+5+6 = 21."
    },
    {
        "nivel": "5",
        "assunto": "3",
        "numero": "2017",
        "saida": "Imprima o índice da string mais próxima da primeira linha. Se este valor for diferente de -1, imprima o valor de distância de edição da segunda linha.",
        "entrada": "A primeira linha contém uma string x ( 1 ≤ len(x) ). A próxima linha contém um inteiro k ( 1 ≤ k ≤ 100 ). Cada uma das próximas 5 linhas contém uma string y ( len(y) ≤ 100000).",
        "titulo": "Seis Strings",
        "descricao": "O problema é simples. Dada uma string x e 5 outras strings, encontre a string com o menor valor de distância de edição com relação a x. Se o valor da distância de edição for maior do que k, imprima -1."
    },
    {
        "nivel": "7",
        "assunto": "3",
        "numero": "2093",
        "saida": "Imprima uma linha contendo um inteiro representando o comprimento mínimo de um separador aceitável para um dado registo.",
        "entrada": "Uma única linha contendo um registo, que é uma string não-vazia de no máximo 105 dígitos binários.",
        "titulo": "Fuja para Escapar",
        "descricao": "Um protocolo de comunicação é um conjunto de regras para a transmissão de informações de um sistema de comunicações. O trabalho de Elisa é escrever programas para implementar partes de tais protocolos. Muitas vezes é necessário, para transmitir sequências de campos, saber onde um campo termina e outro começa, onde um separador é inserido entre cada par de campos consecutivos. Usar um separador simples, como um espaço, vírgula, ou ponto e vírgula, tem a desvantagem de que, algumas vezes, os campos a serem transferidos podem conter esses mesmos caracteres. A solução padrão para esses casos é inserir um caractere \"escaping\" logo antes de cada separador dentro de um campo, para distingui-lo de um separador real. Elisa acredita que esta solução irá aumentar muito o comprimento dos dados a serem transmitidos, então ela decidiu usar um separador complexo o suficiente para nunca aparecer nos dados. Dessa forma ela espera fugir da alternativa ineficiente de pular os separadores. Para escolher o separador ideal, Elisa compilou um registo, que nada mais é que uma longa sequência de caracteres que representam os dados que o seu protocolo precisa controlar. Após pensar sobre o problema por um tempo, Elisa concluiu que qualquer sequencia não vazia de caracteres que não aparece dentro do registo poderia ser um separador aceitável para usar dentro de seu protocolo. Mas, uma vez que ela está interessada em minimizar o comprimento dos dados a transmitir, queria saber o tamanho mínimo que um separador aceitável pode ter. Ela começou imediatamente a escrever um programa para calcular tal comprimento, e agora está testando-o para um caso especial, em que o registo e os separadores aceitáveis contém apenas dígitos binários (‘0’ ou ‘1’). Você pode antecipar os resultados?"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1332",
        "saida": "Para cada caso de teste, imprima o valor numérico da palavra.",
        "entrada": "A primeira linha contém o número de palavras que o seu irmão mais novo escreveu. Cada uma das linhas seguintes contém uma única palavra com todas as letras em minúsculo. As palavras satisfazem as restrições acima: no máximo uma letra poderia estar errada, mas o comprimento da palavra está sempre correto. Haverá, no máximo, 1000 palavras de entrada.",
        "titulo": "Um-Dois-Três",
        "descricao": "Seu irmão mais novo aprendeu a escrever apenas um, dois e três, em Inglês. Ele escreveu muitas dessas palavras em um papel e a sua tarefa é reconhecê-las. Nota-se que o seu irmão mais novo é apenas uma criança, então ele pode fazer pequenos erros: para cada palavra, pode haver, no máximo, uma letra errada. O comprimento de palavra é sempre correto. É garantido que cada palavra que ele escreveu é em letras minúsculas, e cada palavra que ele escreveu tem uma interpretação única."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1458",
        "saida": "Para cada caso de teste imprima uma linha contendo o tempo, em segundos, que nosso competidor ideal levaria para digitar a mensagem dada. Utilize duas casas decimais para exibir a resposta.",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste é composto por uma mensagem, que é uma string que contém de 1 a 140 caracteres ('a'-'z' ou ' '), inclusive. Nenhuma mensagem começa ou termina com espaços e tampouco contém acentos ou dois espaços consecutivos. O final da entrada é indicado por final de arquivo (EOF).",
        "titulo": "Campeonato de SMS",
        "descricao": "A Só Birutas Celulares, uma renomada empresa do ramo de telefonia móvel, promove um campeonato de mensagens de texto todos os anos. Neste campeonato, ganha quem digitar uma dada mensagem mais rápido. O aparelho oficial da competicão, de uso obrigatório, tem um teclado muito simples, similar ao celular que você provavelmente teria no bolso se aparelhos eletrônicos não fossem proibidos durante a Maratona de Programacão. O teclado tem o seguinte layout: ​ Como só é permitido o uso dos polegares para pressionar as teclas, todas elas foram feitas quadradas, com 1 centímetro de lado, sem espaço entre duas teclas adjacentes. As teclas de 2 a 9 são usadas para digitar as letras de 'a' a 'z', e funcionam como em qualquer celular: se quisermos obter uma das letras associadas a uma das teclas, precisamos pressioná-la um número de vezes igual à posição da letra desejada. Por exemplo, pressionando a tecla 3 uma vez obtemos 'd'. Se pressionarmos novamente, obteremos 'e' e depois 'f'. Se continuarmos pressionando-a obteremos o número '3' e depois reiniciamos em 'd'. A tecla 0 é utilizada para inserir espaços na mensagem; as teclas 1 e * não são utilizadas nesta competição. No caso de termos duas letras consecutivas na mensagem que são formadas pela mesma tecla será necessário fazer uso da tecla #. A função desta tecla é separar as sequências de pressionamentos de duas letras na mesma tecla. Por exemplo, para digitar a palavra \"casa\", a sequência de teclas pressionadas seria a seguinte: 2, 2, 2, #, 2, 7, 7, 7, 7, 2. Para tornar as coisas mais interessantes, a organizaçãao decidiu que este ano as mensagens devem ser digitadas em queda livre: os competidores pulam de um avião com o celular em mãos e digitam a mensagem; um sofisticado sistema computadorizado abrirá o paraquedas automaticamente quando a mensagem tiver sido digitada sem erros. Entretanto, essa modificação das regras introduziu uma dificuldade a mais: para evitar que o celular se perca durante a queda, é necessário utilizar um polegar para segurar o aparelho enquanto o outro pressiona uma tecla ou é movido; ou seja, um dos polegares está sempre fixo. Para satisfazer a curiosidade da platéia, você foi contratado para fazer um programa de computador que, dada uma mensagem de até 140 caracteres, responde o tempo mínimo necessário para um competidor ideal digitá-la no celular. Suponha que um competidor ideal consegue mover seus polegares à incrível velocidade de 30 centímetros por segundo, leva apenas 2 décimos de segundo para pressionar uma tecla, inicia a queda livre com o polegar esquerdo sobre a tecla 4, o polegar direito sobre a tecla 6 e sempre pressiona as teclas perfeitamente em seus centros."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1406",
        "saida": "Para cada caso de teste seu programa deve produzir uma linha simples com a soma mínima dos tamanhos das strings de ouro. Você pode assumir que sempre existirá uma solução.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 30), que indica o número de músicas. A seguir, existirão N pares de linhas (2*N linhas), um par para cada música. A primeira linha de um par contém o nome da música, a segunda conterá o nome da artista. Ambos, nome de artista e música, são strings contendo somente letras minúsculas e sobrescritos e terão no mínimo 1 e no máximo 30 caracteres. Existirão no máximo 6 artistas diferentes na lista. O fim da entrada é dado por N = 0.",
        "titulo": "Jukebox",
        "descricao": "Os juízes ICPC estão preparando um festa para a cerimônia de abertura. Para a festa, eles pretendem adicionar um playlist com algumas músicas para o software jukebox (um simples MP3 player). Entretanto, existem muitas músicas no computador, isso dificulta encontrar aquelas que eles querem adicionar. Como consequência, eles precisam usar algumas buscas muitas vezes. Nesta jukebox, quando você pesquisa por uma string s, o software retorna todas músicas cujos títulos ou nomes de artistas contém s como uma substring. A string s é uma substring da string t se t contém todos os caracteres de s como uma sequência contígua (por exemplo, 'bc' é uma substring de 'abcd', mas 'ac' não é). Para salvar o tempo precioso deles, enquanto procuram por uma música, eles sempre usam uma string de ouro da música, isto é, uma das mais curtas strings que retornam de uma pesquisa como resultado somente a música que eles querem. Neste exemplo, uma possível string de ouro para a música 'johnnatan' é 'ta'. Note que 'ta' não é uma substring do nome de outra música nem é uma substring do nome do artista de outra música. Note também que não existem strings de tamanho igual a 1 que podem identificar unicamente a música 'johnnatan'. ​ Eles descobriram que se eles removem o campo artista de algumas músicas eles podem obter strings de ouro menores. Para a música 'john', não existe nenhuma string de ouro. Entretanto, se removermos o campo artista de todas as outras músicas, a string 'c' se torna a string de ouro para a música 'john'. Dada uma lista de músicas (cada música com nome e artista), sua tarefa é determinar a soma mínima do tamanho das strings de ouro para todas as músicas que podem ser obtidas se em algumas removermos o campo artista. Na figura acima, você pode ver um possível melhor resultado com as strings de ouro em negrito. A soma mínima dos tamanhos das strings de ouro neste caso é 10."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1530",
        "saida": "Para cada instrução do tipo 2, imprima uma linha contendo o número de substrings diferentes que a string possui.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste consiste de uma linha contendo uma sequência com até 2.105 caracteres. Cada caractere representa uma instrução que deve ser feita. Um caractere entre 'a' e 'z' indica que deve ser realizado uma instrução do tipo 1 com esse caractere. Um caractere '?' representa uma instrução do tipo 2.",
        "titulo": "Quantas Substrings?",
        "descricao": "Iniciamente, há uma string vazia. Seu programa deve realizar dois tipos de instruções: Adicionar um caractere entre 'a' e 'z' ao final da string. Calcular quantas substrings diferentes a string possui. Por exemplo, a string \"aba\" possui 5 substrings diferentes: \"a\", \"ab\", \"aba\", \"b\", \"ba\"."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1241",
        "saida": "Para cada caso de entrada imprima uma mensagem indicando se o segundo valor encaixa no primeiro valor, confome exemplo abaixo.",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste consiste de dois valores A e B maiores que zero, cada um deles podendo ter até 1000 dígitos.",
        "titulo": "Encaixa ou Não II",
        "descricao": "Paulinho tem em suas mãos um novo problema. Agora a sua professora lhe pediu que construísse um programa para verificar, à partir de dois valores muito grandes A e B, se B corresponde aos últimos dígitos de A."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1243",
        "saida": "Compute o comprimento médio das palavras do enunciado do problema, e mostre a classificação do problema, para mais detalhes olhe o exemplo abaixo.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por uma linha que contém o enunciado de um problema, é uma string que contém entre 1 e 50 caracteres ('A'-'Z', 'a'-'z', '0'-'9', ' ', '.'), inclusive. O final da entrada é determinado por EOF.",
        "titulo": "O Quão Fácil é...",
        "descricao": "TopCoder decidiu automatizar o processo de atribuição de níveis de dificuldade para os problemas. Os desenvolvedores do TopCoder concluíram que a dificuldade do problema esta relacionado apenas ao comprimento médio das palavras do enunciado do problema. Se o comprimento médio das palavras do enunciado é menor ou igual a 3, o problema recebe dificuldade de 250 pontos. Se o comprimento médio das palavras do enunciado for 4 ou 5, o problema recebe dificuldade de 500 pontos. Se o comprimento médio das palavras do enunciado for maior ou igual a 6, o problema recebe dificuldade de 1000 pontos. Definições: Símbolo: um conjunto de carateres ligados em ambos os lados por espaços, ou pelo início da descrição do problema, ou ainda pelo fim da descrição do problema. Palavra: um símbolo que contenha apenas letras a-z ou A-Z, e pode terminar com um único ponto. Comprimento da palavra: número de letras de uma palavra (um ponto não é uma letra). Exemplos de símbolos que são palavras (aspas duplas apenas para exemplificar): \"AB\", \"ab\". Exemplo de símbolos que não são palavras: \"ab..\", \"a.b\", \".ab\", \"a.b.\", \"a2b.\", \".\". O comprimento médio das palavras é dado pela soma dos tamanhos das palavras do enunciado dividido pelo numero de palavras, a divisão é feita por números inteiros. Se o número de palavras for zero, então o comprimento médio das palavras é zero. Sua tarefa é dado o enunciado do problema, computar a sua classificação de dificuldade do problema, que poderá ser 250, 500, ou 1000."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1273",
        "saida": "Para cada caso de teste imprima as palavras inserindo tantos espaços quanto forem necessários à esquerda de cada palavra, para que elas apareçam todas alinhadas à direita e na mesma ordem da entrada. Deixe uma linha em branco entre os casos de teste. Não deixe espaços sobrando no final de cada linha nem imprima espaços desnecessários à esquerda, de modo que pelo menos uma das linhas impressa em cada texto inicie com uma letra.",
        "entrada": "A entrada contém diversos casos de testes. A primeira linha de cada caso de teste conterá um inteiro N (1 ≤ N ≤ 50), que indicará o número de palavras que virão a seguir. Cada uma das N palavras contém no mínimo uma letra e no máximo 50 letras maiúsculas (‘A’-‘Z’). O fim da entrada é indicado por N = 0.",
        "titulo": "Justificador",
        "descricao": "Nós temos algumas palavras e queremos justificá-las à direita, ou seja, alinhar todas elas à direita. Crie um programa que, após ler várias palavras, reimprima estas palavras com suas linhas justificadas à direita."
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "1168",
        "saida": "Para cada caso de teste, imprima uma linha contendo o número de leds que João precisa para montar o valor desejado, seguido da palavra \"leds\".",
        "entrada": "A entrada contém um inteiro N, (1 ≤ N ≤ 1000) correspondente ao número de casos de teste, seguido de N linhas, cada linha contendo um número (1 ≤ V ≤ 10100) correspondente ao valor que João quer montar com os leds.",
        "titulo": "LED",
        "descricao": "João quer montar um painel de leds contendo diversos números. Ele não possui muitos leds, e não tem certeza se conseguirá montar o número desejado. Considerando a configuração dos leds dos números abaixo, faça um algoritmo que ajude João a descobrir a quantidade de leds necessário para montar o valor."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1898",
        "saida": "Imprima o CPF do corrupto, conforme apresentado abaixo e soma dos valores que foram desviados dos cofres públicos, sempre com duas casas decimais.",
        "entrada": "A entrada é composta por duas linhas, cada uma delas contendo entre 1 e 60 caracteres ('0'-'9' e outros caracteres não numéricos ou, pelo menos, 1 caracter '0'-'9') e no máximo um ponto \".\". Desconsiderando os caracteres não numéricos, o número final não deve ter mais de 17 caracteres (incluindo o ponto decimal). Qualquer número após a segunda casa decimal deve ser descartado.",
        "titulo": "Soma de Propina",
        "descricao": "A agência gaúcha para investigações criminais denominada OBI (Operação de Baita Investigação) notou que, a exemplo do que ocorreu na Petrobrás, muito dinheiro foi desviado dos cofres públicos do estado para pagamento de propina a políticos nos últimos anos, especialmente pelo partido QU (Quadrilha Unida). A investigação está em andamento e a agência recrutou você para converter alguns valores que ficaram com caracteres estranhos após terem sidos descriptografados dos arquivos originais. Sua tarefa neste caso é relativamente simples: basta retirar todos os caracteres estranhos (não numéricos) de cada um dos dois valores disponíveis e somar estes valores. Apenas tome o cuidado de separar da soma os primeiros 11 dígitos do primeiro valor. Eles correspondem ao CPF do corrupto :)"
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1276",
        "saida": "Para cada caso de teste de entrada, seu programa deverá imprimir as faixas de letras ordenadas alfabeticamente pelo menor valor de cada faixa. Faixas de letras a serem impressas devem representar a maior sequencia possível de letras de entrada em ordem crescente. Ignore espaços e letras duplicadas contidas na entrada. Se a string for vazia, apenas imprima uma nova linha. Por exemplo, a string \"fb xee ac\" tem três faixas de letras, \"a:c\" (as letras 'a', 'b' e 'c'), \"e:f\" (as letras 'e' e 'f') e \"x:x\" (a letra 'x'). Por favor, recorra aos exemplos.",
        "entrada": "Cada linha de entrada é um caso de teste. Cada caso de teste contém uma string, que pode ser vazia e cujas letras podem não estar em ordem alfabética, de letras minúsculas (a-z) e espaços. A string conterá entre 0 e 50 caracteres, inclusive.",
        "titulo": "Faixa de Letras",
        "descricao": "Uma faixa de letras é um conjunto de letras minúsculas alfabeticamente consecutivas tomadas de 'a' até 'z'. A menor e maior letras da faixa, separadas por dois pontos (o caractere ':'), são usadas para representar a faixa de letras. Por exemplo, a faixa \"a:c\" representa as letras consecutivas 'a', 'b' e 'c'. (as aspas não fazem parte da faixa). A faixa \"w:z\" representa as letras 'w', 'x', 'y' e 'z'. A faixa \"m:m\" representa apenas a letra 'm'."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1248",
        "saida": "Para cada caso de teste imprima uma string que representa os alimentos que você deveria consumir no jantar, ou \"CHEATER\" caso você tenha trapaceado na sua dieta.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste é composto por três linhas, cada uma delas com uma string com até 26 caracteres de 'A'-'Z' ou vazia, representando respectivamente os alimentos da dieta, do café da manhã e do almoço.",
        "titulo": "Plano de Dieta",
        "descricao": "O doutor deu a você a sua dieta, na qual cada caractere corresponde a algum alimento que você deveria comer. Você também sabe o que você tem comido no café da manha e no almoço, nos quais cada caractere corresponde a um tipo de alimento que você deveria ter comido aquele dia. Você decidiu que irá comer todo o restante de sua dieta durante o jantar, e você quer imprimi-la como uma String (ordenada em ordem alfabética). Se você trapaceou de algum modo (ou por comer muito de tipo de alimento, ou por comer algum alimento que não está no plano de dieta), você deveria imprimir a cadeia \"CHEATER\" (significa trapaceiro), sem as aspas."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1120",
        "saida": "Para cada caso de teste da entrada o seu programa deve imprimir uma linha contendo um único inteiro V, o valor numérico representado de fato no contrato.",
        "entrada": "A entrada consiste de diversos casos de teste, cada um em uma linha. Cada linha contém dois inteiros D e N (1 ≤ D ≤ 9, 1 ≤ N < 10100 ), representando, respectivamente, o dígito que está apresentando problema na máquina e o número que foi negociado originalmente no contrato (que podem ser grande, pois Modernolândia tem sido acometida por hiperinflação nas últimas décadas). O ultimo caso de teste é seguido por uma linha que contém apenas dois zeros separados por espaços em branco.",
        "titulo": "Revisão de Contrato",
        "descricao": "Durante anos, todos os contratos da Associação de Contratos da Modernolândia (ACM) foram datilografados em uma velha máquina de datilografia. Recentemente Sr. Miranda, um dos contadores da ACM, percebeu que a máquina apresentava falha em um, e apenas um, dos dígitos numéricos. Mais especificamente, o dígito falho, quando datilografado, não é impresso na folha, como se a tecla correspondente não tivesse sido pressionada. Ele percebeu que isso poderia ter alterado os valores numéricos representados nos contratos e, preocupado com a contabilidade, quer saber, a partir dos valores originais negociados nos contratos, que ele mantinha em anotações manuscritas, quais os valores de fato representados nos contratos. Por exemplo, se a máquina apresenta falha no dígito 5, o valor 1500 seria datilografado no contrato como 100, pois o 5 não seria impresso. Note que o Sr. Miranda quer saber o valor numérico representado no contrato, ou seja, nessa mesma máquina, o número 5000 corresponde ao valor numérico 0, e não 000 (como ele de fato aparece impresso)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1448",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte você deve imprimir qual dos times foi o vencedor ou se houve empate. Após cada instância, seu programa deve imprimir uma linha em branco.",
        "entrada": "A entrada começa com um inteiro t, onde 1 ≤ t ≤ 1000, indicando o número de instâncias que seu programa deve analisar. Cada instância é composta por três linhas, na primeira a frase correta, na segunda a frase do primeiro time e na terceira a frase do segundo time. Cada frase tem no máximo 100 caracteres, e as frases possuem sempre o mesmo tamanho.",
        "titulo": "Telefone Sem Fio",
        "descricao": "Toda criança já brincou de \"telefone sem fio\". Joãozinho inventou uma variação da brincadeira. O grupo de crianças é dividido em dois times. Os times se organizam como na brincadeira original, em que cada um repete o que lhe foi falado para o seguinte, até que o último diz o que chegou até ele. No caso da brincadeira de Joãozinho será falada uma frase com n caracteres (contando letras, espaços, sinais de pontuação, etc). Todos sabem que a frase tem este comprimento. A frase é falada pelo juiz ao primeiro competidor de cada time que a repete para o segundo, e este para o terceiro e assim sucessivamente, até que o último competidor de cada time escreve a frase final (garantindo que n caracteres sejam escritos) e a entrega para o juiz. A equipe vencedora é aquela cuja frase final seja mais próxima da frase original. Para calcular a semelhança entre duas frases de mesmo comprimento você deve contar o número de vezes em que o caractere da frase do time coincide com o caractere da frase original. Ganha o time para o qual o número de coincidências seja máximo. Se os dois times empataram neste critério, a primeira vez que um dos times acertou e o outro errou decide. Exemplo: Se a frase original foi \"O rato roeu a roupa do rei.\", o primeiro time escreveu \"O ator morreu, garoupa rei.\" e o segundo time escreveu \"O pato moeu garoupa dorlei.\" O segundo time ganhou pois teve 21 coincidências contra 9 coincidências do primeiro: Assim como os juízes da Maratona de Programação, estes juízes são muitos preguiçosos. Logo, pediram para você escrever um programa que resolve este problema."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1355",
        "saida": "Para cada caso de teste, imprima o comprimento da String mínima, e uma String comprimida. Note que cada número inteiro de um byte deve ser contado como um caractere, mesmo que tenha dois ou três dígitos na sua forma decimal.",
        "entrada": "Há, no máximo, 20 casos de teste, cada caso de teste é uma string contendo não mais do que 200 caracteres imprimíveis, sem espaços em branco (ou seja, sem espaços e sem tabulações), colchetes (ou seja, não há {'(', ')', '[','] ',' {','} '}) e nem dígitos. As letras são case-sensitive.",
        "titulo": "Compressor",
        "descricao": "Sua tarefa é comprimir uma string de no máximo 200 caracteres, usando o seguinte esquema: - Adjacentes que se repetem: [S]k que significa: S repetido k vezes (onde k é um número inteiro de um byte, lembre-se que o comprimento da String não excede 200). - Repete com lacunas: [S]k{S_1}t_1{S_2}t_2...{S_r}, onde 1 ≤ t_i < k, t_i < t_{i+1} que significa: escrever S para k vezes, em seguida, introduza a String S_i após a t_i ocorrência de S. Note que a compressão é feita de forma recursiva, para S, S_1, ..., S_r mencionado acima, onde tudo pode ser comprimido. Por exemplo: para a string original I_am_WhatWhat_is_WhatWhat O resultado ideal seria: I_am_[What]4{_is_}2"
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "2062",
        "saida": "Seu programa deverá apresentar o texto que foi distribuído por Mariazinha corrigido, segundo os critérios acima estabelecidos.",
        "entrada": "A entrada contém duas linhas. A primeira linha contém um valor inteiro N (1 < N < 10000) que indica a quantidade de palavras do texto. A segunda linha contém as palavras do texto, cada uma com o máximo de 20 caracteres ('A'-'Z'), e com no mínimo, uma letra ('A'-'Z').",
        "titulo": "OBI URI",
        "descricao": "Mariazinha criou um exercício para as suas irmãs Paula e Marta: ela distribui um texto e pede que ambas corrijam este texto, sabendo que apenas as palavras OBI e URI podem estar escritas de forma errada, e o erro pode estar apenas na última letra. Sua tarefa aqui é automatizar este processo, ou seja, criar um programa que faça a correção dos textos distribuídos pela Mariazinha para que ela possa conferir as correções de suas irmãs sem muito trabalho. Note que se \"OB\" ou \"UR\" forem o início ou parte de uma palavra maior, como por exemplo \"OBOS\" ou \"URAT\"), estas palavras não devem ser alteradas."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1519",
        "saida": "Para cada caso de teste, imprima uma linha contendo a frase já com as abreviações escolhidas e aplicadas. Em seguida, imprima um inteiro N, indicando o número de palavras em que foram escolhidas uma letra para a abreviação no texto. Nas próximas N linhas, imprima o seguinte padrão “C. = P”, onde C é a letra inicial e P é a palavra escolhida para tal letra. As linhas devem ser impressas em ordem crescente da letra inicial.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste é composto de uma linha, contendo uma frase de até 10⁴ caracteres. A frase é composta de palavras e espaços em branco, e cada palavra é composta de letras minúsculas ('a'-'z'), e contém entre 1 e 30 caracteres cada. O último caso de teste é indicado quando a linha dada conter apenas um “.”, o qual não deverá ser processado.",
        "titulo": "Abreviações",
        "descricao": "Blogs são muito populares hoje em dia, e há inclusive ferramentas que te permitem manter o seu blog sem que você pague nada por isso. Rafael resolveu então criar um blog, onde irá arquivar todas as suas experiências diárias de sua vida agitada. Por mais que estas ferramentas sejam gratuitas, há porém um limite de caracteres que se pode escrever por dia, e Rafael está preocupado que essa limitação o irá impedir de contar suas melhores experiências. Decidiu então usar um sistema de abreviação de palavras em seus posts. O sistema de abreviações funciona da seguinte maneira: para cada letra, é possível escolher uma palavra que inicia com tal letra e que aparece no post. Uma vez escolhida a palavra, sempre que ela aparecer no post, ela será substituída por sua letra inicial e um ponto, diminuindo assim o número de caracteres impressos na tela. Por exemplo, na frase: “hoje eu visitei meus pais”, podemos escolher a palavra “visitei” para representar a letra 'v', e a frase ficará assim: “hoje eu v. meus pais”, economizando assim cinco caracteres. Uma mesma palavra pode aparecer mais de uma vez no texto, e será abreviada todas as vezes. Note que, se após uma abreviação o número de caracteres não diminuir, ela não deve ser usada, tal como no caso da palavra “eu” acima. Rafael precisa que seu post tenha o menor número de caracteres possíveis, e por isso pediu a sua ajuda. Para cada letra escolha uma palavra, de modo que ao serem aplicadas todas as abreviações, o texto contenha o menor número de caracteres possíveis."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "1632",
        "saida": "Para cada caso de teste imprima uma linha contendo um inteiro, indicando o número de diferentes variações que é possível montar com a senha dada, incluindo ela mesma.",
        "entrada": "A primeira linha contém um inteiro T, indicando o número de casos de teste a seguir. Cada caso de teste contém uma sequência de caracteres S, indicando a senha de seu amigo. Para cada senha, haverá no mínimo 1 e no máximo 16 caracteres, os quais podem ser uma das 26 letras do alfabeto, minúsculas ou maiúsculas.",
        "titulo": "Variações",
        "descricao": "A internet já não é tão segura quanto ela já foi. Um dos sinais disso é o aumento de ataque de hackers a diversos sites. Para piorar, quando um hacker rouba a senha de um usuário em um determinado site, ele tem também acesso a todas as outras contas deste usuário em outros sites, pois a maioria dos usuários hoje em dia usa a mesma senha em todos os sites que acessa. Uma das soluções propostas para resolver este problema é usar diferentes senhas para cada site, ou até mesmo diferentes variações da mesma senha. Por exemplo, para variar a senha “batata”, é possível usar a senha “bAtaTa”, “B4tat4”, “baTATA”, etc. Ou seja, para cada caractere do alfabeto, é possível formar uma variação colocando tal caractere em maiúsculo ou minúsculo. Inclusive, para aumentar o número total de variações, para os caracteres A, E, I, O e S é possível usar também os números 4, 3, 1, 0 e 5, respectivamente. Seu amigo precisa aumentar o número de variações de sua senha, e pediu sua ajuda. Dada a senha que ele escolheu, diga o número de diferentes variações que é possível montar."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1313",
        "saida": "Para cada caso de teste imprima uma linha contendo um inteiro representando o número de diferentes palavras que podem ser construídas concatenando-se um prefixo não-vazio de uma palavra no primeiro conjunto (palavras em Português) e um sufixo não-vazio de uma palavra no segundo conjunto (palavras em Espanhol).",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém dois inteiros P e S representando respectivamente o número de palavras em Português e o número de palavras em Espanhol. (1 ≤ P, S ≤ 1000). Cada uma das próximas P linhas contém uma palavra em Português, e cada uma das próximas S linhas contém uma palavra em Espanhol. Cada palavra é uma cadeia não-vazia de no máximo 1000 caracteres. Cada caracteres é uma das 26 letras minúsculas (de 'a' até 'z'). Você pode assumir que dentro de cada caso de teste duas palavras em Português não são iguais, e que a soma dos comprimentos de todas as palavras em Português é no máximo 105. O mesmo se aplica às palavras em Espanhol. O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Dicionário Portuñol",
        "descricao": "Portuñol é um idioma especial que foi naturalmente desenvolvido na América Latina. Como quase metade da América Latina fala Português e quase metade fala Espanhol (Español), a mistura de ambos os idiomas é natural. Cada palavra em Portuñol é construída tomando um prefixo não-vazio de um palavra em Português e um sufixo não-vazio de uma palavra em Espanhol, e concatenando-os. Um prefixo de uma palavra é qualquer palavra que possa ser obtida apagando zero ou mais caracteres da sua extremidade direita. Um sufixo de uma palavra é qualquer palavra que possa ser obtida apagando zero ou mais caracteres da sua extremidade esquerda. O nome do prórpio idioma tem origem tomando um prefixo da palavra \"Português\" (Portu) e um sufixo da palavra \"Español\" (ñol), e concatenando-os. É claro, que nem toda maneira possível de combinar duas palavras resultará em algo que faz sentido, ou nem mesmo pronunciável, mas isso não é importante. Nós queremos que você escreva um programa para contar o número de diferentes palavras em Portuñol. Será dado a você dois conjuntos não-vazios de palavras para testar o seu programa. O primeiro conjunto representará as palavras em Português e o segundo conjunto representará as palavras em Espanhol. Você precisa calcular o número de palavras diferentes em Portuñol que podem ser construídas usando as regras de prefixo e sufixo descritas acima. Note que a mesma palavra pode ser construída de várias maneiras, mas ela precisa ser contada apenas como uma. Também note que os conjuntos de entrada são apenas para testar o seu programa, então eles não precisam necessariamente ser feitos de palavras atuais do Português ou do Espanhol."
    },
    {
        "nivel": "2",
        "assunto": "3",
        "numero": "1272",
        "saida": "Para cada caso de teste imprima a mensagem oculta no texto de entrada.",
        "entrada": "A entrada contém vários casos de testes. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste que vem a seguir. Cada caso de teste consiste de uma única linha contendo de um a 50 caracteres, formado por letras minúsculas (‘a’-‘z’) ou espaços (‘ ’). Atenção para possíveis espaços no início ou no final do texto! Nota: No exemplo de entrada os espaços foram substituídos por pequenos pontos (‘·’) para facilitar o entendimento dos exemplos.",
        "titulo": "Mensagem Oculta",
        "descricao": "Textos podem conter mensagens ocultas. Neste problema a mensagem oculta em um texto é composto pelas primeiras letras de cada palavra do texto, na ordem em que aparecem. É dado um texto composto apenas por letras minúsculas ou espaços. Pode haver mais de um espaço entre as palavras. O texto pode iniciar ou terminar em espaços, ou mesmo conter somente espaços."
    },
    {
        "nivel": "4",
        "assunto": "3",
        "numero": "2108",
        "saida": "Para cada caso de teste, exiba o número de caracteres de cada palavra que compõe a frase recebida. Separe a quantidade de caracteres de cada palavra por um ' - '. Exiba também a palavra com a maior quantidade de caracteres de todas as frases recebidas. Obs: Se possuir palavras com números identicos de caracteres, cosiderar a última recebida.",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de um caso de teste contém uma 1 ≤ String ≤ 100 com uma única palavra ou um conjunto de palavras que formam uma frase. Os casos de teste serão processados quando o número 0 for recebido. Não pode haver mais que um espaço separando cada palavra.",
        "titulo": "Contando Caracters",
        "descricao": "Matheus estava conversando com a sua noiva via mensagem de texto, quando ela lhe enviou a seguinte mensagem: 1-4-3 Ele não entendeu a mensagem, então ele perguntou o que isso significava, e ela respondeu que era 'I Love You\" e logo ele percebeu que cada número separado por um ' - ' é a quantidade de caracteres de cada uma das palavras que compõem a frase. Com isso, ele teve a ideia de criar um programa que inserindo determinada frase, ele calcula a quantidade de caracteres de cada uma das palavras e separa os valores por ' - '. Mas ele ainda teve a ideia de que o programa deveria receber várias frases linha por linha e ainda no final da execução do programa, a palavra com a maior quantidade de letras deveria ser exibida."
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "1868",
        "saida": "Para cada caso de teste imprima N x N tabelas, cada uma separada com um ‘@’, seguindo as regras da animação como descritas anteriormente.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (1 ≤ N ≤ 25), indicando o tamanho da tela. O último caso de teste é indicado quando N = 0, sendo que este caso não deverá ser processado.",
        "titulo": "Espiral Quadrada",
        "descricao": "A empresa Animações Livres de Falhas, ou ALF, realiza as mais diversas animações usando apenas caracteres na tela. Um dia, foram desafiados a fazer uma animação de uma Espiral Quadrada. Esta deverá proceder da seguinte forma: *Sempre exibirá uma tabela quadrada, com N linhas e N colunas, com um caractere em seu respectivo lugar, sem espaços entre os mesmos; *Esta quantidade N será sempre ímpar; *O primeiro quadro desta animação será com um caractere ‘X’ no centro da tabela e o restante da mesma ocupado com caracteres ‘O’; *Nos quadros seguintes, o caractere ‘X’ será deslocado para os outros locais da tabela, substituindo onde o mesmo estava com ‘O’, exibindo sempre uma vez o ‘X’ em cada quadro. O deslocamento será no formato de uma espiral quadrada, realizando o deslocamento para direita, para cima, para esquerda e para baixo. Veja um exemplo de todos os quadros da animação com N = 5: Escreva um programa que, dado um número inteiro, imprima todos os quadros da animação da espiral quadrada."
    },
    {
        "nivel": "1",
        "assunto": "3",
        "numero": "2023",
        "saida": "A saída é dada em uma linha. O nome da criança que fica na última posição da lista deve ser mostrado. Mostre o nome exatamente como foi lido na entrada. Use a ordem alfabética dos nomes para ordenar, mas considere maiúsculas e minúsculas como iguais.",
        "entrada": "A entrada possui várias linhas. Em cada linha há o nome de uma criança boa. Nenhum elfo escreveu os nomes com acentos. O maior nome tem no máximo 80 caracteres. Não existem mais de 1000 crianças na lista. Todos os nomes são distintos. A lista de nomes termina com EOF.",
        "titulo": "A Última Criança Boa",
        "descricao": "Papai Noel classifica todas as crianças do mundo em duas listas: uma das boazinhas e outra das malcriadas. Ele gostaria de saber qual das crianças do mundo é a última da lista de boazinhas, se usar a ordem alfabética. Para isso, ele pediu a todos seus elfos ajudantes que escrevessem os nomes das crianças boas em uma folha. Entretanto, cada elfo escreveu os nomes de um jeito: maiúscula no início e minúsculas depois, todas maiúsculas, todas minúsculas, e todo tipo de combinação entre maiúsculas e minúsculas. Papai Noel quer sua ajuda para, dada a lista de nome das crianças boas, dizer qual delas é a última."
    },
    {
        "nivel": "3",
        "assunto": "3",
        "numero": "2132",
        "saida": "Para cada caso, você deverá imprimir um identificador K, onde K é o número da caso atual. Na linha seguinte imprima a soma dos custos. Após cada caso imprima uma linha em branco.",
        "entrada": "A entrada é composta de diversas palavras (o diagrama é sempre o da figura). Cada caso é dada por uma linha contendo uma palavra. Uma palavra é uma sequência de letras [A, B] com no máximo 60 letras. A entrada termina com final de arquivo (EOF).",
        "titulo": "Não é Mais Um Joguinho Canadense!",
        "descricao": "O Canadá é um país muito frio. Em 8 meses por ano as temperaturas praticamente impedem que as ruas sejam ocupadas por vida inteligente, restando apenas criaturas resistentes ao frio como alces, ursos e canadenses (brincadeirinha). Nestes longos meses de inverno famílias buscam diversão em frente de suas lareiras (ou, para as mais corajosas, ao redor de suas fogueiras). A família Smith, de Banff, inventou o jogo que descrevemos a seguir. A brincadeira começa com uma das crianças desenhando um diagrama com estados (representados por bolinhas) ligados por transições (flechas ligando os estados). Cada transição tem uma letra e um número associados. Podemos fazer diversos passeios neste diagrama, partindo de um estado inicio caminhando por suas transições e terminando em um estado final. Um passeio forma uma palavra (obtida da concatenação das letras das transições percorridas) e tem um custo (que é dado pelo produto dos números destas transições). Exemplo, considere o diagrama abaixo. Figura 1: Diagrama Todos os passeios iniciam no estado P e terminam em Q. O passeio que segue pelas transições (P,1A), (P,1A), (P,1B) e termina no estado Q forma a palavra AAB concatenando as letras de cada transição tem custo 1 (produto dos números destas transições). O passeio que segue pelas transições (P,1A), (P,1A), (P,1B), (Q,2B) e termina no estado Q forma a palavra AABB e tem custo 2. O jogo inventado pelo papai Smith era o seguinte. Depois de desenhar um diagrama como esse, um dos membros da família falava uma palavra, e os outros deveriam descobrir a soma dos custos de todos os passeios no diagrama que formam a palavra dada tais que iniciam no estado P e terminam no estado Q. No caso do exemplo do diagrama acima, se o Sr. Smith pedisse a palavra ABA a resposta deveria ser 2."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1516",
        "saida": "Para cada caso de teste, imprima A linhas, contendo B caracteres cada, representando o desenho de Rafael redimensionado. Após cada caso de teste, imprima uma linha em branco.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (1 ≤ N, M ≤ 50), representando, respectivamente, a altura e a largura do desenho de Rafael. A seguir haverá N linhas, contendo M caracteres cada, representando o desenho feito por Rafael. Após, haverá dois inteiros A e B (N < A ≤ 100, M < B ≤ 100, A é múltiplo de N, e B é multiplo de M), representando, respectivamente, a nova altura e largura que Rafael deseja que seu desenho tenha. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.",
        "titulo": "Imagem",
        "descricao": "Rafael encontrou um novo hobbie: fazer desenhos usando caracteres do teclado. Por mais simples ou limitada que essa nova forma de arte possa parecer, basta criatividade para se fazer os mais diferentes tipos de desenhos. Após fazer alguns desenhos, Rafael imaginou como seriam se eles fossem redimensionados, porém ter que refazer todo o desenho pareceu meio cansativo. Para isso, Rafael pediu sua ajuda. Em um redimensionamento, uma imagem com N linhas e M colunas passa a ter A linhas e B colunas, e, dado que as novas dimensões da imagem redimensionada é maior do que as dimensões da imagem original, alguns caracteres terão que se repetir. Digamos que A seja 3 vezes maior que N. Nesse caso, cada linha terá que se repetir 3 vezes, para que a imagem seja redimensionada de forma correta. Dado um desenho feito por Rafael, imprima como seria se o desenho fosse redimensionado para uma determinada nova dimensão."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1854",
        "saida": "Para cada dia do inverno, encerrado na entrada por uma linha de cinco inteiros, imprima uma linha contendo o número do dia e o número de possibilidades para a distribuição das cenouras entre os bonecos de neve da área delimitada. Considere que a contagem dos dias se inicia em 1. Como o número de possibilidades pode ser muito grande, imprima apenas o resto que esse valor deixa quando dividido por 109 + 7. O exemplo de entrada e saída esclarecem mais detalhes sobre o formato da saída.",
        "entrada": "A entrada descreve, em sequência, todos os eventos que aconteceram durante o inverno à sombra das muralhas de Winterfell e é composta por no máximo 105 linhas. A primeira linha da entrada é constituída por dois inteiros: N e M (1 ≤ N, M ≤ 103), os quais representam as dimensões da Vila. Cada uma das linhas seguintes descreve um evento, caracterizado pelo número de inteiros presentes na linha: se a linha consiste de três inteiros, X, Y e B (1 ≤ X ≤ N, 1 ≤ Y ≤ M, 1 ≤ B ≤ 100), significa que uma criança construiu B bonecos de neve na posição da Vila de coordenadas (X, Y); se a linha consiste de dois inteiros, X e Y (1 ≤ X ≤ N, 1 ≤ Y ≤ M), significa que uma criança destruiu todos os bonecos presentes na posição de coordenadas (X, Y); se a linha consiste de cinco inteiros, X1, Y1, X2, Y2 e C (1 ≤ X1 ≤ X2 ≤ N, 1 ≤ Y1 ≤ Y2 ≤ M, 1 ≤ C ≤ 103), significa que o rei concedeu C cenouras idênticas para serem distribuídas entre os bonecos de neve construídos na região retangular definida pelas posições de coordenadas (X1, Y1) e (X2, Y2), marcando o fim de um dia. A última linha da entrada é sempre uma linha de cinco inteiros.",
        "titulo": "Inverno em Winterfell",
        "descricao": "Certa tarde, na Vila de Inverno, do lado de fora dos portões do castelo de Winterfell, as crianças começaram a construir bonecos de neve, para a alegria e o divertimento da plebe que negociava no mercado. Os bonecos estavam ficando adoráveis, não fosse por um detalhe: nenhum deles possuía nariz, já que as únicas cenouras agora remanescentes em Westeros estavam na despensa real da Casa Stark. O rei, comovido, resolveu ceder algumas de suas cenouras para que fossem distribuídas em regiões retangulares da Vila. Mas as crianças de Westeros são gananciosas e não se importam em colocar vários narizes em seus bonecos, ainda que outras crianças fiquem sem narizes para pôr em seus bonecos. Por exemplo, se o rei designa 2 cenouras idênticas para uma região em que há 3 bonecos, a, b e c, há 6 possibilidades para a distribuição dessas cenouras entre os bonecos depois que as crianças terminem de brigar entre si: a fica com 2 narizes e b e c com nenhum; a e b ficam com 1 nariz cada e c com nenhum; a e c ficam com 1 nariz cada e b com nenhum; b fica com 2 narizes e a e c com nenhum; b e c ficam com 1 nariz cada e a com nenhum; c fica com 2 narizes e a e b com nenhum. Percebendo que as brigas entre as crianças estava levando um número considerável delas a óbito, e preocupando-se com o futuro populacional do reino, o rei decidiu escolher apenas uma região retangular por dia, de modo que a distribuição das cenouras fosse feita sempre no fim do dia, quando todos os bonecos de neve do dia já houvessem sido construídos. Não é permitido às crianças usar cenouras para bonecos fora da região premiada do dia, nem tampouco levar cenouras para casa a fim de as usar no dia seguinte. O rei também ordenou que, tão logo a noite caísse e as crianças fossem embora, um oficial recolhesse todas as cenouras, deixando, contudo, os bonecos de neve intactos. A propósito, os bonecos construídos pelas crianças de Westeros são muito resistentes, podendo permanecer de pé por todo o inverno, a menos que sejam destruídos propositalmente por outra criança."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1856",
        "saida": "Imprima uma linha para cada operação do tipo Q com sua resposta.",
        "entrada": "A primeira linha contém um inteiro N (1 ≤ N ≤ 5×104), o número de inimigos inicialmente em sua lista. Considere que todas as pessoas são numeradas de 1 a 109, inclusive. A próxima linha contém N inteiros, descrevendo a lista inicial de Arya. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 5×104), o número de operações. As próximas Q linhas descrevem as operações. Cada operação pode estar em um dos seguintes formatos: I p e (1 ≤ e, p ≤ 109): Insira a pessoa p depois do inimigo e na lista. É garantido que e está na lista, e p não está na lista; R e (1 ≤ e ≤ 109): Remova o inimigo e da lista. É garantido que e está na lista; Q a b (1 ≤ a, b ≤ 109): Determine quantos inimigos estão na lista entre a e b, excluindo ambos. É garantido que a e b estão na lista.",
        "titulo": "A Lista da Morte de Arya",
        "descricao": "Arya: \"Cersei. Walder Frey. Montanha. Meryn Trant.\" Para se manter motivada, Arya sempre lembra a lista de inimigos que ela mais odeia. O principal objetivo de sua jornada é matar todos na sua lista! Entretanto, às vezes algum inimigo dela pode ser morto por outra pessoa. Quando ela descobre que tal inimigo morreu, ela o remove da sua lista. Além disso, Arya também pode fazer novos inimigos durante sua jornada. Quando ela faz um novo inimigo, tal inimigo é incluído na sua lista. Arya quer matar seus inimigos um por um, na mesma ordem em que aparecem na sua lista. A qualquer momento, ela pode se perguntar quanto tempo irá levar para matar todos que estão entre dados dois inimigos. Para tal, dados dois inimigos a e b, ela deve determinar quantos inimigos estão na lista entre a e b, excluindo ambos. Ajude Arya respondendo tais perguntas."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2065",
        "saida": "Imprima uma linha contendo um inteiro, indicando quanto tempo levará para que todos os clientes sejam atendidos.",
        "entrada": "A primeira linha conterá dois inteiros N e M, indicando o número de funcionários no caixa e o número de clientes, respectivamente (1 ≤ N ≤ M ≤ 104). Em seguida haverá N inteiros vi, indicando quanto tempo leva para o i-ésimo funcionário processar um item (1 ≤ vi ≤ 100, para todo 1 ≤ i ≤ N). Em seguida haverá M inteiros cj, indicando quantos itens o j-ésimo cliente tem em sua cesta (1 ≤ cj ≤ 100, para todo 1 ≤ j ≤ M).",
        "titulo": "Fila do Supermercado",
        "descricao": "Hoje é a inauguração de um grande supermercado em sua cidade, e todos estão muito excitados com os baixos preços prometidos. Este supermercado tem N funcionários que trabalham no caixa, identificados por números de 1 a N, onde cada funcionário leva um determinado tempo vi para processar um item de um cliente. Ou seja, se um cliente tem cj itens em sua cesta, um determinado funcionário levará vi*cj segundos para processar todos os itens deste cliente. Quando um cliente entra na fila para ser atendido ele espera até que um funcionário esteja livre para o atendê-lo. Se mais de um funcionário estiverem livres ao mesmo tempo, o cliente será atendido pelo funcionário de menor número de identificação. Tal funcionário só estará livre novamente após processar todos os itens deste cliente. Há M clientes na fila para serem atendidos, cada um com um determinado número de itens na sua cesta. Dadas as informações sobre os funcionários nos caixas e os clientes, o gerente pediu sua ajuda para descobrir quanto tempo levará para que todos os clientes sejam atendidos."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1068",
        "saida": "O arquivo de saída deverá ter a quantidade de linhas correspondente ao arquivo de entrada, cada uma delas contendo as palavras correct ou incorrect de acordo com as regras acima fornecidas.",
        "entrada": "Como entrada, haverá N expressões (1 <= N <= 10000), cada uma delas com até 1000 caracteres.",
        "titulo": "Balanço de Parênteses I",
        "descricao": "Dada uma expressão qualquer com parênteses, indique se a quantidade de parênteses está correta ou não, sem levar em conta o restante da expressão. Por exemplo: a+(b*c)-2-a        está correto (a+b*(2-c)-2+a)*2  está correto enquanto (a*b-(2+c)         está incorreto 2*(3-a))           está incorreto )3+b*(2-c)(        está incorreto Ou seja, todo parênteses que fecha deve ter um outro parênteses que abre correspondente e não pode haver parênteses que fecha sem um previo parenteses que abre e a quantidade total de parenteses que abre e fecha deve ser igual."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1566",
        "saida": "Para cada caso de teste de entrada, imprima uma linha contendo os valores das alturas de todos os moradores da cidade (em cm), por ordem crescente de altura, separados por um espaço em branco. Obs.: O arquivo de entrada é bastante grande, portanto, utilize um método rápido para leitura / escrita.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro NC (NC < 100) que indica a quantidade de casos de teste, ou seja de cidades. Para cada caso de teste, a primeira linha conterá um inteiro N (1 < N ≤ 3000000), indicando a quantidade de pessoas da cidade. A próxima linha irá conter a altura de cada uma destas pessoas, em centímetros, representado pela letra h (20 ≤ h  ≤ 230) e separados por um espaço em branco.",
        "titulo": "Altura",
        "descricao": "Cheio de boas ideias, agora o governo brasileiro resolveu criar a \"bolsa altura\". Desta forma, você foi incumbido de fazer o levantamento da altura da população de várias cidades e ordenar esta população por ordem crescente de altura. Você sabe que as cidades as quais terá que fazer isso tem menos de 3 milhões de habitantes e que ninguém, segundo o IBGE, tem mais do que 230 cm de altura nestas cidades."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1077",
        "saida": "Para cada caso, apresente a expressão convertida para a forma posfixa.",
        "entrada": "A primeira linha da entrada contém um valor inteiro N (N < 1000), que indica o número de casos de teste. Cada caso de teste a seguir é uma expressão válida na forma infixa, com até 300 caracteres.",
        "titulo": "Infixa para Posfixa",
        "descricao": "O Professor solicitou que você escreva um programa que converta uma expressão na forma infixa (como usualmente conhecemos) para uma expressão na forma posfixa. Como você sabe, os termos in (no meio) e pos (depois) se referem à posição dos operadores. O programa terá que lidar somente com operadores binários +,-,*,/,^, parênteses, letras e números. Um exemplo seria uma expressão como: (A*B+2*C^3)/2*A. O programa deve converter esta expressão (infixa) para a expressão posfixa: AB*2C3^*+2/A*"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1640",
        "saida": "Para cada caso de teste, imprima uma linha contendo o número mínimo de hotéis nos quais a companhia de transportes deve realizar reserva para uma entrega da cidade 1 à cidade n. Se não for possível encontrar uma rota que o motorista tenha de dirigir no máximo 10 horas por dia, imprima -1.",
        "entrada": "O arquivo de entrada contém diversos casos de teste. Cada caso de teste começa com uma linha contendo um inteiro n, (2 ≤ n ≤ 10000), indicando o número de cidades a serem consideradas durante o planejamento. Por simplicidade, as cidades são numeradas de 1 a n, onde 1 é a cidade inicial, e n é a cidade de destino. A próxima linha contem um inteiro h seguido pelos números c1, c2, ..., ch indicando o número de cidades nas quais os hotéis da rede estão localizados. Você pode assumir que 0 ≤ h ≤ min(n, 100). A terceira linha de cada caso de teste contém um inteiro m(1 ≤ m ≤ 105), que representa o número de estradas a serem consideradas para o planejamento da rota. As m linhas seguintes descrevem as estradas. Cada estrada é descrita por uma linha contendo três inteiros a, b, t(1 ≤ a, b ≤ n e t ≤ 600) onde a, b são duas cidades conectadas pela estrada, e t é o tempo em minutos necessário para o motorista dirigir do final de uma estrada ao outro. A entrada acaba quando n = 0.",
        "titulo": "Reservando Hotéis",
        "descricao": "Uma companhia de transportes frequentemente necessita transportar bens de uma cidade para outra. A companhia de transportes fez um acordo especial com uma rede de hotéis que permite que seus motoristas fiquem hospedados nos hotéis desta rede gratuitamente. Os motoristas podem dirigir apenas 10 horas por dia. A companhia de transportes deseja encontrar uma rota que parte da cidade inicial e termina na cidade de destino tal que o motorista possa sempre passar a noite em um dos hotéis da rede, e que este precise dirigir no máximo 10 horas de um hotel até o próximo, ou até o destino. Naturalmente, o número de dias necessários para a entrega ser realizada também deve ser minimizado."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1356",
        "saida": "Para cada caso de teste imprima os resultados de cada comando de hashing na entrada. Na i-ésima linha escreva um inteiro representando o resultado do i-ésimo comando de hashing. Imprima uma linha contendo um único caractere '-' (hífen) após cada caso de teste.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém quatro inteiros B, P, L e N, onde B é o número de possíveis valores de um byte Joviano, P é o módulo da hash Joviana (2 ≤ B < P ≤ 109 e P primo), L é o comprimento (número de bytes Jovianos) do firmware das espaçonaves, e N é o número de comandos a simular (1 ≤ L, N ≤ 105). No início da simulação o valor de cada byte no firmware é fi = 0 para 1 ≤ i ≤ L. Cada uma das N linhas seguintes descreve um comando a simular. Cada descrição de comando começa com uma letra maiúscula que é ou um 'E' ou um 'H', com os seguintes significados. 'E': A linha descreve um comando de edição. A letra é seguida por dois inteiros I e V indicando que o byte na posição I do firmware (ou seja, fi) deve receber o valor V (1 ≤ I ≤ L e 0 ≤ V ≤ B-1). 'H': A linha descreve um comando de hash. A letra é seguida por dois inteiro I e J indicando que H(fi...fj) deve ser computado (1 ≤ I ≤ J ≤ L). O último caso de teste é seguido por uma linha contendo quatro zeros.",
        "titulo": "Júpiter Ataca!",
        "descricao": "Júpiter está invadindo! As principais cidades tem sido destruídas por espaçonaves Jovianas e a humanidade está lutando contra. Nlogônia está à frente da contraofensiva, invadindo os sistemas de controle das espaçonaves. Diferente dos computadores Terráqueos, nos quais usalmente um byte possui 28 valores possíveis, os computadores Jovianos usam bytes com B possíveis valores, {0,1,...,B-1}. Os engenheiros de software Nlogonianos tem realizado engenharia reversa sobre o firmware das espaçonaves Jovianas, e planejam sabotá-lo de modo que as embarcações eventualmete autodestruam-se. Como uma medida de segurança, entretanto, as espaçonaves Jovianas rodam um programa supervisor que periodicamente checa a integridade do firmware, aplicando hashing sobre porções dele e comparando o resultado contra valores bons conhecidos. Para aplicar o hashing sobre uma porção do firmware do byte na posição i até o byte na posição j, o supervisor usa a função de hashing ​ onde P é um número primo. Por exemplo, se B = 20 e P = 139, enquanto os bytes 2 ao 5 do firmware tem os valores f2 = 14, f3 = 2, f4 = 2 e f5 = 4 então H(f2, . . . f5) = B0 f5 + B1 f4 + B2 f3 + B3 f2 (mod P)                                       = 200 × 4 + 201 × 2 + 202 × 2 + 203 × 14 (mod 139)                = 4 + 40 + 800 + 112000 (mod 139) = 112844 (mod 139)       = 115                             Os criptologistas Nlogonianos precisam encontrar um meio de sabotar o firmware sem esbarrar no supervisor. Como um primeiro passo, a você foi atribuída a função de escrever um programa para simular a intercalagem de dois tipos de comandos: edição de bytes do firmware pelos engenheiros de software Nlogonianos, e o cálculo de hashes de porções do firmware pelo program supervisor Joviano. No início da simulação o valor de cada byte é zero."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1683",
        "saida": "Para cada caso de teste imprima em uma única linha a área do maior retângulo no histograma especificado. Lembre-se que esse retângulo deve estar alinhado com a base do histograma.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste descreve um histograma, e inicia com um inteiro n, que representa o número de retângulos que o compõe. Assuma que 1 ≤ n ≤ 100000. Em seguida, n inteiros h1, ..., hn, onde 0 ≤ hi ≤ 1000000000. Esses números representam as alturas dos retangulos do histograma, da esquerda para a direita. A largura de cada retângulo é 1. Um zero na entrada representa o ultimo caso de teste.",
        "titulo": "Maior Retângulo em um Histograma",
        "descricao": "Um histograma é um polígono composto por uma seqüência de retângulos alinhados em uma linha de base comum. Os retângulos têm larguras iguais, mas podem ter diferentes alturas. Por exemplo, a figura da esquerda nos mostra um histograma com retângulos de alturas 2, 1, 4, 5, 1, 3, 3, onde a medida 1 é a largura dos retângulos: Normalmente, histogramas são utilizados para representar distribuições discretas, como a freqüência de caracteres em um texto. Note que a ordem dos retângulos, ou seja, suas alturas, é importante. Calcule a área do maior retângulo de um histograma, que também esteja alinhado com a base. A figura da direita mostra o maior retângulo alinhado no histograma apresentado."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2185",
        "saida": "Para cada alteração nas pilhas do jogo, você deverá imprimir \"Possivel\", se Dabriel tem chance de ganhar, ou \"Impossivel\", caso contrário.",
        "entrada": "A primeira linha do caso de teste consiste de dois inteiros N (1 ≤ N ≤ 10⁵) e M (1 ≤ M ≤ 10⁵), representando a quantidade de pilhas e a quantidade de alterações que serão feitas respectivamente. A segunda linha consiste de N inteiros vi (1 ≤ i ≤ N, 0 ≤ vi ≤ 10⁴), representando a quantidade de Pomekons que a pilha i contém. As próximas M linhas consistem de três inteiros X, Y, V (1 ≤ X ≤ Y ≤ N, 1 ≤ V ≤ 10⁴), descrevendo as alterações que Guarte irá realizar.",
        "titulo": "Brincando com Pomekons",
        "descricao": "Depois de capturar muitos Pomekons, Dabriel e Guarte resolveram criar um jogo com os monstrinhos e quem vencesse ficaria com todos eles. O jogo criado funciona da seguinte maneira: Todos os Pomekons são separados em N pilhas, elas não terão necessariamente a mesma quantidade de monstrinhos, o jogador da rodada escolhe uma pilha e remove um ou mais Pomekons dela. O jogo termina quando não existe nenhum monstrinho para ser selecionado, e o jogador desta rodada é considerado o perdedor. Como Dabriel é sempre o primeiro a jogar e nas últimas rodadas ele está ganhando, Guarte está desconfiado que Dabriel descobriu um macete do jogo, portanto ele propôs uma nova regra. Na nova versão do jogo Guarte irá escolher três inteiros X, Y e V, e a quantidade de monstrinhos em cada pilha entre X e Y, inclusive, irão ter a quantidade V de Pomekons. Dabriel aceitou a proposta, mas ele solicitou sua ajuda para dizer se ele terá chance de ganhar sempre que houver uma modificação nas pilhas. Como Dabriel e Guarte estão muito bons neste jogo, você pode assumir que ambos sempre jogam da melhor maneira possível."
    },
    {
        "nivel": "7",
        "assunto": "4",
        "numero": "1500",
        "saida": "Imprima a respostas das consultas, conforme o exemplo de saída.",
        "entrada": "A primeira linha contém T, que indica o número de casos de teste. Cada caso de teste começará com N (N ≤ 100 000) e C (C ≤ 100 000). Após isso você deverá ler C operações no formato descrito acima (1 ≤ p, q ≤ N and 1 ≤ v ≤ 107).",
        "titulo": "Consultas Horríveis",
        "descricao": "O mundo está cada vez mais mal e está ficando cada vez mais difícil de entrar na liga do mal. Desde que o lendário Bad Horse se aposentou, você tem que responder corretamente as perguntas do mal do Dr. Horrible, que tem um PhD em malvadeza (mas não em Ciência da Computação). É dado um conjunto de N elementos, que são inicialmente todos 0. Depois disso você receberá C comandos. São eles: 0 p q v - você tem que adicionar v para todos os números na faixa de p à q (inclusive), onde p e q são dois índices do array. 1 p q - imprima uma linha contendo um único inteiro, que é a soma de todos os elementos do array entre p e q (inclusive)."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1260",
        "saida": "Para cada caso de teste imprima o nome de cada espécie representada na população, em ordem alfabética, seguida pelo percentual da população que representa, com 4 casas decimais. Imprima uma linha em branco entre dois conjuntos de dados consecutivos.",
        "entrada": "A entrada possui vários casos de teste. A primeira linha de entrada contém um inteiro N que indica o número de casos de teste, seguido por uma linha em branco. Cada caso de teste consiste de uma lista com a espécie de cada árvore observada pelo satélite, uma árvore por linha. Nenhum nome de espécie é superior a 30 caracteres. Não existem mais de 10.000 espécies e não mais de 1.000.000 árvores. Há uma linha em branco entre cada caso de teste consecutivo.",
        "titulo": "Espécies de Madeira",
        "descricao": "Coníferas e folhosas (softwoods e hardwoods) são dois grandes grupos de vegetais produtores de madeira. As folhosas são aquele grupo de árvores que têm folhas largas, produzem uma fruta ou castanha e geralmente ficam dormentes no inverno. Os climas temperados da América produzem florestas com centenas de espécies de madeira de lei - árvores que compartilham certas características biológicas. Embora o carvalho, bordo e cereja sejam tipos de árvores de madeira de lei, são espécies diferentes. Juntas, todas as espécies de madeira folhosas representam 40 por cento das árvores nos Estados Unidos. Por outro lado, as madeiras macias (Softwoods) ou coníferas, chamadas \"cone-bearing\", são resinosas amplamente disponíveis EUA. Incluem cedro, abeto, cicuta, pinho, abeto vermelho e cipreste. Em uma casa, os resinosas são utilizados principalmente como madeira de viga estrutural, mas também podem ser utilizadas em algumas aplicações decorativas. Usando tecnologia de imagem por satélite, o Departamento de Recursos Naturais elaborou um inventário de todas as árvores de um local específico em um determinado dia. Você deverá calcular a fração da população de cada árvore representada por cada uma das espécies."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1261",
        "saida": "Para cada caso de teste de entrada, imprima o salário do funcionário que é calculado através deste sistema Pontos de Feno (que nada mais é do que a soma do valor de todas as palavras que aparecem na descrição do cargo). Obs.: o valor das palavras que não aparecem no dicionário é zero (0).",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém dois números inteiros positivos: M (M ≤ 1000), que é o número de palavras no dicionário Hay Point, e um número inteiro N (N ≤ 100) que corresponde à quantidade de descrições de cargos ou funções. M linhas seguem, cada um contém uma palavra (uma seqüência de até 16 letras minúsculas) e um valor de dólar (um número real entre 0 e 1000000). Logo na sequência, após o dicionário, estão as descrições de cada uma dos cargos N. Cada descrição de cargo consiste em uma ou mais linhas de texto. Para sua conveniência, o texto contém somente letras minúsculas (de 'a' até 'z'). Cada descrição de cargo é finalizada por uma linha contendo um ponto \".\".",
        "titulo": "Pontos de Feno",
        "descricao": "Cada funcionário de um serviço burocrático tem uma descrição do cargo - alguns parágrafos que descrevem as responsabilidades do trabalho. A descrição do cargo combinado com outros fatores, como por exemplo tempo de serviço, é utilizado para determinar qual é o salário deste funcionário. Um sistema denominado Pontos de Feno (Hay Points) libera o departamento de Recursos Humanos de ter que fazer um julgamento inteligente do valor de cada empregado para a empresa. A descrição de um cargo ou função é feita através da verificação de palavras e frases que indicam responsabilidade. Em particular, descrições de cargo que indicam o controle sobre um grande orçamento ou gestão sobe um grande número de pessoas geram escores altos neste sistema. Você deve implementar um sistema de Ponto de Feno simplificado. Você terá como informações um dicionário Hay Point que conterá algumas palavras-chaves que são as descrições dos cargos e um valor em dólares americanos associado com cada um destes cargos. Para cada descrição de trabalho você deverá calcular o salário associado com o trabalho, de acordo com este sistema."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1696",
        "saida": "Para cada caso de teste imprima Q + 1 linhas. Na primeira linha, imprima o último número do jogo e o vencedor da sequência inicial e nas próximas Q linhas, o útimo número e o vencedor depois de cada substituição.",
        "entrada": "A primeira linha conterá um número T (1 ≤ T ≤ 100), quantos casos de teste seguem. Para cada caso de teste, a primeira linha conterá um número N (1 ≤ N ≤ 104) e Q (0 ≤ Q ≤ 104), o número de inteiros na sequência inicial e o número de substituições, respectivamente. A próxima linha contém N inteiros da sequência S1, S2, …, SN (-104 ≤ Si ≤ 104). As próxima Q linhas contém A (1 ≤ A ≤ N ) e B (-104 ≤ B ≤ 104), que significa que o elemento SA da sequência inicial é substituído por B (SA = B).",
        "titulo": "Brincando Com Operadores",
        "descricao": "Rusa e Sanches são amigos na escola primária. Este mês eles estão aprendendo como somar e subtrair números inteiros. O professor de matemática deles deu um bom exercício para praticarem estes novos operadores. O exercício é um jogo (para aumentar o interesse dos alunos). É necessário que dois alunos joguem juntos, e como Rusa e Sanches estão sempre fazendo as tarefas juntos, dessa vez não será diferente. O professor deu a eles várias sequências e os movimentos que eles podem realizar são: - Primeiro jogador: Gerar uma nova sequência com a soma do primeiro e segundo números, do terceiro e quarto, do quinto e sexto, etc. - Segundo jogador: Gerar uma nova sequência com a subtração do primeiro e segundo números (nessa ordem), do terceiro e quarto, do quinto e sexto, etc. Se o tamanho da sequência for ímpar, o último número não deve ser modificado. Os jogadores alternam jogadas. O jogo continua até que reste apenas um número, chamado último número. Se ele é ímpar, o primeiro jogador vence. Caso contrário, o segundo vence. Como você pode ver o jogo é previsível, eles não podem alterar o resultado final dado uma sequência inicial. Entretanto, o professor também pediu para eles calcularem o último número da sequência depois de uma substituição num elemento da sequência inicial. Haverá várias substituições, e para cada uma eles tem que jogar novamente. Estas substituições são cumulativas. Ambos precisam aprender a somar e subtrair. Então, no primeiro caso de teste, Rusa será o primeiro jogador e Sanches, o segundo. No segundo caso de teste, eles trocam de ordem, i.e., Sanches é o primeiro jogador e Rusa, o segundo. No terceiro eles mudam de novo, e assim por diante. O professor deu muitas sequências para Rusa e Sanches. Eles já estão chateados do exercício porque eles já aprenderam a lição. Eles precisam terminar todos jogos até o final da semana e eles estão pedindo a você para ajudar com isso. Por exemplo, vamos assumir que a sequência inicial é (4, 2, 3, 5, 1, 6, 10, 2). Então, os movimentos são: (4, 2, 3, 5, 1, 6, 10, 2) → (6, 8, 7, 12) → (-2, -5) → (-7). O último número é -7, e o vencedor é Rusa, porque -7 é impar, e este é o primeiro caso de teste. Vejamos um segundo exemplo, vamos assumir que a sequência inicial é (4, 2, 3). Então, os movimentos são: (4, 2, 3) → (6, 3) → (3). O último número é 3, e o vencedor é Sanches, porque 3 é impar e este é o segundo caso de teste."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1594",
        "saida": "Para cada caso imprima a soma dos maiores elementos de cada sub-vetor.",
        "entrada": "A entrada para esse problema é bem singular, leia com atenção! Na primeira linha você terá um inteiro T (T = 200) indicando o número de casos de teste. Para cada caso você receberá três números inteiros, N (1 ≤ N ≤ 104* ou 1 ≤ N ≤ 106**), K (1 ≤ K ≤ N) e S (0 ≤ S ≤ 109). Para gerar o vetor de inteiros, use o seguinte código em C/C++ em que recomendamos que você copie (control+C) do enunciado: array[0] = S; for (i = 1; i < N; ++i)     array[i] = (1LL*array[i-1]*1103515245 + 12345) % (2147483648LL); É garantido que existe uma solução que não se baseia nas propriedades do gerador da entrada acima. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes.",
        "titulo": "Guloso",
        "descricao": "Dado um vetor de inteiros de tamanho N e um inteiro K, ache o maior elemento para cada sub-vetor contínuo de tamanho K. Imprima a soma de todos estes valores. Exemplo 1: Se tivermos o vetor [3, 2, 1, 4, 10] e K for 3, então temos que considerar os sub-vetores [3, 2, 1], [2, 1, 4] e [1, 4, 10]. O maior elemento de cada sub-vetor vale 3, 4 e 10, somando o total de 17. Exemplo 2: Se tivermos o vetor [1, 2, 3, 4, 5, 6] e K for 2, então temos que considerar os sub-vetores [1, 2], [2, 3], [3, 4], [4, 5] e [5, 6]. O maior elemento de cada sub-vetor vale 2, 3, 4, 5 e 6 somando o total de 20. Exemplo 3: Se tivermos o vetor [5, 4, 3] e K for 1, então temos que considerar os sub-vetores [5], [4] e [3]. O maior elemento de cada sub-vetor vale 5, 4 e 3 somando o total de 12."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2111",
        "saida": "Para cada instância imprima a representação do número N (0 ≤ N < 109) no sorobov com o seguinte formato. As duas primeiras linhas correspondem às pedras que valem 5, na linha seguinte imprima --------- (nove hífens) e as próximas cinco linhas correpondem às pedras que valem 1. Cada linha de pedras deve conter nove caracteres, onde '0' corresponde a um espaço vazio e '1' a uma pedra. Imprima uma linha em branco ao final de cada instância (inclusive a última).",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância corresponde a uma única linha contendo o número N a ser inserido no sorobov. A entrada deve ser lida da entrada padrão.",
        "titulo": "Entendendo o Sorobov",
        "descricao": "Instrumentos de ajuda a calcular existem há séculos. Muito antes do surgimento das máquinas de calcular no século XVII, chineses e japoneses faziam uso de ábacos com os quais podem fazer operações matemáticas sofisticadas em velocidade estonteante. Um instrumento semelhante foi recentemente descoberto em escavações nas imediações da cidade de Ecaterimburgo. Acredita-se ser um ábaco similar ao japonês, chamado, em russo, sorobov (copoбob). O sorobov tem nove colunas, onde cada coluna corresponde a um dígito. A coluna mais à direita representa a unidade, a segunda mais à direita representa as dezenas e assim por diante. Existem 7 linhas, sendo as duas primeiras separadas, por uma barra, das 5 últimas. Na parte de cima (duas primeiras linhas) cada coluna possui uma única pedra, que se encostada na barra separadora soma 5 ao valor do dígito correspondente. Na parte de baixo cada coluna possui 4 pedras e um espaço vazio e a quantidade de pedras entre a barra separadora e o espaço vazio é somado ao valor do dígito correspondente. Dessa forma, dizemos que as pedras de cima valem 5 e as de baixo valem 1. Figura 1: Ilustração de como representar os números de 0 a 9. Sua tarefa neste problema será, dado um número N imprimir uma representação da configuração do sorobov correspondente ao número."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1023",
        "saida": "Para cada entrada, deve-se apresentar a mensagem “Cidade# n:”, onde n é o número da cidade seguindo a sequência (1, 2, 3, ...) e em seguida deve-se listar, por ordem ascendente de consumo, a quantidade de pessoas seguido de um hífen e o consumo destas pessoas, arredondando o valor para baixo. Na terceira linha da saída deve-se mostrar o consumo médio por pessoa da cidade, com 2 casas decimais sem arredondamento, considerando o consumo real total. Imprimir uma linha em branco entre dois casos de teste consecutivos. No fim da saída não deve haver uma linha em branco.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 1*106), indicando a quantidade de imóveis. As N linhas contém um par de valores X (1 ≤ X ≤ 10) e Y (1 ≤ Y ≤ 200), indicando a quantidade de moradores de cada imóvel e o respectivo consumo total de cada imóvel (em m3). Com certeza, nenhuma residência consome mais do que 200 m3 por mês. O final da entrada é representado pelo número zero.",
        "titulo": "Estiagem",
        "descricao": "Devido às constantes estiagens que aconteceram nos últimos tempos em algumas regiões do Brasil, o governo federal criou um órgão para a avaliação do consumo destas regiões com finalidade de verificar o comportamento da população na época de racionamento. Este órgão responsável irá pegar algumas cidades (por amostragem) e verificará como está sendo o consumo de cada uma das pessoas da cidade e o consumo médio de cada cidade por habitante."
    },
    {
        "nivel": "5",
        "assunto": "4",
        "numero": "1425",
        "saida": "Para cada cado de teste, imprima uma única linha contendo 'Let me try!'(Me deixe tentar) se for possível chegar a Pedra M, caso contrário, imprima um linha contendo 'Don't make fun of me!'(Não ria de mim!).",
        "entrada": "A entrada contém mais de 2000 casos de teste. Cada caso de teste contém um única linha. Ela contém dois positivos inteiros N(2 ≤ N ≤ 106), e M(2 ≤ M ≤ N), M indica o número da pedra em que o presente está. O caso de teste no qual N = 0, M = 0 terminará a entrada e não deve ser contado como caso de teste.",
        "titulo": "Presente?!",
        "descricao": "Existe um belo riacho em uma bela vila. N Pedras estão alinhadas em linha reta do número 1 até N, da margem esquerda à margem direita, como mostrado abaixo. [Flanco esquerdo] - [Pedra 1] - [Pedra 2] - [Pedra 2] - [Pedra 3] - [Pedra 4] - [Pedra N] - [Flanco Direito] A distância entre duas Pedras adjacentes é exatamente 1 metro, enquanto a distância entre a margem esquerda e a Pedra 1 e a distância entre a Pedra N e a margem direita também são 1 metro. O sapo Frank está prestes a atravessar o riacho, seu vizinho, o sapo Funny veio a ele e disse: 'Olá Frank, feliz dia das Crianças! Eu tenho um presente para você. Vê? Um pequeno pacote na Pedra 5.' 'Oh, que legal! Obrigado! Eu vou pegar.' 'Espere! Este presente é apenas para sapos inteligentes. Você não pode pegar pulando direto.' 'Oh? Então o que devo fazer?' 'Pular mais vezes. Seu primeiro pulo deve ser da margem esquerda para a Pedra 1, então, pule quantas vezes quiser - não importa se for pra frente ou para traz - mas seu pulo i deve cobrir 2 × i - 1 metros. E mais, uma vez que alcance a margem direita ou esquerda, o jogo termina, sem mais pulos!' 'Hummmm, nada fácil... deixa eu pensar!' Respondeu sapo Frank, 'Devo tentar?'"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2092",
        "saida": "Imprimir M linhas, a i-ésimo delas indicando o resultado da i-ésima mudança descrita na entrada. Cada linha deve conter dois inteiros números dccw e dcw, representando as distâncias em unidades noglônicas da casa que está mudando para a primeira casa cuja família torce para a mesma equipe, no sentido anti-horário e no sentido horário, respectivamente.",
        "entrada": "A primeira linha contém dois números inteiros N e F, indicando, respectivamente, o número de casas ao redor do lago e do número de equipes de futebol em Noglônia (3 ≤ N ≤ 105 e 1 ≤ F ≤ 106). A segunda linha contém três números inteiros A, B e C, que determinam qual equipe é as famílias vivendo inicialmente ao redor do lago torcem, como é descrito na descrição do problema (0 ≤ A, B, C < F). A terceira linha contém um único número inteiro M, que representa o número de mudanças que irão acontecer (1 ≤ M ≤ 105). Cada uma das M seguintes linhas descrevem um movimento usando dois números inteiros I e E, o que significa que a família que torce para o time E está mudando para a casa de número I (1≤ I ≤ N e 0 ≤ E < F). As mudanças aparecem na ordem que elas acontecem, e devem ser levadas em consideração pelo comitê para futuras boas-vindas.",
        "titulo": "Assistindo o Jogo",
        "descricao": "No reino de Noglônia há um lago conhecido como o \"Grande O\" por causa de sua forma perfeitamente redonda. No lado do lago há n casas, cada um deles a uma distância de uma unidade noglônica de seus vizinhos. As casas são numeradas de 1 a N em sentido horário, como pode ser visto na figura a seguir para N = 8. Desta forma, se i <j a distância em sentido horário a partir de casa i para a casa j é j-i, ao passo que a distância correspondente no sentido anti-horário é N - j + i. Note que a distância a partir de uma casa até ela mesma é N, em ambas as direções. Todos sabem que o povo de Noglônia são ávidos fãs de futebol, por isso, quando uma família se muda para uma casa do lado do lago é muito importante para eles saberem quem são os vizinhos mais próximos que torcem para a mesma equipe que eles. Isso nem sempre é fácil, uma vez que pode haver muitas casas ao redor do lago, muitos times de futebol diferentes em Noglônia e várias mudanças. Dada uma sequência de M mudanças, as pessoas que vivem na margem do lago querem saudar cada nova família que chega, dizendo-lhes a distância do seu novo lar para as casas mais próximas que torcem para a mesma equipe que eles, tanto no sentido horário e anti-horário. Observe que, se não houver outra casa na margem do lago cuja família torce para a mesma equipe como o recém-chegado, essa distância será N em ambas as direções, pois a casa mais próxima seria de fato a sua própria casa. Você quer participar do comitê de boas-vindas? Em Noglônia existem F times de futebol, identificados por diferentes números inteiros de 0 a F-1. Não quero que você perca tempo indo de porta em porta perguntando qual equipe é seguida em cada casa, vamos supor que, inicialmente, a família que vive na casa de número i é fã da equipe de número ei, sendo este número gerado, de forma pseudoaleatória, pela fórmula recursiva: e1 = A e ei = (B x ei-1 + C) mod F para i = 2, 3, ..., N onde A, B e C são constantes e a expressão x mod y representa o resto da divisão inteira de x por y."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2120",
        "saida": "A saída consiste em Q inteiros. Os inteiros representam, em ordem, a matrícula dos tutores de cada aluno na ordem que foi pedida.",
        "entrada": "A entrada consiste de quatro linhas. A primeira contém um inteiro N (2 ≤ N ≤ 100 000), o número de estudantes do Farias Brito. A segunda linha contém n inteiros distintos Xi (1 ≤ Xi ≤ 109), representando a matrícula de cada um dos n alunos na ordem em que eles foram adicionados ao sistema. A terceira linha contém Q (1 ≤ Q ≤ 99 999). A quarta linha contém os Q alunos representados por números de 1 a N que se quer informação (não será pedida informação sobre o primeiro aluno).",
        "titulo": "Tutores",
        "descricao": "Cada vez que um novo aluno entra da Organização Educacional Farias Brito, ele recebe um tutor para ajudá-lo a conhecer a todos e tudo na escola. O sistema da escola para determinar o tutor de cada novo aluno foi criado por um louco chamado Succa Liaudzionis. Succa decidiu usar o número de matrícula de cada aluno para seguir o padrão de uma árvore binaria de busca (porque sim), desta maneira: O primeiro aluno, com matrícula X1 vira a raíz da árvore e então não possui tutor. Os números X2, X3, …, Xn são adicionados um a um a árvore. Para adicionar um número Xi, você deve percorrer a árvore partindo da raíz e usando as seguintes regras: O ponteiro está inicialmente apontando para a raíz da árvore. Se Xi é menor que o número do nó atual, o filho da esquerda passar a ser o nó atual. Senão, o filho da direita vira. Se, em algum momento, o filho desejado não existir, cria-se um novo nó contendo o valor de Xi. A matrícula do tutor do estudante atual é o pai de Xi na árvore. Por exemplo, se a ordem na qual os números forem adicionados for (3, 1, 4, 2, 5), a árvore fica desta maneira: Succa precisava de espaço extra em seu computador e decidiu apagar toda informação envolvendo os tutores dos alunos. Agora, seu chefe, Jeixeira Túnior, pediu a mesma informação sobre Q alunos que ele acabou de deletar! Succa considerou perguntar a cada estudante quem é seu tutor, mas isso demoraria tempo demais. Por outro lado, Succa ainda sabe a ordem na qual os estudantes foram adicionados a árvore. Como Succa não é tão brilhante quanto louco, ele precisa da sua ajuda para usar essa informação e determinar o tutor de cada aluno."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2136",
        "saida": "Seu programa deverá imprimir os inscritos pela ordem de escolha e por ordem alfabética, seguido do nome do vencedor. Imprima uma linha em branco entre a lista de inscritos e o nome do vencedor.",
        "entrada": "A entrada contém somente um caso de teste. Cada linha é composta pelo primeiro nome do participante (sem espaços), seguido da opção YES (caso o usuário queira ser O Amigo do Habay) ou NO (caso não queira). A entrada termina assim que o usuário digita \"FIM\" (sem as aspas).",
        "titulo": "Amigos do Habay",
        "descricao": "Todo final de ano ocorre uma festa na Instituição de Educação Fantástica (IEF). Logo no início de julho, são abertas as inscrições para participar dela. No momento da inscrição, o usuário pode escolher se quer ser \"O Amigo do Habay\" na festa ou não. O mais lógico seria escolher a opção Sim, afinal, é um privilégio ser O Amigo do Habay, já que ele é a pessoa mais descolada do IEF. Porém, há indivíduos que definitivamente não pretendem ser O Amigo do Habay, e por motivos desconhecidos. Somente um será o escolhido. Em vista disso, muitos alunos que escolheram a opção Sim realizaram a inscrição diversas vezes para aumentar a própria probabilidade de ser O Amigo do Habay. O organizador geral da festa contratou você para organizar as inscrições do site, pois está havendo um spam de inscrições. O critério para ser o escolhido é a quantidade de letras do primeiro nome, e em caso de empate, vence aquele que realizou primeiro a inscrição. A organização final dos inscritos deverá seguir a ordem de escolha (Sim ou Não), mas respeitando a ordem alfabética. OBS.: Ninguém que escolheu a opção Não realizou a inscrição mais de uma vez."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1025",
        "saida": "Para cada caso de teste de saída deve haver um número serial do caso de teste. Para cada consulta, escreva uma linha de saída. O formato desta linha dependerá se o número consultado estiver ou não escrito em um dos mármores. Os dois diferentes formatos são descritos abaixo: 'x found at y', se o primeiro marble x foi encontrado na posição y. Posições são numeradas de 1, 2,...  a N. 'x not found', se o marble com o número x não estiver presente.",
        "entrada": "A entrada contém vários casos de teste, mas o total de casos é menor do que 65. Cada caso de teste inicia com dois inteiros: N que é o número de mármores e Q que é o número de consultas que Meena deseja fazer. As próximas N linhas conterão os números escritos em cada um dos N mármores. Os números destes mármores não tem qualquer ordem em particular. As seguintes Q linhas irão conter Q consultas. Tenha certeza, nenhum dos números da entrada é maior do que 10000 e nenhum deles é negativo. A entrada é terminada por um caso de teste onde N = 0 e Q = 0.",
        "titulo": "Onde está o Mármore?",
        "descricao": "Raju e Meena adoram jogar um jogo diferente com pequenas peças de mármores, chamados Marbles. Eles têm um monte destas peças com números escritos neles. No início, Raju colocaria estes pequenos mármores um após outro em ordem ascendente de números escritos neles. Então Meena gostaria de pedir a Raju para encontrar o primeiro mármore com um certo número. Ele deveria contar 1...2...3. Raju ganha um ponto por cada resposta correta e Meena ganha um ponto se Raju falha. Depois de um número fixo de tentativas, o jogo termina e o jogador com o máximo de pontos vence. Hoje é sua chance de jogar com Raju. Sendo um/a cara esperto/a, você tem em seu favor o computador. Mas não subestime Meena, ela escreveu um programa para monitorar quanto tempo você levará para dar todas as respostas. Portanto, agora escreva o programa, que ajudará você em seu desafio com Raju."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1452",
        "saida": "Para cada caso de teste, o programa deve imprimir a soma total de conexões entre cliente e servidores em uma linha, desconsiderando múltiplas conexões entre um mesmo par de cliente e servidor.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é iniciado por dois inteiros, N e M (0 ≤ N, M ≤ 200), que correspondem ao número de servidores e ao número de clientes. Cada uma das próximas N linhas contém um valor Qi (0 ≤ Qi ≤ 100) correspondente ao número de aplicações fornecidas pelo i-ésimo servidor, seguido por Qi palavras (separadas por espaços) referentes aos nomes das aplicações fornecidas. Após esta descrição dos servidores, seguem M linhas, cada uma contendo um valor Pj (0 ≤ Pj ≤ 100) correspondente ao número de aplicações requisitadas pelo j-ésimo cliente, seguido por Pj palavras (separadas por espaços) referentes aos nomes das aplições requisitadas. A entrada temina quando N = M = 0. Todos os nomes de aplicativos tem tamanho entre 1 e 20 caracteres.",
        "titulo": "Gloud Computing",
        "descricao": "A Gloud Computing está vindo se instalar para a região de Joinville. Eles são conhecidos por proverem aplicativos na internet, mais especificamente um modelo de negócios baseado em cloud computing - computação nas nuvens. A fim de selecionar os novos funcionários da empresa, eles contactaram o comitê da maratona da UDESC, para que passassem um problema aos nossos maratonistas. Aquele que resolver, além do balão, pode preencher a ficha funcional com estrelinhas a mais. Basicamente, a Gloud Computing tem aplicações espalhadas em seus servidores em diversos lugares do mundo. Estes servidores são especializados em uma lista de aplicativos a serem usados pelos usuários ali conectados na internet das nuvens. Por exemplo, o servidor de Joinville pode disponibilizar a aplicação A, enquanto que o de Pasadena na Califórnia provê as aplicações A, B e C e o servidor de Pomerode provê a aplicação C. Temos um conjunto de servidores a cada um com um conjunto de aplicações a serem disponibilizados a um conjunto de usuários. Cada usuário pode estar conectado a um ou mais servidores dependendo de sua demanda, como ilustrado na Figura 1. Figura 1: 3 provedores de serviços, 2 usuários e 4 conexões. Serão disponibilizados a você dados sobre estes dois conjuntos, servidores e demanda dos usuários, e você deverá dizer a quantidade total de conexões entre clietes e servidores. As conexões são feitas de forma a maximizar a redundância. Por exemplo, se um cliente utilizar as aplicações B e C, ele irá se conectar a todos os servidores que disponibilizarem ao menos a aplicação B e a todos os que disponibilizarem ao menos a C. Múltiplas conexões entre um mesmo par de cliente e servidor são contabilizadas como um só. Pode ser que um cliente requeira uma aplicação inexistente, assim como o caso de um servidor prover uma apliação não requisitada por nenhum cliente."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1340",
        "saida": "Para cada caso de teste, mostre um dos seguintes: stack É definitivamente uma pilha. queue É definitivamente uma fila. priority queue É definitivamente uma fila de prioridade. impossible Não pode ser uma pilha, uma fila ou uma fila de prioridade. not sure Pode ser mais de uma das três estruturas mencionadas acima.",
        "entrada": "Existem muitos casos de testes. Cada caso de teste começa com a linha contando um único inteiro n (1 <= n <= 1000). Cada uma das seguintes n linhas é um comando do tipo 1, ou um número inteiro 2, seguido de um número inteiro x. Isso significa que depois de executar um comando do tipo 2, obtemos um elemento x sem erros. O valor de x é sempre um número inteiro, positivo e não maior do que 100. O final da entrada é determinado pelo final do arquivo (EOF). O tamanho do arquivo de entrada não excede 1MB.",
        "titulo": "Eu Posso Adivinhar a Estrutura de Dados!",
        "descricao": "Existe uma estrutura de dados do tipo sacola, suportando duas operações: 1 x Jogue um elemento x na sacola. 2 Tire um elemento da sacola. Dada uma sequencia de operações que retornam valores, você vai adivinhar a estrutura de dados. É uma pilha (último-dentro, primeiro-fora), uma fila (primeiro-dentro, primeiro-fora), uma fila de prioridade (sempre tire os elementos grandes por primeiro) ou qualquer outra coisa que você dificilmente consegue imaginar!"
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1382",
        "saida": "Para cada instância imprima uma linha contendo o número mínimo de tais trocas que ordena a sequência dada.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância possui um inteiro N (1 ≤ N ≤ 10000) indicando o número de inteiros na sequência. A segunda linha contém uma permutação dos inteiros 1, 2, ... , N separados por espaço.",
        "titulo": "Elementar, meu Caro Watson!",
        "descricao": "Watson, Crick e Wilkins receberam em 1962 o prêmio Nobel de Medicina especialmente pelo seu trabalho que resultou na descoberta da estrutura das moléculas do DNA e na sua importância na transmissão de informações entre as gerações de seres vivos. Watson e Crick publicaram na revista “Nature” em 1953 o artigo em que mostravam que a molécula de DNA apresentava uma estrutura de dupla hélice. O artigo assume enorme importância nos dias de hoje, especialmente depois dos vários avanços na área. Muitas pesquisas têm sido feitas na área de Bioinformática ligadas à descoberta da sequência de bases que compõem as moléculas de DNA dos vários seres vivos. Em especial, a estrutura destas moléculas tem sido usada para compor teorias de como os seres vivos evoluíram e quais têm ancestrais comuns. Acredita-se que os seres vivos presentes hoje no planeta podem descender de ancestrais comuns, sendo que as modificações nos seus respectivos DNAs são devidas a fenômenos de mutação ocorridos durante a evolução. Muitos biólogos acreditam no princípio da parcimônia, que diz que o número destas mutações deve ser o mínimo possível, uma vez que a Natureza busca, de certa forma, o caminho “mais barato” para a modificação desejada. Sua tarefa neste problema é auxiliar os pesquisadores na tarefa de determinar se duas sequências de DNA podem ter um ancestral comum. Considere dadas duas sequências (podemos imaginar como sequências de números inteiros). O seu objetivo é determinar o menor número de trocas de elementos de uma das sequências (os elementos não precisam estar em posições adjacentes na sequência) que leva uma das sequências na outra. Observe que podemos considerar uma das sequências fixa (por exemplo, em ordem crescente), dessa forma buscamos o número mínimo de tais trocas que ordena a sequência dada."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1746",
        "saida": "Imprima uma linha contendo um inteiro que representa o número mínimo total de letras a serem escritas nas placas, quando a divisão dos nomes das ruas e avenidas é escolhida de forma otimizada.",
        "entrada": "A primeira linha contém um número inteiro N (2 ≤ N ≤ 100) que representa tanto o número de ruas quanto o número de avenidas em Sortonia. Cada uma das próximas 2 × N linhas contém uma string não-vazia de no máximo 18 letras maiúsculas, indicando um dos nomes que foram escolhidos. Você pode assumir que nenhuma das strings dadas é um prefixo de outra string na entrada.",
        "titulo": "Dividindo os Nomes",
        "descricao": "A Rainha da Nlogônia decidiu mudar a capital do reino para uma nova cidade chamada Sortonia. O projeto da cidade é uma grade de N × N consistindo de N avenidas na direção Norte-Sul e N ruas direção Leste-Oeste. Assim, cada avenida cruza todas as ruas, e não há duas ruas ou duas avenidas que cruzam entre si. Como a cidade está quase terminada, agora é hora de atribuir nomes as suas ruas e avenidas. O povo de Nlogônia já votou nos 2×N nomes que eles querem usar, mas não foi decidido ainda qual desses será usado para as ruas e que para as avenidas. A questão não é tão simples, porque em cada cruzamento deve ter uma placa de identificação da rua e da avenida que se cruzam ali, e a rainha ordenou expressamente que as letras destas placas deve ser escritas em ouro cravejado com rubis. Como você é o Contador Oficial de Dinheiro (Accountant who Counts the Money - ACM), é sua tarefa encontrar uma forma de minimizar o número total de letras escritas nas placas dos cruzamentos, por razões óbvias. Felizmente, você pensou em uma maneira muito inteligente atingir esse objetivo, que é a utilização de abreviaturas nas placas para os nomes das ruas e avenidas. A abreviação do nome de uma avenida (e da mesma forma para uma rua) é o prefixo mais curto de seu nome, que não é um prefixo do nome de qualquer outra avenida (e da mesma forma para outra rua). Naturalmente, a abreviatura a ser utilizada para cada nome depende de como o conjunto de 2×N nomes é dividido em dois conjuntos disjuntos composto de N nomes a ser utilizado para as ruas e avenidas. Por exemplo, considere o caso de N = 2, onde os quatro nomes escolhidos são \"GAUSS\", \"GALOIS\", \"ERDOS\" e \"EULER\". Se são atribuídos os nomes \"GAUSS\" e \"GALOIS\" para as ruas, ao passo que são atribuídos os nomes \"ERDOS\" e \"EULER\" as avenidas, então as abreviaturas seriam \"GAU\" para \"GAUSS\", \"GAL\" para \"Galois\", \"ER\" para \"ERDOS\" e \"EU\" para \"EULER\". Com essa divisão, o número total de letras a serem escritas nas placas seria 20, já que as quatro interseções seriam rotuladas como \"GAU|ER\", \"GAU|UE\", \"GAL|ER\" e \"GAL|UE\". No entanto, no exemplo acima, seria mais conveniente atribuir para as ruas os nomes \"GAUSS\" e \"ERDOS\", deixando \"GALOIS\" e \"EULER\" para as avenidas. Assim, as abreviaturas seriam \"G\" para \"GAUSS\", \"E\" para \"ERDOS\", \"G\" para \"GALOIS\" e \"E\" para \"EULER\", e o número total de letras a serem escritas nas placas seria apenas 8 (pois as intersecções seriam rotuladas como “G|G”, “G|E”, “E|G” e “E|E”). Felizmente, o conjunto de nomes que foi escolhido é tal que nenhum nome nele é um prefixo de algum outro nome no conjunto, garantindo assim que o sistema que você propõe será sempre viável. Você pode calcular o número mínimo de letras a ser escritas nos sinais se você dividir os nomes na forma ideal?"
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1119",
        "saida": "Para cada conjunto de três números de entrada, imprima uma linha de números especificando a ordem na qual as pessoas são escolhidas. Cada número pode ter até 3 dígitos. Liste o par escolhido partindo da pessoa escolhida pelo contador do sentido horário. Os pares sucessivos são separados por vírgula (mas não deverá haver vírgula após o último escolhido.",
        "entrada": "Escreva um programa que leia sucessivamente três números (N, k e m; k, m > 0, 0 < N < 20) e determina a ordem no qual os candidatos são retirados para treinamento . Cada conjunto de três números estará em uma linha distinta e o final da entrada de dados é sinalizado por três zeros (0 0 0).",
        "titulo": "A Fila de Desempregados",
        "descricao": "Em uma séria tentativa de reduzir a fila de desempregados, o novo Partido Nacional Trabalhista dos Rinocerontes Verdes decidiu uma estratégia pública. Todos os dias, todos os candidatos desempregados serão colocados em um grande círculo, voltados para dentro. Alguém é escolhido arbitrariamente como número 1, e os outros são numerados no sentido horário até N (os quais estarão à esquerda do 1°). Partindo do 1° e movendo-se no sentido horário, um contador oficial do laboratório conta k posições e retira um candidato, enquanto outro oficial começa a partir de N e se move no sentido anti-horário, contando m posições e retirando outro candidato. Os dois que são escolhidos são então enviados como estagiários para a reciclagem e se ambos os funcionários escolherem a mesma pessoa, ela (ele) é enviado para se tornar um político. Cada funcionário, em seguida, começa a contar novamente com a pessoa próxima disponível e o processo continua até que não reste ninguém. Note-se que as duas vítimas (desculpe, estagiários) deixam o anel ao mesmo tempo, por isso é possível que um funcionário conte a pessoa já selecionado pelo outro funcionário."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2077",
        "saida": "Para cada instância imprima uma linha contendo o número mínimo de passageiros que devem ser transportados.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros N e M (1 ≤ N,M ≤ 100). Cada uma das M linhas seguintes possui o horário de partida de um dos ônibus. O horário está no formato hh:mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59 e hh e mm possuem dois dígitos). Cada uma das N linhas seguintes contém a lista de horários em que cada passageiro pode viajar. A lista dos horários está no seguinte formato: um inteiro K (1 ≤ K ≤ M) seguido de K horários, também no formato hh:mm, separados por um espaço em branco.",
        "titulo": "Los buses de Cartagena",
        "descricao": "Gabriel Garcia Marques é um escritor colombiano autor de histórias fantásticas como \"Cién años de soledade\", \"El amor en los tiempos del cólera\" e \"Memoria de mis putas tristes\". Suas histórias se caracterizam pelo uso do que ficou conhecido como \"realismo mágico\", em que situações reais são explicadas com elementos mágicos. Apesar de seus trabalhos serem considerados muito ricos e até cenográficos, filmes baseados em suas obras não têm merecido sucesso de público ou de crítica. O mais recente exemplo foi a filmagem em 2007 de \"Love in the Time of Cholera\". Uma de suas obras menos conhecidas é \"Los buses de Cartagena\", que descreve a história de uma pequena companhia de ônibus da cidade colombiana que, principalmente devido aos problemas de quebra dos ônibus por excesso de carga, pretendia reduzir o número de passageiros transportados em cada viagem de Cartagena a Medellin para um mesmo número fixo. Ao mesmo tempo, a companhia queria continuar atendendo a todos os pedidos de forma satisfatória. Cada ônibus possui um horário de partida, e cada passageiro dispõe de uma lista de horários nos quais gostaria de viajar. Os passageiros desejam apenas ir para Medellin, ou seja, nenhum passageiro pretende viajar duas vezes no mesmo dia. Sua tarefa é determinar o número mínimo de passageiros que devem ser transportados em cada viagem respeitando a restrição de que todos os passageiros devem ser atendidos."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1167",
        "saida": "Para cada caso de teste, deve-se apresentar a mensagem Vencedor(a): xxxxxx, com um espaço após o sinal \":\" indicando qual é a criança do grupo que venceu a brincadeira.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 100), indicando a quantidade de crianças que farão parte de cada círculo e participarão da brincadeira. Em seguida, as N linhas de cada caso de teste conterão duas informações, o Nome e o Valor (1 ≤ Valor ≤ 500) que consta na ficha de cada criança, separados por um espaço, na ordem de entrada na formação do círculo inicial. Obs: O Nome de cada criança não deverá ultrapassar 30 caracteres e contém apenas letras maiúsculas e minúsculas, sem acentos, e o caractere “_”. O final da entrada é indicado pelo número zero.",
        "titulo": "Acampamento de Férias",
        "descricao": "Nas férias de Julho, várias escolas de uma mesma região resolveram se organizar e levaram uma parte de seus alunos para um acampamento de férias por uma semana. Nestes acampamentos os alunos são divididos em chalés coletivos por gênero e idade, sempre com um supervisor ou supervisora que, além de dormirem com o grupo no chalé, também são responsáveis por criar e executar várias atividades interessantes e animadas, para todas as idades. Dentre as diversas atividades podem-se citar jogos, excursões, Gincana Musical, Gincanas Noturnas, etc. No primeiro dia de acampamento, devido à forte chuva, as atividades recreativas ficaram limitadas e as crianças foram levadas para o ginásio de esportes. Foi realizada uma gincana e uma das atividades da mesma consistiu em agrupar as crianças em um círculo (organizado no sentido anti-horário) do qual seriam retiradas uma a uma até que sobrasse apenas uma criança, que seria a vencedora. No momento em que entra no círculo, cada criança recebe uma pequena ficha que contém um valor de 1 a 500. Depois que o círculo é formado, conta-se, iniciando na criança que está ao lado da primeira que entrou no círculo, o número correspondente à ficha que a primeira detém. A criança onde o número contado cair, deve ser retirada do grupo, e a contagem inicia novamente segundo a ficha da criança que acabou de ser eliminada. Para ficar mais interessante, quando o valor que consta na ficha é par, a contagem é feita no sentido horário e quando o valor que consta na ficha é ímpar, a contagem é feita no sentido anti-horário. A brincadeira fez muito sucesso e o administrador do acampamento pediu para que sua equipe desenvolva um programa para que no próximo evento ele saiba previamente qual criança irá ser a vencedora de cada grupo, com base nas informações fornecidas."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1303",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador \"Instancia h\" em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, deve ser impressa a permutação dos inteiros 1 a n da classiﬁcação do campeonato. Obs: Um espaço em branco deve ser impresso entre cada um desses inteiros e uma linha em branco deve deve ser impressa entre as saídas de dois casos de teste.",
        "entrada": "São dadas várias instâncias. Para cada instância é dada o número 0 ≤ n ≤ 100 de times no campeonato. O valor n = 0 indica o ﬁm dos dados. A seguir vêm n (n−1) / 2 linhas indicando os resultados das partidas. Em cada linha são dados quatro inteiros x, y, z e w. Os inteiros x e z pertencem ao conjunto {1, 2, . . . , n} e representam os números de inscrição dos times na liga. Os inteiros y e w são, respectivamente, os números de pontos do time x e do time z na partida descrita.",
        "titulo": "Spurs Rocks",
        "descricao": "O San Antonio é o time da cidade na NBA. Já foi algumas vezes campeão de sua conferência e revelou vários excelentes jogadores. Em um campeonato de basquete os times jogam todos entre si em turno único. A vitória vale dois pontos e a derrota vale um ponto (não há empates no basquete). Havendo empates na pontuação do campeonato ﬁca na frente o time com melhor “cesta average” que é dado pela razão entre o número de pontos marcados pelo time dividido pelo número de pontos recebidos (na improvável hipótese de um time vencer todos os jogos do campeonato sem levar cestas seu cesta average é dado pelo número de pontos marcados). Persistindo o empate, leva vantagem quem marcou mais pontos. Ainda havendo empate, o time com menor número de inscrições na liga ﬁca na frente. Sua tarefa neste problema é fazer um programa que recebe os resultados dos jogos de um campeonato e imprime a classiﬁcação ﬁnal."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1244",
        "saida": "A saída deve conter o conjunto de strings da entrada ordenado pelo tamanho das strings. Um espaço em branco deve ser impresso entre duas palavras.",
        "entrada": "A primeira linha da entrada possui um único inteiro N, que indica o número de casos de teste. Cada caso de teste poderá conter de 1 a 50 strings inclusive, e cada uma das strings poderá conter entre 1 e 50 caracteres inclusive. Os caracteres poderão ser espaços, letras, ou números.",
        "titulo": "Ordenação por Tamanho",
        "descricao": "Crie um programa para ordenar um conjunto de strings pelo seu tamanho. Seu programa deve receber um conjunto de strings e retornar este mesmo conjunto ordenado pelo tamanho das palavras, se o tamanho das strings for igual, deve-se manter a ordem original do conjunto."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2067",
        "saida": "Para cada consulta, imprima uma linha contendo yes se é possível escolher um quadrado tal que sua pontuação não será igual a zero, ou no caso contrário.",
        "entrada": "A primeira linha contém dois inteiros N e M (1 ≤ N, M ≤ 200) indicando o número de linhas e de colunas do retângulo. As próximas N linhas contém M inteiros cada, descrevendo o retângulo. Cada inteiro no retângulo não é maior que 109. A próxima linha contém um inteiro Q (1 ≤ Q ≤ 200) indicando o número de consultas. Cada uma das próximas Q linhas descreve uma consulta. Cada linha contém um inteiro S (1 ≤ S ≤ min(N,M)) indicando o comprimento do lado do quadrado que você deve escolher.",
        "titulo": "Jogo do Quadrado",
        "descricao": "O \"jogo do quadrado\" é um jogo muito popular hoje em dia! O jogo é muito simples: é dada um retângulo de N linhas e M colunas contendo números inteiros não negativos. A imagem a seguir mostra um retângulo com 3 linhas e 4 colunas. Também é dado um inteiro S. Você deve escolher algum quadrado com S linhas e S colunas contido inteiramente dentro do retângulo. Sua pontuação é dada pelo produto de todos os inteiros dentro do quadrado que você escolheu. Por exemplo, se S=2 e você escolheu o quadrado mostrado em azul na imagem acima, sua pontuação será igual a 2×3×2×1 = 12. Você percebeu que, dependendo do quadrado que você escolher, sua pontuação pode ser igual a zero. São dados um retângulo e uma lista de consultas. Para cada consulta, é dado um inteiro S e você deve determinar se é possível escolher algum quadrado SxS de tal forma que sua pontuação não será igual a zero."
    },
    {
        "nivel": "8",
        "assunto": "4",
        "numero": "1477",
        "saida": "Para cada operação de contagem, imprima uma linha contendo três inteiros indicando respectivamente o número de símbolos Homem, Elefante e Rato que são usados pelos jogadores no intervalo dado. Imprima também uma linha em branco após cada caso de teste, inclusive após o último caso de teste da entrada.",
        "entrada": "A entrada é composta por diversos casos de teste. Cada caso de teste começa com uma linha contendo dois inteiros N (1 ≤ N ≤ 105) ​​e M (0 ≤ M ≤ 106) > ​que representam, respectivamente, o número de jogadores no campeonato e o número de operações. As próximas M linhas contêm cada uma a descrição de uma operação. Operações de mudança de estratégia serão representadas por uma linha da forma \"M A B\" onde A (1 ≤ A) e B (A ≤ B ≤ N) são inteiros. Os jogadores cuja estratégias serão alteradas são aqueles cuja posição na fila está entre A e B, inclusive. Operações de contagem serão representadas por uma linha da forma \"C A B\" onde A e B são inteiros representando o intervalo de jogadores que deverão ser considerados na contagem. Levaremos em conta os jogadores cuja posição na fila está entre A e B, inclusive.",
        "titulo": "Homem, Elefante e Rato",
        "descricao": "Um jogo muito popular na Nlogônia é o Homem, Elefante e Rato. Ele é tipicamente jogado com apenas dois jogadores, e funciona da seguinte forma: cada jogador secretamente escolhe um dos três símbolos e, após uma contagem regressiva, ambos revelam simultaneamente o símbolo escolhido através de sinais manuais, estendendo à sua frente uma das mãos sinalizando sua escolha. O Homem é representado pela mão fechada, como a cabeça de um homem. O Elefante é representado pela mão aberta, exibindo os cinco dedos, como a pata do elefante nlogonense. Por fim, o Rato é representado pela mão fechada, com o dedo indicador e o dedo médio esticados, como as orelhas do pequeno animal. ​ Figura 1: Os três símbolos do jogo Homem, Elefante e Rato. Para determinar o vencedor é muito simples: o Homem sempre perde para o Elefante (pois é esmagado debaixo de sua pata), o Elefante sempre perde para o Rato (pois tem medo dele e foge correndo) e o Rato sempre perde para o Homem (que espalha ratoeiras para capturá-lo). Se dois jogadores utilizarem o mesmo símbolo, ocorre um empate e joga-se novamente. Os habitantes da Nlogônia, que são estrategistas natos de Homem, Elefante e Rato, utilizam a seguinte técnica no campeonato nacional, realizado todos os anos: começam sempre jogando Homem até o momento em que este símbolo causa empates com a maioria dos oponentes. Eles então trocam sua estratégia para o símbolo que ganha daquele que usavam anteriormente. Assim, os jogadores vão mudar de Homem para Elefante, depois para Rato, depois de volta a Homem. Para auxiliar um famoso competidor estrangeiro de um jogo com uma certa similaridade com este jogo de Homem, Elefante e Rato, você irá desenvolver um programa que contabiliza quantos jogadores irão utilizar cada símbolo. Suponha que todos os N jogadores são dispostos em fila e identificados pela sua posição, de 1 a N. Seu programa deverá processar M comandos, de dois tipos: mudança de símbolo e contar a frequência dos símbolos. Ambos os comandos recebem um intervalo contíguo de jogadores na fila a serem considerados."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1062",
        "saida": "O arquivo de saída contém a quantidade de linhas correspondente às linhas com permutações no arquivo de entrada. Cada linha de saída deve ser Yes se for possível organizar os vagões da forma solicitada e No, caso contrário. Há também uma linha em branco após cada bloco de entrada. No exemplo abaixo,  O primeiro caso de teste tem 3 permutações para 5 vagões. O ultimo zero dos testes de entrada não devem ser processados.",
        "entrada": "O arquivo de entrada consiste de um bloco de linhas, cada bloco, com exceção do último, descreve um trem e possivelmente mais do que uma requisição de reorganização. Na primeira linha de cada bloco há um inteiro N que é a quantidade de vagões. Em cada uma das próximas linhas de entrada haverá uma permutação dos valores 1,2, …, N. A última linha de cada bloco contém apenas 0. Um bloco iniciando com zero (0) indica o final da entrada.",
        "titulo": "Trilhos",
        "descricao": "Há uma famosa estação de trem na cidade PopPush. Esta cidade fica em um país incrivelmente acidentado e a estação foi criada no último século. Infelizmente os fundos eram extremamente limitados naquela época. Foi possível construir somente uma pista. Além disso, devido a problemas de espaço, foi feita uma pista apenas até a estação (veja figura abaixo).   A tradição local é que todos os comboios que chegam vindo da direção A continuam na direção B com os vagões  reorganizados, de alguma forma. Suponha que o trem que está chegando da direção A tem N <= 1000 vagões numerados sempre em ordem crescente 1,2, ..., N. O primeiro que chega é o 1 e o último que chega é o N. Existe um chefe de reorganizações de trens que quer saber se é possível reorganizar os vagões para que os mesmos saiam na direção B na ordem a1, a2, an.. O  chefe pode utilizar qualquer estratégia para obter a saída desejada. No caso do desenho ilustrado acima, por exemplo, basta o chefe deixar todos os vagões entrarem na estação (do 1 ao 5) e depois retirar um a um: retira o 5, retira o 4, retira o 3, retira o 2 e por último retira o 1.  Desta forma, se o chefe quer saber se a saída 5,4,3,2,1 é possível em B, a resposta seria Yes. Vagão que entra na estação só pode sair para a direção B e é possível incluir quantos forem necessários para retirar o primeiro vagão desejado."
    },
    {
        "nivel": "7",
        "assunto": "4",
        "numero": "1112",
        "saida": "Para cada mensagem do tipo \"P\", imprima o valor que responde a pergunta feita. Deixe uma linha em branco após cada caso de teste, inclusive após o último.",
        "entrada": "A entrada possui vários casos de teste. A primeira linha de um caso de teste contém 3 inteiros X (≤ 1000), Y (≤ 1000) e P (≤ 10), que representam, respectivamente, o tamanho (X e Y) do campo e o preço de cada deswevileutssen. A próxima linha contém um inteiro Q (≤ 10000). As próximas Q linhas representam mensagens de Conan para você, e estão em uma das duas seguintes formas: - A N X Y - “Achei N (≤ 10) schweisen em (X,Y) - (0 ≤ X < Largura), (0 ≤ Y < Altura)” - P X Y Z W - “Quanto vou gastar para matar todas as schweisen na área retangular de (X,Y) até (Z,W)?” Considere que no início nenhuma schweisen foi vista. A entrada termina quando X, Y e P são iguais a 0.",
        "titulo": "Schweisen",
        "descricao": "Conan é um importante membro do Clube Atlético de Desrugenstein, que possui um time de futebol de campo profissional: ele é o responsável pelo gramado do campo onde ocorrem os jogos em casa. Em 2048 anos de história, o campo do CAD sempre esteve em perfeitas condições para os jogos, graças a Conan. Ele já ganhou vários prêmios por isso, sendo o mais importante deles o \"Grama de Ouro\", prêmio que ganhou 1024 vezes. Amanhã acontecerá a final do campeonato Universal de futebol, e o CAD é um dos finalistas. Como o jogo será em casa, Conan foi ver o estado do gramado e reparar se necessário. Chegando lá, entrou em desespero ao ver várias schweisen no campo, estragando todo o gramado!! Sendo assim, Conan precisa de sua ajuda para determinar quanto irá gastar com deswevileutssen para matar todas as schweisen. Cada deswevileutssen mata uma schwisen. Conan pode lhe mandar mensagens de dois tipos: dizendo que encontrou algumas schweisen, ou perguntando quanto ele vai gastar para matar certas schweisen."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1851",
        "saida": "Imprima uma linha contendo unicamente o valor mínimo total da multa que Daenerys pagará a Sauron se seguir seus conselhos.",
        "entrada": "A i-ésima linha da entrada diz respeito ao i-ésimo dragão enviado por Sauron a Daenerys e consiste de dois inteiros: Ti e Fi (1 ≤ Ti, Fi ≤ 103), representando respectivamente o número de dias necessários para treinar o i-ésimo dragão e a multa cobrada por dia que o dragão passa dormindo. Para quaisquer i e j distintos, Ti / Fi ≠ Tj / Fj. A entrada possui no máximo 105 linhas e termina em fim de arquivo.",
        "titulo": "Como Treinar Seu Dragão",
        "descricao": "Após seu dragão Smaug fracassar na missão de tomar conta de Erebor, Sauron ficou muito aborrecido, e seu Olho começou a procurar por toda parte um treinador de dragões profissional, a fim de que seus demais dragões não falhassem em suas missões. Foi assim que Sauron conheceu Daenerys Targaryen. Impressionado com a reputação dela, Sauron a contratou imediatamente. Sauron envia dragões a Daenerys quase diariamente. Alguns dragões levam mais tempo para serem treinados, outros menos, e ela sempre treina um dragão de cada vez, nunca mais de um no mesmo dia, até que ele esteja pronto para ser retornado a Sauron. Nos dias em que se dedica ao treinamento de um dragão, Daenerys deixa os demais dragões enviados por Sauron hibernando num alojamento até que chegue a vez de cada um deles. Mas o caráter de Sauron, embora de notável perseverança, não é famoso por sua paciência. Para cada dia que um dragão seu passa dormindo no alojamento, Sauron, cujo Olho enxerga tranquilamente tudo o que se passa nos domínios de Daenerys, cobra dela uma multa, que pode variar de dragão para dragão, dependendo dos planos de Sauron para seus dragões. Sauron envia exatamente um dragão por dia, e o dragão sempre chega bem no início do dia, de modo que Daenerys já pode começar a treiná-lo imediatamente. Ainda, se há dragões dormindo no alojamento e nenhum sendo treinado, Sauron envia um Nazgûl para matar Daenerys. Daenerys Targaryen deseja minimizar a multa total a pagar a Sauron e está pedindo sua ajuda. Você já lhe disse que não pode prever o futuro e que o melhor que você pode fazer é: toda vez em que ela não estiver trabalhando com um dragão e quiser escolher um no alojamento para começar a treinar, você pode dizer a ela qual dragão escolher de modo que a escolha seria ótima se nenhum dragão mais viesse nos dias seguintes."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2122",
        "saida": "Para cada instância da entrada seu programa deverá imprimir, em uma única linha, a lista de candidatos eleitos ordenada pela classificação dos candidatos na eleição. No caso de dois candidatos possuírem a mesma classificação, o de menor índice vem antes. A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância começa com o número N (1 ≤ N ≤ 105) de eleitores, o número K de candidatos e V (1 ≤ V ≤ K ≤ 100) de vagas. A seguir vêm N linhas com os votos de cada um dos eleitores. Em seu voto, o eleitor i indicará o número Li (1 ≤ Li ≤ 100) de candidatos em quem votará, e os índices destes candidatos na sua ordem de preferência. Índices de candidatos fora do intervalo [1, K] significam votos em branco apenas para a opção de preferência correspondente. Se indicar mais que V votos, os últimos serão desconsiderados. Um eleitor nunca indica o mesmo candidato mais de uma vez. A entrada deve ser lida da entrada padrão.",
        "titulo": "Votação em Ecaterimburgo",
        "descricao": "Ecaterimburgo, Rússia, é uma cidade com um curioso sistema de votação. Em uma eleição em que haja V vagas para um cargo, cada eleitor tem direito a fazer V votos, ordenados em sua ordem de preferência. Assim, se, por exemplo, há 3 vagas de senador, cada eleitor vota em até 3 nomes. Serão eleitos os candidatos que tiverem o maior número de votos, sem importar em que posição da preferência do eleitor está o candidato. Apenas quando há empate no número de votos se torna relevante a ordem dada pelos eleitores. Ganha aquele candidato que tiver mais indicações em primeiro lugar. Se persistir o empate, em segundo lugar, e assim por diante. Caso dois ou mais candidatos que estejam em posição de serem eleitos tenham exatamente o mesmo número de indicações em todas as posições, todos são eleitos (podendo inclusive exceder o número de vagas). Candidatos com zero votos podem ser eleitos se ainda existir vagas disponíveis."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1527",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando o número de batalhas em que a guilda em que Rafael está participando ganhou uma batalha. Note que empates não são considerados vitórias.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros N e M (1 ≤ N ≤ 10⁵, 1 ≤ M ≤ 5 * 10⁵), representando o número de jogadores dentro do jogo, e o número de ações no decorrer do jogo, respectivamente. Em seguida haverá N inteiros Pi (1 ≤ Pi ≤ 100), onde o i-ésimo inteiro representa o número de pontos que o i-ésimo jogador tem, para todo 1 ≤ i ≤ N. Rafael é o jogador número 1, sempre. Em seguida, haverá M linhas, contendo três inteiros cada, Q, A e B (1 ≤ Q ≤ 2, 1 ≤ A, B ≤ N), representando o tipo da ação, e as duas guildas envolvidas na ação. Se Q for igual a 1, significa que a guilda que contém o jogador A e a guilda que contém o jogador B estão se unindo. Se Q for igual a 2, significa que a guilda que contém o jogador A e a guilda que contém o jogador B participarão de uma batalha. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.",
        "titulo": "Guildas",
        "descricao": "Rafael está jogando um novo e excitante jogo de RPG, e acaba de notar a existência de algo chamado Guilda. Para aqueles que não sabem, Guilda se trata de um grupo de jogadores que se unem com um objetivo em comum dentro do jogo, tirando assim vantagem do trabalho em equipe. O jogo que Rafael joga tem um sistema de GVG (Guilda versus Guilda) bem disputado, e logo percebeu que deveria tomar algumas providencias para se sair bem nessas batalhas. O sistema de GVG funciona da seguinte maneira: a batalha acontece entre duas guildas, e vence a guilda que tiver o maior número de pontos. O número de pontos de uma guilda é dado pela soma do número de pontos de todos os jogadores presentes na guilda. Cada jogador tem um número de pontos, que corresponde ao seu nível atual. Considere que inicialmente, todos os jogadores fazem parte de uma guilda, contendo apenas o próprio jogador. A união entre duas guildas faz com que todos os jogadores de ambas as guildas passem a participar apenas de uma guilda, e a outra deixa de existir. Dada uma lista de ações no decorrer do jogo, entre elas união entre duas guildas e batalhas entre duas guildas, diga o número de vezes em que a guilda em que Rafael estava saiu vitoriosa de uma batalha."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2091",
        "saida": "Para cada caso de teste imprima apenas o número que ficou sozinho. É garantido que apenas um número está sozinho.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha contendo um inteiro N (1 ≤ N < 10^5), seguida por N números (0 ≤ A ≤ 10^12). A entrada termina quando N = 0 e não deve ser processada.",
        "titulo": "Número Solitário",
        "descricao": "Será dado a você um vetor com N números, onde todos estarão em pares. Porém um desses números acabou ficando sem par, você consegue identificar qual é esse número ? Por exemplo, A = {1, 1, 3, 3, 5, 5, 5}, o número que ficou sozinho foi o 5."
    },
    {
        "nivel": "2",
        "assunto": "4",
        "numero": "1110",
        "saida": "Para cada caso de teste, imprima duas linhas. A primeira linha apresenta a sequência de cartas descartadas, cada uma delas separadas por uma vírgula e um espaço. A segunda linha apresenta o número da carta que restou. Nenhuma linha tem espaços extras no início ou no final. Veja exemplo para conferir o formato esperado.",
        "entrada": "A entrada consiste em um número indeterminado de linhas contendo cada uma um valor de 1 até 50. A última linha contém o valor 0.",
        "titulo": "Jogando Cartas Fora",
        "descricao": "Dada uma pilha de n cartas enumeradas de 1 até n com a carta 1 no topo e a carta n na base.  A seguinte operação é ralizada enquanto tiver 2 ou mais cartas na pilha. Jogue fora a carta do topo e mova a próxima carta (a que ficou no topo) para a base da pilha. Sua tarefa é encontrar a sequência de cartas descartadas e a última carta remanescente. Cada linha de entrada (com exceção da última) contém um número n ≤ 50. A última linha contém 0 e não deve ser processada. Cada número de entrada produz duas linhas de saída. A primeira linha apresenta a sequência de cartas descartadas e a segunda linha apresenta a carta remanescente."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1861",
        "saida": "A primeira linha da saída deve consistir da frase “HALL OF MURDERERS”, sem as aspas. Cada uma das linhas seguintes deve conter um nome de um assassino seguido do número de pessoas que ele matou. A lista de assassinos deve obedecer a ordem lexicográfica. Se um assassino também acabou sendo assassinado, ele não deve figurar na lista.",
        "entrada": "Cada linha da entrada descreve um assassinato informando o nome do assassino seguido pelo nome do assassinado. Cada nome é composto por no mínimo um e no máximo 10 caracteres, sendo o primeiro sempre uma letra maiúscula e os demais sempre letras minúsculas. A entrada consiste de no mínimo uma e no máximo 105 linhas e é encerrada em fim de arquivo.",
        "titulo": "O Hall dos Assassinos",
        "descricao": "Quem matou Meryn Trant? Quem matou Syrio Forel, se é que ele de fato morreu? Quem matou Stannis Baratheon? Quem matou Myrcella Baratheon? Quem matou Aerys II Targaryen? Quem vai matar (alerta de spoiler!) Jaime Lannister? Para algumas destas perguntas já sabíamos a resposta. Para outras, tínhamos apenas especulações. No entanto, recebemos de um correspondente anônimo uma lista descrevendo vários assassinatos, que já aconteceram ou que estão para acontecer, revelando tanto o nome dos assassinos quanto dos assassinados. Mas os assassinatos não estão em ordem lexicográfica, nem mesmo em ordem cronológica, e fica difícil contar quantas pessoas cada assassino matou. Você pode nos ajudar?"
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1215",
        "saida": "Você deve imprimir uma lista de diferentes palavras que aparecem no texto, uma palavra por linha. Todas as palavras devem ser impressas com letras minúsculas, em ordem alfabética. Deverá haver no máximo 5000 palavras distintas.",
        "entrada": "A entrada contém no máximo 10000 linhas de texto, cada uma delas com no máximo 200 caracteres. O fim de entrada é determinado pelo EOF.",
        "titulo": "Primeiro Dicionário de Andy",
        "descricao": "Andy de apenas 8 anos tem um sonho - ele deseja criar o seu próprio dicionário. Isto não é uma tarefa fácil para ele, pois conhece poucas palavras. Bem, ao invés de pensar nas palavras que sabe, ele teve uma idéia brilhante. A partir do seu livro de histórias favorito, ele vai criar um dicionário com todas as palavras distintas que existem nele. Ordenando estas palavras em ordem alfabética, o trabalho estará feito. É claro, isso é uma tarefa que toma um certo tempo e portanto, a ajuda de um programador de computador como você é muito bemvinda. Você foi convidado a escrever um programa que liste todas as diferentes palavras que existem em um texto. Neste caso, uma palavra é definida como uma sequência de letras, maiúsculas ou minúsculas. Palavras com apenas uma letra também deverão ser consideradas. Portanto, seu programa deverá ser \"CaSe InSeNsItIvE\". Por exemplo, palavras como \"Apple\", \"apple\" ou \"APPLE\" deverão ser consideradas como a mesma palavra."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1251",
        "saida": "Imprima o valor ASCII de todos os caracteres presentes e a sua frequência de acordo com o formato abaixo. Uma linha em branco deverá separar 2 conjuntos de saída. Imprima os caracteres ASCII em ordem ascendente de frequência. Se dois caracteres estiverem presentes com a mesma quantidade de frequência, imprima primeiro o caracter que tem valor ASCII maior. A entrada é terminada por final de arquivo (EOF).",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por uma única linha de texto com até 1000 caracteres.",
        "titulo": "Diga-me a Frequência",
        "descricao": "Dada uma linha de texto, você deve encontrar as frequências de cada um dos caracteres presentes nela. As linhas fornecidas não conterão nenhum dos primeiros 32 ou dos últimos 128 caracteres da tabela ASCII. É claro que não estamos levando em conta o caracter de fim de linha."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1401",
        "saida": "Para cada string da entrada, imprima todas as permutações possíveis da string, em ordem lexicográfica crescente. Note que as strings devem ser tratas como Case Sensitive (isto é, letras maiúsculas são diferentes das minúsculas). Além disso, nenhuma permutação deve ser impressa mais de uma vez. Uma linha em branco deve ser impressa após cada lista de permutações.",
        "entrada": "A primeira linha da entrada contém um inteiro n, indicando o número de strings que seguem. As próximas n linhas contém uma string cada. Cada string conterá apenas caracteres alfanuméricos, e nunca conterá espaços. O tamanho máximo de uma string é 10.",
        "titulo": "Gerando Permutações Ordenadas Rapidamente",
        "descricao": "Gerar permutações sempre foi um problema importante na ciência da computação. Neste problema, você terá de gerar todas as permutações de uma dada string, em ordem lexicográfica crescente. Lembre-se que seu algoritmo deve ser eficiente."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1863",
        "saida": "Imprima uma linha contendo o número máximo de soldados que podem ser mortos.",
        "entrada": "A primeira linha contém dois inteiros N e M (0 ≤ M < N ≤ 5×104). As próximas N linhas fornecem as posições dos soldados. A i-ésima linha contém dois inteiros x[i] e y[i] (-400 ≤ x[i], y[i] ≤ 400). Não há dois soldados na mesma posição. As próximas M linhas contém dois inteiros i e j cada (1 ≤ i, j ≤ N, i ≠ j), descrevendo a lista fornecida pelo espião.",
        "titulo": "O Contra-ataque de Ramsay",
        "descricao": "Ramsay: \"Não preciso de um exército. Preciso de 20 homens bons.\" Os Boltons conquistaram o castelo de Winterfell e agora precisam protegê-lo da invasão do \"Rei\" Stannis. Os N soldados de Stannis estão posicionados entre Castle Black, que fica a nordeste de Winterfell, e Winterfell. Para cada soldado i (1 ≤ i ≤ N), os Boltons sabem sua posição (x[i], y[i]) no mapa. Ramsay Bolton decidiu contra-atacar antes que a invasão ocorra, enviando seus homens para matar alguns dos soldados de Stannis. Ramsay quer que eles morram um de cada vez, em uma ordem tal que seus homens precisem viajar apenas para o norte e para o leste, e tal que todo soldado deve ser mais forte que os que morreram antes dele (isto é loucura, mas Ramsay é mesmo louco). Em outras palavras, Ramsay quer encontrar uma sequência de soldados (s1, s2, ..., sK) tal que, para todo 1 < i ≤ K: x[si] > x[si-1]; y[si] > y[si-1]; e si é mais forte que si-1 Um espião forneceu a Ramsay uma lista de M pares ordenados de soldados na forma (i, j), indicando que o soldado i é mais forte que o soldado j. Note que esta relação é transitiva, isto é, se i é mais forte que j e j é mais forte que k, então i é mais forte que k, mesmo que o par (i, k) não apareça na lista. Além disso, para qualquer par de soldados i e j, se não é possível concluir que um soldado é mais forte que o outro através da lista, então i não é considerado mais forte que j, e nem j é considerado mais forte que i. Por fim, a lista é dada de tal forma que, para todo soldado i, existe no máximo um soldado j tal que (i, j) está na lista. Sua tarefa é determinar o número máximo de soldados que podem ser mortos pelos homens de Ramsay."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1766",
        "saida": "Para cada caso de teste você deverá exibir a mensagem \"CENARIO {i}\", onde i indica o caso de teste atual, seguido da posição e o nome de cada umas das M renas que irão puxar o trenó, ordenadas conforme descrito acima.",
        "entrada": "Este problema possui diversos casos de teste. A primeira linha de entrada contém um inteiro T (1 ≤ T ≤ 105) que indica o número de casos de teste a seguir. A primeira linha de cada caso de teste contém dois inteiros N e M (5 ≤ N, M ≤ 103) que indicam respectivamente o número total de renas e o número de renas que irão puxar o trenó. Na sequência serão informados uma string S seguida por 2 inteiros P (1 ≤ P ≤ 300) e I (1 ≤ I ≤ 300) e por um número de ponto flutuante A (0.00 ≤ A ≤ 3.00), indicando respectivamente o nome, o peso, a idade e a altura de cada uma das renas. O nome de cada uma das renas é composto somente por uma palavra com até 100 caracteres.",
        "titulo": "O Elfo das Trevas",
        "descricao": "O estábulo onde ficam as renas foi intencionalmente aberto pelo Elfo das Trevas permitindo que cada uma delas corresse e voasse livremente pela fábrica do Papai Noel, causando o maior transtorno. Os elfos estão tentando desesperadamente fazer o possível para deixar o trenó pronto para embarque. Você ficou responsável por colocar cada rena na sua posição correta assim que ela é capturada por um dos outros elfos. Você sabe que o estábulo segue uma organização baseada na ordem que as renas irão ocupar no trenó. Desta forma, na hora da partida todas podem ser facilmente posicionadas. Diferentemente do que muitos pensam, as renas são posicionadas em uma fila única à frente no trenó. Nem todas as renas do estábulo são utilizadas em cada viagem, isto depende da carga total do trenó. Você conseguiu a lista com as características que são utilizadas para determinar a ordem de rena. Elas devem ser ordenadas primeiramente de forma decrescente por peso. Caso duas ou mais apresentarem o mesmo peso elas devem ser ordenadas de forma ascendente pela idade, após pela altura e caso ainda persista empate, pelo nome. Utilizando seu computador mágico de última geração você quer escrever um programa que ordene as renas, de acordo com as características informadas, e exiba somente o número exato de renas que serão utilizadas no trenó (de forma ordenada)."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2075",
        "saida": "Para cada instância imprima uma linha contendo a K-ésima escultura mal-formada de comprimento N . Caso não exista uma tal escultura imprima uma linha contendo −1.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém dois inteiros N e K, onde 1 ≤ N ≤ 50 e 1 ≤ K ≤ 2n − 1, indicando respectivamente o comprimento da escultura e o índice da escultura (na ordem lexicográfica) que você deve determinar.",
        "titulo": "Zé Coquinho",
        "descricao": "Zé Coquinho é um artesão que produz esculturas feitas com cocos. Os cocos secos são cortados ao meio e as cuias formadas pelas cascas são pintadas e utilizadas para construir as esculturas. As esculturas são muito famosas, sendo procuradas por colecionadores de todo o mundo. Figura 1: A mais famosa escultura de coco feita por Zé Coquinho. As esculturas de Zé Coquinho são sequências de cuias coladas umas nas outras. Uma escultura bem-formada é definida pelo seguinte conjunto de regras: Uma sequência vazia de cuias é uma escultura bem-formada. Se T é um escultura bem-formada, então uma escultura formada por (T) (ou seja, uma cuia aberta para a direita, seguida de T , seguida de uma cuia aberta para a esquerda) é uma escultura bem-formada; Se T e S são esculturas bem-formadas, então ST (ou seja, a escultura S seguida de T) é uma escultura bem-formada. Note que todas as esculturas bem-formadas são construídas usando apenas as regras descritas acima. Seja T uma escultura formada por cuias de coco. Se T não é uma escultura bem-formada, dizemos que T é uma escultura mal-formada. Uma característica marcante das esculturas de Zé Coquinho é que elas nunca são bem-formadas; todas as esculturas que ele fez na sua longa vida são mal-formadas. O Museu de Arte Moderna de Graviúna quer fazer uma exposição de esculturas de Zé Coquinho. Para organizar a exposição, o museu resolveu ordenar as esculturas em ordem lexicográfica. Na ordem lexicográfica definida pelo museu o símbolo ( vem antes do símbolo ). Por exemplo, ((( < (() e )( < )). O comprimento de uma escultura mal-formada é o número de cuias que a mesma possui. Dados dois inteiros N e K, você deve determinar a K-ésima escultura mal-formada de comprimento N considerando a ordem definida pelo museu. Considere que Zé Coquinho fez todas as esculturas mal-formadas de comprimento N."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1252",
        "saida": "A primeira linha de cada conjunto de saída irá contér os valores de N e M. As próximas N linhas irão contér N números, ordenados de acordo com as regras acima mencionadas. Imprima os dois últimos zeros da entrada para a saída padrão.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com dois inteiros  N (0 < N ≤ 10000) e M (0 < M ≤ 10000) que denotam quantos números existirão neste conjunto. Cada uma das próximas N linhas conterá um número cada. Estes números deverão caber em um inteiro de 32 bits com sinal. A entrada é terminada por uma linha que conterá dois valores nulos (0) e não deve ser processada.",
        "titulo": "Sort! Sort!! e Sort!!!",
        "descricao": "Hmm! Aqui você foi solicitado a fazer uma simples ordenação. A você serão dado N números e um inteiro positivo M. Você terá que ordenar estes N números em ordem ascendente de seu módulo M. Se houver um empate entre um número ímpar e um número par (para os quais o seu módulo M dá o mesmo valor) então o número impar irá preceder o número par. Se houver um empate entre dois números ímpares (para os quais o seu módulo M dá o mesmo valor), então o maior número ímpar irá preceder o menor número ímpar. Se houve um empate entre dois números pares (para os quais o seu módulo M dá o mesmo valor), então o menor número par irá preceder o maior número par. Para o resto de valores negativos siga a regra de linguagem de programação C: um número negativo nunca pode ter módulo maior do que zero. Por exemplo, -100 MOD 3 = -1, -100 MOD 4 = 0, etc."
    },
    {
        "nivel": "4",
        "assunto": "4",
        "numero": "1063",
        "saida": "O arquivo de saída contém a quantidade de linhas correspondente ao número de casos de teste de entrada. Cada linha de saída contém uma sequência de I e R conforme o exemplo. Se não for possível mostrar a saída, as operações devem ser interrompidas e a mensagem \"Impossible\" deve ser impressa, com um espaço após a sequência.",
        "entrada": "A entrada consiste em vários casos de teste, onde cada caso de teste é composto por 3 linhas. A primeira das 3 linhas contém um número inteiro N que representa o número total de vagões. A segunda linha contém a sequência dos vagões que vêm do lado A e a Terceira linha contém a sequência que o chefe de organização deseja como saída para o lado B. A última linha de entrada contém apenas 0, indicando o fim da entrada.",
        "titulo": "Trilhos Novamente... Traçando Movimentos",
        "descricao": "Você lembra daquela estação de trem da cidade PopPush? Apenas para relembrar, existe uma estação de trem em um país incrivelmente acidentado. Além disso, a estação foi construída no século passado e infelizmente os fundos eram muito limitados. Em um determinado trecho foi possível construir apenas uma pista e, a solução encontrada para transportar as cargas nos dois sentidos foi construir uma estação que permitisse desconectar os vagões de uma locomotiva e conectar em outra, que iria em outro sentido. Cada trem que chega na direção A é manobrado e seus vagões continuam na direção B, reorganizados conforme o chefe da estação deseja. Ao chegar pelo lado A, cada vagão é desconectado e vai até a estação e depois segue para a direção B, para ser conectado na segunda locomotiva. Você pode desconectar quantos trens deseja na estação, mas o vagão que entra na estação só pode sair pelo lado B e uma vez que ele sai, não pode mais entrar novamente. Todos vagões são identificados pelas letras minúsculas (a até z). Isto significa 26 vagões no máximo. O chefe da organização dos vagões precisa agora que você ajude a resolver para ele, através de um programa, qual a sequência de movimentos é necessária para obter a saída desejada após a entrada na estação, seguindo para a direção B. O movimento de entrada e saída da estação é descrito respectivamente pelas letras I e R (Insere e Remove). Utilizando a figura dada como exemplo, a entrada e,t,d,a para uma saída desejada d,a,t,e, resulta nos movimentos I,I,I,R,I,R,R,R"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1911",
        "saida": "Para cada caso, exiba uma única linha, a quantidade de assinaturas falsas encontradas.",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com um inteiros N (1 ≤ N ≤ 50) representando a quantidade de alunos de sua turma. As próximas N linhas serão da seguinte forma:                                                         Nome do aluno   Assinatura Original A seguir haverá um inteiro M (0 ≤ M ≤ N), representando a quantidade de alunos que compareceram a uma aula. M linhas seguem, no seguinte formato:                                                         Nome do aluno   Assinatura na aula Todos os alunos possuem apenas o primeiro nome na lista, nenhum nome se repete e todos os nomes contêm no máximo 20 letras (a-z A-Z). A entrada termina com N = 0, a qual não deve ser processada.",
        "titulo": "Ajude Girafales",
        "descricao": "Minutos antes do término das aulas, professor Girafales passa uma lista de presença. Certo dia, ele resolveu conferir as assinaturas e notou que alguns alunos assinavam diferente em algumas aulas e desconfiou que alguém poderia estar assinando por eles. Como o professor possui muitos alunos e pouco tempo (o café com dona Florinda é prioridade), ele pediu sua ajuda para validar as assinaturas. Uma assinatura é considerada falsa se houver mais de uma diferença entre a original e a que estiver sendo checada. Considere diferença uma troca de maiúscula para minúscula ou o contrário."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1258",
        "saida": "Para cada caso de entrada deverão ser impressas as informações ordenadas pela cor dos detalhes em ordem ascendente, seguido pelos tamanhos em ordem descendente e por último por ordem ascendente de nome, conforme o exemplo abaixo. Obs.: Deverá ser impressa uma linha em branco entre dois casos de teste.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com um valor N, (1 ≤ N ≤ 60) inteiro e positivo, que indica a quantidade de camisetas a serem feitas para aquela turma. As próximas N*2 linhas contém informações de cada uma das camisetas (serão duas linhas de informação para cada camiseta). A primeira linha irá conter o nome do estudante e a segunda linha irá conter a cor do logo da camiseta (\"branco\" ou \"vermelho\") seguido por um espaço e pelo tamanho da camiseta \"P\" \"M\" ou \"G\". A entrada termina quando o valor de N for igual a zero (0) e esta valor não deverá ser processado.",
        "titulo": "Camisetas",
        "descricao": "O professor Rolien organizou junto às suas turmas de Ciência da Computação a confecção de uma camiseta polo que fosse ao mesmo tempo bonita e barata. Após algumas conversas, ficou decidido com os alunos que seriam feitas somente camisetas da cor preta, o que facilitaria a confecção. Os alunos poderiam escolher entre o logo do curso e os detalhes em branco ou vermelho. Assim sendo, Rolien precisa de sua ajuda para organizar as listas de quem quer a camiseta em cada uma das turmas, relacionando estas camisetas pela cor do logo do curso, tamanho (P, M ou G) e por último pelo nome."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1451",
        "saida": "Para cada caso, imprimir o texto Beiju na tela.",
        "entrada": "Há diversos casos de teste. Cada teste é uma única linha que contém pelo menos uma e, no máximo, 100.000 letras, underscores e dois caracteres especiais '[' e ']'. '[' Significa que a tecla \"Home\" é pressionada internamente, e ']' significa que a tecla \"End\" é pressionada internamente. A entrada é terminada por fim de arquivo (EOF). O tamanho do arquivo de entrada não excede 5MB.",
        "titulo": "Teclado Quebrado",
        "descricao": "Você está digitando um texto longo com um teclado quebrado. Bem, não tão quebrado. O único problema com o teclado é que às vezes a tecla \"home\" ou a tecla \"end\" é automaticamente pressionada (internamente). Você não está ciente deste problema, já que você está focado no texto e nem sequer ligou o monitor! Depois que você terminar de digitar, você pode ver um texto na tela (se você ligar o monitor). Em chinês, podemos chamar este texto de Beiju. Sua tarefa é encontrar o texto Beiju."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2110",
        "saida": "Para cada caso de teste imprima uma linha contendo o tempo, em minutos, de luz solar que o jardim receberá no dia escolhido, arredondado para 2 casas decimais.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de 2 linhas. A primeira linha contém 3 inteiros N (2 ≤ N ≤ 100), L, D (1 ≤ L, D ≤ 100), o número de prédios, a largura de cada um deles, e o espaçamentos entre eles, respectivamente. A segunda linha contém N inteiros hi (0 ≤ hi ≤ 50), as alturas dos prédios. Uma altura de 0 indica que o jardim será construído nessa posição e aparecerá exatamente uma vez. Todas as medidas são em metros.",
        "titulo": "Banho de Sol no Jardim",
        "descricao": "Uma empresa quer demolir um prédio para construir um jardim em uma das principais avenidas de Ecaterimburgo, mas antes quer fazer um estudo: descobrir o tempo de luz de sol que esse jardim receberia por dia, considerando que ela irá demolir o prédio escolhido e construir o jardim no lugar. Isso é importante, pois banho de sol é uma atividade muito popular entre os habitantes da cidade durante o verão. O jardim recebe luz do sol se pelo menos um pedaço dele estiver recebendo raios solares. Para facilitar as coisas, a construtora escolheu um dia do ano para fazer as medições. Nesse dia o sol nasce às 5:30 e se põe às 21:30 (no verão russo os dias são longos). Considere que o sol tem velocidade angular constante no céu e que ele nasce no leste e se põe no oeste. Todos os prédios são alinhados na direção leste-oeste, têm a mesma largura e o espaçamento entre eles é constante, o jardim terá largura igual à dos prédios."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2074",
        "saida": "Para cada instância imprima uma linha contendo o número de planejamentos diferentes.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém dois inteiros N e K, onde 1 ≤ N ≤ 100 e 1 ≤ K ≤ 6.",
        "titulo": "Variados Pratos da Linda Nefertiti",
        "descricao": "Nefertiti foi rainha do Egito, esposa de Akhenaton, e é tida como uma das mais belas mulheres da história do mundo. A vida familiar da rainha do Egito obrigava-a a cuidar de diversas coisas, inclusive do cardápio da corte. Akhenaton era conhecido por detestar que a comida se repetisse com frequência, e mesmo em intervalos regulares. Ele desejava que os cardápios não apenas fossem diferentes, como fosse praticamente impossível descobrir quando um prato se repetiria. Isso criou um enorme problema para os cozinheiros do rei, Nefertiti teve, então, uma ideia. Elaborou uma lista de N pratos, que seriam repetidos. Uma exigência dela era que a diferença entre o prato preparado no i-ésimo dia e i fosse, em módulo, menor que um certo K dado. Tal exigência, além de ser por motivos religiosos, em virtude de obrigações dos egípcios a Ra, se devia também ao fato de que os ingredientes do prato eram conseguidos neste intervalo, e também estavam sujeitos a perder a validade para o consumo. Sua tarefa neste programa é determinar, dado um inteiro N (número de diferentes pratos) e um inteiro K, quantos diferentes planejamentos podemos fazer (que são, na verdade, permutações π de {1, 2,...,n}) que satisfazem a restrição abaixo: |π(i) - i| ≤ K, para i = 1,...,N."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1763",
        "saida": "O seu aplicativo deverá mostrar na tela a frase no idioma correto. Caso ela não esteja cadastrada, você deverá exibir a mensagem \"--- NOT FOUND ---\" para que depois dos testes você possa completar o banco de dados.",
        "entrada": "Você irá testar o seu aplicativo com diversos nomes de paises, simulando os dados informados pelo painel de navegação do trenó.",
        "titulo": "Tradutor do Papai Noel",
        "descricao": "Nicolau já está bastante cansado e sua memória não é mais a mesma. Você, como navegador, deverá auxiliar o Papai Noel a gritar a frase \"Feliz Natal\" no idioma correto de cada país de que trenó está sobrevoando. Como você é um elfo muito esperto, você já criou um pequeno app no seu celular (sim, elfos tem celular) que irá lhe informar a frase no idioma correto dado o nome do país. Como o trenó é moderno (foi atualizado no ano 2000) ele exibe no painel de navegação o nome do país atual. Os dados inseridos no seu app foram: brasil Feliz Natal! alemanha Frohliche Weihnachten! austria Frohe Weihnacht! coreia Chuk Sung Tan! espanha Feliz Navidad! grecia Kala Christougena! estados-unidos Merry Christmas! inglaterra Merry Christmas! australia Merry Christmas! portugal Feliz Natal! suecia God Jul! turquia Mutlu Noeller argentina Feliz Navidad! chile Feliz Navidad! mexico Feliz Navidad! antardida Merry Christmas! canada Merry Christmas! irlanda Nollaig Shona Dhuit! belgica Zalig Kerstfeest! italia Buon Natale! libia Buon Natale! siria Milad Mubarak! marrocos Milad Mubarak! japao Merii Kurisumasu! Para não correr o risco de infomar o nome errado você decidiu testar o aplicativo mais algumas vezes."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1709",
        "saida": "Seu programa deve produzir uma única linha contendo um único inteiro, o número mínimo de vezes que o processo de embaralhamento deve ser repetido para que o baralho fique novamente ordenado.",
        "entrada": "A única linha da entrada contém um inteiro par P (2 ≤ P ≤ 2 x 105 ), indicando o número de cartas do baralho (note que o valor P corresponde ao valor 2n na descrição acima).",
        "titulo": "Baralho Embaralhado",
        "descricao": "Um baralho contém um número par 2n de cartas a1, a2,..., a2n, todas distintas (a1 < a2 ... < a2n). O baralho encontra-se perfeitamente ordenado, ou seja, a primeira carta é a1, a segunda carta é a2, e assim por diante, até a última carta, que é a2n. Um croupier então executa repetidamente um procedimento de embaralhar, que consiste de dois passos: O baralho é divido ao meio; As cartas das duas metades são então intercaladas, de maneira que se a sequência de cartas do baralho no início do passo 1 é x1, x2, ..., x2n, então ao final do passo 2 a sequência de cartas se torna xn+1, x1, xn+2, x2,..., x2n, xn. Dado o número de cartas do baralho, escreva um programa que determine quantas vezes o procedimento de embaralhar descrito acima deve ser re petido de forma que o baralho volte a ficar ordenado."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1242",
        "saida": "Para cada instância imprima uma linha contendo o número total de ligações que ocorre quando a fita descrita é ativada.",
        "entrada": "A entrada é composta por diversos casos de teste e termina com EOF. Cada caso de teste possui uma linha descrevendo a sequência de bases da fita de RNAA. Uma fita de RNAA na entrada contém pelo menos 1 e no máximo 300 bases. Não existem espaços entre bases de uma fita da entrada. As bases são 'B', 'C', 'F' e 'S'.",
        "titulo": "Ácido Ribonucleico Alienígena",
        "descricao": "Foi descoberta uma espécie alienígena de ácido ribonucleico (popularmente conhecido como RNA). Os cientistas, por falta de criatividade, batizaram a descoberta de ácido ribonucleico alienígena (RNAA). Similar ao RNA que conhecemos, o RNAA é uma fita composta de várias bases. As bases são B C F S e podem ligar-se em pares. Os únicos pares possíveis são entre as bases B e S e as bases C e F. Enquanto está ativo, o RNAA dobra vários intervalos da fita sobre si mesma, realizando ligações entre suas bases. Os cientistas perceberam que: - Quando um intervalo da fita de RNAA se dobra, todas as bases neste intervalo se ligam com suas bases correspondentes; - Cada base pode se ligar a apenas uma outra base; - As dobras ocorrem de forma a maximizar o número de ligações feitas sobre fitas; As figuras abaixo ilustram dobras e ligacões feitas sobre fitas. Sua tarefa será, dada a descrição de uma tira de RNAA, determinar quantas ligações serão realizadas entre suas bases se a tira ficar ativa."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1256",
        "saida": "A saída deverá ser impressa conforme os exemplos fornecidos abaixo, onde a quantidade de linhas de cada caso de teste é determinada pelo valor de M. Uma linha em branco deverá separar dois conjuntos de saída.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de entrada contém um inteiro N indicando a quantidade de casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha contém um valor M (1 ≤ M ≤ 100) que indica a quantidade de endereços-base na tabela (normalmente um número primo) seguido por um espaço e um valor C (1 ≤ C ≤ 200) que indica a quantidade de chaves a serem armazenadas. A segunda linha contém cada uma das chaves (com valor entre 1 e 200), separadas por um espaço em branco.",
        "titulo": "Tabelas Hash",
        "descricao": "As tabelas Hash, também conhecidas como tabelas de dispersão, armazenam elementos com base no valor absoluto de suas chaves e em técnicas de tratamento de colisões. Para o cálculo do endereço onde deve ser armazenada uma determinada chave, utiliza-se uma função denominada função de dispersão, que transforma a chave em um dos endereços disponíveis na tabela. Suponha que uma aplicação utilize uma tabela de dispersão com 13 endereços-base (índices de 0 a 12) e empregue a função de dispersão h(x) = x mod 13, em que x representa a chave do elemento cujo endereço-base deve ser calculado. Se a chave x for igual a 49, a função de dispersão retornará o valor 10, indicando o local onde esta chave deverá ser armazenada. Se a mesma aplicação considerar a inserção da chave 88, o cálculo retornará o mesmo valor 10, ocorrendo neste caso uma colisão. O Tratamento de colisões serve para resolver os conflitos nos casos onde mais de uma chave é mapeada para um mesmo endereço-base da tabela. Este tratamento pode considerar, ou o recálculo do endereço da chave ou o encadeamento externo ou exterior. O professor gostaria então que você o auxiliasse com um programa que calcula o endereço para inserções de diversas chaves em algumas tabelas, com funções de dispersão e tratamento de colisão por encadeamento exterior."
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "1725",
        "saida": "Primeiro, imprima o inteiro N (8 ≤ N ≤ 512) em uma única linha. Então, imprima uma string de letras B, W e Q que corretamente codificam a figura com o esquema quadtree. Finalmente, acabe a string com um caractere de nova linha.",
        "entrada": "A primeira linha será “#define quadtree_width N”, onde N é o tamanho da figura em pixels. (A figura é quadrática, contendo N*N pixels). A segunda linha será “define quadtree_height N”, concordando com a primeira. A terceira linha será “#define quadtree_bits[ ] = {“. Então seguirão N linhas, cada uma codificando uma linha de pixels na figura. Haverão N/8 números hexadecimais por linha. Cada número hexadecimal é composto por 8 bits que codificam 8 pixels da esquerda para a direita (onde o bit da extrema esquerda tem valor 1 e o bit da extrema direita tem valor 128). Os números hexadecimais são impressos no formato 0xdd, onde d é um dos caracteres do conjunto { 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f }. Exemplo: Os 8 pixels WBBBWWB são escritos como 0x9e. (2 + 4 + 8 + 16 + 128 = 158 = 0x9e) A última linha será “};”. Nota: Os comentários no exemplo de entrada (delimitados por /* e */) não são parte da entrada. Eles devem ajudar a explicar o formato XBM.",
        "titulo": "Quadtree II",
        "descricao": "Quando percebeu que o mapa do tesouro codificado em quadtree era uma falsificação, Florida Jones fez um plano maligno para pregar uma peça no próximo caçador de tesouros que viesse atrás do tesouro. Mas para isso, ele precisa da sua ajuda novamente. Você pode escrever um programa que use uma figura no formato XBM e codifica-la no esquema quadtree?"
    },
    {
        "nivel": "",
        "assunto": "",
        "numero": "2022",
        "saida": "Deve ser impressa a lista ordenada, dentro das especificações descritas anteriormente, sendo mostrado primeiramente o nome do dono da lista antecedido de \"Lista de \" seguido por uma lista que mostra somente o nome do objeto seguido do seu preço em reais, definido com duas casas após o ponto decimal. Deve ser mostrada uma linha em branco após todas as saídas.",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de cada caso de teste contém o Nome (sem espaços) do respectivo dono da lista, junto com um inteiro Q, (1 < Q <100) que define a quantidade de presentes listados. As próximas Q*2 linhas consistem no nome O do objeto desejado descrito em uma linha e o P preço do mesmo (1< P < 100.000.000) e a escala de preferência E (1< E < 10) na linha seguinte. A entrada termina em EOF.",
        "titulo": "Presentes de Natal",
        "descricao": "Ah o natal... época mágica, tempo de sentimentos bons, jantares cheios de pessoas legais e recheados de boas comidas e, é claro: muitos presentes. Jucilena foi uma boa menina durante esse ano. Sabendo disso, está montando sua lista de desejos natalinos. Porém, Jucilena é uma menina muito indecisa (e seus desejos são muitos), o que acaba confundindo o seu Nicolau quanto ao presente que ela realmente quer ganhar. Em suas listas, ela elencou o nome do presente desejado, seu preço (campo este solicitado pela sua mãe) e a escala de preferência pelo mesmo, do menos preferido (1) ao mais desejado (10). Vendo essa ideia de Jucilena, seus amigos também fizeram o mesmo, pois todos tinham diversas opções de presentes. Todo esse emaranhado de listas e presentes deixaram o seu Nicolau maluco! Vendo isso, o espírito natalino lhe tocou e você decidiu que ajudará Noel, criando um programa que elencará a lista dos mais desejados presentes para Jucilena e seus amigos. Os presentes devem ser mostrados na ordem descrescente do valor de preferência. Caso a preferência entre um e outro presente seja a mesma, o presente que deverá ser mostrado antes é o de menor preço. Caso haja semelhança entre preferência e preço, eles deverão ser elencados em ordem alfabética."
    },
    {
        "nivel": "3",
        "assunto": "4",
        "numero": "1507",
        "saida": "Para cada querie R, imprima \"Yes\" (sem aspas) se R for uma subsequência de S, ou \"No\" (sem aspas), caso contrario.",
        "entrada": "A entrada comeca com um inteiro N (0 < N <= 10), o número de casos de teste. Seguem N casos testes. Um caso de teste comeca com uma sequência de caracteres S (S in [a-zA-Z], 0 < |S| < 100000). Segue um inteiro Q (0 < Q <= 1000), o número de queries. As proximas Q linhas sao compostas por uma sequência de carateres R (R in [a-zA-Z], 0 < |R| < 100) cada.",
        "titulo": "Subsequências",
        "descricao": "Dado duas sequências, diga se a segunda é uma subsequência da primeira."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1199",
        "saida": "Para cada linha de entrada (exceto a última) deve ser produzido uma linha de saída. Todo número hexadecimal deve ser precedido na saída por '0x' (zero xis).",
        "entrada": "A entrada contém vários casos de teste. Cada linha de entrada, com exceção da última, contém um número não-negativo, decimal ou hexa. O valor decimal será menor ou igual a 231. A última linha contém um número negativo que não deve ser processado, indicando o encerramento do programa.",
        "titulo": "Conversão Simples de Base",
        "descricao": "Neste problema você é solicitado a escrever um simples programa de conversão de base. A entrada será um valor hexadecimal ou decimal. Você deverá converter cada valor da entrada. Se o valor for hexadecimal, você deve convertê-lo para decimal e vice-versa. O valor hexadecimal inicia sempre com “0x” ou também, é aquele valor cuja segunda casa contém a letra 'x'."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1745",
        "saida": "Apresente uma linha com um inteiro que representa o número de substhreengs contido em S.",
        "entrada": "A entrada consiste de uma única linha que contém uma string não-vazia S de, no máximo, 10 6 caracteres. Cada personagem do S ou é um dígito ou uma letra minúscula.",
        "titulo": "Contando Substhreengs",
        "descricao": "Substrings são strings formadas pela escolha de um subconjunto de caracteres contíguos a partir de uma string. Isto é bem conhecido. Um pouco mais obscura é a definição de substhreengs. A substhreeng é uma substring que cumpre com os seguintes requisitos adicionais: 1. É não-vazio, e composto inteiramente de dígitos de base 10. 2. Interpretada na base 10 (permitindo zeros extras), o inteiro resultante é um múltiplo de 3. Por exemplo, a string \"130a303\" contém 9 substhreengs: o substhreeng \"3\" três vezes, os substhreengs \"30\" e \"0\" duas vezes cada, e os substhreengs \"303\" e \"03\", uma vez cada. A substring \"30a3\" não é um substhreeng porque não é inteiramente composto por dígitos de base 10, enquanto a substring \"13\" não é um substhreeng porque 13 não é um múltiplo de três. Note que dois substhreengs são consideradas diferentes se eles são diferentes em comprimento ou começar numa posição diferente, mesmo se os caracteres selecionados são os mesmos. Dado uma string, você está convidado a contar o número de substhreengs que ela contém."
    },
    {
        "nivel": "8",
        "assunto": "5",
        "numero": "1949",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha. Se for possível chegar ao estado final a partir do estado inicial dado, a linha da saída deve conter apenas um inteiro, o menor número de pulsos de relógio necessários para o LFSR atingir o estado final. Caso não seja possível, a linha deve conter apenas o caractere '*'.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por três linhas. A primeira linha contém dois números inteiros N, T, indicando respectivamente o número de bits (2 ≤ N ≤ 32) e o número de torneiras (2 ≤ T ≤ N). Os bits são identificados por inteiros de 0 (bit menos significativo) a N − 1 (bit mais significativo). A segunda linha contém T inteiros, separados por espaços, apresentando os identificadores dos bits que são torneiras, em ordem crescente. O bit 0 sempre é uma torneira. A terceira linha contém dois números em notação hexadecimal I e F, separados por um espaço em branco, representando respectivamente o estado inicial e o estado final do LFSR. O final da entrada é indicado por uma linha que contém dois zeros separados por espaços em branco.",
        "titulo": "Registrador de Deslocamento",
        "descricao": "Um Registrador de Deslocamento é um circuito que desloca de uma posição os elementos de um vetor de bits. O registrador de deslocamento tem uma entrada (um bit) e uma saída (também um bit), e é comandado por um pulso de relógio. Quando o pulso ocorre, o bit de entrada se transforma no bit menos significativo do vetor, o bit mais significativo é jogado na saída do registrador, e todos os outros bits são deslocados de uma posiçãoo em direção ao bit mais significativo do vetor (em direçãoo à saída). Um Registrador de Deslocamento com Retroalimentação Linear (em inglês, LFSR) é um registrador de deslocamento no qual o bit de entrada é determinado pelo valor do OU-EXCLUSIVO de alguns dos bits do registrador antes do pulso de relógio. Os bits que são utilizados na retroalimentação do registrador são chamados de torneiras. A figura abaixo mostra um LFSR de 8 bits, com três torneiras (bits 0, 3 e 5). Neste problema, você deve escrever um programa que, dados o número de bits de um LFSR, quais bits são utilizados na retroalimentação, um estado inicial e um estado final do LFSR, determine quantos pulsos de relógio serão necessários para que, partindo do estado inicial, o LFSR chegue ao estado final (ou determinar que isso é impossível)."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1697",
        "saida": "Para cada caso de teste imprima uma linha contendo o maior valor de X que Jaida pode obter. Se for impossível, imprima 0.",
        "entrada": "A primeira linha da entrada contém um inteiro T que representa o número de casos de teste. Cada caso de teste é descrito em 2 linhas: A primeira linha contém o número N (0 < N <= 106) como explicado acima. A segunda linha contém N inteiros positivos ai, que são os números iniciais da lista de Jaida (0 < ai <= 109).",
        "titulo": "Jaida e o Jogo Multiplicativo",
        "descricao": "Jaida adora inteiros positivos. Agora ela está jogando um jogo chamado \"jogo de multiplicar\". \"Jogo de multiplicar\" é um jogo educativo no qual você tem uma lista de N números. Você pode escolher qualquer par desses números e adicionar o resultado da multiplicação deles na lista. Você pode fazer essa operação quantas vezes quiser. Jaida quer que a lista contenha todos os números de 1 a X (mas pode haver repetições ou números maiores). Ajude a pequena Jaida dizendo-a qual é o maior valor de X que ela pode obter."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1624",
        "saida": "Para cada caso de teste imprima um inteiro que representa o total dos produtos que Dr Luis Cláudio conseguir levar para casa.",
        "entrada": "A entrada consiste de T casos de testes. Cada caso de teste começa com um inteiro N (1 ≤ N ≤ 100) que indica o número de produtos da lista L. As N linhas seguintes são formadas por 2 inteiros p e P. O primeiro inteiro, p (1 ≤ p ≤ 1000), representa o preço do produto. O segundo inteiro P,(1 ≤ P ≤ 30) representa o peso do produto. A próxima linha contém um inteiro M, que indica o peso máximo permitido. O fim da entrada é representado por um 0.",
        "titulo": "Promoção",
        "descricao": "Dr Luis Cláudio, um sujeito antenado com as promoções oferecidas pelo supermercado VemQueTem, o qual fica próximo à sua residência, anda muito sorridente ultimamente. Descobriu-se que ele foi sorteado em uma promoção oferecida pelo supermercado. Nesta promoção, a pessoa poderia entrar no supermercado, sozinho, e levar todos os produtos que pudesse carregar. Porém, algumas regras foram estabelecidas. 1)Entrar sozinho 2)Apenas um produto de cada tipo pode ser levado 3)Uma lista L contendo os preços e pesos dos produtos deve ser seguida 4)Um peso P máximo foi estabelecido Você foi contratado pelo vizinho curioso do Dr Luis Cláudio para descobrir qual o valor total em mercadorias que ele conseguiu levar para casa."
    },
    {
        "nivel": "8",
        "assunto": "5",
        "numero": "1526",
        "saida": "Para cada instância, imprima a quantidade máxima de lanches que podem ser entregues, se tal quantidade for positiva, ou \"impossivel\", caso contrário.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de uma linha com três inteiros, L, D, e C (10 ≤ L, D, C ≤ 100.000.000) indicando, respectivamente, a quantidade de lanches comprados, a distância entre o fornecedor e o local da competição em hectômetros e quantos lanches cabem no carrinho.",
        "titulo": "Transportando Lanches",
        "descricao": "Um dos critérios para uma maratona de programação se considerada um sucesso é que os competidores não passem fome. Preocupada com isso, a organização da maratona escolheu um dos melancias para se dedicar a tarefa de ir buscar os lanches no fornecedor. Para facilitar o transporte dos lanches o melancia recebeu um carrinho de mão. Mesmo com o carrinho, essa é uma tarefa muito cansativa, por isso a organização permitiu ao melancia comer um dos lanches que ele transporta a cada 100 metros percorridos (indo ou voltando). Além disso, a cada 100 metros, foram preparadas cabanas onde é possível armazenar os lanches temporariamente. Dessa forma os lanches não precisam ser transportados diretamente do fornecedor ao local da competição. Para saber se o melancia comeu mais lanches do que deveria, a organização quer que você escreva um programa que determine a quantidade máxima de lanches que podem ser entregues. Você pode supor que o melancia parte do fornecedor e come um lanche sempre que permitido."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1169",
        "saida": "Para cada caso de teste, imprima a quantidade de kgs de trigo que o monge esperava receber.",
        "entrada": "A primeira linha de entrada contem um único inteiro N (1 ≤ N ≤ 100), indicando o número de casos de teste. Cada caso de teste contém um único inteiro X (1 ≤ X ≤ 64), indicando o número de casas do tabuleiro que serão utilizadas.",
        "titulo": "Trigo no Tabuleiro",
        "descricao": "Uma rainha requisitou os serviços de um monge e disse-lhe que pagaria qualquer preço. O monge, necessitando de alimentos, perguntou a rainha se o pagamento poderia ser feito em grãos de trigo dispostos em um tabuleiro de damas, de forma que o primeiro quadrado tivesse apenas um grão, e os quadrados subseqüentes, o dobro do quadrado anterior. A rainha considerou o pagamento barato e pediu que o serviço fosse executado, porém, um dos cavaleiros que estava presente e entendia um pouco de matemática alertou-a que seria impossível executar o pagamento, pois a quantidade de grão seria muito alta. Curiosa, a rainha solicitou então a este cavaleiro que era bom em cálculo, que fizesse um programa que recebesse como entrada o número de quadrados a serem usados em um tabuleiro de damas e apresentasse a quantidade de kg de trigo correspondente, sabendo que cada 12 grãos do cereal correspondem a uma grama. Finalmente, o cálculo da quantidade deverá caber em um valor inteiro de 64 bits sem sinal."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2084",
        "saida": "Imprima uma linha contendo um único dígito, indicando se há um vencedor no primeiro turno ou não. Se houver um vencedor no primeiro turno, o digito deve ser '1'; caso contrário (isto é, no caso de haver um segundo turno) o dígito deve ser '2'.",
        "entrada": "A primeira linha contém um número inteiro N, que representa o número de candidatos (2 ≤ N ≤ 10). A segunda linha contém N números inteiros Vi que representam a quantidade de votos obtidos por cada um dos candidatos (0 ≤ Vi ≤ 1000 para i = 1, ..., N). Pelo menos um candidato obteve um voto, e não existem dois candidatos com o mesmo número de votos.",
        "titulo": "Eleições",
        "descricao": "Agora eleições presidenciais estão sendo realizadas em Noglônia. Para um candidato ganhar no primeiro turno, ele deve obter mais votos do que cada um dos outros candidatos. Mas isso não é suficiente: ele também deve obter pelo menos 45% de todos os votos, ou, pelo menos, 40% de todos os votos e pelo menos 10% a mais de votos do que cada um dos outros candidatos. Se nenhum candidato vence no primeiro turno, uma nova eleição é realizada como um segundo turno. Benício é um jornalista político em Noglônia, e ele sempre quer ser o primeiro a ter as notícias. É por isso que ele coletou informações a partir de pesquisas, e quer saber se de acordo com estes um dos candidatos vai ganhar no primeiro turno, ou, pelo contrário, haverá um segundo turno. Benício precisa decidir isso com pressa, antes que alguém solte a noticia antes dele. Você pode ajudá-lo?"
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1967",
        "saida": "Imprima G linhas contendo C inteiros cada, de modo que o j-ésimo inteiro da i-ésima linha represente a quantia de bitcoins que a Reitoria precisa transferir para o curso i do campus j. Siga rigorosamente as mesmas regras de espaçamento entre colunas da entrada.",
        "entrada": "A primeira linha da entrada consiste de quatro inteiros positivos, G, A, M e C (G ≤ 600; A, C ≤ 100; M ≤ 2000), os quais representam respectivamente o número de cursos de graduação, o número total de tipos de atividade que podem ocorrer, o número total de tipos de material que podem ser necessários e o número de campi da UFFS. Os cursos são designados na entrada pelos inteiros de 1 a G, os tipos de atividade pelos inteiros de 1 a A, os tipos de material pelos inteiros de 1 a M e os campi pelos inteiros de 1 a C. Seguem, então, três tabelas de inteiros não-negativos. Cada tabela é precedida por uma linha em branco, entre duas colunas consecutivas de uma mesma tabela há uma coluna de espaços de largura 1, e espaços adicionais podem preceder cada inteiro duma tabela a fim de que todas as colunas daquela tabela fiquem alinhadas à direita e haja ao menos um inteiro por coluna que não seja precedido por espaços adicionais. A primeira tabela consiste de G linhas, cada uma contendo A inteiros não maiores que 10, de modo que o j-ésimo inteiro da i-ésima linha representa quantas atividades do tipo j um curso de graduação i precisa realizar no ano corrente. A segunda tabela consiste de A linhas, cada uma contendo M inteiros não maiores que 10, de modo que o j-ésimo inteiro da i-ésima linha representa de quantos materiais do tipo j a realização de uma atividade do tipo i precisa. A terceira e última tabela consiste de M linhas, cada uma contendo C inteiros não maiores que 100, de modo que o j-ésimo inteiro da i-ésima linha representa o preço, em bitcoins, de uma unidade do material do tipo i no planeta em que se situa o campus j.",
        "titulo": "A Fronteira Final",
        "descricao": "É o ano de 2.265, e a Universidade da Fronteira Final Sideral (UFFS) já conta com diversos campi espalhados pela galáxia, de modo que todos os cursos de graduação da UFFS são ofertados em todos os campi. Cada curso promove várias atividades por ano, e as atividades promovidas por um curso são as mesmas em todos os campi da UFFS. Para que cada atividade possa acontecer, a Universidade precisa comprar uma certa quantidade de materiais, mas os preços de cada material não são os mesmos para todos os campi. Um lápis, por exemplo, pode custar Ƀ2 (2 bitcoins) para o campus de Chapecó, no planeta Terra, e Ƀ7 (7 bitcoins) para o campus de ShiKahr, no planeta Vulcano. Apesar das diferenças de custo, nunca compensa comprar materiais num campus para enviá-los para outro campus, dados os elevadíssimos custos de transporte e taxas de importação e de exportação. Assim, a fim de que todas as atividades da Universidade possam ser realizadas, a Reitoria precisa transferir para cada curso de cada campus a quantia certa de bitcoins a fim de que os cursos possam eles próprios comprar os materiais."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1641",
        "saida": "Haverá uma saída para cada caso de teste informando se uma pizza cabe ou não na mesa com seu número do pedido. Uma pizza que toca a borda da mesa sem ultrapassá-la é considerada como válida. Considere o terceiro exemplo como ilustração deste caso.",
        "entrada": "A entrada possui vários casos de teste. Cada caso de teste começa com um número inteiro R, sendo o raio da superfície da mesa onde os participantes estão sentados (1 ≤ R ≤ 1000). Então 2 números inteiros W e L especificando a largura e altura da pizza (1 ≤ W ≤ L ≤ 1000). A entrada termina com R = 0. Caso contrário, 1 ≤ R ≤ 1000. Então seguem 2 números inteiros W e L especificando a largura e o comprimento da pizza, 1 ≤ W ≤ 1000.",
        "titulo": "Restaurante e Pizzaria do Alfredo",
        "descricao": "Tradicionalmente depois do Local Contest em Louisiana, juízes e participantes vão juntos para seu restaurante favorito, Restaurante e Pizzaria do Alfredo. Os participantes estão realmente famintos após 5 horas de competição. Para pegar suas pizzas o mais rápido possível, eles decidiram pedir uma pizza grande para todos ao invés de várias pizzas pequenas. Eles gostariam de saber se é possível colocar uma pizza grande com formato retangular sobre a superfície de uma mesa redonda de modo que não fiquem partes penduradas na borda da mesa. Como todos estão cansados e famintos, escreva um programa que os ajude!"
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1398",
        "saida": "Para cada número em binário, imprima \"YES\" se o número é divisível pelo número primo dado, ou \"NO\" caso contrário.",
        "entrada": "O arquivo de entrada contém vários números em binário. Cada número em binário começa em uma linha nova, mas pode ser expandido em várias linhas. Cada número é terminado pelo simbolo #. Nenhuma linha contém mais de 100 dígitos.",
        "titulo": "Oceano Profundo! Faça-o Raso!!",
        "descricao": "Oceano profundo Estou com tanto medo de mostrar meus sentimentos, Eu naveguei por um milhão de tetos Em meu quarto solitário Oceano profundo Os versos acima fazem parte de uma tradução livre da letra de uma música popular de Cliff Richard. Neste problema, iremos lidar com um tipo similar de pessoa. O nome dessa pessoa é Rampell-Stilt-Skin. Além disso, um outro fato importante: ele é um homem morto. Alguém o matou alguns dias atrás, e você é o detetive que deve resolver o mistério. O problema deste homem é que ele sempre tentou esconder suas informações e seus sentimentos \"abaixo do mar\" (isto é, fora de alcance). Ele escreveu um diário que contém algumas sentenças e um grande número em binário (este número pode ter até 10000 dígitos). Se o número é divisível pelo número primo 131071, então as sentenças são verdadeiras, e, caso contrário, elas são falsas. Dados números grandes em binário, você deve verificar se cada número é divisível por 131071 ou não. Seu algoritmo deve ser eficiente o bastante."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "2133",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia K, onde K é o número da instância atual. Na linha seguinte imprima sim se N é um número de Dinostratus, caso contrário imprima nao.",
        "entrada": "A entrada é composta de diversas instâncias. Cada instância é dada por uma linha contendo um inteiro N (1 ≤ N ≤ 1048576). A entrada termina com final de arquivo.",
        "titulo": "Números de Dinostratus",
        "descricao": "Descobertas arqueológicas recentes de pesquisadores da Universidade de Alberta, no Canadá, mostraram que uma estranha sequência de números eram encontrados nas paredes das pirâmides do Egito, nas ruínas de Macchu Picchu e nas pedras de Stonehenge. Intrigados com a aparente coincidência os pesquisadores acionaram o Departamento de Matemática para decifrar o que aquela sequência ou aqueles números tinham de especial. A descoberta foi estarrecedora. Todos os números eram gerados por matrizes de Dinostratus. Dinostratus foi um famoso matemático grego que viveu de 390 à 320 a.C. e trabalhou em importantes problemas de geometria como a quadratura do círculo. Dinostratus estudava matrizes M de dimensão 3 × 3 formada por 9 inteiros distintos com a propriedade que para toda posição (i, j), i = 1, . . . , 3, j = 1, . . . , 3 da matriz o elemento Mi,j é múltiplo dos seus vizinhos Mi-1,j, Mi-1,j-1 e Mi,j-1 (quando existirem). Em sua homenagem, dizemos que N é um número de Dinostratus se existir uma matriz M com a propriedade acima em que M3,3 = N. Veja um exemplo com N = 36. Veja um exemplo com N = 36. A relação entre os números de Dinostratus, as pirâmides do Egito, as pedras do Stonehenge e as ruínas de Macchu Picchu ainda permanece um grande mistério. Mas, os pesquisadores de Alberta estão dispostos a estudar estes números mágicos. Sua tarefa é fazer um programa que recebe um inteiro N e verifica se este é um número de Dinostratus."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1457",
        "saida": "Para cada instância imprima uma linha contendo o K-fatorial de N. É garantido que nenhuma instância na entrada possui resultado maior que 1018.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira (e única) linha de cada instância contém um inteiro N seguido de K pontos de exclamação, onde 1 ≤ N ≤ 100 e 1 ≤ K ≤ 20.",
        "titulo": "Oráculo de Alexandria",
        "descricao": "Todo computólogo que se preza conhece o livro \"O guia do mochileiro das galáxias\" (The Hitchhiker’s Guide to the Galaxy) e sabe qual é a resposta para a pergunta fundamental sobre a vida, o universo e tudo mais. Mas, o que poucos sabem, é que a história de Douglas Adams é baseada em uma lenda egípcia, de um oráculo situado na cidade de Eskendereyya (Alexandria). Alexandria hoje é a maior cidade do Egito, com mais de 4 milhões de habitantes. Fica no delta do Nilo, e extende-se por 32km na costa do Mediterrâneo. Na Antiguidade, a cidade fundada em 331 a.C. por Alexandre, o Grande, foi umas das principais cidades do mundo e lá ficava o Farol de Alexandria (uma das 7 maravilhas do mundo antigo), a Biblioteca de Alexandria (a maior do mundo antigo) além de outras obras fantásticas. A lenda diz também que lá ficava o grande oráculo de Alexandria. Os habitantes da cidade entregavam ao oráculo pequenos bilhetes com números anotados, e recebiam de volta um número, que seria a resposta a uma pergunta fundamental do universo relacionada aos dois números dados. No seu tratado de 227 d.C. Cleómenes de Naucratis (que se tornou administrador de Alexandria quando Alexandre partiu para suas conquistas) relata alguns resultados obtidos do oráculo: Dados 8 e 1 o oráculo devolvia 40320; Dados 10 e 3, devolvia 280; Dados 4 e 2, devolvia 8; Dados 21 e 19, devolvia 42. Estudos modernos dão conta que o que o oráculo devolvia nada mais era que uma generalização do fatorial de um número inteiro. Como sabemos, N! = N x (N-1) x ... x 1. O oráculo devolvia para os dados N e K o K-fatorial de N , ou seja, N x (N-K) x (N-2K) x (N-3K) x ..., em que o produto era feito enquanto a diferença é maior ou igual a 1. Podemos representar o K-fatorial de um número por ele seguido por K exclamações: 8! = 40320; 10!!! = 280; 4!! = 8; 21!!!!!!!!!!!!!!!!!!! = 42 Dizem que ao ler sobre a lenda do oráculo de Eskendereyya, Douglas Adams teve sua inspiração para sua obra. Também, no Egito está a inspiração do Restaurante do fim do universo, mas isso é outra história... Sua tarefa é dado inteiros N e K determinar K-fatorial de N."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1323",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo o número de diferentes quadrados para a entrada correspondente.",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste é composto de uma única linha, contendo apenas um inteiro N, representando o número de quadrados em cada lado do quadriculado (1 ≤ N ≤ 100). O final da entrada é indicado por uma linha contendo apenas um zero.",
        "titulo": "Feynman",
        "descricao": "Richard Phillips Feynman era um físico americano muito famoso e ganhador do Prêmio Nobel de Física. Ele trabalhava em física teórica e também foi pioneiro no campo da computação quântica. Ele visitou a América do Sul por dez meses, dando palestras e aproveitando a vida nos trópicos. Ele também é conhecido pelos livros \"Surely You’re Joking, Mr. Feynman!\" e \"What Do You Care What Other People Think?\", que inclui algumas de suas aventuras abaixo do equador. Sua paixão da vida inteira era resolver e criar quebra-cabeças, trancas e códigos. Recentemente, um fazendeiro idoso da América do Sul, que hospedou o jovem físico em 1949, achou alguns papéis e notas que acredita-se terem pertencido a Feynman. Entre anotações sobre mesóns e eletromagnetismo, havia um guardanapo onde ele escreveu um simples desafio: \"quantos quadrados diferentes existem em um quadriculado de N x N quadrados?\". No mesmo guardanapo havia um desenho, que está reproduzido abaixo, mostrando que para N = 2, a resposta é 5. ​"
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1580",
        "saida": "Para cada palavra imprima uma linha contendo um inteiro que representa o número de anagramas que é possível formar com aquela palavra. Como este número pode ser muito grande, imprima o resto que ele deixa quando dividido por 109 + 7.",
        "entrada": "A entrada é composta por uma lista de palavras, uma por linha, e termina com EOF (fim de arquivo). Compõem uma palavra no mínimo uma e no máximo 103 letras do alfabeto latino, maiúsculas apenas, sem espaços nem quaisquer outros símbolos.",
        "titulo": "Quid Est Veritas? Est Vir Qui Adest!",
        "descricao": "Há muito tempo atrás, numa galáxia muito, muito distante, a Unidade Federativa Fazedora de Segredos (UFFS) constantemente enviava e-mails para a Unidade Receptora do Império (URI) com os códigos que deveriam ser trocados de hora em hora no sistema de segurança da Estrela da Morte. Com medo de que os e-mails fossem interceptados pela Aliança Rebelde, a UFFS assinava cada e-mail com um dos 12 anagramas diferentes de sua própria sigla, como FUFS ou SUFF, por exemplo. Não demorou muito para que a prática virasse mania entre os órgãos imperiais, e alguns stormtroopers mais curiosos começaram a se perguntar quantos anagramas teria uma palavra qualquer."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2069",
        "saida": "Imprima quantos centímetros tem o lado da mesa quadrada da Rainha da Internet. Se houver mais de uma resposta possível, imprima a menor.",
        "entrada": "A entrada consiste apenas de dois inteiros positivos A e B (A, B ≤ 109), os quais representam respectivamente o número de CDs de Ana e o número de CDs de Beto.",
        "titulo": "A Mesa Quadrada de Inês Venezuela",
        "descricao": "Inês Venezuela resolveu gravar os vídeos que enviou ao programa GranHermano em CDs, um vídeo por CD. Após colocar cada CD numa caixinha quadrada, ela percebeu que era possível organizar os CDs de modo a cobrirem perfeitamente uma mesa quadrada sua sem que CDs fossem colocados uns sobre os outros. Ana e Beto são dois amigos que são grandes fãs de Inês Venezuela. Eles também enviaram muitos vídeos ao GranHermano e também gravaram seus vídeos em CDs, um vídeo por CD. Porém, diferentemente da Panterona, eles querem organizar seus vídeos em mochilas de modo que: em cada mochila haja apenas ou CDs de Ana ou CDs de Beto; o número N de CDs em todas as mochilas seja sempre o mesmo. Eles perceberam que não há necessariamente só uma possibilidade para o valor de N, mas que, para todas as possibilidades de valores para N, seria possível também organizar todos os CDs de Inês Venezuela em mochilas de modo que em cada mochila houvesse exatamente N CDs de Inês Venezuela. Sabendo quantos vídeos Ana e Beto enviaram ao GranHermano cada, e sabendo que o lado de cada caixinha quadrada utilizada por Inês Venezuela mede 1 centímetro, calcule quanto mede o lado da mesa quadrada de Inês Brasil."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1230",
        "saida": "Para cada caso de teste, determine se existe atribuição de valores a f(x) para os pontos inteiros x ∈ [n] \\ S tal que f(x)dx = y, isto é, a área sob f(x) entre os extremos 0 e n seja igual a y. Em caso negativo, seu programa deve imprimir uma linha contendo apenas o caractere ‘N’. Em caso afirmativo, seu programa deve imprimir uma linha contendo o caractere ‘S’, seguido dos valores de f(x) para os pontos inteiros x ∈ [n] \\ S, e, em ordem crescente de valores de x. O caractere inicial e os valores seguintes, se houver, devem ser separados por um espaço em branco. Caso mais de uma solução seja possível, imprima aquela que for lexicograficamente menor.",
        "entrada": "A primeira linha de um caso de teste contém três inteiros, N (1 ≤ N ≤ 106), M e Y (0 ≤ Y ≤ 109), respectivamente a amplitude do intervalo, o tamanho do conjunto S e o valor de y. Cada uma das M linhas seguintes descreve a função f em um ponto de S, contendo dois inteiros X (0 ≤ X ≤ N, ∀X ∈ S) e F (0 ≤ F ≤ 106), representando f(X) = F. Os valores de X não estão necessariamente em ordem crescente. Obs.: f(x)dx ≤ 109 para qualquer atribuição de valores a f(x) para x ∈ [n] \\ S satisfazendo as \\restrições do enunciado.",
        "titulo": "Integral",
        "descricao": "Dado um inteiro positivo n, denotaremos por [n] o intervalo real {x : 0 ≤ x ≤ n}. Uma função f : [n] ⇒ R é parcialmente especificada, sendo fornecidos valores de f apenas em pontos de um subconjunto S de [n]. O conjunto S satisfaz as seguintes propriedades: 1. Os pontos em S são todos inteiros. 2. Os extremos 0 e n de [n] estão ambos em S. A função f satisfaz as seguintes propriedades: 1. Os valores def nos pontos inteiros de [n] são inteiros. 2. Para cada ponto inteiro x em [n] \\ S (ou seja, nos pontos inteiros de [n] que não estão em S), a função f é monótona no intervalo [x − 1, x + 1]. Em outras palavras, pelo menos uma das desigualdades f(x − 1) ≤ f(x) ≤ f(x + 1) ou f(x − 1) ≥ f(x) ≥ f(x + 1) é satisfeita. 3. Para cada ponto não inteiro x em [n], o valor de f(x) é dado pela interpolação linear de f(⌊x⌋) e f(⌈x⌉), isto é, f(x) = (x − ⌊x⌋)f(⌊x⌋) + (⌈x⌉ − x)f(⌈x⌉). Temos ainda a liberdade de especificar os valores de f nos pontos inteiros de [n] \\ S (note no entanto que S pode conter todos os pontos inteiros de [n]). Gostaríamos de utilizar essa flexibilidade para fazer com que f(x)dx = y, isto é, a área sob f(x) entre os extremos 0 e n seja igual a y, um valor dado. Seu problema então é decidir se isso é possível ou não."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1537",
        "saida": "Para cada caso de teste imprima uma linha contendo um inteiro, representando o número de maneiras que a fila do banco pode estar ordenada. Como o resultado pode ser um valor muito alto, imprima o resultado com resto de divisão em 1000000009.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (3 ≤ N ≤ 10⁵), indicando o número de pessoas na fila, incluindo André, Bruno e Carlos. O último caso de teste é indicado quando N = 0.",
        "titulo": "Fila do Banco",
        "descricao": "André, Bruno e Carlos são amigos a um bom tempo, e se tem uma coisa que eles sabem um sobre o outro é o quanto eles são pontuais. André é conhecido por ser sempre o último a chegar em um compromisso entre o três, e Carlos é sempre o primeiro. Bruno sempre chega antes de André, mas nunca antes de Carlos. Chegou o fim do mês e os três precisam ir ao banco para pagar algumas contas. Contando com eles, há N pessoas na fila para usar o caixa. Sabendo o quanto eles são pontuais entre si, de quantas maneiras possíveis a fila do banco pode estar ordenada? Lembre-se que as regras acima só se aplicam entre eles, por exemplo, Carlos sempre chega antes que Bruno e André, mas pode chegar depois de outras pessoas na fila. Duas ordenações de fila são consideradas diferentes se ao menos uma pessoa está em um lugar diferente nas duas ordenações."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1736",
        "saida": "Para cada caso de teste imprima uma única linha que contém a árvore correspondente, denotada como descrito acima. Observe que, em geral, há muitas maneiras para denotar tal árvore: escolha sua favorita.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste especifica o código de Prüfer de uma árvore em uma linha. Você encontrará n-1 números separados por um único espaço. A entrada é terminada por EOF. Você pode assumir que 1 ≤ n ≤ 50.",
        "titulo": "Decodifique a Árvore",
        "descricao": "Uma árvore (isto é, um grafo conexo sem ciclos) com os vértices numerados por números inteiros 1, 2, ..., n é dado. O código \"Prüfer\" de tal estrutura é construído da seguinte forma: a folha (um vértice que tem uma única aresta incidente) com o menor número é escolhido. Esta folha, juntamente com a sua aresta incidente é removida do grafo, enquanto que o número do vértice que era adjacente à folha é anotado. No grafo obtido, este procedimento é repetido, até que haja apenas um vértice restante (que, a propósito, sempre tem o número n). A sequência com n-1 números anotados, é chamado de código de Prüfer da árvore. Sua tarefa é reconstruir uma árvore, dado o seu código de Prüfer. A árvore deve ser indicada por uma palavra da linguagem especificada pela seguinte gramática: T ::= \"(\" N S \")\" S ::= \" \" T S     | vazio N ::= número Ou seja, as árvores têm parênteses em torno delas, e um número que indica o identificador do vértice raiz, seguido por arbitrariamente muitas (talvez nenhuma) subárvores separadas por um único caractere de espaço. Como um exemplo, dê uma olhada na árvore na figura abaixo que é indicado na primeira linha do exemplo de saída. Observe que, de acordo com a definição dada acima, a raiz de uma árvore pode ser uma folha também. Apenas para facilitar a notação nós designamos um vértice como raiz. Normalmente, o que estamos tratando aqui é chamado de \"árvore não enraizada\"."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1729",
        "saida": "Para cada time deverá ser impresso uma linha contendo o numero do time t e o tempo médio no formato \"m:ss\". Se ao menos um corredor do time foi desclassificado, a saída devera ser \"-\". Olhe o exemplo de Saída para o formato exato de apresentação.",
        "entrada": "A primeira linha da entrada especifica o número N de seções seguido pela distancia total D, em kilometros, da corrida de revezamento. Você pode assumir que 1 ≤ N ≤ 20 e 0.0 < D < 200.00. Cada linha seguinte possui informação sobre um time: o número (inteiro) do time T e seguido por N resultados de cada seção, separado por um espaço. O tempo é dado no formato \"h:mm:ss\", sendo horas, minutos e segundos números inteiros. Se algum corredor foi desclassificado, o tempo da corrida será denotado por \"-:--:--\". E no final, a linha é acabada por um caracter de \"nova linha\". Entrada é terminada por EOF.",
        "titulo": "Média Não é Rápida o Suficiente!",
        "descricao": "Uma corrida de revezamento é feita para dois ou mais times de corredores. Cada membro de um time corre uma parte da corrida. Sua tarefa é ajudar a computar o resultado de uma corrida de revezamento. Você tem que avaliar varios times. É dado uma lista com os tempos das seções da corrida de cada time. Você deve calcular o tempo médio por quilômetro ao longo de toda a distância. Isto é fácil, certo? Então se você gosta de um pouco de diversão e desafio, você provavelmente irá gostar de uma corrida de revezamento. Estudantes da universidade de Ulm participaram da corrida de revezamento \"SOLA\", em Zurique, Suiça."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1316",
        "saida": "Para cada caso de teste o programa deverá produzir uma linha de saída. Se for possível distribuir os chocolates como foi relatado na declaração do problema, imprima o número de caixas a ser preenchido com chocolate Mindt, seguido de espaço, seguido pela lista do número de caixas, em ordem ascendente. Cada número de caixa na lista deve ser seguido de espaço. Se for impossível distribuir os chocolates, imprima \"Impossible to distribute\". Se existem mais que uma solução, imprima qualquer uma.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso consiste em três linhas. A primeira linha contém dois inteiros M e L que indicam respectivamente o número de chocolates Mindt e Lilka que Pedro comprou, sendo (0 ≤ M, L ≤ 1000). A próxima linha contém um inteiro N representando o número de caixinhas que Pedro tem, sendo (N ≤ M + L). A terceira linha contém N inteiros indicando a capacidade Ci (Ci ≥ 0), onde Ci é o número de chocolates necessário para encher a caixa i. O final da entrada é indicado por M = L = 0.",
        "titulo": "Compra Livre de Impostos",
        "descricao": "Pedro viajou para a Europa para participar da Olimpíada Internacional de Informática e está voltando para casa. Já que todos os seus amigos pediram para que ele trouxesse alguns presentes, ele comprou dois grandes pacotes de chocolate (um do Mindt e um do Lilka). Cada um desses pacotes contém em certo número de pequenos chocolates. Comprar os dois grandes pacotes foi bem menos caro que comprar as caixas individuais dos mesmos. Em casa, Pedro tinha algumas caixas que guardou de outras viagens. Pedro pretende distribuir os chocolates que recém comprou nessas caixas, para dá-las a seus amigos. Assim que Pedro começou a encher as caixas, ele percebeu um grande problema: já que ele tem dois tipos de chocolates, se ele misturar chocolates de diferentes tipos nas caixas, o amigo que receber a caixa perceberá o truque de Pedro para economizar dinheiro, e ficará magoado com ele. Você deve ajudar o pobre Pedro a distribuir os chocolates nas caixas de maneira a que cada caixa esteja cheia e com apenas um tipo de chocolate. Um certo número de pedaços podem acabar sobrando (Pedro ficará com eles se for o caso)."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1352",
        "saida": "Para cada caso de teste seu programa deve produzir uma linha de saída, contendo um valor real representando o prêmio a ser pago para cada bilhete premiado. O valor do prêmio deverá ser impresso com 2 dígitos de precisão, e o último dígito decimal deve ser arredondado. A entrada não irá conter os casos de teste onde diferenças de arredondamento são significativas.",
        "entrada": "A entrada conterá vários casos de teste. Cada teste é descrito em uma linha que contém dois números, um inteiro N e um valor de ponto flutuante (real) P, representando, respectivamente, o número de linhas (e colunas) dos bilhetes, bem como a percentagem do dinheiro recebido que será pago como prêmio (2 ≤ N ≤ 100 e 0 ≤ P ≤ 100.0). O final da entrada é indicado por N = P = 0.",
        "titulo": "Loteria Quadrada",
        "descricao": "O Governo da República Unida de Little Tower está desenvolvendo um novo tipo de loteria. O principal objetivo da loteria é arrecadar dinheiro para a construção do Estádio Olímpico Little Tower, para atender a 400.000 pessoas. A proposta do estádio é uma estratégia de Little Tower para sediar a Copa do Mundo em 2078. O sorteio será executado semanalmente. Cada semana, os bilhetes, sob a forma de cartões quadrados serão vendidos. Cada bilhete terá quadrados com números impressos no interior, de uma sequência de N linhas e N colunas, conforme mostrado na Figura 1. ​Fig 1: Um exemplo de bilhete para N = 3. Em cada bilhete nenhum número aparece duas vezes e, portanto, todos os números de 1 a N2 estarão presentes (em ordem aleatória de posições). Não haverá duas passagens iguais vendidas na mesma semana. No entanto, todos os possíveis diferentes bilhetes serão vendidos, uma vez que os cidadãos de Little Tower amam loterias. Os ingressos serão vendidos por T$ 1,00 (um Torreal, Unidade monetária de Little Tower). Para escolher o(s) vencedor(es), quatro números (entre 1 e N2) serão escolhidos aleatoriamente e o(s) bilhete(s) cujos números escolhidos sejam vértices de um quadrado, será concedido o prêmio em dinheiro. Por exemplo, o bilhete mostrado na Figura 1 é um bilhete premiado, se os números colhidos são (6, 3, 2, 9), (1, 4, 2, 5) ou (7, 8, 9, 6), mas não é um bilhete premiado, se os números colhidos forem (1, 7, 2, 9). Se mais de um bilhete for vencedor, os clientes que compraram os bilhetes vão compartilhar o prêmio da semana. O governo de Little Tower pede sua ajuda para determinar o valor do prêmio a ser pago para cada bilhete vencedor para um dado N, e uma determinada percentagem, sobre o montante total recebido pelos ingressos, que o governo quer pagar como prêmios."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1202",
        "saida": "Para cada instância imprima os 3 dígitos que devem estar escrito no cartão para a pessoa entrar no teatro.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância consiste em uma linha contendo uma descrição de fileira com até 10000 dígitos. A descrição de uma fileira é uma sequência de ’1’s e ’0’s, nunca começando com ’0’ (a primeira cadeira de todas as fileiras estão reservadas).",
        "titulo": "Festival das Noites Brancas",
        "descricao": "Todos os anos, na época das chamadas “noites brancas” em que o sol não se põe sobre a cidade de São Petersburgo ocorre o “festival de artes das noites brancas”, que consiste de uma série de apresentações musicais, concertos, balés, e muito mais que atraem artistas de todo o mundo. É considerado uma das maiores manifestações populares de toda a Russia, uma vez que no auge das noites brancas, o festival costuma ter até um milhão de participantes circulando pelas ruas da cidade. O Teatro Mariinski recebe alguns dos melhores espetáculos e, uma vez que não tem ingressos suficientes para todos os que desejam assistir `as performances, costuma utilizar um sistema curioso e divertido para sortear os que poderão entrar no teatro. Cada pessoa que entra no teatro, interessado em assistir a uma apresentação escolhe uma fileira na qual gostaria de sentar e recebe um cartão com um número de 000 a 999 escrito nele. Este número é o código do sorteio daquela pessoa. Ao chegar `a entrada o atendente verifica a situação da fila na qual a pessoa sentará. A fila é descrita por uma sequência de ’1’s e ’0’s, onde 1 indica cadeira livre e 0 indica cadeira ocupada. Essa sequência é então interpretada como a representação binária do número n. A pessoa entrará com seus acompanhantes se o n-ésimo número da sequência de Fibonacci terminar exatamente com o número escrito no seu cartão. Assim, por exemplo, se a descrição da fileira é 100 a pessoa só entrará se possuir o cartão com o número 003."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "2149",
        "saida": "Para cada caso de teste, imprima o valor correspondente a posição solicitada na sequência.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com um inteiro N (1 ≤ N ≤ 17), indicando a posição solicitada na sequência. A entrada termina com fim de arquivo.",
        "titulo": "Sequência do Tio Phill Bonati",
        "descricao": "Will Bonati mora na cidade de Belo Ar, juntamente com o a família de seu tio, Phill Bonati. Will costuma fazer algumas coisas que seu tio não gosta, como, por exemplo, ouvir música com volume alto. Certo dia, Phill propõe um desafio ao seu sobrinho. Ele passaria os primeiros números de uma sequência que ele criou. Se Will pudesse descobrir os próximos números desta sequência, seu tio teria que aturar as músicas dele, com volume alto, e ainda faria uma sopa para eles. Se não descobrisse, Will teria que parar de ouvir tais músicas, deixando o tio mais sossegado. Os primeiros números desta sequência estão logo abaixo. Will pediu a sua ajuda para escrever um programa que possa identificar os próximos números nesta sequência. 0     1     1     1     2     2     4     8     12 Escreva um programa que, dado um número inteiro, informe qual é o valor correspondente a esta posição na sequência proposta."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1946",
        "saida": "A saída deve ser dada em uma única linha, que contem a probabilidade da bolinha cair na caixinha com o grande prêmio. A probabilidade deve ser exibida com 2 casas decimais.",
        "entrada": "A entrada é dada em uma única linha, que contem o número S de caixinhas na base da pirâmide (3 ≤ S ≤ 4999). S é sempre ímpar.",
        "titulo": "Pirâmide da Sorte",
        "descricao": "Um grande show de TV distribui prêmios à platéia através da Pirâmide da Sorte. Um convidado joga uma bolinha no topo da pirâmide (que é um triângulo, na verdade) e ela vai descendo para a esquerda ou para a direita aleatoriamente até chegar em uma das caixinhas na base. O convidado ganha o prêmio que está associado àquela caixinha. O grande prêmio sempre fica no meio da base da pirâmide, que sempre tem, portanto, um número ímpar de caixinhas na base. Veja uma pirâmide com 15 caixinhas na figura. Os produtores do programa querem economizar o máximo possível e pediram para você calcular qual a probabilidade de alguém ganhar o grande prêmio, dado o número de caixinhas na base da pirâmide. Considere que, em cada ponto da pirâmide, existe a mesma chance da bolinha ir para a esquerda ou para a direita."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1904",
        "saida": "Seu programa deve imprimir uma única linha contendo unicamente o nome do vencedor da partida, assumindo-se que ambos os jogadores jogam de maneira ótima. Se a partida empata, a linha da saída deverá conter unicamente o símbolo ?.",
        "entrada": "A entrada consiste de dois inteiros A e B (0 ≤ A, B ≤ 107), os quais representam respectivamente os números exibidos por Alice e Bob no início do jogo, conforme explicado anteriormente.",
        "titulo": "Par ou Ímpar 2.0",
        "descricao": "Alice e Bob são dois amigos que moram no planeta Terra 2.0, construído após a destruição do planeta Terra 1.0 pelos Vogons. Em Terra 2.0, tudo é melhorado. Os seres humanos, por exemplo, não possuem 10 dedos nas mãos, mas 10 milhões: 5 milhões em cada mão. O tradicional jogo ‘Par ou Ímpar’, muito jogado em Terra 1.0, também foi bastante melhorado. Alice e Bob jogam ‘Par ou Ímpar 2.0’ o tempo todo. Nesta versão do jogo, os jogadores devem ao mesmo tempo exibir usando as mãos um número inteiro entre 0 e 10 milhões. Se os números exibidos pelos dois jogadores forem iguais, configura-se empate. Senão, os jogadores se alternam escrevendo números num pedaço de papel. Sendo A o inteiro exibido por Alice no início da partida e B o inteiro exibido por Bob, cada número escrito no papel deve ser um produto de |A - B| fatores, sendo todos os fatores números primos, não necessariamente distintos, pertencentes ao intervalo definido pelos inteiros A e B. Além disso, não é permitido que um mesmo número seja escrito no papel mais de uma vez. Perde o jogador que, em sua vez de jogar, não for capaz de escrever no papel um número novo. Como Bob é um cavalheiro, Alice é sempre a primeira a jogar. Note que se não há primos no intervalo definido pelos inteiros A e B, Alice não consegue escrever número algum no papel na sua primeira jogada, e Bob vence a partida. Por exemplo, se A = 5 e B = 2, há somente 10 números que podem ser escritos no papel, os quais são: 8 = 2 × 2 × 2 12 = 2 × 2 × 3 20 = 2 × 2 × 5 18 = 2 × 3 × 3 30 = 2 × 3 × 5 50 = 2 × 5 × 5 27 = 3 × 3 × 3 45 = 3 × 3 × 5 75 = 3 × 5 × 5 125 = 5 × 5 × 5 Assim, se tanto Alice quanto Bob jogarem de maneira ótima, Bob vence a partida neste caso."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1465",
        "saida": "Para cada caso de teste, a saída deve consistir de um único número natural N em uma linha, indicando a potência tal que (A+B*i)N é real e seu valor absoluto não é maior que 230. Se não houver solução imprima \"TOO COMPLICATED\".",
        "entrada": "A primeira linha da entrada contém um inteiro M, indicando o número de casos de teste. Para cada caso de teste, há uma linha com dois inteiros A e B. A é a parte real do número complexo, e B a parte imaginária. Você pode assumir que -10000 ≤ A ≤ 10000, e -10000 ≤ B ≤ 10000.",
        "titulo": "Complexo, Difícil e Complicado",
        "descricao": "Números complexos não são apenas complexos, mas também complicados. Então é melhor tentar resolver outro problema... Nós temos um números complexo, a+b*i, onde i é a raiz quadrada de -1. Nós queremos torná-lo simples (isto é, real), elevando-o a uma potência natural. Por exemplo, o número complexo 2+2*i, pode ser simplificado elevando-o a 4: (2+2*i)4 = -64 Você tem que computar o menor número natural, N, (zero não está incluso) tal que (a+b*i)N é um número real. Além disso, pedimos que o valor absoluto de (a+b*i)N não seja maior que 230."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1805",
        "saida": "Para cada caso de teste, a saída consiste de uma linha contendo a soma dos números naturais do intervalo.",
        "entrada": "Cada caso de teste contém dois inteiros A e B (1 ≤ A ≤ B ≤ 109), representando o limite inferior e o superior respectivamente.",
        "titulo": "Soma Natural",
        "descricao": "Um número natural é um inteiro não-negativo (0, 1, 2, 3, 4, 5,...). A sua tarefa neste problema é calcular a soma dos números naturais que estão presentes em um determinado intervalo [A, B] inclusive. Por exemplo, a soma dos números naturais no intervalo [2, 5] é 14 = (2+3+4+5)."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2033",
        "saida": "Para cada caso, a saída é composta por três linhas. A primeira contendo a mensagem “DIFERENCA DE VALOR = “, seguido do valor da diferença entre o valor final com juros simples e o valor final com juros composto. Na segunda linha será exibida a mensagem “JUROS SIMPLES = “, seguido do valor da diferença entre o valor a ser emprestado e o valor final com juros simples. E na terceira linha será mostrada a mensagem “JUROS COMPOSTO = “, seguido do valor da diferença entre o valor a ser emprestado e o valor final com juros composto. - Não esqueça de colocar os espaços existentes nas mensagens  e de por uma quebra de linha no final de cada saída.",
        "entrada": "A entrada consiste de vários casos de teste e termina com EOF. Cada caso contém dois valores de ponto flutuante de dupla precisão, um C (0.01 ≤ C ≤ 20000.00) e outro i (0.01 ≤ i ≤ 1.00), representando, respectivamente, o valor do empréstimo e a taxa de juros, e um inteiro n (1 ≤ n ≤ 20) representando a quantidade de “meses” referente ao prazo para efetuar o pagamento desse empréstimo ao agiota, já com os juros aplicados.",
        "titulo": "Juros Sobre o Empréstimo",
        "descricao": "Sempre que pode, Danilo compra acessórios para o seu computador, pois trabalha como programador e procura sempre melhorar o desempenho de seu PC. Certa vez Danilo resolveu fazer um upgrade geral em seu computador, mas como estava sem dinheiro no momento, resolveu solicitar um empréstimo em dinheiro com seu amigo Maclaud que é agiota. Maclaud então resolveu emprestar o dinheiro ao seu amigo Danilo e o aconselhou a verificar qual seria sua dívida se fosse aplicado o regime de “Juros Simples” ou “Juros Composto”, pois assim saberia que o agiota não aumentaria o valor. Danilo ficou confuso e resolveu ir pra sua casa e calcular qual seriam os valores finais de acordo com cada regime de juros.  Mas Danilo não é muito bom de cálculo e resolveu pedir a ajuda de um programador que fosse capaz de criar um programa que informado o valor do empréstimo, a taxa de juros “mensal” e o prazo em “meses” que necessita para quitar o empréstimo com os juros, calcule e mostre: - A diferença entre o valor final com juros simples e o valor final com juros composto; - A diferença entre o valor a ser emprestado e o valor final com juros simples; - A diferença entre o valor a ser emprestado e o valor final com juros composto;"
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1926",
        "saida": "Para cada uma das Q consultas, imprima a quantidade de número primos gêmeos entre X e Y, inclusive.",
        "entrada": "A primeira linha de entrada irá conter um inteiro 1 ≤ Q ≤ 105, o número de consultas, cada uma das próximas Q linhas irá contér dois inteiros, 1 ≤ X, Y ≤ 106.",
        "titulo": "Marianne e os Primos Gêmeos",
        "descricao": "Marianne está criando um jogo chamado “Herói da Guitarra”. É um trabalho extremamente cansativo, que requer bastante empenho e tempo, mas nada que uma greve não resolva. Ao abrir o seu email, Mari se deparou com um problema bastante curioso proposto pelos primos Renè e Leonhard e pelos gêmeos Isaac e Carl. O problema é descrito da seguinte forma: “Um número natural é dito primo, se ele possui exatamente dois divisores naturais distintos: o número um e ele mesmo. Um número é dito primo gêmeo, se e somente se, ele for primo e houver outro número primo qualquer cuja diferença absoluta entre esse dois números primos seja igual a dois. Por exemplo, o número 3 é um primo gêmeo, pois ele é primo e existe outro primo (5) tal que |3 - 5| = 2, já o número 23, apesar de ser primo, não é um primo gêmeo. Você poderia nos dizer quantos número primos gêmeos existem entre x e y, inclusive?” Marianne adora resolver esse tipo de problema, mas está muito ocupada criando o seu próprio jogo de Herói da Guitarra. Você pode ajudar?"
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1434",
        "saida": "Para cada caso na entrada, seu programa deve produzir uma linha contendo a Inatividade do Império depois de N ciclos de simulação.",
        "entrada": "A entrada consiste em vários casos de teste. A primeira linha de um caso de teste contém 4 inteiros C, R, N e S, indicando respectivamente a quantidade de cidades do Império (2 ≤ C ≤ 1000), o número de ruas (1 ≤ R ≤ C(C - 1) / 2 ), o número de ciclos a ser simulado (1 ≤ N 1000) e o identificador da cidade inicial do patruleiro (1 ≤ S ≤ C). Cada cidade é identificada por um inteiro distinto de 1 à C. Cada uma das R linhas seguintes contém três inteiros X, Y e D descrevendo a rua; X e Y representam cidades (1 ≤ X ≠ Y ≤ C) e D representa a distância (1 ≤ D ≤ 1000), em kilometros, da rua que conecta X e Y diretamente, sem passar através de qualquer outra cidade. Cada par de cidades X e Y aparecerão ao menos uma vez na descrição de rua. Você pode assumir que é sempre possível viajar de uma cidade para qualquer outra cidade no Império usando as ruas disponíveis. O fim da entrada é indicado por C = R = N = S = 0.",
        "titulo": "Patrulheiros Romanos",
        "descricao": "Nos tempos antigos, patrulheiros eram usados para garantir que todas as cidades do Império Romano estavam sob controle. O trabalho de um patrulheiro consistia em visitar continuamente as cidades do Império, tentando minimizar o intervalo entre duas visitas em cada cidade. A Sociedade Militar (SM) quer simular o comportamento de um patrulheiro para ver o quão eficientes eles eram. Cada ciclo de simulação corresponde a uma unidade de tempo. A Inatividade Instantânea da Cidade (IIC) para uma cidade X depois de T ciclos da simulação é o número de ciclos decorridos desde a última visita do patruleiro à cidade X (i.e o número de unidades de tempo que a cidade X mantem-se sem visita). Todas as cidades tem Inatividade Instantânea da Cidade igual a zero no início da simulação. A Inatividade Instantânea do Império (IIE) depois de cada ciclo é a soma da Inatividade Instantânea da Cidade de todas as cidades depois de tal ciclo. Finalmente, a Inatividade do Império (II) para uma simulação de N ciclos é a soma das Inatividades Instantâneas do Império depois de N ciclos de simulação. Depois de visitar a cidade X, o patruleiro sempre escolhe visitar a cidade vizinha Y com a máxima Inatividade Instantânea da Cidade (se mais de uma cidade tem a maior inatividade, aquela com o menor identificador é escolhida). As cidades X e Y são vizinhas se há uma rua conectando ambas diretamente, sem passar por nenhum cidade intermediária. No começo da simulação, o patruleiro é localizado em uma das cidades, e é dado um mapa do Império Romano contendo a descrição de todas as ruas do Império, indicando o comprimento (em kilometros) e quais duas cidades cada rua conecta. Uma rua entre as cidades X e Y pode ser usada tanto para ir de X à Y quanto para ir de Y à X. Assumindo que um patruleiro viaja um quilometro em uma unidade de tempo (uma simulação de ciclo) e que o tempo para visitar a cidade é neglicenciável (igual a zero), MS solicitou a você para determinar a Inatividade do Império depois de N ciclos de simulação. Para exemplificar, considere um Império que contém 3 cidades (1, 2 e 3) e duas ruas de comprimento 1 km. A primeira rua conecta as cidades 1 e 2, enquanto a segunda conecta as cidades 2 e 3. Abaixo você encontra um exemplo de uma simulação de 3 ciclos para tal cenário, considerando que o patrulheiro começa na cidade 1. Começo da Simulação Patrilheiro na: 1 IIC1 = 0, IIC2 = 0, IIC3 = 0 IIE = 0 II = 0 Depois do ciclo 1 Patrilheiro na: 2 IIC1 = 1, IIC2 = 0, IIC3 = 1 IIE = 2 II = 2 Depois do ciclo 2 Patrilheiro na: 1 IIC1 = 0, IIC2 = 1, IIC3 = 2 IIE = 3 II = 5 Depois do ciclo 3 Patrilheiro na: 2 IIC1 = 1, IIC2 = 0, IIC3 = 3 IIE = 4 II = 9 Assim sendo, em tal situação, depois de 3 ciclos de simulações a Inatividade do Império é 9."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1170",
        "saida": "Para cada caso de teste, imprima uma linha contendo o número de dias que Blobs irá demorar para comer todo seu suprimento de comida, seguido da palavra \"dias\".",
        "entrada": "A primeira linha de entrada contem um único inteiro N (1 ≤ N ≤ 1000), indicando o número de casos de teste. As N linhas seguintes contém um valor de ponto flutuante C (1 ≤ C ≤ 1000) correspondente à quantidade de comida disponível para Blobs.",
        "titulo": "Blobs",
        "descricao": "No planeta Alpha vive a criatura Blobs, que come precisamente 1/2 de seu suprimento de comida disponível todos os dias. Escreva um algoritmo que leia a capacidade inicial de suprimento de comida (em Kg), e calcule quantos dias passarão antes que Blobs coma todo esse suprimento até restar um quilo ou menos."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1307",
        "saida": "Para cada par de strings, seu programa deve imprimir uma das seguintes mensagens: Pair #p: All you need is love! Pair #p: Love is not all you need! Onde p representa o número do par de entrada (que inicia em 1). Seu programa deve imprimir a primeira mensagem no caso de existir pelo menos uma string L válida tal que ambas strings S1 e S2 possam ser feitas somente de L. Caso contrário, imprima a segunda linha.",
        "entrada": "A primeira linha de entrada contém um valor inteiro positivo N (N < 10000) que indica o número de casos de teste. Então, 2*N linhas vem a seguir. Cada par de linhas consiste de um caso de teste. Cada par de linhas contém respectivamente S1 e S2 que serão inseridas como entrada para a máquina do amor. Nenhuma string conterá menos do que 2 ou mais do que 30 caracteres. Você pode assumir que as strings de entrada serão válidas e estarão de acordo com as regras acima.",
        "titulo": "Tudo o que Você Precisa é Amor",
        "descricao": "\"All you need is love. All you need is love. All you need is love, love... love is all you need.\" The Beatles Foi inventado um novo dispositivo poderoso pela Beautifull Internacional Machines Corporation chamado de \"Máquina do amor!\". Dada uma string feita de dígitos binários, a máquina do amor responde se isto é feito somente de amor, ou seja, se tudo o que você irá precisar para construir aquela string for somente amor. A definição de amor para a Máquina do amor é outra string de dígitos binários, fornecida por um operador humano. Vamos supor que nós temos uma string L que representa \"love\" e forneçamos uma string S para a máquina do amor. Diremos então que tudo o que você precisa é amor para construir S se pudermos repetidamente subtrair L de S até que sobre apenas L. A subtração definida aqui é a mesma subtração aritmética binária na base 2. Por definição é fácil de ver que L > S (em binário), então S não é feito de amor. Se S = L então S é obviamente feito de amor. Por exemplo, suponha S = \"11011\" e L = \"11\". Se repetidamente subtrairmos L de S, obteremos: 11011, 11000, 10101, 10010, 1111, 1100, 1001, 110, 11. Portanto, dado este L, tudo o que você necessita é amor para construir S. Devido a algumas limitações da Máquina do Amor, não será possível lidar com strings com zero à esquerda. Por exemplo \"0010101\", \"01110101\", \"011111\" etc. são string Inválidas. Strings que contenham apenas um dígito também são strings inválidas (isto é outra limitação). Sua tarefa para este problema é: dadas duas strings binárias válidas, S1 e S2, veja se é possível ter uma string L válida tal que ambas, S1 e S2 possam ser feitas apenas de L (i.e. dadas duas strings válidas S1 e S2, indique se existe pelo menos uma string L válida tal que ambas S1 e S2 sejam feitas apenas de L). Por exemplo, para S1 = 11011 e S2 = 11000, nós podemos ter L = 11 tal que S1 e S2 são feitas ambas somente de L (como pode ser visto no exemplo abaixo)."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1161",
        "saida": "Para cada caso de teste de entrada, seu programa deve imprimir uma única linha, contendo um número que é a soma de ambos os fatoriais (de M e N).",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso contém dois números inteiros M (0 ≤ M ≤ 20) e N (0 ≤ N ≤ 20). O fim da entrada é determinado por eof.",
        "titulo": "Soma de Fatoriais",
        "descricao": "Leia dois valores inteiros M e N indefinidamente. A cada leitura, calcule e escreva a soma dos fatoriais de cada um dos valores lidos. Utilize uma variável apropriada, pois cálculo pode resultar em um valor com mais de 15 dígitos."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1634",
        "saida": "Para cada caso de teste, imprima n linhas de saída, onde a linha i contém a probabilidade como uma fração reduzida que o participante i ganhe mais dinheiro. Veja a saída exemplo para detalhes.",
        "entrada": "A entrada consiste em vários casos de teste. Cada caso começa com uma linha contendo dois inteiros n e m, respectivamente o número de participantes na loteria e o número de rodadas na loteria. Você pode presumir que 1 ≤ n ≤ 10000 e 1 ≤ m ≤ 30. As linhas n seguintes contém a descrição dos bilhetes comprados pelo participante. A linha ith contém m inteiros não-negativos c1, ..., cm, onde cj (1 ≤ j ≤ m) é o tanto de bilhetes da rodada j comprados pelo participante i. O número total de bilhetes vendidos em cada rodada está entre 1 e 109. A entrada termina com uma linha contendo 2 zeros.",
        "titulo": "Outra Loteria",
        "descricao": "Até em tempos de crise econômica, as pessoas na Bytelândia ainda gostam de participar na loteria. Com um pouco sorte, talvez eles se livrem de todas suas mágoas e fiquem ricos. A loteria mais popular em Bytelândia consiste de rodadas m. Em cada rodada, todo mundo pode comprar quantos bilhetes desejar, e entre todos os bilhetes vendidos nessa rodada, um bilhete é escolhido aleatoriamente, cada um com a mesma probabilidade. O dono daquele bilhete ganha o prêmio em dinheiro dessa rodada. Já que as pessoas na Bytelândia gostam de potências de 2, o prêmio em dinheiro para o vencedor da rodada i acumula para 2i Dólares Bytelandenses. Você consegue determinar para cada participante da loteria a probabilidade de ele ganhar mais dinheiro do que todas as outras pessoas?"
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1756",
        "saida": "Para cada caso de teste imprima uma única linha contendo a resposta com 7 dígitos após o ponto decimal.",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 50), o número de casos de teste. Cada caso de teste é composto por 5 linhas. A primeira linha contém o inteiro N (2 ≤ N ≤ 8), a quantidade de bits de cada indivíduo. A segunda linha contém um número inteiro Y (1 ≤ Y < N) seguido de um número de ponto flutuante P (0 ≤ P ≤ 1), a posição de corte e probabilidade de ocorrência de mutação, respectivamente. A terceira linha contém o primeiro indivíduo que será utilizado no crossover. A quarta linha contém o segundo indivíduo que será utilizado no crossover. A quinta linha contém o indivíduo que será comparado com os possíveis resultados do crossover.",
        "titulo": "Algoritmo Genético",
        "descricao": "Algumas disciplinas de computação são muito teóricas e as vezes entediantes. Na tentativa de despertar o interesse dos alunos pelo conteúdo, o professor de Inteligência Artificial, sempre que possível, propõe um desafio envolvendo o conteúdo visto na aula do dia. A aula de hoje foi sobre algoritmos genéticos e procedimento explicado pelo professor foi o seguinte: A partir de 2 indivíduos (duas sequências de N bits: x0x1...xN-1) A e B, escolhe-se um posição de corte Y ( 1 ≤ Y < N) e então ocorre a recombinação (crossover), gerando 2 novos indivíduos: o primeiro é formado pelos bits x0...xY-1 do indivíduo A seguidos dos bits xY..xN-1 do indivíduo B, o segundo é formado pelos bits x0...xY-1 do indivíduo B seguidos dos bits xY..xN-1 do indivíduo A. A imagem abaixo ilustra o resultado do crossover com Y = 5. Após o crossover, cada bit dos novos indivíduos pode sofrer mutação (alterar seu valor) de acordo com uma probabilidade de mutação P especificada. O enunciado do desafio deixado pelo professor foi o seguinte: \"Escreva um programa que receba 3 indivíduos, a posição do \"corte\" e a probabilidade de mutação. O programa deverá calcular qual a probabilidade de se obter o terceiro indivíduo como resultado de um crossover entre os dois primeiros.\""
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1801",
        "saida": "Mostre uma única linha com um inteiro que indica o número de formas com que o Professor pode obter um valor de n que seja um quadrado perfeito. Duas formas são consideradas distintas se elas diferem no valor obtido para n.",
        "entrada": "A única linha da entrada tem um inteiro positivo x com no máximo 12 dígitos.",
        "titulo": "Brincando com Números",
        "descricao": "O Professor Cedrado-Cueta gosta de brincar com números, especialmente quando estes são quadrados perfeitos. Um número natural n é um quadrado perfeito se existe um número natural m tal que n = m2. Por exemplo, 9 e 36 são quadrados perfeitos porque 9 = 32 e 36 = 62; contudo 5 e 12 não são quadrados perfeitos. O Professor encontrou recentemente um número x e ele gostaria de criar um quadrado perfeito o utilizando. Para isso, ele vai reordenar os dígitos de x para formar um número y e, então, calcular n = x + y. De quantas maneiras é possível obter assim um valor de n que seja um quadrado perfeito? Por exemplo, se x = 29 o Professor pode formar y = 92, de modo que n = 29 + 92 = 121 = 112. Perceba que, quando reordena os dígitos de x, o Professor deve usar todos os dígitos e obter uma expressão correta para o número y, ou seja, não podem haver zeros à esquerda em y. Tambem note que ele pode escolher manter os dígitos de x na mesma ordem e, nesse caso, obter para y o mesmo valor de x."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1429",
        "saida": "Para cada caso de teste, escreva uma única linha contendo a representação decimal do número ACM correspondente.",
        "entrada": "Cada caso de teste é dado por uma única linha não-nula contendo, no máximo, 5 dígitos, representando um número na notação ACM. A linha não possui zeros no início.O último caso de teste é representado por uma linha contendo um único zero.",
        "titulo": "Fatorial de Novo!",
        "descricao": "Mateus, um calouro de engenharia, está desenvolvendo uma nova notação posicional para representar números inteiros. Ele o apelidou de \"A Curious Method\" (\"Um Método Curioso\"), representado pela sigla ACM. A notação ACM usa os mesmos dígitos que a notação decimal, isto é, de 0 a 9. Para converter um número A da notação ACM para a notação decimal, você deve adicionar k termos, onde k é o número de dígitos de A (na notação ACM), O valor do i-ésimo termo, correspondente ao i-ésimo dígito ai, contando da direita para a esquerda, é ai × i!. Por exemplo, 719ACM é equivalente a 5310, já que 7 × 3! + 1 × 2! + 9 × 1! = 53. Mateus acabou de iniciar seus estudos sobre teoria dos números, e provavelmente não sabe quais propriedades um sistema numérico deve ter, mas no momento, ele só está interessado em converter um número de ACM para decimal. Você pode ajudá-lo?"
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1830",
        "saida": "Para cada caso de teste a saída deve ser a mensagem \"Caso #t: A Especial, B Predileta e C Sortida\", onde os inteiros A,B,C são as quantidades de cada tipo de caixa de bombom e t é o número do caso de teste, cuja contagem tem início no número um. Ao final de cada mensagem deverá ser impressa uma quebra de linha.",
        "entrada": "A entrada consiste em vários casos de teste, sendo cada caso representado por uma única linha com os valores de X, Y e Z, (0 ≤ X,Y,Z ≤ 10000), em kilogramas, separados por um espaço em branco e seguidos de uma quebra de linha. Uma linha com três zeros indica o fim da entrada, e não deve ser processada. Os valores de X, Y, Z são números reais com até 3 casas decimais de precisão.",
        "titulo": "Caixas de Bombons",
        "descricao": "Uma fábrica de chocolates produz três tipos de bombons. Os ingredientes básicos necessários para a fabricação de uma unidade de cada tipo estão listados abaixo: Crocante:5 gramas de amendoim, 25 gramas de chocolate branco e 20 gramas de chocolate ao leite;Misto:25 gramas de chocolate branco e 25 gramas de chocolate ao leite;Tradicional:50 gramas de chocolate ao leite. Esta fábrica comercializa três tipos de caixa de bombons, com 30 unidades cada, com os nomes e composições listados a seguir: Especial:30 bombons do tipo Crocante;Predileta:10 bombons do tipo Crocante e 20 bombons do tipo Misto;Sortida:10 bombons de cada um dos três tipos. Sabendo que no mês de abril a fábrica gastou, na fabricação dos bombons dos três tipos descrito, X kg de amendoim, Y kg de chocolate branco e Z kg de chocolate ao leite, quantas caixas, de cada tipo, foram produzidas neste referido mês?"
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1544",
        "saida": "Para cada caso de teste deve ser impresso um único dígito, que é o último dígito diferente de zero de NPM. Por exemplo, se NPM for 720, então o último dígito não zero é 2 e portanto, neste caso a saída deve ser 2.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste é composto por dois inteiros N (0 ≤ N ≤ 20000000), M (0 ≤ N). A entrada é terminada por EOF (final de arquivo).",
        "titulo": "O Último Dígito Não-Zero",
        "descricao": "Neste problema, a você serão dados dois números inteiros decimais N e M. Você terá que encontrar o último dígito não zero de NPM. Isto significará M permutações de N em um determinado momento."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1760",
        "saida": "A saída deve apresentar o valor também em milímetros da área do floco de neve de Kock com duas casas decimais.",
        "entrada": "A entrada possui vários casos de teste e consiste em um número inteiro l (1 ≤ l ≤ 1000) que representa a medida do comprimento de um lado do triângulo equilátero em milímetros. O final da entrada é determinado por EOF.",
        "titulo": "Floco de Neve de Koch",
        "descricao": "A Lapônia é um lugar pacato e muito frio. Não há muita coisa para se fazer por lá depois do Natal (época na qual os elfos trabalham incessantemente na fábrica de brinquedos do Papai Noel). O marasmo fez com que o elfo Tod pesquisasse sobre a única coisa que mais se via na Lapônia: Neve. Em seus estudos, Tod descobriu coisas muito interessantes sobre os flocos de neve. Como fazia buscas incessantes nos sites por informações sobre flocos de neve, acabou encontrando links que falavam sobre uma teoria chamada floco de Neve de Koch. Tod achou a teoria muito interessante porque o floco de neve de Koch é um fractal que se obtém a partir de um triângulo equilátero. A seguir, dividimos cada um de seus lados em três partes iguais e acrescentamos, a partir de cada parte intermediária, um novo triângulo equilátero de lado igual a 1/3 da medida do lado do triângulo inicial. A cada iteração o perímetro do fractal aumenta e após n iterações, o mesmo tende ao infinito mas a área permanece menor que a área do círculo que circunda o triângulo original. Portanto, uma linha infinitamente longa é rodeada por uma área finita. Com base nessas informações e sabendo que a área de um triângulo equilátero é igual a l2 √3 /4 (onde l é a medida do comprimento de um lado do triângulo equilátero) sua tarefa é ajudar Tod a encontrar a área de um floco de neve de Koch com base na medida do comprimento de lado do triângulo equilátero dado."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "2076",
        "saida": "Para cada instância imprima uma linha contendo a soma dos valores que podem ser aplicados no intervalo. Como este valor pode ser muito grande então imprima o resultado módulo 1300031.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância possui três inteiros I, F e N (1 < I < F < 1000000000 e 1 < N < 20) que representam o valor inicial, o valor ﬁnal e o número de elementos da lista de aplicações. A próxima linha contém N inteiros 1 < ai < 1000000000 indicando a lista de aplicações.",
        "titulo": "Alocação Ótima de Commodities",
        "descricao": "Tjalling C. Koopmans ganhou em 1975 o prêmio Nobel de Economia juntamente com o matemático russo Kantorovich pelas suas contribuições em importantes áreas como a alocação ótima de recursos. Koopmans formou-se em Matemática pela Universidade de Utrecht, na Holanda, e se especializou em economia matemática. Durante a segunda guerra mundial esteve envolvido no estudo de alocação ótima de recursos, que 30 anos mais tarde lhe rendeu o prêmio Nobel. É considerado um dos precursores da teoria de programação linear. Suas contribuições têm importantes aplicações em Economia, Matemática, Física e mesmo em Química. Um dos problemas prediletos de Koopmans era o de alocação ótima de commodities. Neste problema, é dado um valor inicial e um valor ﬁnal da aplicação a ser feita. Entretanto, nem todos os valores podem ser aplicados nos vários investimentos. Cada investimento é deﬁnido através de um número inteiro, e, por convenção, apenas quando o valor a ser aplicado for um múltiplo de pelo menos um número que deﬁne um investimento ele pode ser aplicado. Sua tarefa neste problema é calcular o valor máximo que pode ser aplicado. Ou seja, dado o valor inicial e valor ﬁnal a serem aplicados e uma lista de inteiros que deﬁnem as várias aplicações,você deverá calcular a soma dos valores que podem ser aplicados no intervalo."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1554",
        "saida": "Para cada caso de teste deve ser mostrada uma linha contendo apenas o número da bola que está mais próxima da branca. A margem de erro aceitável é de 0,01 mm. Havendo empate, deve-se mostrar aquela de menor número. Sempre finalize uma linha com o caractere nova linha (\\n).",
        "entrada": "Existem vários casos de teste. A primeira linha contém um inteiro C que determina a quantidade de casos de teste que vem a seguir. Para cada caso de teste, a entrada começa com um inteiro N (1 ≤ N ≤ 50), que define o número de bolas disponíveis, além da branca. As próximas N + 1 linhas possuem dois inteiros, x e y, separados por um espaço em branco, indicando a posição (x, y) das bolas no plano da mesa, uma bola por linha (0 < x < 1420 mm e 0 < y < 2840 mm). A primeira linha indica a posição da bola branca. As demais linhas indicam a posição das bolas 1, 2, 3, . . . , N-1, N nesta ordem.",
        "titulo": "Bilhar N+1",
        "descricao": "Existem muitas variantes de jogos de bilhar. A UFFS (União Federal dos Fãs de Sinuca) resolveu desenvolver uma nova variante, denominada N + 1. Essa variante consiste em, numa mesa de bilhar padrão, tacar a bola branca para acertá-la na bola mais próxima dela, dentre as N possíveis. O jogo é vencido pelo jogador que completar mais acertos após 50 jogadas. Como a dificuldade do jogo está em descobrir qual das N bolas é a mais próxima da branca, sua tarefa é escrever um programa que ajude os juízes da partida."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2066",
        "saida": "A única linha da saída deve consistir unicamente do número de números com exatos K dígitos que são bem-revertíveis.",
        "entrada": "A única linha da entrada consiste de um único inteiro positivo K (K ≤ 18).",
        "titulo": "amelborP mU",
        "descricao": "O número reverso de um número natural N é o número que obtemos quando lemos os dígitos de N da direita para a esquerda. Por exemplo, o número reverso de 1234 é 4321 e o número reverso de 150 (um número com 3 dígitos) é 51 (um número com 2 dígitos). Neste problema, dizemos que um número é bem-revertível se é estritamente menor que seu número reverso. Exemplos de números bem-revertíveis são 1234, 15 e 819."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1505",
        "saida": "O programa deve imprimir o mínimo número de dias que tem que esperar o pequeno Curo ate que todos os trabalhadores tenham moedas suficientes para suas férias.",
        "entrada": "A entrada contem 4 linhas, a linha 1 tem o número N (1 < N < 5000), as linhas 2 a 4 contem N números. O i-ésimo número da linha 2 é Gi (0 < Gi < N), o i-ésimo número da linha 3 é Ci (0 < Ci <= 10) e o i-ésimo número da linha 4 é Ai (0 < Ai < 107).",
        "titulo": "Curo Factories",
        "descricao": "Curolandia tem N fábricas, cada uma de elas tem como nome um número do 0 ate n-1. A fábrica i paga Ci moedas por cada dia de trabalho. Inicialmente, cada fábrica tem 1 trabalhador, o trabalhador na fábrica i deseja salvar Ai moedas antes de suas férias. O pequeno Curo é o prefeito do Curolandia e gosta da rotação de trabalho nos trabalhadores. É por isso que se um trabalhador trabalha na fábrica i o seguinte dia ele tem que trabalhar na fábrica Gi. O pequeno Curo deseja saber qual e o mínimo número de dias que tem que esperar ate que todos os trabalhadores tenham moedas suficientes para suas férias. Esse dia o pequeno curo vai dar uma festa grande para eles."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "2034",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um numero inteiro, representando o número de cantingers (com respeito a B e C) que são maiores ou iguais a D e menores ou iguais a H.",
        "entrada": "Cada caso de teste é descrito usando uma linha. A linha contém três inteiros D, H e B, e uma string L. Os valores de D e H indicam os pontos finais do intervalo fechado [D,H] que estamos interessados (1 ≤ D ≤ H ≤ 1016). O valor de B é a base mencionada no problema (2 ≤ B ≤ 10). A string L = L0 L1 ... LB-1 tem exatamente B caracteres, e descreve o conjunto C também mencionado no problema. O caractere Li é a letra \"S\" maiúscula quando i ∈ C, e a letra \"N\" maiúscula caso contrário (i = 0, 1, ... , B-1). O conjunto C não está vazio, isto é, existe pelo menos um caractere ‘s’ em L. O fim da entrada é indicado por uma linha contendo três vezes o numero -1 e um caractere ‘*’.",
        "titulo": "Cantor",
        "descricao": "O matemático Georg Cantor foi um amante de conjuntos e infinito, mas não se dava tão bem com os colegas. Uma manhã ele acordou com a ideia de definir um conjunto tao estranho que, quando lançado, faria o resto dos matemáticos perderem o sono por alguns dias. E ele fez. O conjunto foi definido como o conjunto Cantor, e é formado por todos os números reais no intervalo [0,1] nos quais a expressão decimal na base 3 usa exclusivamente os dígitos 0 e 2. Esse conjunto tem propriedades interessantes, que não serão mencionadas aqui assim você pode dormir hoje. Além disso, e felizmente pra todos envolvidos, nesse problema não iremos trabalhar com o conjunto Cantor, mas uma generalização desse conjunto para números inteiros. Iremos dizer que um número inteiro é do tipo Cantor, ou para abreviar cantinger, se sua expressão em uma dada base B usa apenas os dígitos de um conjunto C dado {0,1,...,B-1}. Assim, o fato de um dado número ser um cantinger ou não depende de como escolhemos B e C. O objetivo é contar os números cantinger, para prevenir que os matemáticos de todo o mundo percam seu sono. Mais precisamente, dados dois inteiros D e H, juntamente com B e C, você deve contar o número de cantingers com respeito a B e C de D a H inclusive."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1968",
        "saida": "Imprima uma linha contendo unicamente um valor que represente o número de possibilidades para a formação dos grupos. Como esse número pode ser muito grande, imprima apenas o resto que ele deixa quando dividido por 109 + 7.",
        "entrada": "A única linha da entrada consiste unicamente dos inteiros positivos A, B e N (A ≤ B; B, N ≤ 107).",
        "titulo": "A Terra Desconhecida",
        "descricao": "No último dia 12 de outubro comemoramos no Brasil o Dia das Crianças. Quem dera nós adultos vivêssemos mais no mundo das crianças, pois o inverso não tem dado certo, não mesmo. Nós adultos dividimos o mundo em nações, e são as crianças que mais sofrem com as guerras. Nós adultos criamos um sistema de distribuição de riqueza, e são as crianças que mais sofrem com a fome. Mas há uma Terra Desconhecida, não muito distante daqueles que ainda conservam um pouco da sua imaginação, que pertence às crianças. Lá não há guerra, não há pobreza, não há fome. Lá as crianças brincam dia e noite. Mas uma catástrofe está ocorrendo com a Terra Desconhecida. Uma catástrofe! Os carneiros que habitavam a Terra Desconhecida acabaram ficando velhos, ou doentes, ou engolidos por jiboias. Com isso, os baobás começaram a crescer e tomaram conta da Terra Desconhecida. Agora, os cidadãos precisam se mudar urgentemente. Para auxiliar na evacuação, todos os cidadãos foram numerados de A a B (é óbvio que essa ideia foi dos adultos — eles adoram essas coisas!). Para definir quem seriam os líderes dos grupos durante a evacuação, alguém sugeriu que os líderes deveriam ser todos aqueles que houvessem recebido um número primo (é óbvio que essa ideia foi de uma criança — crianças têm muita imaginação e adoram se deleitar com coisas que dispensam maiores explicações!). Mas logo outra ideia surgiu: — Um número primo é um número que possui exatamente 2 divisores. E se os líderes fossem aqueles que receberam um número com exatamente N divisores? Todas as crianças adoraram a ideia. Já os adultos ficaram um longo tempo debatendo sobre como o número N deveria ser escolhido. Quando finalmente o número N foi escolhido, cada cidadão que não fosse líder de um grupo deveria escolher o grupo que quisesse para nele entrar. Nenhuma outra restrição foi imposta aos grupos. Nada impedia, por exemplo, que um grupo consistisse apenas do seu líder. Note que, dependendo do valor de N, nem haveria grupo algum. Sabendo dos valores de A, B e N, solte a criança dentro de você e tente descobrir o número total de possibilidades para a formação dos grupos. Se, por exemplo, A = 5, B = 8 e N = 4, situação em que os líderes são os cidadãos 6 e 8, há 4 possibilidades: ambos os cidadãos 5 e 7 escolhem entrar para o grupo liderado pelo cidadão 6; ambos os cidadãos 5 e 7 escolhem entrar para o grupo liderado pelo cidadão 8; o cidadão 5 escolhe entrar para o grupo liderado pelo cidadão 6 e o cidadão 7 escolhe entrar para o grupo liderado pelo cidadão 8; o cidadão 5 escolhe entrar para o grupo liderado pelo cidadão 8 e o cidadão 7 escolhe entrar para o grupo liderado pelo cidadão 6."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1481",
        "saida": "Para cada caso de teste da entrada, seu programa deve produzir uma linha de saída, contendo um inteiro que representa a área total (em m2) da terra que não será inundada.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um número inteiro N, indicando o número de tiras de vedação na ilha (1 ≤ N ≤ 2000). Cada uma das próximas N linhas contém cinco números inteiros X1, Y1, X2, Y2 e H, o que representa, respectivamente, o ponto de início (X1, Y1), o ponto final (X2, Y2) e a altura da tira (H). A última linha de um caso de teste contém um inteiro W que representa a altura da maré. As coordenadas são dadas em metros e a altura, em centímetros. Além disso, X1 = X2 ou Y1 = Y2 (mas não ambos); -500 ≤ X1, Y1, X2, Y2 ≤ 500 e 1 ≤ W, H ≤ 1000. A extremidade de entrada é indicado por N = 0.",
        "titulo": "A Fazenda de Ostras de Zing Zhu",
        "descricao": "Zing Zhu possui uma ilha que é um pedaço de terra plana. Todos os dias, quando a maré sobe, a ilha é inundada pela água do mar. Depois de muito pensar e pedir o conselho de membros de sua família, Zing Zhu decidiu criar uma fazenda de ostras na ilha. Zing Zhu usa um sofisticado sistema de cercas de plástico modulares à prova d'água para controlar as áreas que serão inundadas e as áreas que não serão inundadas durante a subida da maré. As cercas usadas por Zing Zhu são horizontais ou verticais e vêm em tiras, que têm diferentes comprimentos e alturas. Duas cercas podem se cruzar em no máximo um ponto, não necessariamente em suas extremidades. ​ Imagem 1 (esquerda):. Mapa de tiras de cerca instalados na fazenda, mostrando as alturas das tiras de cerca, em centímetros. Imagem 2 (direita): áreas não inundadas (mostradas em branco), se a maré sobe 110 centímetros. Você foi contactado por Zing Zhu para calcular, dada a altura que maré atingirá e a posição e altura de todas as tiras de cerca, a área total de terra que não será inundada durante a maré alta. Pode-se presumir que a largura das tiras de vedação são tão finas em comparação ao tamanho do terreno que, para efeitos de cálculo da área total, as tiras de vedação podem ser considerados como tendo larguras iguais a zero."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1812",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador Instance h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte deve ser impresso Viable ou Not Viable, dependendo do escalonamento para a instância ser ou não viável, respectivamente. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "Seu escalonador deve estar preparado para trabalhar com diversas instâncias de entrada. Cada instancia segue o formato que segue. Na primeira linha, são fornecidos os números de máquinas, 0 ≤ m ≤ 100, e de tarefas, 0 ≤ n ≤ 1000, respectivamente. Nas próximas n linhas são fornecidos os valores pt ≥ 0,rt ≥ 0 e dt ≥ 0 (uma tripla por linha) para as tarefas t ∈ T. Os instantes rt e dt são inteiros, e pt é decimal. Valores m = 0 e n = 0 indicam o término do processamento das instâncias e não devem ser processados. Todos os valores da entrada que constem em uma mesma linha são separados por um número qualquer de espaços em branco.",
        "titulo": "Um Cluster Para Evitar Enchentes",
        "descricao": "A Academia de Ciências da República Tcheca, preocupada com as inundações ocorridas durante os últimos verões em Praga, está fomentando o desenvolvimento de um novo cluster computacional para, entre outras tarefas, promover uma previsão do tempo mais acurada. Este novo cluster é composto por m máquinas iguais operando em paralelo. Por razões orçamentárias, cada máquina pode processar uma única tarefa por vez, e cada tarefa não pode ser processada em mais de uma máquina simultaneamente. O cluster permite, no entanto, preempção. Ou seja, é possível interromper a execução de uma tarefa e retorná-la posteriormente, em outra máquina inclusive. Por estar em Praga para a realização de um evento relativo à Ciência da Computação, você foi convidado a desenvolver uma versão preliminar do escalonador de tarefas do cluster. Nesta versão, é fornecido um conjunto de tarefas T, em que cada tarefa t ∈ T possui: Um requisito de processamento pt que denota o número de unidades de tempo necessárias para realizar tal tarefa; Um instante de liberação rt , que representa a unidade de tempo a partir da qual a tarefa está disponível para processamento (ela poderia estar aguardando dados, por exemplo); E um valor dt ≥ pt + rt que indica o primeiro instante, em unidades de tempo, em que a tarefa deve, impreterivelmente, ter sido completada. Isto é, a tarefa t deve ser realizada no intervalo [rt, dt). Seu escalonador deve receber estes dados, de acordo com o formato descrito abaixo e dizer se existe ou não um escalonamento viável, isto é, um escalonamento que complete todas as tarefas nos intervalos de tempo permitidos."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1492",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro que representa o número total de dígitos 1 na representação binária de todos os inteiros de A to B, inclusive.",
        "entrada": "A entrada é composta por diversos casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com dois inteiros A e B (1 ≤ A ≤ B ≤ 1016).",
        "titulo": "Contando Uns",
        "descricao": "Carl é agora a criança mais feliz do mundo: ele aprendeu esta manhã o que é o sistema binário. Ele aprendeu, por exemplo, que a representação binária de um inteiro positivo k é  uma string anan−1 · · · a1a0 onde cada ai é um dígito binário 0 ou 1, iniciando com an = 1, e de tal forma que k = Σni=0 ai × 2i. É realmente bom ver ele transformando números decimais em binários, e depois somá-los e multiplicá-los. César é o irmão mais velho de Cal, e ele não suporta ver o seu irmão menor tão feliz. Por isso ele preparou um desafio: \"Olhe Carl, eu tenho uma pergunta fácil para você: eu te darei dois inteiros A e B, e você tem que me dize quantos dígitos 1 existem na representação binária de todos os inteiros de A à B, inclusive. Se prepare!\". Carl aceitou o desafio. Após alguns minutos, ele voltou com uma lista com a representação binária de todos os inteiros de 1 a 100. \"César, eu estou pronto\". César sorriu e disse: \"Bom, deixe-me ver, eu escolho A = 1015 e B = 1016. A sua lista não será útil\".  Carl odeia perder para o seu irmão então ele precisa de uma solução mais rápida. Você pode ajudá-lo?"
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1197",
        "saida": "Para cada linha de entrada imprima um único inteiro que denota o deslocamento no dobro do tempo fornecido.",
        "entrada": "A entrada contém vários casos de teste. Cada linha da entrada é um caso de teste e contém dois inteiros v (-100 ≤ v ≤ 100) e t (0 ≤ t ≤ 200) ( t significa o momento no qual a partícula ganha aquela velocidade). O final da entrada é determinado por EOF.",
        "titulo": "Volta à Faculdade de Física",
        "descricao": "Uma partícula tem velocidade inicial e aceleração constante. Se a sua velocidade após certo momento é v então qual será seu deslocamento no dobro deste tempo?"
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1433",
        "saida": "Para cada instância do problema você deve imprimir uma única linha, contendo o número mínimo de grupos que satisfazem os 3 requerimentos acima. A saída deve ser escrita pela saída padrão.",
        "entrada": "Seu programa deve processar vários casos de teste. A primeira linha de um caso de teste contém um inteiro K e um racional R. K representa o número de idades diferentes do clube (1 ≤ K ≤ 120), e R representa o fator divisor especificado pelo diretor do clube (1.0 ≤ R ≤ 2.0). As próximas K linhas descrevem os membros do grupo, cada linha contém 2 inteiros N e M, indicando que existem N membros que tem M anos no clube (1 ≤ N ≤ 10000 e 1 ≤ M ≤ 120). O fim da entrada é indicado por uma linha com K = 0 e R = 0.0. Os valores de entrada serão tais que um erro eventual na representação binária interna de R não afetará o resultado. A entrada deve ser lida da entrada padrão.",
        "titulo": "O Clube da Divisão",
        "descricao": "O clube ACM (All Can Meet) foi criado com o propósito de atrair pessoas de todas as idades, com a ideia de que todas as pessoas poderiam sentar e compartilhar experiências de vida, para o benefício de todos. Mas como aconteceu, o clube tornou-se um sucesso tão grande que tornou-se praticamente impossível reunir todos os membros no mesmo local ao mesmo tempo. O clube decidiu então dividir seus membros em \"seções\" menores. Em função de manter uma boa divisão, o diretor so clube decidiu impor os seguintes requerimentos: A. todos os membros da mesma idade devem estar na mesma seção, B. todos os membros devem fazer parte de exatamente uma seção, C. em cada seção, o número máximo de pessoas com a mesma idade não podem ser mais que R vezes o número mínimo de pessoas da mesma idade, onde R é um número racional entre 1.0 e 2.0. O número R é chamado de o fator divisor do clube. A última condição garante que não há um grupo menor de jovens que talvez sintam-se inconfortáveis na seção. Por exemplo, denotados por [N,M] um grupo com N menbros que tem M anos. Então a seção {[10,50],[6,45],[70,12],[43,23]} o número máximo de pessoas com a mesma idade é 70, o número mínimo de pessoas com a mesma idade é 6. Se R = 2.0, então dizemos que esta seção não satisfaz os requerimentos (C) desde que 70/6 ≤ 2.0. No entanto podemos dividir esta seção em duas menores seções, nominando {[10,50],[6,45]} e {[70,12],[43,23]}, no qual satisfazem os requerimentos. Dado o fator divisor R e uma lista de membros do clube, você deve escrever um programa para achar o número de seções que satisfazem os três requerimentos acima."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1829",
        "saida": "A primeira linha da saída consiste na mensagem \"Campeao: C!\", onde C é o nome do participante que venceu o maior número de rodadas, ou a mensagem \"A competicao terminou empatada!\", se for o caso. Após esta mensagem inicial, deve ser impressa, para cada rodada disputada, a mensagem \"Rodada #r: V foi o vencedor\", onde r é o número da rodada (cuja contagem se inicia no número um) e V é o nome do participante que venceu a rodada de número r. Ao final de cada mensagem da saída deve ser impressa uma quebra de linha.",
        "entrada": "A primeira linha da entrada contém o número inteiro positivo N (N ≤ 1.000), que representa o número de rodadas disputadas. Cada rodada é representada por duas linhas: a primeira contém a exponencial dita por Lucas, na forma a^b (2 ≤ a, b ≤ 10.000), e a segunda contém o fatorial escolhido por Pedro, na forma n! (2 ≤ n ≤ 10.000). Os números a, b, n são inteiros e a expressão a^b significa \"a elevado à b-ésima potência\".",
        "titulo": "Jogo do Maior Número",
        "descricao": "Lucas e Pedro são alunos do ensino médio que ficaram impressionados após uma aula de matemática, na qual foi apresentado o fatorial de um número natural n, isto é, com 0! = 1. Ficaram com uma dúvida, porém: qual operação produz os maiores resultados, o fatorial ou a exponenciação? Com esta dúvida em mente, propuseram o Jogo do Maior Número: os dois participantes teriam que dizer, ao mesmo tempo e o mais rápido possível, o maior número que viesse a cabeça, sendo o vencedor aquele que dissesse o maior dentre os dois números. Escolheram Beto como juiz, que foi tomando notas dos números que os dois não cessavam de falar. Lucas citava sempre exponenciais, enquanto Pedro se concentrava nos fatoriais. Ao fim da brincadeira, um porém: nem os participantes, tampouco o juiz, tinha a menor ideia de quem havia sido o vencedor. Escreva, portanto, um programa que os auxilie a decidir quem foi o vencedor de cada rodada da brincadeira, e quem se sagrou campeão (maior número de vitórias, consideradas todas as rodadas)."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1393",
        "saida": "Para cada teste, imprimir uma linha contendo um único número inteiro, o número de diferentes sequências de passo.",
        "entrada": "A entrada contém vários casos de teste. Cada teste é composto por uma linha contendo um número inteiro N (1 ≤ N ≤ 40), o número de peças no caminho. O último caso de teste é seguido por uma linha contendo um único zero.",
        "titulo": "Lajotas Hexagonais",
        "descricao": "O caminho para a escola de Maria é uma linha reta pavimentada com lajotas hexagonais. A imagem abaixo mostra um exemplo do caminho com 12 peças numeradas. ​ Maria adora matemática. Ao ir para a escola, ela pisa sobre as lajotas do caminho de acordo com as seguintes regras: Ela sempre começa a partir da lajota com o rosto sorridente (é sempre bom começar com um sorriso!). Esta lajota está sempre presente no inicio do caminho. As outras peças são numeradas consecutivamente, de modo ascendente, a partir de 1, como mostrado na figura. Não é permitido voltar, isto é, ela não deve pisar em uma telha que tenha um número menor do que a telha que ela está pisando (quando ela decide ir para a escola, ela vai mesmo!). Ela sempre dá passos de uma lajota para outra vizinha (não há saltos, de modo a manter-se fora de perigo!). Ela deve sempre terminar na mais alta lajota contada. Quando as aulas terminam, ela está tão cansada que evita o caminho e caminha no gramado. Maria não quer repetir qualquer seqüência de passos nas lajotas e ela gostaria de saber, se o caminho está pavimentado com N lajotas numeradas e uma lajota com um sorriso, quantos dias vai demorar para percorrer cada sequência possível uma só vez. Por exemplo, cinco dias serão necessários para que ela tente todas as possíveis sequências de passos se o caminho tem N = 4 lajotas, um dia, para cada uma das sequências: 1-2-3-4, 1-2-4, 1-3-4, 2-3-4 e 2-4. Escreva um programa para determinar quantas sequências diferentes de passos há em um caminho com um determinado número N de lajotas."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1488",
        "saida": "Para cada valor da entrada, seu programa deve imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, separados por um espaço em branco, os cinco números que comprovam a condição de quadripartido, quando n for quadripartido. Siga a ordem: m p1 p2 p3 p4. Se n não for quadripartido, seu programa deve imprimir a mensagem n nao e quadripartido. No primeiro caso, é possível que exista mais de uma sequencia que atenda às condições estabelecidas. Se isto ocorrer, seu programa deverá escolher a que apresentar o maior valor possível para m. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "Cada linha da entrada contém um inteiro n (0 ≤ n ≤ 500000) que seu programa deverá analisar e classificar em quadripartido ou não. O valor n = 0 corresponde ao final do arquivo de entrada e não deve ser processado.",
        "titulo": "Números Mágicos?",
        "descricao": "\"Os números sempre desempenharam um papel de acentuado relevo não só nos altos campos da Fé e da Verdade, como no humílimos terreiros da Superstição e do Erro.\" (Prof. Marão) Malba Tahan, em seu clássico \"O Homem Que Calculava\", conta uma fábula de superstição envolvendo os números quadripartidos. Mal sabia ele que séculos antes, na antiga civilização Tcheca, a superstição envolvendo os números quadripartidos já se fazia presente. Na antiguidade, uma importante comunidade que vivia nos arredores de Neratovice, utilizava as propriedades dos números quadripartidos para prever o futuro, batizar as crianças e até mesmo para escolher os seus líderes. Um número inteiro n é quadripartido se existe alguma divisão desse número em quatro parcelas inteiras (p1 + p2 + p3 + p4 = n) e um operador mágico (m) de modo que a primeira parcela somada ao operador mágico, a segunda diminuída dele, a terceira multiplicada por ele e a quarta dividida por ele deem o mesmo resultado (p1 + m = p2 − m = p3 * m = p4 / m). Assim, 128 é quadripartido, porque podemos dividir 128 em 4 parcelas (31, 33, 32 e 32) de modo que existe um operador mágico (no caso, 1) que faz com que p1 + m, p2 − m, p3 * m e p4 / m sejam iguais. De fato: 31 + 1 = 33 − 1 = 32 * 1 = 32 / 1 = 32. Um grupo de pesquisadores de Praga está reconstruindo o passado de Neratovice, e pediu a sua ajuda. Eles querem que você faça um programa que identifique quando um número é ou não quadripartido e qual é o seu operador mágico associado."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1392",
        "saida": "Para cada caso de teste ser programa deve imprimir uma única linha contendo um inteiro, representando o quanto você deve pagar.",
        "entrada": "A entrada contém vários casos de teste. Cada teste é composto de uma única linha, contendo dois inteiros A e B, separados por um único espaço, representando os números mostrados a você pela companhia (1 ≤ A, B ≤ 109). Você deve assumir que haja sempre uma única solução, ou seja, existe exatamente um par de números de consumo que produzem tais números. O último caso de teste é seguido de uma linha contendo dois zeros separados por um único espaço.",
        "titulo": "Conta de Luz",
        "descricao": "O ano é 2100. A eletricidade se tornou muito cara. Recentemente, sua companhia elétrica elevou as taxas de energia mais uma vez. A tabela abaixo mostra as novas taxas (o consumo é sempre um inteiro positivo): Isso significa que, calculando a quantidade a pagar, os primeiros 100 LWh (Crazy-Watt-hora) tem o preço de 2 Americus cada; os próximos 9900 LWs (entre 101 e 10000) tem um preço de 3 Americus cada e assim por diante. Por exemplo, se você consome 10123 LWs você terá que pagar 2×100+3×9900+5×123 = 30515 Americus. Os matemáticos do mal da companhia armaram um jeito de ganhar ainda mais dinheiro. Ao invés de informarem quanta energia você consumiu e quanto deve pagar, eles mostram os números relativos a você e um vizinho aleatório: A: o total a pagar se as contas fossem somadas; e B: o valor absoluto entre as contas. Se você não consegue descobrir quanto você tem que pagar, você deve pagar mais 100 Americus pelo \"serviço\". Você é bastante econômico, portanto não tem como ter consumido mais que seus vizinhos. Então, sendo esperto, você sabe que tem como computar quanto você tem que pagar. Por exemplo, suponha que a companhia informou-o os seguintes números: A = 1100 e B = 300. Então o seu consumo e do seu vizinho tem que ser 150 LWh e 250 LWh respectivamente. O consumo total é 400 LWh então A é 2×100+3×300 = 1100. Você deve pagar 2×100+3×50 = 350 Americus, enquanto seu vizinho deve pagar 2×100+3×150 = 650 Americus, então B é |350 - 650| = 300. Decidido a não pagar o custo adicional, você resolveu escrever um programa de computador para encontrar quanto você deve pagar."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1635",
        "saida": "Para cada palpite, some o percentual adquirido por cada partido e compare com o inteiro especificado n. Então, imprima uma linha informando se o palpite estava correto. Consulte o exemplo para mais detalhes.",
        "entrada": "As informações providas por Bill e Ted têm o seguinte formato: a primeira linha consiste em um número p de partidos seguido por um número a de adivinhações  (com 1 ≤ p ≤ 50 e 1 ≤ a ≤ 10000). Tem-se na sequência p linhas, cada linha contedo o nome de um partido (estes somente podem ser escritos com letras de a-z, A-Z, dígitos de 0-9 e tamanho ≤ 20) e o percentual adquirido por este partido (com um ponto após a casa decimal). Depois dos partidos, seguem-se a linhas, cada uma contendo um palpite. Um palptite, ou adivinhação, tem forma A1 + A2 + ... + Ak COMP n, onde A1 até Ak são nomes de partidos, COMP é um dos operadores de comparação, , = ou =; e n é um inteiro entre 0 e 100, inclusos.  Cada partido somente pode ser citado uma vez em cada palpite. Obs: Cuidado com a comparação entre valores de ponto flutuante, porque alguns valores na entrada (como 0,1) não têm uma representação exata de um número de ponto flutuante.",
        "titulo": "Resultado das Eleições",
        "descricao": "Antes das eleições no ano de 2009 para o Parlamento Europeu, Bill e Ted pediram a seus amigos que opinassem acerca do resultado das eleições. Agora que os resultados foram divulgados, Bill e Ted querem averiguar quem palpitou de maneira correta. Se eles, entretanto, fossem verificar os palpites de cada um de seus amigos - que são muitos - um por um, levariam muito tempo, precisam, portanto, que esta verficação seja feita por um computador. Uma vez que eles não são muito bons em programação, eles precisam de sua ajuda."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1353",
        "saida": "Para cada caso de teste imprima o número de possibilidades, modulo (%) 1.000.000.009.",
        "entrada": "Terá no máximo vinte casos de teste, cada um com dois inteiros, N e K(1 ≤ N ≤ 109, 1 ≤ K ≤ 10). A entrada é terminada por N = K = 0.",
        "titulo": "Super Poker",
        "descricao": "Eu tenho um conjunto de cartas Super Poker, que consistem em um número infinito de cartas. Para cada valor positivo inteiro I, existem exatamente quatro cartas que o valor é I: Espadas(E), Copas(C), Paus(P) e Ouros(O). Não existem cartas de outros valores. Dados dois valores inteiros positivos N e K, de quantos jeitos você pode conseguir o máximo de cartas K cujo valor somam-se a N? Por exemplo, de N = 15 e K = 3, um jeito é 3C + 4E + 8C, mostrado abaixo:"
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1198",
        "saida": "Para cada linha de entrada imprima a diferença entre o número de soldados de Hashmat e do seu oponente. Cada saída deve ser impressa em uma linha separada.",
        "entrada": "A entrada contém dois números inteiros em cada linha. Estes dois números denotam respectivamente a quantidade de soldados do exército de Hashmat e do seu oponente.  Nenhum número de entrada é maior do que  232. A entrada termina com fim de arquivo (EOF).",
        "titulo": "O Bravo Guerreiro Hashmat",
        "descricao": "Hashmat é um guerreiro cujo seu grupo de soldados se move de um local a outro para lutar contra os seus oponentes. Antes da luta ele apenas calcula uma coisa. A diferença entre a quantidade de soldados que possui e a quantidade de soldados oponentes. A partir desta diferença ele decide se vai ou não lutar. Às vezes Hashmat tem mais soldados do que o seu oponente, mas na maioria das vezes não."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1308",
        "saida": "Para cada caso de teste, o resultado deve conter um único número inteiro que indica o número de linhas que podem ser formadas.",
        "entrada": "A primeira linha da entrada contém um inteiro que indica o número de casos de teste. Cada caso de teste contém um único inteiro N (0 ≤ N ≤ 1018), indicando o número de guerreiros etruscos.",
        "titulo": "Guerreiros Etruscos Nunca Jogam Xadrez",
        "descricao": "Uma tropa de guerreiros etruscos está organizada da seguinte forma. Na primeira linha, há apenas um guerreiro; a segunda fila contém dois guerreiros; a terceira fila contém três guerreiros, e assim por diante. Em geral, cada linha i contém i guerreiros. Nós sabemos o número de guerreiros etruscos de uma tropa dada. Você tem que calcular o número de linhas em que eles estão organizados. Favor notar que podem haver guerreiros restantes (isso pode acontecer se eles não são suficientes para formar a próxima linha). Por exemplo, três guerreiros estão organizados em duas linhas. Com seis guerreiros você pode formar três linhas, mas você também pode formar três linhas com 7, 8 ou 9 guerreiros."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "2204",
        "saida": "Seu programa deve imprimir, para cada caso de teste, um único número, que representa a resposta para o problema descrito.",
        "entrada": "A entrada começa com um inteiro T que represta o número de casos de testes. Seguem T linhas, cada uma contendo dois inteiros A e B ( 1 <= A <= B <= 10¹°°), já descritos no problema.",
        "titulo": "Pare A Bomba!",
        "descricao": "Com a chegada dos jogos, assim como em todo grande evento, as forças de segurança pública realizam uma série de treinos e simulações com o objetivo de estarem prontos para o pior. Seu amigo David, que não se sente muito realizado no curso de Ciência da Computação - devido ao fato de não ser muito hábil com programação, sonha em se juntar á uma dessas entidades de segurança publica. Enquanto estudava sobre tais exames e simulações, David encontrou o seguinte problema: \"Numa dada simulação, o time de defesa tática deve encontrar e desarmar um alarme - que simula uma bomba - que contém dois inteiros A e B. Para desarmar a bomba, o time deve escrever o maior divisor comum de todos os inteiros de A até B\". Ninguém sabe o por que simulariam uma bomba com tais condições, mas David está curioso para saber qual seria a resposta certa, dependendo dos números que constassem no visor. Como ele não é tão bom como programação ( ou matemática ), ele pediu sua ajuda para encontrar a resposta do seguinte problema : \"Dado dois inteiros A e B, imprima o maior divisor comum de todos os inteiros [A, A+1, A+2, ...., B]\"."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1567",
        "saida": "Para cada linha de entrada, deve ser gerada um saída com seis inteiros S2, R2, S3, R3, S4, R4 em uma única linha, onde S2 indica o número de quadrados contidos na grade bidimensional (NxN), R2 indica o número de retângulos contidos na grade bidimensional (NxN). S3, R3, S4, R4 tem o mesmo significado porém em dimensões superiores, como descrito antes.",
        "entrada": "A entrada contém um número inteiro N (0 ≤ N ≤ 100) em cada linha, que é o comprimento de um lado da grade ou cubo ou hipercubo. Tal como para o exemplo acima, o valor de N é 4. Pode haver mais de 100 linhas de entrada.",
        "titulo": "(2/3/4)-D Sqr/Rects/Cubes/Boxes?",
        "descricao": "Veja a grade (4x4) abaixo. Você consegue dizer quantos quadrados e retângulos ela contém? Você pode assumir que quadrados não são retângulos. Talvez seja possível contar a mão, mas você conseguiria fazer isso para uma grade (100x100) ou para uma grade (10000x10000)? E para dimensões maiores? Isto é, você poderia contar quantos cubos ou caixas de tamanhos diferentes há em uma cubo de dimensões (10x10x10) ou quantos hipercubos ou hipercaixas de tamanhos diferentes existem em um hipercubo de 4 dimensões de tamanho (5x5x5x5x5)? Lembre-se que o seu programa precisa ser muito eficiente. Você pode assumir que quadrados não são retângulos, cubos não são caixas e hipercubos não são hipercaixas."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2044",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um número inteiro, o que representa o número de vezes que Inês vai ter de ir à casa de Ignácio para pedir seu dinheiro.",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém um número inteiro N, indicando o número de museus de ciência em Noglônia (1 ≤ N ≤ 100). A segunda linha contém N inteiros Pi representando os preços dos ingressos para os diferentes museus, na ordem em que eles vão ser visitados (1 ≤ Pi ≤ 100 para i = 1, ..., N). O final da entrada é indicado por -1.",
        "titulo": "Em Dívida",
        "descricao": "Ignácio e Inês realmente gostam de ciência. Eles vivem em Noglônia, onde todos sabem que há N museus de ciência. Ignácio e Inês têm N sábados livres, então eles concordaram em uma programação para visitar um museu de ciência diferente em cada um desses dias. Ignácio é muito mesquinho, então todo sábado ele irá dizer a Inês que se esqueceu de trazer o dinheiro para pagar a entrada do museu, e pedi-la para pagar por ele. Inês sempre faz isso, e por conhecê-lo bem, sabe que também que ele nunca irá pagá-la se ela não pedir seu dinheiro de volta. Na verdade, Inês sabe que mesmo que ela peça Ignácio seu dinheiro de volta, ele só aceitará pagar se a dívida acumulada é um múltiplo de 100, porque senão ele vai argumentar que não tem nenhuma dívida a pagar exatamente, e então não pagará nada. Sendo essa situação, todos os domingos, se a dívida acumulada é um múltiplo de 100 Inês vai até a casa de Ignácio para reivindicar o seu dinheiro, e porque ele não vai ter nenhuma desculpa irá pagar, sem qualquer tipo de desculpa. É claro que Ignácio não gosta disso, mas é consolado pela ideia de que, se a dívida acumulada depois de visitar os N museus não é um múltiplo de 100, Inês não deve cobrar a última parte de seu dinheiro. Inês gostaria de saber quantas vezes ela vai ter que ir para a casa de Ignácio para pedir seu dinheiro. Para o cálculo, ela pode fornecer uma lista de preços dos ingressos para os N museus de ciência em Noglônia, na ordem em que ela e Ignácio vão visitá-los."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "2068",
        "saida": "A saída deve ser a probabilidade de haver o encontro no formato a/b, tal que a/b é uma fração irredutível.",
        "entrada": "Cada caso de teste consiste de uma única linha contendo: t1, t2, N. t1 e t2 são inteiros representando o tempo em horas tal que t2 > t1 e 1 ≤ t1, t2 ≤ 10⁶, N também é um inteiro e representa o tempo máximo que Mel ou Tob irão esperar em minutos tal que 1 ≤ N ≤ (t2-t1) * 60.",
        "titulo": "Marcando um Encontro",
        "descricao": "Um aplicativo bastante popular hoje em dia é o Taynder. A proposta do aplicativo é conhecer pessoas, se relacionar e marcar encontros. Foi no Taynder que Mel e Tob se conheceram. Como Mel e Tob já conversaram por 40 minutos, eles acham que é hora de se conhecerem pessoalmente então marcaram de se encontrar na principal praça da cidade. O único problema é que a hora do encontro não ficou muito bem definida, tudo que eles sabem é o intervalo de tempo marcado para o encontro, mas não sabem de que horas o outro vai chegar. Para não passar o dia esperando a pessoa que chegar primeiro espera um pouco e se a outra pessoa não chegar ela vai para casa achar outra pessoa no Taynder. Por exemplo: se Mel e Tob marcam de se encontrar no intervalo real [16h, 17h] com espera máxima de 15 minutos significa que Mel e Tob podem chegar em qualquer momento do intervalo (incluindo 16h e 17h) e quem chegar primeiro, digamos no tempo x, ficará esperando o outro no intervalo de tempo definido por [x, x+15]. Você deve escrever um programa que, dado o intervalo de tempo do encontro e dado o tempo de espera máximo, determine a probabilidade de haver o encontro."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "2148",
        "saida": "Para cada caso de teste, imprima uma linha, contendo um valor, de dupla precisão, com 15 casas decimais, informando a probabilidade de acertar o palpite da rodada correspondente.",
        "entrada": "O primeiro valor a ser lido é um inteiro C, indicando o número de casos de teste. Cada caso de teste inicia com dois inteiros S e D (1 ≤ S ≤ 80, 1 ≤ D ≤ 13), indicando a soma do palpite e a quantidade de dados.",
        "titulo": "Banco de Dados",
        "descricao": "Todo domingo, um grupo de amigos se reunia em um banco da praça para conversar. Além disso, jogavam algo chamado “dadinho”, que em outras regiões, é chamado de “zezinho”. Cada jogador começava com um dado e um palpite, arremessava o mesmo sobre o banco, e se acertasse o resultado, pegaria mais um dado. A cada rodada, o processo se repetia, com o palpite do resultado da soma dos dados jogados sobre o banco. Quem acertasse, pegaria outro dado. O jogo termina quando um jogador acerta um palpite após ter 13 dados na mão. Considere que todos os dados usados no jogo são honestos e possuem seis faces, numeradas de 1 a 6. Mas a medida que aumentava a quantidade de dados, ficava mais difícil acertar o palpite. Desse modo, pediram a você que faça um programa o qual, dado um palpite de soma, e uma quantidade de dados, calcule a probabilidade de acertar tal palpite. Escreva um programa que, - dado um número inteiro, representando o palpite de soma, e outro número inteiro, sendo a quantidade de dados a serem jogados -, calcule a probabilidade de acerto do palpite."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1688",
        "saida": "Para cada caso de teste, a saída consiste em Q linhas contendo o vencedor do jogo (considerando que ambos jogam de forma ótima) para cada uma das Q operações sugeridas pelo conselheiro.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. A primeira linha do teste consiste de dois inteiros N (N <= 1018) e Q (Q <= 105), o número escolhido por Jabba e a quantidade de operações na lista do conselheiro respectivamente. As Q próximas linhas consistirão de 3 inteiros A, B (1 <= A <= B <= N) e K (-A <= K <= 1018) descrevendo as operações escolhidas pelo conselheiro.",
        "titulo": "Nim Intergalático",
        "descricao": "Durante sua última visita ao planeta Tatooine, Han Solo foi capturado por mercenários de Jabba, the Hutt e levado ao seu palácio. Jabba, sabendo que Solo não tem dinheiro para pagar sua dívida propôs um acordo. Ambos iriam disputar uma partida de Nim Intergalático e, se Han vencesse sua dívida estaria paga, caso contrário, sua dívida seria duplicada. O Nim Intergalático é uma variação do conhecido jogo de Nim, onde pedras são arrumadas em colunas e em cada rodada um jogador tem que remover uma ou mais pedras de uma das colunas. O jogador que não puder realizar mais movimentos é considerado o perdedor. No caso do Nim Intergalático um dos jogadores (nesse caso Jabba) escolhe um número N (N <= 10^18) e as pedras são colocadas em N colunas sendo que a i-ésima coluna contém i pedras (primeira coluna com 1 pedra, segunda coluna com 2 pedras, e assim por diante). Tendo vasto conhecimento sobre esse tipo de jogos, e sabendo que quem faz o primeiro movimento (nesse caso Jabba) tem maior chance de ganhar, Han sugeriu uma pequena modificação no jogo. Ele poderia escolher três inteiros A, B e K e adicionar K pedras a todas as colunas entre A e B inclusive. Jabba aceitou sua proposta mas com uma limitação: o conselheiro de Jabba vai considerar Q possíveis operações deste tipo e Solo deve aplicar cada uma destas operações independentemente ao jogo original. Como Han não está acompanhado de seu fiel companheiro Chewbacca (que costuma ajuda-lo nessas situações), ele pediu para você ajuda-lo a vencer Jabba."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1247",
        "saida": "Para cada caso de teste imprima uma linha contendo ‘S’ se for possível que a Guarda Costeira alcance o fugitivo antes que ele ultrapasse o limite de águas internacionais ou ‘N’ caso contrário.",
        "entrada": "A entrada é composta por diversos casos de teste e termina com final de arquivo (EOF). Cada caso de teste é descrito em um linha contendo três inteiros, D (1 ≤ D ≤ 100), VF (1 ≤ VF ≤ 100) e VG (1 ≤ VG ≤ 100), indicando respectivamente a distância inicial entre o fugitivo e a Guarda Costeira, a velocidade da embarcação do fugitivo e a velocidade da embarcação da Guarda Costeira.",
        "titulo": "Guarda Costeira",
        "descricao": "\"Pega ladrão! Pega ladrão!\" Roubaram a bolsa de uma inocente senhora que caminhava na praia da Nlogônia e o ladrão fugiu em direção ao mar. Seu plano parece obvio: ele pretende pegar um barco e escapar! O fugitivo, que a essa altura já está a bordo de sua embarcação de fuga, pretende seguir perpendicularmente à costa em direção ao limite de aguas internacionais, que fica a 12 milhas náuticas de distância, onde estará são e salvo das autoridades locais. Seu barco consegue percorrer essa distância a uma velocidade constante de VF nós. A Guarda Costeira pretende interceptá-lo, e sua embarcacão tem uma velocidade constante de VG nós. Supondo que ambas as embarcações partam da costa exatamente no mesmo instante, com uma distância de D milhas náuticas entre elas, será possível a Guarda Costeira alcançar o ladrão antes do limite de aguas internacionais? Assuma que a costa da Nlogônia é perfeitamente retilínea e o mar bastante calmo, de forma a permitir uma trajetória tão retilínea quanto a costa."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1422",
        "saida": "Para cada instância na entrada, imprima uma linha contendo a quantidade de bactérias que Pietro terá no início do dia N. A resposta dada deve ser módulo 13371337.",
        "entrada": "A entrada contém várias instâncias. Cada instância possui duas linhas. A primeira linha possui um inteiro N (5 ≤ N ≤ 1.000.000.000), representando o dia para o qual Pietro deseja saber a população de bactérias que ele terá. A segunda linha contém quatro inteiros a1, a2, a3, a4 (1 ≤ a1, a2, a3, a4 ≤ 1.000), onde ak representa a quantidade de bactérias criadas no dia k. A entrada termina quando N = 0.",
        "titulo": "Bactérias",
        "descricao": "Pietro Demazio é um terrorista italiano condenado que fugiu para o Brasil, onde conseguiu um disfarce trabalhando como programador de jogos.  Em seu novo plano de destruição do planeta, Pietro desenvolveu um novo tipo de bactéria mortal, capaz de dizimar toda a população terrestre. Durante 4 dias, Demazio criou colônias desses micro-organismos, mas ao fim do quarto dia, descobriu que o código genético das mesmas possuía um grave erro, que fazia com que as bactérias morressem depois de 4 dias de vida. Como a primeira colônia fora criada 3 dias atrás, ele rapidamente modificou o código genético delas (através de radiação), de modo que elas se reproduzissem todas os dias. Tal reprodução é assexuada, e é feita por bipartição (ou seja, uma bactéria gera exatamente outra bactéria por dia). Assim, se Pietro criou 3 bactérias no dia 1, 4 no dia 2, 2 no dia 3 e 5 no dia 4, terá no total 14 bactérias ao final do quarto dia, quanto ele faz a mutação. Logo após tal mutação, elas se reproduzem, e aí teremos 28 bactérias. Como a primeira colônia (com 3 bactérias) morre ao final desse quarto dia, o número de bactérias no início do quinto dia é 25. Ao final do quinto dia, essas 25 se reproduzem, resultando em 50 bactérias. Mas como a segunda colônia (com 4 bactérias) morre ao final desse dia, no início do sexto dia tem-se 46 bactérias. Demazio observa com atenção tal crescimento da população de bactérias, e já está planejando quando vai liberá-las para fazer o serviço. Para tal, ele precisa saber quantas bactérias existirão depois de um determinado número de dias. Ele pede a você que faça um programa que determine a quantidade de bactérias existentes depois de N dias, dadas as populações das 4 primeiras colônias."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1399",
        "saida": "Imprimir n linhas, uma para cada número inteiro da matriz final.",
        "entrada": "A primeira linha de entrada contém três inteiro n, m, u (1 ≤ n ≤ 300.000, 1 ≤ m ≤ 50.000, 1 ≤ u ≤ 1.000.000.000). Cada uma das n linhas seguintes contém um número inteiro A[i] (1 ≤ A[i] ≤ u). Cada uma das m linhas seguintes contém uma instrução que consiste de quatro números inteiros L, R, v, p (1 ≤ L ≤ R ≤ n, 1 ≤ v ≤ u, 1 ≤ p ≤ n).",
        "titulo": "Transformador de Matriz",
        "descricao": "Escreva um programa que transforme uma matriz A[1], A[2], ..., A[n] de acordo com as m instruções. Cada instrução (L, R, v, p) significa: Primeiro, calcular quantos números de A[L] a A[R] (inclusive) são estritamente inferiores a v, chame esta resposta de k. Em seguida, altere o valor de A[p] para u*k/(R - L + 1), aqui nós usamos a divisão inteira (ou seja, ignorando parte fracionária)."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1555",
        "saida": "Para cada caso de teste imprima uma linha, contendo uma frase, indicando quem ganhou a competição. Por exemplo, se Rafael ganhar a competição, imprima “Rafael ganhou”. Assuma que nunca haverá empates.",
        "entrada": "A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste. Cada caso de teste consiste em dois inteiros x e y (1 ≤ x, y ≤ 100), indicando as variáveis a serem inseridas na função.",
        "titulo": "Funções",
        "descricao": "Na última aula de matemática, Rafael, Beto e Carlos aprenderam algumas novas funções matemáticas. Cada um deles se identificou com uma função em especial, e resolveram competir para ver quem tinha a função de maior resultado. A função que Rafael escolheu é r(x, y) = (3x)² + y². Já Beto escolheu a função b(x, y) = 2(x²) + (5y)². Carlos, por sua vez, escolheu a função c(x, y) = -100x + y³. Dados os valores x e y, diga quem escolheu a função com o maior resultado."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1658",
        "saida": "Para cada caso de teste, imprimir uma linha contendo o formato abreviado da sequência com o número mínimo de operações ao qual resulta na mesma configuração de pontos da sequência de entrada. Em caso de múltiplas soluções ótimas, imprimir qualquer solução.",
        "entrada": "O arquivo de entrada é composto por vários casos de teste. Cada caso de teste começa com uma linha contendo n (3 ≤ n ≤ 108), o número de pontos. A segunda linha de cada caso de teste consiste em uma sequência abreviada de operações, como descrito acima. Todos números serão positivos e menors do que 108. Não haverá nenhuma linha em branco na entrada, e nenhuma linha irá conter mais de 100000 caracteres. O último caso de teste é seguido por uma linha contendo 0.",
        "titulo": "Grupos Diedro",
        "descricao": "Considere n pontos em círculo com números k = 0, 1, ..., n-1. Inicialmente, o ponto k faz um ângulo de 360 · k / n graus para o eixo x, medido em sentido anti-horário. Vamos realizar dois tipos de operações neste conjunto de pontos: rotacionar em 360 / n graus no sentido horário refletir em relação ao eixo x A figura a seguir mostra um exemplo dessas operações: Dada uma seqüência de operações, estamos interessados na menor seqüência de operações que resulta no mesmo resultado, ou seja, a posição de cada ponto é a mesma após a realização de qualquer uma dessas seqüências de operações. A seqüência é dada por uma string contendo os caracteres 'r' e 'm' que representam a rotação no sentido horário e reflexão respectivamente (\"à direita\" e \"espelho\"). Várias ocorrências consecutivas do mesmo caracter são coletadas na representação , e por conveniência, isto também será feito para ocorrências individuais. Assim, \"rrmrrrrrrrrrrrr\" será abreviado para \"r2 m1 r12\". As representações de diferentes operações são sempre separados por um único espaço."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1163",
        "saida": "Para cada disparo, seu programa deve imprimir uma única linha no seguinte formato, “X -> DUCK” para quando o pato acertar a Nlogônia ou “X -> NUCK” quando o pato não acertar a Nlogônia, onde X eh a distancia máxima que o projetil atingiu até chegar ao chão (Y=0). X deve ser impresso com 5 casas decimais.",
        "entrada": "Existem vários casos de teste, cada caso inicia com 1 valor de ponto flutuante h (1 ≤ h ≤ 150) indicando a altura do bodoque, a próxima linha contem 2 valores inteiros p1 e p2 (1 ≤ p1, p2 ≤ 9999) indicando onde inicia e onde termina a Nlogônia, a linha seguinte contem um inteiro n (1 ≤ n ≤ 100) indicando o numero de tentativas que serão feitas para acertar a Nlogônia, as n linhas seguintes contem dois valores de ponto flutuante com os valores do ângulo α (1 ≤ α ≤ 180) e a velocidade V (1 ≤ V ≤ 150) do disparo. O final do arquivo de entrada é determinado por EOF.",
        "titulo": "Angry Ducks",
        "descricao": "Em uma terra distante existem duas cidades, a Nlogônia onde vivem os Nlogoneses, e Ducklogônia onde vivem seus vizinhos os Duckneses, já à algum tempo estas duas cidades estão em guerra e agora em uma tentativa de ganhar a guerra os Duckneses pretendem atacar a cidade da Nlogônia com um bodoque que atira patos, porem para que não haja erro eles pediram que você construa um programa que dados os valores da altura do bodoque (h), os pontos onde inicia (p1) e onde termina (p2) a cidade da Nlogônia, o ângulo do disparo ( α) e a velocidade do lançamento, calcule se o projetil atingira o alvo. Para os cálculos assuma que a aceleração da gravidade é g = 9.80665 e que π = 3.14159."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2063",
        "saida": "Imprima o menor tempo em que todos os Digletts vão aparecer juntos na superfície.",
        "entrada": "A primeira linha da entrada contém um inteiro N (2 ≤ N ≤ 100) que representa a quantidade de buracos. A linha seguinte contém N inteiros Bi (1 ≤ Bi ≤ N), onde o i-ésimo inteiro representa o i-ésimo buraco, e indica que existe um túnel unidirecional do i-ésimo buraco para o buraco Bi.",
        "titulo": "Caçando Digletts",
        "descricao": "Diglett é um Pokémom do tipo terra que fica no subsolo cavando túneis e quase nunca é visto. Ele aparece na superfície através de um buraco no solo de tempo em tempo, onde é possível visualizar apenas a sua cabeça. Os túneis construídos por eles são unidirecionais e sempre conectam um buraco de origem a um buraco de destino, por exemplo: se existe um túnel conectando o buraco A ao buraco B, então é possível ir de A para B e não o contrário. Cada Diglett possuí o seu próprio buraco, o que indica que se existir N buracos vão existir N Digletts. Cada buraco possuí exatamente dois túneis: o primeiro túnel, que sai a partir dele para outro buraco e o segundo túnel, que chega até ele a partir de outro buraco. Os Digletts ficam andando de buraco em buraco a cada instante de tempo, por exemplo: considere um buraco A que tenha um túnel que o conecta a um buraco B, se um Diglett está no buraco A no tempo T, então no próximo instante de tempo T+1 ele vai estar no buraco B. Quando um Diglett chega no seu buraco, ele aparece imediatamente na superfície. Quando não está no seu buraco, ele simplesmente permanece no subsolo e espera o próximo instante de tempo para andar no túnel e ir a outro buraco. É garantido que cada Diglett sempre voltará ao seu buraco em alguns instantes de tempo. Xisto é um Mestre Pokémom e está em busca de capturar a maior quantidade de Digletts com apenas uma pokebola, esta por sua vez é capaz de capturar todos os Digletts visíveis em uma determinada área. Ele precisa da sua ajuda para saber qual é o menor tempo em que todos os Digletts vão aparecer na superfície ao mesmo tempo, para assim poder lançar a pokebola e pegar todos eles. Obs: No instante zero todos os Digletts estão no seu respectivo buraco e não aparecem na superfície."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2100",
        "saida": "Para cada instância imprima uma linha contendo o número de jeitos diferentes que os casais poderiam ocupar as poltronas de forma que não ﬁquem separados. A resposta dada deve ser módulo 1300031.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por uma linha que contém dois inteiros N (2 ≤ N ≤ 4000) e M (1 ≤ M ≤ N/2).",
        "titulo": "Cinema de Xing Tzen Zu",
        "descricao": "Harbin tem um dos maiores cinemas do mundo. O Cinema \"Xing Tzen Zu\" é muito largo, tendo poucas ﬁlas com muitas cadeiras. O governo chinês tem regras especíﬁcas para as pessoas irem ao cinema: cada casal deve se sentar sempre na mesma ﬁleira (a primeira ﬁleira é ocupada por fazendeiros, motoristas, mecânicos, a segunda por professores, comerciantes, bombeiros, e assim por diante). Mas, ao mesmo tempo, é proibido que as pessoas sentem exatamente na mesma posição em duas noites. Isso preocupou o prefeito da cidade, que procurou então descobrir quantas noites o cinema poderia abrir sem que fosse necessário repetir uma conﬁguração que já tinha acontecido anteriormente. Uma restrição importante é que os casais devem sempre ocupar poltronas vizinhas na ﬁleira. Sua tarefa neste problema é determinar, dado o número de poltronas N e o número de casais M, quantos jeitos diferentes os casais poderiam ocupar as poltronas de forma que não ﬁquem separados."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1347",
        "saida": "Para cada caso de teste da entrada, seu programa deverá imprimir uma única linha, contendo um número inteiro representando a distância que você precisa para andar para sair da mina. Claro, você não deve considerar as distâncias que você se teletransportou. A distância deve ser arredondado para o número inteiro mais próximo.",
        "entrada": "A entrada é constituída por vários casos de teste. A primeira linha de um caso de teste contém três inteiros N, M e L, que indicam, respectivamente, o número de vezes que os teletransportes podem ser usados, o número de paredes da mina e o número de cabines do teletransporte (0 ≤ N, M, L ≤ 50). Cada uma das linhas seguintes contém M quatro inteiros X1, Y1, X2 e Y2, que representam as coordenadas dos pontos de extremidade de uma parede. Você pode ignorar a espessura das paredes e assumir que eles não se cruzam entre si (-20.000 ≤ X1 < X2 ≤ 20.000 e -20000 ≤ Y1 ≤ Y2 20.000). As próximas L linhas contêm a localização dos estandes de teletransporte, dada por dois inteiros Xp e Yp. A última linha de cada caso de teste contém quatro inteiros Xb, Yb, Xe e Ye onde (Xb, Yb) são as coordenadas da sua localização e (Xe, Ye) são as coordenadas para sair da mina. O fim da entrada é indicado por M = N = L = 0.",
        "titulo": "Mina Kriptonita",
        "descricao": "No ano de 2222, um terrível desastre aconteceu na mina de kryptonita em Marte: um marsquake sacudiu parte do planeta. Diferentemente de terremotos na Terra, marsquakes não são incomuns em Marte. Este, no entanto, gerou uma mina que começou a afundar-se lentamente para o solo. A mina tem uma forma externa retangular, e seu interior é como um labirinto, com elevações, paredes retas e, mais o importante, teletransportes. Teletransporte, como você sabe, pode transportar pessoas instantaneamente de um lugar para outro. O teletransporte da mina são dos modelos antigos, usando a tecnologia antiga, e só pode teleportar pessoas se houver uma clara visão a partir de uma outra cabine de teletransporte (isto é, se não existem obstáculos ou paredes entre as cabines). Você pode ver o mapa da mina na figura abaixo. ​​ Você está preso sozinho dentro da mina. Felizmente, você tem um mapa de toda a minha, conhece a sua posição atual, a posição das paredes, os locais de saída e todas as cabinas de teletransporte. Infelizmente, o marsquake afetou o sistema de energia, e você sabe que o teletransporte só pode ser usado por um período e número limitado de vezes. Você quer sair andando o mínimo possível, já que torceu o tornozelo durante o marsquake. Você deve encontrar o caminho do seu local atual para a saída que exige a mínima quantidade de caminhada."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1563",
        "saida": "Para cada teste, a saída é composta por uma linha contendo a fração irredutível que responde o enunciado.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por uma linha conténdo um inteiro N (1 ≤ N ≤ 108).",
        "titulo": "O Grande Problema",
        "descricao": "Sorteando dois números inteiros A e B entre 1 e N inclusive, qual é a chance de que o número B seja menor ou igual ao resto de N dividido por A? Por exemplo, para N=5, há 25 escolhas possíveis para (A,B), porém os únicos pares que satisfazem o enunciado são (2,1), (3,1), (3,2) e (4,1). Portanto para N=5, a probabilidade é igual a 4/25."
    },
    {
        "nivel": "7",
        "assunto": "5",
        "numero": "1297",
        "saida": "Para cada caso de teste de saída imprima uma linha com um número racional que representa a profundidade d que deve ser permitido à ACM cavar o pedaço de terra, de modo que eles peguem uma área de minerais a partir da camada do meio no perfil exato A. O resultado deve ser saída como um número racional com exatamente cinco dígitos depois do ponto decimal, arredondado, se necessário.",
        "entrada": "Cada caso de teste é descrito usando 5 linhas. A primeira linha contém 4 inteiros W, D, A e K, onde W é a largura do pedaço de terra que a ACM deseja minerar (1 ≤ W ≤ 8), D é a profundidade (1 ≤ D ≤ 10), A é a área da camada do meio com o perfil que a ACM deseja(1 ≤ A ≤ W x D), e K permite a definição das interfaces y1(x) e y2(x) conforme explicado acima (0 ≤ K ≤ 8). Cada uma das outras linhas contém K + 1 inteiros entre -108 e 108, inclusive. A segunda linha contem os coeficientes de p1(x) desde P1,0 até P1,K. A terceira linha contém os coeficientes de q1(x) desde Q1,0 até Q1,K. A quarta linha contém os coeficientes de p2(x) desde P2,0 até P2,K. A quinta linha contém os coeficientes de q2(x) desde Q2,0 até Q2,K. Em cada caso de teste, A é estritamente menor que a area total da camada do meio do perfil e existe um único valor d tal que de tal forma que uma profundidade de escavação d origina uma área de minerais a partir da camada do meio em um perfil exato A. Além disso, q1(x) 6= 0, q2(x) 6= 0 e -D < y2(x) < y1(x) < 0, para 0 ≤ x ≤ W.",
        "titulo": "Proteção do Meio Ambiente",
        "descricao": "Arsênico & Cyanide Mineração (ACM) é uma empresa que recentemente decidiu começar a desenvolver suas minas nas terras perto de sua cidade natal. Como um membro do comité de regulamentação dos cidadãos para as operações da ACM, sua tarefa é controlar o quanto a empresa pode extrair dessas terras, de modo que você terá que manter os empregos e os benefícios de sem sacrificar o meio ambiente e a saúde da população local. A ACM tem planos para minerar vários pedaços retangulares de terra. Um pedaço de terra tem a largura W, pode ser desenterrado para uma profundidade máxima D, e tem uma superfície plana a qual nós consideramos ser a profundidade 0. Os minerais em um pedaço de terra estão organizados em três camadas, que podem variar na sua profundidade ao longo da largura deste pedaço, mas sempre tem o mesmo perfil ao longo do seu comprimento total. Por isso, a ACM está apenas interessado no perfil ao longo da largura de cada pedaço, e tem realizado trabalhos exploratórios, a fim de determinar com precisão a sua forma. Como resultado, eles descobriram que as duas interfaces entre as três camadas de minerais pode ser representada por duas funções y1(x) e y2(x), em que a primeira descreve o limite entre a camada superior e da camada do meio, e o segundo descreve o limite entre a camada intermédia ea camada inferior. Estas funções são de tal forma que sempre -D < y2(x) < y1(x) < 0 for 0 ≤ x ≤ W , ou seja, os limites das camadas não se tocam. Além disso, cada função está na forma yi(x) = pi(x)/qi(x), onde ​ para i = 1, 2 e um determinado inteiro K. A figura abaixo mostra o perfil dos dois pedaços de terra no formato representado pela ACM. O pedaço da esquerda tem largura W = 6 e profundidade D = 9, enquanto que o pedaço da direita tem W = 8 e D = 10. Os limites das camadas de cada pedaço são descritos pelas funções definidas abaixo deles. ​ A ACM vai cavar tudo em um pedaço de terra até uma certa profundidade de escavação d, e, em seguida, vender todos os minerais assim obtidos para lucrar com isso. No entanto, os minerais da parte superior e das camadas inferiores são essencialmente sem valor, de modo que o lucro de toda a operação vem exclusivamente a partir desses minerais na camada do meio. Na verdade, o lucro é proporcional a área A da camada do meio no perfil que está a uma profundidade de pelo menos d. Dada a descrição de um pedaço de terra e um inteiro A, você gostaria de saber a profundidade de escavação d que você deve permitir que o ACM escave a fim de que peguem uma área de minerais na camada do meio com o perfil exato A. Na figura abaixo você pode ver a resposta dos dois casos de teste para a mesma entrada. Para o pedaço da esquerda, a fim de pegar uma área A = 14, a profundidade de escavação deve ser de pelo menos d = 4.00000, enquanto que para o pedaço da direita de área também igual a 14, requer uma profundidade de escavação d = 5.51389."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1969",
        "saida": "Para cada evento da forma -> A B, imprima uma linha contendo um valor que represente o número de possibilidades para o arquivo com o qual se entrou na máquina. Após processar todos os eventos, imprima uma linha extra contendo um valor que represente o número de possibilidades para o arquivo com o qual A. K. M. entraria na máquina se desejasse enviar uma mensagem para todas as G gerações. Como os números de possibilidades representados em cada linha da saída podem ser muito grandes, imprima apenas o resto que eles deixam quando divididos por 109 + 7.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros, G e E (1 ≤ G, E ≤ 105), os quais representam respectivamente o número de gerações cadastradas na máquina e o número de eventos descritos na entrada. As gerações são identificadas na entrada pelos inteiros de 1 a G. A segunda linha da entrada consiste de G inteiros, de modo que o i-ésimo inteiro, Ci (2 ≤ Ci ≤ 1010, 1 ≤ i ≤ G), representa o comprimento de mensagem estabelecido pela geração i. Cada uma das E linhas seguintes representa um evento e obedece um dos formatos abaixo: -> A B indica que A. K. M. entrou com um arquivo na máquina para enviar uma mensagem para cada geração de A até B (1 ≤ A, B ≤ G); indica que o comprimento de mensagem estabelecido pela geração A deve ser atualizado para C (1 ≤ A ≤ G, 2 ≤ C ≤ 1010).",
        "titulo": "Generations",
        "descricao": "Ainda não é possível construir uma máquina que permita viagens no tempo a um corpo de matéria. No entanto, o físico Asdrubal Keyla Monteiro já conseguiu desenvolver uma máquina que consegue enviar mensagens através do tempo, comunicando-se com gerações do futuro. Teoricamente também seria possível utilizar essa máquina para enviar mensagens a gerações do passado, mas elas não teriam a tecnologia para receber essas mensagens. Cada mensagem é uma sequência binária de um comprimento fixo estabelecido pela geração com a qual A. K. M. está se comunicando. O fim de cada mensagem é sempre marcado por 11, padrão que obviamente não pode ocorrer em nenhum outro lugar da mensagem, senão a mensagem chegaria truncada ao seu destino. Por exemplo, se o comprimento de mensagem estabelecido pela geração com a qual A. K. M. está se comunicando é 6, há 5 possibilidades para a mensagem enviada para aquela geração: 000011      001011      010011      100011      101011 O interessante desse protocolo de comunicação é que, concatenando-se mensagens, é possível entrar com um único arquivo na máquina para que ela envie uma mensagem para cada uma dentre um conjunto de gerações especificadas. Por exemplo, se A. K. M. deseja se comunicar com as gerações cadastradas na máquina respectivamente como 1, 2 e 3, e se os comprimentos de mensagem estabelecidos pelas gerações são respectivamente 3, 5 e 3, são 3 possibilidades para o arquivo com o qual se pode entrar na máquina: 01100011011      01101011011      01110011011 A máquina que A. K. M. desenvolveu apenas envia mensagens. Por enquanto, ainda não é possível receber mensagens do futuro. A única coisa que é possível receber de uma geração do futuro é a informação do comprimento da mensagem. Frequentemente as gerações atualizam esse valor, e A. K. M. precisa estar atento."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "2180",
        "saida": "A saída esperada consiste em duas linhas. A primeira linha contém a velocidade que pode ser atingida pela nave, seguida pelo texto \"km/h\". A segunda linha contém o tempo estimado de viagem até Marte em horas e em dias (truncados), com mensagem de texto correspondente, conforme o exemplo abaixo.",
        "entrada": "A entrada contém um único valor inteiro Peso (1000 < Peso ≤ 60000) indicando o peso máximo de combustível (em kg) que os foguetes podem armazenar.",
        "titulo": "Viagem à Marte na Velocidade de Primo",
        "descricao": "Um grupo de cientistas está fazendo novas experiências para criar uma nave que possibilite a viagem muito mais rápida até Marte do que é possível atualmente. Esta nave utilizará dois foguetes e um novo combustível recém criado, muito mais eficiente que os utilizados até hoje. Só que a velocidade que os novos foguetes podem proporcionar à nave está relacionada diretamente com o peso do combustível armazenado nestes foguetes (em kg) e, por incrível que pareça, uma relação deste peso com números primos. Por exemplo, se o peso total do combustível dos foguetes for 1010 kg, a velocidade atingida (em km/h) é a soma dos 10 números primos à partir de 1010 (incluindo ele se for primo): 1013 -> 1019 -> 1021 -> 1031 -> 1033 -> 1039 -> 1049 -> 1051 -> 1061 -> 1063, ou seja, 10380 km/h. Os cientistas estão muito intrigados com esta relação matemática existente e querem que você construa um programa que calcule quanto tempo aproximado (em horas e em dias) uma nave levaria para ir da terra até marte com este novo combustível, dado um determinado peso de foguetes (claro, eles estão tentando criar os maiores foguetes possíveis) assumindo que a distância da terra até marte no dia do lançamento, será 60 milhões de kms."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1028",
        "saida": "Para cada caso de teste de entrada haverá um valor na saída, representando o tamanho máximo da pilha de figurinhas que poderia ser trocada entre dois jogadores.",
        "entrada": "A primeira linha da entrada contém um único inteiro N (1 ≤ N ≤ 3000), indicando o número de casos de teste. Cada caso de teste contém 2 inteiros F1 (1 ≤ F1 ≤ 1000) e F2 (1 ≤ F2 ≤ 1000) indicando, respectivamente, a quantidade de figurinhas que Ricardo e Vicente têm para trocar.",
        "titulo": "Figurinhas",
        "descricao": "Ricardo e Vicente são aficionados por figurinhas. Nas horas vagas, eles arrumam um jeito de jogar um “bafo” ou algum outro jogo que envolva tais figurinhas. Ambos também têm o hábito de trocarem as figuras repetidas com seus amigos e certo dia pensaram em uma brincadeira diferente. Chamaram todos os amigos e propuseram o seguinte: com as figurinhas em mãos, cada um tentava fazer uma troca com o amigo que estava mais perto seguindo a seguinte regra: cada um contava quantas figurinhas tinha. Em seguida, eles tinham que dividir as figurinhas de cada um em pilhas do mesmo tamanho, no maior tamanho que fosse possível para ambos. Então, cada um escolhia uma das pilhas de figurinhas do amigo para receber. Por exemplo, se Ricardo e Vicente fossem trocar as figurinhas e tivessem respectivamente 8 e 12 figuras, ambos dividiam todas as suas figuras em pilhas de 4 figuras (Ricardo teria 2 pilhas e Vicente teria 3 pilhas) e ambos escolhiam uma pilha do amigo para receber."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1304",
        "saida": "Para cada consulta na entrada padrão, você deve imprimir uma linha dando o tempo e a distância percorrida, no formato abaixo, utilizando o arredondamento padrão da linguagem.",
        "entrada": "A entrada padrão contém várias linhas de entrada: Cada alteração de velocidade é indicada por uma linha específica com o tempo decorrido desde o início da viagem (hh:mm:ss), seguido da nova velocidade em km/h. Cada consulta é indicada por uma linha que contém o tempo decorrido. No início da viagem o carro está parado. O tempo decorrido é dado em ordem não decrescente e há, no máximo, uma variação de velocidade por linha de entrada.",
        "titulo": "Velocidade Média",
        "descricao": "Você comprou um carro para dirigir de Waterloo para uma cidade grande. O odômetro do seu carro está quebrado, então você não pode medir a distância. Mas o velocímetro e o Cruise Control (sistema que mantém a velocidade, previamente programada, do veículo constante) estão funcionando, de modo que o carro pode manter uma velocidade constante, que pode ser ajustada de tempos em tempos em resposta aos limites de velocidade, engarrafamentos ou filas nas fronteiras. Você tem um cronômetro e anota o tempo decorrido toda vez que a velocidade muda. De vez em quando você se pergunta: “O quão longe eu estou?”. Para resolver este problema, você deve escrever um programa para ser executado em seu computador portátil no banco do passageiro."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1568",
        "saida": "Para cada caso de teste produza uma linha de saída. Esta linha deverá conter um inteiro que informa de quantas maneiras N pode ser expresso como a soma de inteiros consecutivos.",
        "entrada": "O arquivo de entrada contém menos de 1100 linhas de entrada (casos de teste). Cada caso de teste contém um inteiro N (0 ≤ N ≤ 9E14) . O final de entrada é determinado por EOF.",
        "titulo": "{soma+=i++} até N",
        "descricao": "Todos os números positivos podem ser expressos como a soma de um, dois ou mais números inteiros positivos consecutivos. Por exemplo, 9 pode ser expresso em três diferentes formas, 2+3+4, 4+5 ou 9. Dado um número inteiro menor que (9*10^14+1) ou (9E14 + 1) ou (9*10¹⁴ +1), você terá que determinar de quantas maneiras este número pode ser expresso como a soma de números consecutivos."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1233",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma única linha contendo um único inteiro, indicando o número de estrelas completas que podem ser desenhadas.",
        "entrada": "Cada caso de teste contém de uma única linha, contendo um único inteiro N (3 ≤ N < 231), indicando o número de arcos no qual a circunferência foi dividida.",
        "titulo": "Estrela",
        "descricao": "Fernando ganhou um compasso de aniversário, e agora sua diversão favorita é desenhar estrelas: primeiro, ele marca N pontos sobre a circunferência, dividindo-a em N arcos iguais; depois, ele liga cada ponto ao k-ésimo ponto seguinte, até voltar ao ponto inicial. Dependendo do valor de k, Fernando pode ou não atingir todos os pontos marcados sobre a circunferência; quando isto acontece, a estrela é chamada de completa. Por exemplo, quando N = 8, as possíveis estrelas são as mostradas no desenho abaixo; as estrelas (a) e (c) são completas, enquanto as estrelas (b) e (d) não o são. Dependendo do valor de N, pode ser possível desenhar muitas estrelas diferentes; Fernando pediu que você escrevesse um programa que, dado N, determina o número de estrelas completas que ele pode desenhar."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "2114",
        "saida": "Para cada instância, imprima uma linha contendo um número inteiro. Imprima 1 se o primeiro jogador ganha essa instância, imprima 2 caso o segundo ganhe e imprima 0 se houver um empate, mesmo depois de aplicadas as regras de desempate.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância é composta por três linhas. As duas primeiras linhas contêm a descrição de duas cartas cada uma, separadas por espaço. A primeira linha corresponde às cartas do primeiro jogador enquanto a segunda corresponde às cartas do segundo jogador. A terceira linha contém a descrição das cinco cartas na mesa, também separadas por espaço. Caracter Carta '2'- '9' 2 - 9 'T' 10 'J' Valete 'Q' Dama 'K' Rei 'A' Ás 'e' Espadas 'c' Copas 'o' Ouros 'p' Paus A descrição de uma carta é dada por 2 caracteres, o primeiro indica o valor da carta e o segundo o seu naipe, conforme a tabela acima.",
        "titulo": "Poker",
        "descricao": "Poker é jogado com um baralho tradicional de 52 cartas (13 valores com 4 naipes). Os valores das cartas, em ordem crescente, são: 2, 3,..., 10, Valete, Dama, Rei, Ás. Dada uma mesa de poker, com dois jogadores, sua tarefa é determinar quem ganhou. Cada jogador possui duas cartas próprias e há cinco cartas comuns aos dois jogadores na mesa. Ganha quem conseguir uma mão de cinco cartas mais valiosa, entre as suas duas cartas próprias e as cinco cartas da mesa. Uma carta da mesa pode ser usada pelos dois jogadores ao mesmo tempo e a mão mais valiosa de um ou dos dois jogadores pode ser obtida ignorando as suas duas cartas próprias e usando as cinco comuns. Para comparar duas mãos de cinco cartas, verifica-se em quais tipos da lista abaixo elas se encaixam. Se uma mão se encaixar em mais de um tipo, escolhe-se o mais valioso. Se as duas mãos se encaixarem num mesmo tipo, se aplica uma regra de desempate específica para este tipo. A lista de tipos de mãos, ordenados do menos valioso para o mais valioso, e seus respectivos critérios de desempate é: Carta mais alta: qualquer mão que não se enquadre em nenhum dos demais tipos. No desempate, as cinco cartas são comparadas uma a uma, da mais valiosa para a menos, até uma mão apresentar uma carta com valor maior que o da outra. Um par: duas cartas de mesmo valor. O desempate é análogo ao da carta mais alta comparando primeiro o valor do par e depois as demais cartas; Dois pares: dois pares. O desempate é análogo ao da carta mais alta comparando primeiro o valor do par mais valioso, depois o valor do par menos valioso e por fim a carta restante; Trinca: três cartas de mesmo valor. O desempate é análogo ao do par; Straight: sequência de cinco cartas de valores consecutivos. Neste caso o Ás pode tomar o valor tanto de carta mais baixa (antes do 2) ou de mais alta (depois do Rei). O desempate é feito pela carta de maior valor, sendo que excepcionalmente o Ás tem o menor valor se aparecer antes do 2; Flush: cinco cartas do mesmo naipe. O desempate é feito pelo critério da carta mais alta; Full House: uma trinca e um par. No desempate é comparado primeiro o valor da trinca. Persistindo o empate, é comparado o valor do par; Quadra: quatro cartas com um mesmo valor. No desempate compara-se o valor da quadra e depois a carta restante; Straight Flush: straight e ﬂush simultaneamente. O desempate é feito como no straight. Note que é possível persistir o empate mesmo depois de aplicadas as regras de desempate. Os naipes das cartas só são considerados para definir um ﬂush, não sendo considerados em nenhuma regra de desempate."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "2129",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima o primeiro dígito (da direita para esquerda) diferente de zero. Após cada instância imprima uma linha em branco.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância consiste um inteiro n (1 ≤ n ≤ 1000000). A entrada termina com final de arquivo.",
        "titulo": "Fatorial",
        "descricao": "Joãozinho é um garoto esperto da sexta série. Ele gosta muito de matemática, e descobriu que sua professora é muito preguiçosa. Nas provas da matéria a professora pede que as crianças circulem a resposta com um quadrado colorido, e que façam o primeiro dígito diferente de zero (da direita para esquerda) do número especialmente grande com caneta. Joãozinho desconfiou que a professora olhava apenas para aquele dígito para corrigir a questão. A turma aprendeu a calcular o fatorial de um número, e isso será cobrado na próxima prova. Joãozinho está convencido de que não precisa escrever de fato o número correto, desde que o primeiro dígito (olhando da direita para esquerda) seja o correto. Sua tarefa neste problema é ajudar Joãozinho a calcular para um número inteiro n da entrada, o primeiro dígito (da direita para esquerda) de n! que seja diferente de zero."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1306",
        "saida": "Para cada linha de entrada, você de produzir uma linha de saída. Esta linha contém o número de série de saída, seguido por um inteiro D que indica o número mínimo de sufixos necessários para nomear as ruas. Se não é possível nomear todas as ruas, você deve imprimir “impossible” no lugar (sem as aspas).",
        "entrada": "O arquivo de entrada pode conter até 10002 linhas de entrada. Cada linha contém dois inteiros R e N (R < 10001, 0 < N). Aqui R é o número total de ruas a serem nomeadas e N indica o número de inteiros alocados para a nomeação. A entrada termina com \"0 0\" que não deve ser processado.",
        "titulo": "Numerando Estradas",
        "descricao": "No meu país, as ruas não têm nomes, cada uma delas tem apenas um número como nome. Estes números devem ser únicos, mas nem sempre este é o caso. O governo local aloca alguns inteiros para citar as estradas e, em muitos casos, o número de inteiros alocados é menor do que o número total de estradas. Nesse caso, para que os nomes das estradas sejam único, alguns sufixos de caracteres únicos são utilizados. Assim, as estradas são nomeadas como 1, 2, 3, 1A, 2B, 3C etc. É claro que o número de sufixos também é sempre limitado a 26 (A, B, …, Z). Por exemplo, se existem 4 estradas e dois inteiros diferentes são alocados para nomear, então algumas declarações de nomes possíveis podem ser: 1, 2, 1A, 2B 1, 2, 1A, 2C 3, 4, 3A, 4A 1, 2, 1B, 1C Dado o número de estradas (R) e os números de inteiros alocados para a nomeação (N), o seu trabalho é determinar o número mínimo de sufixos diferentes necessários (de todas as nomeações possíveis) para nomear as ruas, assumindo que não existam duas ruas com o mesmo nome."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1644",
        "saida": "Para cada caso de teste, imprima uma linha com o texto original.",
        "entrada": "A entrada contém diversos casos de teste. Cada caso de teste começa com uma linha contendo dois números N e M (1 ≤ N ≤ 80, 1 ≤ M ≤ 109). A linha seguinte consiste em N números distintos p1,...,pn (1 ≤ pi ≤ N). A terceira linha de cada caso de teste consiste em exatamente N caracteres, e representa o texto cifrado. O último caso de teste é seguido por uma linha contendo dois números zeros.",
        "titulo": "Decifre o Texto",
        "descricao": "Brutus teve uma ideia interessante para cifrar textos. A seguir está a descrição de como a codificação é feita: Seja x1,x2,...,xn a sequência de caracteres do texto a ser cifrado. Escolha um inteiro M e N números distintos p1, p2, ..., pn do conjunto {1, 2, ..., N}, ou seja, uma permutação dos números de 1 a N. Repita o passo a seguir M vezes. Para 1≤ i ≤ N defina yi com xpi, e então para 1 ≤ i ≤ N substitua xi por yi. Por exemplo, quando nós queremos codificar o texto “hello”, escolhemos o valor M = 3 e a permutação [2, 3, 1, 5, 4], a informação será cifrada em 3 passos: “hello” -> “elhol” -> “lhelo” -> “helol”. Brutus dará a você os textos cifrados, os números M e as permutações [p1, ...pn] usados para produzir os textos cifrados. Ele vai se gabar de que, por ter usado números M enormes para a codificação, você precisará de muito tempo para decifrar os textos. Você é capaz de decifrá-los rapidamente?"
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1841",
        "saida": "Para cada primo p proferido por Dolores Umbridge, imprima uma linha consistindo unicamente da resposta que o Ministro da Magia deveria lhe dar. Como a resposta pode ser um número muito grande, imprima apenas o resto que a resposta deixa quando dividida por 109 + 7.",
        "entrada": "A entrada é composta por no mínimo 2 e no máximo 105 linhas. A primeira linha consiste unicamente do inteiro N (2 ≤ N ≤ 1012). Cada uma das linhas seguintes consiste unicamente de um número primo p (2 ≤ p ≤ 107). Os inteiros são fornecidos na entrada na ordem em que são proferidos por Dolores Umbridge. A entrada termina em fim de arquivo.",
        "titulo": "O Cálice de Fogo",
        "descricao": "Uma das provas do Torneio Tribruxo de 2015 será uma partida de futebol, e a Chapecoense tem treinado duro para enfrentar os jogadores de Hogwarts. A Associação Chapecoense de Futebol (ACF, ou simplesmente Chapecoense) é o time de futebol da cidade de Chapecó. Fundado em 1973, o time hoje joga entre os melhores times do Brasil, e não são uns adolescentes esquisitos de chapéu e vassoura que vão amedrontar nossos desbravadores guerreiros, mesmo que todos nós tenhamos ficado espantados quando o Cálice de Fogo escolheu os trouxas dos nossos jogadores para participarem do Torneio Tribruxo. Como já mencionamos, a história do time começa 1973 quando… Interrompemos este texto para a transmissão de um comunicado urgente do Ministro da Magia. Boa tarde, senhores e senhoras trouxas! Maldito o dia em que Dolores Umbridge saiu da prisão. Agora, vive a me atazanar com esses problemas de Matemática. E ela sabe que eu não sou bom nessas coisas. Enfim, vocês podem fazer um programa para me ajudar? O problema é o seguinte: ela me diz um número inteiro N e pede que eu lhe diga quantos divisores N tem e guarde esse N na minha cabeça. Até aí tudo bem. Não sou tão burro e não preciso de ajuda nesta parte. Mas daí ela fica me dizendo alguns números primos e, para cada primo p que ela diz, eu devo multiplicar p por N, atualizando o valor de N na minha cabeça, e, como se não bastasse, preciso ainda lhe dizer quantos divisores tem esse novo N que são compostos apenas por fatores primos menores que p. Por exemplo, se eu tenho guardado na minha cabeça N = 630 e ela diz p = 5, eu tenho que atualizar N para 3150 e dizer 6, pois os únicos divisores de 3150 compostos apenas por fatores primos menores que 5 são: 1, 2, 3, 6, 9 e 18. Mas o número N cresce muito rápido, e eu não quero perder o jogo para ela. Por favor, façam alguma coisa!"
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1400",
        "saida": "Para cada linha, imprima o número real que está sendo contado, quando a m-ésima pessoa bate palmas pela k-ésima vez. Se isso nunca pode acontecer, imprima '-1'.",
        "entrada": "Haverá, no máximo, 100 casos de teste na entrada. Cada teste contém três inteiros n, m e k (2 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ k ≤ 100) em uma única linha. O último caso de teste é seguido por uma linha com n = m = k = 0, e que não deverá ser processada.",
        "titulo": "Jogo - Contando",
        "descricao": "Existem n pessoas que estão em uma linha, em um famoso jogo chamado \"contando\". Quando o jogo começa, a pessoa mais à esquerda diz \"1\" em voz alta, em seguida, a segunda pessoa (as pessoas estão numerados de 1 a n, da esquerda para a direita) diz \"2\" em voz alta. Isto é seguido pela terceira pessoa dizendo \"3\", e assim por diante. Quanda o e-nésima pessoa (ou seja, a pessoa mais a direita) diz \"n\" em voz alta, a próxima vez vai para a sua pessoa imediatamente à esquerda (ou seja, a (n - 1)-nésima pessoa), que deve dizer \"n + 1\" em voz alta, então a (n - 2)-ésima pessoa deve dizer \"n + 2 \" em voz alta. Depois que a pessoa mais à esquerda falou de novo, a contagem vai para a direita novamente. Há um senão (caso contrário, o jogo seria muito chato!): Se uma pessoa dizer um número que é múltiplo de 7, ou sua representação decimal contém o dígito 7, ele deve bater palmas em vez disso! A tabela a seguir nos mostra o processo de contagem para n = 4 ('X' representa uma salva de palmas). Quando a 3ª pessoa bate palmas pela 4 vez, ele está realmente contando 35. Person 1 2 3 4 3 2 1 2 3 Action 1 2 3 4 5 6 X 8 9 Person 4 3 2 1 2 3 4 3 2 Action 10 11 12 13 X 15 16 X 18 Person 1 2 3 4 3 2 1 2 3 Action 19 20 X 22 23 24 25 26 X Person 4 3 2 1 2 3 4 3 2 Action X 29 30 31 32 33 34 X 36 Dado n, m e k, a sua tarefa é descobrir, quando a m-ésima pessoa bate palmas pela k-ésima vez, e qual é o número real que está sendo contado."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1572",
        "saida": "Para cada consulta deverá imprimir duas linhas. A primeira linha contém o valor de P(i, j) com cinco dígitos após o ponto decimal e a segunda linha contém um número o qual é o número de chamadas recursivas necessários se a função acima mencionada foi utilizada para determinar o valor de P(i, j). Se o valor de P(i, j) é indefinido deverá imprimir -1 como o seu valor com formatação similar. Uma linha em branco deve ser impresso entre as saídas dos dois conjuntos consecutivos.",
        "entrada": "A entrada contém vários conjuntos de entrada. A primeira linha contém um número de ponto flutuante P(0 < P < 1), e um inteiro N(0 ≤ N <1001), onde P é a probabilide de Abahoni ganhar e N é o número de consultas a seguir. Cada uma das N linhas seguintes contém dois inteiros i(0 ≤ i ≤ 1000) e j (0 ≤ j ≤ 1000). A entrada é terminada por um conjunto, que tem o valor de N como 0. Esta entrada não deve ser processada.",
        "titulo": "O Torneio Surreal",
        "descricao": "Neste problema particular, o Torneiro Surreal é um torneio, que participam apenas duas equipes. Vamos nomear estas duas equipes de Abahoni e Mohamedan. Eles jogam entre eles não mais de 2N - 1 jogos, o vencedor é a primeira equipe a conseguir N vitórias. Você pode assumir que não há jogos combinados, o resultado de cada jogo é independente e para qualquer jogo há uma constante P que é a probabilidade da equipe Abahoni ganhar e, portanto, há uma constante probabilidade Q(Q = 1 - P) que a probabilidade da equipe Mohamedan ganhar. P(i, j) é a probabilidade da equipe Abahoni ganhar a série, uma vez que eles ainda precisam i vitórias para conseguir isso, enquanto equipe Mohamedan ainda precisa J vitórias se quiserem vencer. A P(i, j) pode ser calculado com uma função tal como: Função P(i, j){    se i = 0, então, retorne 1    senão se j = 0, então, retorne 0    senão retorne pP(i - 1, j) + qP(i, j - 1) } Você vai ter que escrever um programa que dá a probabilidade de ganhar para qualquer P, i e j e também dá o número de chamadas recursivas necessárias da função acima para obter a probabilidade P(i, j)."
    },
    {
        "nivel": "2",
        "assunto": "5",
        "numero": "1309",
        "saida": "Para cada caso de teste imprima a string formatada de acordo com os regras de formatação.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por dois valores inteiros, dolares (0 ≤ dolares ≤ 2 * 109) e centavos (0 ≤ centavos ≤ 99), respectivamente.",
        "titulo": "Formatação Monetária",
        "descricao": "Frequentemente é necessário escrever valores monetários em um formato padrão. Decidimos a formatação de quantidades na seguinte forma:    1. O montante deve começar com '$';    2. A quantidade deve terminar com um ponto decimal e exatamente dois dígitos seguintes;    3. Os dígitos à esquerda do ponto decimal devem ser separador em grupos de três por vírgulas. Sua tarefa neste problema é criar um programa que, recebendo dois valores inteiros dólares e centavos retorne a String formatada corretamente."
    },
    {
        "nivel": "6",
        "assunto": "5",
        "numero": "1346",
        "saida": "Para cada caso de teste seu programa deve produzir uma linha que descreva o resultado. Se não for possível encontrar uma combinação, imprima a palavra 'impossible'. Se for possível encontrar uma combinação, imprima a soma e a descrição da placa descartada (se houver). Se você tiver que descartar uma placa, descreva na forma 'discard X Y', onde X ≤ Y; caso contrário imprima 'discard none'.",
        "entrada": "Seu programa deve processar vários casos de teste. A primeira linha de um caso de teste contém um inteiro N, o número de placas em ensaio (0 ≤ N ≤ 400). Cada uma das N linhas seguintes contém dois inteiros Xi e Yi descrevendo uma placa que foi dada ao jogador (0 ≤ Xi ≤ 1000 e 0 ≤ Yi ≤ 1000). O valor N = 0 indica o final da entrada.",
        "titulo": "Brincadeira de Criança",
        "descricao": "Nativos da pequena ilha de Tookutoo estão interessados em matemática, e em ensinar seus filhos a jogar vários jogos orientados a matemática. Um quebra-cabeça popular em Tookutoo é jogado com placas de cerâmica como mostradas na figura abaixo. ​ Como pode ser visto na figura acima, as placas são semelhantes ao dominó, sendo divididas em duas partes, em cada peça um valor inteiro é impresso. As peças acima possuem valores [2, 1], [6, 3] e [3, 1]. Note que uma placa [a, b] também pode ser escrita como [b, a]. O quebra-cabeça começa com um jogador a receber um conjunto de placas escolhidas aleatoriamente de um conjunto amplo e variado. Usando o dado conjunto de placas, o jogador tem de encontrar uma combinação em que as placas são colocadas lado a lado sobre a mesa, de tal modo que a soma dos valores do lado superior é igual à soma dos valores no lado inferior. Por exemplo, para o conjunto da figura anterior, um arranjo correto é 1 6 1 2 3 3 Se não for possível encontrar uma combinação utilizando todas as placas escolhidas, o jogador pode descartar uma das placas, mas o valor da soma no arranjo deve ser o mais alto possível. Além disso, se mais de uma placa puder ser eliminada, deixando a mesma soma, o jogador deverá descartar a placa [a, b] de tal forma que a ≤ b e a seja o menor valor possível, considerando todas as placas possíveis a serem descartadas. Você deve escrever um programa que, dado um conjunto de placas, tenta encontrar uma combinação que satisfaça as condições do quebra-cabeça, descartando uma placa, se necessário."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1264",
        "saida": "Se o número com as condições dadas não for possível, imprima a linha “such number is impossible!”. Para cada linha de entrada deverá haver apenas uma linha de saída. A saída deverá ser apresentada sempre na base de numeração decimal.",
        "entrada": "Cada linha da entrada deverá conter um número inteiro N de qualquer base inteira (de 2 a 62) com até 1024 dígitos (como definido na matemática). Você terá que determinar qual é a menor base possível daquele número para as condições dadas. Nenhum número inválido será dado como entrada.",
        "titulo": "Um Problema Fácil!",
        "descricao": "Você já ouviu a expressão “A base de todo sistema normal de numeração é 10”? É claro, eu não estou falando de sistemas tais como o sistema de numeração \"Stern Brockot\". Este problema não tem nada a ver com este fato mas pode ter algumas similaridades. Você tem um número R com base N e a garantia de que R é divisível por (N-1). Você deve então imprimir o menor valor possível para N. Os dígitos para um número com base 62 seriam (0..9, A..Z e a..z). Similarmente, os símbolos dos dígitos para um número com base 61 seriam (0..9, A..Z e a..y) e assim por diante. Você terá que determinar qual é a menor base possível daquele número para as condições dadas. Nenhum número inválido será dado como entrada."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "1240",
        "saida": "Para cada caso de entrada imprima uma mensagem indicando se o segundo valor encaixa no primeiro valor, confome exemplo abaixo.",
        "entrada": "A entrada consiste de vários casos de teste. A primeira linha de entrada contém um inteiro N que indica a quantidade de casos de teste. Cada caso de teste consiste de dois inteiros A (1 ≤ A < 231 ) e B (1 ≤ B < 231) positivos.",
        "titulo": "Encaixa ou Não I",
        "descricao": "Paulinho tem em suas mãos um pequeno problema. A professora lhe pediu que ele construísse um programa para verificar, à partir de dois valores inteiros A e B, se B corresponde aos últimos dígitos de A."
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1531",
        "saida": "Para cada caso de teste, imprima uma linha contendo um inteiro igual ao resto de Fib( Fib( N ) ) por M.",
        "entrada": "A entrada é composta por vários casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com dois inteiros N e M (1 ≤ N ≤ 109, 2 ≤ M ≤ 106).",
        "titulo": "Fibonacci de Novo!",
        "descricao": "A famosa sequência de Fibonacci pode ser definida da seguinte maneira: Fib( 1 ) = Fib( 2 ) = 1 Fib( N ) = Fib( N-1 ) + Fib( N-2 ), para N > 2 Sua tarefa é simples, calcular o valor do resto de Fib( Fib( N ) ) por M."
    },
    {
        "nivel": "1",
        "assunto": "5",
        "numero": "2170",
        "saida": "Para cada projeto mostre o valor dos juros para cada aplicação. Mostre conforme o exemplo de saída.",
        "entrada": "Existem vários projetos a serem analisados, e para cada projeto é dado o aporte de capital inicial (1 < X < 1020), e o seu retorno (X < Y < 1020).",
        "titulo": "Juros do Projeto",
        "descricao": "Em um projeto de investimento, cujo o valor inicial do capital é de X,renderá, após um período um valor Y. Deseja-se saber qual a Taxa Interna de Retorno do investimento, pois dessa forma poderá ser verificado o percentual dos juros."
    },
    {
        "nivel": "4",
        "assunto": "5",
        "numero": "1662",
        "saida": "Para cada caso de teste, imprima se o quadrado especificado é homogêneo ou não. Preste atenção ao formato apresentado no exemplo de saída.",
        "entrada": "A entrada contêm vários casos de teste. A primeira linha de cada caso de teste contêm um inteiro n (1 ≤ n ≤ 1000). Cada uma das n linhas seguintes contêm n números, separados por exatamente um caracter de espaço. Cada número é um inteiro que está no intervalo [-1000000,1000000]. O último caso de teste é seguido por zero.",
        "titulo": "Quadrados Homogêneos",
        "descricao": "Suponha que você tenha um quadrado de tamanho n que é dividido em n×n posições como em um tabuleiro de damas. Duas posições (x1, y1) e (x2, y2), onde 1 ≤ x1, y1, x2, y2 ≤ n, são chamados “independentes” se eles ocupam diferentes linhas e colunas, isto é, x1 ≠ x2 e y1 ≠ y2. Genericamente, n posições são chamadas independentes se elas são pares independentes. Então há n! diferentes formas de escolher n posições independentes. Suponha ainda que um número é escrito em cada posição de tal quadrado n×n. Este quadrado é chamado “homogeneous” (homogêneo em português) se a soma de números escritos em n posições independentes é a mesma, não importa como as posições são escolhidas. Escreva um programa para determinar se um dado quadrado é homogêneo!"
    },
    {
        "nivel": "5",
        "assunto": "5",
        "numero": "1694",
        "saida": "Para cada caso de teste, imprima uma única linha contendo o número de apostas diferentes que Pinkie Pie pode fazer, de forma que os números estejam todos ou na mesma linha ou na mesma coluna, e que nenhum número primo seja escolhido. Um número primo é um número natural maior que 1 que não possui divisores positivos além de 1 e si mesmo.",
        "entrada": "Existem diversos casos testes. Cada caso de teste consiste de uma única linha contendo três inteiros N, M e K (1 ≤ N, M ≤ 50; 1 ≤ K ≤ 10). O último caso de teste é seguido de uma linha contendo três zeros.",
        "titulo": "Loteria",
        "descricao": "Pinkie Pie está se sentindo com sorte. Ela está indo para a lotérica de sua cidade para fazer uma aposta e tentar a sorte. O bilhete da aposta consiste em uma matriz de N linhas por M colunas. As casas são numeradas de 0 a N*M-1 de forma que o número da casa da r-ésima linha e c-ésima coluna (indexadas a partir do 0) é r * M + c. Uma aposta consiste em escolher K números distintos dentre os disponíveis. Pinkie pressente que os números vencedores estarão próximos uns aos outros, então ela decide escolher números que estão ou todos na mesma linha ou todos na mesma coluna. Pinkie também acredita que números primos trazem má sorte, e não fará nenhuma aposta que contém ao menos um número primo. Twilight passou em frente à lotéria e encontrou Pinkie incapaz de chegar a uma decisão. Querendo testar suas habilidades matemáticas, ela decidiu, enquanto Pinkie fazia sua escolha, calcular quantas apostas diferentes Pinkie Pie poderia fazer. Duas apostas são consideradas distintas se existe um elemento presente em uma aposta e ausente na outra."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1705",
        "saida": "Imprima um único inteiro por linha, caso exista diversos múltiplos imprima o menor deles. Se não existir solução imprima -1",
        "entrada": "A entrada contém até 2*10^5 linhas, cada linha com um inteiro N (0 < N < 10^12), o número que a princesa Bubblegum deseja achar o múltiplo M (M != 0), este número deve ser menor que 10^12, caso contrário não cabe na arquitetura do BMO.",
        "titulo": "Apaixonado por Binário",
        "descricao": "Para provar suar habilidade científicas a princesa Bubblegum aprendeu a programar usando BMO (O melhor computador no reinado Doce) e como todo programador ela se apaixonou por números binários. Por seu vício em números binários ela ama números decimais que parecem como um número binário (i.e. um número decimal que contém apenas dígitos 0 e 1, por exemplo 101) então dado um número decimal N ela deseja achar um múltiplo desse número que pareça um número binário, mas para alguns números estava levando muito tempo para achar esse múltiplo, mesmo com a ajuda do BMO. Por causa do seu vício por resolver problemas, ela não estava fazendo nada enquanto não acha esse múltiplo. Situação perfeita para o Conde de Lemongrab, que tomou conta do Reino Doce. Como Finn e Jake, os heróis do reino Doce, não podem fazer nada contra o Conde e não sabem nada sobre múltiplos, eles pediram para achar os múltiplos e assim salvar o reino."
    },
    {
        "nivel": "3",
        "assunto": "5",
        "numero": "1722",
        "saida": "Para cada caso de teste a saída é escrita em uma única linha o número de números de Fibonacci com a ≤ fi ≤ b.",
        "entrada": "A entrada contém alguns casos de teste. Cada caso de teste consiste de dois números inteiros não negativos a e b. Entrada é terminada por a = b = 0. Caso contrário a ≤ b ≤ 10100. Os números a e b são dados sem zeros desnecessários à esquerda.",
        "titulo": "Quantos Fibs?",
        "descricao": "A definição da recursão dos números de Fibonacci: f1 = 1 f2 = 2 fn = fn-1 + fn-2         (n ≥ 3) Dado dois números a e b, calcule quantos números Fibonacci estão no intervalo [a,b]."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1229",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único caractere: S se as moléculas são equivalentes ou N caso contrário.",
        "entrada": "A primeira linha de um caso de teste contém um inteiro N indicando o número de átomos nas duas moléculas. Os átomos são identificados por números inteiros de 1 a N (2 ≤ N ≤ 104). Cada uma das 2N − 2 linhas seguintes descreve uma ligação química entre dois átomos: as primeiras N − 1 linhas descrevem as ligações da primeira molécula; as N − 1 últimas descrevem as ligações químicas da segunda molécula. Cada linha contém dois inteiros A (1 ≤ A ) e B (B ≤ N) indicando que existe uma ligação química entre os átomos A e B.",
        "titulo": "Combate ao Câncer",
        "descricao": "Pesquisadores da Fundação Contra o Câncer (FCC) anunciaram uma descoberta revolucionária na Química: eles descobriram como fazer átomos de carbono ligarem-se a qualquer quantidade de outros átomos de carbono, possibilitando a criação de moléculas muito mais complexas do que as formadas pelo carbono tetravalente. Segundo a FCC, isso permitirá o desenvolvimento de novas drogas que poderão ser cruciais no combate ao câncer. Atualmente, a FCC só consegue sintetizar moléculas com ligações simples entre os átomos de carbono e que não contêm ciclos em suas estruturas: por exemplo, a FCC consegue sintetizar as moléculas (a), (b) e (c) abaixo, mas não a molécula (d). Devido à agitação térmica, uma mesma molécula pode assumir vários formatos. Duas moléculas são equivalentes se for possível mover os átomos de uma das moléculas, sem romper nenhuma das ligações existentes nem criar novas ligações químicas, de forma que ela fique exatamente igual à outra molécula. Por exemplo, na figura acima, a molécula (a) não é equivalente à molécula (b), mas é equivalente à molécula (c). Você deve escrever um programa que, dadas as estruturas de duas moléculas, determina se elas são equivalentes."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1822",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador “Instancia h” em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir o menor valor possível que a empreiteira deve gastar com funcionários ao longo dessa obra. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversas obras, doravante denominadas instâncias. Cada instância tem a estrutura que segue. Na primeira linha é fornecido um inteiro n (0 ≤ n ≤ 200) que representa o número de semanas de duração da obra. Na próxima linha são dados, separados por espaços em branco, n valores inteiros não negativos e menores ou iguais a 50, em que o i-ésimo valor (1 ≤ i ≤ n) representa o número fi de funcionários necessários na i-ésima semana. Na linha seguinte, também separados por espaços em branco, são fornecidos quatro inteiros x, y, z e w (0 ≤ x, y, z, w ≤ 1000), em que x é o custo de recrutamento e instrução de um funcionário novo, y é o custo de demitir um funcionário empregado, z é o custo semanal de um funcionário necessário e w é o custo para manter um funcionário excedente, por uma semana, na obra. Um valor n = 0 indica o final das instâncias e não deve ser processado.",
        "titulo": "Obras da China",
        "descricao": "Devido à abertura econômica ocorrida na China nos últimos anos, boa parte do país foi transformada em canteiro de obras. Algumas construções em curso são tão monumentais que, juntamente com a já famosa Muralha da China, poderão ser vistas da lua a olho nu. Uma empreiteira radicada em Shangai é responsável pela execução de várias obras no país. Após algum tempo, os engenheiros da empreiteira perceberam que, a cada nova obra, tinham de resolver um problema semelhante ao que já tinham resolvido no início das obras anteriores. Cansados de realizar sempre os mesmos tipos de cálculos, pediram a sua ajuda na construção de um programa que resolvesse o problema deles, descrito a seguir. Considere uma obra que tem duração de n semanas. Na i-ésima semana da obra, para i ≤ 1 ≤ n, são necessários fi funcionários para executá-la. Os custos com recrutamento e instrução de um funcionário são de x yuan. Gasta-se y yuan para demitir um funcionário. Um funcionário necessário custa z yuan por semana e cada funcionário excedente, isto é, cada funcionário contratado que não é necessário em uma semana da obra, custa w yuan por semana para a empreiteira. (yuan é a moeda chinesa.) Funcionários podem ser contratados e demitidos a cada semana. Inicialmente, a obra não possui nenhum funcionário. Ao final da mesma, todos os funcionários devem ser demitidos. O problema consiste em determinar o menor valor possível que a empreiteira deve gastar com funcionários ao longo da obra, satisfazendo sempre as restrições semanais. Ou seja, não pode haver menos de fi funcionários trabalhando na obra na i-ésima semana."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1852",
        "saida": "Imprima N linhas. Cada linha deve conter duas strings Ci e Dj, indicando que a criança Ci deve ficar com o filhote Dj. Imprima os filhos na mesma ordem em que são descritos na entrada.",
        "entrada": "A primeira linha contém o inteiro N (1 ≤ N ≤ 200). As próximas N linhas descrevem os filhos de Ned. Cada linha contém N+1 strings. A primeira é o nome da criança. As próximas N strings são os nomes dos lobos em sua ordem de preferência. O primeiro lobo dado na linha é o preferido da criança.  As próximas N linhas descrevem os filhotes de lobo. Cada linha contém o nome do filhote e sua lista de crianças, também em ordem de preferência. Cada string contém no máximo 10 letras maiúsculas e/ou minúsculas.",
        "titulo": "Lobos Stark",
        "descricao": "Jon: \"Lorde Stark? Há cinco filhotes, um para cada criança Stark. O lobo é o brasão de sua Casa. Elas devem tê-los.\" Durante uma viagem, Ned Stark encontrou N filhotes de lobo e decidiu dar um filhote para cada um de seus N filhos. Ned quer fazer tanto as crianças quanto os lobos felizes, e, por isso, deseja encontrar a combinação ideal de lobos e crianças. Depois de brincar um pouco com os filhotes, cada filho deu a Ned uma lista de lobos em ordem de preferência. Desta forma, cada criança quer ficar com o filhote que está no topo de sua lista; se isto não for possível, a criança quer ficar com o filhote que aparece em segundo na lista, e assim por diante. Depois de observar como cada lobo reage a cada filho, Ned também deduziu, para cada lobo, a lista de crianças que ele quer que sejam seus donos, também em ordem de preferência. Ned precisa encontrar uma combinação tal que, para toda criança Ci e todo lobo Dj, não ocorre que Ci prefere Dj ao filhote combinado a ela e Dj prefere Ci à criança combinada a ele. Se existe mais de uma combinação possível, Ned deseja aquela em que cada filho tem o melhor lobo (mais preferido) que pode ter."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1643",
        "saida": "Para cada x distância em quilômetros imprima a distância em milhas y calculadas de acordo com o algoritmo de Bruce.",
        "entrada": "A primeira linha de entrada contém t, o número de distâncias que Bruce quer converter de quilômetros em milhas (0 < t <25000). Cada uma das t linhas contem um inteiro, correspondente a distância x (2 < x < 25000) em quilômetros.",
        "titulo": "Converter Quilômetros para Milhas",
        "descricao": "Este ano, Bruce Force passa suas férias em Flagstaff, Arizona, onde ele quer treinar para a próxima meia maratona (uma corrida de mais de 21 km). Em seu primeiro treino, ele correu até a casa de seu amigo Greedy Gonzales, que fica a 21 milhas de distância de Flagstaff. Chegando lá, ele já muito cansado, percebe que 21 milhas são muito mais de 21 km. Greedy Gonzales diz que 21 km é igual a 13 milhas. 21, 13? Bruce percebe imediatamente que deve haver uma relação mais profunda! Ambos, 13 e 21 são números de Fibonacci! Números Fibonacci podem ser definidos da seguinte forma: F1 = 1 F2 = 2 Fn+1 = Fn+Fn-1 para n > 1 Bruce está aprendendo sobre o sistema numérico Fibonacci em sua universidade. Cada inteiro positivo X pode ser escrito como a soma de diferentes números Fibonacci, isso significa que dado um numero k e b1, b2, ..., bk tal que x = ∑i=1..k bi * Fi, onde bk = 1 e bi (1 ≤ i 1. Por exemplo 21 pode ser representado por (1,0,0,0,0,0,0) e 13 como (1,0,0,0,0,0) no sistema Fibonacci. Bruce percebe que se pode converter uma x distância em quilômetros em uma distância y correspondente a milhas da seguinte forma: Primeiro, anote x em seu Fibonacci representação do sistema b(x). Em segundo lugar, mudar os bits de b (x) uma posição para a direita (o último bit é excluído) e obter b(y). Em terceiro lugar, calcular y de b(y) através da avaliação da soma dada acima. Por exemplo, o número 42 escrito no sistema de Fibonacci é (1,0,0,1,0,0,0,0). Na etapa dois iríamos mudar os bits uma posição para a direita e termos (1,0,0,1,0,0,0). No terceiro passo, calcular 0*1 + 0*2 + 0*3 + 1*5 + 0*8 + 0*13 + 1*21 = 26. Agora é a sua vez de escrever um programa para Bruce que converte quilômetros em milhas de acordo com o algoritmo de Bruce."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2106",
        "saida": "Para cada instância na entrada, imprima uma linha com um inteiro representando a quantidade mínima de dinheiro que deverá ser gasto para a contratação dos N jogadores.",
        "entrada": "A entrada contém várias instâncias. A primeira linha contém um número inteiro N (2 ≤ N ≤ 18), representando a quantidade de jogadores a serem contratados. Cada uma das próximas N linhas representa um jogador. Cada uma possui N inteiros c0 , c1 , c2 , ... cN−1 (1 ≤ ci ≤ 1000, para todo 0 ≤ i < N) separados por espaços, onde c k representa o custo para se contratar o jogador c se já tiverem sido contratados k jogadores. A entrada termina quando N = 0.",
        "titulo": "Montagem",
        "descricao": "Estamos no ano de 2931. Cientistas detectaram um meteoro que, em 15 meses, irá colidir com a Terra e extinguir a vida no planeta. Não há mais tempo para preparar ofensivas contra o meteoro, então só nos resta realizar nossos últimos desejos e esperar a colisão. Um grupo de pessoas resolve se unir e realizar o último sonho de centenas de milhares de pessoas: ver a Portuguesa campeã da Copa Libertadores da América. Para tal, será necessário a contratação de jogadores de grande habilidade, que também são muito caros. Para conseguir fazer isso, eles estudaram a personalidade dos melhores jogadores do mundo, e chegaram à conclusão que alguns aceitariam jogar na Portuguesa mais facilmente (isto é, seria contratado por um preço menor) se percebessem que seriam as únicas \"estrelas\"do time. Já outros, viriam mais facilmente caso percebessem que na Portuguesa já existem outras estrelas. Assim, através de um estudo mais detalhado das personalidades, conseguiram definir, para cada jogador, qual seria o preço para contratá-los em vários cenários. Por exemplo, o jogador X poderia ser contratado por $3 se fosse a única estrela do time ou por $5 se já houvesse 1 estrela no time antes dele entrar. Já o jogador Y seria contratado por $4 se fosse a única estrela do time, ou $2 se já houvesse uma estrela no time. Nesse cenário, a melhor maneira de contratar X e Y seria contratar primeiro o jogador X por $3 e depois Y por $2, gastando $5 no total. Você receberá os dados dos custos de contratação dos jogadores em cada cenário, e deverá dizer quanto os torcedores da Lusa deverão economizar para montar o time dos sonhos e conquistar a tão sonhada Libertadores."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2080",
        "saida": "Para cada instância, imprima a seqüência dada na entrada seguida de K linhas contendo as seqüências na ordem que foram geradas. As seqüências geradas não terão mais do que 2000000 caracteres. Após cada instância imprima uma linha em branco.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. Cada instância é composta por uma linha contendo a primeira seqüência do experimento, formada por não mais de 1000 caracteres de 0 a 9, e o número K de seqüências que desejamos gerar (1 ≤ K ≤ 50), respectivamente.",
        "titulo": "Seqüências de Röntgen",
        "descricao": "Wilhelm Conrad Röntgen foi um físico alemão que viveu no final do século XIX e início do século XX. Suas experiências em radiação eletromagnéticas renderam a ele o primeiro prêmio Nobel em Física, outorgado em 1901. Sua principal descoberta foi a existência do “raio X” e seu uso em aplicações médicas. Em 22 de dezembro de 1895, Röntgen fez um raio X da mão de sua esposa (com um anel em um dos dedos). A descoberta do raio X causou grande alvoroço na época e já em 1896 jornais europeus noticiavam a invenção e as grandes possibilidades de enxergar por dentro dos corpos sem a necessidade de cortá-los. A morte de Röntgen, causada por um certo tipo de câncer, é atribuída às radiações constantes a que esteve exposto durante suas pesquisas científicas. Röntgen começou a desconfiar da existência de radiações invisíveis quando, nas suas pesquisas, era capaz de medir alterações consideráveis na fluorescência dos objetos quando colocados num tubo de Lenard que era submetido a uma corrente elétrica. Os estudos de Röntgen foram tão precisos que ele pôde inclusive gerar a seqüência que era observada no tubo de Lenard em cada instante de tempo. A fluorescência observada dependia da intensidade da corrente (X) e do tempo em que o tubo era submetido à corrente (Y). Röntgen percebeu que dada a primeira seqüência, a próxima podia ser obtida descrevendo os números da seqüência anterior. Por exemplo: se a primeira seqüência for 2 então a próxima é 12 (ou seja, a seqüência anterior é formada por “um 2”), a seguinte 1112 (ou seja, a seqüência anterior é formada por um 1 e um 2), 3112 (ou seja, a seqüência anterior é formada por três 1 e um 2), e assim por diante. Além de um cientista brilhante, Röntgen era extremamente organizado. Ele guardava todos os registros de seus experimentos. Infelizmente, com o tempo algumas seqüências foram danificadas e outras perdidas. Sua tarefa é dada uma seqüência, determinar as próximas K seqüências do experimento."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1600",
        "saida": "Para cada instância imprima uma única linha. Caso seja possível empurrar o bloco para a sua posição final essa linha deverá consistir de 2 inteiros, que são o número mínimo de portas que precisam ser abertas para realizar tal ação e o número mínimo de movimentos que são necessários com esse número de caixas abertas. Imprima ‘-1’ caso não seja possível empurrar o bloco para a sua posição final.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância inicia com uma linha contendo 2 inteiros separados por um espaço, N e M (1 ≤ N, M ≤ 25). Seguem-se N linhas, cada uma com M caracteres pertencentes ao conjunto {∗, ., j, b, x, #}, onde: ‘*’ representa uma parede; ‘.’ representa uma posição vazia; ‘j’ representa a posição inicial do gato (Cada instância contêm exatamente um caractere ‘j’); ‘b’ representa a posição inicial do bloco (Cada instancia contêm exatamente um caractere ‘b’); ‘x’ representa a posição final desejada para o bloco (Cada instância contêm exatamente um caractere ‘x’); ‘#’ representa uma porta (Cada instância contêm no máximo 5 caracteres ‘#’);",
        "titulo": "O Gato do Zelador do Armazém",
        "descricao": "Sokoban é um jogo muito conhecido. O que poucas pessoas sabem é que o jogo foi inventado pelos bérberes, povos árabes que habitavam o norte da África, mais especificamente onde hoje existe o Marrocos. Para estes povos os gatos são considerados um animal que traz mau agouro, principalmente por conta de seu comportamento egoísta (como atesta o provérbio destacado acima). Nessa versão original do sokoban o personagem é um gato que fica empurrando os blocos de terra ao seu redor. Há um tabuleiro que consiste de N linhas e M colunas. Você controla o gato que pode se movimentar em qualquer uma das 4 casas adjacentes, desde que essa esteja livre, ou pode empurrar um bloco em qualquer uma dessas 4 direções. Como na versão mais conhecida, seu objetivo é empurrar o bloco até uma posição final especificada. Note que você pode apenas empurrar o bloco e nunca puxar. A versão bérbere do jogo tem uma particularidade. Há algumas casas especiais que são portas. Sempre que o gato ocupa uma posição com porta pela primeira vez, a porta é aberta. O bloco não pode ser empurrado para a posição de uma porta se ela estiver fechada. Após aberta, uma porta se comporta como uma posição livre. Você quer empurrar o bloco para a posição final abrindo o menor número de portas possível. Considere toda posição fora do tabuleiro como uma parede."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "2027",
        "saida": "Para cada caso de teste você deverá Imprimir uma linha de saída contendo Noel ou Gnomos, conforme explicação acima. No final, você deve imprimir os valores calculados para as 100 apostas entre os gnomos e Noel. Cada um dos valores é seguido por um espaço em branco, inclusive o último.",
        "entrada": "A entrada pode conter até 100 casos de teste e termina com EOF. Cada caso de teste é composto por uma linha contendo dois números inteiros separados por um espaço, que representam o número de enfeites contados por Rolien e Noel, respectivamente, para uma das árvores de Noel.",
        "titulo": "Aposta com Noel",
        "descricao": "Como é época de Natal, os gnomos Rolien e Naej fizeram uma aposta com o Papai Noel. Rolien e Noel tem 10 segundos para contar a quantidade de enfeites em uma árvore de natal. Após isso, se o máximo divisor comum entre os dois valores contados der um valor maior do que 5, Noel ganha, caso contrario, os gnomos ganham. Bem, o problema é que alguém mexeu no código de Rolien, que antes funcionava perfeitamente e agora dá uns erros estranhos: dependendo do que for mexido, às vezes dá \"Presentation Error\", às vezes dá \"Compilation Error\" e às vezes dá \"Runtime Error\". Tendo o código abaixo, acerte estes pequenos erros e submeta a versão correta para o Papai Noel. #include using namespace std; int GCDsimp (int num, int den) { cout << num << den; if (den > 0) return GCDsimp (den, num % den); } return num; } int main() { int num, den, apostas [100], cont=-1; while (cin >> num >> den) {  apostas[++cont] = GCDsimp (num,den);  if  ( apostas[cont] ) > 5) cout << \"Noel\" ;  else cout << \"Gnomos\" << endl; } for (int i=cont; i>0; i++) { cout << apostas[cont] << \" \"; } return 0; }"
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1226",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único número inteiro indicando o número atribuído ao N-ésimo andar.",
        "entrada": "Cada caso de teste consiste de uma única linha, contendo um inteiro N (1 ≤ N ≤ 1018) que indica o andar cujo número deve ser determinado.",
        "titulo": "Elevador Espacial",
        "descricao": "A China está construindo um elevador espacial, que permitirá o lançamento de sondas e satélites a um custo muito mais baixo, viabilizando não só projetos de pesquisa científica como o turismo espacial. No entanto, os chineses são muito supersticiosos, e por isso têm um cuidado muito especial com a numeração dos andares do elevador: eles não usam nenhum número que contenha o dígito “4” ou a sequência de dígitos “13”. Assim, eles não usam o andar 4, nem o andar 13, nem o andar 134, nem o andar 113, mas usam o andar 103. Assim, os primeiros andares são numerados 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, . . . Como o elevador espacial tem muitos andares, e eles precisam numerar todos os andares do elevador, os chineses pediram que você escrevesse um programa que, dado o andar, indica o número que deve ser atribuído a ele."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1595",
        "saida": "Imprima para cada caso o menor tempo necessário para se chegar ao fim em segundos, arredondado de duas casas decimais.",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso teremos os números inteiros S (1 ≤ S ≤ 100* ou 1 ≤ S ≤ 105**), C (0 ≤ C ≤ S) e R (0 ≤ R ≤ 100). Na linha seguinte, S inteiros seguirão separados por espaços em branco indicando a velocidade em cada parte do percurso. Para todos os casos considere 1 ≤ Vi ≤ 100. Sabemos que esta velocidade é grande, mas imagine que você é primo do The Flash. *ocorrerá em 90% dos casos; **ocorrerá nos casos restantes.",
        "titulo": "Humm.. Andar ou Correr.. Eis a Questão",
        "descricao": "Você está andando por São Carlos e percebeu que há momentos que anda mais rápido ou mais devagar, tudo depende se você está subindo ou descendo algum morro. O trajeto total feito por você tem S metros. Podemos separar o trajeto em partes de 1 metro, e na i-ésima dessas partes você anda a uma velocidade constante de Vi metros por segundo. Com essas informações e um pouco de Física básica você consegue calcular o tempo que levou até chegar no fim (tempo = distancia/velocidade). Agora, você resolveu correr! Para não cansar muito, você pode escolher correr em apenas C das S partes do trajeto. Ao correr, sua velocidade no trajeto é somada de R metros por segundo! Assuma que sua aceleração seja instantânea. Escolhendo a melhor estratégia de corrida possível, calcule o menor tempo que se leva para chegar ao destino."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1524",
        "saida": "Para cada instância, imprima uma única linha contendo o valor mínimo que a soma dos tamanhos dos K grupos pode ter.",
        "entrada": "A entrada é composta por diversas instâncias e termina com o final de arquivo (EOF). A primeira linha de cada instância contém os inteiros N, indicando o número de pessoas na fila, e K, indicando o número de grupos (1 ≤ K < N ≤ 1.000). Na linha seguinte são apresentados N − 1 inteiros, a2, . . ., aN, (0 ≤ a2 ≤ ··· ≤ aN ≤ 1.000.000) indicando as posições de cada pessoa em relação à primeira pessoa da fila A posição da primeira pessoa é omitido, pois é sempre zero.",
        "titulo": "Fila do Bandejão",
        "descricao": "Um fenômeno muito comum na fila do bandejão (também conhecido como restaurante universitário) é ver uma pessoa recém chegada entrar no interior na fila em vez de no final. Isso ocorre sempre que tal pessoa encontra alguém de seu grupo já na fila. Interessado em estudar esse fenômeno, um amigo pediu para você escrever um programa para estudar os grupos presentes na fila. Podemos supor que existem K grupos diferentes e toda pessoa pertence a exatamente um desses grupos. O tamanho de um grupo é definido pela distância entre as duas pessoas mais distantes dentro do grupo. Se o grupo consiste de apenas uma pessoa, seu tamanho é zero. Considerando que os grupos se organizam de forma que a soma dos tamanhos dos K grupos seja mínima, seu programa deve determinar qual é o valor dessa soma."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2124",
        "saida": "Para cada caso, você deverá imprimir um identificador \"Instancia K\", onde K é o número da caso atual. Na linha seguinte você deve imprimir \"sim\" se for possível atender pelo menos um desejo de cada convidado e \"nao\" caso contrário. Após cada caso, seu programa deve imprimir uma linha em branco.",
        "entrada": "A entrada é composta de diversas casos. Cada caso começa com um inteiro N (1 ≤ N ≤ 1000), indicando a quantidade de questionários recebidos pela Sra. Montagny. Cada uma das próximas N linhas contém dois nomes de comida indicando a preferência de cada convidado. Um nome de comida é uma sequencia de letras [a-z] com no máximo 20 letras. Quando o nome de uma comida é iniciado por ‘‘!’’ significa que o convidado deseja vetar a comida, caso contrário ele deseja selecionar.",
        "titulo": "Cardápio da Sra. Montagny!",
        "descricao": "Sra. Montagny é uma socialite de Quebec, que passa as férias em Banff, na sua mansão à beira do Lake Louise. Seus jantares são famosos porque ela com antecedência passa um questionário aos convidados onde os mesmos participam da escolha do cardápio. No questionário, a famosa magnata lista todos os pratos que poderá fazer no jantar, oferecendo uma coluna para o convidado selecionar o prato e outra para vetá-lo. É permitido fazer apenas duas escolhas no questionário, ou seja, cada convidado pode selecionar um prato e vetar outro, vetar dois pratos ou selecionar dois pratos. A Sra. Montagny garante que todos os convidados terão pelo menos um de seus desejos atendidos. Antigamente ela mesma dava conta de montar o cardápio e atender o que prometia, mas com o crescimento de suas festas isso tem se tornado impossível. Assim, ela resolveu contratar vocês para fazer um programa que recebe os pedidos dos convidados e responde se é possível montar o cardápio para a festa."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1312",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro representando o prêmio máximo que um competidor pode fazer a partir da pilha.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém um inteiro N representando o número de linhas da pilha (1 = N = 1000). A i-ésima das próximas N linhas contém i inteiros Bij(-105 ​≤ Bij ≤ 105 e 1 ≤ j ≤ i ≤ N); o número Bij é o valor da j-ésima bola na i-ésima linha da pilha (a primeira linha é a mais ao topo, e em cada linha a primeira bola é a mais a esquerda). O último caso de teste é seguido por uma linha contendo um zero.",
        "titulo": "Empilhamento de Bolas",
        "descricao": "O canal de TV XYZ está desenvolvendo uma novo game show, onde o competidor tem que fazer algumas escolhas de modo a obter um prêmio. O jogo consiste de uma pilha triangular de bolas, cada uma delas tendo um valor inteiro, como mostrado no exemplo a seguir. ​ O competidor deve escolher quais bolas ele irá levar e seu prêmio é a soma dos valores destas bolas. Entretanto, o competidor pode levar uma bola apenas se ele também levar todas as bolas diretamente acima dela. Isto pode requerer levar bolas adicionais usando a mesma regra. Note que o competidor pode escolher não levar bola alguma, caso no qual o prêmio é zero. O diretor do programa de TV está preocupado a respeito do prêmio máximo que um competidor pode obter dada uma pilha. Como ele é seu chefe e ele não sabe como responder essa questão, ele atribuiu esta tarefa a você."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1775",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #X: Y\", onde X é o número do caso atual, iniciando em 1, e Y é a quantidade mínima de vezes que André precisa parar para pegar mentos.",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 200), o número de casos de teste. Cada caso de teste começa com uma linha com um inteiro N, o número de mentos do tubo (1 ≤ N ≤ 1000). Na linha seguinte, há N inteiros, o i-ésimo deles é o número do sabor do i-ésimo mentos no tubo. Cada um desses números está entre 1 e 10⁹.",
        "titulo": "André e os Mentos",
        "descricao": "André é um maratonista do CIn-UFPE. Todo sábado, durante os treinos, ele come de tudo: salgadinho, refrigerante, biscoito, água e mentos. Principalmente mentos. Mas o problema, porém, é que toda vez que André vai tirar alguns mentos do tubo, ele tem que parar de codar por alguns instantes, o que atrapalha sua concentração. O mentos vem em um tubo com duas pontas. Cada vez que André quer chupar alguns, ele escolhe um certo sabor, e olha pra cada ponta do mentos. Em cada uma, se houver um mentos do sabor escolhido, ele pega. Se não houver nenhum daquele sabor nas pontas, ele não pega nenhum, e só parou de codar à toa. Para diminuir a perda de tempo durante o contest, André decidiu minimizar suas paradas para pegar mentos. Ele fez um corte fino ao longo do tubo, para poder ver com antecedência quais sabores tem dentro dele. Mas ele não vai pegar do meio, e fez isso apenas para poder decidir melhor quais sabores irá escolher tirar das pontas em cada uma de suas paradas. Agora, André precisa calcular o número mínimo de vezes que ele deve parar para pegar seus mentos, seguindo o método descrito, até eles acabarem. Ele calcularia isso facilmente usando Transformada de Fourier, mas ele está ocupado codando uma questão. Por isso cabe a você, um companheiro de time dele, fazer isso para ajudá-lo."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1579",
        "saida": "Para cada caso de teste de entrada, seu programa deverá imprimir uma linha, informando o peso do caminhão mais carregado seguido por um espaço e o valor total do frete cobrado pelo dia de trabalho.",
        "entrada": "A primeira linha de entrada contém um inteiro N que determina a quantidade de casos de teste (ou dias de trabalho no deserto). Cada caso de teste é composto por duas linhas. A primeira linha contém três valores inteiros nPaineis (4 ≤ nPaineis ≤ 100), caminhoes (1 ≤ caminhoes ≤ 10) e frete (1 ≤ frete ≤ 50) separados por um espaço, que indicam respectivamente a quantidade de painéis que devem ser transportados, número de caminhões utilizados para o transporte e o frete cobrado por cada caminhào para cada kg transportado. A linha seguinte contém o peso (1 ≤ peso ≤ 1000) de cada um dos painéis, separados por um espaço em branco.",
        "titulo": "Transporte de Painéis Solares",
        "descricao": "Há alguns anos, algumas empresas vem atuando forte na produção de energia baseada em painéis solares. Obviamente o local mais adequado para isso são os desertos. No deserto de Mojave, nos Estados Unidos, já foram instalados várias usinas para geração de energia solar, como por exemplo a usina Solar Nellis, que fica na Base Aérea de Nellis, em Clark County, Nevada. Esta usina gera mais de 30 milhões de quilowatts-hora de eletricidade por ano. O projeto de 100 milhões dólares americanos começou a produção de energia no final de 2007, a planta é alimentada por 72.000 painéis solares de rastreamento do sol cobrindo 140 acres. Além da Nellis, outras usinas como a Sierra Sun Tower, Copper Mountain, Solar One e outras foram construídas neste mesmo deserto. A Espanha já utiliza uma usina solar no deserto do Saara que foi construída pela Solar Millenium. O projeto deu tão certo que agora outras empresas estão iniciando novos projetos nesta região para gerar energia para a Europa. Bem, você possui uma empresa de transportes com muitos caminhões e foi contratado pela empresa Delta Solar fazer o transporte de painéis solares no Saara. Os painéis possuem tamanhos e pesos diferentes relacionados com a estrutura de cada conjunto de painéis, que muda de acordo com o local aonde deverão ser instalados. O transporte deles deverá ser feito na sequência correta, que é exatamente a sequência na qual eles aparecem na entrada. O cálculo do frete é feito de acordo com o peso dos painéis transportados pelos seus caminhões e a distância que os caminhões deverão percorrer. Foi acertado que você informe todo dia a quantidade de caminhões disponíveis (isso muda porque alguns vão para manutenção, outros novos chegam, etc) e um encarregado da Delta Solar vai tentar separar as cargas para minimizar o valor do transporte, uma vez que por um acerto inicial, pagarão o frete utilizando como referência a carga mais pesada transportada no dia, multiplicada pelo número de caminhões utilizados no trasporte."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1494",
        "saida": "Para caso de teste, seu programa deve imprimir uma linha de saída. Esta linha contêm um inteiro representando o número de anagramas-múltiplos-de-onze de N. Como essa número pode ser muito grande, você deve imprimir o resto da divisão dele por 10^9 + 7.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de uma linha com um inteiro N (1 <= N <= 10^100).",
        "titulo": "Onze",
        "descricao": "Neste problema, nos referimos aos dígitos de um inteiro positivo como uma sequência de dígitos necessária para escrevê-lo na base 10 sem zeros precedentes. Por exemplo, os dígitos de N = 2090 são 2, 0, 9 e 0. N é um inteiro positivo. Nós chamamos um inteiro positivo M como um anagrama-multiplo-de-onze de N se e somente se (1) os dígitos de M são um permutação dos dígitos de N, e (2) M é um múltiplo de 11. Você deve escrever um programa que dado N, calcula o número de anagramas-multiplos-de-onze. Como exemplo, considere novamente N = 2090. Os valores que atendem a primeira condição acima são 2009, 2090, 2900, 9002 9020 e 9200. Entre eles, somente 2090 e 9020 satisfazem a segunda condição, por isso a resposta para N = 2090 é 2."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1055",
        "saida": "Para cada caso, mostre o número do caso de teste seguido pela soma permutada elegante.",
        "entrada": "A primeira linha de entrada é um valor inteiro T ( T < 100 ) que representa o número de caso de testes. Cada caso de teste consiste de uma linha que inicia com n ( 1 < n < 51 ) seguida por n inteiros não-negativos, separados por um único espaço. Nenhum dos elementos da permutação fornecida irá exceder 1000.",
        "titulo": "Soma Permutada Elegante",
        "descricao": "São disponibilizados a você n inteiros A1 A2 A3 ... An. Encontre uma permutação destes n inteiros de forma que a soma da diferença absoluta entre os elementos adjacentes seja maximizada. Supondo n = 4 e que os inteiros fornecidos sejam 4 2 1 5. A permutação 2 5 1 4 permite a máxima soma. Para esta permutação, teríamos soma = abs(2-5) + abs(5-1) + abs(1-4) = 3+4+3 = 10. De todas as 24 permutações possíveis, você não vai obter qualquer soma cujo valor exceda 10. Nós iremos chamar este valor 10, de soma permutada elegante."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1608",
        "saida": "Para cada caso imprima o número máximo de bolos do mesmo tipo que podem ser confeccionados.",
        "entrada": "Na primeira linha terá um inteiro T (T ≤ 100) indicando o número de casos de teste. Para cada cada caso de teste, na primeira linha haverá três números inteiros D (1 ≤ D ≤ 109), I (1 ≤ I ≤ 100) e B (1 ≤ B ≤ 100) indicando o dinheiro que Dona Maria tem, o número de ingredientes existentes e a quantidade de tipo de bolos existentes, respectivamente. A próxima linha conterá I números inteiros indicando o preço da unidade de cada ingrediente. Seguem B linhas seguirão descrevendo cada bolo. O i-ésimo bolo é descrito da seguinte maneira: inicialmente há um número Qi (1 ≤ Qi ≤ 100) que indicará quantos ingredientes diferentes serão necessários. Logo em seguida teremos Qi pares de números indicando respectivamente o índice do ingrediente e a quantidade necessária, todos na mesma linha separados por espaços. A quantia de cada ingrediente em um bolo poderá variar de 1 até 1000. Cada unidade de um ingrediente custará entre 1 e 1000. Os ingredientes na descrição de cada bolo serão diferentes. Os identificadores de ingrediente vão de 0 até I-1.",
        "titulo": "Bolos da Maria",
        "descricao": "Dona Maria é uma senhora que está aposentada e faz doces. Ela começou a fazer bolos para complementar a renda da família. Para fazer um bolo, Dona Maria precisa de certa quantidade de alguns ingredientes diferentes. Cada ingrediente tem um custo fixo por unidade. Ela tem uma quantia de dinheiro D máxima para gastar na compra dos ingredientes. Dentre os tipos de bolos que existem, você deve escolher apenas um tipo, de maneira a maximizar a quantia de bolos. Calcule o número máximo de bolos de um único tipo que podem ser confeccionados."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2115",
        "saida": "Para cada instância seu programa deverá imprimir o menor instante em que a tarefa que for processada por último terminará seu processamento.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância começa com o número N (1 ≤ N ≤ 105) de tarefas que serão processadas no dia. As N linhas seguintes têm o tempo di em que a tarefa estará disponível e o tempo pi de processamento da tarefa na máquina (1 ≤ di, pi ≤ 104). O início do processamento se dá no instante 1.",
        "titulo": "Produção em Ecaterimburgo",
        "descricao": "Ecaterimburgo é uma cidade russa localizada na fronteira entre a Europa e a Ásia, nos montes Urais. É a quarta maior cidade da Rússia com mais de 1,4 milhões de habitantes. A principal atividade econômica da cidade está relacionada com a produção de máquinas industriais. As fábricas da cidade produzem boa parte de todas as máquinas usadas na Rússia e exportada para diversos países de todo o mundo. Em especial a produção de ferramentas industriais é famosa no país. As ferramentas são produzidas por máquinas altamente especializadas, e, para cada ferramenta a ser produzida as máquinas gastam um tempo pré-estabelecido para sua produção. Uma das fábricas possui apenas uma dessas máquinas e seu gerente precisa da sua ajuda para melhorar sua produtividade. Os pedidos de ferramentas chegam na fábrica de forma contínua, isto é, no início do dia nem todos os pedidos podem ser processados, pois estes estarão disponíveis ao longo do dia. O gerente acha que os funcionários não estão escolhendo bem a ordem na qual os pedidos são atendidos e quer analisar as sequências de pedidos de dias anteriores. Dessa forma, ele pede que você determine, para um dado dia, o menor instante possível em que todos os pedidos estariam finalizados."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1510",
        "saida": "Para cada caso teste imprima uma única linha com \"Case #R: S\" onde R é o número do caso teste (começando de 1) e S é o lucro máximo que Skyrk consegue obter. Considere o primeiro caso teste, existem 3 pontos turísticos, 4 binóculos e 2 grupos de turistas. O primeiro grupo de turistas é abordado da seguinte forma: O primeiro turista pode pagar no máximo 1 moeda. Não existe nenhum subconjunto que Skyrk possa escolher para satisfazer o turista, logo o turista não faz o passeio e não paga nada. O segundo turista pode pagar até 2 moedas, a única escolha que Skyrk tem é colocar os binóculos 2 e 4 no subconjunto, o turista então escolhe 2 e 4 e paga 2 moedas. O terceiro turista pode pagar até 3 moedas. Skyrk pode colocar os binóculos 1, 2 e 3 no subconjunto, o turista então escolhe binóculos 2 e 3 e paga 3 moedas. O segundo grupo de turistas é abordado da seguinte forma: O primeiro turista pode pagar até 10 moedas. Skyrk pode colocar binóculos 1 e 3 no subconjunto, o turista então escolhe binóculos 1 e 3 e paga 6 moedas. O máximo lucro que Skyrk pode obter é 2+3+6 = 11 moedas..",
        "entrada": "A primeira linha contém T (T ≤ 100) – o número de casos teste, após essa linha haverão T casos teste. Cada caso teste começa com uma linha com três inteiros N, M, K (1 ≤ N ≤ 109; 1 ≤ M ≤ 30; 1 ≤ K ≤ 104) – O número de pontos turísticos, binóculos e grupos de turistas, respectivamente. Então haverá M linhas com três inteiros A, B, C (1 ≤ A ≤ B ≤ N; 1 ≤ C ≤ 10) – O primeiro e último ponto turśtico que o binóculo pode ver e seu preço, respectivamente. Então haverá K linhas com dois inteiros X, Y (1 ≤ X ≤ Y ≤ 109) – haverá um grupo turístico onde o primeiro está disposto a pagar X, o segundo X+1, o terceiro X+2, até o último que está disposto a pagar Y. Cada ponto turístico pode ser visto por pelo menos um binóculo.",
        "titulo": "O Passeio Turístico",
        "descricao": "Skyrk agora está vivendo em uma cidade antiga, cheia de velhas histórias e monumentos para conhecer. Não é nenhuma surpresa que essa cidade se transformou em uma das maiores atrações turísticas do mundo. Infelizmente, é muito difícil de se locomover pela cidade, já que ela é muito antiga e cercada por montanhas, suas ruas são apertadas, cheias de curvas e sobes e desces. No entanto isso se mostrou muito interessante para Skyrk, ele acha que muitos turistas vão preferir ver os pontos turísticos olhando do topo das montanhas ao invés de se aventurarem na antiga cidade. Ele decidiu colocar vários binóculos em alguns lugares da maior montanha do lado da cidade, e claro, cobrar pelo seu uso. A cidade tem N pontos turísticos, olhando do topo da montanha, eles parecem se alinhar da esquerda para direta. Skyrk colocou M binóculos, cada um cobrindo a visão do ponto turístico A até o B e custando C moedas para usar. Um grupo de turistas chegou para apreciar a vista, e eles querem ver todos os pontos turísticos pagando o menor preço. Skyrk sabe previamente o preço que cada turista está disposto a pagar pelo passeio. De forma a maximizar seus lucros, ele vai contar ao turista que apenas um subconjunto de binóculos estão funcionando, de forma que quando o turista escolher os que ele quer, ele acabe pagando mais."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1878",
        "saida": "Para cada caso de teste, imprima a linha \"Lucky Denis!\" se a função pode ser usada por Denis, ou \"Try again later, Denis...\" em caso contrário.",
        "entrada": "A entrada é composta por vários casos de teste e termina com fim de arquivo. A primeira linha de um caso de teste é composta por dois inteiros N e M, que são respectivamente o número de torneios realizados por Denis e o número de alunos que irão competir em cada torneio, onde 1 ≤ N ≤ 3 e 1 ≤ M ≤ 10. Em seguida são dados N inteiros c1, c2, ..., cN, os coeficientes da função de Denis, onde ci ≥ 1 para todo i. Em um caso de teste, é garantido que os valores da função de Denis não passam de 109.",
        "titulo": "Torneios em Sequência",
        "descricao": "Denis é um professor de programação competitiva muito justo. Em sua disciplina, ele faz uma sequência de N torneios de programação para avaliar seus M alunos. A última ideia de Denis foi premiar os três alunos que se saírem melhor nos torneios. Para isto, Denis teve a ideia de criar a seguinte função classificatória. f(T1,T2,...,TN) = c1T1 + c2T2 + ... + cNTN Na função, a N-upla (T1,T2,...,TN) indica as classificações de um aluno nos N torneios. Por exemplo, se há dois torneios, um aluno fica em terceiro lugar no primeiro torneio e em primeiro lugar no segundo torneio, seu par ordenado é (3, 1). Como Denis quer ser o mais justo possível, ele não quer que haja possibilidade de empate. Como ele também está com preguiça de tentar provar que sua função é livre de empates, ele pediu a sua ajuda para fazer um programa que, dados os coeficientes c1, c2, ..., cN, determine se a função pode de fato ser usada para classificação. Ou seja, se a função não irá classificar dois alunos distintos igualmente. Observe que o software utilizado por Denis para classificar seus alunos em um torneio é livre de empates. Ou seja, não é possível que dois alunos fiquem em primeiro lugar em um mesmo torneio, ou em segundo lugar, etc."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1784",
        "saida": "Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é a resposta da questão.",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com um inteiro N (1 ≤ N ≤ 9), o número de jacutingas e de jaburus. A segunda linha do caso de teste contém N inteiros Pi (1 ≤ Pi ≤ 10⁴), como descrito na questão. A terceira e última linha do caso de teste contém mais N inteiros Ci (1 ≤ Ci ≤ 10⁴), como também descrito na questão.",
        "titulo": "Jacutingas vs Jaburus",
        "descricao": "Há N jacutingas em uma floresta, cada um em sua respectiva árvore. Há N jaburus cansados voando nesta floresta, e eles desejam pousar em árvores diferentes o mais cedo possível (jaburus são muito briguentos e não conseguem dividir uma mesma árvore). A cada Pi minutos, a jacutinga i sai da árvore para voar um pouco, e pode-se considerar que ela volta instantaneamente. A cada Ci minutos, o jaburu i pode tentar pousar em uma árvore em que a jacutinga não se encontre, e caso não consiga, volta instantaneamente a voar. Pode-se considerar que jaburus voam mais rápido que jacutingas e conseguem ocupar as árvores mais rápido do que elas. Dado uma estratégia ótima entre os jaburus, qual o menor tempo em que todos os jaburus estarão relaxando, cada um em uma árvore diferente?"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1602",
        "saida": "Para cada instância, imprima uma linha com a quantidade de hiperprimos no intervalo [2, N].",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de uma única linha contendo um único inteiro, N (2 ≤ N ≤ 2 × 106).",
        "titulo": "Hiperprimos",
        "descricao": "Várias descobertas matemáticas da idade média são devidas a matemáticos árabes famosos como al-Khwarizmı 1, Omar Khayyám, e Sharaf al-Dın al-Tusı entre outros. Um dos resultados pouco conhecido é sobre os números hiperprimos. Dizemos que um número é hiperprimo se ele tiver um número primo de divisores. Assim, por exemplo, 25 é hiperprimo, pois tem 3 divisores. Já 42 não é hiperprimo, pois tem 8 divisores. Dado um inteiro N, determine o número de hiperprimos no intervalo [2, N]."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1833",
        "saida": "Para cada caso de teste deve ser impressa a mensagem \"Caso #t: R$ C\", onde t é o número do caso de teste (cuja contagem tem início no número um) e C é o valor do serviço, com duas casas decimais, representando os centavos, sem separador de milhar e com a vírgula separando os reais dos centavos. Ao final de cada mensagem deve ser impressa uma quebra de linha.",
        "entrada": "A entrada consiste em T (T ≤ 1.000) casos de teste, onde o valor de T é informado na primeira linha da entrada. Cada caso de testes é representado por até cinco linhas: a primeira delas contém o valor R (1 ≤ R ≤ 10), em reais, que a empresa cobra por minuto de serviço. A linha seguinte contém o número M (0 ≤ M ≤ 100) de lâmpadas da sequência errada, e as M cores desta sequência são dadas na linha abaixo (caso M seja maior do que zero), separadas por espaços em branco. Estas cores são strings de caracteres de tamanho S (1 ≤ S ≤ 50) e há, no máximo, 20 cores distintas em cada caso de teste. De forma semelhante, as últimas duas linhas do caso de teste contém a quantidade N (0 ≤ N ≤ 100) de lâmpadas da sequência desejada e a relação das N cores que deve compôr a montagem final.",
        "titulo": "Decoração Natalina",
        "descricao": "Maria bem que tentou ajustar a decoração natalina de seu comércio, mas o resultado final não a agradou: o jeito foi contratar uma empresa especializada no ramo de decorações natalinas. O serviço que ela precisa é simples até: colocar N luzes de pisca-pisca coloridas em uma dada sequência, mas seus ajudantes conseguiram apenas colocar M lâmpadas em uma sequência que não era a desejada. A empresa conta com profissionais do ramo, que fazem o serviço com rapidez e eficiência, e tarifa seu serviço pelo tempo que o profissional levaria para concluí-lo se trabalhasse de maneira ótima. No caso de montagem de pisca-pisca, o profissional leva 30 segundos para remover uma lâmpada já instalada, um minuto para trocar uma lâmpada já instalada por outra de outra cor e dois minutos e meio para inserir uma nova lâmpada na armação (esta tarefa demanda mais tempo que as demais porque é necessário inserir um novo contato na fiação). Dado o valor cobrado pela empresa para cada minuto de trabalho, em reais, a sequência desejada de N lâmpadas e a sequência de M lâmpadas montadas na ordem não desejada, calcule o valor do serviço da empresa, em reais."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1416",
        "saida": "Para cada caso de teste da entrada imprima dois inteiros positivos separados por um espaço, indicando a menor e a maior penalidade por erro que não alteraria a colocação final. Se não existir um limite superior para a penalidade por erro, imprima um \"*\" ao invés do limite superior.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de cada caso de teste contém dois inteiros T e P separados por um espaço, indicando o número de times e o número de problemas, respectivamente (2 ≤ T ≤ 100, 1 ≤ P ≤ 10). Cada uma das próximas T linhas descreve a performance de um time. A descrição da performance de um time é uma linha contendo P descrições de problemas separados por um espaço em branco. Os times não são necessariamente dados na ordem da colocação final. A descrição de cada problema é uma string \"A/S\", onde A é um inteiro representando o número de tentativas que o time correspondente fez para resolver o problema (0 ≤ A ≤ 100), e S pode ser tanto \"-\", se o time não resolveu o problema, ou um inteiro indicando quantos minutos o time demorou para submeter um solução correta (1 ≤ S ≤ 300). Tentativas feitas depois da primeira correta não são contadas. O final da entrada é dado por T = P = 0.",
        "titulo": "Placar do ICPC",
        "descricao": "Charles é o diretor de torneio do torneio regional do ICPC de Tumbolia. Sua responsabilidade é garantir que o torneio corra perfeitamente, que as regras sejam seguidas, e, claro, anunciar o placar final da competição. De acordo com as regras do ICPC, um time com mais problemas resolvidos fica acima de um time com menos problemas resolvidos. Se dois times têm o mesmo número de problemas resolvidos, o time com a menor penalidade fica acima (no caso de os dois times terem o mesmo número de problemas resolvidos e a mesma penalidade, Charles considera eles empatados). A penalidade total de um time é a soma da penalidade de todos problemas que o time resolveu. A penalidade de um problema é TP + EP x FA, onde TP é a penalidade de tempo para aquele problema, EP é a penalidade de erro do competidor e FA é o número de tentativas frustradas de resolver o problema antes de submeter uma solução certa. A penalidade de tempo para um problema é o tempo desde o início da competição, em minutos, que time demorou para resolver o problema. A penalidade de erro é um inteiro positivo escolhido pelo diretor do torneio, designada para premiar times que submetam soluções corretas na primeira tentativa. Charles quer mudar a penalidade de erro do valor \"padrão\" de 20 minutos para esquentar as coisas. Para estudar os efeitos dessa mudança no placar final, ele quer saber o limite de penalidades de erro que não mudam as posições finais. Em outras palavras, se o time A está na frente do time B no placar original, então A deve estar na frente de B no placar modificado; se A e B estão empatados no placar original, eles devem estar empatados no placar modificado (o placar original é aquele obtido com uma penalidade de erro de 20 minutos). Charles está muito ocupado organizando a regional Tumboliana, então ele pediu para você fazer um programa que vai calcular o limite para ele."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1473",
        "saida": "Seu programa deve produzir uma única linha para cada caso de teste, contendo um único inteiro, o número mínimo de trocas de linhas e colunas que devem ser realizadas pelo guindaste para recolocar os contêineres na posição original. Se não for possível colocar os contêineres na posção original, utilizando apenas trocas de linhas e colunas, imprima o caractere ‘*’.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros L e N (1 ≤ L, N ≤ 300) indicando respectivamente o número de linhas e o número de colunas do carregamento. As L linhas seguintes descrevem a posição dos contêineres depois do protesto dos estivadores. Cada uma dessas L linhas contém C números inteiros Xl,c (1 ≤ Xl,c ≤ LC) indicando a posição de um contêiner. Cada número inteiro entre 1 e LC aparece na entrada, em alguma das L linhas. É garantido que cada número na configuração apareça uma única vez cada e que todos os números entre 1 e LC aparecerão na mesma. O final da entrada é determinado por EOF (fim de arquivo).",
        "titulo": "Linhas de Contêiners",
        "descricao": "Um carregamento de Nlogs, principal produto de exportaçãao de Nlogônia, está no porto, em contêineres, pronto para ser embarcado. Todos os contêineres têm as mesmas dimensões e são cubos. Os contêineres estão organizados no pátio do porto em L linhas e C colunas, num total de LC contêineres. Cada contêiner está marcado com um número de identificação distinto, de 1 a LC. Cada uma das L Linhas de Contêiners será embarcada em um navio distinto. Para facilitar o desembarque nos divesos países em que serão entregues, os containeres de uma linha devem estar organizados de forma que os números de identificação estejam ordenados. Mais precisamente, a linha 1 foi organizada no pátio de forma a conter os contêineres identificados de 1 a C ordenados crescentemente, a linha 2 de forma a conter os contêineres de C + 1 a 2C (ordenados crescentemente), e assim por diante, até a linha L, organizada de forma a conter os contêineres de (L − 1)C + 1 a LC (ordenados crescentemente). A figura (a) abaixo mostra a organização de um carregamento com 5 linhas e 4 colunas de contêineres. O guindaste de embarque é capaz de movimentar ou uma linha completa ou uma coluna completa de contêineres, não sendo capaz de movimentar outros tipos de agrupamentos ou contêineres individuais. Na noite anterior ao embarque, um grupo de estivadores operou os guindastes para trocar linhas e colunas do carregamento, como forma de protestar quanto aos baixos salários. A figura (b) acima mostra a configuração dos contêineres após a troca das linhas 1 e 4; a figura (c)mostra a configuração após mais uma troca, entre as colunas 2 e 3. O carregamento precisa ser embarcado ainda hoje, mas antes disso é necessário que os contêineres sejam reorganizados da forma descrita. Você deve escrever um programa que, dada a informação sobre a posição de cada contêiner após o protesto, determine se é possível recolocar os contêineres na forma originalmente prevista utilizando apenas os guindastes, e nesse caso calcular o menor número de trocas de linhas e colunas necessário para esse fim."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1777",
        "saida": "Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é o número de estrelas que estão cobertas por alguma câmera.",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com dois inteiros N (1 ≤ N ≤ 10⁹) e C (1 ≤ C ≤ 10⁴), o tamanho da calçada e o número de câmeras, respectivamente. A seguir há C linhas, cada uma descrevendo uma câmera i com dois inteiros ai e bi (1 ≤ ai ≤ bi ≤ N), representando o intervalo coberto pela câmera. A seguir, há um número E (1 ≤ E ≤ 10⁴), o número de estrelas. A seguir há uma linha com E inteiros xi, indicando a posição da estrela i na calçada (1 ≤ xi ≤N).",
        "titulo": "Calçada da Fama",
        "descricao": "Na calçada da fama, há várias estrelas no chão com os nomes dos artistas. Alguns vândalos, talvez por inveja ou talvez pelo simples fato de querer vandalizar, estavam pichando várias dessas estrelas e colocando outros nomes no lugar: O prefeito, afim de tentar minimizar esse problema, instalou várias câmeras nessa calçada. A calçada pode ser vista como um segmento [1..N], onde cada posição possivelmente se encontra uma estrela. Cada câmera protege um segmento [a..b], inclusivos. Deseja-se saber, para cada estrela, se elas estão cobertas por uma câmera ou não. Você foi contratado para fazer esse trabalho."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2099",
        "saida": "Imprima uma linha contendo um inteiro representando o número de diferentes formas de distribuir N pedras nas montanhas para que Jaimito garanta a vitória no jogo contra Jimenez. Como a resposta pode ser um número muito grande, você deve imprimir apenas o resto de sua divisão por 109 + 7.",
        "entrada": "Uma única linha contendo um número inteiro N indicando o número de pedras que possui Jaimito (2 ≤ N ≤ 1000).",
        "titulo": "Jogando Com Pedras",
        "descricao": "O Jaimito adora brincar com N pedras idênticas que lhe deram para empilhar em seu aniversário para formar montanhas de vários tamanhos. Sua felicidade seria completa se não fosse por sua mãe, Jimenez, que sempre lembra que no final de cada dia vem a Hora de Organizar as Pilhas (HOP). É neste ponto que Jaimito deve destruir as montanhas de pedras, construídas com tanto esforço. Como Jimenez sabe o quanto a HOP incomoda o seu filho, propõe um jogo para a tarefa se torna mais divertida. Jaimito e sua mãe têm turnos para jogar, com Jaimito começando o jogo por ser o mais novo. Inicialmente, há várias montanhas, cada uma composta por um determinado número de pedras. Por sua vez, cada jogador escolhe uma montanha que tem mais do que uma pedra e a divide para formar duas montanhas, não necessariamente do mesmo tamanho. O jogo continua até que um dos dois jogadores não pode fazer um movimento válido, no qual o jogador é declarado o perdedor, e o outro como vencedor. Jaimito é muito inteligente, e se deu conta de que ele pode distribuir N pedras para formar montanhas estrategicamente, de modo que quando você começar a jogar com esta distribuição, você irá garantir a vitória na HOP. Por causa da forma como o jogo funciona, Jaimito não considera que duas distribuições iniciais são diferentes se diferem apenas na ordem em que se encontram as montanhas. Isto significa que para considerar duas distribuições iniciais diferentes, elas devem ter diferentes números de montanhas, ou, se o número de montanhas é o mesmo, devem ser as pedras distribuídas de forma diferente dentro das montanhas. Por exemplo, se Jaimito tem N = 4 pedras, existem cinco distribuições iniciais diferentes: quatro montanhas de uma pedra; duas montanhas de uma pedra e mais uma com duas pedras; uma montanha de uma pedra e uma com três pedras; duas montanhas de duas pedras; e, por último, uma montanha com quatro pedras. Como Jaimito não gostaria que sua mãe percebesse que está sendo enganada, ele pretende alterar a distribuição inicial de N pedras todos os dias. Ele está convencido de que existem muitas distribuições iniciais diferentes que garantem ganhar o jogo, mas ainda não sabe com certeza quantos. Por exemplo, se n = 4 pedras, Lourie tem apenas duas escolhas possíveis: uma única montanha com quatro pedras ou duas montanhas com duas pedras. A tarefa de sua equipe neste problema é ajudar Jaimito na contagem de quantas maneiras diferentes pode distribuir suas N pedras nas montanhas de modo ter garantido a vitória no jogo contra Jimenez. Então Jaimito pode ficar tranquilo sabendo quantos dias pode ganhar o jogo sem a mãe suspeitar de suas boas intenções."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2105",
        "saida": "Para cada instância na entrada, imprima uma linha com N inteiros p1, p2, ... , pN, onde pk é a probabilidade (em porcentagem) de, após infinitas rodadas, o jogador parar na casa k. Os números devem estar separados por espaços e ter 3 casas decimais.",
        "entrada": "A entrada contém várias instâncias. Cada instância é composta por duas linhas. Na primeira linha, serão dados dois números inteiros N (3 ≤ N ≤ 1000) e D (3 ≤ D ≤ 20), separados por um espaço em branco, indicando respectivamente a quantidade de casas no tabuleiro e o número de lados no dado. Na segunda linha serão dados N números inteiros a1, a2, ... aN (-1 ≤ ai ≤ N-1) separados por espaços em branco, que é a descrição do tabuleiro como explicado no enunciado. A entrada termina quando N = D = 0.",
        "titulo": "Monopólio",
        "descricao": "A Maratona de Programação é um evento que acontece todos os anos com a ajuda de organizações e pessoas que são entusiastas da idéia de competições científicas. Dentre as motivações para participar dela, estão o aumento dos conhecimentos relacionados a algoritmos (e todas as àreas da matemática em geral), a melhora na estrutura de raciocínio, a melhora na velocidade de digitação e também a rede social criada com pessoas de alto nível na área de computação. Para os competidores da Unicamp, no entanto, a motivação é outra. O que leva essas pessoas a participarem da maratona é a oportunidade de viajar para ficar num hotel jogando jogos de tabuleiro. Na última maratona houve competições acirradas de várias modalidades de jogos, entre eles um chamado Banco Imobiliário. O objetivo desse jogo é garantir o maior acúmulo de capital possível através de especulação imobiliária. André foi um dos participantes do jogo, e acabou perdendo todas as partidas para seu colega de time Felipe, que foi acusado de bruxaria pela magnitude das vitórias obtidas, num jogo que teoricamente depende apenas de sorte e persuasão. Uma das coisas que mais indignou André foi ele não ter conseguido comprar os terrenos mais caros, enquanto Felipe sempre os comprava. Felipe tentou convencer André de que não praticava mais bruxaria há anos, e que ele não caiu nos territorios caros porque a probabilidade era muito pequena. Para ajudar Felipe a convencer André das probabilidades no tabuleiro, você escreverá um programa que, dada a descrição de um tabuleiro, calcule qual é a probabilidade de se cair numa determinada casa do tabuleiro após infinitas rodadas. O tabuleiro é descrito como uma sequencia de N casas. O tabuleiro é circular, ou seja, após a N-ésima casa, você vai para a primeira casa. Algumas casas são especiais, e te mandam imediatamente para outra casa. No início do jogo, todos estão na casa número 1, e a cada rodada os jogadores lançam um dado de D lados, que vai dizer quantas casas o jogador deve avançar. A descrição do tabuleiro é uma sequência de N inteiros, cada inteiro é: -1 se é uma casa normal; K se for uma casa especial, onde K é um inteiro representando o índice da casa para onde o jogador será imediatamente enviado (o índice da primeira casa é 0). A K-ésima casa é uma casa normal. Por exemplo, se o tabuleiro for descrito como -1 -1 0 1 -1 0, temos um tabuleiro com 6 casas, sendo que a primeira, a segunda e a quinta casa são normais. Se o jogador cai na terceira ou sexta casa, é enviado imediatamente (na mesma rodada) para a casa de índice 0 (a primeira). Se cai na quarta casa, é enviado para a casa de índice 1 (a segunda). Além disso, será dada a quantidade de lados do dado usado, que podem ter de 3 a 20 lados."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1474",
        "saida": "Como o número de formas diferentes de se formar a fila pode ser muito grande, Ricardinho está interessado nos últimos 6 dígitos da quantidade. Assim, para cada caso de teste, seu programa deve produzir uma única linha contendo exatamente 6 dígitos, correspondentes aos últimos dígitos da solução.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por apenas uma linha, contendo três inteiros N(5 ≤ N ≤ 1015 e N é múltiplo de 5), K(1 ≤ K ≤ 1015) and L(1 ≤ L ≤ 1015), separados por espaço. O inteiro N representa o comprimento total, em metros, da fila que Ricardinho está considerando. K e L representam o número de cores distintas disponíveis para micro-ônibus e ônibus, respectivamente. Note que, como os inteiros N,K e L podem ser muito grandes, recomenda-se o uso de inteiros de 64 bits. O final da entrada é determinado por EOF.",
        "titulo": "Ônibus",
        "descricao": "Competições de programação normalmente exigem infraestrutura e organização por parte dos responsáveis. Um problema que frequentemente deve ser resolvido é em relação ao transporte. Ao participar de uma competição recente, Ricardinho ficou observando os ônibus e micro-ônibus utilizados no transporte dos competidores, todos enfileirados um atrás do outro enquanto os competidores desembarcavam. Os veículos eram todos de uma mesma empresa, embora tivessem pinturas distintas. Ricardinho começou a se perguntar de quantas maneiras aquela fila poderia ser formada, usando ônibus e micro-ônibus daquela empresa. Cada ônibus tem 10 metros de comprimento. Já os micro-ônibus possuem 5 metros de comprimento. A partir de um dado comprimento total a ser alcançado com ônibus e micro-ônibus enfileirados, e das quantidades de cores diferentes para ônibus e micro-ônibus, Ricardinho quer saber de quantas formas uma fila pode ser formada."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1203",
        "saida": "Para cada caso de teste imprima uma linha apenas com \"S\" (aspas apenas para evidenciar), se é possível escolhermos as regiões da maneira descrita anteriormente, ou \"N\" (idem), se não for possível.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada caso de teste contém dois números, R (2 ≤ R ≤ 100) e K (1 ≤ K ≤ R * (R-1) / 2), o número de regiões e pontes da cidade, respectivamente. Por efeito de simplificação, as regiões são enumeradas de 1 até R, inclusive. A seguir temos K linhas, cada uma delas contendo dois números A e B, informando que existe uma ponte ligando as regiões A e B da cidade.",
        "titulo": "Pontes de São Petersburgo",
        "descricao": "Todos conhecem o famoso problema das pontes de Königsberg, cidade da Prússia que ficou famosa pelo problema resolvido por Euler ainda no século XVIII. Poucos conhecem, entretanto, o problema das pontes de São Petersburgo. A cidade de São Petersburgo localiza-se às margens do Rio Neva, e é cruzada por dezenas de pontes que ligavam as margens do rio às centenas de pequenas ilhas que o rio possui. Os moradores da cidade, conhecedores do famoso problema das pontes de Königsberg, criaram seu próprio problema. Os moradores sabem que existem K pontes na cidade, que são R regiões distintas na cidade e que cada ponte liga exatamente 2 regiões distintas da cidade. Os moradores querem saber se, para a cidade deles, é possível escolher algumas destas regiões tais que o número de pontes que incide em todas elas é igual a K. Note que, se duas destas regiões escolhidas tiverem uma ponte entre elas, esta ponte será contada duas vezes."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2119",
        "saida": "A saída do número de vezes Goão pode utilizar a via desejada módulo 109 + 9.",
        "entrada": "A entrada começa com três inteiros N (N ≤ 10000), M (N ≤ 100000) e K (K ≤ 1000), respectivamente, o número de andares, o número de escadas e o número de diferentes tamanhos de salto de Goão. A linha a seguir contêm K numeros, as alturas dos saltos de Juilherme. Os últimos M linhas contêm três inteiros, A, B e C (0 ≤ A ≠ B ≤ N - 1, 1 ≤ C ≤ 1000), descrevendo que uma escada conecta andares A e B e tem etapas C, Juilherme começa sempre piso 0 e o escritório de Mena é no piso N - 1.",
        "titulo": "Goão e Escadas",
        "descricao": "Goão Juilherme é um estudante na Organização Educacional Farias Brito. Uma vez que ele falta muitas aulas, seu supervisor Parcelo Mena pede-lhe constantemente para ir ao seu escritório para repreendê-lo. Farias Brito é uma escola bastante estranha, tendo muito mais escadas do que pisos, e algumas escadas vão diretamente de um andar para outro muitos níveis acima. Goão não gosta de mudanças, então ele decide que quer usar apenas a mesma rota para chegar ao escritório de Parcelo, no entanto, ele não quer fazer a mesma coisa todos os dias. Goão então resolve ele vai subir as escadas de diferentes maneiras, às vezes ele vai saltar dois degrau e em seguida, subir apenas um ou ele pode subir um e saltar dois ou ainda subi um e depois um e assim por diante. Juilherme agora precisa de sua ajuda para determinar a rota que ele pode usar a maior quantidade de vezes antes que ele tenha de repetir a maneira como ele sobe uma escada dela. Uma vez que ele tem uma memória finita, ele só se preocupa com o quantidade modulo 109 + 9. Nota: Para subir uma escada, a soma dos tamanhos de saltos que Goão usa deve ser igual a quantidade de passos na escada."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2036",
        "saida": "Para cada teste, você deve imprimir uma linha contendo um único número inteiro, que representa o número mínimo de peças que têm de ser deslocadas, de modo a manter a distância entre peças consecutivas sempre inferior ou igual a H. Note que a primeira e a última peça não podem ser movidas, e que a ordem relativa entre as peças não pode ser alterada. Se for impossível alcançar o resultado desejado, imprimir o número -1.",
        "entrada": "Cada caso de teste é descrito usando duas linhas. A primeira linha contém dois números inteiros N e H, indicando, respectivamente, o número de peças na linha (3 ≤ N ≤ 1000) e sua altura (1 ≤ H ≤ 50). A segunda linha contém N-1 inteiros Di, que representam as distâncias entre pares de peças consecutivas de dominó, na ordem dada pela linha (1 ≤ Di ≤ 100 para i = 1, 2, ..., N-1). O fim da entrada é indicado por uma linha que contém duas vezes o número -1.",
        "titulo": "Efeito Dominó",
        "descricao": "O efeito dominó é um fenômeno que ocorre quando, em uma linha de peças de dominó, cada uma sobre o seu menor lado, a primeira peça a partir de uma das extremidades cai em direção à próxima peça. Por sua vez, esta segunda peça cai sobre a terceira na linha, e assim por diante até que a outra extremidade da linha seja atingida, e então todas as peças terão caído. Note que para que isso aconteça, a distância entre as peças consecutivas na linha deve ser menor ou igual à altura das peças. Emma encontrou recentemente sobre o efeito dominó e foi imediatamente surpreendida por ele. Ela passou toda a manhã formando uma linha com N peças de dominó que seu irmão Ezequiel deu a ela, mas pouco antes de fazer a primeira peça cair, sua avó foi a casa dela e levou-a para brincar no parque. Ezequiel sabe que Emma não levou em conta a distancia entre as peças consecutivas quando ela formou sua linha de dominó, e não quer vê-la frustrada se todas as peças não caírem depois que ela derrubar a primeira. Assim, Ezequiel quer mover algumas peças de dentro da linha para que a distância entre peças consecutivas é sempre menor ou igual à sua altura H. Para que Emma não descubra que ele moveu algumas peças, ele irá deixar a primeira e a ultima peça onde elas estão, e ele deseja também mover o mínimo possível de peças de dentro da fila. Qual é o numero mínimo de peças que ele deve mover?"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1603",
        "saida": "Para cada instância imprima -1, se não é possível transformar o canal fechado no aberto, ou o menor índice do vértice do canal fechado que coincide com primeiro vértice do canal aberto após a transformação.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros Nf (3 ≤ Nf ≤ 20.000) e Na (2 ≤ Na ≤ 5.000), correspondendo ao número de vértices dos canais fechado e aberto, respectivamente. A linha seguinte contém Nf pares de inteiros (xi , yi) (−10.000 ≤ x, y ≤ 10.000), cada par representando a coordenada de um vértice do canal fechado. No canal fechado a água sempre flui no sentido anti-horário e os vértices são númerados de 1 a Nf . A terceira e última linha contém Na pares de inteiros (xi , yi) correspondendo aos vértices do canal aberto.",
        "titulo": "Canais de Qanat",
        "descricao": "A medina de Marrakech é formada pela cidade fortificada, patrimônio universal da Unesco desde 1995. O início de sua construção remonta à fundação da cidade no século XI e inclui vários monumentos impressionantes, como a mesquita de Koutoubia, madraçal de Ben Youssef, e o Palácio Bahia. Várias histórias cercam os monumentos que formam a medina. A mais interessante diz respeito os jardins Ménara. O parque tem hortas e lagos artificiais construídos na época do sultão. Abd-el-Rhaman, que era um apaixonado por desafios matemáticos. Um dos mais brilhantes é o dos conjuntos de canais de qanat (قناة). Cada conjunto é formado por um canal fechado e um canal aberto. O canal fechado tem o formato de um polígono e o canal aberto consiste de uma sequência de arestas formando um caminho. O desafio é determinar se é possível transformar o canal fechado no canal aberto através de operações mentais sobre o canal fechado, como de remoção de vértices e arestas, translações e rotações (no plano). Os canais são dados através das coordenadas dos seus vértices e a ordem na qual os vértices são dados indica o sentido do fluxo de água. Consideramos que é possível transformar o canal fechado no aberto se após a aplicação das operações, o canal resultante tem as mesmas coordenadas e a água flui no mesmo sentido. Figura 1. Ilustração primeiro (esq.) e segundo (dir.) exemplos de entrada."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1372",
        "saida": "Para cada caso de teste da entrada, seu programa deve imprimir uma única linha, contendo um único valor, o inteiro indicando o número máximo de doces que Charlie pode pegar.",
        "entrada": "A entrade contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros M e N (1 ≤ M x N ≤ 105), separados por um espaço, indicando o número de linhas e colunas, respectivamente. Cada uma das M linhas seguintes contém N inteiros separados por espaço, cada uma representando o número inicial de doces na caixa correspondente. Cada caixa terá inicialmente pelo menos 1 e no máximo 103 doces. O final da entrade é indicado por uma linha contendo dois zeros separados por um espaço.",
        "titulo": "Doces",
        "descricao": "Pequeno Charlie é um bom garoto viciado em doces. Ele até assina a Revista Todos Doces (All Candies Magazine) e foi selecionado para participar na Competição Internacional de Coleta de Doces (International Candy Picking Contest). Nessa competição um número aleatório de caixas contendo doces são dispostas em M linhas com N colunas cada (então, existe um total de M x N caixas). Cada caixa tem um número indicando quantos doces ela contém. O competidor pode pegar uma caixa (qualquer uma) e pegar todos os doces dentro dela. Mas existe uma sacada (sempre existe uma sacada): quando uma caixa é escolhida, todas as caixas das linhas logo acima e logo abaixo são esvaziadas, assim como as caixas à direita e à esquerda da caixa escolhida. O competidor continua pegando uma caixa até que não hajam mais doces. A figura abaixo ilustra isso, passo a passo. Cada célula representa uma caixa e o número de doces que ela contém. A cada passo, a caixa escolhida é circulada e as células sombreadas representam as caixas que serão esvaziadas. Após oito etapas o jogo acaba e Charlie pegou 10 + 9 + 8 + 7 + 6 + 10 + 1 = 54 doces. ​ Para pequenos valores de M e N, Charlie consegue achar o número máximo de doces que ele consegue coletar facilmente, mas quando os números são muito grandes ele começa a se perder. Você pode ajudar Charlie a maximizar o número de doces que ele pode pegar?"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1637",
        "saida": "Para cada caso teste imprima uma linha como o tamanho mínimo de uma codifição da determinada sequência da entrada.",
        "entrada": "A entrada contém vários casos teste. Cada casos teste inicia com uma linha contendo um inteiro n, (1 ≤ n ≤ 128). A próxima linha contém os c1, ..., cn (0 ≤ ci ≤ 10000). A entrada termina com n = 0.",
        "titulo": "Codificação Gamma de Elias",
        "descricao": "O código gamma de Elias é um código simples que pode ser usado para codificar uma sequência de inteiros positivos. Iremos utilizar um código modificado que também é capaz de codificar zeros.Para codificar um inteiro n, faça o seguinte: Seja k o numero de bits de n Escreva k-1 zeros seguido por 1 Escreva n em binário Exemplos Número Binário Número de bits Prefixo Código 0 0 1 1 10 1 1 1 1 11 2 10 2 01 0110 3 11 2 01 0111 4 100 3 001 001100 5 101 3 001 001101 6 110 3 001 001110 7 111 3 001 001111 8 1000 4 0001 00011000 Uma sequência de inteiros é codificada escrevendo os códigos dos inteiros individuais da sequência na mesma ordem em que os inteiros aparecem na sequência. O prefixo de k bits a mais, antes da representação binária de cada inteiro, é necessário para poder decodificar os inteiros codificados. Então, quando estiver lendo a codificação de uma sequência de inteiros, se lermos k-1 zeros seguido por um, isso significa que existem k bits seguintes, que são a representação binária do próximo inteiro codificado. Se quisermos diminuir o tamanho da codificação da sequência de inteiros, pode haver ainda algum espaço para melhorias vamos considerar as duas otimizações seguintes: Se houver um prefixo que indica os k bits seguintes, mas se não tiver um inteiro na sequência com k bits, podemos usar este prefixo para indicar que seguem k+1 bits. Se já houver um prefixo que indica que seguem k+1 bits, esse prefixo não será mais necessário e poderá ser usado para indicar que seguem k+2 bits, e assim por diante. Podemos adiciona um zero a esquerda da representação binária de todos os inteiros na sequência com k bits, que então torna-se inteiros com k+1 bits, e então a primeira otimização pode ser usada. A otimização parece especialmente útil se houver alguns inteiros com k bits, mas muitos inteiros com mais de k bits. Quando estivermos diminuindo o tamanho da codificação da sequência de inteiros, nós apenas devemos ter cuidado sobre quantos inteiros na sequência tem um certo número de bits. Seja ci o número de inteiro na sequência com i bits. Vejamos o seguinte exemplo c1 = 2, c2 = 4, c3 = 0, c4 = 1 (que, por exemplo, poderia corresponder a sequência 2, 1, 3, 8, 0, 2, 3). Com o original código gamma de elias, a codificação da sequência deveria ter tamanho 2 × (1 + 1) + 4 × (2 + 2) + 0 × (3 + 3) + 1 × (4 + 4) = 28. Usando a otimização 1 podemos salvar 1 bit usando o prefixo 001 para o inteiro com 4 bits. Então, poderíamos usar a otimização 2 e adicionar zeros a esquerda do inteiro com 1 bit, fazendo-os usar 2 bits. Então, usamos a otimização 1 e o prefixo 1 para inteiros com 2 bits, prefixo 01 para inteiros com 4 bits, e teremos o novo tamanho de 6 × (1 + 2) + 1 × (2 + 4) = 24. Ambas otimizações podem ser usadas várias vezes. O objetivo é combinar essas duas otimizações da melhor maneira possível, o que significa que queremos encontrar uma codificação de uma determinada sequência de inteiros que tem um tamanho minímo entre todas as codificações usando a Codificação Gamma de Elias com qualquer combinação dessas duas otimizações."
    },
    {
        "nivel": "1",
        "assunto": "6",
        "numero": "1682",
        "saida": "Para cada caso de teste especificado por n imprima uma linha com qualquer genoma de comprimento n. Caso nenhum genoma de comprimento n exista, imprima uma linha em branco.",
        "entrada": "A entrada contém vários casos de testes. Cada caso de teste é composto por um inteiro n. Adimita que 1 ≤ n ≤ 5000. O último caso de teste deve ser zero, isto é, n = 0.",
        "titulo": "Código Genético",
        "descricao": "As conexões entre Matemática e Biologia são complicadas. Na maioria das vezes, estas conexões não se dão por meio de ligações que alegremente se juntam à primeira vista, mas são abstratas e nem sempre facilmente estabelecidas. O Lago Vostok - com cerca de 14 mil quilômetros quadrados de extensão, mais de 650 metros de profundidade e coberto por 3743 metros de gelo - foi descoberto recentemente no continente Antártico. O lago permanceu sob condições de alta pressão e desprovido de luz solar por milhares de anos. Acredita-se que a vida comum evoluiu para uma forma mais eficiente usando-se de um código genético composto unicamente por três bases (a Ciência atualmente diz haver quatro bases: adenina, citosina, guanina e timina). Até que nomes apropriados sejam encontrados, as três bases em questão serão identificadas por N, O e P. Além disso, o genoma é de fita simples e dirigido, isto é, podemos percebê-lo como uma sequência do alfabeto {N,O,P}. A menos que apresente instabilidade, é necessário que o genoma seja uma sequência Thue, devido aos estudos do matemático norueguês A. Thue (1863 - 1922). Entenda por subsegmento de uma sequência, uma sequência a ser conectada, e entenda que dois subsegmentos são adjacentes, quando um é seguido imediatamente pelo outro em uma determinada sequência. Uma sequência-Thue é uma sequência onde nenhum subsegmento adjacente é igual. Por exemplo, NOPNO (é uma sequência-Thue) e NOPNPNO (não é uma sequência-Thue), logo o primeiro exemplo configura um genoma, enquanto o segundo, não. Para sermos capazes de simular experiências com novos genomas, pedimos que você gere genomas de determinados comprimentos."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "2024",
        "saida": "Para cada caso de teste imprima uma linha contendo um inteiro, representando a altura máxima da pilha caso seja possível empilhar os N presentes, ou -1 caso contrário.",
        "entrada": "Cada caso de teste inicia com um inteiro N, representando a quantidade de presentes (1 ≤ N ≤ 105). Em seguida haverá N linhas, cada uma contendo três inteiros cada, A, B e C, representando as medidas dos presentes, conforme especificado no enunciado (1 ≤ A, B, C ≤ 104).",
        "titulo": "Empilhando Presentes",
        "descricao": "Cansado de gerenciar a produção de presentes e calcular o caminho mínimo para entregá-los às crianças durante o natal, Papai Noel resolveu tirar um cochilo. Quando os duendes perceberam a ausência do Noel eles resolveram tirar uma folga do trabalho para jogar um jogo que vieram elaborando por um tempo. O jogo que os duendes inventaram envolve N presentes que eles tinham recentemente fabricado, os quais tem formato de cubo com dimensões AxBxC, ou seja, A centímetros de largura, B centímetros de altura e C centímetros de profundidade. O objetivo é simples: dados os N presentes, ganha o jogo aquele que conseguir colocar os N presentes um em cima do outro formando a pilha de maior altura possível. Os presentes devem ser empilhados em ordem, ou seja, primeiro posiciona-se o presente 1 no chão, em seguida empilha-se o presente 2 em cima do presente 1, e assim por diante. Vale notar que é possível rotacionar o presente em qualquer eixo de forma que qualquer uma de suas 6 faces esteja paralela ao chão, porém o perímetro desta face deve estar completamente contido no perímetro da face superior do presente abaixo. No caso do primeiro presente é possível escolher qualquer face, pois o chão é grande o suficiente. Por exemplo, seja N = 2, onde o primeiro presente tem dimensões 5x2x2, e o segundo presente tem dimensões 1x3x4, é possível posicionar o primeiro presente com a face de dimensões 2x2 para baixo e alcançar uma altura igual a 5, porém desta maneira não será possível posicionar o segundo presente em cima deste. Uma possível solução seria posicionar o primeiro presente com a face de dimensões 5x2 para baixo, e posicionar o segundo presente com a face de dimensões 3x1 logo acima deste, alcançando uma solução válida com altura igual a 6, tal como exemplificado na Figura 1. Após um bom tempo jogando os duendes ficaram curiosos para saber se realmente chegaram ao melhor resultado, e para isso pediram sua ajuda. Dadas as dimensões dos N presentes, verifique se é possível formar uma pilha com os N presentes e qual seria a altura máxima alcançada."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1412",
        "saida": "Para cada caso de teste, imprima uma linha contendo um único inteiro, o menor número de movimentos que abre o cadeado.",
        "entrada": "A entrada contém vários casos de teste. Um caso de teste é descrito em exatamente uma linha contendo uma string não-vazia com no máximo 1000 letras minúsculas. A string representa a sequência secreta de letras que abre o cadeado. O último caso de teste é seguido de uma linha contendo um único asterisco.",
        "titulo": "Cadeado com Segredo",
        "descricao": "Um cadeado possui um sistema de código para ser aberto ao invés de uma chave. O cadeado contém uma sequência de rodas. Cada roda possui as 26 letras do alfabeto inglês (a..z), em ordem. Se você move uma roda para cima, a letra que ela mostra muda para a próxima letra do alfabeto (se a letra mostrada for 'z', então ela muda para 'a'). Se você move uma roda para baixo, ela muda para a letra anterior do alfabeto (se a letra mostrada for 'a', ela muda para 'z'). Também é possível mover qualquer subsequência contígua de rodas para a mesma direção com apenas um movimento. Isso tem o mesmo efeito que mover todas as rodas da subsequência para aquela direção, mas executando apenas um movimento. O cadeado abre quando a roda mostra uma determinada sequência de letras. Inicialmente, todas as rodas mostram a letra 'a'. Você quer saber qual o menor número de movimentos necessários para abrir o cadeado."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1601",
        "saida": "Para cada instância, imprima em uma única linha o valor mínimo de S (A, B).",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (2 ≤ N ≤ 1.000) indicando a quantidade de carneiros no rebanho. A linha seguinte contém N inteiros separados por um espaço, correspondendo aos pesos (0 ≤ peso(·) ≤ 100) dos carneiros.",
        "titulo": "Partição do Rebanho",
        "descricao": "A culinária marroquina é muito famosa por suas deliciosas receitas que envolvem vários tipo de carnes assadas, mas especialmente carneiros, que são criados na região desde o século VIII. Uma curiosa tradição bérbere envolve a partilha da criação de um pastor no momento de sua morte. Independentemente do número de filhos que ele tenha, apenas o primogênito e filho mais novo têm direito à herança. Os demais filhos não ganham nada. Então, todos os animais são pesados, e os pesos (arredondados para o inteiro mais próximo) são considerados. O rebanho é então dividido em duas partes, de forma que, em cada uma os animais têm pesos semelhantes. Mais especificamente, o rebanho é particionado em duas partes, A e B, de tal forma que,   seja mínima. Então, o primogênito fica com a parte do rebanho de peso maior, e o último filho, com a parte de peso menor. Não parece muito justo, mas é a tradição por lá."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1509",
        "saida": "Para cada caso de teste imprima U linhas. A i-ésima linha no arquivo de saída deve conter o número de maneiras distintas de se obter a i-ésima palavra que os dois competidores escreveram pela concatenação de palavras que eles conhecem. Este número pode ser muito grande. Por isto, imprima o resto da divisão da resposta por 109+ 7.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um inteiro positivo D (no máximo 105), o número de palavras que os amigos conhecem. As próximas D linhas contém essas palavras. Cada linha contém uma palavra distinta. Depois, há uma linha contendo um inteiro positivo U (no máximo 1000), que é o número de palavras que os competidores escreveram. Após esta linha, há U linhas, cada uma contendo uma dessas palavras. Toda palavra no arquivo de entrada é composta por no máximo 100 caracteres alfabéticos.",
        "titulo": "Contando Ambiguidades",
        "descricao": "Enquanto vinham para a Escola de Verão de ônibus, um competidor atento notou uma placa que continha uma propaganda com a seguinte URL:www.programs.healthyfood.ma(ele suspeita que o .ma seja para \"Marte\", mas isto é improvável). Por estarem discutindo as novas features de C++11, o competidor e um amigo pensaram que o \"programs\" na URL fosse relacionado ao resultado da programação de computadores: programas. Porém, acontece que a URL foi infeliz: era, na verdade, a junção de duas palavras: o adjetivo \"pro\", que em inglês significa \"em favor de\", e o substantivo \"grams\", um tipo de legumes usados em pratos de comida. Isto explica o fato de a URL ter levado os dois amigos a uma página Web contendo fotos de mulheres saudáveis, ao invés de tutoriais sobre variadic templates! Depois de rirem do acontecido, os dois amigos estão curiosos sobre essas ambiguidades em URLs. Eles começaram a olhar para todas as placas na estrada e a escrever as URLs que elas contém. Porém, eles rapidamente obtiveram muitas URLs para verificar - muito mais que um programador aceita fazer \"na mão\". Por isto, eles querem escrever um programa que, data a lista de palavras que eles conhecem, conta de quantas formas distintas uma certa palavra pode ser obtida pela concatenação de uma ou mais palavras da lista. Ambos são programadores muito habilidosos e já projetaram o algoritmo perfeito para este problema. O principal problema é que os laptops deles estão sem bateria, e eles não querem programar em seus smartphones (não há acesso à Internet nas estradas para acessar um computador com um compilador remotamente). Porque você está sentado próximo a eles, e seu laptop tem bateria para mais de 10 minutos (suficiente, não?) de programação, eles pediram para que você escrevesse tal programa para eles. É claro que eles não contaram a você o algoritmo que projetaram, porque confiam nas suas próprias habilidades de resolução de problemas. Você pode escrever o programa para eles? Note que um palavra pode ser usada várias vezes no processo de concatenação. Por exemplo, se os amigos conhecem as palavras \"a\" e \"aa\", eles podem formar a palavra \"aaa\" dos seguintes 3 jeitos (aqui, + significa concatenação). \"a\" + \"a\" + \"a\" \"a\" + \"aa\" \"aa\" + \"a\" Assim, a resposta para este caso seria 3. Da mesma forma, há duas maneiras de se obter a palavra \"aa\": \"a\" + \"a\" \"aa\" Note que uma palavra pode ser usada sozinha, se os amigos a conhecem."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1978",
        "saida": "Para cada caso de teste você deverá imprimir a quantidade mínima de câmeras necessárias para cobrir todo o corredor. Caso não seja possível você deverá imprimir \"Tera que comprar mais cameras.\".",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém três inteiro N, L, A (1 ≤ N ≤ 10000), indicando respectivamente o número de câmeras presentes na faculdade, largura do corredor e a distância entre as duas paredes do corredor. Segue N linhas contendo dois inteiros X e R (R ≥ A), indicando a posição onde a câmera está instalada e o seu alcance de visão. A entrada termina com N = 0 e não deve ser processada",
        "titulo": "Câmeras",
        "descricao": "O coordenador do curso de ciência da computação pretende instalar novas câmeras em um corredor da faculdade, no intuito de poder identificar os alunos que costumam ficar ali em horário de aula, assim quando esses alunos forem reclamar que o curso está difícil ele poderá facilmente mostrar para o aluno que está difícil pois o mesmo não tem frequentado muito as aulas. As câmeras que serão instaladas são de uma tecnologia um pouco diferente, elas tem visão de 360 graus sem a necessidade de fazer o giro, o coordenador irá instalar as câmeras no teto do corredor e todas estarão exatamente centrada entre as paredes do corredor. Como essas câmeras são caras e consomem muita energia, o coordenador terá que usar as câmeras já existentes no corredor, que por motivo de economia estavam desligadas, porém nem todas são do mesmo modelo, assim cada uma tem um alcance de visão diferente. Sabendo que você é o melhor programador do curso, o coordenador pediu para que você determinasse a quantidade mínima de câmeras necessárias para cobrir todo o corredor, sem deixar nenhum espaço sem visão, ou dizer se terá que comprar mais câmeras. Assuma o corredor como um plano cartesiano, onde o tamanho das abscissas é L com início em 0, e o tamanho das ordenadas é A. As câmeras estão sempre posicionadas sobre o eixo das abscissas."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1319",
        "saida": "Para cada caso de teste, imprima uma única linha com um único inteiro representando a quantidade de subconjuntos que cobrem o dia. Para tornar sua vida mais fácil, imprima apenas o resto ao dividir a solução por 108.",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém dois inteiros M e N, representando respectivamente o maior valor de tempo do dia (1 ≤ M ≤ 109) e o número de possíveis atividades para o dia (1 ≤ N ≤ 100). Cada uma das próximas N linhas descreve uma possível atividade e contém dois inteiros S e F, representando respectivamente os tempos de início e fim da atividade (0 ≤ S < F ≤ M). ​O último caso de teste é seguido de uma linha contendo dois zeros.",
        "titulo": "Garota Hiperativa",
        "descricao": "Helen é uma garota hiperativa. Ela quer agendar suas atividades de forma que em qualquer momento do dia haja ao menos uma atividade que ela possa fazer. Ela não se importa se suas atividades se sobrepõem no tempo, desde que cada momento do seu dia tenha uma atividade agendada. Helen dividiu o dia de uma forma particular. O dia começa no tempo 0 e termina no tempo M. Cada momento do dia é representado por um número real entre 0 e M, inclusive. Helen fez uma lista de todas as possíveis atividades, com seus tempos de início e fim. Agora ela precisa escolher qual subconjunto de atividades vai agendar. Se uma atividade começa no instante S e termina no instante F, então dizemos que ela cobre todo o período entre S e F, inclusive. Helen não quer desperdiçar nenhuma atividade, portanto ela vai escolher apenas subconjuntos mínimos de atividades que cobrem o dia a ser agendado. Um subconjunto de atividades é um subconjunto mínimo que cobre o dia se e somente se: 1. Cada instante do dia é coberto por ao menos uma atividade do subconjunto; 2. Remover qualquer uma das atividades do subconjunto deixaria ao menos um instante do dia descoberto. Note que alguns instantes do dia podem ser cobertos por mais de uma atividade. ​Dada a lista de possíveis atividades para um dia, você deve ajudar Helen determinando quantos subconjuntos mínimos distintos de atividades cobrem o dia inteiro."
    },
    {
        "nivel": "10",
        "assunto": "6",
        "numero": "1810",
        "saida": "Para cada pesquisa processada, seu programa deve imprimir na primeira linha do texto Instancia #x, onde x é o número da instância do arquivo de entrada. (As instâncias são numeradas sequencialmente a partir de um). Na segunda linha deve ser impresso o custo mínimo do período de n dias. Nesta fase de seu trabalho, não é necessário imprimir o plano de produção. Uma linha em branco deve ser deixada entre cada pesquisa.",
        "entrada": "A entrada é constituída por várias instâncias, armazenadas em sequência ao longo do arquivo de entrada. Cada instância possui a estrutura que segue. Na primeira linha é especificado um valor inteiro 0 ≤ n ≤ 180 que indica o número de dias do planejamento. O caso em que n = 0 representa o final do arquivo e não deve ser processado. Nas próximas n são especificados, na ordem que segue, os inteiros ft ≥ 0, pt, ht e dt ≥ 0, em que 1 ≤ t ≤ n.",
        "titulo": "Beverly Hills, Century City",
        "descricao": "Beverly Hills e Century City figuram entre os condados mais abastados e sofisticados de grande Los Angeles. Seus habitantes, pessoas de gostos pouco convencionais e atitudes demasiadamente excêntricas, estão sempre procurando novas diversões, novas quinquilharias e novos hobbies para empregar seus dividendos. A grande mania da região, no momento, é a criogenia. Inspirados pelo enredo do filme Vanilla Sky, vários cidadãos e cidadãs têm recorrido à empresa local A.C.M – Agência Criogênica keith-Morris – com o intuito de \"prolongar\" sua existência. Tal movimentação deixou a A.C.M com um problema a ser resolvido: construir um plano de produção de suas células criogênicas num dado período de tempo. De maneira mais precisa a empresa deseja encontrar um plano de produção de custo mínimo num período de n dias, sujeito a: Custo de produção fixos não negativos ft, 1 ≤ t ≤ n; Custos unitários de produção pt; Custos unitários de estocagem ht; Demandas não negativas dt; Sua tarefa é construir um programa para ajudar a A.C.M a resolver seu problema."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1027",
        "saida": "Para cada caso de teste, imprima um número – o número máximo de pontos críticos que podem ser incluídos em uma curva desenhada a partir dos pontos dados.",
        "entrada": "Haverá no máximo, 222 casos de testes. Cada caso inicia com um inteiro N, que é o número de pontos no caso de teste. Nas próximas N linhas, haverá N pares de inteiros dando as coordenadas x e y de cada ponto. Não haverá mais do que 1000 pontos em cada caso de teste. Todas coordenadas são inteiros – eles devem ficar dentro de um inteiro de 2 bytes com sinal. Os dados devem ser lidos da entrada padrão.",
        "titulo": "Onda Crítica",
        "descricao": "A tarefa é simples. Através de alguns pontos críticos em 2D, você deve desenhar uma onda como uma curva. Seu objetivo é incluir tantos pontos quantos forem possível. Haverá uma linha imaginária y = a, a qual chamaremos de eixo principal para a curva. Todos os pontos na curva deverão ter diferentes coordenadas x. Suas coordenadas y devem ser na forma a-1 ou a+1. Dois pontos consecutivos na curva devem ter diferença de 2 na coordenada y."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2181",
        "saida": "Imprima uma única linha contendo três valores, os quais representem, nesta ordem, o número de públicos em Valinor, o número máximo de elfos num público em Valinor e a soma máxima das rendas dos elfos de um mesmo público em Valinor. Imprima o último valor com exatamente dois dígitos após o ponto separador decimal.",
        "entrada": "A entrada consiste de três linhas. A primeira linha consiste de dois inteiros positivos N e D (N ≤ 105, D ≤ 107), os quais representam respectivamente o número de elfos em Valinor e o parâmetro que define o conceito de faixa etária adotado. A segunda linha consiste de N inteiros ai (1 ≤ i ≤ N, 0 ≤ ai ≤ 107), os quais representam as idades de cada um dos elfos. Por fim, a terceira linha consiste de N valores ci (1 ≤ i ≤ N, 0.00 ≤ ci ≤ 10000.00), fornecidos com exatamente dois dígitos após o ponto separador decimal, os quais representam as rendas correspondentes dos elfos, segundo a ordem em que os elfos foram fornecidos na linha anterior.",
        "titulo": "URI - Uireb Rhom uin Iavas",
        "descricao": "A Uireb Rhom uin Iavas (traduzindo: Eterna Trombeta do Outono), uma importante empresa de Valinor, está fazendo uma pesquisa sobre os diversos públicos do reino abençoado. Para a URI, um público é um conjunto não-vazio maximal de elfos S tal que quaisquer dois elfos tomados de S são da mesma faixa etária. A propósito, a URI considera que dois elfos são da mesma faixa etária se e só se a diferença entre suas idades não excede um determinado parâmetro D. Por exemplo, sob D = 500, se Aegnor, Beleg e Celeborn têm respectivamente 1300, 500 e 1000 anos de idade, Aegnor e Celeborn são considerados da mesma faixa etária, assim como Beleg e Celeborn, mas não Aegnor e Beleg. Ainda, se os únicos elfos em Valinor fossem Aegnor, Beleg, Celeborn e Daeron, este de 700 anos de idade, os dois públicos seriam {Aegnor, Celeborn} e {Beleg, Celeborn, Daeron}. Note que o conjunto {Beleg, Celeborn}, apesar de conter dois elfos de mesma faixa etária, não é considerado um público por não ser maximal. A URI quer saber o que é melhor para o lançamento de um produto: focar num público com o maior número de elfos possível, ou focar num público talvez mais restrito, mas com maior poder aquisitivo? Portanto, as informações que a URI precisa levantar são cruciais para que a empresa faça a escolha certa!"
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2095",
        "saida": "Imprima uma linha contendo um único número inteiro que representa o número máximo de batalhas que Noglônia pode ganhar durante a guerra.",
        "entrada": "A primeira linha contém um número inteiro S que representa o número de soldados em cada exército (1 ≤ S ≤ 105). A segunda linha contém S números inteiros, onde Qi representa as habilidades de combate dos diferentes soldados do exército de Quadradônia, na ordem em que as batalhas iram acontecer (1 ≤ Qi ≤ 109 para i = 1, ..., S). A terceira linha contém S números inteiros, onde Ni representando as habilidades de combate dos diferentes soldados do exército de Noglônia, em uma ordem arbitrária (1 ≤ Ni ≤ 109 para i = 1, ..., S).",
        "titulo": "Guerra",
        "descricao": "Guerra, um evento digno apenas de aparecer na literatura, filmes ou talvez programação de concursos, veio a atingir o império Nogloniano, que está enfrentando o império vizinho de Quadradônia. Protocolos de guerra combinado por ambas as partes indicam que a guerra será travada em sucessivas batalhas, em cada uma das quais um soldado diferente de cada império vai enfrentar outro, de modo que cada soldado irá participar em exatamente uma batalha. O império que ganhar mais batalhas ganha a guerra. Cada império tem um exército formado por S soldados, e cada soldado tem uma certa habilidade de combate. Em cada batalha entre dois soldados, aquele com maior habilidade de combate ganha a batalha. Se ambos os soldados têm as mesmas habilidades de combate, a batalha é declarada como empate e tecnicamente nenhum lado é vitorioso. Os espiões de Noglônia tiveram que interceptar informações secretas relativas às habilidades de combate de cada soldado do exército de Quadradônia, por isso a rainha de Noglônia requer a sua assistência, a fim de calcular o número máximo de batalhas que podem ganhar durante a guerra se os seus soldados forem enviados na ordem apropriada."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1616",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, indicando quantas maneiras é possível que os pares sejam formados de tal modo que todos os garotos dancem exatamente uma vez, e que todas as garotas dancem ao menos uma vez. Como o resultado pode ser muito alto, imprima o resultado com resto de divisão em 1000000007 (10⁹+7).",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste consiste de dois inteiros, B e G (1 ≤ G < B ≤ 10³), indicando o número de garotos e garotas na sala, respectivamente. O último caso de teste é indicado quando B = G = 0.",
        "titulo": "Baile de Formatura",
        "descricao": "É final de ano, e finalmente Rafael está se formando em seu curso de Computação. O pessoal da sua sala resolveu comemorar a formatura organizando um baile, onde haveria música ao vivo, comida e bebida grátis. Como todo baile, o momento mais esperado é aquele em que todos começam a dançar em pares. Os pares serão formados entre um garoto e uma garota, e como os alunos da sala de Rafael são muito tímidos, decidiram definir com antecedência quais seriam os pares. Há apenas um problema: há mais garot os do que garotas na sala. Isso implica que, para que todos consigam dançar ao menos uma vez, uma ou mais garotas terão que dançar com mais de um garoto. Rafael pediu sua ajuda: de quantas maneiras os pares podem ser formados, de tal forma que todos os garotos dancem exatamente uma vez, e que todas as garotas dancem ao menos uma vez?"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "2183",
        "saida": "Imprima uma única linha, a menor quantidade inicial de pontos de vida para que Bia consiga vencer o desafio. Caso seja impossível chegar a sala final, imprima ‘-1’.",
        "entrada": "A primeira linha contêm dois inteiros N, K, indicando, respectivamente, a dimensão da matriz e a quantidade de salas imunes que Bia fica quando junta todos os itens mágicos. (2 ≤ N ≤ 100, 1 ≤ K ≤ 10). A seguir temos N linhas que descrevem a matriz, cada uma dessas linhas conterá a informação de N salas, sendo os caracteres: ‘I’, ‘F’, ‘#’, ‘P’, ‘O’, ‘W’, ‘E’, ‘R’ ou um número inteiro D, todos descritos acima. (1 ≤ D ≤ 9).",
        "titulo": "Batalha Final",
        "descricao": "Bia está jogando um jogo de Zumbi e está prestes a começar o último desafio. Modelaremos esse desafio como uma matriz NxN, onde o objetivo de Bia é sair da sala situada na posição [1, 1] e chegar na sala da posição [N, N]. Porém, como nada nessa vida é tão simples, existem salas que contêm zumbis, salas que são bloqueadas e salas que contêm itens mágicos para serem pegos que, quando fundidos, dão a Bia um grande poder. A sala [1, 1] contém sempre uma letra ‘I’ e a sala [N, N] a letra ‘F’ significando, respectivamente, o início e fim do desafio. As salas bloqueadas conterão o símbolo ‘#’, sendo assim impossível passar por elas. Salas com um número inteiro D significam que existem zumbis e, ao passar por elas, Bia perderá D pontos de vida. As outras salas conterão uma das seguintes letras: ‘P’, ‘O’, ‘W’, ‘E’ ou ‘R’, significando a inicial de cada um dos cinco itens mágicos. Quando Bia passa por uma sala com algum desses itens, ela pega e guarda em sua mochila, e no exato momento que junta todos eles, Bia se torna imune aos zumbis nas próximas K salas que entrar. É possível ter apenas um item de cada ao mesmo tempo na mochila e, quando usado, todos serão perdidos e poderão ser coletados novamente ao decorrer da batalha. Se Bia juntar todos os itens em um momento que ainda estiver sob o efeito de uma junção anterior, a quantidade de sala imune não será acumulada, e sim voltará ao valor máximo de K. Sua tarefa é descobrir qual a menor quantidade inicial de pontos de vida para que Bia consiga vencer o desafio, dado que ela sempre escolhe o melhor caminho possível. Bia vence o desafio se chegar a sala [N, N] com pelo menos 1 ponto de vida. Se Bia está no momento na sala [X, Y], ela pode andar apenas para as salas [X+1, Y] ou [X, Y+1]."
    },
    {
        "nivel": "9",
        "assunto": "6",
        "numero": "1325",
        "saida": "Para cada caso de teste na entrada seu programa deve produzir uma linha na saída, contendo os nomes das quatro regiões vizinhas da região informada, na seguinte ordem de direção: cima, baixo, esquerda, direita. Para os vizinhos que não estão mapeados, você deve escrever na saída ao invés do nome. Deixe um espaço em branco entre dois nomes consecutivos. A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha contém um inteiro N indicando o número de casos de teste. Cada uma das N linhas representam um caso de teste, contendo o nome da região composta por C caracteres ( 2 ≤ C ≤ 5000 ), sendo que o primeiro sempre será o caractere 'm', e os seguintes serão ou 'p', 'q', 'r' ou 's'. A entrada deve ser lida da entrada padrão.",
        "titulo": "Mapas Bolha",
        "descricao": "A Bubble Inc. está desenvolvendo uma nova tecnologia para a navegação em um mapa em diferentes níveis de zoom. Sua nova tecnologia assume que a região a ser mapeada é uma superfície retangular plana, e que divide sua superfície em sub-regiões retangulares, as quais representam níveis de zoom mais profundos. A tecnologia da Bubble Inc. representa um mapa usando uma estrutura conhecida como quad-tree. Em uma quad-tree, uma região retangular chamada x pode ser dividida pela metade, tanto horizontal como verticalmente, resultando em 4 sub-regiões retangulares de tamanhos iguais. Estas sub-regiões são chamadas de regiões filhas de x, e são nomeadas de xp para o canto superior esquerdo, xq para o superior direito, xr para o inferior direito e xs para o inferior esquerdo, onde xc representa a concatenação da string x e o caracter c = 'p', 'q', 'r' e 's'. Por exemplo, se a região base a ser mapeada é chamada de m, então as regiões filhas de m são, à partir do canto superior esquerdo e em sentido horário: mp, mq, mr e ms, como ilustrado abaixo. Qualquer região pode ser subdividida. Por exemplo, a região chamada ms pode ser subdividida em sub-regiões msp, msq, msr e mss, como ilustrado abaixo. Como outro exemplo, a figura abaixo mostra o resultado da subdivisão das sub-regiões filhas da região chamada msr. Sub-regiões com nomes de mesmo comprimento tem o mesmo nível de zoom, uma vez que eles representam regiões de mesmo tamanho. Sub-regiões no mesmo nível de zoom e que compartilham um lado comum são considerados vizinhos. Qualquer coisa que esteja fora da região base m não está mapeada e, para todo nível de zoom, todas as sub-regiões de m são mapeadas. A tecnologia de mapa da Bubble Inc. fornece um meio para o usuário navegar a partir de uma sub-região dada até as sub-regiões vizinhas, nas quatro direções: cima, baixo, esquerda e direita. Sua missão é ajudar a Bubble Inc. na procura pelas sub-regiões vizinhas de uma sub-região dada. Isto é, dado o nome de uma sub-região retangular, você deve determinar os nomes de suas quatro sub-regiões vizinhas."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1666",
        "saida": "A saída para cada caso de teste deve dizerse uma palvra (\"word\") consiste em um conjunto (\"set\") ou não (\"no set\"). Você deve aderir ao formato mostrado na saída de exemplo.",
        "entrada": "A primeira linha da entrada contém um número representando o número de linhas que seguem. Cada linha consiste de uma palavra, para qual o seu programa deve decidir se é a representação sintaticamente correta de um conjunto. Você pode assumir que cada palvra contem entre 1 e 200 caracteres de um conjunto { \"{\", \"}\", \",\" }.",
        "titulo": "Qualquer Tolo Consegue",
        "descricao": "Com certeza você conhece alguém que acha que é muito esperto. Você, então, decide o deixar triste com o seguinte problema: \"Você sabe me dizer qual é a sintaxe de um conjunto?\", você o pergunta. \"Claro!\", ele responde, \"um conjunto abriga a possibilidade de uma lista vazia de elementos dentro de duas chaves. Cada elemento pode estar dentro de um outro conjunto ou ser uma letra do alfabeto escolhido. Elementos da lista devem ser separados por uma vírgula\". \"Então, se eu lhe der uma palavra, você consegue me dizer se ela é a representação sintaticamente correta de um conjunto?\" \"Claro, qualquer tolo consegue!\" é a resposta dele. Agora você o pegou! Você o apresenta a seguinte gramática, definindo formalmente a sintaxe para um conjunto (que foi descrita informalmente por ele): Conjunto ::= \"{\" ElementoDaLista \"}\" ElementoDaLista ::= | Lista Lista ::= Elemento | Elemento \",\" Lista Elemento ::= Átomo | Conjunto Átomo ::= \"{\" | \"}\" | \",\" significa uma palavra vazia, i.e., a lista em um conjunto pode ser vazia. Logo ele perceberá que esta tarefa é muito mais difícil do que ele pensou, já que que o alfabeto consiste de caracteres que também são usados para a sintaxe do conjunto. Então, ele diz que não é possível decidir, de forma eficiente, se uma palavra consistindo de \"{\", \"}\" e \",\" é a representação sintaticamente correta de um conjunto ou não. Para prová-lo errado, você precisa escrever um programa eficiente que decidirá este problema."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1224",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único inteiro, o maior número de pontos que Alberto consegue obter.",
        "entrada": "Cada caso de teste é descrito em duas linhas. A primeira linha contém um inteiro par N (2 ≤ N ≤ 104), que indica o número de cartões sobre a mesa. A segunda contém N inteiros, que descrevem a sequência de cartões. Cada um dos N inteiros cabem em um inteiro de 32 bits.",
        "titulo": "Cartões",
        "descricao": "Dois jogadores, Alberto e Wanderley, disputam um jogo. Um conjunto com um número par de cartões contendo números inteiros é disposto sobre uma mesa, um ao lado do outro, formando uma sequência. Alberto começa, e pode pegar um dos dois cartões das pontas. Wanderley então pode pegar um dos dois cartões das pontas e novamente Alberto pode pegar um cartão das pontas, e assim por diante, até Wanderley pegar o último cartão. Alberto, o primeiro a jogar, tem como objetivo maximizar o número total de pontos que ele con- segue, somando os valores dos cartões escolhidos. Wanderley, o segundo jogador, quer atrapalhar o Alberto e fazer com que ele consiga o menor número de pontos possível. Em suma, ambos querem fazer o melhor possível, Alberto querendo maximizar sua soma e Wanderley querendo minimizar a soma de Alberto. Você deve escrever um programa que, dada a sequência de cartões, determine o maior número de pontos que Alberto consegue obter."
    },
    {
        "nivel": "1",
        "assunto": "6",
        "numero": "1912",
        "saida": "Para cada caso, exiba uma única linha, a altura H do corte que Seu Madruga deve fazer para que a soma da área das tiras cortadas seja igual a A cm². Use 4 casas decimais após o ponto. Exiba “:D”, caso nenhum corte seja necessário, ou “-.-“ caso seja impossível.",
        "entrada": "Haverá diversos casos de testes. A primeira linha de cada caso inicia com dois inteiros N (1 ≤ N ≤ 105) e A (1 ≤ A ≤ 109) representando, respectivamente, a quantidade de tiras e a área resultante esperada. A próxima linha conterá N inteiros, representando o comprimento Ci (1 <= Ci <= 104) de cada tira. A entrada termina com N = A = 0, a qual não deve ser processada.",
        "titulo": "Ajude Seu Madruga",
        "descricao": "Seu Madruga finalmente arrumou um emprego, é sua grande chance de pagar os 14 meses de aluguel que estão atrasados. Seu cargo é o de cortador de papel e o salário é excelente. Madruga irá receber N tiras retangulares de papel com 1 cm de largura e C cm de comprimento. As tiras devem ser colocadas uma ao lado da outra de forma que suas bases estejam alinhadas. A tarefa de seu Madruga será, com apenas um corte em linha reta, paralelo à base, fazer com que a soma das áreas das tiras cortadas seja igual a A cm². Veja a ilustração abaixo com N = 5 e as tiras com 5, 3, 6, 2 e 3 cm de comprimento, respectivamente, para um A = 3 cm². Com um corte feito a uma altura de 4 cm em relação a base, a área resultante, pintada de vermelho, é exatamente igual a A cm². Sua tarefa é descobrir essa altura H e ajudar Seu Madruga a se manter no emprego."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1672",
        "saida": "Para cada caso de teste exiba uma linha contendo a posição da pessoa que sobreviverá. Considere que os participantes possuem identificações sequenciais de 1 a N e que a contagem começa com a pessoa 1, i.e., a primeira pessoa a sair do círculo é aquela com o número 2. Por exemplo, se houver 5 pessoas no círculo, a eliminação ocorrerá da seguinte maneira: 2, 4, 1, 5 e a pessoa 3 continuará viva.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por um número N que representa o número de participantes desse jogo. Para dificultar as coisas, o formato dele é XYeZ com a seguinte semântica: quando N é escrito em notação decimal, seu primeiro digito é X e seu segundo digito é Y, seguidos por Z zeros. Onde 0 ≤ X, Y ≤ 9, o número de zeros é 0 ≤ Z ≤ 6. Você pode assumir que N > 0. O último caso de teste é a string 00e0.",
        "titulo": "Em Perigo",
        "descricao": "Flavius Josephus e 40 amigos rebeldes foram encurralados pelos Romanos. Seus companheiros prefiriram o suicídio à rendição, então eles decidiram formar um círculo e matar cada terceira pessoa e continuar até que não sobre ninguém. Josephus não gostou da ideia de se matar então ele calculou a posição para ser o último homem vivo (ele não cometeu suicídio já que ninguém estava olhando). Nós vamos variar esse \"jogo\" de modo que cada segunda pessoa saia do círculo. Claro que haverá mais de 41 pessoas uma vez que agora temos computadores. Você deve calcular a posição segura. Seja cuidadoso pois talvez nós utilizemos o seu programa para calcular o ganhador desta competição!"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1054",
        "saida": "Para cada caso de teste, imprima o número do caso de teste seguido pela distância máxima do salto que Fred deve dar.",
        "entrada": "A primeira linha de entrada é um número inteiro  T  ( T < 100 ) que indica o número de casos de teste. Cad a caso inicia com uma linha contendo dois inteiros N (0 ≤ N ≤ 100 ) e D ( 1 ≤ D ≤ 1000000000 ) que são o número de pedras e a distância entre as margens. As próximas linhas dão a descrição das N pedras. Cada pedra é definida por seu tamanho Big(B) ou Small(S), que significa grande e pequena respectivamente, um traço “-“ e M ( 0 < M < D ) que determina a distância daquela pedra da margem esquerda. As pedras estarão em ordem crescente de M.",
        "titulo": "Sapo Dinâmico",
        "descricao": "Com o uso crescente de pesticidas, as águas dos córregos e rios tornaram-se tão contaminadas que se tornou quase impossível para os animais aquáticos sobreviverem. Sapo Fred é na margem esquerda de um rio. N rochas são dispostas em uma linha reta da margem esquerda para a margem direita. A distância entre a margem esquerda e a margem direita é D metros. Há rochas de dois tamanhos. As maiores podem suportar qualquer peso, mas as pedras menores começam a afundar assim que qualquer massa é colocada sobre elas. Fred tem que ir para a margem direita, onde ele tem que coletar algo e voltar para a margem esquerda, onde sua casa está situada. Ele pode pousar em cada pedra pequena no máximo uma vez, mas pode usar as maiores tantas vezes quanto ele quiser. Ele nunca pode tocar a água poluída, pois é extremamente contaminada. Você pode planejar o itinerário de modo que a distância máxima de um único salto seja minimizada?"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1604",
        "saida": "Para cada instância, imprima na primeira linha Y se é possível formar um comitê de pares de conselheiros ou N, caso contrário. Caso seja possível formar um comitê, imprima uma lista de pares de conselheiros, um par por linha. Um par de conselheiros consiste de dois inteiros xi e yi, separados por um espaço, de forma que xi < yi. Além disso, a lista de pares de conselheiros deve estar ordenada de forma crescente por xi. Caso exista mais de uma forma de montar um comitê, imprima a lexicograficamente menor. Note que, quando o representante 1 tem voto sozinho, ele não pertence a nenhum par.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro par N (1 ≤ N <105). As próximas N − 1 linhas contêm 2 inteiros cada uma. A i-ésima linha, dessas N − 1 linhas, contém os representantes x e y (1 ≤ x, y ≤ N) de um trecho de rua sem esquinas.",
        "titulo": "Pair-voting no Conselho de Gueliz",
        "descricao": "O bairro de Gueliz em Marrakech é hoje conhecido por ser a parte moderna da cidade, com diversas opções turísticas, restaurantes e bares. Poucos conhecem a formação do bairro, ainda no século XVI. Originalmente o bairro, também conhecido como “Cidade Nova” foi se formando fora da fortaleza (Medina, cidade antiga). O primeiro novo morador ganhou uma autorização oficial da prefeitura para construir sua casa, e ficou responsável por dar novas autorizações. Quando uma rua foi aberta, um habitante do fim da rua (até a primeira esquina formada) foi designado representante da rua juntamente com o primeiro morador. E assim ocorreu para todas as ruas da cidade: os moradores das esquinas eram representantes das ruas que se encontravam naquela esquina, de forma que cada trecho de rua sem esquinas tem exatamente dois representantes. Há em Gueliz uma lenda que impede a formação de quarteirões (conjunto de casas cercadas por ruas). Os antigos contam que uma vez formaram um quarteirão no bairro, e quando uma pessoa má morreu seu espírito ficou ali preso para sempre, assombrando as pessoas que ali moravam. Desde então nunca mais se formaram quarteirões no bairro. O conselho do bairro de Gueliz é formado pelo primeiro morador e os representantes de cada rua. Estes representantes formam comitês para analisar as diversas questões. Nos comitês os conselheiros são agrupados em pares, e todos os conselheiros devem participar de exatamente um par. Cada par tem um único voto e a moção é aprovada quando atinge maioria dos votos. Cada par deve ser formado por conselheiros representantes de ruas que se encontram em alguma esquina (ou pelo primeiro morador e o representante de sua rua). Claramente, quando o número de conselheiros é ímpar não é possível encontrar uma composição dos comitês de que participem todos os conselheiros. Quando isso ocorria, o primeiro morador tinha um voto sozinho, e os demais deveriam ser divididos em pares. Entretanto, com o passar do tempo houve ocasiões em que não foi possível montar um comitê, o que sempre foi motivo de desconfiança entre os moradores de Gueliz. Sua tarefa neste exercício é dado N o número de representantes de rua (o representante 1 é o primeiro morador) decidir se é possível formar um comitê de pares de conselheiros conforme descrito acima."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1286",
        "saida": "Para cada caso de teste de entrada deve ser impresso um valor inteiro que determina o tempo que Roberto irá levar para entregar as suas pizzas seguido de um espaço em branco e do texto “min.”, conforme exemplo abaixo.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste contém na primeira linha um valor inteiro N (1 ≤ N ≤ 20) que indica o número de pedidos. A linha seguinte contém um valor inteiro P (1 ≤ P ≤ 30) indicando o número máximo de pizzas que podem ser entregues por Roberto. Cada uma das próximas N linhas contém um pedido com o tempo total para ser entregue e a quantidade de pizzas do pedido, respectivamente. A final da entrada é determinado por N = 0, e não deverá ser processado.",
        "titulo": "Motoboy",
        "descricao": "José é um motoboy e trabalha fazendo entregas para uma pizzaria. Seu salário é baseado no número de pizzas entregues. Só que esta pizzaria está com muito movimento e ele pediu auxílio a seu amigo Roberto para que o ajudasse nas entregas. Como Roberto é camarada e está sem trabalho no momento, ele concordou em pegar aqueles pedidos cujas entregas serão mais demoradas. Assim, sempre que chegam à pizzaria, antes de partirem para novas entregas José determina a quantidade de pizzas que Roberto deverá entregar e seleciona para ele os pedidos mais demorados. Por exemplo, se há 22 pizzas para serem entregues e José determinar que Roberto entregue no máximo 10 destas pizzas (pode ser menos), estas devem estar obrigatoriamente entre os pedidos que levarão mais tempo para serem entregues. Isso é ilustrado no primeiro caso de teste, onde Roberto deverá fazer a entrega do segundo, terceiro e sexto pedido, somando 8 pizzas e 62 minutos (23 + 21 + 18). Se Roberto fosse realmente entregar 10 pizzas, ele teria que atender o segundo, terceiro e quarto pedido e isto levaria 59 minutos (23 + 21 + 16), o que não é o objetivo de José, pois levaria menos tempo do que a primeira opção, ou seja, a relação pizzas/tempo não importa muito para José (isso pode ser observado no segundo caso de teste do exemplo abaixo). Para poder fazer a divisão do trabalho, José pediu a um amigo acadêmico em Ciência da Computação que desenvolvesse um programa que determinasse quanto tempo seu amigo Roberto irá levar para entregar estes pedidos mais demorados."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1597",
        "saida": "Para cada instância imprima uma única linha na saída, que consiste de: “-1” caso você possa afirmar com certeza que o empregado tenha mentido em algum relatório; “-2” caso você não possa afirmar que o empregado esteja mentindo, mas também não possa encontrar as durações de cada máquina de maneira única; N inteiros, separados por espaço, que representem a duração de cada tarefa se essas durações puderem ser determinadas de formam única.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros, N (1 ≤ N ≤ 100) e P (2 ≤ P ≤ 24, onde P é um número primo) . As próximas N linhas contêm N + 2 inteiros cada uma. A i-ésima linha, dessas N linhas, corresponde ao i-ésimo relatório e consiste de Si , Ti (1 ≤ Si , Ti ≤ P) , Ai,1 , . . . , Ai,N . Onde Si e Ti correspondem, respectivamente, à hora em que o empregado começou e parou de trabalhar. Cada Ai,j(0 ≤ Ai,j ≤ 10 9 e ΣjAi,j > 0) é a quantidade de vezes que a tarefa j foi realizada no período do relatório i.",
        "titulo": "Desmascarando o Empregado do Sultão",
        "descricao": "Um sultão estava desconfiado de seu empregado. Ele dizia que trabalhava incessantemente, sem parar, para cumprir suas tarefas de N tipos diferentes. O sultão quer saber exatamente quanto tempo leva cada uma das tarefas, para poder avaliar melhor se o empregado é preguiçoso ou se realmente está sobrecarregado. Para tentar desmascarar o empregado ele passou a solicitar relatórios de suas atividades. O empregado entregou N relatórios distintos, a mesma quantidade que o total de tarefas, o que deixou o sultão ainda mais desconfiado. Este empregado trabalha em jornadas de P horas e cada tarefa demora entre uma e P horas para completar. Todas tarefas demoram uma quantidade inteira de horas para se completar. As jornadas de trabalho acontecem nas P primeiras horas do dia. Cada relatório consistia da hora em que o empregado começou e a hora em que terminou de trabalhar. Se ele diz que começou a trabalhar às 0 horas e terminou as 3 horas, isso significa que ele começou no início daquela hora e terminou no final desta, totalizando 4 horas no período. O empregado não anotou o dia em que começou a trabalhar e o dia em que terminou. Os horários do relatório nem sempre referem-se ao mesmo dia. Nesse caso o empregado afirma que parou de trabalhar no final do expediente e reinicionou a tarefa ao início do próximo dia. No exemplo anterior o empregado poderia ter trabalhado 4 horas, P + 4 horas, 2P + 4 horas, etc. Com isso relatórios que indiquem que o empregado começou a trabalhar às 3 horas e terminou às 2 são perfeitamente válidos. Além dessas informações, cada relatório contém quantas tarefas de cada tipo foram completadas. Durante esse período, o empregado afirma ter trabalhado sem parar. Sua tarefa é, dadas as informações dos relatórios, determinar qual a duração, em horas, de cada tarefa, caso isso seja possível."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1798",
        "saida": "Imprima em uma linha o maior valor que pode ser obtido com o corte e a venda o cano original de tamanho T.",
        "entrada": "A entrada é iniciada por um linha contendo o inteiro N (1 &leq; N &leq; 1000) que é o número de tamanhos de canos solicitados e o inteiro T (1 &leq; T &leq; 2000) que é o tamanho do cano produzido pela OBI. A seguir virão N linhas, cada uma contendo dois inteiros Ci e Vi (1 &leq; Ci, Vi &leq; 5000, 1 &leq; i &leq; N), representando, respectivamente, o comprimento do cano i desejado por um cliente e seu valor de venda.",
        "titulo": "Cortando Canos",
        "descricao": "A OBI (Organização Brasileira de Instalações) é uma empresa que atua na área de produção de tubos e conexões. A técnica de produção utilizada na OBI produz sempre canos longos, que são então cortados para satisfazer a necessidade dos clientes. Os seus clientes tem aplicações variadas, necessitando de diferentes comprimentos de canos. No início, quando a empresa era pequena e os clientes eram poucos, todo o processo de planejamento dos cortes (para maximizar o lucro) era efetuado por um funcionário muito dedicado. Porém, com o aumento dos pedidos, isto se tornou proibitivo. É aí que você entra: contratado pela OBI, sua tarefa é escrever um programa que, dada uma relação de comprimentos de cano e seus respectivos valores de venda, determine o maior valor total que possa ser obtido com o corte de um cano de comprimento inicial determinado. Comprimentos de cano podem ser repetidos, e podem haver sobras de cano."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1350",
        "saida": "Para cada entrada seu programa deve gerar uma linha de saída. Se a entrada é consistente, seu programa deve imprimir o número máximo de sentenças verdades da entrada. Caso contrário seu programa deve imprimir a palavra \"Inconsistent\" (Inconsistente).",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa com uma linha contendo um único inteiro N, que indica o número de sentenças no documento (1 ≤ N ≤ 1000). As N linhas seguintes contém cada uma, uma sentença. Sentenças são numeradas sequencialmente, na ordem em que aparecem na entrada (a primeira sentença é 1, a segunda é 2, e assim vai). Cada sentença tem a forma \"Sentence X is true.\" (A sentença X é verdadeira) ou \"Sentençe X is false.\" (A sentença X é falsa), onde 1 ≤ X ≤ N. O valor N = 0 indica o fim da entrada.",
        "titulo": "Esta Sentença é Falsa",
        "descricao": "A corte do rei Xeon 2.4 está sofrendo com intrigas e conspirações. Um documento recentemente descoberto pelo Serviço Secreto do Rei revela que talvez faça parte de um esquema malévolo. O documento contém um simples conjunto de sentenças que diz a verdade ou a mentira para cada afirmação. As sentenças tem a forma de \"A sentença X é falsa/verdadeira\" onde X indefine uma sentença do conjunto. O Serviço Secreto do Rei suspeita que as sentenças se referem a outro, ainda não descoberto, documento. Enquanto eles tentam descobrir a origem e propósito do documento, o Rei ordenou-o a descobrir se o conjunto de sentenças que o documento contém é consistente, isto é, se há uma verdadeira afirmação nas sentenças. Se o conjunto é consistente, o Rei quer que você determine o máximo de números de sentenças que podem ser verdadeiras nas afirmações do documento."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1598",
        "saida": "Para cada instância, imprima em uma única linha o valor mínimo de um circuito do tapete, onde esse valor é a razão entre a quantidade de fio dividida pelo número de nós no circuito. O valor deve ser impresso com 3 casas decimais. Imprima -1, caso não exista circuito no tapete.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros, N (3 ≤ N ≤ 1.000) e M (N ≤ M ≤ N × N − 1), correspondendo aos números de nós e ligações, respectivamente. Os nós são numerados de 1 a N. Seguem M linhas, cada uma com três inteiros u, v e c (0 ≤ c ≤ 1.000) descrevendo uma ligação do nó u para o nó v usando c cm de fio.",
        "titulo": "O Verdadeiro Valor dos Tapetes",
        "descricao": "Os tapetes árabes são muito conhecidos. Sua qualidade é reconhecida em todo o mundo, e as características de um bom tapete são apreciadas por todos. Avaliar os tapetes é uma tarefa muito difícil, e os especialistas analisam suas características minuciosamente para estabelecer um preço adequado. Os tapetes são formados por pontos, onde os fios são amarrados. Apesar de ser muito difícil para uma pessoa comum, os especialistas são capazes de dizer a direção em que o fio foi amarrado entre dois pontos. Estes fios formam circuitos nos nós e padrões complicados têm centenas ou mesmo milhares de circuitos e são muito intrincados. Circuitos grandes (em que a quantidade de fio dividida pelo número de nós é muito grande) desvalorizam o tapete, pois o torna menos resistente. Circuitos pequenos são valorizados, e o avaliador sempre busca encontrar o menor circuito existente no tapete, pois este é um indicador do valor do tapete. Sua tarefa neste exercício é ler os dados de um tapete com N nós e M fios (ligações entre estes nós em que a direção em que foi feita é determinada) e determinar o valor do menor circuito do tapete, ou seja, o circuito em que a razão entre a quantidade de fio dividida pelo número de nós é mínimo."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1605",
        "saida": "Para cada instância imprima uma linha contendo um número com 2 casas decimais, que é o número esperado de lotes que o comprador precisa comprar para completar sua cáfila.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste de 3 linhas, cada uma contendo 2 inteiros. Na primeira linha temos N1 e N2 (1 ≤ Ni ≤ 50). A segunda linha consiste de M1 e M2 (0 ≤ Mi ≤ Ni), enquanto que a terceira linha temos W1 e W2 (1 ≤ W2 ≤ W1 ≤ 100), que dão as probabilidades de cada categoria através da realção:",
        "titulo": "Montando Sua Própria Cáfila",
        "descricao": "Camelos foram domesticados e são utilizados pelos povos beduínos há vários milênios. Há dois tipos principais, os camelos bactrianos, com 2 corcovas, que são mais raros, e os dromedários, mais comuns, com apenas uma corcova. Para simplificar, os camelos bactrianos são chamados apenas de camelos. Tanto camelos quanto dromedários têm diferentes características interessantes: alguns são líderes natos, outros têm mais força, outros suportam caminhadas mais longas, etc. No entanto, cada animal possui apenas uma dessas características. Uma caravana precisa de animais com várias dessas características. No comércio desses animais são consideradas N1 características diferentes para dromedários e N2 características diferentes para camelos. Os beduínos comercializam esses animais sempre em cáfilas formadas por grupos de três. Essa é uma tradição bérbere que remonta ao século IX, quando os comerciantes de camelos e dromedários só podiam vender seus animais dessa forma. Os compradores não podem escolher os animais. Os lotes de 3 animais são preparados pelo vendedor e o comprador pode apenas dizer o número do lote que deseja comprar, sem mais informações a respeito. Os comerciantes são conhecidos por sua extrema honestidade, e cada lote é formado de forma aleatória. Para cada animal do lote, o comerciante sorteia com probabilidade p1 se será um dromedário e com probabilidade p2 = 1 − p1 se será um camelo, p1 ≥ p2 . Escolhido o tipo i de animal, é escolhida uma característica dentre as Ni, com igual probabilidade, e um animal com essa característica é incluído no lote. Todos os sorteios do comerciante são independentes, podendo um lote conter dois dromedários fortes e um camelo líder, por exemplo, ou mesmo três camelos bons de caminhada. Entretanto, para atestar sua honestidade, sempre que o comerciante produz um lote que tem apenas dromedários ele faz um novo sorteio. Dentre as N1 características para dromedários, há M1 que são desejáveis para o comprador. E dentre as N2 características para camelos, há M2 que são desejáveis para o comprador. Qual o número esperado de lotes que um comprador deve adquirir para montar uma cáfila que tenha dromedários e camelos com todas as M1 e M2 características desejadas?"
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1084",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha na saída, contendo o maior prêmio que Juliano pode ganhar.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros N e D (1 ≤ D < N ≤ 105), indicando a quantidade de dígitos do número que o apresentador escreveu na lousa e quantos dígitos devem ser apagados. A linha seguinte contém o número escrito pelo apresentador, que não contém zeros à esquerda. O final da entrada é indicado por uma linha que contém apenas dois zeros, separados por um espaço em branco.",
        "titulo": "Apagando e Ganhando",
        "descricao": "Juliano é fã do programa de auditório Apagando e Ganhando, um programa no qual os participantes são selecionados através de um sorteio e recebem prêmios em dinheiro por participarem. No programa, o apresentador escreve um número de N dígitos em uma lousa. O participante então deve apagar exatamente D dígitos do número que está na lousa; o número formado pelos dígitos que restaram é então o prêmio do participante. Juliano finalmente foi selecionado para participar do programa, e pediu que você escrevesse um programa que, dados o número que o apresentador escreveu na lousa, e quantos dígitos Juliano tem que apagar, determina o valor do maior prêmio que Juliano pode ganhar."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1493",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro que representa o número de pares de cidades distintas que tem abastecimento de água disjunto.",
        "entrada": "A entrada é composta por diversos casos de teste e termina em EOF. A primeira linha de cada caso de teste contém dois inteiros C (2 ≤ C ≤ 1000) e P (1 ≤ P ≤ 105),que representam respectivamente, o número de cidades e o número de tubos de água em Nlogônia. Cidades são identificadas com diferentes números inteiros de 1 a C, em ordem decrescente de altitude (duas cidades não têm a mesma altitude); Logville é a cidade 1. Cada uma das P linhas seguintes descreve uma tubulação com dois números inteiros U e V (1 ≤ U <V ≤ C), indicando que o tubo conecta a cidade U com a cidade V. Você pode assumir que não há dois tubos iguais entre um mesmo par de cidades e que, para cada cidade de Nlogônia há pelo menos um caminho de abastecimento de água que termina nela.",
        "titulo": "Abastecimento de Água Disjunto",
        "descricao": "Nlogônia é um reino que consiste em várias cidades localizadas em uma grande montanha. A capital é Logville, localizada no pico da montanha. Logville tem um enorme lago com uma forma perfeitamente redonda, apropriadamente chamado \"The Big O\". Este é o único lago com água potável em todo o reino, por isso é usado para abastecer todas as cidades. Algumas cidades em Nlogônia estão conectados com tubos de água que permitem a distribuição da água. Como não há bombas, cada tubo leva a água de uma cidade para outra cidade em uma altitude mais baixa, usando a gravidade. O sistema de água da Nlogônia tem sido uma fonte de preocupações para a Rainha, já que as cidades dependem de outras cidades para o seu abastecimento de água, por isso ocorrem discussões sobre a quantidade de água que uma cidade pode utilizar. Um caminho de abastecimento de água é uma sequência de cidades em ordem decrescente de altitude, a partir de Logville e de tal forma que existe um tubo de ligação entre cada par de cidades consecutivas na sequência. Duas cidades têm abastecimento de água disjunto se e somente se existem dois caminhos de abastecimento de água, um caminho que termina em cada uma das cidades, de modo que Logville é a única cidade que está presente em ambos os caminhos. Observe que Logville tem abastecimento de água disjunto de todas as outras cidades. A rainha considera o abastecimento de água disjunto como uma boa propriedade, já que isso reduz problemas de dependência e também evita que a falta de água se espalhe tão rapidamente através Nlogônia. Portanto, ela ordenou que fosse realizada uma pesquisa para avaliar o estado atual da disjunção do abastecimento de água em todo o reino. Sendo o mais inteligente dos conselheiros na corte da rainha, você foi convocado para ajudar a calcular o número de pares de cidades distintas que têm abastecimento de água separados."
    },
    {
        "nivel": "2",
        "assunto": "6",
        "numero": "1029",
        "saida": "Para cada caso de teste de entrada deverá ser apresentada uma linha de saída, no seguinte formato: fib(n) = num_calls calls = result, aonde num_calls é o número de chamadas recursivas, tendo sempre um espaço antes e depois do sinal de igualdade, conforme o exemplo abaixo.",
        "entrada": "A primeira linha da entrada contém um único inteiro N, indicando o número de casos de teste. Cada caso de teste contém um inteiro X (1 ≤ X ≤ 39) .",
        "titulo": "Fibonacci, Quantas Chamadas?",
        "descricao": "Quase todo estudante de Ciência da Computação recebe em algum momento no início de seu curso de graduação algum problema envolvendo a sequência de Fibonacci. Tal sequência tem como os dois primeiros valores 0 (zero) e 1 (um) e cada próximo valor será sempre a soma dos dois valores imediatamente anteriores. Por definição, podemos apresentar a seguinte fórmula para encontrar qualquer número da sequência de Fibonacci: fib(0) = 0 fib(1) = 1 fib(n) = fib(n-1) + fib(n-2); Uma das formas de encontrar o número de Fibonacci é através de chamadas recursivas. Isto é ilustrado a seguir, apresentando a árvore de derivação ao calcularmos o valor fib(4), ou seja o 5º valor desta sequência: Desta forma, fib(4) = 1+0+1+1+0 = 3 Foram feitas 8 calls, ou seja, 8 chamadas recursivas."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1299",
        "saida": "Para cada caso de teste imprima uma linha com um inteiro que representa o número do jogador (1 ou 2) que vai ganhar o jogo, se ambos jogarem de maneira perfeita.",
        "entrada": "Cada caso de teste é descrito utilizando várias linhas. A primeira linha contém dois inteiros R e C que representam respectivamente o número de linhas e o número de colunas do tabuleiro (1 ≤ R, C ≤ 50). A enésima (i-th) das próximas R linhas contém uma string Bi de C caracteres que descreve a enésima (i-th) linha do tabuleiro inicial. O enésimo (j-th) caracter de Bi é ou `.' (ponto) ou a letra maiúscula 'X', representando que o ladrilho na linha i e coluna j é respectivamente branco ou preto. Dentro de cada caso de teste pelo menos um dos ladrilhos ou mosaicos é branco.",
        "titulo": "Jogo de Mosaicos",
        "descricao": "Jogo de mosaicos ou de ladrilhos é um jogo para dois jogadores, jogado sobre uma placa rectangular na forma de uma tabela de R linhas e C colunas de  células quadradas chamados mosaicos. No início do jogo, alguns dos quadrados podem ser pintados de preto e o restante permanece branco. Em seguida, o jogador 1 e jogador 2 alternam jogadas e o primeiro que não pode fazer um movimento válido perde o jogo. O primeiro movimento do jogo é feito por um jogador e consiste na escolha de um ladrilho branco  escrevendo o número do 1 nele. Depois disso, cada movimento subsequente i consiste em escrever o número i em um azulejo branco não utilizado que é adjacente horizontalmente ou verticalmente (mas não na diagonal)  ao ladrilho numerado i - 1. Note que o jogador 1 sempre escreve números ímpares e jogador 2 sempre escreve números pares. ​A figura a seguir mostra três exemplos possíveis de configurações de uma placa com R = 3 e C = 4, durante um jogo. À esquerda ela mostra a configuração inicial. No centro, mostra um estado intermediário, onde as células em cinza marca os movimentos possíveis para o jogador 2. E à direita mostra a configuração quando o jogo é ganho pelo jogador 2, que escolheu o movimento apropriado.  Sua tarefa é escrever um programa que, dada a configuração inicial do tabuleiro, determina qual jogador irá ganhar, se ambos jogarem de maneira perfeita."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1231",
        "saida": "Para cada caso de teste seu programa deve imprimir uma única linha, contendo um único caractere. Se for possivel encontrar uma concatenação de uma ou mais palavras do primeiro conjunto que seja igual a uma concatenação de uma ou mais palavras do segundo conjunto então o caractere deve ser S, caso contrário deve ser N.",
        "entrada": "A primeira linha de um caso de teste contém dois inteiros, N1 (1 ≤ N1), e N2 (N2 ≤ 20), que indicam respectivamente o número de palavras do primeiro e do segundo conjunto de palavras. Cada uma das N1 linhas seguintes contém uma palavra do primeiro conjunto. Cada uma das N2 linhas seguintes contém uma palavra do segundo conjunto. Obs: cada palavra tem no mínimo um caractere e no máximo 40 caracteres, todos zeros e uns.",
        "titulo": "Palavras",
        "descricao": "Dados dois conjuntos de palavras formadas por zeros e uns, você deve escrever um programa para determinar se existem concatenações de palavras de cada um dos conjuntos que gerem uma mesma palavra. Por exemplo, se um conjunto A contém as palavras 010 e 11 e outro conjunto B contém as palavras 0 e 101, então a palavra 01011010 pode ser formada tanto por contatenações de palavras de A como por contatenações de palavras de B: 010 · 11 · 010 = 01011010 = 0 · 101 · 101 · 0"
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1654",
        "saida": "Imprima todas as combinações de preços que seja possível fazer com quatro itens. O valor total para cada combinação, deve ser de no máximo 20,00 €. Para cada combinação, imprima uma linha com os preços dos quatro itens em ordem crescente, com um caractere de espaço entre eles. Você pode imprimir as combinações em qualquer ordem, mas certifique-se de imprimir cada combinações apenas uma vez.",
        "entrada": "Este problema não contém entradas.",
        "titulo": "Mercearia",
        "descricao": "Um caixa de uma Mercearia parece estar com dificuldade em distinguir o símbolo de multiplicação e de adição. Para facilitar as coisas para ele, você deve comprar itens, de tal forma que o produto de seus preços seja igual à soma dos mesmos. Claro, se você comprar apenas um item, isso será sempre verdade. Já com dois ou três itens, essa tarefa pode se tornar muita chata para você. Portando, agora você está interessado em encontrar quatro itens, de modo que a soma dos preços dos quatro itens seja igual ao produto de seus preços. Você deve considerar os preços em Euros (€), com dois dígitos depois do ponto decimal. Obviamente, cada produto custa pelo menos um centavo."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "2089",
        "saida": "Para cada entrada seu programa deverá imprimir uma linha, contendo sim, caso seja possível realizar o pagamento da forma que seu amigo deseja ou nao, caso contrário.",
        "entrada": "A entrada possui diversos casos de teste. Cada caso inicia com dois inteiros V (1 ≤ V ≤ 10^5) e N (1 ≤ N ≤ 10^3), representando respectivamente, o valor do lanche que seu amigo deseja comprar e a quantidade de moedas que seu amigo possui. Na próxima linha terá N inteiros, onde Xi (1 ≤ Xi ≤ 10^5) representa o valor da i-ésima moeda. A entrada termina com V = N = 0 e não deve ser processada.",
        "titulo": "Lanchonete",
        "descricao": "Todos os dias nos intervalos da faculdade você e seu amigo vão para a lanchonete da faculdade o mais rápido possível para poder comprar um lanche. Apesar de vocês serem bem rápidos no trajeto entre o prédio do curso e a lanchonete, sempre vocês acabam enfrentando uma fila enorme. Seu amigo é muito metódico, então todos os dias ao chegar na fila ele retira do bolso todas as suas moedas e verifica se ele consegue pagar o lanche inteiramente com o dinheiro que ele tem, sem necessitar que a funcionária da cantina dê algum troco, afinal o troco dado sempre é em moedas e seu amigo não gosta nem um pouco de ter moedas, então caso ele não consiga pagar dessa forma, ele realiza o pagamento no cartão. Como a fila é sempre muito grande e na maioria das vezes vocês estão entre os últimos, seu amigo realiza a contagem com muita calma para que não ocorra nenhum erro. Hoje foi um dia diferente, ao chegar na lanchonete, você e seu amigo se depararam com algo muito estranho: a fila estava pequena. Seu amigo ficou muito preocupado e nervoso de não conseguir a tempo verificar suas moedas e ter que fazer as pessoas que estão atrás de vocês esperarem. Tentando o acalmar, você explica para ele que o problema de verificar as moedas é muito simples e que você é capaz de escrever um programa no celular rapidamente que, dado todas as moedas com seus valores e o preço do lanche, informe se é possível pagar usando apenas as moedas o valor total do lanche. Como vocês são uns dos primeiros da fila, escreva esse programa o mais rápido possível, para que seu amigo tome a decisão antes de chegar no caixa."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1614",
        "saida": "Imprima a soma das distâncias percorridas por Luís em cada caso. Lembre-se que você deve minimizar este valor.",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso de teste estarão três números inteiros N (1 ≤ N*) , M (M ≤ 100*) e K considerando 1 ≤ K ≤ min(10, N*M). Nas próximas N linhas estarão as localizações dos pontos turísticos e nas próximas M linhas as localizações das estações de metrô, todas dadas por um par de inteiros (x, y - 0 <= x,y <= 1000* ou 0 <= x,y <= 105**). Não há pontos turísticos ou estações de metrô na mesma localização. *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste.",
        "titulo": "Ajude o Turista",
        "descricao": "Luís está de férias e gostaria de conhecer os pontos turísticos de Manhattan nos próximos K dias. Através de um mapa, ele sabe a localização dos N pontos turísticos e das M estações de metrô da cidade. Para apreciar bastante os passeios, ele irá visitar apenas um ponto por dia. Entretanto, ele é bastante preguiçoso e gostaria de caminhar a menor distância possível entre o ponto turístico e uma estação de metrô. Em outras palavras, encontre K pares distintos de pontos turísticos e estações de metrô, de forma que a soma das distâncias destes pares seja o mínimo possível. A distância é medida usando-se a métrica de Manhattan, ou seja, dado um ponto A e outro B, a distância entre eles é definida por: D(A,B) = |A_x - B_x| + |A_y - B_y|. Mais informações sobre esta distância: http://en.wikipedia.org/wiki/Taxicab_geometry ."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1707",
        "saida": "Imprima um único inteiro por linha, a resposta da pergunta do Kirito.",
        "entrada": "A entrada consiste de diversos casos testes e termina com EOF. Cada caso de teste consiste de 2 inteiros x e y, o par de números que Kirito tirou do saco (1 ≤ x, y ≤ 10^9)",
        "titulo": "Jogo com Números",
        "descricao": "Kirito ama jogos, especialmente aqueles envolvendo números ímpares. Em um dia chuvoso, sem poder sair para brincar com os amigos, ele decidiu brincar sozinho. Ele escreveu números aleatórios em papéis e colocou dentro de um saco. Então misturou tudo e pegou 2 números (x,y) e se perguntou: \"Qual a soma dos dígitos decimais dos números ímpares que estão no intervalo [min(x,y), max(x,y)] (inclui os limites)?\" Agora sua tarefa é ajudar Kirito em seu jogo respondendo suas perguntas."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "2053",
        "saida": "No início de cada instância imprima a linha Instancia k, onde k é o número da instância atual. Em seguida, para cada palavra x da lista, imprima uma linha na saída dizendo x e uma palavra valida se ela pode ser obtida a partir da raiz por meio das regras de composição, e x nao e uma palavra valida caso contrário. Imprima uma linha em branco após cada instância.",
        "entrada": "A entrada é composta por vários casos de teste. Cada teste segue as regras descritas acima. Na primeira linha de cada teste aparece o símbolo raiz, que sempre será uma letra maiúscula. Na segunda linha, o conjunto V será fornecido como uma palavra composta apenas por letras maiúsculas. Cada letra dessa palavra será identificada como um membro de V. O conjunto T será dado como uma palavra de caracteres imprimíveis (com exceção de # e caracteres em branco) na terceira linha. Cada caractere dessa palavra será identificado como um membro de T. A seguir, serão fornecidas várias linhas, que descreverão as regras de composição para a instância atual. Uma regra de composição na forma # → # indica o fim da lista de regras de composição. Por fim, são fornecidas várias linhas, cada uma contendo uma palavra que desejamos saber se pode ou não ser produzida a partir da raiz por meio das regras de composição. Essas palavras não vão conter qualquer caractere em V e são compostas por no máximo 50 caracteres. A lista de palavras termina com uma linha contendo # na primeira coluna.",
        "titulo": "ET Phone Home",
        "descricao": "Desde o início de 2006 o Seti@home (programa de busca de vida alienígena) tem registrado padrões estranhos em transmissões de rádio recebidas do espaço. Inicialmente imaginou-se tratar apenas de estática. Porém, com o tempo e a repetição das transmissões os pesquisadores foram se convencendo que algo mais havia. Convidados a participar do projeto, linguistas da Universidade de Baylor identificaram uma linguagem na transmissão. Era uma linguagem bastante simples. A língua tem várias regras de composição de palavras. As regras de composição serão descritas nesse problema pelos seguintes elementos: um conjunto de símbolos não-terminais V; um conjunto de símbolos terminais T; um símbolo não-terminal especial chamado de raiz; um conjunto de regras de composição de palavras. Todas as regras de composição que consideramos aqui serão ou da forma A → BC ou da forma A → a, onde A, B, C são elementos de V e a é um elemento de T. A notação acima indica que podemos substituir o não-terminal A à esquerda da seta pelo terminal a (no primeiro caso) ou pela concatenação dos não-terminais A e B (no segundo caso) que aparecem à direita da seta. Aplicando repetidamente as regras de composição sobre o símbolo raiz, podemos montar palavras válidas na língua. Por exemplo, suponha que o seguinte conjunto de regras de composição é válido: S → AB A → a B → b A palavra ab pode ser obtida a partir desse conjunto de regras de composição da seguinte maneira: S → AB AB → aB, pois A → a aB → ab, pois B → b Já a palavra b não pode ser produzida a partir de S a partir desse mesmo conjunto de regras de composição. Dado um conjunto de regras de composição e uma lista de palavras, sua tarefa é determinar, para cada uma das palavras, se ela pode ou não ser produzida a partir das regras descritas na instância atual."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1513",
        "saida": "Para cada caso de teste, imprima um inteiro, representando a quantidade mínima de saltos que o cavalo de Rafael deve fazer para capturar os K peões e retornar à posição inicial. É garantido que sempre haverá ao menos uma maneira de capturar todos os peões.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com três inteiro N, M e K (5 ≤ N, M ≤ 100, 2 ≤ K ≤ 15), representando, respectivamente, a quantidade de linhas e de colunas do tabuleiro, e a quantidade de peões a serem capturados. As próximas N linhas irão conter M caracteres cada, onde o caractere na linha i e coluna j indica que na posição [i, j] do tabuleiro há: '.' uma posição válida onde o cavalo pode pular. '#' uma posição inválida onde o cavalo não pode pular. 'C' a posição inicial do cavalo de Rafael. 'P' a posição de um dos K peões o qual Rafael deve capturar. O último caso de teste é indicado quando N = M = K = 0, o qual não deve ser processado.",
        "titulo": "Cavalo",
        "descricao": "Rafael gosta tanto de jogar xadrez que resolveu inventar novas maneiras de se desafiar. Dessa vez ele resolveu jogar com a peça do cavalo, pois a forma como ela se movimenta pareceu adicionar um pouco de dificuldade ao jogo, segundo Rafael. O desafio é o seguinte: Há um cavalo e K peões no tabuleiro. Dada uma posição inicial do cavalo e dos peões, qual a menor quantidade de movimentos necessários para capturar os K peões e voltar à posição inicial? Lembre que a peça do cavalo pode mover-se usando saltos de formato L, ou seja, duas posições para a vertical e uma posição para a horizontal, ou duas posições para a horizontal e uma posição para a vertical. Para capturar um peão, basta ocupar a mesma posição que ele no tabuleiro."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1106",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número real, escrito com precisão de seis casas decimais, indicando a probabilidade de Rubens vencer o torneio.",
        "entrada": "A entrada é composta de vários casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de competidores do torneio (2≤N≤300). Na descrição do torneio, os competidores são identificados por inteiros de 1 a N, e as corridas são identificadas por inteiros de N + 1 a 2 × N - 1. Rubens é sempre identificado pelo número 1. As N linhas seguintes descrevem a matriz M de probabilidades calculada por Rubens. A linha i contém N números reais M[i, j] separados por espaços (0 ≤ M[i, j] ≤ 1, para 1 ≤ i ≤ N e 1 ≤ j ≤ N). Cada elemento M[i, j] da matriz indica a probabilidade de o competidor i vencer o confronto com o competidor j (0.001 ≤ M[i, j] ≤ 0.999 e M[i, j] + M[j, i] = 1 para i ≠ j , e M[i, j] = 0 para i = j). As probabilidades serão sempre dadas com três casas decimais de precisão. Cada uma das N - 1 linhas seguintes contém dois inteiros A, B descrevendo uma corrida, sendo que A e B representam identificadores de competidores ou de corridas (1 ≤ A ≤ 2 x N - 1 e 1 ≤ B ≤ 2 x N - 1). Note que a primeira dessas linhas descreve a corrida identificada por N +1, a segunda linha descreve a corrida identificada por N +2 e assim por diante. Quando um identificador de corrida k aparece na entrada como A, isto significa que o competidor que venceu a corrida k é quem disputará a corrida contra B. Da mesma forma, quando um identificador de corrida k aparece na entrada como B, isto significa que o competidor que venceu a corrida k é quem disputará a corrida contra A. O final da entrada é indicado por uma linha que contém apenas um número zero.",
        "titulo": "Dragster",
        "descricao": "Embora não seja uma modalidade muito popular no Brasil, as corridas de dragsters atraem multidões nos EUA. Os fãs gostam de ver os carros velozes correndo a velocidades de até 400 km/h, mesmo que só por alguns segundos. Muitos competidores são mecânicos amadores que apenas incluiram foguetes e outros artefatos para criarem carros ultra velozes. As competições de dragsters são disputadas em torneios de eliminação, onde cada disputa consiste de dois competidores correndo lado a lado e somente um deles sendo declarado o vencedor (o que chegar primeiro, claro). Os vencedores são então rearranjados em novas partidas, até que no final somente um competidor seja declarado o campeão. Rubens é um piloto experiente, com carreira em diversas categorias, inclusive a Fórmula 1. Entretanto, após enfrentar alguns contratempos, resolveu dedicar-se a competições de dragsters. Aproveitando-se da larga experiência que ganhou durante a Fórmula 1, ele consegue, observando os competidores, dizer qual a probabilidade de cada um dos competidores envolvidos ser o vencedor de uma dada disputa. Embora Rubens seja bom piloto, não é muito bom em matemática nem em programação, e pediu a sua ajuda para, dadas as probabilidades calculadas por Rubens para a disputa entre cada par de pilotos, e a descrição das corridas do torneio, determinar a probabilidade que ele tem de vencer o torneio."
    },
    {
        "nivel": "8",
        "assunto": "6",
        "numero": "1720",
        "saida": "Para cada caso de teste, imprima o número de maneiras diferentes que retângulo dado pode ser preenchido com pequenos retângulos de tamanho 2 por 1. Suponha que o retângulo maior dado seja orientado.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste é composto de dois números inteiros: a altura H (1 ≤ H ≤ 11) e largura W (1 ≤ W ≤ 11) do retângulo maior. A entrada é terminada H = W = 0.",
        "titulo": "Sonho de Mondriaan",
        "descricao": "Quadrados e retângulos fascinaram, o famoso pintor holandês, Piet Mondriaan. Uma noite, depois de produzir os desenhos em sua \"idas ao banheiro\" (onde ele teve que usar o seu papel higiênico para desenhar, pois todo o seu papel estava cheio de quadrados e retângulos), sonhou em preencher um retângulo maior com pequenos retângulos de largura 2 e altura 1 em formas variadas. Especialista como ele era neste matéria, ele viu de relance que ele iria precisar de um computador para calcular o número de maneiras possiveis de preencher um retângulo maior cujas dimensões eram valores inteiros, como dito. Ajude-o, de modo que o seu sonho não vá se transformar em um pesadelo!"
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1033",
        "saida": "Para cada caso de teste deve ser impresso o número do caso de teste na saída. Em seguida, imprima n, b e o ultimo dígito (na base b) do número de chamadas. Deverá haver um único espaço entre estes dois números. Note que o ultimo dígito deverá ser apresentado no formato de um número decimal.",
        "entrada": "A entrada consiste em vários casos de teste. Para cada caso de teste haverá dois números inteiros n (0 ≤ n < (263 - 1)) e b (1 < b ≤ 10000). A entrada será terminada por um caso de teste onde n=0 e b=0, que não deve ser processada.",
        "titulo": "Quantas Chamadas Recursivas?",
        "descricao": "Os números de fibonacci são definidos pela seguinte recorrência: fib(0) = 0 fib(1) = 1 fib(n) = fib(n-1)+fib(n-2) Mas não estamos interessados em números de Fibonacci aqui. Gostaríamos de saber quantas chamadas recursivas seriam necessárias para um determinado número de Fibonacci n, seguindo a recorrência normal. Uma vez que os números serão bem grandes, não será uma tarefa muito simples para você. Mas então vamos torná-la um pouco mais fácil: queremos que você apresente somente o ultimo dígito do numero de chamadas, onde este número deve estar na base b."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "2052",
        "saida": "Para cada instância, imprimir a mensagem \"Instance #H:\", onde H é o número da instância, sequêncial e crescente a partir de 01. Em seguida, para cada N linha da instância, o professor pediu para imprimir, o número de pares conectados, o número de pontos não conectados, seguido da mensagem \"->\". Após, listar todos os pares conectados em ordem ascendente, com um espaço entre dois pares conectados. Se não conseguir conectar nenhum ponto, imprimir a mensagem \"No connection found\". Imprimir uma linha em branco entre duas instâncias consecutivas.",
        "entrada": "A primeira linha de cada instância contém um inteiro N ( 1 ≤ N ≤ 105 ), que corresponde ao número de exercícios presentes na lista do professor Jack. As N linhas seguintes contém um número indefinido de inteiros E ( 1 ≤ E ≤ 16 ). Cada número inteiro E indica que no Mapa de Karnaugh na posição E, é verdadeira, isto é contém 1, como mencionado acima. A entrada termina com final de arquivo (EOF).",
        "titulo": "Mapas de Karnaugh II",
        "descricao": "O professor Jack entregou uma lista de exercícios de revisão, afirmando que na próxima aula vai fazer uma avaliação. O conteúdo principal desta lista é Mapas de Karnaugh. John recebeu a lista, mas percebeu que faltou as aulas de Mapas de Karnaugh. John é esperto e conhece um amigo que sempre vai as aulas, e sabe como resolver Mapas de Karnaugh. Neste problema você é o amigo de John, será que você consegue ajudar John? Conectando a menor quantidade de pares possíveis? Seguindo as especificações do professor: 1º Formar pares: Um par é conectado, quando encontrar o menor ponto adjacente presente. 2º Formar termos isolados: Pares conectados não precisam ser conectados uma segunda vez. No Mapa de Karnaugh acima é possível identificar os pontos conectados seguindo as especificações do professor. Pares conectados: O par [ 2-6 ] indica que o ponto 2 encontrou o menor ponto adjacente presente 6. Pares isolados: Note que o par [ 6-8 ] não é um par isolado. O ponto 6 está conectado com o ponto 2, e o ponto 8 está conectado com o ponto 7. Portanto não é um par válido. Um par é válido se, e somente se, um de seus pontos não estiver conectado a nenhum outro ponto. Cada par consiste de [ origem-destino ], os pares sempre começam a ser conectados do menor ponto presente na N linha da entrada, origem, com o menor ponto adjacente presente de destino, um determinado ponto de origem tem quatro pontos de destino, por exemplo o ponto de origem 16 tem os pontos [ 8, 12, 14, 15 ] de destino. Uma instância contém um número inteiro N. As próximas N linhas consistem em pontos verdadeiros no Mapa de Karnaugh. Estamos falando de Mapas de Karnaugh de quatro variáveis. Portanto no máximo 16 números. Como o professor mostrou um exemplo, tudo fica mais fácil. Na imagem acima é possível observar que são quatro pares conectados: [ 2-6 ] [ 7-8 ] [ 12-16 ] [ 13-14 ]. E todos os pontos estão conectados. Ajude John a resolver os exercícios da revisão."
    },
    {
        "nivel": "7",
        "assunto": "6",
        "numero": "1659",
        "saida": "Para cada caso de teste, a saída deve conter o número mínimo de entradas que devem ser mantidas para satisfazer os requisitos descritos acima. O processo de recuperação de ano descrito acima deve dar o mesmo resultado para as entradas iniciais do que para as entradas que foram selecionadas para manter na memória.",
        "entrada": "A entrada consiste de vários casos de teste. Cada caso de teste começa com o número de entradas N no registro, onde 1 ≤ N ≤ 1000. Cada uma das próximas N linhas contém uma entrada. Cada entrada tem o formato \"mm:dd:HH:MM número ±\", sendo \"mm\" o mês, \"dd\" o dia, \"HH\" a hora, \"MM\" os minutos, e o número (tendo 1-16 dígitos) de cada chamada, seguido por \"+\" marcando uma chamada que você quer definitivamente manter ou por \"-\" para marcar as outras chamadas. As entradas vêm diretamente do registro do telefone, ou seja, elas são classificadas por tempo de recepção da chamada correspondente (a última entrada é a mais recente). Você pode assumir que o processo de recuperação descrito acima produz o ano correto de cada chamada. O último caso de teste é demonstrado por um 0.",
        "titulo": "Chamadas Econômicas",
        "descricao": "O telefone que você comprou há muito tempo tem uma memória interna que mantém o controle de todas as chamadas que recebe. Ele registra a data (mês e dia) e a hora (hora e minuto) de cada chamada, juntamente com o número de quem liga. Apenas um número limitado de chamadas podem ser registradas (memória ainda era cara naquela época). Você descobre que o registro está quase cheio e, portanto, pretende apagar algumas entradas do registro. Na escolha das entradas para apagar você tem que considerar duas restrições: Existem algumas entradas (importantes) que você deseja manter. Você deve conseguir recuperar o ano (que o telefone não armazena) de cada chamada que você mantém. O processo de recuperação é descrito abaixo. Calcule o número mínimo de entradas que devem ser mantidas para satisfazer estes requisitos. Recuperação dos anos Dada uma lista de timestamps (composta de mês, dia, hora e minuto) de chamadas, você descobre o ano de cada chamada pelo seguinte procedimento: A última chamada na lista ocorreu no ano atual. Você deve comparar seu timestamp T com o timestamp T' da chamada anterior. Se T' < T, você deve assumir que as duas chamadas ocorreram no mesmo ano. Se T' ≥ T, você deve assumir que a chamada anterior ocorreu no ano anterior. Você deve percorrer a lista de trás para frente e fazer como no item 2. a cada passo. Nota-se que este procedimento não é o correto de forma geral, mas você pode assumir que é para a entrada que você obtém, e você deve garantir que ele dá o mesmo resultado para um registo encurtado. P.S.: Devido a um erro no software do telefone, nenhuma ligação foi registrada dia 29 de Fevereiro."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1922",
        "saida": "Imprima a quantidade máxima de criaturas que podem ser atingidas com no máximo m marteladas.",
        "entrada": "A primeira linha da entrada será composta por dois inteiros 1 ≤ n ≤ 103 e 1 ≤ m ≤ 10, representando a quantidade de criaturas e a quantidade de marteladas disponíveis, respectivamente. Cada uma das próximas n linhas irá conter dois inteiros 2 ≤ di ≤ 500 e 2 ≤ kdi ≤ 103, representando o instante da primeira e da última aparição da criatura i, respectivamente. É garantido que di  ≤ kdi.",
        "titulo": "Diego e o Jogo do Martelo",
        "descricao": "Durante a festa do Padroeiro de Lagoa de Roça, diferentes jogos, brinquedos e parques de diversão se instalam no centro da pequena cidade do interior da Paraíba. Um deles é o não tão conhecido Jogo do Martelo. O jogo consiste de um tabuleiro esburacado e um martelo que cobre totalmente o tabuleiro. Além disso, há pequenas criaturas (bonecos) que vez por outra saem dos buracos do tabuleiro, ficam visíveis por um segundo e após isso voltam a se esconder no buraco por onde saíram. O objetivo do Jogo do Martelo é atingir a maior quantidade de criaturas com uma quantidade m de marteladas. Após ficar um tempo observando o jogo, Diego percebeu que cada uma das criaturas possuía um padrão de aparição, ou seja, se uma determinada criatura i, apareceu pela primeira vez no instante di, ela tornará a aparecer no instante 2di, depois no instante 3di e assim por diante até que o instante kdi chegasse, após isso essa criatura não apareceria mais. Diego anotou os instantes da primeira e da última aparição de cada uma das criaturas e agora ele precisa de você. Escreva um programa que com essas informações e com a quantidade m de marteladas disponíveis, informe qual a quantidade máxima de criaturas que podem ser marteladas. Obs.: Quando uma criatura é martelada ela não aparece mais durante o jogo."
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1288",
        "saida": "Se o dano total das cargas carregadas for maior ou igual à resistência do castelo então deverá ser impressa a mensagem “Missao completada com sucesso”, caso contrário, deverá ser impressa a mensagem “Falha na missao”.",
        "entrada": "A primeira linha de entrada contém o número de casos de teste. Cada caso de teste inicia com uma linha contendo um número inteiro N (1 ≤ N ≤ 50), que representa o número de projéteis de chumbo disponíveis. Seguem N linhas contendo dois inteiros X e Y, representando respectivamente o poder de destruição do projétil e o peso do projétil. A próxima linha contém um inteiro K (1 ≤ K ≤ 100) que representa a capacidade de carga do canhão e a última linha do caso de teste contém um inteiro R que indica a resistência total do castelo.",
        "titulo": "Canhão de Destruição",
        "descricao": "O jogo canhão de destruição é um jogo muito simples de ser entendido. Você recebeu como missão destruir um determinado castelo, sendo que o mesmo possui como característica um número inteiro R que é a sua resistência. Para tentar completar sua missão, você recebeu um canhão que é carregado com projéteis de chumbo, sendo que este canhão pode ser carregado com quantos projéteis forem possíveis desde que a soma do peso deles em quilos não exceda a capacidade de carga do canhão. Podem existir projéteis com pesos iguais e poder de destruição diferentes devido ao seu formato, embora isso não seja tão importante. Ao atingir o castelo, um projétil faz com que o seu valor de destruição seja diminuído da resistência do castelo. Levando em consideração que o canhão pode ser carregado uma única vez, respeitando o seu limite de quilos, a sua tarefa é carregar o canhão com projéteis que não ultrapassem o seu limite de carga mas que façam o maior estrago possível, para saber se a missão foi completada ou não."
    },
    {
        "nivel": "3",
        "assunto": "6",
        "numero": "1685",
        "saida": "Para cada caso teste, imprima o lado maximun da praça seguido pela lista do ponto superior esquerdo de cada praça na imagem (organizado por linha e em caso de empate para a coluna). Verifique a amostra para mais detalhes. Não imprima linha em branco entre dois casos testes.",
        "entrada": "A primeira linha contém a quantidade de casos tests T (T <= 40). A segunda linha contém dois números inteiros n e m (1 <= n, m <= 1000), a altura e a largura da imagem. As seguintes linhas n contém as informações da imagem, onde \" * \" representa terras ocupadas por árvores e \" . \" Representa terra livre. Há pelo menos um \" . \" Na imagem.",
        "titulo": "Praça de Daniel",
        "descricao": "Daniel é um engenheiro civil, que foi atribuído a encontrar possíveis locais para a construção de uma praça, no entanto, a pedido da população local para a construção da praça, nenhuma árvore deve ser cortada. Daniel tem imagens de satélite do lugar, a necessidade de maximizar a área da praça e relatar suas possíveis localizações. Você poderia ajudar?"
    },
    {
        "nivel": "4",
        "assunto": "6",
        "numero": "1522",
        "saida": "Para cada instância, imprima uma linha contendo o número 1 se o jogador pode ganhar a instância do jogo ou o número 0 se o jogo for impossível.",
        "entrada": "A entrada é composta por várias instâncias Cada instância é iniciada por um inteiro N (0 ≤ N ≤ 100), que identifica o número de cartas em cada pilha. A entrada termina quando N = 0. Cada uma das N linhas seguintes contém três inteiros A, B e C, que descrevem os valores numéricos das cartas em um nível da pilha (0 ≤ A, B, C ≤  9). As pilhas são descritas do topo até o fundo.",
        "titulo": "Jogo das Pilhas",
        "descricao": "Claudio inventou um novo jogo, chamado de Jogo das pilhas, e quer submetê-lo ao próximo concurso de jogos da URI (União Recreativa Internacional). Apesar de muito divertido, o jogo parece ser muito difícil de ganhar, logo Claudio pediu sua ajuda para avaliar se algumas instâncias do jogo podem ser vencidas. O jogo das pilhas é individual, e é jogado com três pilhas, inicialmente com o mesmo número de cartas. Cada carta tem um valor numérico inteiro de 0 até 9. O jogador pode, a qualquer momento ver o valor de qualquer carta, mas só pode jogar com as cartas que estão no topo das pilhas. Em cada rodada, o jogador pode remover qualquer combinação de cartas que estejam no topo da pilha (pode escolher 1, 2 ou até 3 cartas) cuja soma dos valores seja múltipla de 3. O jogo é ganho quando todas as cartas forem removidas das pilhas. Se alguma carta não puder ser removida, perde-se o jogo."
    },
    {
        "nivel": "6",
        "assunto": "6",
        "numero": "1269",
        "saida": "Os casos de teste devem ser respondidos na ordem em que foram apresentados. Para cada caso de teste, você deve imprimir: • uma única linha contendo cinco estrelas ***** indicando o início do processo • para cada empregado i, uma linha com dois inteiros i e s, separados por um espaço em branco, o que significa que i tem um salário de s.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros T e E indicando, respectivamente, o número de tarefas e do número de empregados (1 ≤ T ≤ 1000 e 1 ≤ E ≤ 1000). As tarefas são numeradas de 1 a T e empregados de 1 a E. Em seguida, vai vir uma sequência de linhas que descrevem as tarefas 1 a T em ordem crescente. Cada tarefa é descrita por duas linhas. A primeira dessas linhas contém três inteiros BS, ND e NE, representando respectivamente o significado básico da tarefa, o número de tarefas que dependem diretamente sobre ela, e o número de empregados que executam-la (1 ≤ BS ≤ 1000, 0 ≤ ND < T e 1 ≤  NE ≤ E). A segunda linha contém inteiros ND + NE correspondentes primeiro ao ND que tem tarefas diretamente dependentes e depois os funcionários NE que executaram a tarefa. O fim da entrada é indicado por T = E = 0.",
        "titulo": "ICPC Ataca Novamente",
        "descricao": "A Companhia Internacional de Projetos Concretos (ICPC) é uma empresa de construção especializada na construção de casas para o mercado high-end. A empresa é mais rentável do mundo devido a um método muito eficiente em divisão de terras que tem sido usado em seus projetos de desenvolvimento de habitações desde o ano passado. Recentemente houve um caos na ICPC, porque os funcionários se recusaram a trabalhar alegando que eles não ganhavam o suficiente. Preocupado com a perda de lucros devido à greve, a diretoria da empresa propôs um novo método para calcular os salários, que foi felizmente aceito por todos. O salário de um trabalhador reflete na importância das tarefas que ele / ela tem para realizar e é influenciado pela forma como as tarefas dependem uma das outras. Uma tarefa X depende de uma tarefa Y se (i) X depende diretamente de Y, ou (ii) existe uma tarefa T tal que X depende diretamente de T e T depende de Y. Uma vez que todas as tarefas em ICPC devem ser realizadas, não há circularidade da relação de dependência da tarefa. Além disso, a tarefa pode ser realizada por mais do que um trabalhador. Um significado básico está associado com cada tarefa que reflete na sua importância (por exemplo, o desenvolvimento de um método eficiente na divisão de terras é mais importante do que a construção de casas em si). O significado de uma tarefa T é então definido como o significado básico de T mais o significado de cada tarefa que depende diretamente de T. Note que se nenhuma outra tarefa depende diretamente da tarefa T, o significado básico e o significado de T são iguais. O salário de um trabalhador é a soma dos significados de todas as tarefas que ele executa as quais não dependem de qualquer outra tarefa realizada por ele. Em outras palavras, um valor igual ao significado da tarefa X será adicionado ao salário de um trabalhador W que trabalha em uma tarefa X se não houver nenhuma outra tarefa Y da qual X depende, e na qual W trabalha também em Y. ICPC deseja que você ajude-os a determinar o salário de cada um de seus funcionários."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1788",
        "saida": "Para cada caso, exiba uma única linha, a quantidade máxima de posições possíveis de serem visitadas se a posição de início for escolhida de forma ótima.",
        "entrada": "Haverá diversos casos de testes. Cada caso inicia com três inteiros, L, C e K (1 ≤ L, C ≤ 1000, 0 ≤ K ≤ 5), representando, respectivamente, a quantidade de linhas, colunas, e a quantidade de posições especiais que podem ser utilizadas. A segunda linha contém um caractere P (‘N’ ou ‘R’) representando o modo do jogo, normal ou reverso. A seguir haverá L linhas, cada linha contendo C inteiros X (0 <= X <= 10^7). A entrada termina com L = C = K = 0, a qual não deve ser processada.",
        "titulo": "Brincando com Números",
        "descricao": "Alguns amigos, entediados em uma tarde de domingo, resolveram inventar uma brincadeira. Eles desenharam uma matriz de L linhas e C colunas em uma folha de papel, e em seguida escreveram um número em cada uma de suas LxC posições. A brincadeira funciona da seguinte maneira: Uma posição (i, j) qualquer da matriz pode ser escolhida para começar o jogo, i representando uma linha, e j uma coluna. A partir dessa posição, é possível mover para as posições (i-1, j) – (i, j+1) se o modo do jogo for normal ou para as posições (i+1, j) – (i, j-1) se o modo do jogo for reverso. Porém, só é possível mover para alguma dessas posições, se o número contido nela for menor que o número da posição atual. Nesse jogo, há algumas posições especiais. São as posições que contêm um número primo. Quando um jogador cai nessa posição, ele pode se mover para qualquer uma das 2 adjacentes(de acordo com o modo do jogo), mesmo que o número contido nela não seja menor que o número atual. Em uma partida, é possível utilizar apenas K posições especiais. Após a utilização das K posições, uma posição com número primo será tratada como uma posição normal. O objetivo do jogo é “visitar” o maior número de posições possíveis."
    },
    {
        "nivel": "5",
        "assunto": "6",
        "numero": "1543",
        "saida": "Para cada caso de teste imprima uma linha, contendo um inteiro, representando a soma máxima que é possível alcançar se os padrões forem escolhidos de forma ótima.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com dois inteiros, N e M (1 ≤ N, M ≤ 100), indicando o número de linhas e de colunas do quadro, respectivamente. A seguir haverá N linhas, contendo M inteiros cada, representando os valores do quadro. Seja v o valor de qualquer posição do quadro, 1 ≤ v ≤ 100. A seguir haverá um inteiro K (1 ≤ K ≤ 100), indicando o número de padrões. Em seguida haverá K linhas, cada uma com M caracteres, representando cada um dos padrões, conforme a simbologia descrita no enunciado. O último caso de teste é indicado quando N = M = 0, o qual não deverá ser processado.",
        "titulo": "Quadro Premiado",
        "descricao": "Você está em um programa de televisão, e tem uma ótima chance de ganhar muito dinheiro. Trata-se de um jogo com algumas regras peculiares, e o montante de dinheiro resultante dependerá apenas da sua esperteza, podendo-se até sair perdendo caso se jogue mal. O jogo funciona da seguinte maneira: há um quadro, com N linhas e M colunas, e em cada posição deste quadro há um inteiro positivo, representando uma quantia em dinheiro. Em cada uma dessas posições você tem a opção de colocar um dos seguintes sinais: '+' - Significa que o valor daquela posição deve ser somado à seu prêmio. '-' - Significa que o valor daquela posição deve ser subtraído do seu prêmio. '.' - Significa que tal posição deve ser ignorada. A vida seria muito simples se você pudesse colocar '+' em todas as posições, portanto há duas regras adicionais ao jogo: para cada linha do quadro, você deve preencher as posições com um dos padrões de sinais montados pelos organizadores do jogo; e para cada coluna do quadro, não é permitido que duas posições adjacentes verticalmente tenham o mesmo sinal (se aplica aos sinais '+' e '-'). É possível usar o mesmo padrão mais de uma vez, desde que não desrespeitando a segunda regra acima. Veja um exemplo na imagem abaixo, onde os padrões são: “++”, “--”, “.+” e “+.”. Considere que há sempre ao menos uma maneira de se completar o quadro. Como o jogo é novo, eles deixaram que você usasse seu computador para te ajudar na decisão, sem saber que você era um programador. Escreva um algoritmo que lhe diga qual a soma máxima que é possível alcançar no jogo."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2184",
        "saida": "Imprima uma única linha, a maior soma das forças dos pomekons capturados que Geraldinho pode conseguir, respeitando as condições dadas. Caso não consiga capturar nenhum pomekon, imprima -1.",
        "entrada": "A primeira linha contêm dois inteiros N, K, indicando, respectivamente, o número de pontos mapeados na cidade e a quantidade máxima de pontos em que Geraldinho pode passar. (2 ≤ N ≤ 105, 2 ≤ K ≤ 103). Segue então N-1 linhas, contendo três inteiros X, Y, F, indicando que existe uma ligação bidirecional entre o ponto X e Y contendo um pomekon de força F. (1 ≤ X, Y ≤ N, X != Y, 1 ≤ F ≤ 1000). Após isso, há uma linha com um inteiro Q, indicando o número de rotas. Q linhas seguem com dois inteiros A, B, indicando que existe uma rota partindo do ponto A até o ponto B. (1 ≤ Q ≤ 5*103, 1 ≤ A, B ≤ N, A ≠ B).",
        "titulo": "Pomekons",
        "descricao": "Pomekon GO foi lançado e já é uma febre entre as pessoas. Após vários dias andando em sua cidade procurando por um padrão de onde os pomekons aparecem, Geraldinho tirou algumas conclusões e deseja usar suas habilidades em programação para sair na frente na captura dos pomekons. Geraldinho mapeou sua cidade em vários pontos. Entre cada par de pontos que se conectam diretamente, ele sabe a força do pomekon que aparece por lá. Agora, Geraldinho quer expandir sua jornada pomekon por todo o mundo e, para isso, ele necessita de sua ajuda. Existem Q possíveis rotas no formato [A, B]. Isso significa que você deve andar do ponto A até o ponto B. (Observe que existe apenas um caminho entre quaisquer pares de pontos). Cada rota pode ser usada uma única vez e é possível capturar apenas um pomekon por rota, já que as pobekolas estão caras. Outro fato importante é que Geraldinho pode visitar no máximo K pontos em sua jornada. Se existir duas rotas que passam por um ponto P, ele será contado duas vezes. Se existir duas rotas que passam pela mesma ligação, é possível capturar o pomekon nas duas passadas. Geraldinho quer maximizar a soma das forças dos pomekons que poderá capturar, ajude-o nessa jornada!"
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1813",
        "saida": "Para cada instância solucionada, você deverá imprimir um identiﬁcador \"Instancia h\", em que h é um número inteiro, sequencial e crescente a partir de 1. As próximas k linhas referem-se à possibilidade das entregas. Para 1 ≤ j ≤ k, você deve imprimir na j-ésima linha a mensagem \"Impossivel\" se não for possível realizar a entrega dentro do tempo limite, ou \"Possivel - km, min\", onde é a distância que deve ser percorrida e o tempo gasto para percorrer essa distância. Se houver mais de um caminho com a menor distância possível, escolha o de menor tempo. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "Seu programa será capaz de resolver várias instâncias do problema logístico. Cada instância possui a estrutura descrita abaixo. Na primeira linha são fornecidos o número de cidades (0 ≤ n ≤ 100) e o número de estradas (0 ≤ m ≤ 10000) da malha viária. Nas próximas m linhas são dados, em cada linha, quatro números inteiros separados por espaços em branco, x y c t, em que x e y são as cidades de onde sai e onde chega uma estrada, respectivamente, c é o comprimento desta estrada e t o tempo gasto para percorrê-la (obtido junto ao departamento nacional de estradas e rodagem, que afere o trânsito de tempos em tempos). Observe que 1 ≤ x, y ≤ n e que c, t ≥ 0. Uma característica interessante na República Tcheca é que as estradas são de mão única para evitar as ultrapassagens indevidas, que causam acidentes. Na linha seguinte é fornecido um inteiro k ≥ 0 que representa o número de entregas que seu programa deve planejar nesta malha viária. As próximas k linhas possuem, em ordem, a cidade de origem, a cidade de destino e o tempo limite t para o transporte da mercadoria, em minutos. De acordo com o órgão de inspeção e vigilância sanitária, nenhum transporte com duração superior a 100 horas será admitido. Logo, 0 ≤ t ≤ 6000. Um valor n = 0 indica o término das instâncias e não deve ser processado.",
        "titulo": "Anacrônico?",
        "descricao": "Mr. Řež Slovankou é proprietário de uma empresa em Praga especializada no transporte de produtos perecíveis. Por ser uma das mais antigas e tradicionais empresas do ramo, ela é responsável por mais de 90% dos transportes deste tipo de mercadoria realizadas no país. Diariamente, vários caminhões carregados deixam postos da empresa (local onde os produtos ﬁcam armazenados) com destino aos centros consumidores. Visando um futuro ingresso no Espaço Econômico Europeu, o governo da República Tcheca, através do órgão de inspeção e vigilância sanitária, baixou uma série de medidas para assegurar ainda mais a qualidade dos alimentos consumidos pela população. Para não perder mercado, a empresa de Mr. Řež precisa adequar-se, o mais rápido possível, às novas regras. Segundo o governo, a partir de agora, produtos destinados a diferentes centros consumidores não mais poderão compartilhar um mesmo caminhão. Além disso, todo transporte deverá ser concluído em um período abaixo de um tempo limite, especiﬁcado para cada mercadoria. A adequação a essas novas regras trará consigo um aumento generoso nos custos operacionais da empresa. Preocupado com isso, Mr. Řež decidiu que seus caminhões deverão satisfazer às regras, mas que também deverão percorrer sempre o menor caminho possível até os centros consumidores (para economizar combustível, gastar menos os pneus, etc.). Para resolver este problema logístico, Mr. Řež pediu auxílio a você, que disse ser capaz de construir um programa que recebe um mapa da malha viária (em que cada estrada tem associado um comprimento em quilômetros e um tempo em minutos que leva para ser percorrida), a origem e o destino do transporte, o tempo limite, e diz se é ou não possível realizar a entrega de acordo com as restrições impostas. Em caso aﬁrmativo, você ainda disse que responderá o tempo gasto e a distância percorrida. Mr. Řež ﬁcou muito impressionado e satisfeito com sua prestatividade, e prometeu-lhe uma boa gratificação."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1275",
        "saida": "Para cada caso de teste da entrada seu programa deverá produzir uma linha de saída, contendo ou um inteiro indicando o menor número de lâmpadas necessárias para alcançar uma configuração vencedora caso ela existir. Caso contrário, seu programa deverá imprimir a mensagem ‘No solution’, conforme exemplo abaixo.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois números inteiros N, M indicando respectivamente o número de linhas e o número de colunas da placa (1 ≤ N ≤ 7, 1 ≤ M ≤ 7). A segunda linha contém um B inteiro que indica o número de quadrados do tipo barreira (0 ≤ B ≤ N × M). Cada uma das B linhas seguintes descrevem uma barreira, que contém três inteiros R, C e K, representando, respectivamente, o número da linha (1 ≤ R ≤ N), o número da coluna (1 ≤ C ≤ M) e o número da barreira (-1 ≤ K ≤ 4). K = -1 significa que a barreira é não numerada. O final da entrada é indicado por N = M = 0.",
        "titulo": "Light Up",
        "descricao": "Light Up (Iluminar - em português) é um enigma ou jogo definido em uma placa retangular dividida em quadrados menores. Alguns quadrados desta placa são \"vazios\" (quadrados brancos na figura abaixo) e outros quadrados são \"barreiras\" (quadrados escuros na figura abaixo). Um quadrado que indica uma barreira pode ter um número inteiro i associado a ele (0 ≤ i ≤ 4). Figura: (a) Puzzle com 6 linhas, 7 colunas e 7 barreiras; (b) uma solução para o enigma. Neste puzzle o objetivo é \"iluminar\" todos os quadrados vazios, colocando lâmpadas em alguns dos quadrados (as lâmpadas são representadas como círculos na figura). Cada lâmpada ilumina o quadrado em que está além de todos os quadrados alinhados com ele, horizontalmente ou verticalmente até um quadrado que contenha uma barreira ou até o fim do tabuleiro. Uma configuração vencedora satisfaz as seguintes condições: • todos os quadrados vazios devem ser acesos; • a luz não pode ser acesa por outra lâmpada; • todos os quadrados numerados como barreira devem ter exatamente o número de lâmpadas adjacentes a eles (nos seus quatro lados acima, abaixo, e para o lado); • quadrados que indicam uma barreira não numerados podem ter qualquer número de lâmpadas adjacentes a eles. Você deve escrever um programa para determinar o menor número de lâmpadas que são necessárias para alcançar uma configuração vencedora."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1955",
        "saida": "Imprima uma linha contendo unicamente a expressão Fail! se não é possível alocar as orcas nos tanques como desejado ou a expressão Bazinga! se é possível.",
        "entrada": "A primeira linha da entrada consiste de um inteiro N (1 ≤ N ≤ 103), o qual representa o número de orcas do See World. A propósito, cada orca do See World é representada unicamente por um único código entre 1 e N. Cada uma das N linhas seguintes consiste de N inteiros, de modo que o j-ésimo inteiro da i-ésima linha (1 ≤ i, j ≤ N) é 1 se as orcas de códigos i e j partilham de ao menos um dialeto ou 0 caso contrário.",
        "titulo": "See World",
        "descricao": "Sob a orientação da Profª Graziela Tonin, os estudantes de Tópicos Engenharia de Software estão desenvolvendo um sistema para ajudar o See World, o novo parque temático da cidade, a alocar orcas em dois tanques gigantes. As orcas, em particular, possuem uma hierarquia social bastante complexa, de pelo menos 4 níveis, e o curioso é que orcas são capazes de vocalizar diferentes dialetos, dependendo do nível da hierarquia social pelo qual se relacionam com seus interlocutores. Uma das maiores dificuldades em manter orcas em cativeiro é que, se duas orcas são postas juntas num mesmo tanque mas falam nenhum dialeto em comum, elas eventualmente brigarão, por não se entenderem, e por serem oriundas de culturas totalmente diferentes. Às vezes elas podem se machucar gravemente ou até morrer. Assim, o See World deseja alocar suas orcas nos seus dois tanques de modo que, se duas orcas forem alocadas num mesmo tanque, seja garantido que elas partilhem de ao menos um dialeto."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1742",
        "saida": "Seu programa deve imprimir uma linha para cada query com o número de maneiras de fugir o mais rápido possível. Como o número pode ser muito grande, sua saída deve ser módulo 109 + 7. Imprima uma linha em branco após cada caso teste.",
        "entrada": "A entrada é composta por diversos casos testes e termina com o fim de arquivo. Cada uma descreve um mapa e começa com três inteiros N,M (1 ≤ N, M ≤ 1000) e H (0 ≤ H ≤ 100), os quais são, respectivamente, o tamanho do grid e o número de buracos, como descrito acima. Então, seguem H linhas, cada linha com 4 inteiros xi, yi, xf e yf (0 ≤ xi,xf ≤ N; 0 ≤ yi,yf ≤ M ) descrevendo o canto inferior esquerdo e o canto superior direito de um buraco. Depois vem um inteiro Q (1 ≤ Q ≤ 100), o número de queries. As próximas Q linhas, cada uma com 4 inteiros xi, yi, xfe yf (0 ≤ xi,xf ≤ N; 0 ≤ yi,yf ≤ M ), os quais são o começo e o fim como descrito acima. Entre casos de testes consecutivos, haverá uma linha em branco. É garantido que em um mapa, todos os buracos são disjuntos e terá sempre pelo menos um jeito de sair.",
        "titulo": "Entrando em Confusão",
        "descricao": "Bob foi a Babilônia procurando por novas aventuras. Mas, assim que chegou, ele encontrou confusão com as criaturas daquele lugar que não eram muito gentis. Eles tinham um jogo esquisito e agora era a vez de Bob jogá-lo. Eles colocariam o Bob em algum lugar e objetivo era sair com vida. Como Bob sabia que ele seria frito caso não fizesse um plano a tempo, ele robou um mapa do terreno em que ele seria jogado. Mas ele ainda não sabia exatamente onde seria largado. Então ele teve que memorizar o mapa inteiro para poder sair com vida. Felizmente, o terreno era retangular (N+1)x(M+1) e as únicas possíveis direções eram ir para o norte,sul, leste e oeste. Uma coisa crucial era memorizar onde eram os buracos, também retangulares. Como ele tinha que sair o mais rápido possível, ele não podia errar o caminho. Exemplo de um grid 6x6 com dois buracos e um jeito de sair. Agora ele está te perguntando de quantas maneiras ele poderia sair o mais rápido possivel se ele fosse largado em uma posição (xi, yi) e tivesse que chegar em (xf , yf)."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "2082",
        "saida": "Para cada instância imprima uma linha contendo a soma dos custos das ligações que devem ser removidas.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém dois inteiros N e M (1 ≤ N ≤ 100 e 1 ≤ M ≤ N*(N-1)/2) indicando o número de máquinas e o número de ligações, respectivamente. Cada uma das M linhas seguinte possui três inteiros u, v e c (1 ≤ u, v ≤ N, 1 ≤ c ≤ 100) que representam a existência de uma ligação entre a máquina u e v com custo c. Tal ligação pode ser usada para viajar da máquina u para máquina v e também da máquina v para máquina u.",
        "titulo": "Viagens no Tempo",
        "descricao": "Albert Einstein nasceu na Alemanha, mas foi na Suíça, trabalhando como funcionário público, que escreveu em 1905 os trabalhos que revolucionaram a Física moderna e o tornaram famoso. Em 1921 ganhou o prêmio Nobel de Física pela descoberta da lei do efeito fotoelétrico. Muitos acham seus trabalhos sobre a Teoria da Relatividade os mais importantes de sua carreira, entretanto não foram os que renderam o valioso prêmio. Einstein gostava muito de fazer “experimentos mentais” para avaliar suas teorias. Um desses experimentos é muito famoso e descreve um elevador caindo com um relógio dentro. A ideia de viagens no tempo acabaram surgindo como possíveis, desde que se descobrisse como construir máquinas que pudessem viajar em velocidades maiores do que a velocidade da luz. Certamente, num futuro não muito distante, isso será possível e poderemos viajar livremente entre as eras e ver eventos como o descobrimento do Brasil em 1500, a chegada da Família Real em 1808 ou o Corinthians campeão da Libertadores em 2962 ao vivo. Com as constantes viagens no tempo, será importante regular o serviço. As máquinas do tempo estarão espalhadas por toda a História e os viajantes terão de pegá-las para viajar para o presente ou para o futuro. Devido a restrições técnicas destas máquinas, não será possível viajar para qualquer instante do tempo diretamente, mas apenas para outros momentos históricos, de onde uma nova máquina poderá ser usada para seguir viagem. No entanto, estando em um momento histórico, você consegue ir para qualquer outro momento viajando por uma ou mais máquinas. Juntamente com os viajantes do tempo, também surgirão os piratas da História, que tentarão roubar tesouros, inverter acontecimentos e mudar a história com os objetivos mais maldosos. Isso acarretará na criação da Polícia do Tempo. No ano de 2850 (antes do Corinthians ganhar sua primeira Libertadores) a Polícia do Tempo resolve isolar acontecimentos históricos, desabilitando ligações entre algumas máquinas. Cada ligação tem um custo associado para ser desabilitado, e sua tarefa é encontrar, dado um conjunto de momentos históricos, um conjunto de ligações – de custo mínimo – que ao serem desconectadas isolam os acontecimentos, ou seja, estando em uma máquina não será possível viajar para algumas das outras máquinas."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1502",
        "saida": "Para cada caso de teste imprima uma única linha contendo a menor diferença absoluta possível entre as somas inicial e final dos postes.",
        "entrada": "Cada caso de teste contém uma linha com dois inteiros W e N (1 ≤ W ≤ 1000, 1 ≤ N ≤ 15). Em seguida há N linhas, cada uma contendo três inteiros Xi, Yi e Pi, descrevendo a posição e a energia inicial de cada poste (0 ≤ Xi ≤ W, 0 ≤ Yi ≤ 1000, 0 ≤ Pi ≤ 200). As paredes dos corredores estão nas posições x = 0 e x = W. O último caso de teste é seguido de uma linha contendo dois zeros.",
        "titulo": "Travessia",
        "descricao": "Twilight e seus amigos estão tentado impedir Discord de criar caos. Enquanto passavam por um corredor muito comprido em direção a Canterlot, eles se depararam com um labirinto de lasers mortais que bloquearam seu caminho! O corredor tem largura W. O labirinto de lasers consiste de N postes energizados com uma energia não-negativa Pi. Cada poste é capaz de criar um quadrado de lasers mortais centrado no poste com comprimento igual ao dobro do quadrado de sua energia e um par de lados paralelos às paredes do corredor. Note que quadrados podem se sobrepor, e que pode haver mais de um poste numa mesma posição. Twilight planeja usar sua magia para alterar as energias dos postes para alguns valores inteiros não-negativos de forma que seja possível atravessar o corredor e continuar sua jornada sem serem descobertos. Desligar todos os postes pode causar suspeitas, portanto Twilight decidiu modificar as energias dos postes de forma que a travessia seja possível e que a diferença absoluta da energia total do sistema antes e depois da travessia seja a mínima possível. Alterar as energias enquanto seus amigos atravessam pode ser perigoso, por isso Twilight decide que fará todas as alterações de antemão, e não fará nenhuma outra mudança durante ou depois da travessia, já que não podem perder tempo. Ajude Twilight a terminar sua jornada encontrando o menor valor possível para a diferença absoluta da soma das energias da configuração inicial e final do labirinto."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1778",
        "saida": "Para cada caso imprima “Caso #X: Y”, onde X é o número do caso atual, começando em 1, e Y é o número de monstros que conseguiram chegar ao castelo com vida.",
        "entrada": "A primeira linha da entrada contém T (1 ≤ T ≤ 100), o número de casos de teste. Cada caso de teste começa com três inteiros N (1 ≤ N ≤ 1000), M (0 ≤ M ≤ (N*(N-1))/2) e F (1 ≤ F ≤ N), o número de vértices, arestas e o vértice em que se encontra o castelo, respectivamente. A seguir há M linhas, cada uma com dois inteiros u (1 ≤ u ≤ N) e v (1 ≤ v ≤ N e v != u), indicando a existência de uma aresta que liga os vértices u e v. Não haverá mais de uma aresta entre um mesmo par de vértices. A seguir há um número P (0 ≤ P ≤ 100), indicando o número de torres. Cada uma das próximas P linhas conterá três inteiros Vi (1 ≤ Vi ≤ N e Vi != F), Ai (1 ≤ Ai ≤ 10⁵), e Ci (1 ≤ Ci ≤ 1000), indicando que a i-ésima torre se encontra no vértice Vi com Ai de ataque e Ci de alcance, conforme explicado na descrição do problema. Pode haver mais de uma torre no mesmo vértice, e não haverá nenhuma torre no vértice F. Por fim, haverá um inteiro Q (1 ≤ Q ≤ 10⁴), indicando o número de monstros. Cada uma das próximas Q linhas contém dois inteiros Ki (1 ≤ Ki ≤ N) e Hi (1 ≤ Hi ≤ 10⁸), indicando o vértice onde o i-ésimo monstro nasce e a quantidade de pontos de vida que ele tem no começo, respectivamente. É garantido que existe pelo menos um caminho que, não fosse pelos ataques das torres, o monstro conseguiria chegar ao castelo.",
        "titulo": "Defesa ao Grafo",
        "descricao": "Tower Defense é um famoso jogo de estratégia onde o jogador deve posicionar torres de defesa para proteger algo - seja um castelo, um tesouro ou até você mesmo - contra uma horda de monstros. Há várias variações do jogo: em alguns tipos, o mapa se assemelha a um tabuleiro, e os monstros tem um caminho especifico a seguir; em outros tipos, o mapa é aberto e os monstros podem chegar ao destino final por vários meios diferentes. Graph Defense é uma variação do Tower Defense comum. Aqui, o mapa é representado como um grafo de N vértices e M arestas. Cada vértice é uma posição em que um monstro ou uma torre (ou ambos) podem estar, em um dado momento, e as arestas representam conexões bidirecionais entre esses vértices (i.e. se há uma aresta de u para v, um monstro que está no vértice u em um dado momento pode ir para o vértice v no momento seguinte e vice-versa). O castelo, que você deseja proteger, se encontra no vértice F. Cada torre i possui um alcance Ci, um ataque Ai e está no vértice Vi. Todos os vértices que estão a no máximo Ci arestas de distância de Vi receberão Ai de dano a cada unidade de tempo. As torres não se movem, e existem desde o início do jogo. O castelo possui um escudo mágico protetor que faz com que nenhuma torre consiga atacar o vértice F onde ele se encontra, tampouco propagar o ataque, ou seja, o vértice F é uma barreira e nada passa por ele, a não ser os monstros, possivelmente. Cada monstro i surge durante o decorrer do jogo em um vértice Ki e possui Hi pontos de vida. Os monstros nunca ficam parados e, a cada unidade de tempo, se movem para um vértice adjacente. Eles sempre vão seguir para o destino final, o castelo, pelo caminho que causará o menor dano possível. Os monstros morrem quando alcançam 0 ou menos pontos de vida. Um monstro só consegue invadir o castelo quando chega ao destino F vivo. Se houver uma torre que alcança a posição inicial Ki do monstro, ela irá inflingir dano já no primeiro instante em que o monstro surge. Um monstro pode surgir já no castelo. Você foi contratado para fazer uma simulação do jogo. Depois de todas as aparições de monstros, quantos conseguiram invadir o castelo ainda com vida?"
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1344",
        "saida": "Para cada caso de teste da entrada, seu programa deverá imprimir uma única linha, contendo o tamanho do maior conjunto de empresas encontrado pelo seu programa.",
        "entrada": "Seu programa deverá processar diversos casos de teste. A primeira linha de um caso de teste contém três inteiros N, P e K. N representa o número total de empresas clientes da ICPC (1 ≤ N ≤ 1000); empresas são identificadas por um número entre 1 e N. P representa o total de pares de parceiros de negócios produzidos pela lista de ligações do último ano; e K é o número mínimo de parceiros que uma empresa necessita para pertencer ao conjunto final (1 ≤ K ≤ N-1), como descrito acima. As próximas P linhas descrevem cada par de parceiros de negócios, representados por dois inteiros X e Y, onde X e Y são empresas (1 ≤ X ≤ N, 1 ≤ Y ≤ N e X ≠ Y). O valor N = 0 indica o fim da entrada.",
        "titulo": "Parceiros de Telecomunicação",
        "descricao": "A ICPC, uma companhia de telecomunicação internacional, quer melhorar sua relação com as empresas que utilizam os seus serviços, oferecendo a estas descontos nas ligações feitas para um determinado conjunto de telefones, sendo este selecionado por cada empresa cliente. Para ajudar a ICPC a decidir o custo para este novo serviço, as empresas clientes da ICPC fizeram uma busca em suas bases de dados e produziram uma lista de chamadas telefônicas feitas de uma empresa para a outra no último ano. Se uma empresa se comunicou com outra (efetuando ou recebendo uma chamada) durante o último ano, diremos que estas são Parceiras de Negócios. Você foi contratado pela ICPC para processar a lista de ligações do último ano e determinar o tamanho (em número de empresas) do maior conjunto de empresas que são Parceiras de Negócios de pelo menos K outras empresas neste mesmo conjunto e que todas as empresas desse conjunto possam fazer tratos de negócios diretamente ou indiretamente com qualquer outra empresa nesse conjunto (uma empresa pode fazer tratos diretamente com outra, se forem parceiros de negócios e as duas estiverem no conjunto). Isto é, você deve encontrar um conjunto S de empresas tal que toda empresa que pertence a S tem pelo menos K parceiros de negócios que também estão em S (e possivelmente parceiros que estão fora de S), onde K é um parâmetro definido pela ICPC."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1529",
        "saida": "Para cada caso de teste, seu programa deverá imprimir uma linha contendo o menor custo possível para viajar da cidade 1 até a cidade N. Caso não for possível viajar entre as cidades, imprima -1.",
        "entrada": "A entrada é composta por vários casos de teste. Casa caso de teste é iniciado por três inteiros, N, M e T, (1 ≤ N ≤ 10, 1 ≤ M ≤ 20, 1 ≤ T ≤ 50) correspondentes ao número de cidades na rota, o número de estradas e a capacidade do tanque do carro de Max, em litros. A entrada acaba quando N = M = T = 0. As M linhas na sequência descrevem as ligações entre as cidades. Cada linha contém os inteiros A, B e C, (1 ≤ C ≤ 1000) que indicam a existência de uma rota (ida e volta) entre as cidades A e B, com um consumo de C litros de gasolina. Devido ao estado precário das estradas, é possível que determinadas cidades sejam inacessíveis. Não existe mais de uma rota direta entre qualquer par de cidades. As próximas N linhas descrevem o custo, em créditos da união por litro, da gasolina em cada cidade. A primeira linha descreve o custo da gasolina na primeira cidade, a segunda linha descreve o custo na segunda cidade, e assim por diante.",
        "titulo": "Max, o Louco",
        "descricao": "No ano de 2042, após o surgimento da malévola União das Repúblicas Independentes (URI), a humanidade se deparou com uma grande escassez de recursos. Água e gasolina se tornaram bens muito valiosos, sendo que boa parte da tecnologia se perdeu após a URI tomar o poder mundial. Você faz parte de um grupo da resistência, que tem o objetivo de tirar o poder da URI. Max, o herói da resistência, precisa realizar várias missões que envolvem viagens de carro entre cidades. Existem postos de gasolina em cada cidade, apesar dos altos e variados preços. Como os recursos financeiros da resistência são limitados, você foi convocado a escrever um programa que calcule qual a quantidade mínima de créditos da união necessários para completar cada uma das missões de Max."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2190",
        "saida": "Para cada conjunto de teste da entrada seu programa deve produzir uma lista dos ramos de redes que devem ser construídos. A lista deve ser precedida de uma linha que identifica o conjunto de teste, no formato \"Teste n\", onde n é numerado a partir de 1. A lista é composta por uma sequência de ramos a serem construídos, um ramo por linha. Um ramo é descrito por um par de tabas X e Y , com X < Y. Os ramos de rede podem ser listados em qualquer ordem, mas não deve haver repeti- ção. Se houver mais de uma solução possível, imprima apenas uma delas. O final de uma lista de ramos deve ser marcado com uma linha em branco. A grafia mostrada no Exemplo de Saída, abaixo, deve ser seguida rigorosamente.",
        "entrada": "A entrada é composta de vários conjuntos de teste. A primeira linha de um conjunto de teste contém dois números inteiros positivos N (0 ≤ N ≤ 100) e M (1 ≤ M ≤ N(N-1)/2) que indicam, respectivamente, o número de tabas e o número de ramos de redes possíveis. As tabas são numeradas de 1 a N. As M linhas seguintes contêm três inteiros positivos X, Y e Z (1 ≤ X,Y,Z ≤ 100), que indicam que o ramo de rede que liga a taba X à taba Y tem impacto ambiental Z. Com os conjuntos de teste dados sempre é possível interligar todas as tabas. O final da entrada é indicado quando N = 0.",
        "titulo": "Rede Ótica",
        "descricao": "Os caciques da região de Tutuaçu pretendem integrar suas tribos à chamada “aldeia global”. A primeira providência foi a distribuição de telefones celulares a todos os pajés. Agora, planejam montar uma rede de fibra ótica interligando todas as tabas. Esta empreitada requer que sejam abertas novas picadas na mata, passando por reservas de flora e fauna. Conscientes da necessidade de preservar o máximo possível o meio ambiente, os caciques encomendaram um estudo do impacto ambiental do projeto. Será que você consegue ajudá-los a projetar a rede de fibra ótica? Vamos denominar uma ligação de fibra ótica entre duas tabas de um ramo de rede. Para possibilitar a comunicação entre todas as tabas é necessário que todas elas estejam interligadas, direta (utilizando um ramo de rede) ou indiretamente (utilizando mais de um ramo). Os caciques conseguiram a informação do impacto ambiental que causará a construção dos ramos. Alguns ramos, no entanto, nem foram considerados no estudo ambiental, pois sua construção é impossível. Sua tarefa é escrever um programa para determinar quais ramos devem ser construídos, de forma a possibilitar a comunicação entre todas as tabas, causando o menor impacto ambiental possível."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1490",
        "saida": "Para cada caso de teste, imprima uma linha com um inteiro representando o número máximo de torres que podem ser colocados nos quadrados sem que possam se atacar.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 100) representando o número de linhas e colunas do tabuleiro. Cada uma das próximas N linhas contém uma seqüência de N caracteres. Na enésima linha desta string, o enésimo caractere reresenta o quadrado na coluna i, j do tabuleiro. O caractere será o \".\" (Ponto) ou a letra maiúscula \"X\", indicando, respectivamente, um quadrado vazio ou um quadrado contendo um peão.",
        "titulo": "Torres que Atacam",
        "descricao": "Problemas inspirados no Xadrez são uma fonte comum de exercícios nas aulas de algoritmos. Começando com o conhecido problema das 8 rainhas, várias generalizações e variações foram feitas. Uma deles é o problema N-torres, que consiste na colocação de N torres em um tabuleiro N x N de tal modo que elas não se ataquem. Professor Anand apresentou o problema N-torres aos seus alunos. Uma vez que as torres só atacam umas às outras quando elas compartilham uma linha ou coluna, eles logo descobriram que o problema pode ser facilmente resolvido colocando as torres ao longo da diagonal principal da placa. Então, o professor decidiu complicar o problema adicionando alguns peões no tabuleiro. Em um tabuleiro com peões, duas torres se atacam se e somente se elas compartilham uma linha ou coluna e não há nenhum peão colocado entre elas. Além disso, os peões ocupam algumas posições, o que dá uma restrição adicional às posições nas quais as torres podem ser colocadas. Dado o tamanho do tabuleiro e a localização dos peões, diga ao Professor Anand o número máximo de torres que podem ser colocadas em quadrados vazios tais que dois deles não possam se atacar."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "2131",
        "saida": "Para cada instância, você deverá imprimir um identificador Instancia k, onde k é o número da instância atual. Na linha seguinte imprima sim se é possível e não, caso contrário.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância contém dois inteiros n (1 ≤ n ≤ 100) e m (0 ≤ m ≤ n(n-1)/2), onde n é o número de convidados e m é o número de relações de amizade. Cada uma das m linhas seguintes contém dois inteiros u e v indicando que u é amigo de v e v é amigo de u, onde 1 ≤ u, v ≤ n. A entrada termina com final de arquivo.",
        "titulo": "Mesa da Sra. Montagny!",
        "descricao": "Já comentamos as festas da Sra. Montagny à beira do Lake Louise em Banff. Nas suas festas ela se compromete a resolver um outro problema que faz tremer organizadores de jantares em todo o mundo: onde sentar os convidados. A magnata simplifica bastante o problema pedindo aos convidados, no mesmo questionário já comentado, que anote na lista dos convidados aqueles que desejariam ter à sua frente na mesa do jantar. A ideia é ter seus amigos sempre à sua frente, para que a conversa possa fluir melhor. A habilidade da socialite é tamanha que ela foi contratada pelo Fairmont Banff Springs hotel (hotel em que vão ocorrer as finais mundiais do ICPC em 2008: http://en.wikipedia.org/wiki/Banff Springs Hotel) para trabalhar no arranjo de mesas de banquete. Sua tarefa neste problema é auxiliar novamente a magnata. Dados os desejos dos convidados, seu programa deve decidir se é possível dispô-los numa mesa de forma que cada convidado tenha todos os seus amigos no lado oposto da mesa."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1792",
        "saida": "Para cada caso de teste imprima uma linha, contendo a palavra “possivel” caso seja possível atacar todos os postos respeitando as restrições dadas, ou “impossivel” caso contrário.",
        "entrada": "Haverá no máximo 30 casos de teste. Cada caso de teste inicia com três inteiros, N, M e S, indicando o número de postos, o número de linhas de visão e o número inicial de soldados de elite em sua equipe, respectivamente (1 ≤ N ≤ 104, 0 ≤ M ≤ 105, 1 ≤ S ≤ 100). Em seguida haverá uma linha com N inteiros ei, onde o i-ésimo inteiro indica quantos soldados inimigos há no posto i (1 ≤ ei ≤ 106, para todo 1 ≤ i ≤ N). Em seguida haverá uma linha com N inteiros fi, onde o i-ésimo inteiro indica quantos soldados reféns há no posto i (0 ≤ fi ≤ 100, para todo 1 ≤ i ≤ N). Em seguida haverá M linhas, cada uma contendo dois inteiros A e B, indicando que o posto A tem uma linha de visão sobre o posto B (1 ≤ A, B ≤ N, A B). O último caso de teste é indicado quando N = M = S = 0, o qual não deverá ser processado.",
        "titulo": "Ataque Programado",
        "descricao": "Você é o líder de uma equipe de soldados de elite, e acaba de descobrir que os soldados que você enviou recentemente para atacar os postos inimigos foram capturados e mantidos como refém. Sua estratégia agora é recuperar sua tropa sem perder um soldado em batalha, e sem nunca deixar que o inimigo soe o alarme. Existem N postos inimigos e M linhas de visão entre eles, de tal modo que se existe uma linha de visão do posto A ao posto B, os soldados do posto A saberiam quando o posto B fosse atacado e soariam o alarme. Como seu objetivo é total descrição você decidiu que só atacaria um posto quando todos os postos que tem linha de visão sobre ele tivessem sido atacados anteriormente, o que impossibilitaria que o alarme fosse soado. Inicialmente você tem S soldados em sua tropa. Em cada posto inimigo há E soldados inimigos e F soldados reféns. Para garantir que cada ataque seja um sucesso, você decidiu que só vai atacar um posto quando o número de soldados em sua tropa for maior que o número de soldados inimigos daquele posto. Após cada ataque, os soldados reféns daquele posto são adicionados à sua tropa para os próximos ataques. O plano parece bom, mas é preciso ter absoluta certeza de que é possível completá-lo. Com os dados sobre os postos trazidos pelo seu espião, descubra se é possível atacar todos os postos inimigos seguindo as duas restrições acima."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1655",
        "saida": "Para cada instância, calcule a probabilidade do caminho mais seguro da interseção 1 (o Hotel Palace) até a interseção n (o Honorável Centro Richard J. Daley em Chicago). Você pode supor que exista ao menos um caminho entre as interseções 1 e n. Imprima a probabilidade como uma porcentagem com exatamente 6 dígitos depois da vírgula. O valor precentual será considerado correto se difeir no máximo 10-6 da saída do juíz. Use o formato mostrado abaixo e imprima uma linha por instância.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância contém dois inteiros n e m (2 ≤ n ≤ 100 , 1 ≤ m ≤ n*(n-1)/2). n é o número de interseções, m é o número de ruas a ser considerado. As próximas m linhas contém a descrição das ruas. Cada rua é descrita por uma linha contendo 3 inteiros a, b e p (1 ≤ a, b ≤ n , a ≠ b, 1 ≤ p ≤ 100): a e b são dois pontos finais de uma rua e p é a probabilidade dos irmãos Blues conseguirem usar essa rua sem serem pegos. Cada rua pode ser usada nas duas direções. Você pode supor que há no máximo uma rua entre dois pontos finais. A última instância é seguida por um zero. Obs.: O caminho mais seguro a ser seguido no exemplo de entrada é 1 -> 4 -> 3 -> 5",
        "titulo": "106 Milhas Para Chicago",
        "descricao": "No filme \"Os Irmãos Cara de Pau\", o orfanato onde Elwood e Jake foram criados pode ser vendido para o Conselho de Educação se eles não pagarem 5000 dólares em impostos no Gabinete do Assessor do Condado de Cook em Chicago. Depois de dar um show no salão de baile do Hotel Palace para ganhar esses 5000 dólares eles têm de achar um caminho para Chicago. No entanto isso não é fácil e parece que eles estão perseguidos pela polícia, uma banda country e um grupo de nazistas. Mais que isso, eles estão a 106 milhas de Chicago, está escuro e eles estão usando óculos escuros. Como eles estão em uma missão Divina você deve ajudá-los a achar o caminho mais seguro para Chicago. Neste problema o caminho mais seguro é considerado a rota que maximiza a probabilidade deles não serem pegos."
    },
    {
        "nivel": "2",
        "assunto": "7",
        "numero": "1610",
        "saida": "Para cada caso, imprima SIM caso exista pelo menos um loop e NAO caso contrário.",
        "entrada": "Na primeira linha você terá um inteiro T (T = 100) indicando o número de casos de teste. Na primeira linha de cada caso teremos os números inteiros N (2 ≤ N ≤ 100* ou 2 ≤ N ≤ 104**) e M (1 ≤ M ≤ 300* ou 1 ≤ M ≤ 3*104​**), indicando o número de documentos e as dependências existentes. Em cada uma das M linhas seguintes, terão dois inteiros A (1 ≤ A) e B (B ≤ N, com A != B), indicando que o documento A depende do documento B. Pode haver dependências repetidas! *Ocorre em aproximadamente 90% dos casos de teste; **Ocorre nos demais casos de teste.",
        "titulo": "Dudu Faz Serviço",
        "descricao": "Dudu precisa de um documento para finalizar uma tarefa em seu trabalho. Após pesquisar um pouco, ele descobre que este documento depende de outros documentos que, por sua vez, necessitam de outros documentos e assim por diante. Dudu chegou a uma lista final com todos os documentos que deverá precisar. Com essa lista em mãos, ele suspeita que a mesma possui loops. Por exemplo, se um documento A depende do documento B que por sua vez depende do documento A, tornaria a tarefa interminável. Veja que neste caso o loop tem apenas dois documentos, pode haver loops com três ou mais! Dada a lista das dependências entre os documentos, ajude Dudu a saber se um dia conseguirá todos os documentos, ou seja, se não existe um loop na lista."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1227",
        "saida": "Seu programa deve imprimir uma única linha, contendo a probabilidade de o turista chegar ao hotel barato antes de chegar ao hotel caro, com 6 casas decimais.",
        "entrada": "A primeira linha de um caso de teste contém quatro inteiros N (3 ≤ N ≤ 100), A (1 ≤ A), B e C (C ≤ N), indicando respectivamente o número de rotatórias do sistema viário, a rotatória onde a festa de aniversário foi realizada, a rotatória onde o hotel barato está localizado, e a rotatória onde o hotel caro está localizado. Cada uma das N−1 linhas seguintes contém dois inteiros X (1 ≤ X) e Y (Y ≤ N), indicando que existe uma rua que liga as rotatórias X e Y. Nota: B != C, A != B, A != C e X != Y",
        "titulo": "Perdido na Noite",
        "descricao": "Numa cidade da Nlogônia, o sistema viário é composto de N rotatórias e N−1 ruas, sendo que cada rua liga duas rotatórias distintas. Utilizando o sistema viário, é possível ir de qualquer rotatória para qualquer outra rotatória da cidade. A cidade possui apenas dois hotéis: um barato, localizado na rotatória B, e um caro, localizado na rotatória C. Um turista veio à cidade para celebrar o aniversário de um amigo, cuja festa está sendo realizada em um clube localizado na rotatória A. Como o turista não fez reserva em nenhum dos hotéis e a noite está agradável, após a festa ele decidiu passear a pé pelas ruas e rotatórias até encontrar um dos hotéis (ele também decidiu hospedar-se no primeiro hotel que encontrar). Seu plano foi dificultado porque como ele não conhece a cidade e bebeu um pouco além da conta, todas as ruas lhe parecem iguais. Assim, ele decidiu usar a seguinte estratégia: a cada rotatória ele escolhe, com probabilidade uniforme, uma das ruas que saem da rotatória, e usa essa rua para ir a uma outra rotatória, até chegar à rotatória onde um dos hotéis está localizado. Note que como o turista não consegue distinguir as ruas, pode ocorrer de ele escolher a mesma rua pela qual chegou à rotatória. Você deve escrever um programa que, dadas a descrição do sistema viário, a localização A da festa de aniversário, a localização B do hotel barato e a localização C do hotel caro, determine a probabilidade de o turista chegar ao hotel barato antes de chegar ao hotel caro."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1806",
        "saida": "Imprima a quantidade mínima de criminosos que Bino vai eliminar no caminho.",
        "entrada": "A primeira linha contém 4 inteiros,  N(1 ≤ N ≤ 10000), C(1 ≤ C ≤ 50000), S(1 ≤ S ≤ 50000) e B (1 ≤ B ≤ 10000), representando respectivamente o número de lugares na cidade, o número de rotas conhecidas pelo Bino, o número de rotas conhecidas somente pelos criminosos  e o número de criminosos. Cada uma das próximas C linhas contém três inteiros a(1 ≤ a ≤ N), b(1 ≤ b ≤ N) e v(1 ≤ v ≤ 1000), representando que existe uma rota entre os lugares a e b com distância de v metros. Cada uma das próximas S linhas contém três inteiros a(1 ≤ a ≤ N), b(1 ≤ b ≤ N), v(1 ≤ v ≤ 1000), representando que existe uma rota secreta entre os lugares a e b com distância de v metros. A próxima linha contém B inteiros li(1 ≤ li ≤ N) representando que o criminoso i está inicialmente no lugar l. A última linha do caso de teste contém 2 inteiros K(1 ≤ K ≤ 10000),  e F(1 ≤ F ≤ 10000), representando respectivamente o lugar inicial do Bino e o lugar onde ele vai ter que entregar a mensagem secreta.",
        "titulo": "Agente 004",
        "descricao": "Uma organização criminosa da cidade está ficando mais poderosa a cada dia, e para tentar acompanhar esse avanço, a organização protetora da cidade está investindo muito no treinamento dos seus homens. Bino, também conhecido como Agente 004, é o melhor agente da organização protetora, então ele foi designado para uma missão especial. A missão especial de Bino é entregar uma mensagem secreta de uma sede de treinamento de agentes especiais para outra. Porém a cidade está cheia de criminosos, e todos eles querem interceptar Bino na sua missão. Bino não conhece muito bem as rotas da cidade, pois passou a maior parte do tempo de sua vida sendo treinado em campos especiais, diferentemente dos criminosos, que passam maior parte das suas vidas nas ruas, e conhecem todas as rotas possíveis. Como Bino é o melhor agente do mundo, ele sabe que é capaz de eliminar qualquer quantidade de criminosos que estão no mesmo local dele instantaneamente. Os criminosos podem interceptar Bino em qualquer lugar da cidade(Em todas as rotas e em tudos os lugares, inclusive, nos lugares onde estão as sedes de treinamento inicial e a destino). Bino e os criminosos se deslocam com velocidade de 12 m/s. Bino sempre utiliza o caminho que encontrará menos criminosos, porém, os criminosos sempre utilizam os melhores caminhos para interceptar Bino. Sua tarefa é descobrir qual a quantidade mínima de criminosos que Bino terá que eliminar para entregar uma mensagem secreta de uma sede de treinamento para outra. É garantindo que existirá um caminho entre qualquer lugar na cidade para qualquer outro lugar."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1972",
        "saida": "Imprima uma linha contendo unicamente a quantidade mínima de energia necessária para Hércules chegar até Euterpe. Se não é possível a Hércules chegar até Euterpe, imprima uma linha contendo unicamente a palavra ARTSKJID.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros, N e M (2 ≤ N, M ≤ 500), os quais representam o número de linhas e o número de colunas no labirinto. As próximas N linhas descrevem o labirinto e possuem exatamente M caracteres cada, os quais podem ser: H, se aquela é a posição onde Hércules começa sua jornada; E, se aquela é a posição onde Euterpe está presa; ., se aquela posição é uma posição livre; #, se aquela posição é uma parede; um inteiro X entre 1 e 9, se aquela posição é guardada por uma besta que requer X de energia hercúlea para ser morta.",
        "titulo": "Nêmesis",
        "descricao": "Nêmesis, a deusa da vingança, irou-se contra Euterpe, a musa dos prazeres, e a pôs num labirinto infestado de bestas. Agora, apenas Hércules poderá salvar Euterpe. Iniciando sua jornada em alguma posição do labirinto, Hércules só pode avançar para uma posição do labirinto guardada por uma besta se matar a besta. Embora terrível, uma besta nunca deixa a posição que guarda. Ainda, bestas diferentes podem exigir de Hércules quantias diferentes de energia para serem mortas. Ajude Hércules a salvar Euterpe gastando o mínimo de energia possível, sabendo que ele só pode se mover nas direções horizontal e vertical e, apesar de ser um herói invencível e de possuir energia infinita, Hércules não consegue destruir as paredes do labirinto."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1201",
        "saida": "Cada linha de entrada, com exceção das linhas que contém os comandos \"I\" ou \"R\", deve produzir uma linha de saída. A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, caso contrário, sua submissão receberá Presentation Error.",
        "entrada": "A entrada contém N operações utilizando números inteiros (1-106) sobre uma árvore binária de Busca, que inicialmente se encontra vazia. A primeira linha de entrada contém a inserção de algum elemento. As demais linhas de entrada podem conter quaiquer um dos comandos descritos acima, conforme exemplo abaixo. O final da entrada é determinado pelo final de arquivo (EOF). Saída Cada linha de entrada, com exceção das linhas que contém os comandos \"I\" ou \"R\", deve produzir uma linha de saída. A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, caso contrário, sua submissão receberá Presentation Error. Exemplo de Entrada Exemplo de Saída I 5 I 2 I 4 I 1 INFIXA PREFIXA POSFIXA P 3 P 1 INFIXA R 1 INFIXA 1 2 4 5 5 2 1 4 1 4 2 5 3 nao existe 1 existe 1 2 4 5 2 4 5",
        "titulo": "Operações em ABP II",
        "descricao": "Marcela nem terminou de fazer o programa anterior e o professor já lhe pediu um novo programa, com aprimoramentos sobre o programa anterior. Este novo programa é a implementação de uma Árvore Binária de Pesquisa (ou Busca) mas utilizando números inteiros agora, e que deve aceitar um comando extra (R) com relação ao programa anterior: I n: Insere na árvore binária de pesquisa o elemento n. INFIXA: lista os elementos já inseridos segundo o percurso infixo PREFIXA: lista os elementos já inseridos segundo o percurso prefixo POSFIXA: lista os elementos já inseridos segundo o percurso posfixo P n: Pesquisa se o elemento n existe ou não na árvore. R n: Remove o elemento n da árvore, caso ele exista. A qualquer momento pode-se inserir um elemento, visitar os elementos previamente inseridos na ordem infixa, prefixa ou posfixa, procurar por um elemento na árvore para saber se o elemento existe ou não ou ainda retirar um elemento. Nota: Se um elemento com duas sub-árvores (direita e esquerda) for removido, o antecessor (o elemento maior de sub-árvore esquerda, deve ocupar o seu lugar e ao tentar retirar um elemento que não existe, nenhuma mensagem deve ser apresentada."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1862",
        "saida": "Se a informação dada pelo espião é inconsistente e não é possível determinar o número de casas, imprima uma linha contendo o inteiro -1. Caso contrário, imprima duas linhas. A primeira linha contém um inteiro K, o número de casas. A segunda linha contém K inteiros, o número de pessoas em cada casa. Os inteiros devem ser impressos em ordem não crescente. Imprima um espaço entre dois inteiros consecutivos.",
        "entrada": "A primeira linha contém um inteiro N (1 ≤ N ≤ 1000), o número de pessoas. Considere que as pessoas são numeradas de 1 a N. As próximas N linhas contém N caracteres cada. O j-ésimo caractere na i-ésima linha (1 ≤ i, j ≤ N) é S se as pessoas i e j pertencem à mesma casa, ou D se as pessoas i e j pertencem a casas diferentes. É garantido que, para todo 1 ≤ i, j ≤ N, o j-ésimo caractere na i-ésima linha é igual ao i-ésimo caractere na j-ésima linha. Além disso, para todo 1 ≤ i ≤ N, o i-ésimo caractere na i-ésima linha é sempre S.",
        "titulo": "Casas de Westeros",
        "descricao": "Daenerys: \"Lannister, Targaryen, Baratheon, Stark, Tyrell. Estão todos em uma mesma roda\". As casas nobres de Westeros estão lutando constantemente pelo Trono de Ferro. Para vencer a Guerra dos Tronos, deve-se sempre saber quantas casas existem no continente. Também é importante saber o tamanho de cada casa, uma vez que casas com muitas pessoas são, normalmente, mais fortes que casas com poucos membros. Existem N pessoas em Westeros. Para cada par de pessoas, um espião lhe informou se elas pertencem à mesma casa ou não. Se a informação obtida pelo espião for consistente, sua tarefa é determinar quantas casas existem em Westeros, e quantas pessoas pertencem a cada casa."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1994",
        "saida": "Para cada caso, imprima a saída em uma única linha com um número inteiro representando o número mínimo de anos de modo que um único império possa dominar todas as fortalezas.",
        "entrada": "A entrada contém vários casos de teste. Cada teste é descrito em duas linhas. A primeira linha contém um inteiro N (2 <= N <= 104) representando o número de fortalezas no planeta Imperius. A linha seguinte contém N-1 inteiros P_i indicando que a fortaleza i + 1 foi ligada a fortaleza P_i (1 <= P_i <= i para 1 <= i <= N-1). A última linha da entrada contém um único -1 e não deve ser processado como um caso de teste.",
        "titulo": "Imperialismo",
        "descricao": "A ambição de conquista e expansão é uma doença muito conhecida no planeta Terra... E também em todo o universo. No planeta \"Imperius\" várias fortalezas foram construídas uma de cada vez e cada uma delas, menos a primeira, estavam ligadas no momento da sua construção para uma fortaleza previamente construída por um caminho direto, para fins comerciais. Imperius estava se tornando um dos planetas mais pacífico e próspero no universo, até que eles pararam de construir mais fortalezas. Naquele momento, surgiram N diferentes impérios (numeradas de 1 a N), cada um deles dominando uma fortaleza diferente. E a sede de conquista se apoderou de Imperius. Assim, a cada ano, exatamente um dos impérios vivos conquista cada império vizinho, e domina cada fortaleza pertencente a eles. Dois impérios são considerados vizinhos se existem duas fortalezas unidas por um caminho, cada uma dominada por um império diferente destes dois. Eventualmente um único império vai dominar cada fortaleza. Sua tarefa é encontrar o número mínimo de anos que isso pode acontecer. Como um exemplo, no lado esquerdo da figura abaixo um cenário possível é mostrado, onde seis fortalezas são inicialmente dominadas por seis impérios diferentes. Cada fortaleza é identificada com o número do império que a domina. Se o império 2 conquistou cada vizinho no primeiro ano, a situação seria como na figura central. Finalmente, se o império 5 conquistou seus impérios vizinhos, ele acabaria dominando cada fortaleza, como pode ser visto no lado direito da figura."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1330",
        "saida": "Para cada caso de teste de entrada seu programa deverá produzir uma saída, contendo um valor inteiro representando o número máximo de propriedades que podem ser vendidas.",
        "entrada": "A entrada deverá incluir diversos casos de teste. A primeira linha do caso de teste contém dois inteiros N e M, repesentando respectivamente, o número de linhas e colunas da terra (1 ≤ N, M ≤ 100). A segunda linha contém um inteiro K indicando o número de quadrados que foi transformados em lagos ((N x M) - K ≤ 50). Cada uma das próximas K linhas contém dois inteiros X e Y que descrevem a posição dos quadrados que se transformaram em lagos (1 ≤ X ≤ N e 1 ≤ Y ≤ M). O fim da entrada é indicado por N = M = 0.",
        "titulo": "A Terra Herdada por Tio Tom",
        "descricao": "Seu velho tio herdou um pedaço de terra de seu tetravô. Originalmente, a propriedade tinha forma retangular. Contudo, a muito tempo atrás, seu tetravô decidiu dividir a terra em uma grade de pequenos quadrados. Ele transformou alguns dos quadrados em lagos, porque ele adorava caçar patos e procurava atraí-los para sua propriedade. (Você não tem certeza, pois ainda não foi ao local, mas ele pode ter feito tantos lagos que a terra agora pode se consistir em várias ilhas desconectadas.) Seu tio Tom quer vender a terra herdada, mas regras locais regulamentam a venda de imóveis. Seu tio foi informado que, a pedido do seu tetravô, uma lei estabelece que a propriedade só possa ser vendida em partes retangulares do tamanho de dois quadrados da propriedade do seu tio. Além disso, não é permitido vender os lagos da propriedade. Seu tio pediu a você para ajudar a determinar o maior número de propriedades que ele poderia vender (os quadrados restantes tornariam-se parques de recreação)."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1314",
        "saida": "Para cada caso de teste imprima Q + 1 linhas. Na i-ésima linha escreva a resposta para a i-ésima consulta. Se as salas formam um bom desafio, então escreva o caractere 'Y' (maiúsculo). Caso contrário escreva o caractere 'N' (maiúsculo). Imprima uma linha contendo um único caractere '-' (hífen) depois de cada caso de teste.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém três inteiros R, C e Q representando respectivamente o número de salas do labirinto (2 ≤ R ≤ 104), o número de corredores (1 ≤ C ≤ 105), e o número de consultas (1 ≤ Q ≤ 1000). As salas são identificadas por inteiros de 1 até R. Cada uma das próximas C linhas descreve um corredor usando dois inteiros distintos A e B, indicando que existe um corredor conectando as salas A e B (1 ≤ A, B ≤ R). Após isso, cada uma das próximas Q linhas descreve uma consulta usando dois inteiros distintos S e T indicando respectivamente as salas inicial e final do desafio (1 ≤ S, T ≤ R). Você pode assumir que em cada caso de teste existe no máximo um corredor conectando cada par de salas, e não haverá duas consultas iguais. O último caso de teste será seguido por uma linha contendo três zeros.",
        "titulo": "Labirintos de Cerca Viva",
        "descricao": "A Rainha da Nlogônia é uma fã de labirintos, e então os arquitetos do reino construiram vários labirintos em volta do palácio da Rainha. Todo labirinto construido para a Rainha é feito de salas conectadas por corredores. Cada corredor conecta um par diferente de salas distintas e pode ser atravessado em ambas as direções. A Rainha ama passear pelas salas e corredores do labirinto nos finais de tarde. Seus serventes escolhem um desafio diferente todo dia, que consiste em encontrar um caminho simples de uma sala inicial até uma sala final no labirinto. Um caminho simples é uma sequência de salas distintas tal que cada par de salas consecutivas é conectado por um corredor. Neste caso a primeira sala da sequência deve ser a sala inicial, e a última sala deve ser a sala final. A Rainha acha que um desafio é bom quando, dentre as rotas da sala inicial até a sala final, exatamente uma delas é um caminho simples. Você pode ajudar os serventes da Rainha a escolher um desafio que agrada a Rainha? Para tal, escreva um programa que dados a descrição de um labirinto e uma lista de consultas definindo a sala inicial e a sala final, determina para cada consulta se aquela escolha é um bom desafio ou não."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1415",
        "saida": "Para cada caso de teste, seu programa deve imprimir R + 1 linhas. A primeira linha deve estar vazia; cada uma das R linhas seguintes deve ter C caracteres. Os caracteres impressos devem representar o estado de cada posição da grade quando o motor é ligado. Imprima um \".\" se não existem engrenagens na posição; um \"(\" se existe uma engrenagem girando em sentido horário; um \")\" se existe uma engrenagem girando em sentido anti-horário; um \"F\" maiúsculo se existe uma engrenagem que está livre e um \"B\" maiúsculo se existe uma engrenagem bloqueada.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros R e C, separados por um espaço, representando respectivamente o número de fileiras e colunas da grade do motor (1 ≤ R, C ≤ 100). As próximas R linhas descrevem o motor. A i-ésima linha representa a i-ésima fileira do motor e contém C caracteres. O caractere \".\" indica que não existem engrenagens naquela posição, o caractere \"*\" indica que existe uma engrenagem que não é ativada inicialmente e um \"I\" indica que existe uma engrenagem que é inicialmente ativada quando o motor é ligado. Perceba que, por razões de simplicidade, o paralelogramo representando a grade do motor é descrito na entrada como se fosse um retângulo com cada fileira alinhada à esquerda. O final da entrada é indicado por R = C = 0.",
        "titulo": "Galou Está de Volta!",
        "descricao": "O famoso bruxo está de volta. Depois de matar um incrível número de monstros para achar um tesouro escondido, Zak Galou decidiu comprar vinhedos na Borgonha e se aposentou. Tudo estava calmo em sua nova vida, até que um dia seu trator parou de funcionar. O motor de seu trator funciona baseado em um mecanismo de rodas dentadas. O motor pode ser representado por uma grade bidimensional. No máximo uma roda dentada pode ser presa a cada posição da grade. Todas as engrenagens são idênticas e podem engrenar com as rodas adjacentes. Nessa grade, uma roda dentada pode ter até seis engrenagens adjacentes, veja a figura abaixo: Em condições normais, quando o trator é ligado, algumas das engrenagens são inicialmente ativadas e tentam giram em sentido horário. Quando uma engrenagem tenta girar em um sentido, todas as outras adjacentes tentam girar no sentido oposto. Quando Zak Galou abriu o motor ele percebeu que ele havia sido sabotado (provavelmente por um caçador de tesouros que não conseguiu achar o tesouro). Algumas das engrenagens foram removidas do motor e outras adicionadas. Como consequência, algumas engrenagens estavam imóveis. Uma engrenagem pode estar imóvel tanto quando ela está livre ou está bloqueada. Uma engrenagem está livre quando ela não é ativada inicialmente e não tem nenhuma engrenagem adjacente tentando girar. Uma engrenagem está bloqueada quando ela está tentando girar em ambos sentidos ao mesmo tempo. Por exemplo, considere que existam três engrenagens no motor como mostrado na figura abaixo. Se qualquer uma delas é ativada inicialmente, todas estarão bloqueadas. Se nenhuma delas é ativada inicialmente, todas estarão livres. ​ Como parte do trabalho para consertar seu trator, Zak Galou pede sua ajuda para resolver o seguinte problema. Dada a descrição do motor e das engrenagens que estão ativadas inicialmente em sentido horário, ele quer saber para cada uma delas qual o seu estado quando o trator é ligado: girando no sentido horário, girando no sentido horário, livre ou bloqueado."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1695",
        "saida": "Para cada caso de teste imprima uma única linha contendo as respostas para as perguntas na ordem em que aparecem na entrada, cada resposta deve ser seguida por um único espaço (mesmo para a última consulta).",
        "entrada": "A primeira linha contém um número inteiro T (1 ≤ T ≤ 35), o número de casos de teste. A primeira linha de cada caso de teste contém dois inteiros N e M (1 ≤ N, M ≤ 105), o número de vértices e o número de consultas, respectivamente. Vamos supor que os vértices das árvores são identificados por inteiros de 1 a N, e que a raiz da árvore é o vértice 1. A próxima linha contém uma seqüência de números inteiros V1, V2, ..., VN (1 ≤ Vi ≤ 109), os valores de cada vértice. Cada uma das próximas N - 1 linhas contém dois inteiros Ai e Bi (1 ≤ Ai, Bi ≤ N), os pares de vértices conectados por uma aresta na árvore. A árvore é conectada e válida. As próximas M linhas contêm as consultas, cada linha contendo dois inteiros X e K (1 ≤ X, Ki ≤ N), que é, encontrar o K-ésimo menor valor na subárvore com raiz em X. É garantido que cada consulta é válida.",
        "titulo": "Ordenando Árvores",
        "descricao": "É sabido que o Conde de Limãograb é o cara mais estranho no reino doce, mas a sua mais recente obsessão foi longe demais: ele está tentando descobrir a ordem de todas as coisas! Até agora ele tem tido sucesso em um monte de problemas de ordenação, mas ele está ficando louco, porque ele encontrou um problema que não pode resolver: dada uma árvore com raiz que consiste de N vértices, onde cada vértice i tem um valor Vi, ele tentou descobrir a ordem crescente de todos os valores na subárvore com raiz no vértice X. Ele resolveu facilmente para algumas sub-árvores, mas depois ele se cansou e notou que ninguém seria capaz de realizar essa tarefa em curto espaço de tempo. A fim de aliviar sua frustração, ele pediu-lhe para responder a M consultas: para um dado vértice X lhe dizer qual é o K-ésimo menor valor da subárvore com raiz no vértice X."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1152",
        "saida": "Para cada caso de teste imprima uma linha contendo a máxima quantidade diária de dólares de Byteland que o governo pode economizar.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste inicia com dois números m (1 ≤ m ≤ 200000) e n (m-1 ≤ n ≤ 200000), que são o número de junções de Byteland e o número de estradas em Byteland, respectivamente. Seguem n conjuntos de três valores inteiros, x, y e z, especificando qual será a estrada bidirecional entre x e y com z metros (0 ≤ x, y < m e x ≠ y). A entrada termina com m=n=0. O grafo especificado em cada caso de teste é conectado. O tamanho total de todas as estradas em cada caso de teste é menor do que 231.",
        "titulo": "Estradas Escuras",
        "descricao": "Nestes dias se pensa muito em economia, mesmo em Byteland. Para reduzir custos operacionais, o governo de Byteland decidiu otimizar a iluminação das estradas. Até agora, todas as rotas eram iluminadas durante toda noite, o que custava 1 Dólar Byteland por metro a cada dia. Para economizar, eles decidiram não iluminar mais todas as estradas e desligar a iluminação de algumas delas. Para ter certeza que os habitantes de Byteland continuem a se sentirem seguros, eles querem otimizar o sistema de tal forma que após desligar a iluminação de algumas estradas à noite, sempre existirá algum caminho iluminado de qualquer junção de Byteland para qualquer outra junção. Qual é a quantidade máxima de dinheiro que o governo de Byteland pode economizar, sem fazer os seus habitantes sentirem-se inseguros?"
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1417",
        "saida": "Para cada caso de teste da entrada imprima uma única linha, contendo a letra maiúscula \"Y\", caso seja possível selecionar um subgrupo de heróis para formar a Liga da Justiça de acordo com as restrições, ou a letra maiúscula \"N\", caso contrário.",
        "entrada": "A entrada é composta por vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros separados por um espaço, H (2 ≤ H ≤ 50000) e R (1 ≤ R ≤ 100000), indicando, respectivamente, o número de super heróis e o número de relacionamentos. Cada uma das R linhas seguintes contém dois inteiros separados por um espaço, A e B (1 ≤ A < B ≤ H), indicando que o super herói A tem um relacionamento com o super herói B. Note que se A tem um relacionamento com B, então B tem um relacionamento com A. Um relacionamento nunca é informado duas vezes num caso de teste. O final da entrada é indicado por H = R = 0.",
        "titulo": "Liga da Justiça",
        "descricao": "Trinta e cinco anos atrás, um grupo de super heróis foi escolhido para formar a Liga da Justiça, com o propósito de proteger o planeta Terra dos vilões. Depois de todos esses anos ajudando a humanidade, seus membros estão se aposentando e está na hora de escolher novos membros para a Liga da Justiça. Para manter sua identidade secreta em segredo, super heróis normalmente usam um número inteiro para se identificar. Existem H super heróis na Terra, identificados por números inteiros de 1 até H. Com uma olhada rápida num jornal qualquer um pode descobrir se dois super heróis já trabalharam juntos numa missão. Se isso aconteceu, dizemos que os dois super heróis têm um relacionamento. Só se pode ter uma Liga da Justiça no mundo, que pode ser formada por qualquer número de super heróis (até mesmo apenas um). Além disso, para quaisquer dois heróis na nova Liga, eles têm que ter um relacionamento. Considere também o grupo de heróis não escolhidos para entrar na Liga da Justiça. Para quaisquer dois heróis desse grupo, eles não podem ter um relacionamento. Isso previne a formação de outras Ligas da Justiça não oficiais. Você trabalha para uma agência responsável por criar a nova Liga da Justiça. A agência não sabe se é ou não possível criar a Liga com todas as restrições dadas, e pediu ajuda às suas habilidades em programação. Dado um grupo de super heróis e seus relacionamentos, determine se é possível selecionar um subgrupo para formar a Liga da Justiça conforme as restrições dadas acima."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1111",
        "saida": "Para cada questão, responda “Impossible”, se não existe um caminho válido entre as esquinas (respeitando as regras de direções para esquinas), ou o custo mínimo, se há caminho(s). Imprima uma linha em branco após cada caso de teste.",
        "entrada": "O arquivo de entrada possui vários casos de teste. A primeira linha de cada caso de teste contém um inteiro N (1 ≤ N ≤ 10) que representa altura e largura da grade quadrada que mapeia a cidade (uma grade N x N). A entrada termina quando N = 0, caso que não deve ser processado. Cada uma das próximas N linhas representa uma rua da cidade, começando da mais ao norte (N – 1) até a mais ao sul. Em cada uma destas linhas há 4*N inteiros, 4 para cada esquina: A (norte) B (sul) C (oeste) D (leste). Cada um é 0 se não é possível seguir na respectiva direção a partir daquela esquina, ou 1 se é possível. Depois do mapa da cidade, seu programa deve ler um inteiro P (1 ≤ P ≤ 100). As próximas P linhas contém 4 inteiros cada, x0 y0 x1 y1 representando a questão: “Qual o custo mínimo de ir da esquina (x0 , y0) até a esquina (x1 , y1)?”. O custo de ir de uma esquina para a esquina mais próxima em qualquer direção é 1.",
        "titulo": "Desrugenstein",
        "descricao": "A cidade de Desrugenstein é uma bagunça completa. Olhando para o mapa ela parece organizada, já que foi criada na forma de uma grade quadrada, mas não há padrões de direções. Cada esquina diz para onde você pode ir a partir de lá (norte, sul, leste, oeste). O prefeito Daniel Cobra é cabeça-dura e preguiçoso o suficiente para deixar tudo como está e proibir qualquer tentativa de mudança. Incapaz de fazer muito, o Conselheiro Espiritual Mestre de Desrugenstein, Giordano Marfyn, te pediu, Conselheiro Espiritual Nível XVII de Desrugenstein, programador-chefe de Desrugenstein, para escrever um programa para calcular o custo de ir de uma esquina (x, y) a outra esquina (z, w), considerando as ruas bagunçadas."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1302",
        "saida": "Para cada caso de teste imprima Q linhas. Na enésima ( i-th ) linha escreva um inteiro com a resposta para a enésima (i-th) consulta. Se o casal correspondente pode se encontrar através de viagens aéreas, escreva o número mínimo total de vôos que o casal deve tomar para encontrar-se. Se for impossível para o casal encontrar-se por viagens aéreas, escreve o número \"-1\".",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém um inteiroN representando o número de cidades ( 2 ≤ N ≤ 105). Cidades são identificadas por diferentes inteiros de 1 até N. A segunda linha contém N inteiros Fi, onde Fi indica que o vôo de saida registrado da cidade i é para a cidade Fi ( 1 ≤ Fi ≤ N, Fi = i for i = 1, 2,..., N). A terceira linha contém um inteiro Q representando o número de consultas ( 1 ≤ Q ≤ 105). Cada uma das próximas Q linhas descreve uma consulta com dois inteiros A e B indicando a cidade inicial do casal( 1 ≤ A, B ≤ N). Em cada caso de teste, se for possível viagar por via aérea da cidade X até a cidade Y, o número máximo de vôos necessários deverá ser 104.",
        "titulo": "Juntando Casais",
        "descricao": "Regulamentos de tráfego aéreo na Nlogônia exigem que cada cidade deve registrar exatamente um vôo de saída para outra cidade. Os passageiros podem usar esse vôo somente na direção registrada, ou seja, pode haver um vôo registrado da cidade X para a cidade Y e nenhum vôo registrado da cidade Y para a cidade X. Assim, o número de vôos registados é igual ao número de cidades. Esta regra, como se pode imaginar, torna as viagens aéreas um pouco complicadas, mas a tradição e uma decisão forte da Rainha torna qualquer alteração difícil. Além disso, algumas empresas até tem lucro por causa dos problemas causados ​​pela regra. A Associação para a Correspondência de Casal (ACM) é a criação de um novo serviço para ajudar os clientes a encontrarem as suas  almas gêmeas: o Programa Internet para conexão de Casais (ICPC). O serviço consiste em calcular o número mínimo total de vôos que um casal precisa tomar para se encontrarem (talvez em uma cidade onde nenhum deles viva). Assumindo que as cidades de partida do casal são A e B , a agência vai tentar encontrar uma cidade C tal que C é acessível por transporte aéreo de ambos A e B , e a soma do número de voos necessários para ir de A para C e do número de voos necessárias para ir de B para , C é minimizado. Note que C pode ser igual a A ou B ou igual a ambos. Você terá a lista de todos os voos disponíveis e uma lista de consultas consistindo de pares de cidades onde os indivíduos de cada casal vivem. Para cada consulta, você deve calcular o número mínimo total de vôos que são necessárias para que eles se encontram."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1653",
        "saida": "Para cada expressão dada, imprima a expressão com o resultado equivalente quando processada pelo algoritmo com fila ao invés de pilha. Para que a solução seja única, você não deve assumir que os operadores sejam associativos ou comutativos.",
        "entrada": "A primeira linha da entrada contém um número T (T ≤ 200). Cada uma das T linhas seguintes contêm uma expressão em notação pós-fixa. Operadores aritméticos são representados por letras maiúsculas e números são representados por letras minúsculas. Você pode assumir que o comprimento de cada expressão é menor que 10000 caracteres.",
        "titulo": "Expressões",
        "descricao": "Expressões aritméticas geralmente são escritas com os operadores entre os dois operandos (chamada de notação infixa). Por exemplo, (x + y) * (z - w) é uma expressão aritmética em notação infixa. Entretanto, é mais fácil escrever um programa que avalie uma expressão se ela estiver escrita na forma pós-fixa (também conhecida como notação polonesa reversa). Na notação pós-fixa um operador é escrito atrás de seus dois operandos, que podem ser expressões. Por exemplo, x y + z w - * é a expressão dada anteriormente escrita em notação pós-fixa. Note que nesse caso os parênteses não são necessários. Para avaliar uma expressão escrita na forma pós-fixa pode ser utilizado um algoritmo que usa pilha. Uma pilha é uma estrutura de dados que suporta duas operações: 1. push (empilhar): um número é inserido no topo da pilha 2. pop (desempilhar): o número do topo da pilha é retirado Uma expressão é avaliada da esquerda para a direita. Se um número for encontrado, ele é empilhado. Se um operador for encontrado, os dois números do topo da pilha são desempilhados, o operador é aplicado sobre eles e o resultado é empilhado de volta na pilha. Mais especificamente, o seguinte pseudocódigo mostra como tratar o caso em que um operador O é encontado: a := pop(); b := pop(); push(b O a); O resultado da expressão ficará como o único número na pilha. Agora imagine que se use uma fila ao invés da pilha. Uma fila também tem operações de push e pop, mas seu significado é diferente: 1. push: um número é inserido no fim da fila 2. pop: o número da frente da fila é retirado Você consegue reescrever a expressão dada de modo que o resultado do algoritmo usando a fila seja o mesmo que o resultado da expressão original processada pelo algoritmo com pilha?"
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1747",
        "saida": "Aprezente uma linha com um inteiro que representa o número de inteiros k tal que existe um plano de viagem para que Endre acaba levando k crianças na viagem.",
        "entrada": "A primeira linha contém dois números inteiros I e S (1 ≤ I, S ≤ 104), que representam, respectivamente, o número de ilhas e o número de serviços de barco entre eles. Ilhas são identificados com números inteiros distintos de 1 a I. A segunda linha contém I inteiros C1, C2,. . . , CI, onde Ci indica o número de doces o grupo recebe ao chegar a ilha i (1 ≤ Ci ≤ 105 para i = 1, 2,..., I). Cada uma das próximas linhas S descreve um serviço de barco diferente, com dois inteiros A e B (1 ≤ A < B ≤ I), o que representa que é possível viajar da ilha A para ilha B e da ilha B para a ilha A. Não existem dois serviços de barco permitem viajar entre o mesmo par de ilhas.",
        "titulo": "Distribuição Igual",
        "descricao": "Endre tem muitos sobrinhos e sobrinhas. Uma vez por ano, ele leva alguns deles em uma viagem para um arquipélago onde um barco empresa opera serviços bidirecionais entre alguns pares de ilhas. Como Endre e as crianças podem voar e retornar diretamente de ou para qualquer uma das ilhas, qualquer viagem pode ser descrita como uma seqüência não vazia i1, i2,..., in de ilhas, de tal modo que cada par consecutivo de ilhas ij e ij + 1 têm um serviço de barco entre eles. A primeira e as última ilha de uma viagem pode ou não ser a mesma ilha, e as ilhas podem ser visitadas mais de uma vez durante a viagem. Cada ilha do arquipélago produz uma diferente variedade peculiar de doces, e recebe os seus visitantes dando a cada grupo que chega um determinado número de peças de doces. Endre não gosta de doces, mas as crianças comem todos quase que instantaneamente. Para evitar brigas, cada vez que o grupo chega a uma ilha e recebe doces, ele distribui uniformemente eles entre os filhos. Você pode se perguntar como Endre sempre consegue distribuir uniformemente os doces que recebem em cada ilha. Bem, a resposta é realmente muito simples. A cada ano, a agência de viagens envia-lhe o plano de viagem (a seqüência i1, i2,..., in ) de antemão. Como ele quer viajar com a maior quantidade de seus sobrinhos e sobrinhas possíveis, ele calcula o número máximo de crianças k ele pode levar para a viagem sem violar a regra sobre a distribuição uniforme de doces. Observe que cada plano de viagem determina exclusivamente o número de crianças a serem tomadas. Isso vem acontecendo há anos, e cada vez Endre acaba levando um número diferente de crianças na viagem. Ele gostaria de saber quantos números diferentes de crianças, ele pode levar em uma viagem, ou seja, o número de inteiros k tal que existe um plano de viagem para a qual ele acaba levando k crianças na viagem. Agora Endre está ocupado preparando a viagem deste ano. Você pode ajudá-lo com a resposta?"
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1821",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte, você deve imprimir possivel se for possível realizar os casamentos entre os n rapazes e as n garotas sem que parentes se casem, e imprimir impossivel em caso contrário. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "Seu programa deve estar preparado para trabalhar com diversos grupos de jovens, doravante denominados instâncias. Cada instância tem a estrutura que segue. Na primeira linha são fornecidos inteiros n (0 ≤ n ≤ 100), que representa o número de rapazes e garotas, e m (0 ≤ m ≤ 1000) que representa o número de parentescos existentes entre eles. Não foram incluídos em m parentescos entre um mesmo sexo, pois isso é irrelevante ao problema. Nas próximas m linhas são fornecidos m pares de números entre 1 e n, inclusive, um par por linha. O primeiro número representa um rapaz e o segundo uma garota que são parentes. Valores n = m = 0 indicam o final das instâncias e não devem ser processados.",
        "titulo": "Miai Chinês",
        "descricao": "São notórios os problemas que a China vem enfrentando ao longo do tempo para controlar a explosão populacional que aflige o país. Para piorar a situação, no interior, os casamentos costumam ser tradicionalmente arranjados nas famílias, aumentando as chances do nascimento de crianças com pais aparentados. Ciente do problema, o governo chinês resolveu criar uma agência oficial de matrimônios. Esta agência deve receber as informações dos jovens que pretendem se casar e decidir se é possível realizar casamentos entre eles que evitem uniões de parentes e de tal forma que nenhum dos jovens termine solteiro. Como em muitos outros países do mundo, na China são permitidos apenas casamentos monogâmicos entre rapazes e garotas. Sua tarefa neste problema é auxiliar o governo, escrevendo um programa para descobrir se é possível realizar casamentos em dados grupos de jovens."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1993",
        "saida": "Para cada caso de teste, imprima uma única linha contendo um número racional que representa a distância mínima que Humberto tem que andar a fim de chegar, a partir do ponto de partida, ao destino, usando alguma ou nenhuma das catapultas. Arredonde a resposta para o numero mais próximo com dois dígitos decimais. Em caso de empate, arredondar o número para cima. Imprimir exatamente dois dígitos depois do ponto decimal, mesmo que isso signifique acabar com o número 0.",
        "entrada": "A entrada contém vários casos de teste. Cada teste é descrito em várias linhas. A primeira linha contém cinco inteiros N, P_X, P_Y, L_X e L_Y. N representa o número de catapultas no terreno (1 <= N <= 100). O par (P_X, P_Y) indica as coordenadas no plano XY do ponto de partida para Humberto, enquanto o par (L_X, L_Y) indica o ponto de destino (1 <= P_X, P_Y, L_X, L_Y <= 109). Cada uma das próximas N linhas descreve uma catapulta diferente, utilizando três inteiros C_X, C_Y e F, que indicam o ponto (C_X, C_Y) onde a catapulta de força F está instalada. Isto significa que Humberto pode se mover, sem andar, a partir do ponto (C_X, C_Y) para qualquer ponto do plano que está a uma distância de exatamente F de (C_X, C_Y). Assume-se que em cada caso de teste todos os pontos indicados no plano são diferentes. O fim da entrada é indicado por uma única linha que contém o número -1 cinco vezes, e não deve ser processado como um caso de teste.",
        "titulo": "Ele é Preguiçoso",
        "descricao": "Como todos sabemos, Humberto é realmente preguiçoso. Ele é tão preguiçoso que ele coloca o nariz para fora da janela para o vento soprar para ele. Obviamente, ele nunca trabalhou em toda a sua vida. No entanto, ele teve sorte e ganhou um monte de dinheiro na loteria. Com parte desse dinheiro ele comprou um terreno vazio, e construiu várias casas no interior do mesmo, para onde se mudou com sua família e amigos. Assim, Humberto pode ir em linha reta a partir de qualquer ponto em seu terreno a qualquer outro, sem ter que fazer desvios por causa do desenho urbano (por uma questão de simplicidade, consideramos os objetos no terreno de Humberto como pontos, para que eles não interfiram no caminho do Humberto). Infelizmente, isso não foi suficiente para Humberto, por isso, para caminhar menos ele decidiu instalar algumas catapultas em pontos estratégicos de seu terreno. Cada catapulta pode enviar-lhe a partir do ponto em que está instalada para qualquer ponto a uma certa distância fixa (que depende do alcance da catapulta). Mas, apesar de simplificar a sua vida, as catapultas fizeram a escolha do caminho no terreno uma verdadeira dor de cabeça, porque Humberto quer andar menos possível. Cansado dos seus problemas, ele decidiu usar o resto do seu dinheiro para contratá-lo para lhe dizer a distância mínima que tem que caminhar para se deslocar de um determinado ponto para outro no terreno."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2039",
        "saida": "Para cada consulta de cada caso de teste, imprima uma linha com o número de passos da ramificação que produziu o sorvete.",
        "entrada": "A entrada é composta por vários casos de teste e termina com fim de arquivo. A primeira linha de um caso de teste contém os inteiros N, S e Q, onde 0 ≤ N ≤ 25 e 1 ≤ S,Q ≤ 10. As próximas N linhas descrevem os comandos da máquina a ser testada. Cada linha está no formato q a t b c, indicando que se uma configuração estiver no estado q e o símbolo na posição atual for a, então deve-se gerar uma nova configuração com estado t, atualizar o símbolo na posição atual para b e deve-se mover a posição na direção c, de acordo com a descrição do enunciado. Note que 1 ≤ q,t ≤ S. O dado a pode ser uma letra minúscula, '0', ou '~' seguido de uma cadeia não-vazia w, que pode conter letras minúsculas ou '0'. No terceiro caso, o comando deve ser executado quando o símbolo na posição atual não aparecer em w. O dado b pode ser uma letra minúscula, '0', ou '*'. No terceiro caso, o símbolo na posição atual não deve ser atualizado. O dado c vale 'E' (esquerda), ou 'D' (direita). O símbolo '0' significa espaço em branco. As próximas Q linhas descrevem as consultas. Cada linha é uma cadeia sabor de letras minúsculas, com no mínimo 1 e no máximo 20 letras.",
        "titulo": "Programadores Devem Aprender Teoria da Computação",
        "descricao": "Durante sua aventura em Imaginalândia, Alan Leopold \"Butters\" Stotch Turing inventou sua famosa máquina de fazer sorvete. Basta dizer para a máquina o sabor, que ela faz um sorvete delicioso! Fonte da imagem: http://southpark.cc.com/avatar Neste momento, Butters está preocupado com uma coisa. Ele é capaz de construir sua máquina de muitas maneiras diferentes; e está fazendo experimentos para determinar qual é a melhor. Você decidiu ajudá-lo, pois está ansioso por um sorvete de creme. Dada a descrição de uma máquina e uma série de Q consultas de sabores, Butters quer saber quantos passos esta máquina leva para fabricar o sorvete de cada consulta. Uma máquina de sorvete é uma configuração com um estado (um número inteiro), uma cadeia e uma posição nesta cadeia. Para cada configuração , um passo é gerar uma nova configuração: atualiza-se o estado, atualiza-se o símbolo que está na posição atual; e move-se a posição atual para uma posição adjacente (à esquerda, ou à direita). Caso o comando movimente a posição para uma posição além dos limites da cadeia, deve ser concatenado um espaço em branco no respectivo extremo; e a posição da nova configuração deve apontar para este espaço em branco. A máquina começa na configuração , onde sabor é uma cadeia e o segundo 1 indica a primeira posição desta cadeia. A máquina termina de fazer o sorvete quando atinge uma configuração cujo estado é o inteiro S, de sorvete. O truque mágico é que, para cada configuração , a máquina de Butters é capaz de executar vários passos distintos, de modo que ela pode terminar de fazer o sorvete mais rapidamente. Sempre que a máquina chega a uma configuração que leva a múltiplas novas configurações, a máquina cria cópias de si mesma, de modo que cada cópia segue independentemente. Há uma nova cópia para cada nova configuração. Após gerar as cópias para as novas configurações, a máquina morre. Caso uma configuração não gere novas cópias, ela só morre. O processo termina quando alguma cópia termina de fazer o sorvete. É garantido que alguma ramificação da máquina terminará de fazer o sorvete."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1208",
        "saida": "Para cada instância imprima uma linha contendo um único número inteiro, que é o número mínimo de текущий necessários para particionar todos os imperadores daquela instância.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 1000) e (M 0 ≤ M ≤ 10000) representando, respectivamente, a quantidade de imperadores e o número de relações de filiação naquela instância. Os imperadores são identificados por números de 1 à N. Cada uma das próximas M linhas contém dois inteiros Pi (1 ≤ Pi < Fi) e Fi (Pi < Fi ≤ N), indicando que Pi é pai de Fi. Uma particularidade da da árvore genealógica dada é que em caso de dúvidas de paternidade, todos os possíveis pais eram indicados, ou seja, uma pessoa pode ter qualquer número de pais.",
        "titulo": "As dinastias de São Petersburgo",
        "descricao": "São Petersburgo foi fundada no dia 27 de maio de 1703 pelo czar Pedro, o Grande, e foi capital imperial da Rússia por um período curto logo após (de 1713 a 1728) e depois por quase dois séculos, de 1732 a 1918. Neste último período o trono imperial russo acabou sendo ocupado por diversos imperadores, muitas vezes de linhas de dinastia diferentes. Na tradição imperial russa chama-se de текущий (lê-se текущий 1*) uma sequência de descendentes dentro de uma dinastia, ou seja, um elemento, seu filho, seu neto, e assim por diante. A determinação destas текущий é fundamental quando se deseja determinar o sucessor do atual imperador, uma vez que o próximo imperador é o elemento vivo de uma текущий que esteja mais próxima do atual imperador. É claro que uma árvore genealógica pode ser dividida em текущий de várias formas diferentes. O interessante é encontrar uma partição que minimize o número de текущий necessário para cobrir todos os elementos da dinastia. Sua tarefa neste problema é determinar, dada a árvore genealógica da família imperial russa, o menor número de текущий que particionam toda a família imperial, isso é, todos os imperadores tem que pertencer à exatamente uma текущий e essas têm que ser o menor número possível."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1910",
        "saida": "Para cada caso, exiba uma única linha, a menor quantidade de cliques nos botões necessária para ir do canal de origem ao destino ou -1 caso seja impossível chegar ao canal de destino devido as restrições de Clotilde.",
        "entrada": "Haverá diversos casos de testes. Cada caso inicia com três inteiros, O, D e K (1 ≤ O, D ≤ 105, 0 ≤ K ≤ 100), representando, respectivamente, o canal de origem, destino, e a quantidade de canais que Clotilde não quer passar. A segunda linha conterá os K canais proibidos por Clotilde. É garantido que o canal de origem e destino nunca serão proibidos. A entrada termina com O = D = K = 0, a qual não deve ser processada.",
        "titulo": "Ajude Clotilde",
        "descricao": "Clotilde ama assistir novelas, porém o controle da sua televisão não é nada convencional. Ele possui apenas seis botões, o botão liga/desliga e cinco botões para mudar de canal. Os botões de mudança de canal funcionam da seguinte maneira: +1 (avança um canal), -1(volta um canal), x2(vai para o dobro do canal atual), x3(vai para o triplo do canal atual) e /2(vai para a metade do canal atual, esse botão só funciona se o canal atual for par). Eis o famoso controle de Clotilde. Os vizinhos de Clotilde costumam visitar sua casa nos finais de semana, assistem televisão e não voltam ao canal de sua novela, assim fazendo com que Clotilde perca muito tempo tentando achar o canal de seu interesse novamente. Sua tarefa é, dado o número do canal atual e o número do canal de interesse de Clotilde, você deve calcular a menor quantidade de cliques nos botões necessária para sair de um e chegar no outro. Lembrando que como Clotilde é uma pessoa séria, ela não gosta de passar por alguns canais específicos, mesmo que tenha que apertar mais botões para chegar no canal destino. Outra restrição é, não existe canal menor igual a 0 ou maior que 105. Ex: Se está no canal 55000, você não pode apertar o botão x2 nem o x3."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1423",
        "saida": "Para cada caso de teste na entrada imprima uma linha contendo um único inteiro indicando o tempo mínimo necessário para ir para casa com a bela princesa. É garantido que Super Mario pode sempre ir para casa.",
        "entrada": "A primeira linha da entrada contém um único inteiro T, indicando o número de casos de teste (1 ≤ T ≤ 20). Casa caso de teste começa com cinco inteiros A, B, M, L e K - o número de Vilas, o número de Castelos (1 ≤ A, B ≤ 50), o número de ruas, a distância máxima que pode ser coberta de uma vez (1 ≤ L 500), e o número de vezes as botas podem ser usadas (0 ≤ K ≤ 10). As próximas M linhas, cada uma contém três inteiros Xi, Yi, Li. Isso significa que há uma rua conectando os lugares Xi e Yi. A distância é Li, então o tempo de caminhada é também Li (1 ≤ Li ≤ 100).",
        "titulo": "A aventura de Super Mario",
        "descricao": "Depois de resgatar a bela princesa, Super Mario precisa achar o caminho de casa - com a princesa é claro :-). Ele é familiarizado com \"Mundo de Super Mario\", então ele não precisa de uma mapa, precisa apenas da melhor rota a fim de ganhar tempo. Existem A Vilas e B Castelos neste mundo. Vilas são numeradas 1..A, e Castelos são numerados A+1..A+B. Mario vive na Vila 1, e o Castelo que ele começa é numerado A+B. Também, existem uma via de mão dupla conectando-os. Dois lugares são conectados no máximo por uma rua e um lugar jamais tem uma rua conectando-o a si mesmo. Mario já mediu o comprimento de cada rua, mas não quer caminhar todo o percurso, já que ele se move uma unidade tempo para cada unidade de distância (que lento!). Por sorte, Mário encontrou botas mágicas no Castelo onde havia salvado a princesa. Se ele as utilizar, poderá fazer uma super-corrida de um lugar a outro EM TEMPO ZERO. (Não se preocupe com a princesa, Mario encontrou um jeito de levá-la em sua super-corrida, mas ele não contará a você:-P). Uma vez que existem armadilhas nos Castelos, Mario NUNCA faz uma super-corrida através de um Castelo. Ele sempre para quando há um Castelo no caminho. Ele também começa/para suas super-corrridas SOMENTE em Vilas e Castelos. Infelizmente, as botas mágicas são velhas, então Mário não pode usar mais que L quilômetros de uma vez, e não pode usar mais que K vezes no total. Quando chegar em casa, ele pode repará-las e usá-las novamente."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2155",
        "saida": "Para cada caso de teste imprima a palavra Caso, seguida por um espaço, o número do caso e dois pontos. Na linha seguinte, imprima o percurso feito, saindo de casa e voltando para lá, de modo que tenha obtido o menor caminho, separando cada local visitado por um hífen e um sinal de maior, dando uma ideia de seta, seguido de dois pontos, um espaço, e a distância do percurso total, com cinco casas decimais. Caso o menor caminho tenha mais de uma possibilidade, imprima o caminho lexicograficamente menor. Ou seja, se tem um percurso saindo de casa e indo para o icosaedro de uma estrela, e outro indo para o de duas estrelas, opte por ir na de uma estrela primeiro, desde que ambos os caminhos tenham a mesma distância.",
        "entrada": "A primeira linha terá um valor inteiro C indicando o número de casos de teste. Para cada caso de teste, haverá uma linha com dois inteiros, X e Y, indicando as coordenadas da casa de Kogu, de posse do icosaedro de quatro estrelas. Depois haverá mais seis linhas, cada uma com três inteiros, N, XN e YN, representando o icosaedro de N estrelas, e as coordenadas onde tal icosaedro se encontra.",
        "titulo": "Os Icosaedros do Lagarto",
        "descricao": "Reza a lenda que os Icosaedros do Lagarto são cristalinos e podem invocar o Lagarto Shen Long Int, que tem a habilidade de conceder desejos para quem conseguir juntar os sete icosaedros. Os icosaedros vêm em conjuntos de sete com cada mostrando o número de estrelas. Estes são difíceis de encontrar porque eles se dispersam ao redor do planeta, e se desativam por um ano a cada desejo, se transformando em pedras. Para ter a oportunidade de invocar o Lagarto, um tem que viajar ao redor do globo para encontrá-las. Certo dia, Kogu ganha o icosaedro de quatro estrelas de seu avô, Hogan. Ao saber da lenda, Kogu resolve ir atrás dos outros icosaedros, para que possa perder o medo de injeção. Como a tecnologia progrediu, isso ficou mais fácil, e bem simples com a invenção de sua amiga Mulba, o Radar do Lagarto. Só que, para ganharem tempo, precisam saber qual ordem de busca dos icosaedros eles devem seguir, de modo que percorram a menor distância possível, com a sua nuvem voadora. Escreva um programa que, dadas as coordenadas dos icosaedros, informe o caminho de menor distância, saindo de sua casa, capture todos os icosaedros e volte para casa, além de informar a distância de tal caminho."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1826",
        "saida": "Para cada caso de teste, imprima uma linha com a palavra \"vazia\" se a GLC não gera nenhuma cadeia de terminais, ou a palavra \"finita\" se a GLC gera alguma, mas não infinitas cadeias de terminais, ou a palavra \"infinita\" se a GLC gera infinitas cadeias de terminais.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste fornece a descrição de uma gramática livre-do-contexto. A primeira linha de um caso de teste contém dois inteiros v e r, onde v é a quantidade de variáveis da GLC, r é a quantidade de regras, 1 ≤ v ≤ 102 e 0 ≤ r ≤ 2·102. Cada uma das próximas v linhas contém uma palavra feita somente de letras maiúsculas, ou seja, uma variável da GLC. A variável da primeira linha é a variável inicial. Cada uma das próximas r linhas descreve uma regra da GLC. É dada uma palavra de letras maiúsculas, um inteiro 0 ≤ k ≤ 102 e uma sequência de k elementos, onde cada elemento é uma variável, ou um símbolo terminal.",
        "titulo": "A Linguagem é Infinita?",
        "descricao": "Gramática livre-do-contexto – GLC – é uma estrutura matemática utilizada para gerar cadeias, que são sequências finitas de símbolos terminais. Dizemos que o conjunto de todas as cadeias que podem ser geradas por uma GLC G é a linguagem de G, escrito L(G). Neste problema, dada uma GLC G, você deve determinar se L(G) é um conjunto vazio, finito, ou infinito. Uma GLC é uma 4-upla (V, Σ, R, S), onde V é um conjunto finito e não-vazio cujos elementos chamamos de variáveis. Σ é um conjunto finito e não-vazio, disjunto de V, cujos elementos chamamos de símbolos terminais. R é um conjunto regras. Uma regra tem a forma A → U1U2...Uk onde A ∈ V, k ≥ 0 e Ui ∈ V ∪ Σ para i = 1,2,...,k. S ∈ V é a variável inicial. Para gerar uma cadeia utilizando uma GLC, realizamos o seguinte procedimento. Primeiro, escrevemos a variável inicial S. Em seguida, escolhemos uma regra para substituir S, digamos, S → U1U2...Uk. Após esta escolha, apagamos o S e escrevemos em seu lugar a cadeia de variáveis e/ou terminais U1U2...Uk. Repetimos este processo até que não restem variáveis escritas. Se não é possível gerar uma cadeia sem variáveis partindo apenas da variável inicial, dizemos que a linguagem da GLC é vazia. Por exemplo, seja a GLC abaixo, onde S é a variável inicial. S → aSa S → bSb S → a S → b S → Utilizando a GLC acima, podemos gerar qualquer palíndromo feito de a's e b's. Por exemplo: S → aSa → abSba → abba Observe que a cadeia vazia é uma cadeia válida. Logo, se uma GLC G gera, por exemplo, apenas a cadeia vazia, L(G) é finita, mas não é vazia. Neste problema, as variáveis serão palavras feitas somente de letras maiúsculas, ou seja, caracteres entre A e Z. Os símbolos terminais serão letras minúsculas, ou seja, caracteres entre a e z. As regras serão dadas conforme descrito na próxima seção. A variável inicial será sempre a primeira variável do caso de teste."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1951",
        "saida": "Imprima uma linha contendo unicamente o.o se o circuito descrito na entrada é válido ou u.u caso contrário.",
        "entrada": "A entrada contém a descrição de um circuito C, o qual se deseja validar. A primeira linha da entrada consiste de três inteiros, I, N e O (1 ≤ I, N, O ≤ 104), os quais representam respectivamente o número de entradas de C, o número de circuitos publicados pelo professor usados internamente na construção de C e o número de saídas de C, de modo que as entradas são identificadas pelos inteiros 1, …, I, os circuitos internos pelos inteiros I + 1, …, I + N, e as saídas identificadas pelos inteiros I + N + 1, …, I + N + O. Cada uma das próximas N linhas descreve como é alimentado cada um dos circuitos internos, seguindo a ordem I + 1, …, I + N, e consiste de um inteiro K (1 ≤ K ≤ 102), o qual representa o número de entradas no circuito interno, seguido por K inteiros, os quais identificam a origem do sinal alimentado em cada entrada. A última linha da entrada consiste de O inteiros, identificando a origem do sinal devolvido por cada saída de C, seguindo a ordem I + N + 1, …, I + N + O. A figura abaixo ilustra o circuito C descrito pelo primeiro exemplo de entrada.",
        "titulo": "Validador de Circuitos",
        "descricao": "O Prof. Padilha pediu um trabalho para a componente curricular de Circuitos Digitais e agora está todo mundo desesperado! Os calouros precisam construir um circuito combinacional usando apenas circuitos de uma lista de circuitos publicados pelo professor. No entanto, devido a alguns problemas com tamanho, eles mal estão conseguindo determinar se os circuitos que eles construíram são válidos, quanto mais decidir se estão corretos. Cabe agora a você, veterano, fazer um programa para validar os circuitos construídos pelos calouros. Você pode ajudá-los? A propósito, de acordo com o que o Prof. Padilha pediu, um circuito C é válido se: para toda entrada de C e toda saída de um circuito menor usado internamente na construção de C existe ao menos um caminho até alguma saída de C; para toda saída de C existe ao menos um caminho que vem de alguma entrada de C; não há ciclos em C. Todos os circuitos publicados pelo professor possuem só uma saída cada, embora os circuitos construídos pelos calouros possam ter várias saídas. É óbvio que os circuitos publicados pelo professor são todos válidos."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1723",
        "saida": "Para cada caso de teste, imprima uma linha contendo algum ancestral comum ideal ótimo e os custos totais mínimos.",
        "entrada": "O arquivo de entrada contém vários casos de teste. Cada caso de teste começa com dois números inteiros N e L, denota o número de sequências para as folhas e do seu comprimento, respectivamente. A entrada é terminada por N = L = 0. Caso contrário, 1 ≤ N ≤ 1024 e 1 ≤ L ≤ 1000. Em seguida, siga N palavras de comprimento L sobre o alfabeto dos aminoácidos. Eles representam as folhas de uma árvore binária completa, a partir da esquerda para a direita.",
        "titulo": "Árvores Filogenéticas Herdadas",
        "descricao": "Entre outras coisas, Biologia Molecular Computacional lida com o processamento de seqüências genéticas. Considerando a relação evolutiva de duas seqüências, podemos dizer que eles estão intimamente relacionados, se eles não diferem muito. Podemos representar a relação por uma árvore, colocando seqüências de ancestrais acima de seqüências de seus descendentes. Tais árvores são chamadas árvores filogenéticas. Considerando que uma tarefa da filogenia é inferir uma árvore a partir de seqüências de dados, vamos simplificar um pouco as coisas e proporcionar uma estrutura de árvore - esta será uma árvore binária completa. Você receberá as n folhas da árvore. Claro que você sabe, n é sempre uma potência de 2. Cada folha é uma sequência de aminoácidos (designadas pelos códigos compostos de um caractere que você pode ver na figura). Todas as sequências serão de igual comprimento l. Sua tarefa é derivar a seqüência de um ancestral comum com custos mínimos. Aminoácido Alanine AlaA ArginineArgR AsparagineAsnN Aspartic Acid AspD CysteineCysC Glutamine GlnQ Glutamic Acid GluE Glycine GlyG Histidine HisH Isoleucine IleI Aminoácido Leucine LeuL Lysine LysK Methionine MetM Phenylalanine PheF Proline ProP Serine SerS Threonine ThrT Tryptophan TrpW Tyrosine TyrY Valine ValV Os custos são determinados como se segue: cada nó interior da árvore é marcado com uma sequência de comprimento L. O custo de uma extremidade da árvore é o número de posições nas quais as duas sequências diferem nas extremidades. O total custo é a soma dos custos em todas as bordas. A seqüência de um ancestral comum de todas as sequências é então encontrado na raiz da árvore. Um antepassado comum ideal é um ancestral comum com os custos totais mínimos."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1076",
        "saida": "O arquivo de saída contém um valor para cada caso de teste de entrada. Este valor é a quantidade de movimentos de caneta que devem ser feitos para desenhar o labirinto do caso de teste, considerando que o início e o fim são sempre a partir do mesmo ponto (nodo) e que não é possível levantar a caneta do papel.",
        "entrada": "A primeira linha de entrada é um inteiro T (T < 100) que indica o número total de casos de teste. Cada caso inicia com uma linha contendo um inteiro N (N < X2, onde X é a largura em nodos do labirinto, que pode variar de 3 até 7). Este N é o ponto (nodo) no qual o desenho deve ser iniciado e também é onde o desenho deve ser terminado. Na próxima linha há duas informações V e A que são respectivamente a quantidade de vértices e arestas do desenho. Uma quantidade A de linhas vem a seguir, cada uma descrevendo um segmento de linha que Pedro tem disponível para para desenhar o labirinto desejado.",
        "titulo": "Desenhando Labirintos",
        "descricao": "Pedro gosta muito de desenhar labirintos, e teve uma idéia recentemente: quantos movimentos com a caneta ele precisa fazer, no mínimo, para desenhar um labirinto, saindo sempre da mesma posição e finalizando no mesmo ponto? Para a brincadeira ficar interessante, Pedro decidiu que não é permitido levantar a caneta do papel. Os modelos para construção do labirinto são sempre quadrados, ou seja, 3 x 3 , 4 x 4 , 5 x 5 até no máximo de 7 x 7. Para cada exemplo, Pedro vai especificar de onde o desenho deve começar e é tarefa sua determinar a quantidade de movimentos necessários para desenhar o labirindo como Pedro deseja. Pedro ainda lembra que você não precisa se preocupar com ciclos, pois não haverá nenhum ciclo em nenhum dos casos de teste. Se existir uma entrada 4 1, isso não impede a existência de outra entrada 1 4 no mesmo caso de teste, ou seja, outra linha ligando estes mesmos dois nodos. De qualquer forma isto não fará diferença no desenho do labirinto, pois se Pedro traçar as duas linhas entre 1 e 4 ou apenas uma delas, a quantidade de movimentos deverá ser a mesma. Somente neste caso, a utilização da segunda linha por Pedro é opcional. Veja os exemplos abaixo, No labirinto A (4 x 4), Pedro deseja sair do nodo 0, desenhar todas as linhas e retornar ao nodo 0. Para isso, o mínimo de movimentos possíveis é 30. No labirinto B (3 x 3), Pedro deseja sair do nodo 1, desenhar  todas as linhas e retornar para o nodo 1. Neste caso, ele precisa de 10 movimentos para fazer este desenho."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1135",
        "saida": "Para cada caso de teste, imprima uma única linha com Q inteiros, os comprimentos do menor caminho entre os dois formigueiros de cada consulta. Escreva os resultados para cada consulta na mesma ordem em que aparecem na entrada.",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém um inteiro N representando a quantidade de formigueiros na colônia (2 ≤ N ≤ 105). Cada uma das próximas N-1 linhas contém dois inteiros que descrevem um túnel. A linha i, para 1 ≤ i ≤ N-1, contém Ai e Li, indicando que o formigueiro i foi conectado diretamente ao formigueiro Ai por um túnel de comprimento Li (0 ≤ Ai ≤ i-1 e 1 ≤ Li ≤ 109). A próxima linha contém um inteiro Q representando o número de consultas que seguem (1 ≤ Q ≤ 105). Cada uma das Q linhas seguintes descreve uma consulta e contém dois inteiros distintos S e T (0 ≤ S,T ≤ N-1), representando, respectivamente, os formigueiros de origem e destino.   O último caso de teste é seguido por uma linha contendo apenas um zero.",
        "titulo": "Colônia de Formigas",
        "descricao": "Um grupo de formigas está muito orgulhoso pois construíram uma grande e magnífica colônia. No entanto, seu enorme tamanho tem se tornado um problema, pois muitas formigas não sabem o caminho entre algumas partes da colônia. Elas precisam de sua ajuda desesperadamente!   A colônia de formigas foi criada como uma série de N formigueiros conectados por túneis. As formigas, obssessivas como são, numeraram os formigueiros sequencialmente à medida que os construiam. O primeiro formigueiro, numerado 0, não necessitava nenhum túnel, mas para cada um dos formigueiros subsequentes, 1 até N-1, as formigas também construíram um único túnel que conectava o novo formigueiro a um dos formigueiros existentes. Certamente, esse túnel era suficiente para permitir que qualquer formiga visitasse qualquer formigueiro já construído, possivelmente passando através de outros formigueiros pelo percurso, portanto elas não se preocupavam em fazer novos túneis e continuavam construindo mais formigueiros.   O seu trabalho é: dada a estrutura de uma colônia e um conjunto de consultas, calcular, para cada uma das consultas, o menor caminho entre pares de formigueiros. O comprimento do caminho é a soma dos comprimentos de todos os túneis que necessitam ser visitados."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1835",
        "saida": "Para cada caso de teste deverá ser impressa ou a mensagem \"Caso #t: ainda falta(m) E estrada(s)\" ou a mensagem \"Caso #t: a promessa foi cumprida\", conforme for o caso, onde t é o número do caso de teste (cuja contagem tem início no número um) e E é o número mínimo de estradas que devem ser construídas para que a promessa seja cumprida. Ao final de cada mensagem deve ser impressa uma quebra de linha.",
        "entrada": "A entrada consiste em uma série de casos de teste. O número T (T ≤ 100) de casos de teste é indicado na primeira linha da entrada. Cada caso de teste é composto por várias linhas. A primeira e a segunda linha do caso de teste contém, respectivamente, os valores N (1 ≤ N ≤ 100) e M (0 ≤ M ≤ N(N - 1)/2), onde N é o número de pontos principais da cidade e M o número de estradas já construídas. Os principais pontos da cidade são identificados sequencialmente por números inteiros, a partir do número um. As M linhas seguintes contém pares de valores X e Y (1 ≤ X, Y ≤ N), que indicam que existe uma estrada que liga o ponto X ao ponto Y.",
        "titulo": "Promessa de Campanha",
        "descricao": "Durante sua campanha eleitoral, o prefeito do município de Barro Bravo prometeu que, até o fim de seu mandato, os cidadãos conseguiriam se locomover entre os principais pontos do município sem passar por nenhum trecho de estrada de terra (quando assumiu o cargo, não era possível ir a lugar algum sem passar pelo barro...). A primeira providência que tomou foi finalizar as diversas vias de ligação que haviam sido parcialmente construídas, mas não terminadas. Assim que concluiu esta etapa, já com o orçamento reduzido, o prefeito precisava determinar se a promessa já fora cumprida ou não, e caso não tem sido, quantas estradas ainda deveriam ser construídas para que a promessa se concretizasse. Escreva, portanto, um programa que auxilie o prefeito a obter sua resposta."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2086",
        "saida": "Para cada consulta seu programa deverá imprimir uma linha com a maior distância, conforme explicado acima.",
        "entrada": "A entrada possui diversos casos de teste. Cada caso de teste começa com dois inteiros N (1 ≤ N ≤ 100) e M (1 ≤ M ≤ 4950), indicando respectivamente o número de interseções no mapa da cidade e quantas ciclofaixas serão criadas. Nas próximas M linhas serão fornecidos três inteiros U , V (1 ≤ U, V ≤ N ) e W (0 ≤ W ≤ 2000), que indicam que existe uma ciclofaixa entre a interseção U e V com uma distância W . Na próxima linha terá um inteiro Q (1 ≤ Q ≤ 50), que representa a quantidade de consultas que o candidato deseja fazer. Segue Q linhas com dois inteiros A, B (1 ≤ A, B ≤ N), indicando o par de interseções para o qual deve ser feita a consulta. A entrada termina quando N = M = 0 e não deve ser processada.",
        "titulo": "Ciclofaixa",
        "descricao": "Como todos já sabem, as eleições para prefeito estão chegando. Neste ano nossa cidade possui excelentes candidatos, todos com propostas incríveis de governo. Um dos candidatos pretende implementar um sistema de transporte revolucionário, onde as ruas serão removidas e trocadas por ciclofaixas. Esta ideia parece ser a solução de todos os problemas que nossa cidade vem enfrentando. Porém, há um falha: a desidratação quando andamos por muito tempo de bicicleta. Para solucionar esse problema, o candidato pretende fornecer água gelada para toda a população. Sua ideia é colocar pontos de distribuição em todas interseções das ciclofaixas. Porém como água é um recurso que está se esgotando, a quantidade que ele fornecerá será fixa, independente da distância percorrida pelo indivíduo. Na intenção de validar sua ideia, o candidato contratou você para o ajudar. Sua tarefa é simples: será fornecido o mapa da cidade com todas as interseções e as distâncias entre elas. Em seguida, você deverá responder várias consultas do candidato, onde ele irá informar duas interseções, A e B, e seu programa deverá mostrar qual a maior distância que será percorrida por uma pessoa sem água entre A e B. Com essas informações o candidato conseguirá ver se a quantidade que ele pretende fornecer será suficiente. Não esqueça que o candidato pretende diminuir essa distância, então o seu programa deve informar a maior distância no melhor trajeto. Como as ruas de nossa cidade são bem largas, todas as ciclofaixas serão de mão dupla."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1675",
        "saida": "Cada linha de cada caso de teste deve conter uma treap com os nós especificados. Uma treap é impressa como (/) As sub-treaps são impressas recursivamente e omitidas se forem folhas.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa com um inteiro n. Você pode assumir que 1≤ n ≤ 50000. Então segue n pares de strings e números rótulo1/prioridade1 , ... , rótulon/prioridaden. As strings são não-nulas e em caixa-baixa, e os números são inteiros não-negativos. O último caso de teste é seguido por um zero.",
        "titulo": "Construção de Procura Binária de Heap",
        "descricao": "Leia o enunciado do problema G para as definições sobre heaps. A seguir nós definimos a terminologia básica de heaps. Uma heap é uma árvore cujos nós internos tem, cada um, uma prioridade (definida por um número) sendo que a prioridade de cada nó interno é menor que a prioridade de seu nó-pai. Como consequência, a rais será o nó de maior prioridade da árvore. Isso é uma das razões pelas quais heaps podem comumente ser usadas para a implemantação de filas de prioridade e para ordenações. Uma árvore binária na qual cada nó interno tem ambos um rótulo e uma prioridade, e é tanto uma arvore binária de busca com atenção para rótulos; quanto uma fila com atenção para prioridades, é chamada de treap(árvore-heap). A sua tarefa é: Dado um conjunto de pares de rótulos e prioridades, com rótulos únicos e prioridades únicas, construir uma treap com essas informações."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1394",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo um único caractere, 'Y' se seu time pode ser campeão ou 'N' caso contrário.",
        "entrada": "A entrada contém vários casos de teste, cada caso consiste um uma ou mais linhas. A primeira linha contém três inteiros, N, M e G, separados por um espaço cada, representando respectivamente o número de times diputando o campeonato (2 ≤ N ≤ 40), o número correspondente (1 ≤ M ≤ 4) e o número de jogos já concluídos (1 ≤ G). Seu time é identificado pelo número 0, os outros times são identificados pelos inteiros 1, 2,..., N - 1. Cada uma das próximas G linhas, descreve os jogos já disputados. A linha contém um inteiro I, um caractere C e um inteiro J, separados por um espaço cada. inteiros I e J são os times que jogaram tal jogo (I ≠ J e 0 ≤ I, J ≤ N - 1). O caractere C será '<' se o time I perder para o time J, ou '=' se terminar empatado. O último caso de teste é seguido por uma linha contendo três zeros separados por um espaço cada.",
        "titulo": "Hooligan",
        "descricao": "Futebol é o esporte mais popular da América Latina (e do mundo). \"Hooligan\" é uma palavra usada para descrever um fã agressivo de futebol. Em Linearonia, está sendo realizado um campeonato de futebol. Lá o rank funciona assim: para cada jogo o campeão ganha dois pontos e o perdedor não ganha nenhum; em caso de empate cada time recebe um ponto. O campeão é o time com o maior número de pontos. Cada par de times diferentes disputam uma partida um contra o outro um número igual de vezes, chamado de número correspondente. Você tem seu time favorito, seu time dos sonhos, e você pondera se é possível o seu time ser o campeão. Você sabe o número de times, o número correspondente e o resultado de alguns jogos que já foram jogados. Escreva um programa que informe se ao fim do campeonato seu time poderá ser o único campeão, extritamente com mais pontos que qualquer outro time."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1677",
        "saida": "Para cada caso a saída de teste imprima a base do grafo especificado em uma única linha. Para este fim, imprima os números de todos os nós que são bases na ordem de classificação, separadas por um único caractere de espaço. Se a base estiver vazia, imprima uma linha vazia.",
        "entrada": "A entrada contém vários casos de teste, cada um dos quais corresponde a um grafo orientado G. Cada um caso de teste inicia-se com um número inteiro v, que denota o número de vértices de G = (V, E), em que cada vértice é identificado por um inteiro no conjunto V = {1, ..., v}. Você pode assumir que v(1 ≤ v ≤ 5000). Isto é seguido por um número e inteiro não negativo e, a partir daí, e pares de vértice identificadores v1W1, ..., veWe, com o significado de que (vi, Wi) ∈ E. Não há outras arestas além das especificadas por estes pares. O último caso de teste é seguido por um zero.",
        "titulo": "A Base de um Grafo",
        "descricao": "Usaremos as seguintes definições padrão de teoria dos grafos. Seja V um conjunto finito não vazio e, seus elementos sendo chamados vértices (ou nós). Seja E um subconjunto do produto cartesiano V × V, seus elementos sendo chamado bordas. Então G = (V, E) é chamado um grafo direcionado. Seja N um inteiro positivo, e P = (e1, ..., en) uma sequência de comprimento N de arestas, e ei ∈ E de modo que ei = (vi, vi +1) para uma seqüência de vértices (v1, ..., vn+1). Então P é caminho de vértice v1 ao vértice vn +1 em G e dizemos que vn +1 é acessível a partir de v1, escrevendo (v1 → vn +1). Aqui estão algumas novas definições. Um nó v em um grafo G = (V, E) é chamado de sorvedouro, se para cada nó W em G que é acessível a partir de v, v também é acessível a partir de W. A base de um grafo é o subconjunto de todos os nós que são sorvedouros, ou seja, base(G) = {v ∈ V | ∀w ∈ V: (v → W) ⇒ (W → v)}. Você tem que calcular base de certos grafos."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1442",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha contendo um caractere que descreve o que a prefeitura deve fazer para respeitar o decreto real após o fechamento da rua para reformas: '-': não é necessário qualquer tipo de alteração nas outras ruas. '*': é impossível respeitar o decreto real, independente de quaisquer mudanças nas outras ruas. '1': é possível cumprir o decreto real apenas invertendo as mãos de algumas das ruas de mão única. '2': é possível cumprir o decreto real, mas é necessário converter algumas ruas de mão única para mão dupla.",
        "entrada": "A entrada é composta por diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 103) e M (1 ≤ M ≤ 105), representando respectivamente o número de cruzamentos e o número de ruas da cidade. Os cruzamentos são identificados por inteiros de 1 a N e as ruas são identificadas por números inteiros de 1 a M. Cada uma das M linhas seguintes descreve uma rua e contém três inteiros A (1 ≤ A), B (B ≤ N) e T (1 ≤ T ≤ 2), onde A e B são os cruzamentos que a rua liga diretamente, e T indica a mão de direção da rua: se T = 1 a rua tem mão única na direção de A para B; se T = 2 a rua tem mão dupla. A primeira rua descrita será interditada para recuperação.",
        "titulo": "Desvio de Rua",
        "descricao": "A prefeitura de uma grande cidade da Nlogônia iniciou um programa de recuperação do asfalto de suas ruas. Na Nlogônia, cada rua liga diretamente dois cruzamentos, e pode ter mão única ou mão dupla. Por determinação de um antigo decreto real, sempre existe ao menos um caminho entre dois pontos quaisquer da cidade. No programa de recuperação, uma única rua será recuperada por vez, e para isso a rua será fechada para o tráfego. Esse fechamento pode causar caos no trânsito local ao violar o decreto real, impedindo vários cidadãos de voltarem para casa dos seus trabalhos e vice-versa. A prefeitura pode converter algumas das ruas de mão única em mão dupla, mas prefere evitá-lo pois ruas de mão dupla tendem a causar acidentes mais graves; a prefeitura prefere criar desvios apenas invertendo as mãos das ruas de mão única já existentes. O Rei da Nlogônia solicitou seus préstimos para escrever um programa que, dada a descrição das ruas de uma cidade, determine se, quando uma dada rua é interditada para recuperação, continua existindo um caminho entre quaisquer dois pontos da cidade, mesmo que seja necessário alterar as mãos de direção de outras ruas."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1925",
        "saida": "Imprima a linha e a coluna da cadeira que Ordan deve sentar separados por vírgula.",
        "entrada": "A primeira linha da entrada irá conter dois inteiros 1 ≤ l, c ≤ 103, que representam o número de linhas e de colunas do salão, respectivamente. Cada uma das próximas l linhas irá conter c caracteres. Os caracteres podem ser ('n','b','*').",
        "titulo": "Ordan e as Novinhas",
        "descricao": "Ordan está no grandioso Shopping de Campina Grande, ele vai participar de um evento de games e animes. Hoje é o primeiro dia do evento e a abertura já está prestes a acontecer, ela será no salão de palestras do Shopping. Algumas pessoas já estão acomodadas no salão, há muitos boe e muitas novinhas também, para a alegria de Ordan. Ele quer sentar em um lugar do salão em que haja o maior número de novinhas juntas, para ele poder aplicar nelas, é claro. O salão pode ser visto como um grid de 2 dimensões, e as cadeiras do salão são identificadas por um par de números inteiros, o número da linha e da coluna onde a mesma se encontra. Se houver ‘n’ na cadeira então é uma novinha que lá está sentada, se houver um ‘b’ então é um boe que lá está sentado, caso haja um ‘*’, então essa cadeira está vazia.     1 2 3 4 1  n n n n 2  b n * n 3  n b * b 4  b b n b Nesse exemplo, há duas cadeiras vazias, caso Ordan sente na cadeira (2, 3) ele estará perto de 6 novinhas que estão juntas, caso ele sente na cadeira (3, 3) ele estará perto de apenas uma novinha. Dessa forma, ele deve sentar na cadeira (2, 3). Sua tarefa é determinar qual a cadeira vazia que Ordan deve sentar para que ele esteja próximo do maior número de novinhas juntas, caso haja dois ou mais lugares que podem ser a resposta, escolha aquele que tem o menor número da linha, se ainda assim houver mais de uma cadeira que pode ser a resposta, escolha aquela que tenha o menor número da coluna. É garantido que sempre haverá pelo menos uma cadeira livre."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1773",
        "saida": "Se for possível visitar todas as salas deste castelo imprima a palavra “sim”, caso contrário imprima a palavra “nao”.",
        "entrada": "Haverá no máximo 70 casos de tests. Cada caso de teste inicia com dois inteiros N e M, indicando o número de salas e corredores do castelo (2 ≤ N ≤ 103, 1 ≤ M ≤ 104). Em seguida haverá M linhas contendo dois inteiros A e B cada, indicando que há um corredor que liga a sala A e B, o qual pode ser atravessado em ambas as direções (1 ≤ A, B ≤ N). Em seguida haverá N-1 inteiros k2, k3, …, kN, indicando que na sala ki você pode encontrar a chave que abre a sala i (1 ≤ ki ≤ N, para todo 2 ≤ i ≤ N). Note que não é dada a sala que contém a chave da sala 1, pois tal sala já está aberta. A entrada termina com final de arquivo (EOF).",
        "titulo": "Preso no Castelo",
        "descricao": "Você está preso em um castelo com N salas e M corredores. As salas são enumeradas com números entre 1 e N, e você inicialmente está na sala de número 1. Cada um dos M corredores liga duas salas distintas. Para tentar encontrar a saída você decidiu visitar todas as salas deste castelo. Todas estas salas, com exceção da sala de número 1 onde você está, precisam de uma chave para que possam ser visitadas. Para sua sorte, você encontrou algumas anotações no chão, dizendo onde estão todas estas chaves. Por exemplo, sejam S e D duas salas distintas do castelo, para visitar a sala D é preciso antes visitar a sala S que contém a chave que abre a sala D. Dadas as informacões sobre as salas, corredores e as posições das chaves, descubra se é possível visitar todas as salas do castelo."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1402",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma linha, contendo um valor real representando o tamanho da placa de madeira que Indiana Jones deve carregar. O tamanho deve ser impresso como um número real com 2 casas decimais, e o último valor decimal deve ser arredondado. A entrada não conterá casos de teste onde as diferenças de arredondamento são significativas.",
        "entrada": "Seu programa deve processar vários casos de teste. Cada caso de teste começa com um inteiro N indicando o número de porções de paredes restantes na cidade (2 ≤ N ≤ 1000). Cada uma das N linhas seguintes descrevem uma porção de parede. A primeira porção de parede é a porção em que Indiana Jones se localiza inicialmente. A segunda porção é aquela em que a pessoa presa se localiza. Cada descrição de porção de parede consiste de três inteiros X, Y e L (-10000 ≤ X, Y, L ≤ 10000), onde X e Y definem ou o ponto mais próximo do Sul (para porções verticais) ou o ponto mais próximo do Oeste (para porções horizontais). O valor de L determina o tamanho e a direção da porção: se L ≥ 0, a porção é horizontal, de comprimento L; se L < 0, a seção é vertical, com comprimento |L|. O final da entrada é indicado por N = 0.",
        "titulo": "Será Que Indiana Jones Chega Lá?",
        "descricao": "Indiana Jones está numa cidade deserta, aniquilada durante uma guerra. Os telhados de todas as casas foram destruídos e apenas alguns pedaços de parede ainda estão de pé. O solo tem tantas minas que a única maneira segura de se locomover pela cidade é andando sobre as poucas paredes restantes. A missão de nosso herói é salvar uma pessoa que está presa na cidade. Para se locomover entre duas paredes não conectadas Indiana Jones pensou em levar consigo uma placa de madeira, que ele poderia colocar entre as duas paredes e assim passar sobre a placa de uma para a outra. Fig. 1: Mapa da cidade com a rota usada por Indiana Jones As posições iniciais de Indiana Jones e da pessoa presa estão em algum ponto das paredes. Além disso, as paredes têm apenas a direção Norte-Sul (vertical) ou Oeste-Leste (horizontal). Você receberá um mapa com as ruínas da cidade. Sua missão é determinar o menor tamanho da placa de madeira que Indiana Jones precisa carregar para chegar à pessoa."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1482",
        "saida": "Para cada caso de teste, seu programa deverá produzir uma linha contendo o número máximo de museus que podem ser visitados durante a noite.",
        "entrada": "A entrada contém vários casos de testes. A primeira linha de um caso de teste contém um inteiro N, que indicará o número de museus participantes na promoção (1 ≤ N ≤ 20). Cada museu tem um identificador único variando de 1 a N. A segunda linha contém N inteiros indicando o tempo, em minutos, necessário para visitar cada museu, de 1 a N. Então, teremos mais N linhas descrevendo o tempo para ir de um museu para todos os outros. A i-ésima linha contém N inteiros Mk (1 ≤ k ≤ N) representando o tempo, em minutos, para ir de um museu i para um museu k. Assuma que o i-ésimo inteiro na i-ésima linha é igual a 0. O final da entrada é indicado por N = 0.",
        "titulo": "Noite no Museu",
        "descricao": "A cidade de Viena é chamada “cidade da cultura“ porque, entre outras coisas, abriga uma grande quantidade de museus, mais de 100. Como consequência, é muito difícil e caro visitar todos os museus, não importando o tempo que ficar na cidade. Entretanto, tem uma noite especial, chamada “Noite no Museu”, que se permite a visita a vários museus com apenas um ingresso, das 18:00h até a 01:00h da manhã do próximo dia. Porém, é impossível visitar todos os museus da cidade por duas razões principais. A primeira razão é que alguns museus em Viena não entram nessa promoção porque fecham às 17:00 h. A segunda razão é que não há tempo suficiente para visitar os museus, e TODOS os seus interiores, no tempo de 7 horas. Sua tarefa é construir um programa que dado o número de museus participantes, o tempo necessário para visitar cada museu e o tempo que leva para ir de um museu ao outro, encontre o melhor “tour” para os visitantes, ou seja, visitar o maior número de museus nessa noite."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1462",
        "saida": "Para cada instância imprima, em uma única linha, possivel se é possível que todos os membros da comunidade estejam falando a verdade, ou impossivel caso contrário.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 105). A segunda linha possui N inteiros, ai (0 ≤ ai ≤ 105), separados por um espaço em branco, correspondendo ao número de amigos que a pessoa i diz ter na comunidade.",
        "titulo": "Popularidade no Facebook",
        "descricao": "Hoje em dia todos estão conectados, participam do Facebook, publicam suas fotos no Instagram, seus vídeos no Youtube, e assim por diante. Até mesmo sistemas como GPS hoje se baseiam em redes sociais, tornando tudo mais divertido (e talvez mais difícil de entender, mas isso é outra conversa). Ser popular no Facebook é quase uma necessidade. Uma pessoa com menos de 700, 800 amigos pode ser considerado quase como um pária nessa nova realidade. Talvez por isso algumas pessoas costumam exagerar quando dizem o número de amigos que possuem. Considere uma comunidade com N pessoas, e para cada uma delas, considere que sabemos o número de amigos que cada pessoa diz ter na comunidade. Sua tarefa neste problema é determinar se de fato é possível que todos os membros da comunidade estejam falando a verdade. Lembre que uma pessoa não pode ser amiga de si mesma, e duas pessoas não podem ser amigas várias vezes."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1974",
        "saida": "Se não é possível satisfazer as condições da Pikachu S. A., imprima uma linha contendo unicamente a carinha :[. Senão, imprima duas linhas: a primeira contendo unicamente a carinha :]; e a segunda contendo três valores, representando respectivamente o número de estagiários necessários, o número de funcionários efetivos e o custo mínimo necessário para restaurar a infraestrutura.",
        "entrada": "A primeira linha da entrada contém dois inteiros, N e M (2 ≤ N ≤ 103, 0 ≤ M ≤ 105), os quais representam respectivamente o número de torres e o número de conexões na infraestrutura antiga, sendo cada conexão descrita numa das M linhas seguintes por dois inteiros, i e j (1 ≤ i, j ≤ N), os quais identificam as torres que eram conectadas. Por fim, a i-ésima das N últimas linhas da entrada descreve o código binário, de comprimento positivo não maior que 100, da torre i.",
        "titulo": "Além da Escuridão",
        "descricao": "E esta foi a 3ạ Maratona de Programação Júnior da UFFS! Esperamos sinceramente que você tenha se divertido! Se porventura você não conseguiu resolver algum problema, discuta-o depois com seus colegas e professores, estude os conteúdos que você ainda não domina, e encare o problema novamente. Todos os problemas desta competição estarão disponíveis no URI Online Judge assim que possível. Se você nunca havia participado de uma Maratona de Programação antes e gostou, venha participar do Clube de Programação para se aperfeiçoar, aprender mais e treinar! Mas antes de dizermos adeus, temos ainda mais uma tarefa para você. O oeste catarinense está na escuridão total, pois um tornado devastou a região. Antes, a infraestrutura elétrica da região era maravilhosa, de modo que duas torres de energia eram conectadas diretamente por cabos de energia se e somente se entre essas torres existia uma estrada. O tornado não danificou as estradas, apenas as torres e cabos de energia. De todas as empresas que se propuseram a restaurar a infraestrutura elétrica da região, a que apresentou a melhor proposta foi a Pikachu S. A. Para começar os trabalhos, a Pikachu S. A. exigiu do Governo algumas informações. Se essas informações não satisfizerem algumas condições, a Pikachu S. A. rescindirá o contrato e o Governo terá de contratar uma empresa, para nossa tristeza. A saber, as condições exigidas pela Pikachu S. A. são: A empresa não construirá nenhuma torre nova, apenas restaurará todas as torres antigas. A empresa não conectará duas torres por cabos de energia se essas torres não eram antes conectadas. A empresa fará apenas o mínimo de conexões entre torres necessário para que as torres estejam todas interconectadas, direta ou indiretamente, e gastará o mínimo possível de metros de cabeamento. Cada torre que for restaurada precisará receber um funcionário da Pikachu S. A. para monitorar a torre diariamente. Este funcionário pode ser um funcionário efetivo ou um estagiário. Se os funcionários que duas torres receberem forem estagiários, então deve existir uma estrada conectando as duas torres diretamente. Se os funcionários que duas torres receberem forem efetivos, então não deve existir uma estrada conectando as duas torres diretamente. O número de funcionários efetivos deve ser o menor possível. Uma curiosidade acerca da infraestrutura antiga é que a cada torre havia sido atribuído um código binário, de modo que a conexão entre duas torres, se existisse, custasse, em metros de cabeamento, exatamente o comprimento do maior subcódigo binário comum aos códigos de ambas as torres. Por exemplo, se os códigos de duas torres eram respectivamente 000011 e 001100, o custo da conexão entre essas duas torres era, e continua sendo, 4."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2088",
        "saida": "Para cada caso de teste imprima a distância mínima que João percorrerá, com duas casas decimais.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste terá um inteiro N (1 ≤ N ≤ 15),representando a quantidade de focos de mosquito no mapa. Segue uma linha contendo dois inteiros X e Y (−100 ≤ X, Y ≤ 100), representando a coordenada da casa de João. Em seguida terão N linhas, cada uma contendo dois inteiros X e Y (−100 ≤ X, Y ≤ 100), representando a coordenada de um foco de dengue. A entrada termina quando N = 0 e não deve ser processada.",
        "titulo": "Combate à Dengue",
        "descricao": "Depois que João descobriu que estava com dengue, ele ficou muito irritado. Como nos últimos dias ele não saiu de casa, o mosquito que o picou só podia ser de algum foco de dengue perto de sua casa. Foi então quando ele teve uma ideia. Assim que estiver um pouco melhor, João irá acabar com todos os focos de mosquitos que existem por perto de sua casa. Para realizar essa tarefa ele conseguiu um mapa, que pode ser visto como um plano cartesiano, onde sua casa e cada foco possuem uma coordenada distinta. Como a dengue é uma doença que deixa o corpo bem debilitado, João necessita de sua ajuda nessa tarefa. João gostaria de saber qual a distância total mínima que ele gastará para sair de sua casa, visitar todos os focos de dengue exatamente uma vez e voltar para casa. Você consegue ajudar João em sua missão?"
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1764",
        "saida": "Para cada caso de teste de entrada, seu programa deverá imprimir um único valor, indicando a soma de todas as distâncias ou rotas existentes no seu mapa.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém dois inteiros, M (2 ≤ M < 40000) e N (1 ≤ N < 50000), que indicam respectivamente a quantidade de cidades e a quantidade de caminhos existentes ligando estas cidades. A entrada é terminada por M = N = 0. Seguem N conjuntos de três valores X (0 ≤ X), Y (Y < M) e Z (1 ≤ Z ≤ 999), especificando que há uma rota bidirecional entre X e Y com distância de Z kilômetros, sendo que X ≠ Ye a soma total de todas as rotas de cada mapa é menor do que 231.",
        "titulo": "Itinerário do Papai Noel",
        "descricao": "Antes de Papai Noel começar a fazer as suas viagens de trenó pelo Brasil para entregar os presentes de Natal, ele solicitou que você o ajudasse a desenhar um mapa com todas as cidades que deverá visitar. A regra para desenhar este mapa é a seguinte: a soma de todas rotas (distâncias entre duas cidades) existentes no mapa deve ser a menor possível e deve-se poder chegar em qualquer cidade, independente de onde se esteja partindo. Noel não se importa de passar por uma determinada cidade mais de uma vez, contanto que ele utilize apenas as rotas desenhadas no mapa."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1469",
        "saida": "Para cada instrução de pergunta seu programa deve imprimir uma linha contendo um único inteiro, a idade da pessoa mais jovem que gerencia (direta ou indiretamente) o empregado nomeado na pergunta. Se o empregado nomeado não possui um gerente, imprima o caractere ‘*’ (asterisco).",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto de várias linhas. A primeira linha contém três inteiros N (1 ≤ N ≤ 500), M(0 ≤ M ≤ 60 × 103) e I(1 ≤ I ≤ 500), indicando respectivamente o número de empregados, o número de relações de gerência direta e o número de instruçõoes. Empregados são identificados por números de 1 a N. A segunda linha contém N inteiros Ki(1 ≤ Ki ≤ 100, para 1 ≤ i ≤ N), onde Ki indica a idade do empregado de número i. Cada uma das M linhas seguintes contém dois inteiros X e Y(1 ≤ X, Y ≤ N, X != Y) , indicando que X gerencia Y diretamente. Seguem-se I linhas, cada uma descrevendo uma instrução. Uma instruçãao de troca de gerência é descrita em uma linha contendo o identificador T seguido de dois inteiros A e B(1 ≤ A,B ≤ N), indicando os dois empregados que devem trocar seus lugares na cadeia de comando. Uma instrução de pergunta é descrita em uma linha contendo o identificador P seguido de um inteiro E(1 ≤ E ≤ N), indicando um empregado. A última instrução será sempre do tipo pergunta. O final da entrada é determinado por EOF (fim de arquivo).",
        "titulo": "Chefe",
        "descricao": "Todos conhecem Iks, a última moda em redes sociais, que fez tanto sucesso que competidores como Facebook e Google+ estão começando a ter dificuldades financeiras. Assim como muitas companhias “.com”, Iks surgiu em uma pequena garagem, mas hoje emprega milhares de pessoas no mundo todo. O sistema de gerência utilizado em Iks é bem diferente do padrão. Por exemplo, não há diretorias ou superintendências. No entanto, como é usual em outras companhias, há uma cadeia (ou melhor, várias cadeias) de comando: uma pessoa pode gerenciar outras pessoas, e pode ser gerenciada por outras pessoas. As figuras abaixo mostra a cadeia de comando para alguns empregados, junto com suas idades. Uma pessoa P1 pode gerenciar outra pessoa P2 diretamente (quando P1 é o superior imediato de P2) ou indiretamente (quando P1 gerencia diretamente uma pessoa P3 que gerencia P2 direta ou indiretamente). Por exemplo, na figura (a) acima, Alice gerencia David diretamente e Clara indiretamente. Uma pessoa não gerencia a si própria, nem direta nem indiretamente. Um folclore que apareceu em Wall Street é que Iks é tão bem sucedido porque em sua rede de comando um(a) gerente é sempre mais jovem do que as pessoas que ele(a) gerencia. Como podemos ver na figura acima, isso não é verdade. Mas esse folclore incentivou Iks a desenvolver uma ferramenta para analisar o seu sistema de gerenciamento, e estudar se tem alguma influência no sucesso da empresa. Você foi contratado para trabalhar nessa ferramenta. Dadas a descrição da cadeia de comando na Iks e as idades de seus empregados, escreva um programa que execute uma série de instruções. Instruções podem ser de dois tipos: trocas de gerência e perguntas. Uma instrução de troca de gerência faz dois empregados A e B trocarem suas posições na cadeia de comando. Como exemplo, a figura (b) acima mostra a cadeia de comando resultante quando David e George trocam suas respectivas posições na cadeia de comando. Uma instrução de pergunta identifica um empregado A e deseja saber a idade do mais jovem gerente (direto ou indireto) de A na cadeia de comando. Por exemplo, no cenário da figura (a) acima a idade do(a) gerente mais jovem de Clara é 18 anos; já no cenário da figura (b), a idade do(a) gerente mais jovem de Clara é 21 anos."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2073",
        "saida": "Para cada instância imprima uma linha contendo um único inteiro, o número máximo de itens que você pode comprar.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha da entrada contém um inteiro T indicando o número de instâncias. A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 100000), indicando o número de vendedores no mercado. Cada uma das próximas N linhas contém dois inteiros cada, xi e yi (1 ≤ xi, yi ≤ 1 000), indicando as coordenadas da barraca em que o i-ésimo vendedor trabalha. Os vendedores estão listados em ordem de idade, do mais novo para o mais velho. Dois ou mais vendedores podem dividir uma mesma barraca. Nesse caso você pode negociar (ou deixar de negociar) com eles em qualquer ordem. Ir para o norte significa aumentar o valor de y e ir para o leste significa aumentar o valor de x. Todas as barracas se encontram dentro do mercado.",
        "titulo": "Mercado do Cairo",
        "descricao": "A sua equipe já está fazendo planos para a visita ao Egito. Um dos locais que querem conhecer é o famoso mercado do Cairo. Para economizar tempo, vocês decidiram que vão entrar pela porta no canto sudoeste do mercado e sair pela porta no canto nordeste. Além disso, vocês vão caminhar sempre em direção à saída, ou seja, só vão se deslocar para o norte ou para o leste. Os vendedores egípcios tem uma regra peculiar. Se você comprar algo de um deles, só poderá comprar novamente de um outro vendedor que seja mais velho. A punição por desrespeitar essa regra é perder uma mão. É claro que isso pode prejudicar sua equipe na final do ICPC. Por este motivo, você acha melhor seguir as tradições locais. Como não é nada elegante dar o mesmo tipo de lembrança para todos seus amigos, você decidiu que, além de seguir as regras do mercado, vai comprar no máximo uma lembrança de cada vendedor. Isto lhe ajudará a ter uma boa variedade de presentes. O mercado é bem organizado. Os vãos onde as barracas podem ser colocadas possuem a mesma altura e largura. Cada vão é identificado por uma coordenada (x,y) que indica a coluna e linha do mercado que ele se encontra. De uma vista aérea é possível perceber que todos os vãos estão organizados como um quadriculado. As barracas do mercado foram montadas apenas em vãos válidos (e respeitam rigorosamente as medidas do vão). Estando em uma barraca é possível ir para as barracas que ficam estritamente ao norte, ao leste e a nordeste. Sabendo a idade dos vendedores e a posição da barraca onde cada um trabalha, determine o número máximo de itens que você pode comprar."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1954",
        "saida": "Seu programa deve imprimir uma linha contendo um único número inteiro, o qual representa o número de caminhos evolucionários possíveis da espécie à qual pertence o indivíduo S para a espécie à qual pertence o indivíduo T. Como esse número pode ser muito grande, seu programa deve apenas imprimir o resto que esse número deixa quando dividido por 109 + 7.",
        "entrada": "A primeira linha da entrada consiste de 4 inteiros, N, M, S e T (1 ≤ N ≤ 105, 0 ≤ M ≤ 106, 1 ≤ S, T ≤ N), sendo N o número de indivíduos fossilizados, designados pelos inteiros de 1 a N, cujos códigos genéticos foram obtidos por Laura. Cada uma das próximas M linhas consiste de 2 inteiros, A e B (1 ≤ A, B ≤ N), representando que o programa de Laura considera o indivíduo A um possível pai genético de B.",
        "titulo": "Caminhos Evolucionários Possíveis",
        "descricao": "— Já que a senhora é bióloga, poderia nos definir o conceito de ‘espécie’? — Senhora, senhora, volta aqui! Laura é uma bióloga muito interessada em Computação. Recentemente ela escreveu um programa que, dados os códigos genéticos de dois indivíduos A e B, decide se A é um possível pai genético de B, o que significa que não há nada nos códigos genéticos de ambos os indivíduos que nos permita afirmar com certeza que B não foi gerado por A. Note que, se A é um possível pai genético de B, isso não significa que B seja da mesma espécie que A, pois pode ter ocorrido uma mutação durante a geração de B. Naturalmente, dizemos que um indivíduo A é um possível ancestral genético de um indivíduo B se existe uma sequência de k indivíduos I1, I1, …, Ik tais que I1 = A, Ik = B e, para todo j ∈ {1, …, k - 1}, Ij é um possível pai genético de Ij + 1. Laura está estudando os fósseis encontrados mês passado em Chapecó para determinar, através dos códigos genéticos extraídos, as espécies que habitavam a região. Mas o conceito de ‘espécie’ é muito polêmico. Laura, que não quer viver situações como a da senhora da imagem acima, preferiu adotar a seguinte definição: dois indivíduos A e B pertencem à mesma espécie se e somente se A é um possível ancestral genético de B e B é um possível ancestral genético de A. O diagrama abaixo ilustra uma situação com 7 indivíduos fossilizados, em que um arco de um indivíduo A para um indivíduo B representa que A é um possível pai genético de B. No exemplo, podemos identificar 3 espécies: I, II e III. Dados as informações fornecidas pelo programa de Laura, ajude-a a calcular o número de caminhos evolucionários possíveis da espécie de um indíviduo S para a espécie de um indivíduo T. Um caminho evolucionário possível de uma espécie E1 para uma espécie Ek é uma sequência de k espécies E1, E2, …, Ek tal que, para todo j ∈ {1, …, k - 1}, existe algum indivíduo B da espécie Ij + 1 que tem um possível pai genético da espécie Ij."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1194",
        "saida": "Para cada conjunto de entrada, você deve imprimir uma linha contendo o percurso posfixo da corrente árvore.",
        "entrada": "A primeira linha de entrada contém um número positivo C (C ≤ 2000), que indica o número de casos de teste. Seguem C linhas, uma para cada caso de teste. Cada caso de teste inicia com um número N (1 ≤ N ≤ 52), o número de nodos da árvore binária. Depois haverá duas strings S1 e S2 que descrevem o percurso prefixo e infixo da árvore. Os nodos da árvore são nomeados com diferentes caracteres dentro do intervalo a..z e A..Z. O valor de N, S1 e S2 são separados por um espaço em branco.",
        "titulo": "Prefixa, Infixa e Posfixa",
        "descricao": "Um problema comum em estrutura de dados é determinar o percurso transversal de uma árvore binária. Há tres formas clássicas de fazer isto: Prefixa: Você deve visitar a raiz, sub-árvore esquerda e sub-árvore direita. Infixa: Você deve visitar a sub-árvore esquerda, a raiz e a sub-árvore direita. Posfixa: Você deve visitar a sub-árvore esquerda, a sub-árvore direita e a raiz. Veja a figura abaixo: O percurso prefixo, infixo e posfixo são, respectivamente ABCDEF, CBAEDF and CBEFDA. Neste problema, você deve computar a forma posfixa da árvore dados os percursos infixo e prefixo"
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1525",
        "saida": "Para cada caso de teste deverá ser impressa uma linha, contendo a palavra “Sim” caso seja possível posicionar o personagem em uma das células da borda do mapa de tal forma que ele seja guiado até a célula de destino, fazendo no máximo K inversões de setas, ou “Nao” caso contrário.",
        "entrada": "Haverá diversos casos de teste. Cada caso de teste inicia com três inteiros N, M e K (3 ≤ N, M < 100, 0 ≤ K ≤ 100, N e M são ímpares), representando, respectivamente, a quantidade de linhas e a quantidades de colunas do mapa, e o número máximo de inversões permitidas. A seguir haverá N linhas, cada uma contendo M caracteres, que representarão o mapa que Rafael desenhou. O caractere da linha i e coluna j indica que na célula [i, j] do mapa há: '>' – Uma seta apontando para a Direita. '<' – Uma seta apontando para a Esquerda. '^' – Uma seta apontando para a Cima. 'v' – Uma seta apontando para a Baixo. 'x' – A célula de destino (a qual estará sempre no centro do mapa). O último caso de teste é identificado quando N = M = K = 0, o qual não deve ser processado.",
        "titulo": "Gruntz",
        "descricao": "Rafael gostava tanto de um jogo que jogava quando criança, que decidiu desenhar um mapa com as características do jogo e ver se conseguia completá-lo. O mapa consiste de N linhas e M colunas, que divide o mapa em uma grade de N * M células. Cada uma dessas células, com exceção da célula central, contém uma seta desenhada, que indica para uma de quatro direções – Esquerda, Cima, Direita ou Baixo. O objetivo do jogo é posicionar o personagem em alguma das células que constituem a borda do mapa, e fazer que o mesmo chegue até o centro do mapa, marcado com um x. As regras para se mover no jogo seguem a lógica das setas: O personagem só pode mover na direção que a seta aponta. Ou seja, se o personagem está na célula [x, y] (linha x, coluna y), e nesta célula há uma seta apontada para a direita, a única célula que ele poderá alcançar dali será a célula [x, y+1], caso a mesma esteja dentro dos limites do mapa (caso não esteja, ele sairá do mapa, e perde o jogo). Para facilitar, Rafael decidiu que ele poderia fazer K inversões de setas. Ao inverter uma seta, a mesma passa a apontar a direção oposta a qual ela apontava. Ou seja, se ela apontava para a Direita, ela apontará para a Esquerda, e vice-versa. O mesmo vale para Cima e Baixo. Rafael agora pediu sua ajuda: É possível posicionar o personagem em alguma borda do mapa, e fazer com que ele chegue até a célula central, fazendo no máximo K inversões de setas?"
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1671",
        "saida": "Para cada caso de teste especificado pela saída n, uma linha que contém uma sequência de 10n + n - 1 dígitos que contém cada sequência de n dígitos exatamente uma vez.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é especificado por um número inteiro n. Você pode assumir que 1 ≤ n ≤ 6. O último caso de teste é seguido por um zero.",
        "titulo": "Código",
        "descricao": "KEY Inc., empresa líder em hardware de segurança, desenvolveu um novo tipo de seguro. Para desbloqueá-lo, você não precisa de uma chave, mas é necessário que você digite o código de n dígitos correto em um teclado (como se isso fosse algo novo!). Existem vários modelos disponíveis, de cofres de brinquedo para crianças (com um código de 2 dígitos) para a versão militar (com um código de 6 dígitos). O cofre se abrirá assim que o último dígito do código correto for digitado. Não há nenhuma tecla \"enter\". Quando você entra com mais de n dígitos, somente os n últimos dígitos são significativos. Por exemplo (na versão de 4 dígitos), se o código correto é 4567, e você pretende entrar com a sequência de dígitos 1234567890, a porta será aberta assim que você pressionar a tecla 7. O software para criar esse efeito é bastante simples. Na versão com n dígitos do cofre a chave está sempre em um dis 10n-1 estados internos. O estado atual do seguro representa simplesmente os últimos n-1 dígitos que foram inseridos. Um desses estados (no exemplo acima, o estado 456) é marcado como o estado desbloqueado. Se o cofre estiver no estado desbloqueado e, em seguida, a tecla correta (no exemplo acima, 7) é pressionado, a porta é aberta. Caso contrário, o estado muda para o novo estado correspondente. Por exemplo, se o seguro está em estado de 456 e, em seguida, você pressionar 8, o seguro entra em estado 568. Uma estratégia trivial para abrir o cofre é introduzir todos os códigos possíveis, um após o outro. No pior dos casos, no entanto, isto vai exigir n * 10n teclas. Ao escolher uma sequência boa de dígitos, é possível abrir o cofre em, no máximo, 10n + n - 1 teclas. Tudo que você tem a fazer é encontrar uma sequência de dígitos que contém todas as sequência s de n dígitos exatamente uma vez. KEY Inc. afirma que para a versão militar (n = 6) os computadores mais rápidos disponíveis hoje precisaria de bilhões de anos para encontrar uma tal sequência - mas, aparentemente, eles não sabem do que alguns programadores são capazes."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1506",
        "saida": "Imprima T linhas, uma para cada caso de teste. Se Rabito tem uma estratégia que irá garantir a sua vitório imprima \"Yes\", caso contrário imprima \"No\".",
        "entrada": "A primeira linha contém um único inteiro T (T <= 100) que representa a quantidade de casos de teste descritas a seguir. Um caso de teste inicia com uma linha contendo dois inteiros N, M (1 <= N <= 100, 1 <= M <= 2000) que denotam o número de vértices e arestas do grafo, em seguida há M linhas, cada uma com três inteiros u, v, w (1 <= u, v <= N) (0 < w <= 1000000) que representam os vértices da n-ésima aresta e seus pesos. Segue uma linha com dois inteiros K (0 < K <= 1000) e P (0 < P) denotando o número de ossos inicialmente colocados no grafo e o parâmetro P descrito na expecificação do problema. Finalmente uma única linha contendo K inteiros descreventos as posições iniciais dos K ossos.",
        "titulo": "Rabito e Bones",
        "descricao": "Rabito e Rayito estão jogando um jogo legal. Eles começam com um grafo conexo bidirecional com pesos (todos os pesos são positivos) e um conjunto de K ossos colocados em alguns dos vértices. Eles começam se revezando com Rabito jogando por primeiro. O jogo consiste em deslocar os ossos através do grafo até o vértice 1. Em sua vez, um dos jogadores pega um subconjunto de pelo menos 1 e no máximo P dos ossos (que não atingiram o vértice 1) e move estes ossos através de uma ou mais das arestas do grafo (os movimentos dos ossos são independentes uns do outros) sujeito a esta condição: ele pode usar uma aresta específica para um osso se, eventualmente, o osso atingir o vértice 1 usando o mínimo possível de tempo (leva A unidades de tempo para mover um osso através de uma aresta de peso A) e se a aresta faz com que este osso, eventualmente, atinja o vértice 1 com a maior quantidade de arestas. Há um osso enorme esperando o vencedor do jogo, assim que sua tarefa é decidir qual dos dois cães vai triunfar neste jogo e ter uma boa refeição (assumindo que ambos os cães jogam com uma estratégia ideal). O perdedor do jogo é, obviamente, o cão que não se pode fazer um movimento."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1749",
        "saida": "Apresente uma linha com um inteiro que representa o número mínimo de pontos que um subconjunto pode ter em uma boa separação.",
        "entrada": "A primeira linha contém um número inteiro N (1 ≤ N ≤ 5 × 104) que representa o número de pontos no conjunto. Cada uma das próximas N linhas descreve um ponto diferente, com dois inteiros X e Y (1 ≤ X, Y ≤ 5 × 105), indicando as suas coordenadas, em anos-luz. Não há pontos coincidentes, e o conjunto admite pelo menos uma boa separação.",
        "titulo": "Colisão Galática",
        "descricao": "A galáxia de Andrômeda está prevista para colidir com a nossa Via Láctea, em cerca de 3,8 bilhões de anos. A colisão será, provavelmente, uma fusão das duas galáxias, sem duas estrelas, na verdade, colidindo. Isso porque a distância entre as estrelas em ambas as galáxias é tão grande. Professor Andrew está construindo um modelo computacional para prever os possíveis resultados da colisão e precisa de sua ajuda! Um conjunto de pontos nos dois plano dimensional é dada, representando estrelas em uma determinada região das galáxias já incorporadas. Ele não sabe quais estrelas vieram originalmente de qual galáxia; mas ele sabe que, para esta região, se duas estrelas vieram da mesma galáxia, então a distância entre elas é maior do que 5 anos-luz. Uma vez que cada estrela nesta região veio ou de Andrômeda ou da Via Láctea, o professor também sabe que um dado conjunto de pontos pode ser separado em dois subconjuntos disjuntos, um compreendendo as estrelas de Andromeda e outro as estrelas da Via Láctea, ambos subconjuntos com a propriedade de que a distância mínima entre dois pontos no subconjunto é maior do que 5 anos-luz. Ele chama isso de uma boa separação, mas a má notícia é que pode haver diversas boas separações. Contudo, entre todos as possíveis boas separações existe um número mínimo de estrelas que um subconjunto deve conter, e este é o número que o seu programa tem de calcular. Por exemplo, a figura ilustra um dado conjunto de seis pontos. Professor Andrew não pode dizer que as estrelas vieram de Andromeda, mas note que há quatro possíveis boas separações: {{1, 2, 4, 5}, {3, 6}}; {{1, 2, 3, 4}, {5, 6}}; {{1, 4, 5}, {2, 3, 6}}; {{1, 3, 4}, {2, 5, 6}}. Portanto, pelo menos duas estrelas devem ter vindo de Andrômeda, uma vez que este é o número mínimo de pontos que um subconjunto pode ter em uma boa separação."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1757",
        "saida": "Para cada caso de teste imprima uma única linha contendo o inteiro que representa a menor quantidade de rotas visíveis que Donkey deverá usar.",
        "entrada": "A primeira linha da entrada conterá um inteiro T (1 ≤ T ≤ 100) indicando o número de casos de teste. A primeira linha de cada caso de teste contém os inteiros N (1 ≤ N ≤ 100) e V (0 ≤ V < N2/2), a quantidade de cidades e a quantidades de rotas visíveis do solo, respectivamente. As próximas V linhas conterão os inteiros Ai e Bi (Ai ≠ Bi; 0 ≤ Ai, Bi < N) , indicando que a rota entre os barris das cidades Ai e Bi​ encontra-se visível do solo. Em nenhum caso de teste o par Ai, Bi aparecerá mais que uma vez.",
        "titulo": "Viagem Barril",
        "descricao": "Donkey Kong tem alguns assuntos pendentes a resolver ao redor do país e como está com muita pressa, optou por se deslocar de um local à outro através do SUTVB (Sistema Unificado de Transporte Via Barril). Cada uma das cidades possui um único barril que consegue disparar para o barril de qualquer outra cidade que o \"passageiro\" desejar ir. Donkey quer fazer uma viagem discreta e pediu sua ajuda para encontrar um conjunto de rotas que minimize a quantidade de disparos em que ele é visto. O conjunto de rotas que Donkey deseja encontrar depende do posicionamento das nuvens. Como mostra a figura acima, os barris ficam imediatamente acima das nuvens. O plano de Donkey é utilizar as nuvens para esconder seu trajeto. Pra facilitar seu trabalho, Donkey te emprestou um radar que mostra quais rotas podem ser visualizadas do solo em um dado momento. Sua tarefa é dizer a Donkey qual a menor quantidade de rotas visíveis que ele precisará usar de modo que consiga chegar a qualquer cidade que deseje. Cada rota é considerada apenas uma vez na contagem, independente da direção em que for usada. Em outras palavras, Se a rota A-B é visível e ele usar 10 vezes essa rota, só será contabilizado como 1 rota visível."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1733",
        "saida": "Para cada caso de teste, você deve imprimir na primeira linha, “Test Case #.”, indicando o número do caso de teste. Na linha seguinte você deve imprimir “Vladimir needs # litre(s) of blood.” indicando quantos litros de sangue ele necessita para realizar a(s) rota(s) ou “There is no route Vladimir can take.” caso não exista rota(s) válida(s).",
        "entrada": "A primeira linha da entrada contém um único número que diz a quantidade de casos de testes. A segunda linha começa com um único número que diz quantas especificações de rotas haverá seguir, ou seja, quantas conexões, válidas ou não, serão feitas até o seu destino. As linhas seguintes indicam as rotas (conexões entre duas cidades). Cada rota consiste nos nomes de duas cidades, a hora de partida e tempo total de viagem. Os tempos são em horas. Note que, Vladimir não pode usar as rotas que partem antes das 18h ou cheguem depois das 6h. Haverá no máximo 100 cidades, e menos do que 1000 conexões. Nenhuma conexão demora menos que 1 hora ou mais que 24 horas. Lembre-se, Vladimir tem no máximo 12 horas para realizar cada trajetoria, entre o anoitecer e o amanhecer. Todos os nomes de cidades devem ser menores que 32 caracteres. A última linha de cada caso de teste contém dois nomes de cidades. O primeiro nome é a cidade de partida de Vladimir, o segundo é o nome do destino.",
        "titulo": "Vladimir o Vampiro",
        "descricao": "Vladimir tem a pele branca, dentes muito longos e tem 600 anos, mas isso não é problema, porque Vladimir é um vampiro. Vladimir nunca teve qualquer problema por ser um vampiro. Na verdade, ele é um médico bem sucedido no turno da noite, e tem feito muitos amigos entre os colegas. Ele tem um truque muito impressionante, que sempre mostra em jantares. Ele pode dizer o grupo sanguíneo de uma amostra de sangue apenas pelo seu gosto. Vladimir adora viajar, mas por ser um vampiro, ele passa por três problemas sempre que vai viajar: Primeiro, ele só pode viajar de trem, porque ele tem que levar seu caixão com ele. Mas viaja sempre de primeira classe, pois tem investido muito dinheiro em ações de longo prazo. Segundo, ele só pode viajar do anoitecer até o amanhecer, ou seja, das 6 da noite até às 6 da manhã. Durante o dia, ele tem que ficar dentro da estação de trem. Terceiro, ele tem que ter algo para comer com ele. Ele precisa de um litro de sangue por dia, que ele bebe ao meio-dia, 12:00, dentro de seu caixão. Você deve ajudar Vladimir encontrar rotas mais curtas entre duas cidades, para que ele possa viajar com uma quantidade mínima de sangue, pois do contrário, as pessoas podem acabar fazendo perguntas, como, “O que você vai fazer com todo esse sangue?”."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1085",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir um único inteiro, o comprimento da menor seqüência que satisfaça as restrições de Joãozinho, ou impossivel (em minúsculas, sem acento) caso não seja possível.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém um inteiro M (1 ≤ M ≤ 2000), representando o total de palavras compiladas por Joãozinho. A segunda linha contém duas cadeias de caracteres distintas O e D, separadas por um espaço em branco, indicando os idiomas de origem e destino respectivamente. Cada uma das M linhas seguintes contém três cadeias de caracteres I1, I2 e P, separadas por um espaço em branco, representando dois idiomas e uma palavra comum entre ambos (I1 e I2 são sempre diferentes). Todas as cadeias de caracteres terão tamanho mínimo 1 e máximo 50 e conterão apenas letras minúsculas. Um mesmo par de idiomas pode ter várias palavras diferentes associadas a ele, porém uma mesma palavra P nunca será repetida. O final da entrada é indicado por uma linha que contém apenas um zero.",
        "titulo": "Babel",
        "descricao": "Joãozinho e Mariazinha são dois irmãos que estão muito empolgados com suas aulas de idiomas, cada um está fazendo vários diferentes cursinhos. Ao chegar em casa comentam sobre gramática, vocabulário, cultura dos países etc. Numa dessas conversas perceberam que algumas palavras são comuns a mais de um idioma, mesmo que não necessariamente tenham o mesmo significado. Por exemplo, “amigo” existe em português e espanhol e tem o mesmo significado, enquanto que “date” é uma palavra comum entre francês e inglês mas que pode ter significados diferentes, uma vez que “date” também se refere a um encontro em inglês, além de “data” de calendário. Já “red” em espanhol se refere a uma rede, enquanto que em inglês se refere à cor vermelha. Outro exemplo seria “actual” que, em inglês significa algo real e, em espanhol, tem o significado de presente, atual (como em português). Empolgados com essas descobertas, resolveram escrever num caderno todas as palavras em comum que conseguiram pensar, associando cada uma a um par de idiomas. Observador como é, Joãozinho propˆos um desafio a Mariazinha: dados um idioma de origem e um de destino, escrever uma série de palavras sendo que a primeira necessariamente deveria pertencer ao idioma de origem e a última ao de destino. Duas palavras adjacentes nessa seqüência deveriam necessariamente pertencer a um mesmo idioma. Por exemplo, se o idioma de origem fosse português e o de destino francês, Mariazinha poderia escrever a seqüência amigo actual date (português/espanhol, espanhol/inglês, inglês/francês). Para a surpresa de Joãozinho, Mariazinha conseguiu resolver o problema com muita facilidade. Irritado com o sucesso de sua irmã, ele resolveu complicar ainda mais o problema com duas restrições: Mariazinha deve encontrar a solução que tenha o menor comprimento da seqüência total não contando os espaços entre as palavras e duas palavras consecutivas não podem ter a mesma letra inicial. Sendo assim, a solução anterior passa a ser inválida, pois “amigo” e “actual” têm a mesma letra inicial. é possível, porém, encontrar outra solução, que no caso seria amigo red date, cujo comprimento total é 12. Joãozinho fez uma extensa pesquisa na internet e compilou uma enorme lista de palavras e desafiou Mariazinha a resolver o problema. Como é possível que haja mais de uma solução, ele pediu para que ela apenas respondesse o comprimento da seqüência encontrada dadas as restrições ou se não há solução possível. Você seria capaz de ajudar Mariazinha?"
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1328",
        "saida": "Para cada caso de teste seu programa deve imprimir uma linha, contendo um inteiro representando o valor a ser deduzido do cartão GoEasy do viajante.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros Z e S, que indicam, respectivamente, o número de zonas (1 ≤ Z ≤ 30) e o número de estações de trem/ônibus na cidade (1 ≤ S ≤ 100). Cada estação tem um único número de identificação variando de 1 a S, e cada estação pertence exatamente a uma zona. Cada uma das seguintes Z linhas descreve as centrais pertencentes a uma zona. A descrição de uma zona começa com um K inteiro que indica o número de estações (1 ≤ K ≤ S) na zona, seguido de K inteiros representando as estações na zona. Depois disso vem uma linha com dois números inteiros T e B, representando, respectivamente, o número de itinerários de trem (1 ≤ T ≤ 50) e o número de itinerários de ônibus (1 ≤ B ≤ 50). Em seguida, vem T linhas descrevendo itinerários de trem, seguido por B linhas descrevendo itinerários de ônibus. A descrição de cada itinerário é composto de uma linha contendo L um inteiro que indica o número de estações (2 ≤ L ≤ S) no itinerário, seguido por L inteiros especificando a seqüência de estações no itinerário. Finalmente, vem uma linha com dois inteiros X e Y (1 ≤ X ≤ S, 1 ≤ Y ≤ S e X ≠ Y), especificando que o cliente viajou da estação X para a estaçãoY. O final da entrada é indicado por Z = S = 0.",
        "titulo": "Vá com Calma",
        "descricao": "O prefeito de uma cidade pretende introduzir um novo sistema de transporte para simplificar a vida de seus habitantes. Isso será feito através da utilização de um cartão de débito, que o prefeito nomeou \"GoEasy\". Há dois meios de transporte na cidade: trens e ônibus. O sistema de trem é \"baseado em zonas\", enquanto o sistema de ônibus é \"baseado em jornadas\". A tarifa para a viagem é calculada como segue: Primeiramente há uma taxa de duas unidades monetárias para entrar no sistema de transporte, independentemente do meio inicial de transporte. Quando viajar de trem um cliente paga quatro unidades monetárias para cada mudança de zona. Ao viajar de ônibus a cliente paga uma unidade monetária a cada vez que ele/ela embarca num ônibus. Um mapa do sistema de transporte irá proporcionar informações sobre as estações pertencentes a cada zona, e a seqüência de estações para cada itinerário de ônibus e trem. Ônibus e trens se movem em ambas as direções em cada itinerário, e nenhum trem ou ônibus passa pela mesma estação duas vezes durante uma única viagem através de um itinerário. É sempre possível ir de qualquer estação a qualquer outra estação usando trens e/ou ônibus. As regras para as tarifas de computação são rígidas: se durante uma viagem de trem um cliente entra em uma determinada zona duas vezes, ele/ela é cobrado(a) duas vezes, da mesma forma, se durante uma viagem de ônibus o cliente utiliza duas vezes o ônibus para o mesmo itinerário, ele/ela é cobrado(a) duas vezes. ​ No mapa do transporte acima um cliente pode viajar da estação 2 para a estação 4 pagando apenas duas unidades monetárias, usando a linha T1, uma vez que elas estão na mesma zona. Mas se o cliente precisa ir da estação 2 à 5, então o melhor é tomar o ônibus B3 para a estação 10 e, em seguida, tomar o ônibus B2 para a estação 5, pagando um total de quatro unidades monetárias. Ao invés de rastrear toda a viagem de cada passageiro, a idéia do prefeito é que máquinas sejam colocadas em todas as estações, e os viajantes devem passar seu cartão pessoal GoEasy apenas no começo e término de toda a viagem. Uma vez que todas as máquinas são interligadas em rede, com base na saída e entrada do sistema de estações, pode-se calcular o custo mínimo possível para a viagem, e qual o valor será cobrado do cartão de débito do viajante. Tudo o que falta é um sistema de computador para fazer os cálculos para a tarifa a ser deduzida. Assim, dado o mapa do sistema de transporte na cidade, você deve escrever um programa para calcular a tarifa mínima que o cliente deve pagar para viajar entre duas paradas/estações dadas."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "2085",
        "saida": "Imprima uma única linha contendo um número inteiro, que representa o nível máximo de alternativas para um caminho da casa de Chapeuzinho Vermelho para a casa de sua avó.",
        "entrada": "A primeira linha contém dois números inteiros N e S, que indicam, respectivamente, o número de clareiras e o número de caminhos na floresta (3 ≤ n ≤ 3 × 104 e 2 ≤ S ≤ 105). As clareiras são identificadas por diferentes números inteiros entre 1 e N, e são ordenadas de oeste para leste, de modo que se 1 ≤ i < j ≤ N, então a clareira i está a oeste da clareira j. A casa da Chapeuzinho Vermelho é na clareira 1, enquanto a casa de sua avó está na clareira N. Cada uma das S seguintes linhas descrevem um caminho utilizando dois números inteiros I e J, que indicam que existe um caminho entre a clareira I e J (1 ≤ I < J ≤ N). Há pelo menos um caminho da casa de Chapeuzinho Vermelho para a casa de sua avó, e o nível máximo de alternativas entre o conjunto de todos esses caminhos não é maior do que 1018.",
        "titulo": "Chapeuzinho Vermelho",
        "descricao": "Era uma vez uma menina muito alegre, que foi chamada de Chapeuzinho Vermelho, porque ela sempre usava um capuz vermelho. Chapeuzinho Vermelho gostava muito de passeios na floresta, em que colhia frutos em sua pequena cesta para oferecê-los a sua avó, que era conhecida por preparar as mais deliciosas tortas de toda a região. No entanto, Chapeuzinho Vermelho definitivamente não gostava dos perigos da floresta, em particular o Lobo Mal, que estava sempre com fome e esperando. Um dia, Chapeuzinho Vermelho decide ir de sua casa até a de sua avó, coletando frutos no caminho e tentando fazer com que sua viagem da forma mais segura possível. A casa de Chapeuzinho Vermelho está em uma clareira no ponto mais ocidental do bosque, a casa de sua avó está em outra clareira no ponto mais oriental, e no interior da floresta entre elas há algumas outras clareiras com árvores de fruta. As madeiras são muito densas, por isso a única maneira de passar por eles será usando os caminhos entre as clareiras, que felizmente Chapeuzinho Vermelho conhece muito bem. Para não se perder, Chapeuzinho Vermelho sempre se move através de caminhos que ira levá-la para um ponto estritamente para o leste do ponto onde ela está. Para não ser pega pelo lobo, Chapeuzinho Vermelho considera essencial evitar uma emboscada, e por isso ela sempre tem em mente o número de diferentes caminhos que a levam de sua posição atual para a casa de sua avó. Um caminho na floresta é uma sequência de clareiras ordenadas de oeste para leste, de tal forma que cada clareira está conectada com a próxima por uma via. Um caminho para a casa da avó de Chapeuzinho Vermelho é simplesmente um caminho cujo ultima clareira contem a casa da avó. Para cada clareira, seu nível de alternativas é o número de caminhos que vão dele para a casa da avó de Chapeuzinho Vermelho. Por sua vez, o nível de alternativas de um caminho é a soma dos níveis de alternativas de todas as clareiras que compõem esse caminho. Para não ser capturada pelo lobo, Chapeuzinho Vermelho quer encontrar o caminho com um nível máximo de alternativas, a partir de sua casa e terminar na casa de sua avó. Você pode ajudá-la?"
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "2103",
        "saida": "Para cada instância imprima a soma dos comprimentos dos caminhos que ligam todos os pares (não-ordenados) de esculturas. A resposta dada deve ser módulo 1300031.",
        "entrada": "A entrada é composta por diversas instâncias. A primeira linha de cada instância contém um inteiro N (1 ≤ N ≤ 10000) representando o número de estátuas. As estátuas são enumeradas de 1 a N. Cada uma das N−1 linha seguintes contém três inteiros A, B e C (1 ≤ A, B ≤ N, 1 ≤ C ≤ 50), indicando que a rua asfaltada que liga as estátuas A e B tem comprimento C.",
        "titulo": "Harbin é Muita Grana!",
        "descricao": "Harbin é uma cidade organizada, mas construída de forma bastante econômica. Todas as ruas são de mão dupla, e é possível ir de qualquer ponto da cidade a qualquer outro, sempre passando apenas por ruas asfaltadas, mas não existem dois caminhos asfaltados diferentes ligando quaisquer dois pontos da cidade. O prefeito responsável pelo asfaltamento das ruas diz ter aplicado inclusive um algoritmo de um certo holandês, mas nunca ninguém entendeu o nome do algoritmo para poder verificar se ele de fato dizia a verdade. Na época do festival das estátuas de gelo de Harbin são espalhadas em vários pontos da cidade, e, os turistas são convidados a percorrer as ruas asfaltadas da cidade de forma a visitar todas elas. Sempre pensando na economia, o prefeito deseja saber qual é o comprimento total, em quilômetros, dos caminhos que ligam todos os pares de esculturas (cada par deve ser contado uma só vez, ou seja, se você já contou o caminho de A até B, não deve contar o caminho de B até A ). Sua tarefa neste problema é, dadas as posições das estátuas e os comprimentos das ruas asfaltadas que ligam as estátuas, determinar este comprimento total."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1850",
        "saida": "Imprima uma linha contendo um único inteiro, o qual deve representar o tempo mínimo, em segundos, de que Arya precisa para deixar o labirinto. Se não é possível Arya deixar o labirinto, imprima uma linha contendo dois caracteres - (hífen), representando os olhos cerrados com que Arya precisará conviver até deixar de ser Arya.",
        "entrada": "A entrada representa o labirinto e é composta por no máximo 100 linhas com no máximo 100 caracteres diferentes de fim de linha cada, e o número de caracteres por linha é sempre o mesmo. A posição onde Arya está é identificada pelo caractere @, a saída pelo caractere *, as paredes do labirinto são identificadas pelo caractere #, as portas por caracteres no conjunto {A, …, G}, as chaves por caracteres no conjunto {a, …, g}, e as demais posições livres pelo caractere . (ponto). O total de caracteres no labirinto diferentes de # e de . é no máximo 100, e há exatamente um caractere * e um caractere @. Arya sempre gasta 1 segundo para se mover de uma posição a outra, e só se move na horizontal ou na vertical, pois tem medo de bater o dedinho na quina de uma parede, já que as paredes são quadradas. A entrada termina em fim de arquivo.",
        "titulo": "O Labirinto de Ninguém",
        "descricao": "Nunca tome uma das faces da Casa do Preto e Branco se você não é ‘Ninguém’, ainda que seja para matar Meryn Trant, ou você ficará cego, além de receber várias outras punições. Talvez você veja você mesmo se tornar ‘Ninguém’. Talvez seja isto que esteja acontecendo com Arya. Ou não. Fato é que agora ela está cega e foi colocada num labirinto cheio de portas trancadas. Você pode ajudá-la? As fechaduras das portas presentes no labirinto onde está Arya são de 7 tipos: A, B, C, D, E, F e G. Há também algumas cópias de chaves espalhadas pelo labirinto, as quais podem ser dos tipos a, b, c, d, e, f ou g. Uma chave do tipo a abre uma porta do tipo A, uma chave do tipo b abre uma porta do tipo B etc. É claro que, uma vez que Arya tenha aberto uma porta com uma chave, a porta permanece aberta, e Arya pode levar a chave consigo para abrir tantas portas quantas quiser daquele tipo. No labirinto há exatamente uma saída: um buraco no chão através do qual Arya pode entrar no túnel que a conduzirá em segurança à saída da Casa do Preto e Branco."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2079",
        "saida": "Para cada instância imprima uma inteiro indicando o número máximo de bases que a Cruz Vermelha consegue construir levando-se em consideração as restrições descritas anteriormente.",
        "entrada": "A primeira linha de um caso de teste possui um inteiro T que indica o número de instâncias seguintes. A primeira linha de cada instância possui um inteiro N (1 ≤ N ≤ 6000) indicando o número de cidades do mapa. As cidades são identificadas por 1, 2, ..., N. As próximas N-1 linhas possuem dois inteiros u e v (1 ≤ u, v ≤ N, u ≠ v) que indicam uma ligação entre as cidades u e v (considere que tais ligações permitem acesso de u até v e de v até u).",
        "titulo": "Produto de Guerra",
        "descricao": "O Comitê Internacional da Cruz Vermelha, organização sem fins lucrativos cujo objetivo é defender e amparar as vítimas de guerras (ou melhor, vítimas do capital) ou catástrofes naturais, ganhou os prêmios Nobel de 1917, 1945 e 1963 pelo seu importantíssimo trabalho. Como é de se imaginar, a Cruz Vermelha sempre teve problemas de locomoção no meio da guerra. Muitas ligações (estradas, ferrovias, etc.) entre cidades de países em guerra podem ser destruídas por bombardeios ou dominadas por tiranos. O departamento de inteligência da Cruz Vermelha está empenhado em criar um programa de computador que auxilie as operações da Cruz Vermelha no futuro. A ideia é, dado um mapa da região que será ajudada, determinar em quais cidades devem ser feitas as bases da Cruz Vermelha. Inicialmente, o Departamento está interessado em testar a primeira versão do programa em cidades com as seguintes características: (a) sempre existe um caminho entre duas cidades que passa por uma ou mais ligações; (b) não existem dois caminhos diferentes entre duas cidades quaisquer. Apesar dos recursos da Cruz Vermelha geralmente serem limitados, eles querem escolher o maior número possível de bases, e garantir que ou existe uma base na cidade ou existe uma base em uma cidade vizinha, com a restrição adicional de que não é permitido criar bases em duas cidades vizinhas. Esta última restrição é dada pelo fato de que se estivesse em período de guerra, a Cruz Vermelha, como sabemos deve ter livre acesso nas cidades, e com isso pode surgir a suspeita de espionagem, o que pode comprometer o objetivo principal da organização. Sua tarefa é escrever a primeira versão do programa que o Departamento quer testar."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1713",
        "saida": "Seu programa deve produzir uma única linha, contendo um único inteiro, que deve ser igual a r módulo 104 , onde r é o número de sequências distintas de L botões que levam o usuário da nave S para a nave T.",
        "entrada": "A primeira linha da entrada contém dois inteiros N (1 ≤ N ≤ 100) e L (0 ≤ L < 230 ), indicando respectivamente o número de naves e o número de viagens do bilhete. A segunda linha da entrada contém dois inteiros S e T (1 ≤ S, T ≤ N ), indicando respectivamente a nave de partida e a nave de chegada. Cada uma das N linhas seguintes descreve o painel da cabine de teletransporte de uma nave. A i-ésima dessas linhas, 1 ≤ i ≤ N , contém quatro inteiros A, B, C e D (1 ≤ A, B, C, D ≤ N ), que representam os números escritos nos quatro bot ̃oes da cabine de teletransporte da nave de número i.",
        "titulo": "Teletransporte",
        "descricao": "A Confederação Galática instalou um novo sistema de teletransporte em suas naves espaciais. Cada nave recebeu uma cabine de teletransporte, na qual há um painel com quatro botões. Cada botão é rotulado com uma letra diferente A, B, C ou D e com um número que indica a nave destino para a qual o usuário será transportado, instantaneamente, se o respectivo botão for pressionado (como todos sabem, as naves da Confederação são identificadas por inteiros de 1 a N ). Para usar o sistema, o usuário deve adquirir um bilhete para cada viagem que deseja realizar (uma viagem corresponde a pressionar um botão). Note que como o número botões no painel é pequeno comparado com o número de naves da Confederação, pode ser necessário que o usuário tenha que comprar um bilhete múltiplo de L viagens para ir de uma dada nave S para uma outra nave T. Por exemplo, para as naves da figura abaixo, se o usuário está na cabine de teletransporte da nave 3 e pressiona o botão B ele é transportado para a nave 2. Se ele tem um bilhete múltiplo e pressiona novamente o botão B ele é então transportado para a nave 1. Sua tarefa neste problema é, dados a nave de partida S, a nave de chegada T e o número de viagens L do bilhete, determinar quantas sequências distintas de L botôes levam o usuário da nave S para a nave T . Por exemplo, para as naves da figura acima, existem quatro sequências distintas de L = 2 botôes que levam um usuário da nave S = 3 para a nave T = 1: CD, DA, AB, e BB."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1384",
        "saida": "Para cada caso de entrada, seu programa deve produzir uma linha da saída, contendo o mínimo de calorias consumidas por Sr. Sapo para ir de sua casa até a de Srta. Toad. Se for impossível que ele chegue até a casa dela, seu programa deve imprimir \"impossible\" (impossível).",
        "entrada": "A entrada possui vários casos de teste. A primeira linha de um caso de teste contém dois inteiros, C e R, indicando o número de colunas e o mímero de linhas do pântano (1 ≤ C, R ≤ 1000). A segunda linha de um caso de teste contém quatro inteiros Cf, Rf, Ct e Rt, onde (Cf, Rf) indica o local da casa do Sr. Sapo e (Ct, Rt) indica o local da casa de Srta. Toad (1 ≤ Cf,Ct ≤ C; 1 ≤ Rf,Rt ≤ R). A terceira linha de um caso de teste contem um inteiro W (0 ≤ W ≤ 1000) indicando o número de lugares molhados no pântano. Cada uma das W linhas seguintes contêm quatro inteiros C1, R1, C2 e R2 (1 ≤ C1 ≤ C2 ≤ C; 1 ≤ R1 ≤ R2 ≤ R), descrevendo um espaço retangular molhado compreendendo os qudrados que possuem coordenadas (x,y) tais que C1 ≤ x ≤ C2 e R1 ≤ y ≤ R2. O final da entrada é indicado por C = R = 0.",
        "titulo": "Sapo Preguiçoso",
        "descricao": "O Sr. Sapo mora num pântano com formato de grade retangular, composto por quadrados de mesmo tamanho, tais que alguns são secos e outros molhados. Sr. Sapo mora num quadrado seco e só pode pular de um quadrado seco para outro quando vai passear pelo pântano. Ele quer visitar sua namorada, Srta. Toad, que também mora num quadrado seco no mesmo pântano. Mas Sr. Sapo é preguiçoso, e quer gastar o mínimo de energia pulando até a casa dela. Ele sabe a quantidade de energia que ele gasta em qualquer um de seus pulos. Para cada pulo único, Sr. Sapo sempre usa a figura a seguir para determinar quais são os possíveis quadrados para os quais ele pode pular da posição em que ele se encontra (o quadrado marcado com F), e a energia correspondente gasta nos pulos, em calorias. Qualquer outro quadrado não é alcançável por Sr. Sapo dessa posição com um único pulo. Seu trabalho é determinar qual é a mínima quantidade de energia que o Sr. Sapo tem que gastar para ir da sua casa à casa da Srta. Toad."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1562",
        "saida": "Para cada teste, a saída é composta por uma linha. Caso seja impossível formar as duplas do jeito que a professora quer, imprima \"IMPOSSIBLE\". Caso haja solução, imprima em ordem os parceiros de cada aluno (o parceiro do aluno 1, do aluno 2, assim por diante). Caso haja mais de uma solução, deve se priorizar o desejo dos alunos de menor índice, ou seja, sempre que possível deve-se atender o desejo do aluno 1, depois tentar atender o desejo do aluno 2, e assim por diante. Lembre-se que o problema pede para formar duplas, se o parceiro do aluno X é igual a Y, o parceiro do aluno Y deve ser igual a X. No último caso de entrada do exemplo, os pares são (1,3), respeitando o desejo do aluno 1, e também (2,4), respeitando o desejo do aluno 4.",
        "entrada": "A entrada é composta por vários casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha de um caso de teste contém um inteiro N (2 ≤ N ≤ 10000) igual ao número de alunos da sala de aula. A segunda linha contém os desejos de todos os alunos em ordem (a pessoa escolhida pelo aluno 1, pelo aluno 2, assim por diante). Nenhum aluno irá escolher a si próprio.",
        "titulo": "Escolhendo as Duplas",
        "descricao": "Uma professora quer dividir todos os alunos de uma sala em duplas para a realização de um trabalho em grupo. Nessas horas, há muita briga entre os alunos para escolher as duplas, porque muitos alunos querem fazer dupla com os melhores alunos da sala. A professora decidiu dessa vez escolher as duplas de uma forma diferente. Cada aluno poderá dizer à professora um outro aluno com o qual queira fazer uma dupla. Após isso, a professora escolherá as duplas de forma com que todas as duplas satisfaçam pelo menos o desejo de um dos alunos da dupla. Agora acho que você já sabe qual será seu trabalho neste problema. Dada a lista de desejos dos alunos, imprima a lista de duplas que a professora deve escolher."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1195",
        "saida": "Cada linha de entrada produz 3 linhas de saída. Após construir a árvore binária de busca com os elementos de entrada, você deverá imprimir a mensagem \"Case n:\", onde n indica o número do caso de teste e fazer os três percursos da árvore: prefixo, infixo e posfixo, apresentando cada um deles em uma linha com uma mensagem correspondente conforme o exemplo abaixo, separando cada um dos elementos por um espaço em branco. Obs: Não deve haver espaço em branco após o último item de cada linha e há uma linha em branco após cada caso de teste, inclusive após o último.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha da entrada contém um inteiro C (C ≤ 1000), indicando o número de casos de teste que virão a seguir. Cada caso de teste é composto por 2 linhas. A primeira linha contém um inteiro N (1 ≤ N ≤ 500) que indica a quantidade de números que deve compor cada árvore e a segunda linha contém N inteiros distintos e não negativos, separados por um espaço em branco.",
        "titulo": "Árvore Binária de Busca",
        "descricao": "Em computação, a árvores binária de busca ou árvore binária de pesquisa é uma estrutura baseada em nós (nodos), onde todos os nós da subárvore esquerda possuem um valor numérico inferior ao nó raiz e todos os nós da subárvore direita possuem um valor superior ao nó raiz (e assim sucessivamente). O objetivo desta árvore é estruturar os dados de forma flexível, permitindo a busca binária de um elemento qualquer da árvore. A grande vantagem das árvores de busca binária sobre estruturas de dados convencionais é que os algoritmos de ordenação (percurso infixo) e pesquisa que as utilizam são muito eficientes. Para este problema, você receberá vários conjuntos de números e a partir de cada um dos conjuntos, deverá construir uma árvore binária de busca. Por exemplo, a sequência de valores: 8 3 10 14 6 4 13 7 1 resulta na seguinte árvore binária de busca:"
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1903",
        "saida": "Imprima uma linha com a mensagem \"Bolada\" (sem aspas) se a cadeia for uma Cadeia Bolada, ou \"Nao Bolada\" caso contrário.",
        "entrada": "A entrada consiste em múltiplas linhas. A primeira linha contém dois inteiros N (1 ≤ N ≤ 100000) e M (1 ≤ M ≤ 1000000), representando a quantidade de espécies e o número de relações respectivamente. As próximas M linhas contêm dois inteiros U (1 ≤ U ≤ N) e V (1 ≤ V ≤ N), representando que existe uma relação unidirecional entre U e V.",
        "titulo": "Cadeia Alimentar",
        "descricao": "Na viagem de Bino, ele desenhou algumas cadeias alimentares dos seres de Binox. Porém ele notou que em algumas cadeias, todos os pares de espécies se relacionavam (diretamente ou indiretamente). Ele denominou essas cadeias de Cadeias Boladas. Representando a cadeia alimentar como um grafo, todos os pares de espécies (u, v) se relacionam se existe um caminho de u para v OU um caminho de v para u. Dado uma cadeia alimentar, Bino quer saber se ela é uma Cadeia Bolada ou não."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2118",
        "saida": "Para cada localização de um aluno que deseja se matricular no Farias Brito, imprima o identificador da melhor sede que o aluno deve se matricular. Caso não exista sede que seja acessível pelo aluno utilizando as ruas de Fortaleza, imprima “Noic”.",
        "entrada": "A entrada é composta por múltiplas linhas. A primeira linha da entrada contém quatro inteiros L, S, Q (1 ≤ L, S, Q ≤ 105) e A (1 ≤ A ≤ 106), representando o número de locais, o número de sedes, o números de estudantes e o número de ruas. Cada uma das próximas S linhas contém três inteiros Pi, Mi e Ti (1 ≤ Mi, Ti ≤ 109), representando o local onde a sede está localizada, o número de medalhas da sede e o número de dias que a sede foi construída. Cada uma das próximas A linhas contém dois inteiros X e Y cada, representando que existe uma rua que conecta os locais X e Y. Cada uma das próximas Q linhas contém a localização de cada aluno que deseja se matricular no Farias Brito. É garantido que para quaisquer duas sedes distintas, elas não foram construídas no mesmo dia.",
        "titulo": "Qual a Sede?",
        "descricao": "Em Fortaleza, todos os estudantes pretendem estudar em alguma sede do Colégio Farias Brito, porém como existem muitas sedes na cidade, alguns estudantes ficam em dúvida em qual sede se matricular. Um estudante opta por estudar na sede mais próxima de onde ele mora. Caso existam sedes com mesma distância de onde ele mora, o estudante opta por estudar na sede que obteve mais medalhas em olimpíadas. Caso ainda permaneça o empate, o estudante opta pela sede mais antiga. O mapa de Fortaleza pode ser desenhado como um grafo, em que os vértices representam os locais, e as arestas representam as ruas (Conectando dois locais). A distância entre dois locais X e Y é determinada pelo número mínimo de ruas que se deve utilizar para chegar em Y a partir de X. O grande chefe Parcelo Mena ordenou que o estagiário Nhalyson Tepomuceno fizesse um programa que indique qual a melhor sede para os alunos."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1207",
        "saida": "Para cada instância imprima, em uma única linha, o maior valor que pode ser obtido da soma dos benefícios das categorias adquiridas menos o custo dos tipos de vodkas compradas.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 600) e M (1 ≤ M ≤ 400) representando, respectivamente, a quantidade de tipos diferentes de vodka a venda e o número de categorias existentes. Os tipos de vodka são identificados por números de 1 a N e as categorias por números de 1 a M. A linha seguinte contém N inteiros, Cj (1 ≤ Cj ≤ 1000) para (1 ≤ j ≤ N), separados por espaço, correspondendo ao custo da vodka j. Na próxima linha existem M inteiros, Pi (1 ≤ Pi ≤ N) para (1 ≤ i ≤ M), separados por espaço, indicando quantos tipos diferentes de vodkas compõe a categoria i. Cada uma das M linhas seguintes descreve uma categoria começando com um inteiro, Bi (1 ≤ Bi ≤ 1000) para (1 ≤ i ≤ M), indicando seu benefício, seguido pelos tipos de vodka que a compõe, separados por espaços.",
        "titulo": "Os Benefícios da Vodka",
        "descricao": "São Peterburgo é conhecida como a capital da cerveja russa e abriga diversas cervejarias importantes. Dizem que a qualidade da água da cidade é responsável por uma cerveja de excelente qualidade. Além de fábricas tradicionais, como a Heineken, algumas marcas locais são destacadas, como a Tinkoff e a Baltika. Também na cidade são produzidas algumas das melhores vodkas do mundo. A mais antiga, chamada Liviz, data de 1897. Esta destilaria produz vodkas de  excelente qualidade, medida por padrões internacionais. Curiosamente, alguns tipos de vodkas, quando consumidos juntos, acabam tendo, segundo os  especialistas, sabor muito melhor. Dessa forma, alguns tipos de vodka são reunidos em categorias que, quando compradas totalmente pelo consumidor, trazem um benefício agregado medido segundo padrões internacionais de qualidade. Cada uma das vodkas tem um preço associado, e sua tarefa é encontrar uma compra que maximize o benefício total menos o custo das vodkas adquiridas. Reescrevendo, cada vodka tem um custo Cj e existem M categorias diferentes, cada qual com um benefício Bi. Um benefício só é computado se todos os tipos de vodka que compõem a categoria são adquiridos. Uma mesma garrafa de vodka pode participar de mais de uma categoria para computar o benefício. Sua tarefa é determinar quais tipos de vodka comprar de forma a maximizar a soma dos benefícios adquiridos menos o custo dos itens  comprados. Você pode supor que foi à Russia com dinheiro suficiente para comprar todos os tipos de vodka produzidos pela Liviz (oba!! :D)."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1979",
        "saida": "Para cada caso de teste, deverá ser impressa uma linha contendo a resposta \"SIM\", caso seja possível dispor os alunos de forma que não hajam dois amigos realizando a prova na mesma sala, e \"NAO\", caso contrário.",
        "entrada": "A entrada é composta de diversos casos de teste. A primeira linha de cada caso de teste consiste em um inteiro N (2 ≤ N ≤ 100) indicando o número de alunos que irão realizar a prova. Cada N par de linhas seguintes descreve as relações de amizade de cada participante, de forma que a primeira linha consiste no identificador do participante, e a linha seguinte consiste em uma lista descrevendo uma quantidade M de alunos (1 ≤ M < N) com os quais aquele participante possui uma relação de amizade. Considere que não é relevante o número de pessoas dispostas em cada sala, e que, se existe uma relação de amizade entre alunos x e y, existe uma relação de amizade entre y e x. A entrada termina quando N = 0, e não deve ser processada.",
        "titulo": "Salas Separadas",
        "descricao": "Luiz é um coordenador muito dedicado do curso de ciência da computação. Ele sabe a importância de incentivar seus alunos a esforçarem-se em algoritmos, por isso decidiu realizar uma competição de programação individual entre estes, com direito a premiação. Luiz gostaria de evitar ao máximo a possibilidade de fraude na competição, e por isso não gostaria que houvessem dois candidatos amigos na mesma sala durante a realização da prova. Infelizmente Luiz só dispõe de duas salas para a realização da prova, mas felizmente conhece muito bem seus alunos, e sabe dizer com facilidade quem é amigo de quem. Entretanto, ele precisa saber se será possível, apenas com as duas salas disponíveis, combinar os alunos da forma que deseja e para isso solicitou a você, aluno dedicado do curso, que crie um programa para ajudá-lo."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2127",
        "saida": "Para cada instância, você deverá imprimir um identiﬁcador \"Instancia K\", onde K é o número da instância atual. Na linha seguinte imprima o custo de um sistema que atenda os requisitos descritos acima. Após cada instância imprima uma linha em branco.",
        "entrada": "A entrada é composta de diversas instâncias. A primeira linha de cada instância contém dois inteiros N (1 ≤ N ≤ 1000) e M (1 ≤ M ≤ 2000000), onde N é o número de \"pontos de cipó\" e M é o número de cipós. Cada uma das M linhas seguintes contém três inteiros U, V e C indicando que existe um cipó que vai do ponto U e até o ponto V com custo C, onde 1 ≤ U, V ≤ N e C ∈ {1235,8977,10923}. A entrada termina com ﬁnal de arquivo.",
        "titulo": "Sistema Cipoviário",
        "descricao": "Os pesquisadores do departamento de pesquisa operacional da Universidade da Columbia Britânica foram contratados para uma estranha tarefa. Vários países da África resolveram se unir e utilizar oﬁcialmente o meio de transporte que ﬁcou mundialmente conhecido nos ﬁlmes do Tarzan: o cipó. Há milhões de cipós na África e é surpreendente com que velocidade e eﬁciência uma pessoa pode se deslocar na selva utilizando esse meio de transporte. Só surgiu um pequeno problema. Os cipós são dominados por três grandes tribos: os makelelês, os malouhdás e os abedis. As tribos exigem ser pagas por cipó usado no sistema de transporte. Como eles ainda não sabem o signiﬁcado de palavras como cartel, cada uma fez o seu preço, e divergiram bastante. Enquanto os makelelês exigem 1235 bongôs por cipó usado, os malouhdás exigem 8977 e os abedis 10923 (a Jane ainda está viva, e ajudou a intermediar a negociação para esta tribo). Os pesquisadores foram contratados para escolher os cipós que comporão o primeiro sistema cipoviário do mundo. Os contratantes construíram milhões de “pontos de cipó” pela selva africana e desejam que os cipós sejam escolhidos de tal forma que seja possível ir de qualquer ponto a qualquer outro usando os cipós contratados (você pode ter de trocar de cipó algumas vezes, como fazia o Tarzan). Você deve dizer qual o custo de um sistema que atenda estes requisitos e seja o mais barato possível. Você pode supor que existam cipós suﬁcientes na selva para que sempre exista um sistema cipoviário que atenda os requisitos."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1948",
        "saida": "A saída consistirá sempre de somente 1 linha: OK No caso de ser possível compilar. Compilation error No caso de não ser possível.",
        "entrada": "Cada entrada consiste de um programa. O programa só contem 2 tipos de instruções. Uma para declarar o valor de uma variável e outra para executar uma soma. As instruções de declaração são no formato: A := B Onde A é um nome de variável válido e B é um inteiro positivo. As instruções de soma são no formato: A := B + C Onde A é um nome de variável válido e B ou C são ou um nome de variável válido ou um inteiro positivo. Os tokens deste programa são sempre separados por espaço e as instruções são separadas por uma quebra de linha. São nomes de variáveis válidos todas as combinações de até 8 letras minúsculas. Os programas tem, no máximo, 2000 instruções. Variáveis recebem uma atribuição, seja através de uma soma ou de uma declaração, no máximo, 1 vez.",
        "titulo": "Compilador",
        "descricao": "Depois do ataque dos alienígenas que acabou com quase toda a tecnologia avançada da humanidade, você foi designado a participar da força tarefa para reconstruir. Depois de muita tentativa e erro, foi descoberto que os computadores que tinham apenas 2 registradores fonte e um destino eram imunes as radiações alienígenas. O problema agora é que nenhum programa escrito até então funcionava nestes computadores, e muito menos um compilador adequado. Você está de posse de um dos últimos computadores de verdade que ainda funcionam, e sua tarefa será escrever o compilador. Mas como tempo é dinheiro, e tempo de CPU é muito mais dinheiro, antes de compilar o programa inteiro, você deve apenas checar se é possível compilar o programa desejado."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1056",
        "saida": "Para cada caso, imprima o número do caso de teste, seguido pela resposta, conforme exemplo abaixo.",
        "entrada": "O primeiro valor da entrada é um inteiro T ( T < 50 ) que determina o número de casos de teste. Cada caso de teste consiste de duas linhas. A primeira linha inicia com n seguida pelos n inteiros. A segunda linha inicia com m seguido pelos m inteiros. Ambos, n e m estarão no intervalo [1,100]. Todos os elementos destes dois conjuntos devem caber em um inteiro com sinal de 32 bits.",
        "titulo": "Fatores e Múltiplos",
        "descricao": "Serão fornecidos a você, dois conjuntos de valores de entrada. Vamos chamá-los de conjuntos A e B. O conjunto A contém n elementos e o conjunto B contém m elementos. Você deverá remover k1 elementos do conjunto A e k2 elementos do conjunto B de forma que nenhum dos valores inteiros que restarem no conjunto B seja múltiplo de algum inteiro do conjunto A. k1 deverá estar no intervalo [0,n] e k2 no intervalo [0,m]. Você deverá encontrar o valor de (k1+k2) tal que (k1+k2) seja tão baixo quanto possível. P é um múltiplo de Q se houver algum inteiro K tal que P = K * Q. Suponha que o conjunto A seja {2,3,4,5} e o conjunto B seja {6,7,8,9}. Se forem removidos 2 e 3 do conjunto A e 8 do conjunto B, nós tempos os conjuntos {4,5} e {6,7,9}. Aqui nenhum dos inteiros 6, 7 ou 9 é um múltiplo de 4 ou 5. Portanto, para este caso a resposta é 3, que é a quantia de elementos eliminados (2 elementos do conjunto A e 1 elemento do conjunto B)."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1931",
        "saida": "Uma única linha deve ser impressa, contendo um único inteiro, o custo total de pedágios para Patrícia ir da cidade 1 à cidade C, pagando um número par de pedágios, ou, se isso não for possível, o valor −1.",
        "entrada": "A entrada consiste de diversas linhas. A primeira linha contém 2 inteiros C e V, o número total de cidades e o número de estradas (2 ≤ C ≤ 104 e 0 ≤ V ≤ 50000). As cidades são identificadas por inteiros de 1 a C. Cada estrada liga duas cidades distintas, e há no máximo uma estrada entre cada par de cidades. Cada uma das V linhas seguintes contém três inteiros C1, C2 e G, indicando que o valor do pedágio da estrada que liga as cidades C1 e C2 é G (1 ≤ C1, C2 ≤ C e 1 ≤ G ≤ 104). Patrícia está atualmente na cidade 1 e a cidade do cliente é C.",
        "titulo": "Mania de Par",
        "descricao": "Patrícia é uma ótima desenvolvedora de software. No entanto, como quase toda pessoa brilhante, ela tem algumas manias estranhas, e uma delas é que tudo que ela faz tem que ser em número par. Muitas vezes essa mania não atrapalha, apesar de causar estranhamento nos outros. Alguns exemplos: ela tem que fazer diariamente um número par de refeições; no café da manhã toma duas xícaras de café, duas torradas e duas fatias de queijo; sempre que vai ao cinema compra dois bilhetes de entrada (felizmente sempre tem um amigo ou amiga lhe acompanhando); e toma dois banhos por dia (ou quatro, ou seis...). Mas algumas vezes essa mania de Patrícia atrapalha. Por exemplo, ninguém gosta de viajar de carro com ela, pois se no trajeto ela tem que pagar pedágios, o número de pedágios que ela paga tem que ser par. Patrícia mora em um país em que todas as estradas são bidirecionais e têm exatamente um pedágio. Ela precisa ir visitar um cliente em uma outra cidade, e deseja calcular o mínimo valor total de pedágios que ela tem que pagar, para ir da sua cidade à cidade do cliente, obedecendo à sua estranha mania de que o número de pedágios pagos tem que ser par."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1463",
        "saida": "Para cada caso de teste, seu programa deverá imprimir várias linhas de saída correspondentes aos níveis da árvore de expressão e contendo todos os elementos presentes em cada um destes níveis, da esquerda para a direita. Estas linhas devem iniciar sempre com a mensagem \"Nivel n: \", conforme o exemplo fornecido abaixo. Imprima uma linha em branco entre dois casos de teste.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de uma expressão aritmética contendo no mínimo dois operandos e uma operação simples e no máximo até 100 elementos. Esta expressão poderá conter letras maiúsculas, letras minúsculas, números, parênteses e operações aritméticas básicas (+, -, *, /) conforme o exemplo abaixo. Cada operando pode ter apenas um dígito ('0 '- '9') ou letra ('a', 'B', etc). O final da entrada é indicado pelo fim de arquivo (EOF). O final da entrada é indicado por final de arquivo (EOF).",
        "titulo": "Árvore Binária de Expressão",
        "descricao": "A árvore binária de expressão aritmética é uma aplicação específica de uma árvore binária para avaliar expressões. Ela pode ser usado para representar uma expressão algébrica ou booleana, como por exemplo, a expressão 4 * a - ( 6 + b ) + 8 / ( 9 - 7 )  que é apresentada na figura abaixo. Essas árvores podem representar expressões que contêm operadores unários e binários. As ávores de expressão são implementadas como árvores binárias, principalmente porque permitem ao usuário encontrar rapidamente o que está procurando. O limite superior de passos necessários para encontrar a informação requerida em árvores binárias igual a log2N, em que N indica o número de todos os nós de uma árvore. A fim de fazer um exercício diferente, o professor pediu para listar uma expressão armazenada em uma árvore binária, nível a nível, iniciando no primeiro nível (zero) e terminando no nível n."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1752",
        "saida": "Apresente uma linha com N - 1 inteiros que representam o custo mínimo de cada etapa de sua viagem, ou o valor -1 se é impossível viajar usando o sistema de transporte escoltado do ICPC para aquela etapa. Mais precisamente, para k = 1, 2,. . . , N - 1, o k-ésimo número deve ser o custo mínimo dos carros que você tem que alugar para ir da província pk para província pk + 1, utilizando o sistema escoltado de transporte do ICPC , ou o valor -1 se é impossível viajar da província pk para província pk + 1 com este sistema.",
        "entrada": "A primeira linha contém três inteiros R, C e N, representando respectivamente o número de linhas, o número de colunas e o número de províncias que deseja visitar (1 ≤ R, C ≤ 500 e 2 ≤ N ≤ 5). As linhas são numeradas de 1 a R e colunas são numeradas de 1 a C. As próximas 3 × R linhas descrevem o sistema de transporte escoltado do ICPC por meio de três grupos de R linhas cada, com cada linha contendo C inteiros. Na i-ésima linha do primeiro grupo, o j-ésimo número representa o custo Vij de alugar um carro na província de linha i e coluna j, enquanto os números correspondentes no segundo e terceiro grupo representam, respectivamente, Rij e Cij (1 ≤ Vij ≤ 1000, 0 ≤ Rij ≤ R e 0 ≤ Cij ≤ C, para i = 1, 2,..., R e j = 1, 2,..., C). As N linhas seguintes descrevem as províncias p1, p2,. . . , pN que você quer visitar, na mesma ordem que você quiser visitá-los. O k-ésimo número dessas linhas descreve a província pk com dois inteiros Ik e Jk, indicando que pk esta na linha Ik e coluna Jk (1 ≤ Ik ≤ R e 1 ≤ Jk ≤ C para k = 1 , 2,..., N).",
        "titulo": "Jornada Pelo Reino",
        "descricao": "O reino de Quadradônia é dividido em províncias que formam um padrão de grade de R linhas e C colunas. Diz a lenda que muitas coisas maravilhosas esperam ser descobertas em algumas das províncias, embora não esteja claro se você pode realmente encontrar a forma sólida indescritível de histórias de água chamada de \"gelo\", ou se são apenas dragões. Você está planejando uma viagem através do reino para descobrir, mas as estradas são perigosas por isso você tem que ter muito cuidado. Para ir de uma província para outra que você gostaria de usar o sistema de transporte conveniente escoltado, gerido pela Interprovincial Communication & Peregrination Company (ICPC). Em cada província, o ICPC fornece uma carruagem fortemente guardada para você viajar para qualquer outra província em um retângulo que a contém, com a mesma taxa fixa (que pode no entanto variar de uma província para outra). Mais formalmente, na província na linha i-ésima e coluna j-ésima você pode alugar um carro escoltado por um custo de Vij, que lhe permite viajar com segurança para qualquer província na maioria das linhas Rij de distância da linha i, e na maioria das colunas Cij de distância da coluna j (isto é, ter número da linha i' e coluna j' com número | i - i' | ≤ Rij e | j - j' | ≤ Cij). Em sua jornada você deseja visitar N províncias p1, p2,. . . , pN, nessa ordem. Andando à procura de aventuras é um negócio caro e seu orçamento é limitado, então você gostaria de gastar o mínimo possível no transporte. Portanto, você gostaria de calcular o custo mínimo de cada etapa de sua viagem, ou seja, o custo mínimo dos carros que você tem que alugar para ir da província pk para a província pk + 1, para k = 1, 2,. . . , N - 1."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2048",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h, em que h é um número inteiro, sequencial e crescente a partir de 1. Na próxima linha, você deve imprimir (com cinco casas decimais) a probabilidade mínima de interferência calculada para tal instância. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "Seu programa deve estar preparado para lidar com diversas instâncias. Cada instância possui o formato que segue. Na primeira linha, são especificados dois inteiros 0 ≤ n ≤ 100 e 0 ≤ m ≤ n(n-1)/2 que representam, respectivamente, o número de pontos na rede alternativa e o número de pares desses pontos para os quais as probabilidades de haver interferência foram medidas. Nas m linhas seguintes, são dados (em cada linha) dois inteiros 1 ≤ u,v ≤ n e um racional 0 ≤ puv ≤ 1 representando que entre os dois pontos u e v, a probabilidade de interferência é puv. Um valor n = 0 indica o término das instâncias e não deve ser processado. Você pode supor que sempre será possível satisfazer a restrição (i).",
        "titulo": "Houston, Nós Temos Um Problema!",
        "descricao": "No dia primeiro de julho de 1947, um estranho objeto foi detectado por radares da força aérea americana instalados em Roswell, White Sands e Alamogordo. A tremenda velocidade e os movimentos erráticos do objeto indicaram que ele não era um avião ou meteorito. Quatro dias depois um pastor de ovelhas e um grupo de arqueólogos encontram restos de um objeto acidentado ao norte de Roswell. A partir daí, autoridades americadas entram em cena e transportam os restos de tal objeto para Fort Worth no Texas. Elas disseram que os destroços encontrados eram simplesmente restos de um balão meteorológico experimental. Muitas pessoas, no entanto, acharam que se tratavam dos restos de um objeto voador não identificado (UFO). Muitos anos se passaram desde então, e o caso continua atraindo atenção e gerando polêmica. Um grupo de ufólogos radicado em San Antonio, uma cidade texana situada a sul-sudoeste de Fort Worth, está convencido de que seres extraterrestres têm visitado a região com frequência desde então. Após muita pesquisa, os ufólogos descobriram que poderiam construir uma rede de comunicação alternativa para tentar contactar os ETs. Tal rede utilizaria resquícios do antigo sistema de telégrafos existentes no deserto do Texas e o fato de sua alternatividade advém da tentativa de evitar, segundo eles, a intromissão das autoridades supra citadas. Após um minucioso levantamento (que identificou postes, fiações, condensadores, transformadores, etc.), os ufólogos perceberam que informações transmitidas em certos trechos da antiga estrutura dos telégrafos apresentavam qualidade pior do que em outros. Baseados em amostras estatísticas, levantaram, para alguns pares de pontos u e v da antiga rede, uma probabilidade puv de haver interferência nas informações transmitidas entre u e v. Sabendo que você estaria na região em abril do ano que vem, eles pediram a você que construísse um programa para identificar o menor conjunto de trechos a serem utilizados, de forma que (i) todos os pontos por eles desejados estejam interligados (mesmo que indiretamente), e tal que (ii) a probabilidade total de interferência nas mensagens enviadas nesta rede alternativa seja mínima. Ávido de interesse em descobrir a verdade (que \"está lá fora...\"), você prontamente atendeu à solicitação."
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "2121",
        "saida": "Para cada instância imprima a dificuldade total mínima da rota desejada. Se for impossível obter uma rota da forma desejada, imprima “impossivel”.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). A primeira linha de cada instância contém dois inteiros N (2 ≤ N ≤ 50) e M (0 ≤ M ≤ N2+103), o número de atrações da cidade e o número de passeios respectivamente. As próximas M linhas contém três inteiros, ai, bi, di (1 ≤ ai, bi ≤ N) indicando que o passeio i começa em ai, termina em bi e tem dificuldade di (1 ≤ di ≤ 3x104).",
        "titulo": "Turismo em Ecaterimburgo",
        "descricao": "Muitos podem pensar: “O que vou fazer em Ecaterimburgo? Essa cidade é no fim do mundo!!!”. Entretanto, muitas coisas interessantes ocorreram na cidade, possuindo vários monumentos e locais históricos. Para citar alguns, Ecaterimburgo tem um monumento que é um grande teclado de computador localizado na beira do rio Izet; um monumento a Michael Jackson (!!); na mansão Ipatiev foram assassinados os Romanovs (o czar Nicolau, sua esposa, quatro filhas e filho); lá houve um vazamento de antraz em 1979; um piloto de U2 americano foi capturado e condenado por espionagem; entre outros. Ou seja, existe muito há fazer nos dias em que a cidade for visitada. A central de turismo de Ecaterimburgo construiu um mapa com as principais atrações turísticas da cidade, assim como os belos passeios ligando esses caminhos. Esse mapa também mostra um nível de dificuldade de cada passeio (relacionado à duração, pavimentação da via, relevo etc.) e o sentido no qual ele deve ser feito. Eles desejavam construir uma rota que passasse por todas as atrações turísticas e os passeios. Foi idealizado, então, um concurso que visava fazer esta rota e, ao mesmo tempo, homenageava uma das cidades irmãs de Ecaterimburgo: Caliningrado, cujo nome até o final da segunda guerra mundial era Königsberg. A ideia era construir uma rota em que se partisse de uma das atrações, e passando por todos os passeios se retornasse ao ponto de partida. Sabemos que, como no caso das pontes de Königsberg, nem sempre é possível construir uma rota assim. Por isso a central permitiu que, se necessário, os passeios poderiam ser feitos mais de uma vez. No entanto, ela exigiu que a dificuldade total da rota (soma das dificuldades de cada passeio multiplicado pelo número de vezes que ele é feito) fosse mínima. Dessa forma, o concurso consistia de propor, a partir de uma rota inicial, quais passeios deveriam ser percorridos mais de uma vez e quantas vezes, para se obter uma rota como a desejada pela central."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1389",
        "saida": "Para cada caso de teste na entrada, seu programa deverá imprimir uma única linha, contendo o inteiro -1 caso não seja possível satisfazer os requisitos ou um inteiro representando a cidade onde Poly, o Sapateiro, pode começar sua jornada. Se existir mais de uma resposta, imprima a menor.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém dois inteiros N e C, separados por um espaço, indicando respectivamente o número de cidades (1 <= N <= 500) e confederações (1 <= C <= 100) no país. Cada uma das próximas C linhas descreve uma confederação. Ela começa com um inteiro K (0 <= K <= N) e então K inteiros representando as cidades que pertencem a essa confederação. Todos inteiros são separados por espaços simples e cidades são numeradas de 0 a N - 1. Cada cidade vai aparecer pelo menos uma vez e no máximo duas vezes e nenhuma cidade vai ser repetida na mesma confederação. O final da entrada é indicado por uma linha contendo dois zeros separados por um espaço.",
        "titulo": "O Problema do Sapateiro Viajante",
        "descricao": "Era uma vez um reino muito pacífico chamado Nlogônia. Naquela época, Poly, o Sapateiro, podia vir ao país e viajar livremente de cidade em cidade sem nenhuma preocupação. Essa tarefa era fácil, já que todas cidades na Nlogônia tinham uma estrada direta para todas outras cidades no país. Ele podia então viajar facilmente por todo país visitando cada cidade exatamente uma vez e consertando os sapatos de todos. Mas isso não é mais verdade. Os tempos mudaram e a guerra chegou à Nlogônia. A época em que as pessoas podiam viajar livremente acabou. Confederações identificadas por cores foram formadas entre as cidades por todo o país, e agora cada cidade pertence a pelo menos uma e no máximo duas confederações. Ao tentar entrar em uma cidade, você deve dar ao guarda de fronteira um tíquete de uma das confederações a que essa cidade pertence. Ao sair da cidade, você recebe um tíquete da outra confederação a que a cidade pertence (diferente do que você deu ao entrar) ou da mesma confederação se a cidade pertencer a apenas uma. Como Poly, o Sapateiro, é amigo de longa data da Nlogônia, ele pode escolher o tíquete e a cidade que ele deseja entrar como a primeira cidade do país, mas depois disso ele deve obedecer as regras da confederação. Ele quer fazer a mesma rotina que ele fazia antes, visitando cada cidade exatamente uma vez em Nlogônia, mas agora não é fácil para ele fazer isso, apesar de ele poder escolher onde começar sua jornada. Por exemplo, suponha que existam quatro cidades, númeradas de 0 a 3. A cidade 0 pertence às confederações vermelha e verde; a cidade 1 pertence apenas à vermelha; a cidade 2 pertence à verde e à amarela; e a cidade 3 pertence à azul e à vermelha. Se Poly, o Sapateiro, escolher começar na cidade 0, ele pode entrar nela carregando tanto o tíquete vermelho quanto o amarelo e sair recebendo o outro. Caso ele decida escolher o tíquete vermelho, ele vai sair com um tíquete verde, e então ele pode ir apenas para a cidade 2. Ao sair da cidade 2 ele recebe o tíquete amarelo e agora não pode ir a mais nenhum lugar. Se ele tivesse escolhido o tíquete verde como primeiro ele teria recebido o vermelho ao sair, e então poderia viajar para as cidade 1 ou 3. Se ele escolher a cidade 3, ao sair ele receberá o tíquete azul e novamente não poderá ir a lugar algum. Se ele escolher a cidade 1, ele recebe o tíquete vermelho de novo ao sair (a cidade 1 pertence apenas à confederação vermelha) e pode viajar apenas para a cidade 3 e nunca chegará à cidade 2. Portanto, não é possível visitar cada cidade exatamente uma vez começando na cidade 0. É possível, entretanto, começando na cidade 2 com um tíquete amarelo, sair da cidade com um tíquete verde, então visitar a cidade 0, sair com um tíquete vermelho, então visitar a cidade 1, sair com um tíquete vermelho novamente e, por fim, visitar a cidade 3. Como você pode ver, se tornou realmente difícil para Poly, o Sapateiro, cumprir a tarefa, então ele pede que você o ajude. Ele quer saber se é possível escolher uma cidade para começar tal que ele possa visitar todas cidades da Nlogônia uma vez. Você pode ajudar Poly, o Sapateiro?"
    },
    {
        "nivel": "6",
        "assunto": "7",
        "numero": "1584",
        "saida": "Imprima para cada caso de teste o número de padrões de desbloqueio possíveis com exatos K segmentos considerando-se um grid N × N. Como esse número pode ser muito grande, imprima o resto que ele deixa por 109 + 7.",
        "entrada": "A entrada é composta por vários casos de teste, cada um numa linha e por sua vez constituído apenas de dois números inteiros: N e K (2 ≤ N ≤ 5, 0 ≤ K ≤ 1015).",
        "titulo": "Espertofone",
        "descricao": "A UFFS (União Federal dos Fabricantes de Selulares[sic]), uma empresa 100% brasileira, do grupo MEC (Mercado da Espanção[sic] Comercial), acaba de lançar o Espertofone, para competir com os smartphones importados. Os Espertofones rodam um sistema operacional próprio, batizado de Androido. Quando um usuário liga um Espertofone com Androido, aparece uma tela de desbloqueio com um grid de N × N botões. O usuário deve, então, sem desencostar seu dedo da tela, deslizá-lo pelos botões de modo a desenhar seu padrão de desbloqueio gravado anteriormente e, dessarte, liberar o aparelho para uso. O sistema sempre mantém na tela um segmento de reta com um extremo no último botão tomado e outro sob o dedo do usuário, e considera que o usuário toma um botão B se e somente esse segmento intercepta o centro de B. Diferentemente do que ocorre com o sistema da concorrência, no Androido o usuário pode repetir botões, desde que isso seja possível. A Figura ilustra um padrão de desbloqueio com K = 8 segmentos num grid 4 × 4, enumerando os segmentos. Perceba que, num grid 4 × 4, não é possível que o botão (3, 3) suceda o botão (1, 1) num padrão de desbloqueio, pois obrigatoriamente o segmento passaria pelo centro do botão (2, 2). Obviamente, nunca é possível também que um botão suceda a si próprio. Neste problema, considere que o dedo do usuário é tão fino quanto necessário para conectar botões que podem teoricamente suceder um ao outro. A UFFS quer agora provar que seu sistema é melhor que o da concorrência, calculando o número de padrões de desbloqueio possíveis com K segmentos."
    },
    {
        "nivel": "8",
        "assunto": "7",
        "numero": "1334",
        "saida": "Para cada caso de teste imprima Q + 1 linhas. Na i-ésima linha escreva a resposta para a i-ésima consulta. Se a informação dada pelas medições é suficiente para prever a anomalia no ponto consultado, então escreva um inteiro representando a anomalia no ponto consultado. Caso contrário escreva o caractere '*' (asterisco). Imprima uma linha contendo um único caractere '-' (hífen) após cada caso de teste.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeia linha contém cois inteiros M e Q representando respectivamente o número de medições e o número de consultas (1 ≤ M, Q ≤ 104). Cada uma das próximas M linhas descreve uma medição usando três inteiros X, Y e A, indicando que a anomalia medida no ponto (X, Y) é A (-107 ≤ X, Y ≤ 107 e -104 ≤ A ≤ 104). Após isso, cada uma das próximas Q linhas descreve uma consulta usando dois inteiros X' e Y', indicando que a anomalia no ponto (X', Y') deve ser prevista (-107 ≤ X', Y' ≤ 107). Todas as posições são medidas em blocos da cidade; o primeira coordenada aumenta de Oeste para Leste, enquanto a segunda coordenada aumenta de Sul para Norte. O ponto (0,0) está localizado na Avenida Merge. Você pode assumir que em cada caso de teste cada ponto não será medido mais de uma vez. Da mesma maneira, cada ponto não será consultado mais de uma vez. Você pode assumir que todas as medições são consistentes. O último caso de teste é seguido por uma linha contendo dois zeros.",
        "titulo": "Poluição Elétrica",
        "descricao": "Sortônia é a capital da província da Logônia do Norte. A cidade é definida com quase todas as suas ruas em uma grade quadrada alinhadas na direção Norte-Sul ou na direção Oeste-Leste. A única exceção é a Avenida Merge que vai na direção Sudoeste-Nordeste, dividindo os blocos da cidade ao longo de suas diagonais. Sortônia é também uma das cidades mais verdes da Nlogônia. A universidade local desenvolveu uma tecnologia para aproveitar o campo magnético da Terra para geração de energia. Como consequência, todas as interseções da Avenida Merge possuem geradores de força instalados, abastecendo todas as casas e comércios da cidade. A tecnologia foi elogiada pelos ambientalistas na época por ter eliminado a emissão de carbono da Sortônia, mas logo após sua introdução, milhares de abelhas e pássaros foram encontrados mortos na cidade. Confusa, a Rainha da Nlogônia ordenou os biofísicos do reino que investigassem o fenômeno. Após muito meses de estudos, eles descobriram que os geradores usados pelos Sortonianos criaram anomalias no campo magnético local. Os pássaros e abelhas que usam o campo magnético da Terra para guiar seu voo foram confundidos por essas anomalias, começaram a voar em círulos e eventualmente morreram por exaustão. De acordo com os modelos teóricos dos biofísicos, cada gerador cria uma anomalia que é representada por um valor inteiro. Cada anomalia propaga indefinidamente nas quatro direções cardeais. Pontos que não estão diretamente ao norte, sul, oeste ou leste do gerador não são afetados por ele. Por outro lado, se um ponto está alinhado com dois geradores então a anomalia naquele ponto é a soma das duas anomalias produzidas por esses geradores. Por exemplo, considere a figura abaixo que representa uma certa porção da Sortônia. A anomalia no ponto R é apenas aquela produzida pelo gerador naquele ponto enquanto a anomalia no ponto T é a soma das anomalia produzidas pelos geradores no ponto R e no ponto S. ​ Os biofísicos gostariam de medir as anomalias para algumas das interseções da cidade, mas essas medições requerem equipamentos caros e perícia técnica. Então eles planejam medir apenas um subconjunto das interseções da cidade e extrapolar os outros dados a partir deles. Prever uma anomalia a partir de um conjunto de medições pode requerer combinar várias delas de modos complicados. Então, a Rainha da Nlogônia ordenou que você escrevesse um programa que prevê as anomalias em certas interseções dadas as medidas préviamente feitas."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1907",
        "saida": "Imprima uma linha contendo um único inteiro que represente o número de cliques necessários para colorir toda a figura descrita na entrada.",
        "entrada": "A primeira linha da entrada consiste de dois inteiros positivos N e M (N, M ≤ 1.024), os quais representam a resolução da imagem. Cada uma das N linhas seguintes contém M caracteres, os quais podem ser . (ponto) ou o (letra ‘o’ minúscula), representando respectivamente um pixel branco ou um pixel preto.",
        "titulo": "Coloração de Cenários de Jogos",
        "descricao": "O Prof. Fernando Bevilacqua está muito preocupado com os cenários do seu mais novo jogo. Os contornos dos cenários já foram desenhados por um artista, restando ao Prof. Fernando apenas colori-los. No momento, cada cenário é uma imagem em que cada pixel está preto ou branco. Assim, quando o Prof. Fernando, em seu programa de coloração de imagens, clica num pixel branco para ser colorido com uma cor α, toda a região branca em que está o pixel selecionado recebe a cor α. Dizemos que um pixel branco A está na mesma região branca que um pixel branco B se existe um caminho entre A e B que passa apenas por pixels brancos e que considera as adjacências apenas nos sentidos horizontal e vertical. Por exemplo, são necessários 6 cliques para colorir a figura da esquerda."
    },
    {
        "nivel": "2",
        "assunto": "7",
        "numero": "1669",
        "saida": "Para cada caso de teste imprima uma linha com o número mínimo de mudanças requeridas para instalar todos os pacotes. Por conveniência, o drive de DVD está vazio antes da instalação e a inserção inicial de um disco conta como uma mudança. Da mesma forma, a remoção final de um disco conta como uma mudança, deixando o drive de DVD vazio após a instalação.",
        "entrada": "A entrada contém vários casos de teste. Cada teste começa com três inteiros N1,N2, D. Você pode assumir que 1 ≤ N1,N2≤ 50000 e 0 ≤ D≤ 100000. O primeiro DVD contém N1 pacotes, identificados pelos números 1,2, ...,N1. O segundo DVD contém N2 pacotes, identificados pelos números N1+1,N1+2, ..., N1+N2. Então seguem D especificações de dependências, cada uma consistindo de dois inteiros, xi,yi. Você pode assumir que 1 ≤ xi,yi ≤ N1+N2 para 1 ≤ i ≤ D. A especificação de dependência significa que a instalação do pacote xi requer a instalação prévia do pacote yi. Você pode assumir que não há dependência circular. O último caso de teste é seguido por três zeros.",
        "titulo": "Todos os Discos Considerados",
        "descricao": "Sistemas operacionais são grandes artefatos de software compostos de muitos pacotes. Você provavelmente lembra do tempo onde seu sistema operacional favorito era entregue em 21 disquetes, ou, alguns anos depois, em 6 CDs. Hoje em dia, será entregue em vários DVDs, cada um contendo dezenas de milhares de pacotes. A instalação de cada pacote talvez requeira que outros pacotes já estejam instalados. Assim sendo, se os pacotes fores distribuídos na mídia de forma inadequada, a instalação do sistema operacional completo requererá que você faça diversas mudanças na mídia, sendo que há apenas um dispositivo de leitura disponível, e.g, um drive de DVD-ROM. Uma vez que você tem que começar a instalação de alguma forma, haverá com certeza um ou mais pacotes que podem ser instalados independentemente de todos os outros pacotes. Dada uma distribuição de pacotes e uma lista de dependências entre os pacotes, você tem que calcular o número mínimo de mudanças na mídia requeridas para instalar todos os pacotes. Para sua conveniência, você pode assumir que o sistema operacional vem em exatamente 2 DVDs."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1391",
        "saida": "Para cada caso de teste na entrada, seu programa deve imprimir uma única linha, contendo -1 se não for possível cumprir os requisitos ou um inteiro representando a extensão do quase menor caminho encontrado.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N (2 <= N <= 500) e M (1 <= M <= 104), separados por um espaço, indicando, respectivamente, o número de pontos no mapa e o número de rotas de mão única conectando dois pontos diretamente. Cada ponto é identificado por um único inteiro entre 0 e N - 1. A segunda linha contém dois inteiros S e D, separados por um único espaço, indicando, respectivamente, os pontos de partida e de destino (S != D; 0 <= S, D < N). Cada uma das M linhas seguintes contém três inteiros U, V e P (U != V; 0 <= U, V < N; 1 <= P <= 103), separados por espaço, indicando a existência de uma rota de U para V com distância P. Existe no máximo uma rota de um ponto U até um ponto V, mas perceba que a existência de uma rota de U para V não implica a existência de uma rota de V para U e, se tal estrada existir, ela pode ter extensão diferente. O fim da entrada é indicado por uma linha contendo apenas dois zeros separados por um espaço.",
        "titulo": "Quase Menor Caminho",
        "descricao": "Achar um caminho que vai de um ponto inicial até um ponto de destino dados um conjunto de pontos e a extensão das rotas que os conectam é um problema já bem conhecido, e já até é parte de nosso dia-a-dia, uma vez que programas de caminho mínimo estão largamente distribuídos hoje em dia. A maioria das pessoas normalmente gosta bastante dessas aplicações já que elas tornam suas vidas mais fáceis. Bem, talvez nem tão mais fáceis. Agora que quase todo mundo tem acesso a aparelhos de GPS capazes de calcular os caminhos mais curtos a maioria das rotas que formam o caminho mais curto estão ficando lentas devido ao tráfego pesado. Como a maioria das pessoas tenta seguir o mesmo caminho, não vale mais a pena seguir essas direções. Com isso em mente, seu chefe pediu a você que desenvolvesse uma nova aplicação à qual somente ele vai ter acesso, poupando tempo sempre que ele tiver uma reunião ou qualquer evento urgente. Ele pede a você que o programa não deve dizer o menor caminho, mas o quase menor caminho. Ele define o quase menor caminho como o menor caminho que vai de um ponto inicial até um um ponto de destino de forma que nenhuma rota entre dois pontos consecutivos pertence a qualquer caminho mínimo entre o ponto de partida e o de destino. Por exemplo, suponha que a figura abaixo representa o mapa dado, com círculos representando localizações e linhas representando rotas diretas, de mão única com as distâncias indicadas. O ponto de partida está marcado como S e o de destino está marcado como D. As linhas em negrito pertencem a um caminho mínimo (nesse caso existem dois caminhos mínimos, cada um com extensão 4). Logo, o quase menor caminho seria o indicado com linhas pontilhadas (extensão 5), já que nenhuma rota entre dois pontos consecutivos pertence a nenhum caminho mínimo. Note que poderia existir mais de uma resposta possível, por exemplo, se a rota com extensão 3 tivesse extensão 1. Bem como poderia inexistir uma resposta certa."
    },
    {
        "nivel": "5",
        "assunto": "7",
        "numero": "1123",
        "saida": "Para cada caso de teste, o seu programa deve imprimir uma única linha, contendo um único inteiro T, o custo total mínimo necessário, em termos de pedágio, para que o veículo chegue ao destino.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém quatro inteiros N, M, C e K (4 ≤ N ≤ 250, 3 ≤ M ≤ N×(N−1)/2, 2 ≤ C ≤ N−1 e C ≤ K ≤ N−1), representando, respectivamente, o número de cidades do país, o número de estradas, o número de cidades na rota de serviço e a cidade em que o veículo foi consertado. As cidades são identificadas por inteiros de 0 a N−1. A rota de serviço é 0, 1, ... , C−1, ou seja, a origem é 0, de 0 passa para 1, de 1 para 2 e assim por diante, até o destino C−1. As M linhas seguintes descrevem o sistema rodoviário do país. Cada uma dessas linhas descreve uma estrada e contém três inteiros U, V e P (0 ≤ U, V ≤ N−1, U ≠ V, 0 ≤ P ≤ 250), indicando que há uma estrada interligando as cidades U e V com custo de pedágio P. O último caso de teste é seguido por uma linha contendo quatro zeros separados por espaço em branco.",
        "titulo": "Desvio de Rota",
        "descricao": "O sistema rodoviário de um país interliga todas as suas N cidades de modo que, a partir de uma cidade qualquer, é possível chegar a cada uma das outras cidades trafegando pelas estradas existentes. Cada estrada liga duas cidades distintas, tem mão dupla e um único posto de pedágio (o pedágio é pago nos dois sentidos de tráfego). As estradas não se intersectam a não ser nas cidades. Nenhum par de cidades é interligado por duas ou mais estradas. A Transportadora Dias oferece um serviço de transporte de encomendas entre as cidades. Cada encomenda deve ser levada de uma cidade A para uma outra cidade B. A direção da Transportadora Dias define, para cada encomenda, uma rota de serviço, composta por C cidades e C−1 estradas: a primeira cidade da rota de serviço é a origem da encomenda, a última o destino da encomenda. A rota de serviço não passa duas vezes pela mesma cidade, e o veículo escolhido para fazer o transporte de uma encomenda pode trafegar apenas pela rota de serviço definida. Certo dia, no entanto, o veículo que executava uma entrega quebrou e precisou ser levado para conserto em uma cidade que não está entre as cidades de sua rota de serviço. A direção da Transportadora Dias quer saber qual é o menor custo total, em termos de pedágio, para que o veículo entregue a encomenda na cidade destino, a partir da cidade em que foi consertado, mas com uma restrição adicional: se em algum momento o veículo passar por uma das cidades que compõem a sua rota de serviço, ele deve voltar a obedecer a rota de serviço."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1200",
        "saida": "Cada linha de entrada, com exceção das linhas que contém o comando \"I\", deve produzir uma linha de saída. A saída deve ser de acordo com o exemplo fornecido abaixo. Não deve haver espaço em branco após o último caractere de cada linha, caso contrário, sua submissão receberá Presentation Error.",
        "entrada": "A entrada contém N operações utilizando letras (A-Z,a-z) sobre uma árvore binária de Busca, que inicialmente se encontra vazia. A primeira linha de entrada contém a inserção de algum elemento. As demais linhas de entrada podem conter quaiquer um dos comandos descritos acima, conforme exemplo abaixo. O final da entrada é determinado pelo final de arquivo (EOF). Obs: Considere que não serão inseridos elementos repetidos na árvore.",
        "titulo": "Operações em ABP I",
        "descricao": "Marcela recebeu como trabalho de Algoritmos a tarefa de fazer um programa que implemente uma Árvore Binária de Pesquisa (ou Busca). O Programa deve aceitar os seguintes comandos: I n: Insere na árvore binária de pesquisa o elemento n. INFIXA: lista os elementos já cadastrado segundo o percurso infixo PREFIXA: lista os elementos já cadastrado segundo o percurso prefixo POSFIXA: lista os elementos já cadastrado segundo o percurso posfixo P n: pesquisa se o elemento n existe ou não. A qualquer momento pode-se inserir um elemento, visitar os elementos previamente inseridos na ordem infixa, prefixa ou posfixa ou ainda procurar por um elemento na árvore para saber se o elemento existe ou não."
    },
    {
        "nivel": "4",
        "assunto": "7",
        "numero": "1191",
        "saida": "Para cada caso de teste, imprima uma linha com o percurso posfixo (sub-árvore esquerda, sub-árvore direita, raíz).",
        "entrada": "A entrada irá conter um ou mais casos de teste. Cada caso de teste consiste em uma linha contendo duas strings representando o percurso prefixo e infixo de uma árvore binária. Ambas as strings consistem de letras maiúsculas, sem repetir. (Então elas não são maiores de 26 caracteres.) Entrada termina com EOF (fim de arquivo).",
        "titulo": "Recuperação da Árvore",
        "descricao": "A pequena Valentina gostava muito de brincar com árvores binárias. Seu jogo favorito era construir árvores binárias aleatórias com letras em maiúsculo nos nodos. Este é um exemplo de uma de suas criações:   D / \\ /   \\ B     E / \\     \\ /   \\     \\ A     C     G           /         /       F   Para salvar suas árvores para uso futuro, ela escreveu duas strings para cada árvore: o percurso prefixo (raíz, sub-árvore esquerda, sub-árvore direita) e o percurso infixo (sub-árvore esquerda, raíz, sub-árvore direita). Para o desenho acima o percurso prefixo é DBACEGF e o infixo é ABCDEFG. Agora, anos depois, olhando para as strings, ela notou que reconstruir as árvores era realmente possível, mas só porque ela não havia usado a mesma letra duas vezes na mesma árvore. Reconstruir a árvore a mão tornou-se chato. Então agora ela pede que você escreva um programa que faça o trabalho por ela!"
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "2032",
        "saida": "Para cada caso de teste imprima a mensagem \"Quantidade minima de passos = X\", onde X é o total necessário, seguido por todos os passos feitos para solucionar, cada passo deve ser separado por uma linha em branco, para melhor visualização de João. Caso não seja possível solucionar o problema imprima: \"Problema sem solucao\".",
        "entrada": "A entrada é composta por vários casos de teste, cada caso terá 3 linhas cada uma com 3 números de 0 a 8, onde o número zero um representa o espaço em branco. Assuma que o brinquedo sempre estará embaralhado. A entrada termina com o final do arquivo.",
        "titulo": "Jogo dos Oito",
        "descricao": "João é um menino que adora brincar com jogos de lógica, ele passa diversas horas de seu dia solucionando puzzles. Atualmente o jogo que ele está gastando mais horas brincando é o Sliding puzzle, também conhecido como Jogo dos Oito, no qual ele tem em mãos um tabuleiro de 3 linhas e 3 colunas, onde cada elemento desse tabuleiro possui um número ou um espaço em branco. O objetivo desse jogo é simples, dado um tabuleiro embaralhado (Figura 1), João deve deixá-lo ordenado (Figura 2) e o único movimento possível para solucionar o problema é mover algum número para o espaço em branco. Resolver o brinquedo não é um problema para João, ele já está fazendo isso sem dificuldades, porém ele ficou intrigado em saber qual é quantidade mínima de movimentos necessários para resolver. Figura 1 - Figura 2 O que você precisa fazer para ajudar João na sua curiosidade é simples, ele te dará a configuração inicial do tabuleiro e você deverá mostrar, caso exista, a menor quantidade de passos possíveis para solucionar o brinquedo e quais passos são necessários para encontrar a solução."
    },
    {
        "nivel": "7",
        "assunto": "7",
        "numero": "1057",
        "saida": "Para cada caso, imprima o número do caso seguido do menor tempo requerido. Se for impossível movê-los como descrito, imprima ‘trapped’ ao invés de imprimir o tempo. Note que o primeiro caso de teste corresponde à figura acima.",
        "entrada": "A primeira linha de entrada é um inteiro T (T < 50), que indica o número de casos de testes. Cada caso inicia com um inteiro N (2 < N < 10).  Cada uma das próximas N linhas contém N caracteres cada que preencherão o labirinto.",
        "titulo": "Chegando Junto",
        "descricao": "Você está jogando um jogo de computador no qual três robôs (Aneed, Ben e Cindy) estão presos em um labirinto. Inicialmente todos os três estão situados em três localizações diferentes no labirinto. Existem três saídas através das quais os robôs têm que sair. Como esperado, há vários obstáculos no labirinto e os robôs não podem passar por eles. O labirinto pode ser modelado como uma grade quadrada, com células NxN. Os robôs são colocados em três diferentes células no labirinto. Você pode comandá-los a se mover. Um único comando será ativado para os três robôs simultaneamente. Um robô irá mover-se para uma nova posição se for uma célula vazia dentro do labirinto ou se for uma das células alvo. Caso contrário, o comando será ignorado para aquele robô. A sua tarefa é comandá-los de forma  que todos eles cheguem nas três células alvo (em qualquer ordem). Cada movimento leva 1 unidade de tempo e consiste em: Move North - O robô se move uma célula para o norte. Move East - O robô se move uma célula para o leste. Move South - O robô se move uma célula para o sul. Move West - O robô se move uma célula para o oeste. Cada célula consiste em um dos seguintes caracteres: A – Posição Inicial de Aneed B – Posição Inicial de Ben C – Posição Inicial de Cindy . – Célula vazia # - Obstáculo X – Célula alvo Assuma que para todo labirinto cada uma das três letras  (A B C) aparecerá exatamente uma vez e cada X aparecerá 3 vezes."
    },
    {
        "nivel": "3",
        "assunto": "7",
        "numero": "1956",
        "saida": "A linha da saída deve consistir apenas de dois valores, separados por um espaço em branco, de modo que o primeiro represente o número de famílias élficas que habitam a floresta de acácias e o segundo represente o custo mínimo necessário para reconstruir as pontes visando satisfazer a tradição antiga.",
        "entrada": "A primeira linha da entrada consiste de um único inteiro N (1 ≤ N ≤ 104), o qual representa o número de habitações élficas na floresta de acácias, as quais são designadas pelos inteiros de 1 a N. Cada i-ésima (1 ≤ i ≤ N - 1) das N - 1 linhas seguintes consiste de um inteiro não-negativo k seguido por k pares de inteiros j e cij (i < j ≤ N, 1 ≤ cij ≤ 106), indicando que havia uma ponte entre as moradias i e j e que reconstruí-la custa cij metros de corda élfica. Cada ponte é descrita exatamente uma vez na entrada e não há mais de 106 pontes ao todo.",
        "titulo": "Acácias",
        "descricao": "Talvez você não saiba, mas nem todos os elfos foram embora para Valinor. Há lendas segundo as quais alguns noldor vivem numa floresta de acácias ao norte de Chapecó, embora mortal algum jamais os tenha visto, pois sobre suas habitações paira um encantamento de ocultação entoado pela Senhora Galadriel pouco antes de tomar o último barco para as Terras Imortais. Cada habitação está construída na copa de uma acácia, e há várias pontes de corda élfica conectando pares de habitações, satisfazendo a seguinte tradição antiga: se dois elfos pertencem à mesma família mas moram em casas diferentes, então é possível sair da habitação onde um mora e chegar na habitação onde o outro mora tomando um caminho composto apenas de pontes de corda élfica. Reciprocamente, se dois elfos não pertencem à mesma família, eles não moram na mesma casa, e qualquer modo de sair da casa de um e chegar na casa do outro precisa obrigatoriamente passar pelo chão. A Terra já enfrentou ameaças terrível, como as de Morgoth e de Sauron. Porém, nenhuma se compara com a ameaça que os próprios homens estão sendo para a Terra. Pois noutro dia um fumante descuidado jogou uma bituca de cigarro próximo à floresta de acácias e o fogo se alastrou. Os elfos conseguiram salvar suas habitações, mas todas as pontes foram destruídas. Agora, eles querem reconstruir as pontes, mas não todas, já que as cordas élficas dos antigos noldor lhes são muitíssimo preciosas. Eles querem reconstruir apenas as pontes que realmente são necessárias para que a tradição antiga mencionada seja novamente satisfeita, e utilizando o mínimo possível de corda élfica. A tarefa de decidir quais pontes devem ser reconstruídas foi designada a você. Se você não encontrar um meio, ninguém mais encontrará."
    },
    {
        "nivel": "6",
        "assunto": "8",
        "numero": "1844",
        "saida": "Imprima uma linha constituída unicamente por um valor que representa a soma total ótima dos comprimentos das trilhas que conectam as relíquias. Como a empresa contratada para construir as trilhas cobra por unidade inteira de trilha construída, se o valor não for inteiro arredonde-o para cima.",
        "entrada": "A primeira linha da entrada é constituída unicamente por um inteiro N (1 ≤ N ≤ 103), o qual representa o número de relíquias encontradas. Cada uma das N linhas seguintes descreve uma relíquia através de quatro inteiros, xA, yA, xB e yB (0 ≤ xA, yA, xB, yB ≤ 104), os quais representam as coordenadas dos extremos (xA, yA) e (xB, yB) do segmento de reta, de comprimento não necessariamente positivo, que representa a relíquia.",
        "titulo": "As Relíquias da Morte",
        "descricao": "A cultura dos povos nativos do Brasil está morrendo! Enquanto que se estima que no séc. XV havia mais de mil povos indígenas no Brasil, hoje há o registro de apenas 215 povos. Recentemente, foram descobertas na região do oeste catarinense relíquias fósseis atribuídas a um povo indígena extinto. As relíquias tratam-se provavelmente de bases de muros de edificações. A figura abaixo ilustra algumas relíquias encontradas representando cada relíquia por um segmento de reta. Agora, o Governo quer transformar todas as terras em que estão as relíquias em área de preservação ambiental. Para facilitar o trabalho dos arqueólogos, o governo também construirá trilhas, cada uma conectando duas relíquias. A intenção é construir o mínimo possível de trilha, a fim de que o impacto ambiental seja o menor possível, mas que haja caminho entre quaisquer duas trilhas. A figura abaixo ilustra uma maneira de construir trilhas entre as relíquias da figura acima de modo a minimizar a soma total dos comprimentos das trilhas."
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "2043",
        "saida": "Para cada caso de teste, você deve imprimir uma única linha contendo um número racional, o que representa a área do perfil de montanha correspondente. Aproxime o resultado para o numero mais próximo de dois dígitos decimais. Em caso de empate, aproxime para cima. Note-se que você deve sempre usar exatamente dois dígitos depois do ponto decimal, mesmo que isso signifique que termine com um zero.",
        "entrada": "Cada caso de teste é descrito usando várias linhas. A primeira linha contém um único número inteiro N, indicando o número de montanhas (1 ≤ N ≤ 1000). Cada uma das N linhas seguintes descreve uma montanha usando três números inteiros I, D e H, que representam, respectivamente, a coordenada X do ponto de extremidade esquerda da base, o mesmo para a extremidade direita da base, e a altura da montanha (1 ≤ I, D, H ≤ 105 com I <D). Em cada caso de teste não existem duas montanhas que são exatamente a mesma (ou seja, com valores iguais para os três parâmetros I, D e H). O final da entrada é indicado por uma linha contendo -1.",
        "titulo": "Montanha Alta",
        "descricao": "Para sair de férias, Horácio e Hernán sacrificaram sua participação em uma importante competição de programação. Enquanto você estiver nessa competição, eles estão perto do Andes dirigindo ao longo da estrada 40, na Argentina, desfrutando de uma vista agradável das montanhas no horizonte. Neste momento, o céu sobre a rodovia é limpo, azul, enquanto a parte visível das montanhas é um perfil apresentando texturas ricas e atraentes. Isso preocupa Horácio e Hernán, porque temem que as imagens que estão a fotografas vão ser muito caras para imprimir corretamente. Por esta razão, na próxima parada irão pegar os seus computadores portáteis e escrever um programa para calcular a área do perfil de montanha que tem de ser impresso em cada imagem. Você pode terminar este programa antes deles? Horácio e Hernán irão modelar o perfil da montanha da seguinte maneira. Cada montanha é representada por um triângulo isósceles cuja base esta sobre o eixo X do plano XY. Dois lados de igual comprimento conectam as extremidades da base ao vértice oposto do triângulo, que é a ponta da montanha correspondente. Para descrever a posição e a forma do triângulo, usámos as coordenadas ao longo do eixo X dos pontos de extremidade da base, juntamente com a altura da montanha. A figura abaixo é o modelo de um perfil formado por 4 montanha montanhas que são sobrepostas uma com a outra. A área da superfície do perfil da montanha que tem que se calcular é marcado com listras. A montanha menor da figura é descrita pelos valores I = 4 (o ponto de extremidade esquerda da base de montanha), D = 5 (a extremidade direita da base de montanha) e H = 1 (a altura da montanha) Neste problema, você terá a representação do perfil de montanha, e você tem que encontrar a área da união de todos os triângulos correspondentes, de tal forma que as partes sobrepostas são contadas apenas uma vez."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1679",
        "saida": "Para cada caso de teste imprima a quantidade de gelo e água, em gramas, e a temperatura final da mistura em graus Celsius. Todos os números devem ser arredondados para um dígito. Adote a saída de exemplo como o formato esperado.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste consiste de quatro números reais mw, mi, tw, ti. A massa de água mw e a massa de gelo mi são ambas não-negativas, dados em gramas, e mw + mi > 0. A temperatura da água tw e a temperatura do gelo ti são informadas na sequencia, ambos em graus Celsius, e você pode assumir que -30 < ti ≤ 0 ≤ tw < 100. O último caso de teste é seguido por quatro zeros.",
        "titulo": "Bebida, com Gelo",
        "descricao": "Uma boa bebida é sempre servida com gelo. Dito isto, a quantidade de gelo é o que faz a diferença. Se for muito, a bebida será bem gelada, no entanto, isso é um pouco de fraude já que poderia haver menos gelo (e mais Vodka, por exemplo). Por outro lado, se há muito pouco gelo a bebida fica quente, o que é inaceitável. Você deve ajudar o garçom, é claro que não com a mistura nem com a bebida, mas com o cálculo do resultado esperado de tais misturas. Para facilitar as coisas, vamos supor que a água pura é misturada com gelo em um sistema fechado, isto é, não há nenhum problema com a temperatura exterior ou o aquecimento da garrafa, etc. Portanto, depois de um algum tempo passou, o sistema pode ser considerado como equilibrado (não há nenhuma outra alteração na temperatura e não há mais derretimento ou congelamento). Sua tarefa é calcular a temperatura final deste sistema balanceado e a quantidade de gelo e de água neste estado de equilíbrio. Como você conhece da física, é necessário 4.19 Joules para aquecer um grama de água em um Kelvin, enquanto é necessário 2.09 Joules se for gelo. Nós definimos as capacidades cw = 4.19 J/(g*K) e ci = 2,09 J/(g*K). Para derreter um grama de gelo é necessário 335 Joules, onde a temperatura permanece constante em zero. Nós definimos a constante em = 335 J/g. A energia térmica total do gelo e da água antes do experimento são iguais à energia térmica ao final da mistura. A figura abaixo mostra a energia de um grama de gelo, mistura-gelo-água, ou água, onde a temperatura é medida em relação a -30 graus Celsius. O salto em 0 graus representa o derretimento do gelo para a água. A quantidade de energia obtida é proporcional à quantidade de gelo já derretido."
    },
    {
        "nivel": "6",
        "assunto": "8",
        "numero": "1137",
        "saida": "Para cada caso de teste, imprima uma única linha com um único inteiro representando o número de pontos em um dos maiores subconjuntos da entrada que são cocirculares.",
        "entrada": "Cada caso de teste se estende por várias linhas. A primeira linha contém um inteiro N representando o número de pontos no conjunto (1 ≤ N ≤ 100). Cada uma das próximas N linhas contém dois inteiros X e Y representando as coordenadas de um ponto do conjunto (-104  ≤ X,Y ≤ 104). Em cada caso de teste, não haverá dois pontos com mesma localização. O último caso de teste é seguido por uma linha contendo apenas um zero.",
        "titulo": "Pontos Cocirculares",
        "descricao": "Você provavelmente sabe o que é um conjunto de pontos colineares: é um conjunto de pontos tal que existe uma linha reta que passa através de todos os pontos. Um conjunto de pontos cocirculares é definido da mesma forma, mas ao invés de uma linha reta, nós queremos saber se existe um círculo tal que todos os pontos do conjunto encontram-se sobre seu perímetro. A International Collinear Points Center (ICPC) designou a você a seguinte tarefa: dado um conjunto de pontos, calcule o tamanho do maior subconjunto de pontos cocirculares."
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "1693",
        "saida": "Para cada caso de teste, imprima uma única linha contendo 'Y' se o alcance do canhão é maior que o raio do campo, ou 'N' caso contrário.",
        "entrada": "Existem vários casos testes. Cada caso de teste consiste de uma única linha. Cada linha contém 4 inteiros, R, H, V, e G. Todos os valores dados são maiores que 0 e menores ou iguais a 10000. Todas as distâncias são dadas em metros e todas as unidades de tempo em segundos.",
        "titulo": "Apenas Outro Problema de Física",
        "descricao": "Rafael Richman é um garoto muito rico. Ele está prestes a completar 34 anos e pediu de aniversário uma arena de água para brincar com seus amigos. A arena consiste de uma campo circular plano de raio R. No centro do campo, existe uma torre de altura H. No topo da torre, existe um canhão que atira água com velocidade inicial V. Para deixar as coisas mais interessantes, sua mãe Matilda Richman comprou um dispositivo que altera a gravidade G da arena. Dadas todas as informações sobre a arena, sua tarefa é determinar se a água lançada pelo canhão consegue atravessar campo. Você pode assumir que a diferença entre o alcance do canhão e o raio do campo é sempre maior que 0.01. Rafael é um amante da física, e pode dar-lhe as equações necessárias para resolver o problema: X(t) = Vcos(a)t Y(t) = Vsen(a)t - Gt²/2 Onde X e Y são as coordenadas da água em função de t, t é o tempo decorrido desde o lançamento da água pelo canhão e \"a\" é o ângulo do lançamento com a horizontal."
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "1223",
        "saida": "Para cada caso de teste imprima uma linha contendo um único número, com exatamente duas casas decimais, indicando o maior diâmetro de bolinha tal que esta consiga percorrer todo o brinquedo.",
        "entrada": "A primeira linha de um caso de teste contém um inteiro N (1 ≤ N ≤ 103) indicando o número de aletas do brinquedo. A segunda linha contém dois inteiros L (1 ≤ L ≤ 103) e H (1 ≤ H ≤ 103), indicando respectivamente a distância entre as hastes e a altura das hastes do brinquedo. A haste esquerda do brinquedo está na posição 0 do eixo de ordenadas X, de forma que a haste direita está na posição L do eixo X. Cada uma das N linhas seguintes descreve uma aleta. As aletas são descritas da mais alta para a mais baixa, de forma alternada em relação à haste na qual a aleta está conectada. A aleta mais alta do brinquedo (a primeira a ser descrita) tem a extremidade ligada à haste esquerda; a segunda aleta mais alta (a segunda a ser descrita) tem a extremidade ligada à haste direita, assim alternadamente. As aletas ímpares têm a extremidade ligada à haste esquerda, as aletas pares têm a extremidade ligada à haste direita. Cada aleta é descrita em uma linha contendo três números inteiros Yi, Xf (0 < Xf < L) e Yf (0 ≤ Yf ≤ H), separados por um espaço em branco. (Xf , Yf) indica a coordenada do final da aleta; para aletas ímpares a coordenada do início da aleta é (0, Yi (0 ≤ Yi ≤ H)), e para aletas pares a coordenada do início da aleta é (L, Yi ). Para todas as aletas Yi > Yf (ou seja, há um declive entre o início e o final da aleta), e o comprimento da aleta é menor do que a largura do brinquedo. Além disso, para duas aletas consecutivas A e B, Yfa >= YiB (ou seja, o final da aleta A tem altura maior do que ou igual ao início da aleta B). Considere que as aletas são muito finas, de forma que a sua espessura pode ser desconsiderada, e que a sua largura é sempre maior do que o diâmetro da bolinha (ou seja, a bolinha sempre tem espaço lateral para deslizar pela aleta).",
        "titulo": "Tobogan de Bolinhas",
        "descricao": "Uma fábrica quer produzir um tobogan de brinquedo como o da figura abaixo, composto de duas hastes de madeira sustentando aletas que se alternam nas duas hastes. Uma bolinha de aço é solta na aleta mais alta do tobogan; sob efeito da gravidade, a bolinha desliza pelas aletas, terminando por sair do brinquedo. O projeto do brinquedo, contendo as especificações do tamanho, posição e inclinação das hastes e de cada aleta, foi feito pelo dono da fábrica, e milhares de unidades já estão sendo confeccionadas na China. O gerente da fábrica foi incumbido de comprar as bolinhas de aço, mas antes de fazer o pedido das milhares de bolinhas quer saber o diâmetro máximo da bolinha, para que esta não pare no meio do brinquedo. Figura 1: Dois exemplos: em (a) a bolinha chega ao final, e (b) a bolinha para no meio do brinquedo e não chega ao final. O gerente da fábrica quer que você escreva um programa que, dadas as especificações do brinquedo, determine o diâmetro máximo da bolinha para que esta não pare no meio do brinquedo."
    },
    {
        "nivel": "2",
        "assunto": "8",
        "numero": "1039",
        "saida": "Para cada instância imprima uma única linha contendo MORTO, se o caçador morre, ou RICO se o caçador consegue colher a flor.",
        "entrada": "A entrada é composta por diversas instâncias e termina com final de arquivo (EOF). Cada instância consiste em uma linha com seis inteiros, R1 (1 ≤ R1) , X1(|X1|), Y1(|Y1|), R2 (R2 ≤ 1000), X2(|X2|), Y2 (Y2 ≤ 1000). O círculo desenhado pelo caçador possui raio R1 e centro (X1; Y1). O círculo representando a área da flor possui raio R2 e centro (X2; Y2).",
        "titulo": "Flores de Fogo",
        "descricao": "Nos dias atuais uma flor de fogo não é algo considerado estranho para muitos jovens.  Isso porque um famoso jogo de videogame popularizou esse tipo de flor. Nesse jogo o protagonista ganhava superpoderes ao tocar em uma flor de fogo, passando a atirar pequenas bolas de fogo para derrotar seus inimigos. No entanto, já se falava sobre flores de fogo há muito tempo atrás. Na mitologia polonesa, flores de fogo são flores místicas de grande poder guardadas por espíritos malignos. Ela possuía esse nome porque brilhava tanto que era impossível olhá-la diretamente. Quem possuísse uma flor dessas ganharia a habilidade de ler a mente de outras pessoas, encontrar tesouros escondidos e repelir todos os males. Para obter uma flor de fogo, a pessoa deveria procurá-la em uma floresta antes da meia-noite na véspera do Noc Kupały. Exatamente à meia-noite ela floresceria. Para colhê-la seria preciso desenhar um círculo em volta dela. Parece uma tarefa fácil, no entanto, os espíritos malignos que guardam a flor tentariam de tudo para distrair qualquer um tentando colher a flor. Se a pessoa falhasse ao tentar desenhar um círculo em volta da flor, teria sua vida sacrificada. Dados dois círculos, um desenhado por um ambicioso caçador de flores de fogo e outro representando a área da flor, sua tarefa é determinar se o caçador morre ou fica rico com sua conquista."
    },
    {
        "nivel": "9",
        "assunto": "8",
        "numero": "2094",
        "saida": "Imprimir na saída uma linha contendo o número que representa o raio mínimo de um círculo que abrange pelo menos P plantas. Imprima o resultado usando exatamente 4 dígitos após o ponto decimal, arredondando, se necessário.",
        "entrada": "A primeira linha contém dois inteiros N e P, indicando, respectivamente, a quantidade de plantas no jardim e a quantidade mínima de plantas que Florêncio quer cortar (1 ≤ P ≤ N ≤ 500). Cada uma das N linhas seguintes descreve uma planta diferente usando dois inteiros X e Y, que representam as coordenadas da planta no plano XY (1 ≤ X, Y ≤ 105). Não há duas plantas na mesma posição (que têm as mesmas coordenadas).",
        "titulo": "Flores",
        "descricao": "Na Babilônia crescem algumas plantas com flores que são valorizados entre os habitantes. Florêncio é um habitante da Babilônia que tem um jardim com N plantas destas espécies e quer coletar algumas de suas flores. Como Florêncio é muito preguiçoso, não quer trabalhar duro para recolher as flores. Portando, ele decidiu andar ate algum ponto do seu jardim, e então, com um movimento circular de sua foice, ele deve cortar uma boa quantidade de plantas para depois coletar suas flores. Florêncio é muito habilidoso usando a foice, então ele irá alcançar com ela um círculo perfeito centrado onde ele está, o que irá permitir a ele cortar todas as plantas dentro do círculo, incluindo sua borda. Quanto mais alto Florêncio levantar sua foice, maior será o raio do círculo que ele irá alcançar. Ele quer cortar pelo menos P plantas, mas a sua preguiça é tanta que ele quer fazer isso levantando sua foice o mínimo possível. Florêncio conseguiu uma imagem de satélite do seu jardim, onde todas as suas plantas aparecem, e além disso conseguiu alguém para converter essa imagem em uma lista onde cada planta é representada por suas coordenadas em um plano XY. Agora ele está sentado do lado de fora, com sua foice na mão, esperando o seu time dizer a ele o raio mínimo de um círculo que cobre pelo menos P plantas."
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "1571",
        "saida": "Para cada linha de entrada gera-se uma linha de saída. Cada linha conterá sete números de ponto flutuante t1, t2, t3, t4, t5, t6 e t7. Aqui t1, t2, t3, t4, t5, t6 e t7 denota o tamanho do lado do triângulo para cada quadrado mostrado na figura, respectivamente. Todos os números de ponto flutuante devem ter dez dígitos depois da virgula. O saída será checada com um programa especial de correção, então erros pequenos de precisão serão ignorados.",
        "entrada": "A entrada contém várias linhas. Cada linha contém um único número de ponto flutuante S (0<=S<=10000) no qual denota o lado do quadrado. A entrada é terminada por final de arquivo (EOF).",
        "titulo": "Um Quadrado & Triângulos Equiláteros",
        "descricao": "As figuras 1, 2, 3, 4, 5, 6 e 7 mostram como 1, 2, 3, 4, 5, 6 e 8 triângulos equiláteros podem ser postos de forma ideal dentro de um quadrado. Obviamente, o tamanho do quadrado permanece igual e os triângulos da figura 1 a 7 irão diminuir. Dado o tamanho do quadrado, você terá que achar os lados dos triângulos para todas as sete figuras. Você pode assumir que a imagem é simétrica ao longo de um certo eixo. Perceba que eu estou pedindo para você mostrar o valor decimal exato da solução e não um valor aproximado."
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "1455",
        "saida": "Para cada instância, imprima uma linha dizendo Instancia k, onde k é o número da instância atual. Na segunda linha, imprima a coordenada x e a coordenada y do centro e o raio da circunferência. Após cada instância, seu programa deve imprimir uma linha em branco.",
        "entrada": "Esse problema é composto por várias instâncias. A primeira linha é composta por um inteiro n (2 ≤ n ≤ 100), e indica o número de cidades. As próximas n linhas contêm a descrição do posicionamento das cidades a partir de suas coordenadas x e y no plano. As coordenadas são números reais. Seu programa deve encerrar a execução quando 0 for o valor de n dado na entrada.",
        "titulo": "Final do ICPC",
        "descricao": "Como todos sabemos, ainda não foi decidido o local da próxima ﬁnal do ICPC. Desta vez o diretor da competição, Prof. Poucher, tentou escolher uma sede que, de alguma forma, ﬁcasse o mais central possível para os vários participantes. Para resolver isso, em um grande mapa ele marcou a posição dos participantes prováveis da ﬁnal. De posse desses dados o Prof. Poucher deseja escolher a sede mais central possível, computando o centro e o raio da menor circunferência que cobre todas as cidades marcadas no mapa (uma cidade está coberta se estiver no interior ou borda desta circunferência)."
    },
    {
        "nivel": "8",
        "assunto": "8",
        "numero": "1646",
        "saida": "Para cada caso de teste, imprima uma linha com a distância máxima euclidiana da origem a uma árvore visível. A distância de uma árvore deve ser medida utilizando a ponta da árvore mais próxima da origem, não importa se este ponto é, de fato, visível ou não. Imprima a resposta com três dígitos depois do ponto decimal.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de cada caso de teste contém um inteiro n (1 ≤ n ≤ 1000), onde n especifica quantas árvores existem no mapa. As seguintes n linhas contém três inteiros xi, yi, ri (-10000 ≤ xi, yi ≤ 10000, 1 ≤ ri ≤ 1000), onde (xi, yi) é o centro do círculo que representa tronco i, e ri é o raio do círculo. Pode-se presumir que não há dois círculos da entrada que se interceptam, ou seja, para quaisquer dois círculos, a distância entre os seus centros é mais do que a soma dos seus raios. Além disso, você pode assumir que nenhum círculo contém a origem. O último caso de teste é seguido por uma linha contendo um zero. Dica: No segundo caso de teste, as quatro primeiras árvores bloqueiam a visão de todas as árvores mais longe do que estas quatro árvores.",
        "titulo": "Floresta",
        "descricao": "Bruce Force está na floresta. Ele se pergunta qual é o tronco de árvore mais distante que não está bloqueado, a partir de seu ponto de vista, por outros troncos de árvores. Bruce fez um mapa das árvores da floresta. O mapa mostra a sua posição atual como a origem de um sistema de coordenadas cartesianas. Árvore i é ilustrada no mapa como um círculo com centro (xi, yi) e raio ri. Você pode assumir que um tronco de árvore é visível se e somente se existe um segmento de linha da origem do mapa (0,0) até um ponto na borda do círculo, que representa o tronco da árvore, onde este segmento de linha não cruza ou tocar outro círculo."
    },
    {
        "nivel": "6",
        "assunto": "8",
        "numero": "1665",
        "saida": "Retorne uma linha de saída para cada caso de teste. Escreva \"Fail!\" se não há lugar à esquerda na parede onde a pintura poassa ser colocada sem sobrepor outra pintura. Caso contrário, escreva as coordenadas onde o canto inferior esquerdo da pintura deve ser colocado. No caso de haver mais de uma solução, selecione a solução com uma coordenada y, e diminua os laços mínimos utilizando o mínimo coordenada x. A seguinte imagem representa o segundo caso de teste:",
        "entrada": "A primeira linha do ficheiro de entrada contém um número que representa o número de casos de teste a seguir. Cada caso de teste começa com uma linha contendo três números n, w e h. n é o número de quadros já pendurados na parede, w é a largura da parede e h é a altura da parede. As próximas n linhas contêm quatro números inteiros x1, y1, x2, y2 cada (0 ≤ x1 < x2 ≤ w, 0 ≤ y1 < y2 ≤ h); as coordenadas x fornecem a distância para o lado esquerdo da parede, as coordenadas y fornecem a distância até ao fundo da parede. (x1, y1) é a posição do canto inferior esquerdo de uma pintura, (x2, y2) é a posição do canto superior direito. A última linha de cada caso de teste contém as dimensões da próxima pintura para ser colocada, primeiro a sua largura w', então sua altura h' (1 ≤ w' ≤ w, 1 ≤ h ≤ 'h). Você não tem permissão para girar a pintura. Você pode supor que 0 ≤ n ≤ 200 e 1 ≤ w, h ≤ 1000000. Além disso, todas as pinturas já pendurados não se sobrepõem.",
        "titulo": "Decorando a Parede",
        "descricao": "Depois de construir sua mansão, o Sr. Rico não ficou satisfeito com as cores de suas paredes. para ele as paredes estão muito brancas. Para mudar isso, ele começou pendurar quadros de sua rara coleção. Mas logo percebeu que é muito difícil encontrar um lugar na parede onde uma pintura possa ser colocada sem sobrepor outra pintura. Agora ele precisa de um programa que informe a ele, onde colocar a próxima pintura sem mover qualquer outra pinturajá colocada na parede,(ou informe que isso é impossível). As pinturas tem formato retangular e serão colocadas paralelamente ao lado da parede. Se não houver problemas o Sr. Rico irá lhe recompensar com uma bela recompensa, vá em frente e resolva o problema."
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "1504",
        "saida": "Para cada caso de teste o seu programa deve imprimir YES se existir tal fodovia e No se não for possível construí-la.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. A primeira linha da entrada tem o número N. Seguem N (1 < N <= 100000) linhas, onde a linha i contem o par Xi, Yi (-1000 <= Xi, Yi <= 1000) que representam as coordenadas da casa i.",
        "titulo": "Curo Railroad",
        "descricao": "Curo, o prefeito de Curoland, deseja construir uma ferrovia para que os cidadãos tenham um melhor transporte. A ferrovia vai ser uma linha reta que vai atravessar a cidade e a dividirá em duas regiões sem passar em nenhuma casa. Curo quer que cada região tenha o mesmo número de casas e, pra ser justo com os cidadãos de cada região, a soma das distâncias das casas de cada região até a ferrovia tem que ser a mesma. O problema é que Hailo, o melhor engenheiro da cidade, não tem certeza se é possível construir uma ferrovia com estas características. Ajude Hailo em seu trabalho."
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "1468",
        "saida": "Para cada consulta da entrada, seu programa deve imprimir uma única linha. Se o balão escapar do salão, a linha deve conter um único inteiro X, indicando a coordenada x pela qual o balão escapa do salão. Caso contrário, a linha deve conter dois inteiros X e Y indicando a posição (x, y) em que o balão fica retido no teto.",
        "entrada": "A entrada contém vários casos de teste. A primeira linha de um caso de teste contém dois inteiros N (1 ≤ N ≤ 105) e C (1 ≤ C ≤ 105) indicando, respectivamente, o número de segmentos de reta do teto e o n´umero de consultas. Cada uma das N linhas seguintes contém quatro inteiros X1, Y1, X2, Y2, (0 ≤ X1,X2 ≤ 106, 0 X2) descrevendo um segmento de reta do perfil do teto, com extremos de coordenadas (X1, Y1) e (X2, Y2). Obs.: não há dois valores de coordenadas X iguais, considerando todos os segmentos. Cada uma das C linhas seguintes descreve uma consulta e contém um inteiro X (0 ≤ X ≤ 106) , indicando que a consulta quer determinar o que acontece com um balão solto no ponto de coordenada (X, 0).",
        "titulo": "Balão",
        "descricao": "Uma das principais dificuldades de organizar uma Maratona de Programação é recolher os bal˜oes que escapam e ficam presos no teto do salão: muitas vezes o contrato com o dono do salão exige que este seja entregue limpo logo após o evento, sob pena de multa. Este ano a organização da Maratona está mais previdente: ela tem o desenho do teto do salão, e quer sua ajuda para determinar o que pode acontecer com um balão, dependendo da posição no solo onde ele é solto (isto é, se é bloqueado pelo teto ou se escapa para o exterior do salão). O teto do salão é formado por vários planos que, vistos de lado, podem ser descritos por segmentos de reta, como mostrado na figura abaixo: O balão pode ser considerado pontual. Quando um balão toca um segmento do teto que é horizontal, ele fica preso. Quando um balão toca um segmento que é inclinado, o balão desliza até o ponto mais alto do segmento e escapa, podendo escapar completamente do salão ou podendo tocar em mais segmentos. Não há pontos em comum entre os segmentos que formam o teto. Por exemplo, se o balão for solto nas posições marcadas como a ou b, será bloqueado na posição de coordenadas (2, 5); se o balão for solto na posição marcada como c, será bloqueado na posição de coordenadas (6, 5); e se o balão for solto na posição marcada como d, não será bloqueado e escapará para fora do salão na posição de coordenada x = 7. Escreva um programa que, dada a descrição do teto do salão como segmentos de reta, responde a uma série de consultas sobre a posição final de bal˜oes soltos do piso do salão."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1291",
        "saida": "Para cada linha de entrada, imprima uma única linha com a área total dos três tipos de regiões (preenchido com padrões diferentes conforme a imagem acima). Estes três números deverão ser números de ponto flutuante com três dígitos depois do ponto decimal. O primeiro número irá indicar a área da região listrada (central), o segundo número irá indicar a área total das regiões com pontos e o terceiro número irá indicar a área da região quadriculada (mais externa).",
        "entrada": "A entrada contém vários casos de teste e termina com fim de arquivo (EOF). Cada caso de teste é composto por uma linha contendo um número de ponto flutuante a (0 ≤ a ≤ 10000) que indica o tamanho de um lado do quadrado.",
        "titulo": "Será Isso Integração?",
        "descricao": "Na imagem abaixo você pode ver um quadrado ABCD, onde AB = BC = CD = DA = a. Quatro arcos são desenhados tomando os quatro vértices A, B, C, D como centros e a distância a como o raio. O arco que é desenhado tendo o vértice A como seu centro, tem início no vértice vizinho B e termina no vértice vizinho D. Todos os outros arcos são desenhados de forma semelhante. Desta forma são criadas regiões distintas que são preenchidas (hachuradas) por três padrões diferentes e que podem ser observadas na imagem abaixo. Você terá que determinar a área total de cada uma destas 3 regiões. ​"
    },
    {
        "nivel": "8",
        "assunto": "8",
        "numero": "1315",
        "saida": "Para cada jogo na entrada, seu programa deve imprimir uma linha na saída, descrevendo a menor área total dentro dos invólucros. A área deve ser impresa como um número real, com duas casas decimais de precisão, e o último dígito deve ser arrredondado. A entrada não conterá casos de teste onde as diferenças de arredondamento serão significantes.",
        "entrada": "Seu programa deve resolver diversas instâncias do jogo. Cada descrição do jogo inicia com uma linha contendo dois inteiros B e N, indicando, respectivamente, o número de elásticos e o número de pregos ( 2 ≤ B ≤ 50 e 2B + 1 ≤ N ≤ 101 ). As seguintes N linhas descrevem a posição dos pregos, cada linha contendo dois inteiros X e Y ( -10000 ≤ X, Y, ≤ 10000 ). A origem é o primeiro prego na entrada. O final da entrada é indicado por B = N = 0. Em todas as instâncias da entrada: Não há dois pregos no mesmo ponto; Não há três pregos na mesma linha; O prego de origem não pertence ao fecho convexo de todos os pregos (isto é, se você usa um elástico para envolver todos os pregos, ele não toca o prego de origem);",
        "titulo": "Não tão Convexo",
        "descricao": "Pregos e Elásticos. Este é um nome sugestivo de um jogo que é disputado por um grupo de crianças (todas elas, filhas de professores de geometria). As crianças determinam um número de pregos em um plano de madeira, colocados aleatoriamente. Então, elas escolhem um dos pregos para ser a origem, e um número B de elásticos. O desafio é usar todos B elásticos para envolver os pregos, de modo que: (i) cada elástico envolve um subconjunto de pregos; (ii) todos os pregos estão dentro de um invólucro; (iii) invólucros não sobrepõe uns aos outros, exceto o prego de origem, que é tocado por todos os elásticos; (iv) os elásticos devem formar invólucros que são polígonos convexos, com no mínimo três cantos; e (v) a área total dentro de um invólucro é a maior de todas as formas possíveis de envolver os pregos. Uma instância do jogo é mostrada na Figura 1. Figura 1: Um jogo com 19 pregos e 2 elásticos."
    },
    {
        "nivel": "9",
        "assunto": "8",
        "numero": "1497",
        "saida": "Para cada caso de teste, imprima S linhas, cada uma delas contendo um inteiro. Na enésima linha escreva o número de outros garotos que o enésimo garoto pode enxergar.",
        "entrada": "A entrada contém vários casos de teste e termina com EOF. Cada caso de teste consiste de várias linhas. A primeira linha contém 3 inteiros S, K e W, representando respectivamente o número de crianças procurando, o número total de crianças e o número de paredes do playground (1 ≤ S ≤ 10; 1 ≤ K, W ≤ 104 e S ≤ K). Cada uma das próximas K linhas descreve uma criança com dois inteiros X e Y(−106 ≤ X, Y ≤ 106 ), indicando que a localização da criança no plano XY é o ponto (X, Y); o primeiro S destas linhas descreve crianças procurando. Cada uma das próximas W linhas descreve uma parede com quatro inteiros X1, Y1, X2 e Y2 (−106 ≤ X1, Y1, X2, Y2 ≤ 106), indicando que os dois pontos finais da parede no plano XY são (X1, Y1) e (X2, Y2). Você pode assumir que os segmentos de paredes não se interseccionam e que nenhum dos 3 pontos dados na entrada são colineares.",
        "titulo": "Esconde-Esconde",
        "descricao": "Em um playground (parque infantil), um grupo de crianças está brincando de Esconde-Esconde. Como o nome sugere, o jogo é sobre crianças se escondendo e procurando outras crianças. Cada criança, ou é uma criança que se esconde ou uma criança que procura. As crianças que se escondem apenas tentam não ser encontradas, enquanto as que procuram tentam encontrá-las. Como você pode notar, tanto as crianças que se escondem quanto as que procuram tentam não ser encontradas, e para fazer isso, elas usam algumas paredes que existem no parque. Cada parede é representada por um segmento de linha e cada criança é representada por um ponto no plano XY. Duas crianças se enxergam se e somente se o segmento de linha entre eles não fizer intersecção com nenhum segmento de parede. Sua tarefa é calcular quantas outras crianças cada criança que procura consegue ver. Para simplificar o problema, você pode assumir que as paredes não se cruzam, mesmo nas suas pontas (extremidades). Além disso, não há três pontos colineares dentro do conjunto formado por crianças e pontos de extremidade das paredes, o que implica que as crianças não estão dentro das paredes, e que não há duas crianças no mesmo local."
    },
    {
        "nivel": "8",
        "assunto": "8",
        "numero": "1446",
        "saida": "Você deverá imprimir um cabeçalho indicando o número da instância que está tratando (Instancia h) e nas linhas seguintes o par cor e área total visível desta cor. Estas linhas devem ser ordenadas pelas áreas, de forma decrescente. Resolva os empates de forma crescente na cor. Apenas para simplificar a apresentação, mostre os valores das áreas arredondados em duas casas decimais. Imprima uma linha em branco após cada instância.",
        "entrada": "São dadas várias instâncias. Cada instância é composta por três figuras. Essas figuras são dadas uma por linha, com o formato ni ci xi1 yi1 xi2 yi2 ... xij yij ... xin yin​ para i = 1, 2, 3, onde 0 ≤ ni ≤ 200 é o número de pontos na borda da figura i, ci é a cor da figura i e os pares (xij , yij) representam os pontos da borda de i no sentido anti–horário, dados por inteiros. A entrada termina quando n1 = 0 (note que essa instância não deve ser processada).",
        "titulo": "Diagrama de Venn?",
        "descricao": "Mickayil estava na escola estudando teoria de conjuntos. As escolas em Praga são bastante rigorosas. A professora ensinou para os alunos como desenhar diagramas de Venn para três conjuntos, e pediu aos alunos que trabalhassem com os diagramas. Para impressionar a professora com diagramas bem desenhados, Mickayil decidiu que iria fazer diagramas coloridos. Para atingir esse objetivo, ele recortou três figuras convexas usando finos papéis coloridos. Mickayil percebeu que, sobrepondo as figuras, as intersecções podiam gerar novas cores. Assim, temos três figuras convexas sobre uma superfície plana, cada figura com uma cor. Quando figuras estão sobrepostas, a cor que vemos é uma mistura das cores das figuras. Podemos representar as cores por inteiros entre 0 e 15. A mistura de cores é feita através da soma dos valores das correspondentes cores módulo 16. Queremos saber o que enxergamos ao olhar para o diagrama de Venn do Mickayil, isto é, quais cores e em que quantidade elas aparecem. Vamos medir isso através da área visível de cada cor."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1292",
        "saida": "Para cada caso de teste imprima uma linha de saída que contém um número de ponto flutuante com 10 dígitos depois do ponto decimal. Este número indica o maior lado possível de um quadrado que se encaixa no pentágono.",
        "entrada": "A entrada contém vários casos de teste e termina com final de arquivo (EOF). Cada caso de teste é composto por uma linha contendo um número de ponto flutuante F (0 ≤ F ≤ 100000) que indica o tamanho de um lado do pentágono.",
        "titulo": "Problema com um Pentágono",
        "descricao": "Solicitaram que você colocasse o maior quadrado possível dentro de um pentágono regular (cujo internos ângulos são iguais assim como todos os seus lados). Sabe-se que um vértice do quadrado vai ser coincidente com outro vértice do quadrado como é mostrado na figura abaixo. Você tem que encontrar o comprimento de um dos lados do quadrado, uma vez que você tem a informação de um dos lados do pentágono regular. ​Fig.: quadrado em um pentágono."
    },
    {
        "nivel": "6",
        "assunto": "8",
        "numero": "1730",
        "saida": "Para cada caso de teste o seu programa deverá imprimir uma linha dizendo \"Test case K:\", onde K é o número da instância atual. Então nas seguintes linhas, imprimir em linhas separadas, os nomes das localidades onde o satélite é visível na mesma ordem em que aparecem no arquivo de entrada. Imprima uma linha em branco após cada instância.",
        "entrada": "A entrada consiste de vários casos de teste. Em cada caso de teste, a primeira linha contém o número de localizações N a serem verificados, seguido pela a posição do satélite: a sua latitude, a longitude (ambas em grau) e sua altura (em km) acima da superfície terrestre. Cada uma das seguintes linhas N contém um local na superfície terrestre: o nome da localidade (uma string com menos de 60 caracteres ASCII que não contém espaços em branco), seguido por sua latitude e longitude (ambos em graus). A entrada é terminada por N = 0.",
        "titulo": "Global Roaming",
        "descricao": "Hoje em dia vários dispositivos móveis de comunicação dependem de uma vista direta para um satélite. Portanto, para os provedores de comunicação é crucial saber onde os seus serviços estão disponíveis. Sua tarefa é identificar os locais que têm uma vista direta para um satélite particular, ou seja, este satélite deve estar acima do horizonte. Para facilitar as coisas, você pode assumir que a Terra é uma esfera perfeita com um raio de 6378km (montanhas serão adicionadas no próximo ano...). O satélite é um objeto pointlike acima da superfície terrestre."
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "2104",
        "saida": "Para cada instância na entrada, imprima uma linha contendo o valor da área comprometida pela malha energética formada pelos lasers no solo terrestre, com duas casas decimais. A saída deve ser escrita na saída padrão.",
        "entrada": "A entrada contém várias instâncias. Cada instância começa com um inteiro N (3 ≤ N ≤ 1000), que representa o número de plataformas flutuantes. A linha seguinte contém coordenadas (Xp, Yp, Zp), representando o local a partir de onde os lasers serão disparados. As N linhas seguintes contêm, cada uma, coordenadas (Xi, Yi, Zi), representando os locais das plataformas flutuantes. O solo terrestre é representado pelo plano XY. O ponto de disparo dos lasers sempre estará acima das plataformas. As plataformas estão em pontos distintos, e nenhum laser atinge o solo em uma coordenada (x ou y) menor que -100000 ou maior que 100000 (-100000 ≤ Xp,Yp,Zp,Xi,Yi,Zi ≤ 100000). A entrada termina quando N = 0.",
        "titulo": "Lasers",
        "descricao": "Estamos no ano de 2048. Na órbita do planeta Terra existem várias plataformas flutuantes que defendem nosso planeta contra asteróides e outras coisas que possam vir a colidir aqui. Essas plataformas possuem canhões que atiram projéteis em qualquer coisa que chegue perto. Um civilização alienígena, no entanto, pretende invadir nosso planeta, mas para isso precisa passar pela barreira de plataformas flutuantes. Para tal, vai se utilizar de um super multi-canhão a laser, que consegue disparar, ao mesmo tempo, milhares de feixes de raio laser, a partir de um único ponto. Assim, eles podem mirar em todas as plataformas do nosso planeta e destrui-los todos ao mesmo tempo, sem nos dar tempo de reação. O problema maior é que os raios são tão poderosos que não se limitam a destruir as plataformas flutuantes, eles acabam atingindo a Terra depois disso. Ao atingir o solo, cada feixe de laser se transforma em uma esfera de energia, e cada esfera de energia se liga à todas as outras através de fios, também de energia, formando assim uma malha energética que não pode ser tocada. É um ataque altamente perigoso e destrutivo. Dá muita raiva. Nosso espião intergalático Austero Poderes conseguiu adentrar no canhão e descobriu a partir de onde os alienígenas pretendem soltar os raios. Como ele não consegue simplesmente desativar os canhões, a base de controle de espionagem decidiu que, já que não será possível salvar as plataformas, temos que estimar qual será o estrago feito em solo terrestre pelos lasers. Assim, sabendo onde estão as plataformas e de onde sairão os lasers, você deverá definir qual será a área comprometida pela \"malha de energia\" que se formará na Terra. Vale lembrar que no ano de 2033 descobriu-se que a Terra é, na verdade, plana."
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "1411",
        "saida": "Para cada caso de teste, seu programa deve imprimir uma única linha, contendo o número mínimo de vértices que precisam ser removidos do polígono dado para formar um polígono regular. Se não for possível formar um polígono regular, a linha deve conter apenas o valor -1.",
        "entrada": "A entrada contém diversos casos de teste. A primeira linha de um caso de teste contém um inteiro N indicando o número de vértices do polígono inscrito (3 ≤ N ≤ 104). A segunda linha contém N inteiros Xi separados por espaços (1 ≤ Xi ≤ 103 para 0 ≤ i ≤ N - 1). Cada Xi representa o comprimento do arco definido no círculo circunscrito, no sentido horário, pelos vértices i e (i+1) mod N. Lembre-se que um arco é um segmento da circunferência de um círculo; não o confunda com coda, que é um segmento de linha cujos ambos extremos estão no círculo. O final da entrada é indicado por uma linha contendo apenas um zero.",
        "titulo": "Encolhendo Polígonos",
        "descricao": "Um polígono é dito inscrito em um círculo quando todos seus vértices estão naquele círculo. Nesse problema você receberá um polígono inscrito em um círculo, e você deve determinar o número mínimo de vértices que devem ser removidos para transformar o polígono dado em um polígono regular, i.e., um polígono que é equiângular (todos ângulos são congruentes) e equilateral (todos lados têm o mesmo comprimento). Quando você remove um vértice v você primeiro remove o vértice e os segmentos de reta conectando-o aos seus vértices adjacentes w1 e w2, e então você cria um novo segmento de reta conectando w1 e w2. A figura (a) abaixo ilustra um polígono inscrito em um círculo, com dez vértices, e a figura (b) mostra um pentágono (polígono regular com cinco lados) formado ao remover cinco vértices do polígono em (a). ​ Nesse problema consideraremos que qualquer polígono deve ter pelo menos três lados."
    },
    {
        "nivel": "5",
        "assunto": "8",
        "numero": "1560",
        "saida": "Para cada teste, a saída consiste de uma linha contendo a soma das energias dos triângulos formados pelos pontos pretos.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste começa por um linha com dois inteiros N e M (1 ≤ N, M ≤ 100), representando o número de pontos pretos e brancos respectivamente. Após a primeira linha, seguem N + M linhas com as coordenadas inteiras X, Y (0 ≤ X, Y ≤ 10000) dos pontos pretos e brancos. As N primeiras linhas representam os pontos pretos e as M últimas linhas representam os pontos brancos.",
        "titulo": "Energia dos Triângulos",
        "descricao": "Em um plano há N pontos pretos e M pontos brancos, sem trios de pontos colineares. A energia de um triângulo é igual a K2, onde K é igual ao número de pontos brancos no interior do triângulo. Qual é a soma da energia de todos os triângulos que podem ser formados pelos pontos pretos?"
    },
    {
        "nivel": "3",
        "assunto": "8",
        "numero": "1124",
        "saida": "Para cada caso de teste, o seu programa deve imprimir uma única linha com um único caractere: ‘S’ se for possível colocar os dois cilindros no elevador e ‘N’ caso contrário.",
        "entrada": "A entrada contém vários casos de teste. A primeira e única linha de cada caso de teste contém quatro números inteiros L, C, R1 e R2, separados por espaços em branco, indicando respectivamente a largura do elevador (1 ≤ L ≤ 100), o comprimento do elevador (1 ≤ C ≤ 100), e os raios dos cilindros (1 ≤ R1, R2 ≤ 100). O último caso de teste é seguido por uma linha que contém quatro zeros separados por espaços em branco.",
        "titulo": "Elevador",
        "descricao": "A FCC (Fábrica de Cilindros de Carbono) fabrica vários tipos de cilindros de carbono. A FCC está instalada no décimo andar de um prédio, e utiliza os vários elevadores do prédio para transportar os cilindros. Por questão de segurança, os cilindros devem ser transportados na posição vertical; como são pesados, no máximo dois cilindros podem ser transportados em uma única viagem de elevador. Os elevadores têm formato de paralelepípedo e sempre têm altura maior que a altura dos cilindros. Para minimizar o número de viagens de elevador para transportar os cilindros, a FCC quer, sempre que possível, colocar dois cilindros no elevador. A figura abaixo ilustra, esquematicamente (vista superior), um caso em que isto é possível (a), e um caso em que isto não é possível (b): Como existe uma quantidade muito grande de elevadores e de tipos de cilindros, a FCC quer que você escreva um programa que, dadas as dimensões do elevador e dos dois cilindros, determine se é possível colocar os dois cilindros no elevador."
    },
    {
        "nivel": "9",
        "assunto": "8",
        "numero": "1268",
        "saida": "Para cada caso de teste da entrada, seu programa deve produzir uma linha contendo ou “Mission impossible” ou “Contact informer K”, onde \"K\" é o índice do informante (como dado na entrada) com o maior coeficiente de infiltração, que pode ser alcançado pelo espião sem ir dentro de qualquer área de cobertura de radar. Se houver mais do que um informante que satisfaça esta condição, seu programa deve imprimir aquele te tiver o menor índice.",
        "entrada": "A entrada consiste de diversos casos de teste. A primeira linha de cada caso de teste descreve a borda do país inimigo, no formato: B X1 Y1 X2 Y2 ... XB YB  onde 3 ≤ B ≤ 1000 é o número de pontos na borda, e cada Xi Yi é a coordenada do enésimo ponto na borda. A borda do país consiste de segmentos de linha entre os pontos i e i + 1, e entre os pontos B e 1. A segunda linha denota o número de informantes e as suas respectivas posições, no formato: N X1 Y1 X2 Y2 ... XN YN  onde 1 ≤ N ≤ 1000 é o número de informantes, e Xi Yi é a coordenada do enésimo(i-th) informante. A terceira linha descreve a posição e o raio dos radares, no formato: M X1 Y1 R1 X2 Y2 R2 ... XM YM RM  onde 1 ≤ M ≤ 30 é o número de radares, Xi Yi é a coordenada do enésimo (i-th) radar, e Ri é o raio do enésimo (i-th) radar. Todas as coordenadas não inteiros 0 ≤ X, Y ≤ 1000. O raio dos radares são inteiros no intervalo 1 ≤ R ≤ 1000. Um caso de teste onde B = N = M = 0 indica o final da entrada. Este caso de teste não deverá ser processado.",
        "titulo": "Missão Impossível",
        "descricao": "Você foi contratado para explorar o território inimigo. É um negócio arriscado, você sabe disso. Então, é melhor você estar preparado! O inimigo colocou uma série de pontos de segurança por todo o país, a partir do qual os radares estão detectando qualquer veículo em movimento dentro de sua faixa de cobertura. Qualquer objeto detectado será imediatamente destruído. Felizmente lhe foi dado pelo seu governo um mapa do território inimigo, consistindo de coordenadas e dos raios de cobertura de cada radar. Você também tem uma lista de informantes locais (juntamente com suas localizações) com os quais poderá entrar em contato para obter informações valiosas. Sua missão é tentar entrar em contato com um desses informantes, de preferência aquele com maior coeficiente de infiltração. O coeficiente de infiltração de cada informante é simplesmente a distância do informante até a borda do país, onde tal distância é definida como o mínimo sobre todas as distâncias a partir da localização do informante até cada ponto da fronteira. Em sentido intuitivo, o informante com o maior coeficiente de infiltração é aquele que está localizado o máximo possível dentro do país e, presumivelmente, terá informações mais valiosas sobre o país. Seu primeiro pensamento é então projetar um programa de computador que vai verificar se existe um caminho de sua posição inicial, sempre o ponto (2000, 2000), até a localização de qualquer um dos informantes, sem cruzar qualquer região que é coberta pelo radar. Sempre que possível, o programa deve indicar qual informante alcançável é aquele que deverá ser contactado, de acordo com os critérios de coeficiente de infiltração acima descritos. Figura 1: Cenário Possível: o país inimigo tem a forma de um polígono simples (não necessariamente convexo).   Lembre-se que um polígono é chamado de simples se ele é descrito por um único limite não intersectado. As fronteiras do país serão dadas como uma seqüência de coordenadas X, Y correspondentes à seqüência de vértices do polígono. Você pode considerar que todos os centros do radar e coordenadas dos informantes estão localizados dentro das fronteiras do país. Note contudo, que a área coberta pelos radares podem incluir regiões de fora da fronteira.   No cenário exemplo da Figura 1, o informante I1 não pode ser conectado uma vez que ele está dentro da região coberta pelos radares. O informante I2, embora fora da região do radar, também não pode ser contactado uma vez que qualquer deslocamente até a localização dele irá através de regiões cobertas por radar, que são fatais. Ambos informantes I3 e I4 podem ser contactados e portanto, o informante I4 é o escolhido uma vez que o seu coeficiente de infiltração é maior do que o coeficiente do I3."
    },
    {
        "nivel": "6",
        "assunto": "8",
        "numero": "1296",
        "saida": "Para cada linha de entrada seu programa deverá produzir uma linha de saída. Esta linha deve conter a área do triângulo para a correspondente entrada. Se não for possível formar um triângulo com as medianas fornecidas, deverá ser impresso o valor -1. As áreas devem ser arredondadas no terceiro dígito após o ponto decimal.",
        "entrada": "A entrada contém aproximadamente 1000 casos de teste. Cada caso de teste é composto por três números que denotam o comprimento das medianas do triângulo. Todos os valores da entrada são menores do que 100. O final da entrada é determinado pelo final de arquivo (EOF).",
        "titulo": "Medianas",
        "descricao": "Dado o comprimento das três medianas de um triângulo, você terá que descobrir a área deste triângulo. Se você não tem muito conhecimento sobre geometria é importante que saiba que a mediana de um triângulo é formada pela conexão de qualquer vértice de um triângulo ao ponto central(médio) de sua borda oposta. Assim, um triângulo tem três medianas."
    },
    {
        "nivel": "6",
        "assunto": "8",
        "numero": "1818",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Na linha seguinte você deve imprimir a posição x y ideal para o ponto central do centro de convenções. Caso exista mais que um ponto ideal para a construção, imprima aquele com o menor valor para x. Caso ainda exista mais que uma opção, imprima aquele com o menor valor para y. Trunque os números impressos em exatamente três casas decimais. Caso não seja possível construir o centro, escreva a palavra impossível na linha. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "A entrada é composta de diversas instâncias. Cada instância inicia-se com uma linha contendo o número 0 ≤ n ≤ 1000 de árvores da floresta, seguida por n linhas contendo os pares ordenados xi yi, que representam as coordenadas das árvores da floresta. Todas as coordenadas dadas são inteiras. A entrada termina com n = 0.",
        "titulo": "Centro de Convenções",
        "descricao": "Já com a Final Mundial da Maratona de Programação em mente, o governo chinês iniciou um projeto para a construção de um centro de convenções novo. Esse centro será o mais moderno do mundo, com toda a infraestrutura para sediar importantes eventos. O governo já decidiu (e se decidiu está decidido) construí-lo no formato de uma circunferência. Quando visto de cima esse novo centro, com auxílio de toda sua iluminação de ultima geração, irá dar a impressão de ser uma grande nave espacial redonda. Com truques de luzes, pretende-se ainda criar a impressão de movimento para o imponente prédio. Porém todos sabem que a China possui um grande problema de espaço físico, e o único lugar disponível para a construção fica nos arredores de uma antiga floresta de árvores milenares. Para deixar o projeto ainda mais atraente, decidiu-se que o centro será construído dentro da floresta, mas sem derrubar uma única árvore. A sorte do projetista é que a floresta é esparsa, e existe bastante espaço entre as árvores em alguns lugares. Como se deseja criar o maior (no sentido da área construída) centro de convenções possível, sua tarefa é ajudar a encontrar o melhor lugar para a construção. Seu objetivo é encontrar as coordenadas do ponto central da construção, que deve estar dentro do fecho convexo induzido pelas árvores."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1783",
        "saida": "Para cada caso imprima uma linha contendo \"Caso #i: X Y\", onde i é o número do caso atual, iniciando em 1, e (X, Y) são as coordenadas de onde o buraco negro deve estar. X e Y são números reais com 2 casas decimais cada um. Para cada caso haverá exatamente uma solução válida.",
        "entrada": "A primeira linha contém um inteiro T (1 ≤ T ≤ 10000), o número de casos de teste. Cada caso de teste possui 4 linhas, cada uma com um par de números reais com 2 casas decimais, X e Y (-1000.0 ≤ X, Y ≤ 1000.0). Cada par representa, respectivamente, as antigas coordenadas da primeira e da segunda estrela, e as novas coordenadas da primeira e da segunda estrela. As posições antiga e nova de cada estrela são diferentes, assim como as posições de duas estrelas no mesmo instante de tempo.",
        "titulo": "Ih, Ferrou, um Buraco Negro!",
        "descricao": "André é um astrônomo amador que luta para revelar uma verdade ao mundo: há um buraco negro em direção à Terra! Todos os outros astrônomos tratam ele feito louco, e por consequência, as pessoas normais também, mas ele não desiste de derrubar essa conspiração! Mas como ele descobriu esse buraco negro? Foi assim: buracos negros possuem uma gravidade avassaladora, e todas as estrelas próximas a um começam a girar em torno dele. Algumas mais rápidas, outras mais lentas, algumas mais próximas, outras mais distantes, mas sempre mantendo velocidade angular e distância do buraco negro constantes. Ao observar o céu com seu telescópio um certo dia, André anotou as posições de todas as estrelas que viu. Um mês depois, repetiu a experiência e viu que duas certas estrelas haviam se movido, o que indica que caíram na órbita de um buraco negro! A imagem acima ilustra a trajetória de duas estrelas ao redor do buraco negro. Porém, André não é bom em matemática, e ele não sabe como calcular a posição exata do buraco negro. A superfície do céu pode ser representada por um plano coordenado por eixos X e Y, e ele possui as coordenadas antigas e novas das duas estrelas. Ajude-o calculando as coordenadas do buraco negro no céu e salve o mundo antes que seja tarde demais!"
    },
    {
        "nivel": "3",
        "assunto": "8",
        "numero": "2045",
        "saida": "Para cada instância solucionada, você deverá imprimir um identificador Instancia h em que h é um número inteiro, sequencial e crescente a partir de 1. Nas M linhas seguintes, você deve imprimir soldado k (para k = 1, . . . ,M) seguido de defender ou espanhol respectivamente se o soldado estiver dentro ou fora do forte. Uma linha em branco deve separar a saída de cada instância.",
        "entrada": "São dadas várias instâncias. Cada instância começa com um inteiro que é o número 0 ≤ N ≤ 1000 de vértices que a cerca do forte tem. O valor 0 indica o fim dos dados. Nas N linhas seguintes vêm as coordenadas dos postes da cerca do forte. Os postes são dados a partir do primeiro, seguindo a cerca em sentido horário. A seguir vem a posição da bandeira do Texas. Na próxima linha, vem o número 0 ≤ M ≤ 1000 de pessoas a serem verificadas. Nas M linhas seguintes vêm as coordenadas das posições de cada uma das pessoas. Todas as coordenadas fornecidas são números inteiros no intervalo [−100000; +100000].",
        "titulo": "Defendendo Alamo",
        "descricao": "O forte do Alamo, originalmente chamado de Misión San Antonio de Valero, foi fundado pelos missionários para abrigar os padres e os índios convertidos na região que era disputada pelos colonos americanos e espanhóis. Foi fundado no século XVIII e serviu de palco para a mais sangrenta batalha pela emancipação do Texas. A batalha do Alamo ocorreu em 23 de fevereiro de 1836 quando o exército do Gal. Antonio Lopes de Sant’Anna cercou o forte. Texanos e “tejanos” (chamados “defenders”) defenderam a posição por 13 dias. O forte do Alamo era uma fortificação de formato bastante intricado, cercado por uma alta cerca. Muitas vezes era difícil dizer se um soldado estava dentro ou fora dos limites do forte. Sua tarefa neste problema é dada uma instância de um forte, dado pelas coordenadas dos vértices da cerca, as coordenadas da bandeira do Texas e a posição de vários soldados, determinar quais deles são “defenders” e quais são espanhóis."
    },
    {
        "nivel": "1",
        "assunto": "8",
        "numero": "1875",
        "saida": "Para cada caso de teste, imprima o resultado da partida no tempo normal, baseado nos gols que foram marcados.",
        "entrada": "Haverá diversos casos de teste. O primeiro número a ser lido será um inteiro C, representando a quantidade de casos de teste. Cada caso de teste se inicia com um número inteiro P, representando a quantidade de gols na partida. A seguir serão lidos P linhas, cada um com dois caracteres M e S, indicando a primeira letra do time que marcou o gol e a primeira letra do time que sofreu o gol, respectivamente.",
        "titulo": "Tribol",
        "descricao": "Na cidade de Triangulândia, o maior sonho de sua população era construir um campo de futebol, mas lá todos os terrenos são triangulares. Se fosse para fazer um campo retangular, uma boa parte do terreno não seria aproveitada para construir o campo. Então, os irmãos Hipo e Tenusa tiveram uma grande ideia: A criação de um novo jogo, derivado do futebol, mas jogado em um campo triangular, e chamaram o jogo de Tribol. As regras eram simples: Jogam três equipes ao mesmo tempo: Red, Green e Blue. A partida tem um tempo de trinta minutos. A equipe que fizer um gol no adversário do sentido anti-horário ao mesmo, é um gol normal. A equipe que fizer um gol no adversário do sentido horário ao mesmo, vale o dobro. Se as três equipes fizerem a mesma quantidade de gols, ocorre um trempate Se as duas equipes que fizerem mais gols tiverem feito a mesma quantidade, ocorre um empate, e o jogo é decidido por pênaltis. A equipe que fizer mais gols, vence. Exemplo de partida. Os times estão dispostos no campo igual à imagem abaixo. A equipe Green faz um gol na equipe Blue e um gol na equipe Red, totalizando 3 gols; A equipe Blue faz dois gols na equipe Green, totalizando 2 gols; A equipe Red faz dois gols na equipe Green, totalizando 4 gols e vencendo a partida."
    },
    {
        "nivel": "8",
        "assunto": "8",
        "numero": "1102",
        "saida": "Para cada caso de teste da entrada seu programa deve imprimir uma única linha, contendo um número real, escrito com precisão de uma casa decimal, indicando a área da Nlogônia que seria destruída pelo ataque.",
        "entrada": "A entrada contém vários casos de teste. Cada caso de teste é composto por duas linhas. A primeira linha contém três números inteiros X, Y , R, com (X, Y ) representando as coordenadas do centro do círculo do muro de proteção (0 ≤ X ≤ 1000 e 0 ≤ Y ≤ 1000), e R o seu raio (1≤R≤100). A segunda linha contém quatro números inteiros P , Q, A e T , com (P, Q) representando as coordenadas da localização do canhão (0≤P≤1000 e 0≤Q≤1000), A representando a direção, em graus, do tiro (0≤A≤359), e T representa o ângulo de espalhamento, também em graus (1≤T≤179). O ângulo A é medido a partir do eixo x no sentido anti-horário, e o canhão está sempre fora dos domínios da Nlogônia, ou seja, a distância entre (X, Y ) e (P, Q) é maior do que R. O final da entrada é indicado por uma linha que contém três zeros separados por espaços em branco.",
        "titulo": "Ataque Fulminante",
        "descricao": "Desde que o Rei da Nlogônia construiu, décadas atrás, um enorme muro de proteção ao redor de todo o reino, os seus habitantes vivem em segurança. O muro é imponente, extremamente reforçado, e tem o formato de um círculo que envolve todos os domínios do Rei. No entanto, há algumas semanas os habitantes da Nlogônia estão apreensivos. Há boatos de que cientistas da Quadradônia, um povo bárbaro que habita as vizinhanças da Nlogônia, desenvolveram uma arma mortal, capaz de pulverizar tudo que esteja em sua mirada. A nova arma é um canhão que emite um feixe de prótons que se espalha com ângulo ø a partir da boca do canhão. A direção do tiro é indicada por um ângulo alpha, medido a partir do eixo x, no sentido anti-horário. A figura abaixo ilustra (a) um exemplo de ataque, (b) o que restaria da Nlogônia e (c) a área que seria destruída. Dados a coordenada do canhão, a direção do tiro e o ângulo de espalhamento do feixe de prótons, bem como a coordenada do centro e o valor do raio do muro de proteção, você deve escrever um programa para calcular a área da Nlogônia que será destruída."
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "1345",
        "saida": "Para cada campo minado de sua entrada seu programa deverá escrever uma linha com dois inteiros A e B, onde A ≤ B, descrevendo o tamanho da posição mais segura.",
        "entrada": "Seu programa deverá processar dados de diversos casos de teste. A primeira linha de um campo minado contém quatro inteiros X1, Y1, X2 e Y2 os quais são os limites do campo. (X1, Y1) são as coordenadas do canto inferior esquerdo do campo, (X2, Y2) são as coordenadas do canto superior direito do campo (-20000 ≤ X1 < X2 ≤ 20000 e -20000 ≤ Y1 < Y2 ≤ 20000). A segunda linha contém um único inteiro N indicando o número de minas detectadas no campo (1 ≤ N ≤ 300). As seguintes N linhas contém dois inteiros X e Y cada, descrevendo a posição da uma mina (X1 ≤ X ≤ X2 e Y1 ≤ Y ≤ Y2). Duas minas não compartilham a mesma posição. O final da entrada é indicado quando X1 = Y1 = X2 = Y2 = 0.",
        "titulo": "Região Segura",
        "descricao": "Você foi contratado pela Minas Nunca Mais, uma organização não-governamental que tem como objetivo o banimento do uso de minas terrestres. Além de trabalhar no aspecto político, tal como convencer governantes a entrar na Campanha Internacional de Banimento das Minas Terrestres, MNM também trabalha desarmando minas deixadas por guerras passadas. Hoje em dia, minas são detectadas por satélites ou aviões de vigilância. Mas para desarmar uma mina você precisa chegar próximo a ela. Na maioria dos casos, a única maneira de se aproximar de um campo minado é de helicóptero. Para limpar o campo, você precisa encontrar a região mais segura dentro do campo para que o helicóptero possa pousar nela. Esta região é um retângulo com lados paralelos aos eixos das coordenadas, sem nenhuma mina dentro e sendo o menor lado o maior possível. Mais precisamente, seja A e B o comprimento dos lados de todos os possíveis retângulos com não contém nenhuma mina e A <= B; a região mais segura é um retângulo com o maior valor de A e o maior valor de B. Isto é, entre todos os retângulos que não contém nenhuma mina e nos quais o menor lado é o A (maior possível), a região mais segura é o retângulo que contém o maior B. Dado o limite do retângulo de um campo minado e as posições de todas as minas dentro deste, você deverá escrever um programa para encontrar o tamanho da região mais segura."
    },
    {
        "nivel": "7",
        "assunto": "8",
        "numero": "2083",
        "saida": "Imprimir uma única linha contendo um número inteiro que representa o número de quantidades visíveis de palmeiras que existem ao longo da estrada.",
        "entrada": "A primeira linha contém um número inteiro N que indica o número de palmeiras que existem no lado da estrada (1 ≤ N ≤ 1000). Cada uma das N linhas seguintes descreve uma palmeira diferente usando dois números inteiros X e Y, que representam as coordenadas da referida palmeira no plano XY (1 ≤ X, Y ≤ 105). Não há duas palmeiras que compartilham a mesma posição.",
        "titulo": "Beira da Estrada",
        "descricao": "No lado da estrada, há palmeiras, há um bar, há sombra, há algo mais. Neste problema, estamos particularmente interessados ​​nas palmeiras. Ana, Adam, Alan e Amanda organizou uma viagem: enquanto Ana e Adam vão lidar com coisas insignificantes como verificar o carro, preparar a bagagem e encontrar um lugar para ficar, Alan e Amanda se dedicaram para a parte mais importante: estudar as vistas das palmeiras que eles teriam acesso na estrada. A estrada onde eles estão dirigindo agora é completamente em linha reta, e neste problema vai ser representada pela reta Y = 0 do plano XY. No lado da estrada com coordenadas Y> 0 há palmeiras, que serão representadas por diferentes pontos do plano XY com Y positivo. Alan e Amanda notaram que a partir de cada ponto na estrada certas palmeiras são visíveis, e, em geral, estes variam ao longo da estrada. Uma palmeira é dito ser visível a partir de um ponto na estrada, se e somente se o segmento que une esses dois pontos não passa por qualquer outra palmeira. Na figura a seguir no primeiro exemplo os círculos vazios representam palmeiras , enquanto os cheios representam alguns pontos possíveis na estrada. Do ponto P as palmeiras que são visíveis são A, B e D, pois a palmeira C está escondida atrás da palmeira A. Do ponto Q as palmeiras visíveis são A, C e D, pois a palmeira B agora está escondida atrás da palmeira A. Do ponto R todas as palmeiras são visíveis, e do ponto S apenas as palmeiras A e D são visíveis, pois as palmeiras B e C estão escondidas atrás da palmeira D. Enquanto Ana e Adam se revezam para dirigir o carro, Alan e Amanda discutem os benefícios de saber quantas palmeiras visíveis existem. Dado um conjunto de palmeiras, um número inteiro M é o número visível de palmeiras se, e somente se, existir pelo menos um ponto na estrada (isto é, um ponto de coordenada Y = 0) a partir do qual exatamente M palmeiras são visíveis. No exemplo ilustrado acima, 2, 3 e 4 são quantidades visíveis de palmeiras que podem ser vistas dos pontos S, P e R na estrada, respectivamente. Por outro lado, 0 e 1 não são quantidades visíveis, porque a partir de qualquer ponto da estrada, pelo menos, 2 palmeiras são visíveis. Finalmente, nenhuma quantidade M > 4 é visível, uma vez que existem apenas 4 palmeiras no total. Portanto, neste exemplo, existem 3 quantidades visíveis de palmeiras. (Note que se M é uma quantidade visível de palmeiras, pode haver mais do que um ponto sobre a estrada que apresenta esta situação; no exemplo anterior, este é o caso dos pontos P e Q para a quantidade visível 3, bem como um número infinito de outros pontos juntamente com R para a quantidade visível 4.) Ana e Adam estão ficando cansados. Eles querem que Alan e Amanda deixem de lado as palmeiras e pelo menos preparem alguns sanduíches. Por essa razão, você precisa fazer um programa para calcular quantas diferentes quantidades visíveis de palmeiras existem ao longo da estrada."
    },
    {
        "nivel": "4",
        "assunto": "8",
        "numero": "1938",
        "saida": "Seu programa deve produzir uma única linha contendo o número de diferentes localizações possíveis para a praça.",
        "entrada": "A primeira linha da entrada contém um número inteiro N, 1 ≤ N ≤ 3000, representanto o número de postes. As N linhas seguintes descreverão, cada uma, a posição de um poste. A posição de um poste será dada por um par de números inteiros, X e Y, −108 ≤ X, Y ≤ 108 , correspondendo às suas coordenadas no plano.",
        "titulo": "Praça do Retângulo",
        "descricao": "Retangolândia é uma cidade muito antiga e, por isso, guarda diversas riquezas históricas. A cidade foi planejada muitas décadas atrás, com todas as suas ruas indo nas direções norte-sul ou leste-oeste. Atualmente, há um projeto de revitalização da cidade, no qual uma nova praça retangular será feita. A escolha da nova praça será feita pela administração pública mas, no momento, eles estão interessados em quais seriam as posições possíveis para esta praça, levando-se em consideração que a praça deve estar alinhada com as ruas e, assim, quando visualizada em um mapa, seus lados devem ser segmentos horizontais e verticais. Com o objetivo de conciliar as riquezas históricas com as novas iniciativas, alguns cuidados devem ser tomados. Existem postes de iluminação, do século XIX, espalhados pela cidade. Por seu valor histórico, nenhum poste pode ser derrubado. Por conta do desgaste natural e da falta de manutenção, nenhuma rua possui mais do que um poste restante. Para o posicionamento da praça, entretanto, não se deseja que um destes postes esteja no interior da mesma. Por outro lado, o projeto paisagístico da nova praça prevê que dois dos postes históricos estejam em duas das esquinas. A figura abaixo mostra um exemplo com quatro postes e as três localizações possíveis para a praça. A prefeitura contratou uma empresa de georeferenciamento para efetuar um levantamento das posições dos postes. Com esses dados em mãos, o próximo passo é determinar quantas são as localizações possíveis para a praça, para que se possa dimensionar o tamanho da equipe necessária para avaliar cada uma das localizações."
    }
]